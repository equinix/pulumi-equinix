// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Policy
    /// 
    /// Additional Documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
    /// </summary>
    [EquinixResourceType("equinix:fabric/routeFilter:RouteFilter")]
    public partial class RouteFilter : global::Pulumi.CustomResource
    {
        [Output("changeLogs")]
        public Output<ImmutableArray<Outputs.RouteFilterChangeLog>> ChangeLogs { get; private set; } = null!;

        /// <summary>
        /// An object with the details of the previous change applied on the Route Filter
        /// </summary>
        [Output("changes")]
        public Output<ImmutableArray<Outputs.RouteFilterChange>> Changes { get; private set; } = null!;

        /// <summary>
        /// The number of Fabric Connections that this Route Filter is attached to
        /// </summary>
        [Output("connectionsCount")]
        public Output<int> ConnectionsCount { get; private set; } = null!;

        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Route filter URI
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        /// </summary>
        [Output("notMatchedRuleAction")]
        public Output<string> NotMatchedRuleAction { get; private set; } = null!;

        /// <summary>
        /// The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        /// </summary>
        [Output("project")]
        public Output<Outputs.RouteFilterProject> Project { get; private set; } = null!;

        /// <summary>
        /// The number of Route Filter Rules attached to this Route Filter
        /// </summary>
        [Output("rulesCount")]
        public Output<int> RulesCount { get; private set; } = null!;

        /// <summary>
        /// State of the Route Filter in its lifecycle
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned ID for Route Filter
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a RouteFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteFilter(string name, RouteFilterArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeFilter:RouteFilter", name, args ?? new RouteFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteFilter(string name, Input<string> id, RouteFilterState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeFilter:RouteFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteFilter Get(string name, Input<string> id, RouteFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteFilter(name, id, state, options);
        }
    }

    public sealed class RouteFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        /// </summary>
        [Input("project", required: true)]
        public Input<Inputs.RouteFilterProjectArgs> Project { get; set; } = null!;

        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RouteFilterArgs()
        {
        }
        public static new RouteFilterArgs Empty => new RouteFilterArgs();
    }

    public sealed class RouteFilterState : global::Pulumi.ResourceArgs
    {
        [Input("changeLogs")]
        private InputList<Inputs.RouteFilterChangeLogGetArgs>? _changeLogs;
        public InputList<Inputs.RouteFilterChangeLogGetArgs> ChangeLogs
        {
            get => _changeLogs ?? (_changeLogs = new InputList<Inputs.RouteFilterChangeLogGetArgs>());
            set => _changeLogs = value;
        }

        [Input("changes")]
        private InputList<Inputs.RouteFilterChangeGetArgs>? _changes;

        /// <summary>
        /// An object with the details of the previous change applied on the Route Filter
        /// </summary>
        public InputList<Inputs.RouteFilterChangeGetArgs> Changes
        {
            get => _changes ?? (_changes = new InputList<Inputs.RouteFilterChangeGetArgs>());
            set => _changes = value;
        }

        /// <summary>
        /// The number of Fabric Connections that this Route Filter is attached to
        /// </summary>
        [Input("connectionsCount")]
        public Input<int>? ConnectionsCount { get; set; }

        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Route filter URI
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        /// </summary>
        [Input("notMatchedRuleAction")]
        public Input<string>? NotMatchedRuleAction { get; set; }

        /// <summary>
        /// The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        /// </summary>
        [Input("project")]
        public Input<Inputs.RouteFilterProjectGetArgs>? Project { get; set; }

        /// <summary>
        /// The number of Route Filter Rules attached to this Route Filter
        /// </summary>
        [Input("rulesCount")]
        public Input<int>? RulesCount { get; set; }

        /// <summary>
        /// State of the Route Filter in its lifecycle
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix Assigned ID for Route Filter
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public RouteFilterState()
        {
        }
        public static new RouteFilterState Empty => new RouteFilterState();
    }
}
