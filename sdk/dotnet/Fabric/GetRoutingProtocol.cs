// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRoutingProtocol
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
        /// 
        /// API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
        /// 
        /// Additional documentation:
        /// * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
        /// * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var routingProtocolDataName = Equinix.Fabric.GetRoutingProtocol.Invoke(new()
        ///     {
        ///         ConnectionUuid = "&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;",
        ///         Uuid = "&lt;uuid_of_routing_protocol&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Id),
        ///         ["name"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Name),
        ///         ["type"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Type),
        ///         ["directIpv4"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.DirectIpv4?.EquinixIfaceIp),
        ///         ["directIpv6"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.DirectIpv6?.EquinixIfaceIp),
        ///         ["bgpIpv4CustomerPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.CustomerPeerIp),
        ///         ["bgpIpv4EquinixPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.EquinixPeerIp),
        ///         ["bgpIpv4Enabled"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.Enabled),
        ///         ["bgpIpv6CustomerPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.CustomerPeerIp),
        ///         ["bgpIpv6EquinixPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.EquinixPeerIp),
        ///         ["bgpIpv6Enabled"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.Enabled),
        ///         ["customerAsn"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.CustomerAsn),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRoutingProtocolResult> InvokeAsync(GetRoutingProtocolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoutingProtocolResult>("equinix:fabric/getRoutingProtocol:getRoutingProtocol", args ?? new GetRoutingProtocolArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
        /// 
        /// API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
        /// 
        /// Additional documentation:
        /// * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
        /// * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var routingProtocolDataName = Equinix.Fabric.GetRoutingProtocol.Invoke(new()
        ///     {
        ///         ConnectionUuid = "&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;",
        ///         Uuid = "&lt;uuid_of_routing_protocol&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Id),
        ///         ["name"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Name),
        ///         ["type"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.Type),
        ///         ["directIpv4"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.DirectIpv4?.EquinixIfaceIp),
        ///         ["directIpv6"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.DirectIpv6?.EquinixIfaceIp),
        ///         ["bgpIpv4CustomerPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.CustomerPeerIp),
        ///         ["bgpIpv4EquinixPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.EquinixPeerIp),
        ///         ["bgpIpv4Enabled"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv4?.Enabled),
        ///         ["bgpIpv6CustomerPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.CustomerPeerIp),
        ///         ["bgpIpv6EquinixPeerIp"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.EquinixPeerIp),
        ///         ["bgpIpv6Enabled"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.BgpIpv6?.Enabled),
        ///         ["customerAsn"] = routingProtocolDataName.Apply(getRoutingProtocolResult =&gt; getRoutingProtocolResult.CustomerAsn),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoutingProtocolResult> Invoke(GetRoutingProtocolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoutingProtocolResult>("equinix:fabric/getRoutingProtocol:getRoutingProtocol", args ?? new GetRoutingProtocolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoutingProtocolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid", required: true)]
        public string ConnectionUuid { get; set; } = null!;

        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        [Input("uuid", required: true)]
        public string Uuid { get; set; } = null!;

        public GetRoutingProtocolArgs()
        {
        }
        public static new GetRoutingProtocolArgs Empty => new GetRoutingProtocolArgs();
    }

    public sealed class GetRoutingProtocolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid", required: true)]
        public Input<string> ConnectionUuid { get; set; } = null!;

        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public GetRoutingProtocolInvokeArgs()
        {
        }
        public static new GetRoutingProtocolInvokeArgs Empty => new GetRoutingProtocolInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoutingProtocolResult
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBfdResult Bfd;
        /// <summary>
        /// BGP authorization key
        /// </summary>
        public readonly string BgpAuthKey;
        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBgpIpv4Result BgpIpv4;
        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBgpIpv6Result BgpIpv6;
        /// <summary>
        /// Captures Routing Protocol lifecycle change information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolChangeLogResult> ChangeLogs;
        /// <summary>
        /// Routing Protocol configuration Changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolChangeResult> Changes;
        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        public readonly string ConnectionUuid;
        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        public readonly int CustomerAsn;
        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        public readonly Outputs.GetRoutingProtocolDirectIpv4Result DirectIpv4;
        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        public readonly Outputs.GetRoutingProtocolDirectIpv6Result DirectIpv6;
        /// <summary>
        /// Equinix ASN
        /// </summary>
        public readonly int EquinixAsn;
        /// <summary>
        /// Routing Protocol URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Routing Protocol type-specific operational data
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolOperationResult> Operations;
        /// <summary>
        /// Routing Protocol overall state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Defines the routing protocol type like BGP or DIRECT
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetRoutingProtocolResult(
            Outputs.GetRoutingProtocolBfdResult bfd,

            string bgpAuthKey,

            Outputs.GetRoutingProtocolBgpIpv4Result bgpIpv4,

            Outputs.GetRoutingProtocolBgpIpv6Result bgpIpv6,

            ImmutableArray<Outputs.GetRoutingProtocolChangeLogResult> changeLogs,

            ImmutableArray<Outputs.GetRoutingProtocolChangeResult> changes,

            string connectionUuid,

            int customerAsn,

            string description,

            Outputs.GetRoutingProtocolDirectIpv4Result directIpv4,

            Outputs.GetRoutingProtocolDirectIpv6Result directIpv6,

            int equinixAsn,

            string href,

            string id,

            string name,

            ImmutableArray<Outputs.GetRoutingProtocolOperationResult> operations,

            string state,

            string type,

            string uuid)
        {
            Bfd = bfd;
            BgpAuthKey = bgpAuthKey;
            BgpIpv4 = bgpIpv4;
            BgpIpv6 = bgpIpv6;
            ChangeLogs = changeLogs;
            Changes = changes;
            ConnectionUuid = connectionUuid;
            CustomerAsn = customerAsn;
            Description = description;
            DirectIpv4 = directIpv4;
            DirectIpv6 = directIpv6;
            EquinixAsn = equinixAsn;
            Href = href;
            Id = id;
            Name = name;
            Operations = operations;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
