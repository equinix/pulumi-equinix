// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRoutingProtocol
    {
        public static Task<GetRoutingProtocolResult> InvokeAsync(GetRoutingProtocolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoutingProtocolResult>("equinix:fabric/getRoutingProtocol:getRoutingProtocol", args ?? new GetRoutingProtocolArgs(), options.WithDefaults());

        public static Output<GetRoutingProtocolResult> Invoke(GetRoutingProtocolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoutingProtocolResult>("equinix:fabric/getRoutingProtocol:getRoutingProtocol", args ?? new GetRoutingProtocolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoutingProtocolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        [Input("bfd")]
        public Inputs.GetRoutingProtocolBfdArgs? Bfd { get; set; }

        /// <summary>
        /// BGP authorization key
        /// </summary>
        [Input("bgpAuthKey")]
        public string? BgpAuthKey { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        [Input("bgpIpv4")]
        public Inputs.GetRoutingProtocolBgpIpv4Args? BgpIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        [Input("bgpIpv6")]
        public Inputs.GetRoutingProtocolBgpIpv6Args? BgpIpv6 { get; set; }

        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid", required: true)]
        public string ConnectionUuid { get; set; } = null!;

        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        [Input("customerAsn")]
        public int? CustomerAsn { get; set; }

        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        [Input("directIpv4")]
        public Inputs.GetRoutingProtocolDirectIpv4Args? DirectIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        [Input("directIpv6")]
        public Inputs.GetRoutingProtocolDirectIpv6Args? DirectIpv6 { get; set; }

        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("uuid")]
        public string? Uuid { get; set; }

        public GetRoutingProtocolArgs()
        {
        }
        public static new GetRoutingProtocolArgs Empty => new GetRoutingProtocolArgs();
    }

    public sealed class GetRoutingProtocolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        [Input("bfd")]
        public Input<Inputs.GetRoutingProtocolBfdInputArgs>? Bfd { get; set; }

        /// <summary>
        /// BGP authorization key
        /// </summary>
        [Input("bgpAuthKey")]
        public Input<string>? BgpAuthKey { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        [Input("bgpIpv4")]
        public Input<Inputs.GetRoutingProtocolBgpIpv4InputArgs>? BgpIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        [Input("bgpIpv6")]
        public Input<Inputs.GetRoutingProtocolBgpIpv6InputArgs>? BgpIpv6 { get; set; }

        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid", required: true)]
        public Input<string> ConnectionUuid { get; set; } = null!;

        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        [Input("customerAsn")]
        public Input<int>? CustomerAsn { get; set; }

        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        [Input("directIpv4")]
        public Input<Inputs.GetRoutingProtocolDirectIpv4InputArgs>? DirectIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        [Input("directIpv6")]
        public Input<Inputs.GetRoutingProtocolDirectIpv6InputArgs>? DirectIpv6 { get; set; }

        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public GetRoutingProtocolInvokeArgs()
        {
        }
        public static new GetRoutingProtocolInvokeArgs Empty => new GetRoutingProtocolInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoutingProtocolResult
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBfdResult? Bfd;
        /// <summary>
        /// BGP authorization key
        /// </summary>
        public readonly string? BgpAuthKey;
        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBgpIpv4Result? BgpIpv4;
        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        public readonly Outputs.GetRoutingProtocolBgpIpv6Result? BgpIpv6;
        /// <summary>
        /// Captures Routing Protocol lifecycle change information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolChangeLogResult> ChangeLogs;
        /// <summary>
        /// Routing Protocol configuration Changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolChangeResult> Changes;
        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        public readonly string ConnectionUuid;
        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        public readonly int? CustomerAsn;
        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        public readonly Outputs.GetRoutingProtocolDirectIpv4Result? DirectIpv4;
        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        public readonly Outputs.GetRoutingProtocolDirectIpv6Result? DirectIpv6;
        /// <summary>
        /// Equinix ASN
        /// </summary>
        public readonly int EquinixAsn;
        /// <summary>
        /// Routing Protocol URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Routing Protocol type-specific operational data
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProtocolOperationResult> Operations;
        /// <summary>
        /// Routing Protocol overall state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Defines the routing protocol type like BGP or DIRECT
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetRoutingProtocolResult(
            Outputs.GetRoutingProtocolBfdResult? bfd,

            string? bgpAuthKey,

            Outputs.GetRoutingProtocolBgpIpv4Result? bgpIpv4,

            Outputs.GetRoutingProtocolBgpIpv6Result? bgpIpv6,

            ImmutableArray<Outputs.GetRoutingProtocolChangeLogResult> changeLogs,

            ImmutableArray<Outputs.GetRoutingProtocolChangeResult> changes,

            string connectionUuid,

            int? customerAsn,

            string? description,

            Outputs.GetRoutingProtocolDirectIpv4Result? directIpv4,

            Outputs.GetRoutingProtocolDirectIpv6Result? directIpv6,

            int equinixAsn,

            string href,

            string id,

            string? name,

            ImmutableArray<Outputs.GetRoutingProtocolOperationResult> operations,

            string state,

            string? type,

            string uuid)
        {
            Bfd = bfd;
            BgpAuthKey = bgpAuthKey;
            BgpIpv4 = bgpIpv4;
            BgpIpv6 = bgpIpv6;
            ChangeLogs = changeLogs;
            Changes = changes;
            ConnectionUuid = connectionUuid;
            CustomerAsn = customerAsn;
            Description = description;
            DirectIpv4 = directIpv4;
            DirectIpv6 = directIpv6;
            EquinixAsn = equinixAsn;
            Href = href;
            Id = id;
            Name = name;
            Operations = operations;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
