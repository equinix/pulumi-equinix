// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRouteAggregationRules
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raRules = Equinix.Fabric.GetRouteAggregationRules.Invoke(new()
        ///     {
        ///         RouteAggregationId = "&lt;route_aggregation_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationRulesPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["routeAggregationRuleName"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Name),
        ///         ["routeAggregationRuleDescription"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Description),
        ///         ["routeAggregationRulePrefix"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Prefix),
        ///         ["routeAggregationRuleState"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.State),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteAggregationRulesResult> InvokeAsync(GetRouteAggregationRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteAggregationRulesResult>("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", args ?? new GetRouteAggregationRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raRules = Equinix.Fabric.GetRouteAggregationRules.Invoke(new()
        ///     {
        ///         RouteAggregationId = "&lt;route_aggregation_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationRulesPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["routeAggregationRuleName"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Name),
        ///         ["routeAggregationRuleDescription"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Description),
        ///         ["routeAggregationRulePrefix"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Prefix),
        ///         ["routeAggregationRuleState"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.State),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteAggregationRulesResult> Invoke(GetRouteAggregationRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteAggregationRulesResult>("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", args ?? new GetRouteAggregationRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raRules = Equinix.Fabric.GetRouteAggregationRules.Invoke(new()
        ///     {
        ///         RouteAggregationId = "&lt;route_aggregation_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationRulesPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["routeAggregationRuleName"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Name),
        ///         ["routeAggregationRuleDescription"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Description),
        ///         ["routeAggregationRulePrefix"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.Prefix),
        ///         ["routeAggregationRuleState"] = raRules.Apply(getRouteAggregationRulesResult =&gt; getRouteAggregationRulesResult.Datas[0]?.State),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteAggregationRulesResult> Invoke(GetRouteAggregationRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteAggregationRulesResult>("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", args ?? new GetRouteAggregationRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteAggregationRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pagination details for the returned route aggregation rules list
        /// </summary>
        [Input("pagination")]
        public Inputs.GetRouteAggregationRulesPaginationArgs? Pagination { get; set; }

        /// <summary>
        /// The uuid of the route aggregation rule this data source should retrieve
        /// </summary>
        [Input("routeAggregationId", required: true)]
        public string RouteAggregationId { get; set; } = null!;

        public GetRouteAggregationRulesArgs()
        {
        }
        public static new GetRouteAggregationRulesArgs Empty => new GetRouteAggregationRulesArgs();
    }

    public sealed class GetRouteAggregationRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pagination details for the returned route aggregation rules list
        /// </summary>
        [Input("pagination")]
        public Input<Inputs.GetRouteAggregationRulesPaginationInputArgs>? Pagination { get; set; }

        /// <summary>
        /// The uuid of the route aggregation rule this data source should retrieve
        /// </summary>
        [Input("routeAggregationId", required: true)]
        public Input<string> RouteAggregationId { get; set; } = null!;

        public GetRouteAggregationRulesInvokeArgs()
        {
        }
        public static new GetRouteAggregationRulesInvokeArgs Empty => new GetRouteAggregationRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteAggregationRulesResult
    {
        /// <summary>
        /// Returned list of route aggregation rule objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteAggregationRulesDataResult> Datas;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Pagination details for the returned route aggregation rules list
        /// </summary>
        public readonly Outputs.GetRouteAggregationRulesPaginationResult? Pagination;
        /// <summary>
        /// The uuid of the route aggregation rule this data source should retrieve
        /// </summary>
        public readonly string RouteAggregationId;

        [OutputConstructor]
        private GetRouteAggregationRulesResult(
            ImmutableArray<Outputs.GetRouteAggregationRulesDataResult> datas,

            string id,

            Outputs.GetRouteAggregationRulesPaginationResult? pagination,

            string routeAggregationId)
        {
            Datas = datas;
            Id = id;
            Pagination = pagination;
            RouteAggregationId = routeAggregationId;
        }
    }
}
