// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules'
    /// }
    /// 
    /// Additional Documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var newStreamAlertRule = new Equinix.Fabric.StreamAlertRule("new_stream_alert_rule", new()
    ///     {
    ///         StreamId = "&lt;stream_id&gt;",
    ///         Name = "&lt;name&gt;",
    ///         Type = "METRIC_ALERT",
    ///         Description = "&lt;description&gt;",
    ///         Enabled = true,
    ///         Operand = "ABOVE",
    ///         WindowSize = "&lt;window_size&gt;",
    ///         WarningThreshold = "&lt;warning_threshold&gt;",
    ///         CriticalThreshold = "&lt;critical_threshold&gt;",
    ///         MetricName = "equinix.fabric.connection.bandwidth_tx.usage",
    ///         ResourceSelector = new Equinix.Fabric.Inputs.StreamAlertRuleResourceSelectorArgs
    ///         {
    ///             Includes = new[]
    ///             {
    ///                 "*/connections/&lt;connection_id&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["streamAlertRuleType"] = newStreamAlertRule.Type,
    ///         ["streamAlertRuleId"] = newStreamAlertRule.Uuid,
    ///         ["streamAlertRuleStreamId"] = newStreamAlertRule.StreamId,
    ///         ["streamAlertRuleState"] = newStreamAlertRule.State,
    ///     };
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/streamAlertRule:StreamAlertRule")]
    public partial class StreamAlertRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Details of the last change on the stream resource
        /// </summary>
        [Output("changeLog")]
        public Output<Outputs.StreamAlertRuleChangeLog> ChangeLog { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule metric critical threshold
        /// </summary>
        [Output("criticalThreshold")]
        public Output<string> CriticalThreshold { get; private set; } = null!;

        /// <summary>
        /// Customer-provided stream alert rule description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule enabled status
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Equinix assigned URI of the stream alert rule
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule metric name
        /// </summary>
        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        /// <summary>
        /// Customer-provided stream alert rule name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule metric operand
        /// </summary>
        [Output("operand")]
        public Output<string> Operand { get; private set; } = null!;

        /// <summary>
        /// Resource selector for the stream alert rule
        /// </summary>
        [Output("resourceSelector")]
        public Output<Outputs.StreamAlertRuleResourceSelector> ResourceSelector { get; private set; } = null!;

        /// <summary>
        /// Value representing provisioning status for the stream alert rule
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The stream UUID that contains this alert rule
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.StreamAlertRuleTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Type of the stream alert rule
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix assigned unique identifier for the stream alert rule
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule metric warning threshold
        /// </summary>
        [Output("warningThreshold")]
        public Output<string> WarningThreshold { get; private set; } = null!;

        /// <summary>
        /// Stream alert rule metric window size
        /// </summary>
        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a StreamAlertRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamAlertRule(string name, StreamAlertRuleArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/streamAlertRule:StreamAlertRule", name, args ?? new StreamAlertRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamAlertRule(string name, Input<string> id, StreamAlertRuleState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/streamAlertRule:StreamAlertRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamAlertRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamAlertRule Get(string name, Input<string> id, StreamAlertRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamAlertRule(name, id, state, options);
        }
    }

    public sealed class StreamAlertRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Stream alert rule metric critical threshold
        /// </summary>
        [Input("criticalThreshold", required: true)]
        public Input<string> CriticalThreshold { get; set; } = null!;

        /// <summary>
        /// Customer-provided stream alert rule description
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Stream alert rule enabled status
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Stream alert rule metric name
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// Customer-provided stream alert rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Stream alert rule metric operand
        /// </summary>
        [Input("operand", required: true)]
        public Input<string> Operand { get; set; } = null!;

        /// <summary>
        /// Resource selector for the stream alert rule
        /// </summary>
        [Input("resourceSelector")]
        public Input<Inputs.StreamAlertRuleResourceSelectorArgs>? ResourceSelector { get; set; }

        /// <summary>
        /// The stream UUID that contains this alert rule
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.StreamAlertRuleTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of the stream alert rule
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Stream alert rule metric warning threshold
        /// </summary>
        [Input("warningThreshold", required: true)]
        public Input<string> WarningThreshold { get; set; } = null!;

        /// <summary>
        /// Stream alert rule metric window size
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public StreamAlertRuleArgs()
        {
        }
        public static new StreamAlertRuleArgs Empty => new StreamAlertRuleArgs();
    }

    public sealed class StreamAlertRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details of the last change on the stream resource
        /// </summary>
        [Input("changeLog")]
        public Input<Inputs.StreamAlertRuleChangeLogGetArgs>? ChangeLog { get; set; }

        /// <summary>
        /// Stream alert rule metric critical threshold
        /// </summary>
        [Input("criticalThreshold")]
        public Input<string>? CriticalThreshold { get; set; }

        /// <summary>
        /// Customer-provided stream alert rule description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Stream alert rule enabled status
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Equinix assigned URI of the stream alert rule
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Stream alert rule metric name
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// Customer-provided stream alert rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Stream alert rule metric operand
        /// </summary>
        [Input("operand")]
        public Input<string>? Operand { get; set; }

        /// <summary>
        /// Resource selector for the stream alert rule
        /// </summary>
        [Input("resourceSelector")]
        public Input<Inputs.StreamAlertRuleResourceSelectorGetArgs>? ResourceSelector { get; set; }

        /// <summary>
        /// Value representing provisioning status for the stream alert rule
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The stream UUID that contains this alert rule
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.StreamAlertRuleTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of the stream alert rule
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix assigned unique identifier for the stream alert rule
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Stream alert rule metric warning threshold
        /// </summary>
        [Input("warningThreshold")]
        public Input<string>? WarningThreshold { get; set; }

        /// <summary>
        /// Stream alert rule metric window size
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public StreamAlertRuleState()
        {
        }
        public static new StreamAlertRuleState Empty => new StreamAlertRuleState();
    }
}
