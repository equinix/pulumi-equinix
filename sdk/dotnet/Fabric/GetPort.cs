// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetPort
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch port by uuid
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var portDataName = Equinix.Fabric.GetPort.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_port&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPortResult> InvokeAsync(GetPortArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPortResult>("equinix:fabric/getPort:getPort", args ?? new GetPortArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch port by uuid
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var portDataName = Equinix.Fabric.GetPort.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_port&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPortResult> Invoke(GetPortInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPortResult>("equinix:fabric/getPort:getPort", args ?? new GetPortInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPortArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix-assigned port identifier
        /// </summary>
        [Input("uuid", required: true)]
        public string Uuid { get; set; } = null!;

        public GetPortArgs()
        {
        }
        public static new GetPortArgs Empty => new GetPortArgs();
    }

    public sealed class GetPortInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix-assigned port identifier
        /// </summary>
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public GetPortInvokeArgs()
        {
        }
        public static new GetPortInvokeArgs Empty => new GetPortInvokeArgs();
    }


    [OutputType]
    public sealed class GetPortResult
    {
        /// <summary>
        /// Customer account information that is associated with this port
        /// </summary>
        public readonly Outputs.GetPortAccountResult Account;
        /// <summary>
        /// Port available bandwidth in Mbps
        /// </summary>
        public readonly int AvailableBandwidth;
        /// <summary>
        /// Port bandwidth in Mbps
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// Captures port lifecycle change information
        /// </summary>
        public readonly Outputs.GetPortChangeLogResult ChangeLog;
        /// <summary>
        /// Port description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Port device
        /// </summary>
        public readonly Outputs.GetPortDeviceResult Device;
        /// <summary>
        /// Port encapsulation protocol
        /// </summary>
        public readonly Outputs.GetPortEncapsulationResult Encapsulation;
        /// <summary>
        /// Port URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Port Lag
        /// </summary>
        public readonly bool LagEnabled;
        /// <summary>
        /// Port location information
        /// </summary>
        public readonly Outputs.GetPortLocationResult Location;
        /// <summary>
        /// Port name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Port specific operational data
        /// </summary>
        public readonly Outputs.GetPortOperationResult Operation;
        /// <summary>
        /// Port redundancy information
        /// </summary>
        public readonly Outputs.GetPortRedundancyResult Redundancy;
        /// <summary>
        /// Port service type
        /// </summary>
        public readonly string ServiceType;
        /// <summary>
        /// Port state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Port type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Port used bandwidth in Mbps
        /// </summary>
        public readonly int UsedBandwidth;
        /// <summary>
        /// Equinix-assigned port identifier
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetPortResult(
            Outputs.GetPortAccountResult account,

            int availableBandwidth,

            int bandwidth,

            Outputs.GetPortChangeLogResult changeLog,

            string description,

            Outputs.GetPortDeviceResult device,

            Outputs.GetPortEncapsulationResult encapsulation,

            string href,

            string id,

            bool lagEnabled,

            Outputs.GetPortLocationResult location,

            string name,

            Outputs.GetPortOperationResult operation,

            Outputs.GetPortRedundancyResult redundancy,

            string serviceType,

            string state,

            string type,

            int usedBandwidth,

            string uuid)
        {
            Account = account;
            AvailableBandwidth = availableBandwidth;
            Bandwidth = bandwidth;
            ChangeLog = changeLog;
            Description = description;
            Device = device;
            Encapsulation = encapsulation;
            Href = href;
            Id = id;
            LagEnabled = lagEnabled;
            Location = location;
            Name = name;
            Operation = operation;
            Redundancy = redundancy;
            ServiceType = serviceType;
            State = state;
            Type = type;
            UsedBandwidth = usedBandwidth;
            Uuid = uuid;
        }
    }
}
