// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Rule
    /// 
    /// Additional Documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rfRule = new Equinix.Fabric.RouteFilterRule("rfRule", new()
    ///     {
    ///         RouteFilterId = "&lt;route_filter_policy_id&gt;",
    ///         Prefix = "192.168.0.0/24",
    ///         PrefixMatch = "exact",
    ///         Description = "Route Filter Rule for X Purpose",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["routeFilterRuleId"] = rfRule.Id,
    ///         ["routeFilterId"] = rfRule.RouteFilterId,
    ///         ["routeFilterRulePrefix"] = rfRule.Prefix,
    ///         ["routeFilterRulePrefixMatch"] = rfRule.PrefixMatch,
    ///     };
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/routeFilterRule:RouteFilterRule")]
    public partial class RouteFilterRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action that will be taken on IP Addresses matching the rule
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        [Output("changeLogs")]
        public Output<ImmutableArray<Outputs.RouteFilterRuleChangeLog>> ChangeLogs { get; private set; } = null!;

        /// <summary>
        /// An object with the details of the previous change applied on the Route Filter
        /// </summary>
        [Output("changes")]
        public Output<ImmutableArray<Outputs.RouteFilterRuleChange>> Changes { get; private set; } = null!;

        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Route filter rules URI
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IP Address Prefix to Filter on
        /// </summary>
        [Output("prefix")]
        public Output<string> Prefix { get; private set; } = null!;

        /// <summary>
        /// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        /// </summary>
        [Output("prefixMatch")]
        public Output<string> PrefixMatch { get; private set; } = null!;

        /// <summary>
        /// UUID of the Route Filter Policy to apply this Rule to
        /// </summary>
        [Output("routeFilterId")]
        public Output<string> RouteFilterId { get; private set; } = null!;

        /// <summary>
        /// State of the Route Filter Rule in its lifecycle
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned ID for Route Filter Rule
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a RouteFilterRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteFilterRule(string name, RouteFilterRuleArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeFilterRule:RouteFilterRule", name, args ?? new RouteFilterRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteFilterRule(string name, Input<string> id, RouteFilterRuleState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeFilterRule:RouteFilterRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteFilterRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteFilterRule Get(string name, Input<string> id, RouteFilterRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteFilterRule(name, id, state, options);
        }
    }

    public sealed class RouteFilterRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IP Address Prefix to Filter on
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        /// <summary>
        /// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        /// </summary>
        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        /// <summary>
        /// UUID of the Route Filter Policy to apply this Rule to
        /// </summary>
        [Input("routeFilterId", required: true)]
        public Input<string> RouteFilterId { get; set; } = null!;

        public RouteFilterRuleArgs()
        {
        }
        public static new RouteFilterRuleArgs Empty => new RouteFilterRuleArgs();
    }

    public sealed class RouteFilterRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action that will be taken on IP Addresses matching the rule
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("changeLogs")]
        private InputList<Inputs.RouteFilterRuleChangeLogGetArgs>? _changeLogs;
        public InputList<Inputs.RouteFilterRuleChangeLogGetArgs> ChangeLogs
        {
            get => _changeLogs ?? (_changeLogs = new InputList<Inputs.RouteFilterRuleChangeLogGetArgs>());
            set => _changeLogs = value;
        }

        [Input("changes")]
        private InputList<Inputs.RouteFilterRuleChangeGetArgs>? _changes;

        /// <summary>
        /// An object with the details of the previous change applied on the Route Filter
        /// </summary>
        public InputList<Inputs.RouteFilterRuleChangeGetArgs> Changes
        {
            get => _changes ?? (_changes = new InputList<Inputs.RouteFilterRuleChangeGetArgs>());
            set => _changes = value;
        }

        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Route filter rules URI
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IP Address Prefix to Filter on
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        /// </summary>
        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        /// <summary>
        /// UUID of the Route Filter Policy to apply this Rule to
        /// </summary>
        [Input("routeFilterId")]
        public Input<string>? RouteFilterId { get; set; }

        /// <summary>
        /// State of the Route Filter Rule in its lifecycle
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix Assigned ID for Route Filter Rule
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public RouteFilterRuleState()
        {
        }
        public static new RouteFilterRuleState Empty => new RouteFilterRuleState();
    }
}
