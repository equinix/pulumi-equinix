// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetServiceToken
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
        /// 
        /// Additional documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
        /// * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var service_token = Equinix.Fabric.GetServiceToken.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_service_token&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Id)),
        ///         ["type"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Type)),
        ///         ["expirationDateTime"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ExpirationDateTime)),
        ///         ["supportedBandwidths"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.SupportedBandwidths)),
        ///         ["virtualDeviceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Type)),
        ///         ["virtualDeviceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Uuid)),
        ///         ["interfaceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Type)),
        ///         ["interfaceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceTokenResult> InvokeAsync(GetServiceTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceTokenResult>("equinix:fabric/getServiceToken:getServiceToken", args ?? new GetServiceTokenArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
        /// 
        /// Additional documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
        /// * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var service_token = Equinix.Fabric.GetServiceToken.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_service_token&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Id)),
        ///         ["type"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Type)),
        ///         ["expirationDateTime"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ExpirationDateTime)),
        ///         ["supportedBandwidths"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.SupportedBandwidths)),
        ///         ["virtualDeviceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Type)),
        ///         ["virtualDeviceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Uuid)),
        ///         ["interfaceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Type)),
        ///         ["interfaceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceTokenResult> Invoke(GetServiceTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceTokenResult>("equinix:fabric/getServiceToken:getServiceToken", args ?? new GetServiceTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
        /// 
        /// Additional documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
        /// * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var service_token = Equinix.Fabric.GetServiceToken.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_service_token&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Id)),
        ///         ["type"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.Type)),
        ///         ["expirationDateTime"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ExpirationDateTime)),
        ///         ["supportedBandwidths"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.SupportedBandwidths)),
        ///         ["virtualDeviceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Type)),
        ///         ["virtualDeviceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.VirtualDevice?.Uuid)),
        ///         ["interfaceType"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Type)),
        ///         ["interfaceUuid"] = service_token.Apply(service_token =&gt; service_token.Apply(getServiceTokenResult =&gt; getServiceTokenResult.ServiceTokenConnections[0]?.ZSides[0]?.AccessPointSelectors[0]?.Interface?.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceTokenResult> Invoke(GetServiceTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceTokenResult>("equinix:fabric/getServiceToken:getServiceToken", args ?? new GetServiceTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix-assigned service token identifier
        /// </summary>
        [Input("uuid", required: true)]
        public string Uuid { get; set; } = null!;

        public GetServiceTokenArgs()
        {
        }
        public static new GetServiceTokenArgs Empty => new GetServiceTokenArgs();
    }

    public sealed class GetServiceTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix-assigned service token identifier
        /// </summary>
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public GetServiceTokenInvokeArgs()
        {
        }
        public static new GetServiceTokenInvokeArgs Empty => new GetServiceTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceTokenResult
    {
        /// <summary>
        /// Customer account information that is associated with this service token
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTokenAccountResult> Accounts;
        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTokenChangeLogResult> ChangeLogs;
        /// <summary>
        /// Optional Description to the Service Token you will be creating
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Expiration date and time of the service token; 2020-11-06T07:00:00Z
        /// </summary>
        public readonly string ExpirationDateTime;
        /// <summary>
        /// An absolute URL that is the subject of the link's context.
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Information about token side; ASIDE, ZSIDE
        /// </summary>
        public readonly string IssuerSide;
        /// <summary>
        /// Name of the Service Token
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Preferences for notifications on Service Token configuration or status changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTokenNotificationResult> Notifications;
        /// <summary>
        /// Project information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTokenProjectResult> Projects;
        /// <summary>
        /// Service Token Connection Type Information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTokenServiceTokenConnectionResult> ServiceTokenConnections;
        /// <summary>
        /// Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Service Token Type; VC*TOKEN,EPL*TOKEN
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned service token identifier
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetServiceTokenResult(
            ImmutableArray<Outputs.GetServiceTokenAccountResult> accounts,

            ImmutableArray<Outputs.GetServiceTokenChangeLogResult> changeLogs,

            string description,

            string expirationDateTime,

            string href,

            string id,

            string issuerSide,

            string name,

            ImmutableArray<Outputs.GetServiceTokenNotificationResult> notifications,

            ImmutableArray<Outputs.GetServiceTokenProjectResult> projects,

            ImmutableArray<Outputs.GetServiceTokenServiceTokenConnectionResult> serviceTokenConnections,

            string state,

            string type,

            string uuid)
        {
            Accounts = accounts;
            ChangeLogs = changeLogs;
            Description = description;
            ExpirationDateTime = expirationDateTime;
            Href = href;
            Id = id;
            IssuerSide = issuerSide;
            Name = name;
            Notifications = notifications;
            Projects = projects;
            ServiceTokenConnections = serviceTokenConnections;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
