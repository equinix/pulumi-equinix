// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Service Token](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
    /// 
    /// Additional documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
    /// * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
    /// 
    /// ## Example Usage
    /// 
    /// Aside Port Service Token
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Equinix.Fabric.ServiceToken("test", new()
    ///     {
    ///         Description = "Aside COLO Service Token",
    ///         ExpirationDateTime = "2025-01-18T06:43:49.981Z",
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenNotificationArgs
    ///             {
    ///                 Emails = new[]
    ///                 {
    ///                     "example@equinix.com",
    ///                     "test1@equinix.com",
    ///                 },
    ///                 Type = "ALL",
    ///             },
    ///         },
    ///         ServiceTokenConnections = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionArgs
    ///             {
    ///                 ASides = new[]
    ///                 {
    ///                     new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionASideArgs
    ///                     {
    ///                         AccessPointSelectors = new[]
    ///                         {
    ///                             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorArgs
    ///                             {
    ///                                 LinkProtocol = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolArgs
    ///                                 {
    ///                                     Type = "DOT1Q",
    ///                                     VlanTag = 2987,
    ///                                 },
    ///                                 Port = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs
    ///                                 {
    ///                                     Uuid = "&lt;port_uuid&gt;",
    ///                                 },
    ///                                 Type = "COLO",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 BandwidthLimit = 1000,
    ///                 Type = "EVPL_VC",
    ///             },
    ///         },
    ///         Type = "VC_TOKEN",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Zside Port Service Token
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Equinix.Fabric.ServiceToken("test", new()
    ///     {
    ///         Description = "Zside COLO Service Token",
    ///         ExpirationDateTime = "2025-01-18T06:43:49.981Z",
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenNotificationArgs
    ///             {
    ///                 Emails = new[]
    ///                 {
    ///                     "example@equinix.com",
    ///                     "test1@equinix.com",
    ///                 },
    ///                 Type = "ALL",
    ///             },
    ///         },
    ///         ServiceTokenConnections = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionArgs
    ///             {
    ///                 SupportedBandwidths = new[]
    ///                 {
    ///                     50,
    ///                     200,
    ///                     10000,
    ///                 },
    ///                 Type = "EVPL_VC",
    ///                 ZSides = new[]
    ///                 {
    ///                     new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideArgs
    ///                     {
    ///                         AccessPointSelectors = new[]
    ///                         {
    ///                             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs
    ///                             {
    ///                                 LinkProtocol = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolArgs
    ///                                 {
    ///                                     Type = "DOT1Q",
    ///                                     VlanTag = 2087,
    ///                                 },
    ///                                 Port = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortArgs
    ///                                 {
    ///                                     Uuid = "&lt;port_uuid&gt;",
    ///                                 },
    ///                                 Type = "COLO",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Type = "VC_TOKEN",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Zside Virtual Device Service Token
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Equinix.Fabric.ServiceToken("test", new()
    ///     {
    ///         Description = "Zside VD Service Token",
    ///         ExpirationDateTime = "2025-01-18T06:43:49.986Z",
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenNotificationArgs
    ///             {
    ///                 Emails = new[]
    ///                 {
    ///                     "example@equinix.com",
    ///                 },
    ///                 Type = "ALL",
    ///             },
    ///         },
    ///         ServiceTokenConnections = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionArgs
    ///             {
    ///                 SupportedBandwidths = new[]
    ///                 {
    ///                     50,
    ///                     200,
    ///                     10000,
    ///                 },
    ///                 Type = "EVPL_VC",
    ///                 ZSides = new[]
    ///                 {
    ///                     new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideArgs
    ///                     {
    ///                         AccessPointSelectors = new[]
    ///                         {
    ///                             new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs
    ///                             {
    ///                                 Interface = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceArgs
    ///                                 {
    ///                                     Type = "NETWORK",
    ///                                 },
    ///                                 Type = "VD",
    ///                                 VirtualDevice = new Equinix.Fabric.Inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceArgs
    ///                                 {
    ///                                     Type = "EDGE",
    ///                                     Uuid = "&lt;device_uuid&gt;",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Type = "VC_TOKEN",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/serviceToken:ServiceToken")]
    public partial class ServiceToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Customer account information that is associated with this service token
        /// </summary>
        [Output("accounts")]
        public Output<ImmutableArray<Outputs.ServiceTokenAccount>> Accounts { get; private set; } = null!;

        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        [Output("changeLogs")]
        public Output<ImmutableArray<Outputs.ServiceTokenChangeLog>> ChangeLogs { get; private set; } = null!;

        /// <summary>
        /// Optional Description to the Service Token you will be creating
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Expiration date and time of the service token; 2020-11-06T07:00:00Z
        /// </summary>
        [Output("expirationDateTime")]
        public Output<string> ExpirationDateTime { get; private set; } = null!;

        /// <summary>
        /// An absolute URL that is the subject of the link's context.
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Information about token side; ASIDE, ZSIDE
        /// </summary>
        [Output("issuerSide")]
        public Output<string> IssuerSide { get; private set; } = null!;

        /// <summary>
        /// Name of the Service Token
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Preferences for notifications on Service Token configuration or status changes
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.ServiceTokenNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Project information
        /// </summary>
        [Output("project")]
        public Output<Outputs.ServiceTokenProject> Project { get; private set; } = null!;

        /// <summary>
        /// Service Token Connection Type Information
        /// </summary>
        [Output("serviceTokenConnections")]
        public Output<ImmutableArray<Outputs.ServiceTokenServiceTokenConnection>> ServiceTokenConnections { get; private set; } = null!;

        /// <summary>
        /// Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Service Token Type; VC*TOKEN,EPL*TOKEN
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix-assigned service token identifier
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceToken(string name, ServiceTokenArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/serviceToken:ServiceToken", name, args ?? new ServiceTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceToken(string name, Input<string> id, ServiceTokenState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/serviceToken:ServiceToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceToken Get(string name, Input<string> id, ServiceTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceToken(name, id, state, options);
        }
    }

    public sealed class ServiceTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional Description to the Service Token you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Expiration date and time of the service token; 2020-11-06T07:00:00Z
        /// </summary>
        [Input("expirationDateTime", required: true)]
        public Input<string> ExpirationDateTime { get; set; } = null!;

        /// <summary>
        /// Name of the Service Token
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<Inputs.ServiceTokenNotificationArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on Service Token configuration or status changes
        /// </summary>
        public InputList<Inputs.ServiceTokenNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ServiceTokenNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Project information
        /// </summary>
        [Input("project")]
        public Input<Inputs.ServiceTokenProjectArgs>? Project { get; set; }

        [Input("serviceTokenConnections", required: true)]
        private InputList<Inputs.ServiceTokenServiceTokenConnectionArgs>? _serviceTokenConnections;

        /// <summary>
        /// Service Token Connection Type Information
        /// </summary>
        public InputList<Inputs.ServiceTokenServiceTokenConnectionArgs> ServiceTokenConnections
        {
            get => _serviceTokenConnections ?? (_serviceTokenConnections = new InputList<Inputs.ServiceTokenServiceTokenConnectionArgs>());
            set => _serviceTokenConnections = value;
        }

        /// <summary>
        /// Service Token Type; VC*TOKEN,EPL*TOKEN
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServiceTokenArgs()
        {
        }
        public static new ServiceTokenArgs Empty => new ServiceTokenArgs();
    }

    public sealed class ServiceTokenState : global::Pulumi.ResourceArgs
    {
        [Input("accounts")]
        private InputList<Inputs.ServiceTokenAccountGetArgs>? _accounts;

        /// <summary>
        /// Customer account information that is associated with this service token
        /// </summary>
        public InputList<Inputs.ServiceTokenAccountGetArgs> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<Inputs.ServiceTokenAccountGetArgs>());
            set => _accounts = value;
        }

        [Input("changeLogs")]
        private InputList<Inputs.ServiceTokenChangeLogGetArgs>? _changeLogs;

        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        public InputList<Inputs.ServiceTokenChangeLogGetArgs> ChangeLogs
        {
            get => _changeLogs ?? (_changeLogs = new InputList<Inputs.ServiceTokenChangeLogGetArgs>());
            set => _changeLogs = value;
        }

        /// <summary>
        /// Optional Description to the Service Token you will be creating
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Expiration date and time of the service token; 2020-11-06T07:00:00Z
        /// </summary>
        [Input("expirationDateTime")]
        public Input<string>? ExpirationDateTime { get; set; }

        /// <summary>
        /// An absolute URL that is the subject of the link's context.
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Information about token side; ASIDE, ZSIDE
        /// </summary>
        [Input("issuerSide")]
        public Input<string>? IssuerSide { get; set; }

        /// <summary>
        /// Name of the Service Token
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.ServiceTokenNotificationGetArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on Service Token configuration or status changes
        /// </summary>
        public InputList<Inputs.ServiceTokenNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ServiceTokenNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Project information
        /// </summary>
        [Input("project")]
        public Input<Inputs.ServiceTokenProjectGetArgs>? Project { get; set; }

        [Input("serviceTokenConnections")]
        private InputList<Inputs.ServiceTokenServiceTokenConnectionGetArgs>? _serviceTokenConnections;

        /// <summary>
        /// Service Token Connection Type Information
        /// </summary>
        public InputList<Inputs.ServiceTokenServiceTokenConnectionGetArgs> ServiceTokenConnections
        {
            get => _serviceTokenConnections ?? (_serviceTokenConnections = new InputList<Inputs.ServiceTokenServiceTokenConnectionGetArgs>());
            set => _serviceTokenConnections = value;
        }

        /// <summary>
        /// Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Service Token Type; VC*TOKEN,EPL*TOKEN
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned service token identifier
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ServiceTokenState()
        {
        }
        public static new ServiceTokenState Empty => new ServiceTokenState();
    }
}
