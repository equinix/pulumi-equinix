// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamAttachments
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamAttachments.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsFilterInputArgs
        ///             {
        ///                 Operator = "=",
        ///                 Property = "&lt;filter_property&gt;",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;list_of_values_to_filter&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamAttachmentsPaginationInputArgs
        ///         {
        ///             Limit = 100,
        ///             Offset = 0,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsSortInputArgs
        ///             {
        ///                 Direction = "&lt;DESC|ASC&gt;",
        ///                 Property = "/uuid",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamAttachmentsResult> InvokeAsync(GetStreamAttachmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamAttachmentsResult>("equinix:fabric/getStreamAttachments:getStreamAttachments", args ?? new GetStreamAttachmentsArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamAttachments.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsFilterInputArgs
        ///             {
        ///                 Operator = "=",
        ///                 Property = "&lt;filter_property&gt;",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;list_of_values_to_filter&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamAttachmentsPaginationInputArgs
        ///         {
        ///             Limit = 100,
        ///             Offset = 0,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsSortInputArgs
        ///             {
        ///                 Direction = "&lt;DESC|ASC&gt;",
        ///                 Property = "/uuid",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamAttachmentsResult> Invoke(GetStreamAttachmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAttachmentsResult>("equinix:fabric/getStreamAttachments:getStreamAttachments", args ?? new GetStreamAttachmentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamAttachments.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsFilterInputArgs
        ///             {
        ///                 Operator = "=",
        ///                 Property = "&lt;filter_property&gt;",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;list_of_values_to_filter&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamAttachmentsPaginationInputArgs
        ///         {
        ///             Limit = 100,
        ///             Offset = 0,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetStreamAttachmentsSortInputArgs
        ///             {
        ///                 Direction = "&lt;DESC|ASC&gt;",
        ///                 Property = "/uuid",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamAttachmentsResult> Invoke(GetStreamAttachmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAttachmentsResult>("equinix:fabric/getStreamAttachments:getStreamAttachments", args ?? new GetStreamAttachmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamAttachmentsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetStreamAttachmentsFilterArgs>? _filters;

        /// <summary>
        /// List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
        /// </summary>
        public List<Inputs.GetStreamAttachmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetStreamAttachmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        [Input("pagination", required: true)]
        public Inputs.GetStreamAttachmentsPaginationArgs Pagination { get; set; } = null!;

        [Input("sorts")]
        private List<Inputs.GetStreamAttachmentsSortArgs>? _sorts;

        /// <summary>
        /// The list of sort criteria for the stream assets search request
        /// </summary>
        public List<Inputs.GetStreamAttachmentsSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetStreamAttachmentsSortArgs>());
            set => _sorts = value;
        }

        public GetStreamAttachmentsArgs()
        {
        }
        public static new GetStreamAttachmentsArgs Empty => new GetStreamAttachmentsArgs();
    }

    public sealed class GetStreamAttachmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetStreamAttachmentsFilterInputArgs>? _filters;

        /// <summary>
        /// List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
        /// </summary>
        public InputList<Inputs.GetStreamAttachmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetStreamAttachmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        [Input("pagination", required: true)]
        public Input<Inputs.GetStreamAttachmentsPaginationInputArgs> Pagination { get; set; } = null!;

        [Input("sorts")]
        private InputList<Inputs.GetStreamAttachmentsSortInputArgs>? _sorts;

        /// <summary>
        /// The list of sort criteria for the stream assets search request
        /// </summary>
        public InputList<Inputs.GetStreamAttachmentsSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetStreamAttachmentsSortInputArgs>());
            set => _sorts = value;
        }

        public GetStreamAttachmentsInvokeArgs()
        {
        }
        public static new GetStreamAttachmentsInvokeArgs Empty => new GetStreamAttachmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamAttachmentsResult
    {
        /// <summary>
        /// Returned list of stream objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamAttachmentsDataResult> Datas;
        /// <summary>
        /// List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamAttachmentsFilterResult> Filters;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        public readonly Outputs.GetStreamAttachmentsPaginationResult Pagination;
        /// <summary>
        /// The list of sort criteria for the stream assets search request
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamAttachmentsSortResult> Sorts;

        [OutputConstructor]
        private GetStreamAttachmentsResult(
            ImmutableArray<Outputs.GetStreamAttachmentsDataResult> datas,

            ImmutableArray<Outputs.GetStreamAttachmentsFilterResult> filters,

            string id,

            Outputs.GetStreamAttachmentsPaginationResult pagination,

            ImmutableArray<Outputs.GetStreamAttachmentsSortResult> sorts)
        {
            Datas = datas;
            Filters = filters;
            Id = id;
            Pagination = pagination;
            Sorts = sorts;
        }
    }
}
