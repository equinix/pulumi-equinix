// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric.Outputs
{

    [OutputType]
    public sealed class ServiceProfileAccessPointTypeConfig
    {
        /// <summary>
        /// Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        /// </summary>
        public readonly bool? AllowBandwidthAutoApproval;
        /// <summary>
        /// Availability of a bandwidth upgrade. The default is false
        /// </summary>
        public readonly bool? AllowBandwidthUpgrade;
        /// <summary>
        /// Setting to enable or disable the ability of the buyer to customize the bandwidth
        /// </summary>
        public readonly bool? AllowCustomBandwidth;
        /// <summary>
        /// Setting to allow or prohibit remote connections to the service profile
        /// </summary>
        public readonly bool? AllowRemoteConnections;
        /// <summary>
        /// Api configuration details
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigApiConfig> ApiConfigs;
        /// <summary>
        /// Authentication key details
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey> AuthenticationKeys;
        /// <summary>
        /// Percentage of port bandwidth at which an allocation alert is generated
        /// </summary>
        public readonly double? BandwidthAlertThreshold;
        /// <summary>
        /// Custom name for Connection
        /// </summary>
        public readonly string? ConnectionLabel;
        /// <summary>
        /// Mandate redundant connections
        /// </summary>
        public readonly bool? ConnectionRedundancyRequired;
        /// <summary>
        /// Enable auto generate service key
        /// </summary>
        public readonly bool? EnableAutoGenerateServiceKey;
        /// <summary>
        /// Link protocol configuration details
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig> LinkProtocolConfigs;
        /// <summary>
        /// Supported bandwidths
        /// </summary>
        public readonly ImmutableArray<int> SupportedBandwidths;
        /// <summary>
        /// Type of access point type config - VD, COLO
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Colo/Port Uuid
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private ServiceProfileAccessPointTypeConfig(
            bool? allowBandwidthAutoApproval,

            bool? allowBandwidthUpgrade,

            bool? allowCustomBandwidth,

            bool? allowRemoteConnections,

            ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigApiConfig> apiConfigs,

            ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey> authenticationKeys,

            double? bandwidthAlertThreshold,

            string? connectionLabel,

            bool? connectionRedundancyRequired,

            bool? enableAutoGenerateServiceKey,

            ImmutableArray<Outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig> linkProtocolConfigs,

            ImmutableArray<int> supportedBandwidths,

            string type,

            string? uuid)
        {
            AllowBandwidthAutoApproval = allowBandwidthAutoApproval;
            AllowBandwidthUpgrade = allowBandwidthUpgrade;
            AllowCustomBandwidth = allowCustomBandwidth;
            AllowRemoteConnections = allowRemoteConnections;
            ApiConfigs = apiConfigs;
            AuthenticationKeys = authenticationKeys;
            BandwidthAlertThreshold = bandwidthAlertThreshold;
            ConnectionLabel = connectionLabel;
            ConnectionRedundancyRequired = connectionRedundancyRequired;
            EnableAutoGenerateServiceKey = enableAutoGenerateServiceKey;
            LinkProtocolConfigs = linkProtocolConfigs;
            SupportedBandwidths = supportedBandwidths;
            Type = type;
            Uuid = uuid;
        }
    }
}
