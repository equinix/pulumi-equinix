// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric.Outputs
{

    [OutputType]
    public sealed class GetNetworksDataResult
    {
        /// <summary>
        /// A permanent record of asset creation, modification, or deletion
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataChangeLogResult> ChangeLogs;
        /// <summary>
        /// Information on asset change operation
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataChangeResult> Changes;
        /// <summary>
        /// Number of connections associated with this network
        /// </summary>
        public readonly int ConnectionsCount;
        /// <summary>
        /// Fabric Network URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// Fabric Network location
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataLocationResult> Locations;
        /// <summary>
        /// Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Preferences for notifications on Fabric Network configuration or status changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataNotificationResult> Notifications;
        /// <summary>
        /// Network operation information that is associated with this Fabric Network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataOperationResult> Operations;
        /// <summary>
        /// Fabric Network project
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworksDataProjectResult> Projects;
        /// <summary>
        /// Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// Fabric Network overall state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned network identifier
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetNetworksDataResult(
            ImmutableArray<Outputs.GetNetworksDataChangeLogResult> changeLogs,

            ImmutableArray<Outputs.GetNetworksDataChangeResult> changes,

            int connectionsCount,

            string href,

            ImmutableArray<Outputs.GetNetworksDataLocationResult> locations,

            string name,

            ImmutableArray<Outputs.GetNetworksDataNotificationResult> notifications,

            ImmutableArray<Outputs.GetNetworksDataOperationResult> operations,

            ImmutableArray<Outputs.GetNetworksDataProjectResult> projects,

            string scope,

            string state,

            string type,

            string uuid)
        {
            ChangeLogs = changeLogs;
            Changes = changes;
            ConnectionsCount = connectionsCount;
            Href = href;
            Locations = locations;
            Name = name;
            Notifications = notifications;
            Operations = operations;
            Projects = projects;
            Scope = scope;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
