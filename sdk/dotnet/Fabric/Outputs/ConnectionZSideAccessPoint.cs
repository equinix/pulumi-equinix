// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric.Outputs
{

    [OutputType]
    public sealed class ConnectionZSideAccessPoint
    {
        /// <summary>
        /// Customer account information that is associated with this connection
        /// </summary>
        public readonly Outputs.ConnectionZSideAccessPointAccount? Account;
        public readonly string? AuthenticationKey;
        public readonly Outputs.ConnectionZSideAccessPointGateway? Gateway;
        public readonly Outputs.ConnectionZSideAccessPointInterface? Interface;
        public readonly Outputs.ConnectionZSideAccessPointLinkProtocol? LinkProtocol;
        public readonly Outputs.ConnectionZSideAccessPointLocation? Location;
        public readonly string? PeeringType;
        public readonly Outputs.ConnectionZSideAccessPointPort? Port;
        public readonly Outputs.ConnectionZSideAccessPointProfile? Profile;
        public readonly string? ProviderConnectionId;
        public readonly ImmutableArray<Outputs.ConnectionZSideAccessPointRoutingProtocol> RoutingProtocols;
        public readonly string? SellerRegion;
        /// <summary>
        /// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        /// </summary>
        public readonly string? Type;
        public readonly Outputs.ConnectionZSideAccessPointVirtualDevice? VirtualDevice;

        [OutputConstructor]
        private ConnectionZSideAccessPoint(
            Outputs.ConnectionZSideAccessPointAccount? account,

            string? authenticationKey,

            Outputs.ConnectionZSideAccessPointGateway? gateway,

            Outputs.ConnectionZSideAccessPointInterface? @interface,

            Outputs.ConnectionZSideAccessPointLinkProtocol? linkProtocol,

            Outputs.ConnectionZSideAccessPointLocation? location,

            string? peeringType,

            Outputs.ConnectionZSideAccessPointPort? port,

            Outputs.ConnectionZSideAccessPointProfile? profile,

            string? providerConnectionId,

            ImmutableArray<Outputs.ConnectionZSideAccessPointRoutingProtocol> routingProtocols,

            string? sellerRegion,

            string? type,

            Outputs.ConnectionZSideAccessPointVirtualDevice? virtualDevice)
        {
            Account = account;
            AuthenticationKey = authenticationKey;
            Gateway = gateway;
            Interface = @interface;
            LinkProtocol = linkProtocol;
            Location = location;
            PeeringType = peeringType;
            Port = port;
            Profile = profile;
            ProviderConnectionId = providerConnectionId;
            RoutingProtocols = routingProtocols;
            SellerRegion = sellerRegion;
            Type = type;
            VirtualDevice = virtualDevice;
        }
    }
}
