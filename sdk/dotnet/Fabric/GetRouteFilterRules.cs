// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRouteFilterRules
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfRules = Equinix.Fabric.GetRouteFilterRules.Invoke(new()
        ///     {
        ///         RouteFilterId = "&lt;route_filter_policy_id",
        ///         Limit = 100,
        ///         Offset = 5,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRouteFilterRuleName"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Name),
        ///         ["firstRouteFilterRuleDescription"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Description),
        ///         ["firstRouteFilterRulePrefix"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Prefix),
        ///         ["firstRouteFilterRulePrefixMatch"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.PrefixMatch),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteFilterRulesResult> InvokeAsync(GetRouteFilterRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteFilterRulesResult>("equinix:fabric/getRouteFilterRules:getRouteFilterRules", args ?? new GetRouteFilterRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfRules = Equinix.Fabric.GetRouteFilterRules.Invoke(new()
        ///     {
        ///         RouteFilterId = "&lt;route_filter_policy_id",
        ///         Limit = 100,
        ///         Offset = 5,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRouteFilterRuleName"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Name),
        ///         ["firstRouteFilterRuleDescription"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Description),
        ///         ["firstRouteFilterRulePrefix"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.Prefix),
        ///         ["firstRouteFilterRulePrefixMatch"] = rfRules.Apply(getRouteFilterRulesResult =&gt; getRouteFilterRulesResult.Datas[0]?.PrefixMatch),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteFilterRulesResult> Invoke(GetRouteFilterRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteFilterRulesResult>("equinix:fabric/getRouteFilterRules:getRouteFilterRules", args ?? new GetRouteFilterRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteFilterRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// The page offset for the pagination request. Index of the first element. Default is 0.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// UUID of the Route Filter Policy the rule is attached to
        /// </summary>
        [Input("routeFilterId", required: true)]
        public string RouteFilterId { get; set; } = null!;

        public GetRouteFilterRulesArgs()
        {
        }
        public static new GetRouteFilterRulesArgs Empty => new GetRouteFilterRulesArgs();
    }

    public sealed class GetRouteFilterRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// The page offset for the pagination request. Index of the first element. Default is 0.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// UUID of the Route Filter Policy the rule is attached to
        /// </summary>
        [Input("routeFilterId", required: true)]
        public Input<string> RouteFilterId { get; set; } = null!;

        public GetRouteFilterRulesInvokeArgs()
        {
        }
        public static new GetRouteFilterRulesInvokeArgs Empty => new GetRouteFilterRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteFilterRulesResult
    {
        /// <summary>
        /// The list of Rules attached to the given Route Filter Policy UUID
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFilterRulesDataResult> Datas;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        /// </summary>
        public readonly int? Limit;
        /// <summary>
        /// The page offset for the pagination request. Index of the first element. Default is 0.
        /// </summary>
        public readonly int? Offset;
        /// <summary>
        /// Pagination details for the Data Source Search Request
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFilterRulesPaginationResult> Paginations;
        /// <summary>
        /// UUID of the Route Filter Policy the rule is attached to
        /// </summary>
        public readonly string RouteFilterId;

        [OutputConstructor]
        private GetRouteFilterRulesResult(
            ImmutableArray<Outputs.GetRouteFilterRulesDataResult> datas,

            string id,

            int? limit,

            int? offset,

            ImmutableArray<Outputs.GetRouteFilterRulesPaginationResult> paginations,

            string routeFilterId)
        {
            Datas = datas;
            Id = id;
            Limit = limit;
            Offset = offset;
            Paginations = paginations;
            RouteFilterId = routeFilterId;
        }
    }
}
