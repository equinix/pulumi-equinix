// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamAlertRule
    {
        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Alert Rule by Stream Id and Alert Rule Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
        /// </summary>
        public static Task<GetStreamAlertRuleResult> InvokeAsync(GetStreamAlertRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Alert Rule by Stream Id and Alert Rule Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
        /// </summary>
        public static Output<GetStreamAlertRuleResult> Invoke(GetStreamAlertRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Alert Rule by Stream Id and Alert Rule Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
        /// </summary>
        public static Output<GetStreamAlertRuleResult> Invoke(GetStreamAlertRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamAlertRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        [Input("alertRuleId", required: true)]
        public string AlertRuleId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        [Input("streamId", required: true)]
        public string StreamId { get; set; } = null!;

        public GetStreamAlertRuleArgs()
        {
        }
        public static new GetStreamAlertRuleArgs Empty => new GetStreamAlertRuleArgs();
    }

    public sealed class GetStreamAlertRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        [Input("alertRuleId", required: true)]
        public Input<string> AlertRuleId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public GetStreamAlertRuleInvokeArgs()
        {
        }
        public static new GetStreamAlertRuleInvokeArgs Empty => new GetStreamAlertRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamAlertRuleResult
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        public readonly string AlertRuleId;
        /// <summary>
        /// Details of the last change on the stream resource
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleChangeLogResult ChangeLog;
        /// <summary>
        /// Stream alert rule metric critical threshold
        /// </summary>
        public readonly string CriticalThreshold;
        /// <summary>
        /// Customer-provided stream alert rule description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Stream subscription enabled status
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Equinix assigned URI of the stream alert rule resource
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Stream alert rule metric name
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// Customer-provided stream alert rule name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Stream alert rule metric operand
        /// </summary>
        public readonly string Operand;
        /// <summary>
        /// Lists of metrics to be included/excluded on the stream alert rule
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleResourceSelectorResult ResourceSelector;
        /// <summary>
        /// Value representing provisioning status for the stream resource
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        public readonly string StreamId;
        /// <summary>
        /// Type of the stream alert rule
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix assigned unique identifier of the stream subscription resource
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// Stream alert rule metric warning threshold
        /// </summary>
        public readonly string WarningThreshold;
        /// <summary>
        /// Stream alert rule metric window size
        /// </summary>
        public readonly string WindowSize;

        [OutputConstructor]
        private GetStreamAlertRuleResult(
            string alertRuleId,

            Outputs.GetStreamAlertRuleChangeLogResult changeLog,

            string criticalThreshold,

            string description,

            bool enabled,

            string href,

            string id,

            string metricName,

            string name,

            string operand,

            Outputs.GetStreamAlertRuleResourceSelectorResult resourceSelector,

            string state,

            string streamId,

            string type,

            string uuid,

            string warningThreshold,

            string windowSize)
        {
            AlertRuleId = alertRuleId;
            ChangeLog = changeLog;
            CriticalThreshold = criticalThreshold;
            Description = description;
            Enabled = enabled;
            Href = href;
            Id = id;
            MetricName = metricName;
            Name = name;
            Operand = operand;
            ResourceSelector = resourceSelector;
            State = state;
            StreamId = streamId;
            Type = type;
            Uuid = uuid;
            WarningThreshold = warningThreshold;
            WindowSize = windowSize;
        }
    }
}
