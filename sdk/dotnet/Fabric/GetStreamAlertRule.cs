// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamAlertRule
    {
        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Task<GetStreamAlertRuleResult> InvokeAsync(GetStreamAlertRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetStreamAlertRuleResult> Invoke(GetStreamAlertRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetStreamAlertRuleResult> Invoke(GetStreamAlertRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAlertRuleResult>("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args ?? new GetStreamAlertRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamAlertRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        [Input("alertRuleId", required: true)]
        public string AlertRuleId { get; set; } = null!;

        /// <summary>
        /// Detection method for stream alert rule
        /// </summary>
        [Input("detectionMethod")]
        public Inputs.GetStreamAlertRuleDetectionMethodArgs? DetectionMethod { get; set; }

        /// <summary>
        /// Metric selector for the stream alert rule
        /// </summary>
        [Input("metricSelector")]
        public Inputs.GetStreamAlertRuleMetricSelectorArgs? MetricSelector { get; set; }

        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        [Input("streamId", required: true)]
        public string StreamId { get; set; } = null!;

        public GetStreamAlertRuleArgs()
        {
        }
        public static new GetStreamAlertRuleArgs Empty => new GetStreamAlertRuleArgs();
    }

    public sealed class GetStreamAlertRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        [Input("alertRuleId", required: true)]
        public Input<string> AlertRuleId { get; set; } = null!;

        /// <summary>
        /// Detection method for stream alert rule
        /// </summary>
        [Input("detectionMethod")]
        public Input<Inputs.GetStreamAlertRuleDetectionMethodInputArgs>? DetectionMethod { get; set; }

        /// <summary>
        /// Metric selector for the stream alert rule
        /// </summary>
        [Input("metricSelector")]
        public Input<Inputs.GetStreamAlertRuleMetricSelectorInputArgs>? MetricSelector { get; set; }

        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public GetStreamAlertRuleInvokeArgs()
        {
        }
        public static new GetStreamAlertRuleInvokeArgs Empty => new GetStreamAlertRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamAlertRuleResult
    {
        /// <summary>
        /// The uuid of the stream alert rule
        /// </summary>
        public readonly string AlertRuleId;
        /// <summary>
        /// Details of the last change on the stream resource
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleChangeLogResult ChangeLog;
        /// <summary>
        /// Customer-provided stream alert rule description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Detection method for stream alert rule
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleDetectionMethodResult DetectionMethod;
        /// <summary>
        /// Stream subscription enabled status
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Equinix assigned URI of the stream alert rule resource
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metric selector for the stream alert rule
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleMetricSelectorResult MetricSelector;
        /// <summary>
        /// Customer-provided stream alert rule name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Lists of metrics to be included/excluded on the stream alert rule
        /// </summary>
        public readonly Outputs.GetStreamAlertRuleResourceSelectorResult ResourceSelector;
        /// <summary>
        /// Value representing provisioning status for the stream resource
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The uuid of the stream that is the target of the stream alert rule
        /// </summary>
        public readonly string StreamId;
        /// <summary>
        /// Type of the stream alert rule
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix assigned unique identifier of the stream subscription resource
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetStreamAlertRuleResult(
            string alertRuleId,

            Outputs.GetStreamAlertRuleChangeLogResult changeLog,

            string description,

            Outputs.GetStreamAlertRuleDetectionMethodResult detectionMethod,

            bool enabled,

            string href,

            string id,

            Outputs.GetStreamAlertRuleMetricSelectorResult metricSelector,

            string name,

            Outputs.GetStreamAlertRuleResourceSelectorResult resourceSelector,

            string state,

            string streamId,

            string type,

            string uuid)
        {
            AlertRuleId = alertRuleId;
            ChangeLog = changeLog;
            Description = description;
            DetectionMethod = detectionMethod;
            Enabled = enabled;
            Href = href;
            Id = id;
            MetricSelector = metricSelector;
            Name = name;
            ResourceSelector = resourceSelector;
            State = state;
            StreamId = streamId;
            Type = type;
            Uuid = uuid;
        }
    }
}
