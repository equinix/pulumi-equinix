// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows attachment of Route Filter Polices to Fabric Connections
    /// 
    /// Additional Documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAttachment = new Equinix.Fabric.ConnectionRouteFilter("policyAttachment", new()
    ///     {
    ///         ConnectionId = "&lt;connection_uuid&gt;",
    ///         RouteFilterId = "&lt;route_filter_policy_uuid&gt;",
    ///         Direction = "INBOUND",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["connectionRouteFilterId"] = policyAttachment.Id,
    ///         ["connectionRouteFilterConnectionId"] = policyAttachment.ConnectionId,
    ///         ["connectionRouteFilterDirection"] = policyAttachment.Direction,
    ///         ["connectionRouteFilterType"] = policyAttachment.Type,
    ///         ["connectionRouteFilterAttachmentStatus"] = policyAttachment.AttachmentStatus,
    ///     };
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/connectionRouteFilter:ConnectionRouteFilter")]
    public partial class ConnectionRouteFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Status of the Route Filter Policy attachment lifecycle
        /// </summary>
        [Output("attachmentStatus")]
        public Output<string> AttachmentStatus { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Direction of the filtering of the attached Route Filter Policy
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// URI to the attached Route Filter Policy on the Connection
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        [Output("routeFilterId")]
        public Output<string> RouteFilterId { get; private set; } = null!;

        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned ID for Route Filter Policy
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionRouteFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionRouteFilter(string name, ConnectionRouteFilterArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/connectionRouteFilter:ConnectionRouteFilter", name, args ?? new ConnectionRouteFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionRouteFilter(string name, Input<string> id, ConnectionRouteFilterState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/connectionRouteFilter:ConnectionRouteFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionRouteFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionRouteFilter Get(string name, Input<string> id, ConnectionRouteFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionRouteFilter(name, id, state, options);
        }
    }

    public sealed class ConnectionRouteFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Direction of the filtering of the attached Route Filter Policy
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        [Input("routeFilterId", required: true)]
        public Input<string> RouteFilterId { get; set; } = null!;

        public ConnectionRouteFilterArgs()
        {
        }
        public static new ConnectionRouteFilterArgs Empty => new ConnectionRouteFilterArgs();
    }

    public sealed class ConnectionRouteFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Status of the Route Filter Policy attachment lifecycle
        /// </summary>
        [Input("attachmentStatus")]
        public Input<string>? AttachmentStatus { get; set; }

        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// Direction of the filtering of the attached Route Filter Policy
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// URI to the attached Route Filter Policy on the Connection
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        [Input("routeFilterId")]
        public Input<string>? RouteFilterId { get; set; }

        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix Assigned ID for Route Filter Policy
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ConnectionRouteFilterState()
        {
        }
        public static new ConnectionRouteFilterState Empty => new ConnectionRouteFilterState();
    }
}
