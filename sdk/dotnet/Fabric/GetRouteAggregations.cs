// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRouteAggregations
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raPolicy = Equinix.Fabric.GetRouteAggregations.Invoke(new()
        ///     {
        ///         Filter = new Equinix.Fabric.Inputs.GetRouteAggregationsFilterInputArgs
        ///         {
        ///             Property = "/project/projectId",
        ///             Operator = "=",
        ///             Values = new[]
        ///             {
        ///                 "&lt;route_aggregation_project_id&gt;",
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationsPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRouteAggregationName"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Name),
        ///         ["firstRouteAggregationDescription"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Description),
        ///         ["firstRouteAggregationConnectionsCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.ConnectionsCount),
        ///         ["firstRouteAggregationRulesCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteAggregationsResult> InvokeAsync(GetRouteAggregationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteAggregationsResult>("equinix:fabric/getRouteAggregations:getRouteAggregations", args ?? new GetRouteAggregationsArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raPolicy = Equinix.Fabric.GetRouteAggregations.Invoke(new()
        ///     {
        ///         Filter = new Equinix.Fabric.Inputs.GetRouteAggregationsFilterInputArgs
        ///         {
        ///             Property = "/project/projectId",
        ///             Operator = "=",
        ///             Values = new[]
        ///             {
        ///                 "&lt;route_aggregation_project_id&gt;",
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationsPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRouteAggregationName"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Name),
        ///         ["firstRouteAggregationDescription"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Description),
        ///         ["firstRouteAggregationConnectionsCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.ConnectionsCount),
        ///         ["firstRouteAggregationRulesCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteAggregationsResult> Invoke(GetRouteAggregationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteAggregationsResult>("equinix:fabric/getRouteAggregations:getRouteAggregations", args ?? new GetRouteAggregationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var raPolicy = Equinix.Fabric.GetRouteAggregations.Invoke(new()
        ///     {
        ///         Filter = new Equinix.Fabric.Inputs.GetRouteAggregationsFilterInputArgs
        ///         {
        ///             Property = "/project/projectId",
        ///             Operator = "=",
        ///             Values = new[]
        ///             {
        ///                 "&lt;route_aggregation_project_id&gt;",
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteAggregationsPaginationInputArgs
        ///         {
        ///             Limit = 2,
        ///             Offset = 1,
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRouteAggregationName"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Name),
        ///         ["firstRouteAggregationDescription"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.Description),
        ///         ["firstRouteAggregationConnectionsCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.ConnectionsCount),
        ///         ["firstRouteAggregationRulesCount"] = raPolicy.Apply(getRouteAggregationsResult =&gt; getRouteAggregationsResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteAggregationsResult> Invoke(GetRouteAggregationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteAggregationsResult>("equinix:fabric/getRouteAggregations:getRouteAggregations", args ?? new GetRouteAggregationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteAggregationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        [Input("filter", required: true)]
        public Inputs.GetRouteAggregationsFilterArgs Filter { get; set; } = null!;

        /// <summary>
        /// Pagination details for the returned route aggregations list
        /// </summary>
        [Input("pagination")]
        public Inputs.GetRouteAggregationsPaginationArgs? Pagination { get; set; }

        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        [Input("sort")]
        public Inputs.GetRouteAggregationsSortArgs? Sort { get; set; }

        public GetRouteAggregationsArgs()
        {
        }
        public static new GetRouteAggregationsArgs Empty => new GetRouteAggregationsArgs();
    }

    public sealed class GetRouteAggregationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.GetRouteAggregationsFilterInputArgs> Filter { get; set; } = null!;

        /// <summary>
        /// Pagination details for the returned route aggregations list
        /// </summary>
        [Input("pagination")]
        public Input<Inputs.GetRouteAggregationsPaginationInputArgs>? Pagination { get; set; }

        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        [Input("sort")]
        public Input<Inputs.GetRouteAggregationsSortInputArgs>? Sort { get; set; }

        public GetRouteAggregationsInvokeArgs()
        {
        }
        public static new GetRouteAggregationsInvokeArgs Empty => new GetRouteAggregationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteAggregationsResult
    {
        /// <summary>
        /// Returned list of route aggregation objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteAggregationsDataResult> Datas;
        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        public readonly Outputs.GetRouteAggregationsFilterResult Filter;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Pagination details for the returned route aggregations list
        /// </summary>
        public readonly Outputs.GetRouteAggregationsPaginationResult? Pagination;
        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        public readonly Outputs.GetRouteAggregationsSortResult? Sort;

        [OutputConstructor]
        private GetRouteAggregationsResult(
            ImmutableArray<Outputs.GetRouteAggregationsDataResult> datas,

            Outputs.GetRouteAggregationsFilterResult filter,

            string id,

            Outputs.GetRouteAggregationsPaginationResult? pagination,

            Outputs.GetRouteAggregationsSortResult? sort)
        {
            Datas = datas;
            Filter = filter;
            Id = id;
            Pagination = pagination;
            Sort = sort;
        }
    }
}
