// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetPrecisionTimeService
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ept_test = Equinix.Fabric.GetPrecisionTimeService.Invoke(new()
        ///     {
        ///         EptServiceId = "&lt;ept_service_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eptServiceId"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Id)),
        ///         ["eptServiceName"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Name)),
        ///         ["eptServiceState"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.State)),
        ///         ["eptServiceType"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Type)),
        ///         ["eptServiceIpv4"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Ipv4)),
        ///         ["eptServiceConnection"] = equinix_fabric_precision_time_service.Ptp.Connections,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetPrecisionTimeServiceResult> InvokeAsync(GetPrecisionTimeServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrecisionTimeServiceResult>("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", args ?? new GetPrecisionTimeServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ept_test = Equinix.Fabric.GetPrecisionTimeService.Invoke(new()
        ///     {
        ///         EptServiceId = "&lt;ept_service_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eptServiceId"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Id)),
        ///         ["eptServiceName"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Name)),
        ///         ["eptServiceState"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.State)),
        ///         ["eptServiceType"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Type)),
        ///         ["eptServiceIpv4"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Ipv4)),
        ///         ["eptServiceConnection"] = equinix_fabric_precision_time_service.Ptp.Connections,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPrecisionTimeServiceResult> Invoke(GetPrecisionTimeServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrecisionTimeServiceResult>("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", args ?? new GetPrecisionTimeServiceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
        /// Additional Documentation:
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ept_test = Equinix.Fabric.GetPrecisionTimeService.Invoke(new()
        ///     {
        ///         EptServiceId = "&lt;ept_service_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["eptServiceId"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Id)),
        ///         ["eptServiceName"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Name)),
        ///         ["eptServiceState"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.State)),
        ///         ["eptServiceType"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Type)),
        ///         ["eptServiceIpv4"] = ept_test.Apply(ept_test =&gt; ept_test.Apply(getPrecisionTimeServiceResult =&gt; getPrecisionTimeServiceResult.Ipv4)),
        ///         ["eptServiceConnection"] = equinix_fabric_precision_time_service.Ptp.Connections,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPrecisionTimeServiceResult> Invoke(GetPrecisionTimeServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrecisionTimeServiceResult>("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", args ?? new GetPrecisionTimeServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrecisionTimeServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the EPT Service this data source should retrieve
        /// </summary>
        [Input("eptServiceId", required: true)]
        public string EptServiceId { get; set; } = null!;

        [Input("ntpAdvancedConfigurations")]
        private List<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationArgs>? _ntpAdvancedConfigurations;

        /// <summary>
        /// NTP Advanced configuration
        /// </summary>
        public List<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationArgs> NtpAdvancedConfigurations
        {
            get => _ntpAdvancedConfigurations ?? (_ntpAdvancedConfigurations = new List<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationArgs>());
            set => _ntpAdvancedConfigurations = value;
        }

        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        [Input("project")]
        public Inputs.GetPrecisionTimeServiceProjectArgs? Project { get; set; }

        /// <summary>
        /// PTP Advanced Configuration
        /// </summary>
        [Input("ptpAdvancedConfiguration")]
        public Inputs.GetPrecisionTimeServicePtpAdvancedConfigurationArgs? PtpAdvancedConfiguration { get; set; }

        public GetPrecisionTimeServiceArgs()
        {
        }
        public static new GetPrecisionTimeServiceArgs Empty => new GetPrecisionTimeServiceArgs();
    }

    public sealed class GetPrecisionTimeServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the EPT Service this data source should retrieve
        /// </summary>
        [Input("eptServiceId", required: true)]
        public Input<string> EptServiceId { get; set; } = null!;

        [Input("ntpAdvancedConfigurations")]
        private InputList<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationInputArgs>? _ntpAdvancedConfigurations;

        /// <summary>
        /// NTP Advanced configuration
        /// </summary>
        public InputList<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationInputArgs> NtpAdvancedConfigurations
        {
            get => _ntpAdvancedConfigurations ?? (_ntpAdvancedConfigurations = new InputList<Inputs.GetPrecisionTimeServiceNtpAdvancedConfigurationInputArgs>());
            set => _ntpAdvancedConfigurations = value;
        }

        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        [Input("project")]
        public Input<Inputs.GetPrecisionTimeServiceProjectInputArgs>? Project { get; set; }

        /// <summary>
        /// PTP Advanced Configuration
        /// </summary>
        [Input("ptpAdvancedConfiguration")]
        public Input<Inputs.GetPrecisionTimeServicePtpAdvancedConfigurationInputArgs>? PtpAdvancedConfiguration { get; set; }

        public GetPrecisionTimeServiceInvokeArgs()
        {
        }
        public static new GetPrecisionTimeServiceInvokeArgs Empty => new GetPrecisionTimeServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrecisionTimeServiceResult
    {
        /// <summary>
        /// Equinix User Account associated with Precision Time Service
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceAccountResult Account;
        /// <summary>
        /// Details of the last change on the route aggregation resource
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceChangeLogResult ChangeLog;
        /// <summary>
        /// An array of objects with unique identifiers of connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrecisionTimeServiceConnectionResult> Connections;
        /// <summary>
        /// The uuid of the EPT Service this data source should retrieve
        /// </summary>
        public readonly string EptServiceId;
        /// <summary>
        /// Equinix generated Portal link for the created Precision Time Service
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An object that has Network IP Configurations for Timing Master Servers.
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceIpv4Result Ipv4;
        /// <summary>
        /// Name of Precision Time Service. Applicable values: Maximum: 24 characters; Allowed characters: alpha-numeric, hyphens ('-') and underscores ('_')
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NTP Advanced configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrecisionTimeServiceNtpAdvancedConfigurationResult> NtpAdvancedConfigurations;
        /// <summary>
        /// Precision Time Service Operation
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceOperationResult Operation;
        /// <summary>
        /// Precision Time Order
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceOrderResult Order;
        /// <summary>
        /// Precision Time Service Package Details
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServicePackageResult Package;
        /// <summary>
        /// Precision Time Service Price
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServicePrecisionTimePriceResult PrecisionTimePrice;
        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServiceProjectResult? Project;
        /// <summary>
        /// PTP Advanced Configuration
        /// </summary>
        public readonly Outputs.GetPrecisionTimeServicePtpAdvancedConfigurationResult? PtpAdvancedConfiguration;
        /// <summary>
        /// Indicator of the state of this Precision Time Service
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Choose type of Precision Time Service
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix generated id for the Precision Time Service
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetPrecisionTimeServiceResult(
            Outputs.GetPrecisionTimeServiceAccountResult account,

            Outputs.GetPrecisionTimeServiceChangeLogResult changeLog,

            ImmutableArray<Outputs.GetPrecisionTimeServiceConnectionResult> connections,

            string eptServiceId,

            string href,

            string id,

            Outputs.GetPrecisionTimeServiceIpv4Result ipv4,

            string name,

            ImmutableArray<Outputs.GetPrecisionTimeServiceNtpAdvancedConfigurationResult> ntpAdvancedConfigurations,

            Outputs.GetPrecisionTimeServiceOperationResult operation,

            Outputs.GetPrecisionTimeServiceOrderResult order,

            Outputs.GetPrecisionTimeServicePackageResult package,

            Outputs.GetPrecisionTimeServicePrecisionTimePriceResult precisionTimePrice,

            Outputs.GetPrecisionTimeServiceProjectResult? project,

            Outputs.GetPrecisionTimeServicePtpAdvancedConfigurationResult? ptpAdvancedConfiguration,

            string state,

            string type,

            string uuid)
        {
            Account = account;
            ChangeLog = changeLog;
            Connections = connections;
            EptServiceId = eptServiceId;
            Href = href;
            Id = id;
            Ipv4 = ipv4;
            Name = name;
            NtpAdvancedConfigurations = ntpAdvancedConfigurations;
            Operation = operation;
            Order = order;
            Package = package;
            PrecisionTimePrice = precisionTimePrice;
            Project = project;
            PtpAdvancedConfiguration = ptpAdvancedConfiguration;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
