// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetServiceProfiles
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serviceProfilesDataName = Equinix.Fabric.GetServiceProfiles.Invoke(new()
        ///     {
        ///         Filter = new Equinix.Fabric.Inputs.GetServiceProfilesFilterInputArgs
        ///         {
        ///             Operator = "=",
        ///             Property = "/name",
        ///             Values = new[]
        ///             {
        ///                 "&lt;list_of_profiles_to_return&gt;",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetServiceProfilesResult> InvokeAsync(GetServiceProfilesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceProfilesResult>("equinix:fabric/getServiceProfiles:getServiceProfiles", args ?? new GetServiceProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serviceProfilesDataName = Equinix.Fabric.GetServiceProfiles.Invoke(new()
        ///     {
        ///         Filter = new Equinix.Fabric.Inputs.GetServiceProfilesFilterInputArgs
        ///         {
        ///             Operator = "=",
        ///             Property = "/name",
        ///             Values = new[]
        ///             {
        ///                 "&lt;list_of_profiles_to_return&gt;",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetServiceProfilesResult> Invoke(GetServiceProfilesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceProfilesResult>("equinix:fabric/getServiceProfiles:getServiceProfiles", args ?? new GetServiceProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Service Profile Search Filter
        /// </summary>
        [Input("filter")]
        public Inputs.GetServiceProfilesFilterArgs? Filter { get; set; }

        [Input("sort")]
        private List<Inputs.GetServiceProfilesSortArgs>? _sort;

        /// <summary>
        /// Service Profile Sort criteria for Search Request response payload
        /// </summary>
        public List<Inputs.GetServiceProfilesSortArgs> Sort
        {
            get => _sort ?? (_sort = new List<Inputs.GetServiceProfilesSortArgs>());
            set => _sort = value;
        }

        /// <summary>
        /// flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        /// </summary>
        [Input("viewPoint")]
        public string? ViewPoint { get; set; }

        public GetServiceProfilesArgs()
        {
        }
        public static new GetServiceProfilesArgs Empty => new GetServiceProfilesArgs();
    }

    public sealed class GetServiceProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Service Profile Search Filter
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetServiceProfilesFilterInputArgs>? Filter { get; set; }

        [Input("sort")]
        private InputList<Inputs.GetServiceProfilesSortInputArgs>? _sort;

        /// <summary>
        /// Service Profile Sort criteria for Search Request response payload
        /// </summary>
        public InputList<Inputs.GetServiceProfilesSortInputArgs> Sort
        {
            get => _sort ?? (_sort = new InputList<Inputs.GetServiceProfilesSortInputArgs>());
            set => _sort = value;
        }

        /// <summary>
        /// flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        /// </summary>
        [Input("viewPoint")]
        public Input<string>? ViewPoint { get; set; }

        public GetServiceProfilesInvokeArgs()
        {
        }
        public static new GetServiceProfilesInvokeArgs Empty => new GetServiceProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceProfilesResult
    {
        /// <summary>
        /// List of Service Profiles
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceProfilesDatumResult> Data;
        /// <summary>
        /// Service Profile Search Filter
        /// </summary>
        public readonly Outputs.GetServiceProfilesFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Service Profile Sort criteria for Search Request response payload
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceProfilesSortResult> Sort;
        /// <summary>
        /// flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        /// </summary>
        public readonly string? ViewPoint;

        [OutputConstructor]
        private GetServiceProfilesResult(
            ImmutableArray<Outputs.GetServiceProfilesDatumResult> data,

            Outputs.GetServiceProfilesFilterResult? filter,

            string id,

            ImmutableArray<Outputs.GetServiceProfilesSortResult> sort,

            string? viewPoint)
        {
            Data = data;
            Filter = filter;
            Id = id;
            Sort = sort;
            ViewPoint = viewPoint;
        }
    }
}
