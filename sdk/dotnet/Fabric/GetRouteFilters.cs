// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRouteFilters
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicies = Equinix.Fabric.GetRouteFilters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/type",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "BGP_IPv4_PREFIX_FILTER",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/state",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "PROVISIONED",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/project/projectId",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;project_id&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteFiltersPaginationInputArgs
        ///         {
        ///             Offset = 0,
        ///             Limit = 5,
        ///             Total = 25,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersSortInputArgs
        ///             {
        ///                 Direction = "ASC",
        ///                 Property = "/name",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRfUuid"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Uuid),
        ///         ["type"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Type),
        ///         ["state"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.State),
        ///         ["notMatchedRuleAction"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteFiltersResult> InvokeAsync(GetRouteFiltersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteFiltersResult>("equinix:fabric/getRouteFilters:getRouteFilters", args ?? new GetRouteFiltersArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicies = Equinix.Fabric.GetRouteFilters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/type",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "BGP_IPv4_PREFIX_FILTER",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/state",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "PROVISIONED",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/project/projectId",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;project_id&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteFiltersPaginationInputArgs
        ///         {
        ///             Offset = 0,
        ///             Limit = 5,
        ///             Total = 25,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersSortInputArgs
        ///             {
        ///                 Direction = "ASC",
        ///                 Property = "/name",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRfUuid"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Uuid),
        ///         ["type"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Type),
        ///         ["state"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.State),
        ///         ["notMatchedRuleAction"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteFiltersResult> Invoke(GetRouteFiltersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteFiltersResult>("equinix:fabric/getRouteFilters:getRouteFilters", args ?? new GetRouteFiltersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicies = Equinix.Fabric.GetRouteFilters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/type",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "BGP_IPv4_PREFIX_FILTER",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/state",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "PROVISIONED",
        ///                 },
        ///             },
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersFilterInputArgs
        ///             {
        ///                 Property = "/project/projectId",
        ///                 Operator = "=",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;project_id&gt;",
        ///                 },
        ///             },
        ///         },
        ///         Pagination = new Equinix.Fabric.Inputs.GetRouteFiltersPaginationInputArgs
        ///         {
        ///             Offset = 0,
        ///             Limit = 5,
        ///             Total = 25,
        ///         },
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Fabric.Inputs.GetRouteFiltersSortInputArgs
        ///             {
        ///                 Direction = "ASC",
        ///                 Property = "/name",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firstRfUuid"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Uuid),
        ///         ["type"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.Type),
        ///         ["state"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.State),
        ///         ["notMatchedRuleAction"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicies.Apply(getRouteFiltersResult =&gt; getRouteFiltersResult.Datas[0]?.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteFiltersResult> Invoke(GetRouteFiltersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteFiltersResult>("equinix:fabric/getRouteFilters:getRouteFilters", args ?? new GetRouteFiltersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteFiltersArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private List<Inputs.GetRouteFiltersFilterArgs>? _filters;

        /// <summary>
        /// Filters for the Data Source Search Request. Maximum of 8 total filters.
        /// </summary>
        public List<Inputs.GetRouteFiltersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteFiltersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Pagination details for the Data Source Search Request
        /// </summary>
        [Input("pagination")]
        public Inputs.GetRouteFiltersPaginationArgs? Pagination { get; set; }

        [Input("sorts")]
        private List<Inputs.GetRouteFiltersSortArgs>? _sorts;

        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        public List<Inputs.GetRouteFiltersSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetRouteFiltersSortArgs>());
            set => _sorts = value;
        }

        public GetRouteFiltersArgs()
        {
        }
        public static new GetRouteFiltersArgs Empty => new GetRouteFiltersArgs();
    }

    public sealed class GetRouteFiltersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private InputList<Inputs.GetRouteFiltersFilterInputArgs>? _filters;

        /// <summary>
        /// Filters for the Data Source Search Request. Maximum of 8 total filters.
        /// </summary>
        public InputList<Inputs.GetRouteFiltersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteFiltersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Pagination details for the Data Source Search Request
        /// </summary>
        [Input("pagination")]
        public Input<Inputs.GetRouteFiltersPaginationInputArgs>? Pagination { get; set; }

        [Input("sorts")]
        private InputList<Inputs.GetRouteFiltersSortInputArgs>? _sorts;

        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        public InputList<Inputs.GetRouteFiltersSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetRouteFiltersSortInputArgs>());
            set => _sorts = value;
        }

        public GetRouteFiltersInvokeArgs()
        {
        }
        public static new GetRouteFiltersInvokeArgs Empty => new GetRouteFiltersInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteFiltersResult
    {
        /// <summary>
        /// List of Route Filters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFiltersDataResult> Datas;
        /// <summary>
        /// Filters for the Data Source Search Request. Maximum of 8 total filters.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFiltersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Pagination details for the Data Source Search Request
        /// </summary>
        public readonly Outputs.GetRouteFiltersPaginationResult? Pagination;
        /// <summary>
        /// Filters for the Data Source Search Request
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFiltersSortResult> Sorts;

        [OutputConstructor]
        private GetRouteFiltersResult(
            ImmutableArray<Outputs.GetRouteFiltersDataResult> datas,

            ImmutableArray<Outputs.GetRouteFiltersFilterResult> filters,

            string id,

            Outputs.GetRouteFiltersPaginationResult? pagination,

            ImmutableArray<Outputs.GetRouteFiltersSortResult> sorts)
        {
            Datas = datas;
            Filters = filters;
            Id = id;
            Pagination = pagination;
            Sorts = sorts;
        }
    }
}
