// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetConnectionRouteFilter
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var attachedPolicy = Equinix.Fabric.GetConnectionRouteFilter.Invoke(new()
        ///     {
        ///         ConnectionId = "&lt;connection_uuid&gt;",
        ///         RouteFilterId = "&lt;route_filter_uuid&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionRouteFilterId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Id),
        ///         ["connectionRouteFilterConnectionId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.ConnectionId),
        ///         ["connectionRouteFilterDirection"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Direction),
        ///         ["connectionRouteFilterType"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Type),
        ///         ["connectionRouteFilterAttachmentStatus"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.AttachmentStatus),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionRouteFilterResult> InvokeAsync(GetConnectionRouteFilterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionRouteFilterResult>("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", args ?? new GetConnectionRouteFilterArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var attachedPolicy = Equinix.Fabric.GetConnectionRouteFilter.Invoke(new()
        ///     {
        ///         ConnectionId = "&lt;connection_uuid&gt;",
        ///         RouteFilterId = "&lt;route_filter_uuid&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionRouteFilterId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Id),
        ///         ["connectionRouteFilterConnectionId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.ConnectionId),
        ///         ["connectionRouteFilterDirection"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Direction),
        ///         ["connectionRouteFilterType"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Type),
        ///         ["connectionRouteFilterAttachmentStatus"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.AttachmentStatus),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionRouteFilterResult> Invoke(GetConnectionRouteFilterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionRouteFilterResult>("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", args ?? new GetConnectionRouteFilterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var attachedPolicy = Equinix.Fabric.GetConnectionRouteFilter.Invoke(new()
        ///     {
        ///         ConnectionId = "&lt;connection_uuid&gt;",
        ///         RouteFilterId = "&lt;route_filter_uuid&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["connectionRouteFilterId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Id),
        ///         ["connectionRouteFilterConnectionId"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.ConnectionId),
        ///         ["connectionRouteFilterDirection"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Direction),
        ///         ["connectionRouteFilterType"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.Type),
        ///         ["connectionRouteFilterAttachmentStatus"] = attachedPolicy.Apply(getConnectionRouteFilterResult =&gt; getConnectionRouteFilterResult.AttachmentStatus),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionRouteFilterResult> Invoke(GetConnectionRouteFilterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionRouteFilterResult>("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", args ?? new GetConnectionRouteFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionRouteFilterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        [Input("routeFilterId", required: true)]
        public string RouteFilterId { get; set; } = null!;

        public GetConnectionRouteFilterArgs()
        {
        }
        public static new GetConnectionRouteFilterArgs Empty => new GetConnectionRouteFilterArgs();
    }

    public sealed class GetConnectionRouteFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        [Input("routeFilterId", required: true)]
        public Input<string> RouteFilterId { get; set; } = null!;

        public GetConnectionRouteFilterInvokeArgs()
        {
        }
        public static new GetConnectionRouteFilterInvokeArgs Empty => new GetConnectionRouteFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionRouteFilterResult
    {
        /// <summary>
        /// Status of the Route Filter Policy attachment lifecycle
        /// </summary>
        public readonly string AttachmentStatus;
        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        /// </summary>
        public readonly string ConnectionId;
        /// <summary>
        /// Direction of the filtering of the attached Route Filter Policy
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// URI to the attached Route Filter Policy on the Connection
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        /// </summary>
        public readonly string RouteFilterId;
        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix Assigned ID for Route Filter Policy
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetConnectionRouteFilterResult(
            string attachmentStatus,

            string connectionId,

            string direction,

            string href,

            string id,

            string routeFilterId,

            string type,

            string uuid)
        {
            AttachmentStatus = attachmentStatus;
            ConnectionId = connectionId;
            Direction = direction;
            Href = href;
            Id = id;
            RouteFilterId = routeFilterId;
            Type = type;
            Uuid = uuid;
        }
    }
}
