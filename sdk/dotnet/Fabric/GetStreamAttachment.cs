// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamAttachment
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamAttachment.Invoke(new()
        ///     {
        ///         AssetId = "&lt;id_of_the_asset_being_attached&gt;",
        ///         Asset = "&lt;asset_group&gt;",
        ///         StreamId = "&lt;id_of_the_stream_asset_is_being_attached_to&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamAttachmentResult> InvokeAsync(GetStreamAttachmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamAttachmentResult>("equinix:fabric/getStreamAttachment:getStreamAttachment", args ?? new GetStreamAttachmentArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamAttachment.Invoke(new()
        ///     {
        ///         AssetId = "&lt;id_of_the_asset_being_attached&gt;",
        ///         Asset = "&lt;asset_group&gt;",
        ///         StreamId = "&lt;id_of_the_stream_asset_is_being_attached_to&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamAttachmentResult> Invoke(GetStreamAttachmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAttachmentResult>("equinix:fabric/getStreamAttachment:getStreamAttachment", args ?? new GetStreamAttachmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamAttachment.Invoke(new()
        ///     {
        ///         AssetId = "&lt;id_of_the_asset_being_attached&gt;",
        ///         Asset = "&lt;asset_group&gt;",
        ///         StreamId = "&lt;id_of_the_stream_asset_is_being_attached_to&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamAttachmentResult> Invoke(GetStreamAttachmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamAttachmentResult>("equinix:fabric/getStreamAttachment:getStreamAttachment", args ?? new GetStreamAttachmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamAttachmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        [Input("asset", required: true)]
        public string Asset { get; set; } = null!;

        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        [Input("assetId", required: true)]
        public string AssetId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream this data source should retrieve
        /// </summary>
        [Input("streamId", required: true)]
        public string StreamId { get; set; } = null!;

        public GetStreamAttachmentArgs()
        {
        }
        public static new GetStreamAttachmentArgs Empty => new GetStreamAttachmentArgs();
    }

    public sealed class GetStreamAttachmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        [Input("asset", required: true)]
        public Input<string> Asset { get; set; } = null!;

        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        [Input("assetId", required: true)]
        public Input<string> AssetId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream this data source should retrieve
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public GetStreamAttachmentInvokeArgs()
        {
        }
        public static new GetStreamAttachmentInvokeArgs Empty => new GetStreamAttachmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamAttachmentResult
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        public readonly string Asset;
        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        public readonly string AssetId;
        /// <summary>
        /// Value representing status for the stream attachment
        /// </summary>
        public readonly string AttachmentStatus;
        /// <summary>
        /// Equinix auto generated URI to the stream attachment in Equinix Portal
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Boolean value indicating enablement of metrics for this asset stream attachment
        /// </summary>
        public readonly bool MetricsEnabled;
        /// <summary>
        /// The uuid of the stream this data source should retrieve
        /// </summary>
        public readonly string StreamId;
        /// <summary>
        /// Equinix defined type for the asset stream attachment
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned unique id for the stream attachment
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetStreamAttachmentResult(
            string asset,

            string assetId,

            string attachmentStatus,

            string href,

            string id,

            bool metricsEnabled,

            string streamId,

            string type,

            string uuid)
        {
            Asset = asset;
            AssetId = assetId;
            AttachmentStatus = attachmentStatus;
            Href = href;
            Id = id;
            MetricsEnabled = metricsEnabled;
            StreamId = streamId;
            Type = type;
            Uuid = uuid;
        }
    }
}
