// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    [EquinixResourceType("equinix:fabric/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Requester or Customer side connection configuration object of the multi-segment connection
        /// </summary>
        [Output("aSides")]
        public Output<ImmutableArray<Outputs.ConnectionASide>> ASides { get; private set; } = null!;

        /// <summary>
        /// Customer account information that is associated with this connection
        /// </summary>
        [Output("accounts")]
        public Output<ImmutableArray<Outputs.ConnectionAccount>> Accounts { get; private set; } = null!;

        /// <summary>
        /// Connection additional information
        /// </summary>
        [Output("additionalInfos")]
        public Output<ImmutableArray<Outputs.ConnectionAdditionalInfo>> AdditionalInfos { get; private set; } = null!;

        /// <summary>
        /// Connection bandwidth in Mbps
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        [Output("changeLogs")]
        public Output<ImmutableArray<Outputs.ConnectionChangeLog>> ChangeLogs { get; private set; } = null!;

        /// <summary>
        /// Connection directionality from the requester point of view
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// Connection URI information
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Connection property derived from access point locations
        /// </summary>
        [Output("isRemote")]
        public Output<bool> IsRemote { get; private set; } = null!;

        /// <summary>
        /// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Preferences for notifications on connection configuration or status changes
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.ConnectionNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Connection type-specific operational data
        /// </summary>
        [Output("operations")]
        public Output<ImmutableArray<Outputs.ConnectionOperation>> Operations { get; private set; } = null!;

        /// <summary>
        /// Order related to this connection information
        /// </summary>
        [Output("orders")]
        public Output<ImmutableArray<Outputs.ConnectionOrder>> Orders { get; private set; } = null!;

        /// <summary>
        /// Project information
        /// </summary>
        [Output("projects")]
        public Output<ImmutableArray<Outputs.ConnectionProject>> Projects { get; private set; } = null!;

        /// <summary>
        /// Redundancy Information
        /// </summary>
        [Output("redundancies")]
        public Output<ImmutableArray<Outputs.ConnectionRedundancy>> Redundancies { get; private set; } = null!;

        /// <summary>
        /// Connection overall state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Destination or Provider side connection configuration object of the multi-segment connection
        /// </summary>
        [Output("zSides")]
        public Output<ImmutableArray<Outputs.ConnectionZSide>> ZSides { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix/pulumi-equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("aSides", required: true)]
        private InputList<Inputs.ConnectionASideArgs>? _aSides;

        /// <summary>
        /// Requester or Customer side connection configuration object of the multi-segment connection
        /// </summary>
        public InputList<Inputs.ConnectionASideArgs> ASides
        {
            get => _aSides ?? (_aSides = new InputList<Inputs.ConnectionASideArgs>());
            set => _aSides = value;
        }

        [Input("additionalInfos")]
        private InputList<Inputs.ConnectionAdditionalInfoArgs>? _additionalInfos;

        /// <summary>
        /// Connection additional information
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalInfoArgs> AdditionalInfos
        {
            get => _additionalInfos ?? (_additionalInfos = new InputList<Inputs.ConnectionAdditionalInfoArgs>());
            set => _additionalInfos = value;
        }

        /// <summary>
        /// Connection bandwidth in Mbps
        /// </summary>
        [Input("bandwidth", required: true)]
        public Input<int> Bandwidth { get; set; } = null!;

        /// <summary>
        /// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<Inputs.ConnectionNotificationArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on connection configuration or status changes
        /// </summary>
        public InputList<Inputs.ConnectionNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ConnectionNotificationArgs>());
            set => _notifications = value;
        }

        [Input("orders")]
        private InputList<Inputs.ConnectionOrderArgs>? _orders;

        /// <summary>
        /// Order related to this connection information
        /// </summary>
        public InputList<Inputs.ConnectionOrderArgs> Orders
        {
            get => _orders ?? (_orders = new InputList<Inputs.ConnectionOrderArgs>());
            set => _orders = value;
        }

        [Input("projects")]
        private InputList<Inputs.ConnectionProjectArgs>? _projects;

        /// <summary>
        /// Project information
        /// </summary>
        public InputList<Inputs.ConnectionProjectArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.ConnectionProjectArgs>());
            set => _projects = value;
        }

        [Input("redundancies")]
        private InputList<Inputs.ConnectionRedundancyArgs>? _redundancies;

        /// <summary>
        /// Redundancy Information
        /// </summary>
        public InputList<Inputs.ConnectionRedundancyArgs> Redundancies
        {
            get => _redundancies ?? (_redundancies = new InputList<Inputs.ConnectionRedundancyArgs>());
            set => _redundancies = value;
        }

        /// <summary>
        /// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        /// </summary>
        [Input("type", required: true)]
        public InputUnion<string, Pulumi.Equinix.Fabric.ConnectionType> Type { get; set; } = null!;

        [Input("zSides", required: true)]
        private InputList<Inputs.ConnectionZSideArgs>? _zSides;

        /// <summary>
        /// Destination or Provider side connection configuration object of the multi-segment connection
        /// </summary>
        public InputList<Inputs.ConnectionZSideArgs> ZSides
        {
            get => _zSides ?? (_zSides = new InputList<Inputs.ConnectionZSideArgs>());
            set => _zSides = value;
        }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("aSides")]
        private InputList<Inputs.ConnectionASideGetArgs>? _aSides;

        /// <summary>
        /// Requester or Customer side connection configuration object of the multi-segment connection
        /// </summary>
        public InputList<Inputs.ConnectionASideGetArgs> ASides
        {
            get => _aSides ?? (_aSides = new InputList<Inputs.ConnectionASideGetArgs>());
            set => _aSides = value;
        }

        [Input("accounts")]
        private InputList<Inputs.ConnectionAccountGetArgs>? _accounts;

        /// <summary>
        /// Customer account information that is associated with this connection
        /// </summary>
        public InputList<Inputs.ConnectionAccountGetArgs> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<Inputs.ConnectionAccountGetArgs>());
            set => _accounts = value;
        }

        [Input("additionalInfos")]
        private InputList<Inputs.ConnectionAdditionalInfoGetArgs>? _additionalInfos;

        /// <summary>
        /// Connection additional information
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalInfoGetArgs> AdditionalInfos
        {
            get => _additionalInfos ?? (_additionalInfos = new InputList<Inputs.ConnectionAdditionalInfoGetArgs>());
            set => _additionalInfos = value;
        }

        /// <summary>
        /// Connection bandwidth in Mbps
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        [Input("changeLogs")]
        private InputList<Inputs.ConnectionChangeLogGetArgs>? _changeLogs;

        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        public InputList<Inputs.ConnectionChangeLogGetArgs> ChangeLogs
        {
            get => _changeLogs ?? (_changeLogs = new InputList<Inputs.ConnectionChangeLogGetArgs>());
            set => _changeLogs = value;
        }

        /// <summary>
        /// Connection directionality from the requester point of view
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Connection URI information
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Connection property derived from access point locations
        /// </summary>
        [Input("isRemote")]
        public Input<bool>? IsRemote { get; set; }

        /// <summary>
        /// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.ConnectionNotificationGetArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on connection configuration or status changes
        /// </summary>
        public InputList<Inputs.ConnectionNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ConnectionNotificationGetArgs>());
            set => _notifications = value;
        }

        [Input("operations")]
        private InputList<Inputs.ConnectionOperationGetArgs>? _operations;

        /// <summary>
        /// Connection type-specific operational data
        /// </summary>
        public InputList<Inputs.ConnectionOperationGetArgs> Operations
        {
            get => _operations ?? (_operations = new InputList<Inputs.ConnectionOperationGetArgs>());
            set => _operations = value;
        }

        [Input("orders")]
        private InputList<Inputs.ConnectionOrderGetArgs>? _orders;

        /// <summary>
        /// Order related to this connection information
        /// </summary>
        public InputList<Inputs.ConnectionOrderGetArgs> Orders
        {
            get => _orders ?? (_orders = new InputList<Inputs.ConnectionOrderGetArgs>());
            set => _orders = value;
        }

        [Input("projects")]
        private InputList<Inputs.ConnectionProjectGetArgs>? _projects;

        /// <summary>
        /// Project information
        /// </summary>
        public InputList<Inputs.ConnectionProjectGetArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.ConnectionProjectGetArgs>());
            set => _projects = value;
        }

        [Input("redundancies")]
        private InputList<Inputs.ConnectionRedundancyGetArgs>? _redundancies;

        /// <summary>
        /// Redundancy Information
        /// </summary>
        public InputList<Inputs.ConnectionRedundancyGetArgs> Redundancies
        {
            get => _redundancies ?? (_redundancies = new InputList<Inputs.ConnectionRedundancyGetArgs>());
            set => _redundancies = value;
        }

        /// <summary>
        /// Connection overall state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        /// </summary>
        [Input("type")]
        public InputUnion<string, Pulumi.Equinix.Fabric.ConnectionType>? Type { get; set; }

        [Input("zSides")]
        private InputList<Inputs.ConnectionZSideGetArgs>? _zSides;

        /// <summary>
        /// Destination or Provider side connection configuration object of the multi-segment connection
        /// </summary>
        public InputList<Inputs.ConnectionZSideGetArgs> ZSides
        {
            get => _zSides ?? (_zSides = new InputList<Inputs.ConnectionZSideGetArgs>());
            set => _zSides = value;
        }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
