// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamSubscription
    {
        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamSubscription.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         SubscriptionId = "&lt;subscription_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamSubscriptionResult> InvokeAsync(GetStreamSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamSubscriptionResult>("equinix:fabric/getStreamSubscription:getStreamSubscription", args ?? new GetStreamSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamSubscription.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         SubscriptionId = "&lt;subscription_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSubscriptionResult> Invoke(GetStreamSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSubscriptionResult>("equinix:fabric/getStreamSubscription:getStreamSubscription", args ?? new GetStreamSubscriptionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byIds = Equinix.Fabric.GetStreamSubscription.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         SubscriptionId = "&lt;subscription_id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSubscriptionResult> Invoke(GetStreamSubscriptionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSubscriptionResult>("equinix:fabric/getStreamSubscription:getStreamSubscription", args ?? new GetStreamSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        [Input("streamId", required: true)]
        public string StreamId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream subscription
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetStreamSubscriptionArgs()
        {
        }
        public static new GetStreamSubscriptionArgs Empty => new GetStreamSubscriptionArgs();
    }

    public sealed class GetStreamSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream subscription
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetStreamSubscriptionInvokeArgs()
        {
        }
        public static new GetStreamSubscriptionInvokeArgs Empty => new GetStreamSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamSubscriptionResult
    {
        /// <summary>
        /// Details of the last change on the stream resource
        /// </summary>
        public readonly Outputs.GetStreamSubscriptionChangeLogResult ChangeLog;
        /// <summary>
        /// Customer-provided stream subscription description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Stream subscription enabled status
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Lists of events to be included/excluded on the stream subscription
        /// </summary>
        public readonly Outputs.GetStreamSubscriptionEventSelectorResult EventSelector;
        /// <summary>
        /// Equinix assigned URI of the stream subscription resource
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Lists of metrics to be included/excluded on the stream subscription
        /// </summary>
        public readonly Outputs.GetStreamSubscriptionMetricSelectorResult MetricSelector;
        /// <summary>
        /// Customer-provided stream subscription name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The details of the subscriber to the Equinix Stream
        /// </summary>
        public readonly Outputs.GetStreamSubscriptionSinkResult Sink;
        /// <summary>
        /// Value representing provisioning status for the stream resource
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        public readonly string StreamId;
        /// <summary>
        /// The uuid of the stream subscription
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// Type of the stream subscription request
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix assigned unique identifier of the stream subscription resource
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetStreamSubscriptionResult(
            Outputs.GetStreamSubscriptionChangeLogResult changeLog,

            string description,

            bool enabled,

            Outputs.GetStreamSubscriptionEventSelectorResult eventSelector,

            string href,

            string id,

            Outputs.GetStreamSubscriptionMetricSelectorResult metricSelector,

            string name,

            Outputs.GetStreamSubscriptionSinkResult sink,

            string state,

            string streamId,

            string subscriptionId,

            string type,

            string uuid)
        {
            ChangeLog = changeLog;
            Description = description;
            Enabled = enabled;
            EventSelector = eventSelector;
            Href = href;
            Id = id;
            MetricSelector = metricSelector;
            Name = name;
            Sink = sink;
            State = state;
            StreamId = streamId;
            SubscriptionId = subscriptionId;
            Type = type;
            Uuid = uuid;
        }
    }
}
