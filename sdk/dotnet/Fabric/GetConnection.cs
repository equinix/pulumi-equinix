// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetConnection
    {
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("equinix:fabric/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("equinix:fabric/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("projects")]
        private List<Inputs.GetConnectionProjectArgs>? _projects;

        /// <summary>
        /// Project information
        /// </summary>
        public List<Inputs.GetConnectionProjectArgs> Projects
        {
            get => _projects ?? (_projects = new List<Inputs.GetConnectionProjectArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Equinix-assigned connection identifier
        /// </summary>
        [Input("uuid")]
        public string? Uuid { get; set; }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("projects")]
        private InputList<Inputs.GetConnectionProjectInputArgs>? _projects;

        /// <summary>
        /// Project information
        /// </summary>
        public InputList<Inputs.GetConnectionProjectInputArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.GetConnectionProjectInputArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Equinix-assigned connection identifier
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// Requester or Customer side connection configuration object of the multi-segment connection
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionASideResult> ASides;
        /// <summary>
        /// Customer account information that is associated with this connection
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionAccountResult> Accounts;
        /// <summary>
        /// Connection additional information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionAdditionalInfoResult> AdditionalInfos;
        /// <summary>
        /// Connection bandwidth in Mbps
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionChangeLogResult> ChangeLogs;
        /// <summary>
        /// Customer-provided connection description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Connection directionality from the requester point of view
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// Connection URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Connection property derived from access point locations
        /// </summary>
        public readonly bool IsRemote;
        /// <summary>
        /// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Preferences for notifications on connection configuration or status changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionNotificationResult> Notifications;
        /// <summary>
        /// Connection specific operational data
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionOperationResult> Operations;
        /// <summary>
        /// Order related to this connection information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionOrderResult> Orders;
        /// <summary>
        /// Project information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionProjectResult> Projects;
        /// <summary>
        /// Redundancy Information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionRedundancyResult> Redundancies;
        /// <summary>
        /// Connection overall state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned connection identifier
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// Destination or Provider side connection configuration object of the multi-segment connection
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionZSideResult> ZSides;

        [OutputConstructor]
        private GetConnectionResult(
            ImmutableArray<Outputs.GetConnectionASideResult> aSides,

            ImmutableArray<Outputs.GetConnectionAccountResult> accounts,

            ImmutableArray<Outputs.GetConnectionAdditionalInfoResult> additionalInfos,

            int bandwidth,

            ImmutableArray<Outputs.GetConnectionChangeLogResult> changeLogs,

            string description,

            string direction,

            string href,

            string id,

            bool isRemote,

            string name,

            ImmutableArray<Outputs.GetConnectionNotificationResult> notifications,

            ImmutableArray<Outputs.GetConnectionOperationResult> operations,

            ImmutableArray<Outputs.GetConnectionOrderResult> orders,

            ImmutableArray<Outputs.GetConnectionProjectResult> projects,

            ImmutableArray<Outputs.GetConnectionRedundancyResult> redundancies,

            string state,

            string type,

            string? uuid,

            ImmutableArray<Outputs.GetConnectionZSideResult> zSides)
        {
            ASides = aSides;
            Accounts = accounts;
            AdditionalInfos = additionalInfos;
            Bandwidth = bandwidth;
            ChangeLogs = changeLogs;
            Description = description;
            Direction = direction;
            Href = href;
            Id = id;
            IsRemote = isRemote;
            Name = name;
            Notifications = notifications;
            Operations = operations;
            Orders = orders;
            Projects = projects;
            Redundancies = redundancies;
            State = state;
            Type = type;
            Uuid = uuid;
            ZSides = zSides;
        }
    }
}
