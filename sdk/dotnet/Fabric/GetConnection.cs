// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetConnection
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connectionDataName = Equinix.Fabric.GetConnection.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_connection&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("equinix:fabric/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connectionDataName = Equinix.Fabric.GetConnection.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_connection&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("equinix:fabric/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("uuid", required: true)]
        public string Uuid { get; set; } = null!;

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// Requester or Customer side connection configuration object of the multi-segment connection
        /// </summary>
        public readonly Outputs.GetConnectionASideResult ASide;
        /// <summary>
        /// Customer account information that is associated with this connection
        /// </summary>
        public readonly Outputs.GetConnectionAccountResult Account;
        /// <summary>
        /// Connection additional information
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, object>> AdditionalInfo;
        /// <summary>
        /// Connection bandwidth in Mbps
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// Captures connection lifecycle change information
        /// </summary>
        public readonly Outputs.GetConnectionChangeLogResult ChangeLog;
        /// <summary>
        /// Customer-provided connection description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Connection directionality from the requester point of view
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// Connection URI information
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Connection property derived from access point locations
        /// </summary>
        public readonly bool IsRemote;
        /// <summary>
        /// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Preferences for notifications on connection configuration or status changes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionNotificationResult> Notifications;
        /// <summary>
        /// Connection type-specific operational data
        /// </summary>
        public readonly Outputs.GetConnectionOperationResult Operation;
        /// <summary>
        /// Order details
        /// </summary>
        public readonly Outputs.GetConnectionOrderResult Order;
        /// <summary>
        /// Project information
        /// </summary>
        public readonly Outputs.GetConnectionProjectResult Project;
        /// <summary>
        /// Connection Redundancy Configuration
        /// </summary>
        public readonly Outputs.GetConnectionRedundancyResult Redundancy;
        /// <summary>
        /// Connection overall state
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, EC*VC
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix-assigned connection identifier
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// Destination or Provider side connection configuration object of the multi-segment connection
        /// </summary>
        public readonly Outputs.GetConnectionZSideResult ZSide;

        [OutputConstructor]
        private GetConnectionResult(
            Outputs.GetConnectionASideResult aSide,

            Outputs.GetConnectionAccountResult account,

            ImmutableArray<ImmutableDictionary<string, object>> additionalInfo,

            int bandwidth,

            Outputs.GetConnectionChangeLogResult changeLog,

            string description,

            string direction,

            string href,

            string id,

            bool isRemote,

            string name,

            ImmutableArray<Outputs.GetConnectionNotificationResult> notifications,

            Outputs.GetConnectionOperationResult operation,

            Outputs.GetConnectionOrderResult order,

            Outputs.GetConnectionProjectResult project,

            Outputs.GetConnectionRedundancyResult redundancy,

            string state,

            string type,

            string uuid,

            Outputs.GetConnectionZSideResult zSide)
        {
            ASide = aSide;
            Account = account;
            AdditionalInfo = additionalInfo;
            Bandwidth = bandwidth;
            ChangeLog = changeLog;
            Description = description;
            Direction = direction;
            Href = href;
            Id = id;
            IsRemote = isRemote;
            Name = name;
            Notifications = notifications;
            Operation = operation;
            Order = order;
            Project = project;
            Redundancy = redundancy;
            State = state;
            Type = type;
            Uuid = uuid;
            ZSide = zSide;
        }
    }
}
