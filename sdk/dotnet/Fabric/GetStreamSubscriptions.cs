// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetStreamSubscriptions
    {
        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamSubscriptions.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamSubscriptionsPaginationInputArgs
        ///         {
        ///             Limit = 10,
        ///             Offset = 0,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamSubscriptionsResult> InvokeAsync(GetStreamSubscriptionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamSubscriptionsResult>("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", args ?? new GetStreamSubscriptionsArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamSubscriptions.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamSubscriptionsPaginationInputArgs
        ///         {
        ///             Limit = 10,
        ///             Offset = 0,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSubscriptionsResult> Invoke(GetStreamSubscriptionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSubscriptionsResult>("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", args ?? new GetStreamSubscriptionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Equinix.Fabric.GetStreamSubscriptions.Invoke(new()
        ///     {
        ///         StreamId = "&lt;stream_id&gt;",
        ///         Pagination = new Equinix.Fabric.Inputs.GetStreamSubscriptionsPaginationInputArgs
        ///         {
        ///             Limit = 10,
        ///             Offset = 0,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSubscriptionsResult> Invoke(GetStreamSubscriptionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSubscriptionsResult>("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", args ?? new GetStreamSubscriptionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamSubscriptionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        [Input("pagination", required: true)]
        public Inputs.GetStreamSubscriptionsPaginationArgs Pagination { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        [Input("streamId", required: true)]
        public string StreamId { get; set; } = null!;

        public GetStreamSubscriptionsArgs()
        {
        }
        public static new GetStreamSubscriptionsArgs Empty => new GetStreamSubscriptionsArgs();
    }

    public sealed class GetStreamSubscriptionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        [Input("pagination", required: true)]
        public Input<Inputs.GetStreamSubscriptionsPaginationInputArgs> Pagination { get; set; } = null!;

        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        public GetStreamSubscriptionsInvokeArgs()
        {
        }
        public static new GetStreamSubscriptionsInvokeArgs Empty => new GetStreamSubscriptionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamSubscriptionsResult
    {
        /// <summary>
        /// Returned list of stream objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamSubscriptionsDataResult> Datas;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Pagination details for the returned streams list
        /// </summary>
        public readonly Outputs.GetStreamSubscriptionsPaginationResult Pagination;
        /// <summary>
        /// The uuid of the stream that is the target of the stream subscription
        /// </summary>
        public readonly string StreamId;

        [OutputConstructor]
        private GetStreamSubscriptionsResult(
            ImmutableArray<Outputs.GetStreamSubscriptionsDataResult> datas,

            string id,

            Outputs.GetStreamSubscriptionsPaginationResult pagination,

            string streamId)
        {
            Datas = datas;
            Id = id;
            Pagination = pagination;
            StreamId = streamId;
        }
    }
}
