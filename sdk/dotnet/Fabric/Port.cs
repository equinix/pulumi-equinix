// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [EquinixResourceType("equinix:fabric/port:Port")]
    public partial class Port : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Port order account details
        /// </summary>
        [Output("account")]
        public Output<Outputs.PortAccount> Account { get; private set; } = null!;

        /// <summary>
        /// List of key/value objects to provide additional context to the Port order
        /// </summary>
        [Output("additionalInfos")]
        public Output<ImmutableArray<Outputs.PortAdditionalInfo>> AdditionalInfos { get; private set; } = null!;

        /// <summary>
        /// Details of the last change on the port resource
        /// </summary>
        [Output("changeLog")]
        public Output<Outputs.PortChangeLog> ChangeLog { get; private set; } = null!;

        /// <summary>
        /// Connection type that is used from the port after creation
        /// </summary>
        [Output("connectivitySourceType")]
        public Output<string> ConnectivitySourceType { get; private set; } = null!;

        /// <summary>
        /// IBX code where the port will be located
        /// </summary>
        [Output("demarcationPointIbx")]
        public Output<string> DemarcationPointIbx { get; private set; } = null!;

        /// <summary>
        /// Port device configuration
        /// </summary>
        [Output("device")]
        public Output<Outputs.PortDevice?> Device { get; private set; } = null!;

        /// <summary>
        /// Port encapsulation settings
        /// </summary>
        [Output("encapsulation")]
        public Output<Outputs.PortEncapsulation> Encapsulation { get; private set; } = null!;

        /// <summary>
        /// Equinix assigned URI of the port resource
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Boolean value to enable the created port with Link Aggregation Groups
        /// </summary>
        [Output("lagEnabled")]
        public Output<bool> LagEnabled { get; private set; } = null!;

        /// <summary>
        /// Location details for the port order
        /// </summary>
        [Output("location")]
        public Output<Outputs.PortLocation> Location { get; private set; } = null!;

        /// <summary>
        /// Designated name of the port
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of notification types and the registered users to receive those notification types
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.PortNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Details of the Port Order such as purchaseOrder details and signature
        /// </summary>
        [Output("order")]
        public Output<Outputs.PortOrder> Order { get; private set; } = null!;

        /// <summary>
        /// Physical ports that will implement this port order
        /// </summary>
        [Output("physicalPorts")]
        public Output<ImmutableArray<Outputs.PortPhysicalPort>> PhysicalPorts { get; private set; } = null!;

        /// <summary>
        /// Number of physical ports in the Port Order
        /// </summary>
        [Output("physicalPortsCount")]
        public Output<int> PhysicalPortsCount { get; private set; } = null!;

        /// <summary>
        /// Physical Ports Speed in Mbps
        /// </summary>
        [Output("physicalPortsSpeed")]
        public Output<int> PhysicalPortsSpeed { get; private set; } = null!;

        /// <summary>
        /// Physical Ports Type
        /// </summary>
        [Output("physicalPortsType")]
        public Output<string> PhysicalPortsType { get; private set; } = null!;

        /// <summary>
        /// Port order project details
        /// </summary>
        [Output("project")]
        public Output<Outputs.PortProject> Project { get; private set; } = null!;

        /// <summary>
        /// Port redundancy settings
        /// </summary>
        [Output("redundancy")]
        public Output<Outputs.PortRedundancy> Redundancy { get; private set; } = null!;

        /// <summary>
        /// Port order configuration settings
        /// </summary>
        [Output("settings")]
        public Output<Outputs.PortSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// Value representing provisioning status for the port resource
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.PortTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Type of the port order request
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix assigned unique identifier of the port resource
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a Port resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Port(string name, PortArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/port:Port", name, args ?? new PortArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Port(string name, Input<string> id, PortState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/port:Port", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Port resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Port Get(string name, Input<string> id, PortState? state = null, CustomResourceOptions? options = null)
        {
            return new Port(name, id, state, options);
        }
    }

    public sealed class PortArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Port order account details
        /// </summary>
        [Input("account", required: true)]
        public Input<Inputs.PortAccountArgs> Account { get; set; } = null!;

        [Input("additionalInfos")]
        private InputList<Inputs.PortAdditionalInfoArgs>? _additionalInfos;

        /// <summary>
        /// List of key/value objects to provide additional context to the Port order
        /// </summary>
        public InputList<Inputs.PortAdditionalInfoArgs> AdditionalInfos
        {
            get => _additionalInfos ?? (_additionalInfos = new InputList<Inputs.PortAdditionalInfoArgs>());
            set => _additionalInfos = value;
        }

        /// <summary>
        /// Connection type that is used from the port after creation
        /// </summary>
        [Input("connectivitySourceType", required: true)]
        public Input<string> ConnectivitySourceType { get; set; } = null!;

        /// <summary>
        /// IBX code where the port will be located
        /// </summary>
        [Input("demarcationPointIbx", required: true)]
        public Input<string> DemarcationPointIbx { get; set; } = null!;

        /// <summary>
        /// Port device configuration
        /// </summary>
        [Input("device")]
        public Input<Inputs.PortDeviceArgs>? Device { get; set; }

        /// <summary>
        /// Port encapsulation settings
        /// </summary>
        [Input("encapsulation", required: true)]
        public Input<Inputs.PortEncapsulationArgs> Encapsulation { get; set; } = null!;

        /// <summary>
        /// Boolean value to enable the created port with Link Aggregation Groups
        /// </summary>
        [Input("lagEnabled", required: true)]
        public Input<bool> LagEnabled { get; set; } = null!;

        /// <summary>
        /// Location details for the port order
        /// </summary>
        [Input("location", required: true)]
        public Input<Inputs.PortLocationArgs> Location { get; set; } = null!;

        /// <summary>
        /// Designated name of the port
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<Inputs.PortNotificationArgs>? _notifications;

        /// <summary>
        /// List of notification types and the registered users to receive those notification types
        /// </summary>
        public InputList<Inputs.PortNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.PortNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Details of the Port Order such as purchaseOrder details and signature
        /// </summary>
        [Input("order")]
        public Input<Inputs.PortOrderArgs>? Order { get; set; }

        [Input("physicalPorts", required: true)]
        private InputList<Inputs.PortPhysicalPortArgs>? _physicalPorts;

        /// <summary>
        /// Physical ports that will implement this port order
        /// </summary>
        public InputList<Inputs.PortPhysicalPortArgs> PhysicalPorts
        {
            get => _physicalPorts ?? (_physicalPorts = new InputList<Inputs.PortPhysicalPortArgs>());
            set => _physicalPorts = value;
        }

        /// <summary>
        /// Number of physical ports in the Port Order
        /// </summary>
        [Input("physicalPortsCount", required: true)]
        public Input<int> PhysicalPortsCount { get; set; } = null!;

        /// <summary>
        /// Physical Ports Speed in Mbps
        /// </summary>
        [Input("physicalPortsSpeed", required: true)]
        public Input<int> PhysicalPortsSpeed { get; set; } = null!;

        /// <summary>
        /// Physical Ports Type
        /// </summary>
        [Input("physicalPortsType", required: true)]
        public Input<string> PhysicalPortsType { get; set; } = null!;

        /// <summary>
        /// Port order project details
        /// </summary>
        [Input("project", required: true)]
        public Input<Inputs.PortProjectArgs> Project { get; set; } = null!;

        /// <summary>
        /// Port redundancy settings
        /// </summary>
        [Input("redundancy", required: true)]
        public Input<Inputs.PortRedundancyArgs> Redundancy { get; set; } = null!;

        /// <summary>
        /// Port order configuration settings
        /// </summary>
        [Input("settings", required: true)]
        public Input<Inputs.PortSettingsArgs> Settings { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.PortTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of the port order request
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public PortArgs()
        {
        }
        public static new PortArgs Empty => new PortArgs();
    }

    public sealed class PortState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Port order account details
        /// </summary>
        [Input("account")]
        public Input<Inputs.PortAccountGetArgs>? Account { get; set; }

        [Input("additionalInfos")]
        private InputList<Inputs.PortAdditionalInfoGetArgs>? _additionalInfos;

        /// <summary>
        /// List of key/value objects to provide additional context to the Port order
        /// </summary>
        public InputList<Inputs.PortAdditionalInfoGetArgs> AdditionalInfos
        {
            get => _additionalInfos ?? (_additionalInfos = new InputList<Inputs.PortAdditionalInfoGetArgs>());
            set => _additionalInfos = value;
        }

        /// <summary>
        /// Details of the last change on the port resource
        /// </summary>
        [Input("changeLog")]
        public Input<Inputs.PortChangeLogGetArgs>? ChangeLog { get; set; }

        /// <summary>
        /// Connection type that is used from the port after creation
        /// </summary>
        [Input("connectivitySourceType")]
        public Input<string>? ConnectivitySourceType { get; set; }

        /// <summary>
        /// IBX code where the port will be located
        /// </summary>
        [Input("demarcationPointIbx")]
        public Input<string>? DemarcationPointIbx { get; set; }

        /// <summary>
        /// Port device configuration
        /// </summary>
        [Input("device")]
        public Input<Inputs.PortDeviceGetArgs>? Device { get; set; }

        /// <summary>
        /// Port encapsulation settings
        /// </summary>
        [Input("encapsulation")]
        public Input<Inputs.PortEncapsulationGetArgs>? Encapsulation { get; set; }

        /// <summary>
        /// Equinix assigned URI of the port resource
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Boolean value to enable the created port with Link Aggregation Groups
        /// </summary>
        [Input("lagEnabled")]
        public Input<bool>? LagEnabled { get; set; }

        /// <summary>
        /// Location details for the port order
        /// </summary>
        [Input("location")]
        public Input<Inputs.PortLocationGetArgs>? Location { get; set; }

        /// <summary>
        /// Designated name of the port
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.PortNotificationGetArgs>? _notifications;

        /// <summary>
        /// List of notification types and the registered users to receive those notification types
        /// </summary>
        public InputList<Inputs.PortNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.PortNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Details of the Port Order such as purchaseOrder details and signature
        /// </summary>
        [Input("order")]
        public Input<Inputs.PortOrderGetArgs>? Order { get; set; }

        [Input("physicalPorts")]
        private InputList<Inputs.PortPhysicalPortGetArgs>? _physicalPorts;

        /// <summary>
        /// Physical ports that will implement this port order
        /// </summary>
        public InputList<Inputs.PortPhysicalPortGetArgs> PhysicalPorts
        {
            get => _physicalPorts ?? (_physicalPorts = new InputList<Inputs.PortPhysicalPortGetArgs>());
            set => _physicalPorts = value;
        }

        /// <summary>
        /// Number of physical ports in the Port Order
        /// </summary>
        [Input("physicalPortsCount")]
        public Input<int>? PhysicalPortsCount { get; set; }

        /// <summary>
        /// Physical Ports Speed in Mbps
        /// </summary>
        [Input("physicalPortsSpeed")]
        public Input<int>? PhysicalPortsSpeed { get; set; }

        /// <summary>
        /// Physical Ports Type
        /// </summary>
        [Input("physicalPortsType")]
        public Input<string>? PhysicalPortsType { get; set; }

        /// <summary>
        /// Port order project details
        /// </summary>
        [Input("project")]
        public Input<Inputs.PortProjectGetArgs>? Project { get; set; }

        /// <summary>
        /// Port redundancy settings
        /// </summary>
        [Input("redundancy")]
        public Input<Inputs.PortRedundancyGetArgs>? Redundancy { get; set; }

        /// <summary>
        /// Port order configuration settings
        /// </summary>
        [Input("settings")]
        public Input<Inputs.PortSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// Value representing provisioning status for the port resource
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("timeouts")]
        public Input<Inputs.PortTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of the port order request
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix assigned unique identifier of the port resource
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public PortState()
        {
        }
        public static new PortState Empty => new PortState();
    }
}
