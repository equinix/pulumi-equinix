// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Attachments
    /// 
    /// Additional Documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var asset = new Equinix.Fabric.StreamAttachment("asset", new()
    ///     {
    ///         Asset = "&lt;asset_group&gt;",
    ///         AssetId = "&lt;id_of_the_asset_being_attached&gt;",
    ///         StreamId = "&lt;id_of_the_stream_asset_is_being_attached_to&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/streamAttachment:StreamAttachment")]
    public partial class StreamAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        [Output("asset")]
        public Output<string> Asset { get; private set; } = null!;

        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        [Output("assetId")]
        public Output<string> AssetId { get; private set; } = null!;

        /// <summary>
        /// Value representing status for the stream attachment
        /// </summary>
        [Output("attachmentStatus")]
        public Output<string> AttachmentStatus { get; private set; } = null!;

        /// <summary>
        /// Equinix auto generated URI to the stream attachment in Equinix Portal
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Boolean value indicating enablement of metrics for this asset stream attachment
        /// </summary>
        [Output("metricsEnabled")]
        public Output<bool> MetricsEnabled { get; private set; } = null!;

        /// <summary>
        /// UUID of the stream that is the target of this asset attachment
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.StreamAttachmentTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Equinix defined type for the asset stream attachment
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix-assigned unique id for the stream attachment
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a StreamAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamAttachment(string name, StreamAttachmentArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/streamAttachment:StreamAttachment", name, args ?? new StreamAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamAttachment(string name, Input<string> id, StreamAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/streamAttachment:StreamAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamAttachment Get(string name, Input<string> id, StreamAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamAttachment(name, id, state, options);
        }
    }

    public sealed class StreamAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        [Input("asset", required: true)]
        public Input<string> Asset { get; set; } = null!;

        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        [Input("assetId", required: true)]
        public Input<string> AssetId { get; set; } = null!;

        /// <summary>
        /// Boolean value indicating enablement of metrics for this asset stream attachment
        /// </summary>
        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        /// <summary>
        /// UUID of the stream that is the target of this asset attachment
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.StreamAttachmentTimeoutsArgs>? Timeouts { get; set; }

        public StreamAttachmentArgs()
        {
        }
        public static new StreamAttachmentArgs Empty => new StreamAttachmentArgs();
    }

    public sealed class StreamAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Equinix defined asset category. Matches the product name the asset is a part of
        /// </summary>
        [Input("asset")]
        public Input<string>? Asset { get; set; }

        /// <summary>
        /// Equinix defined UUID of the asset being attached to the stream
        /// </summary>
        [Input("assetId")]
        public Input<string>? AssetId { get; set; }

        /// <summary>
        /// Value representing status for the stream attachment
        /// </summary>
        [Input("attachmentStatus")]
        public Input<string>? AttachmentStatus { get; set; }

        /// <summary>
        /// Equinix auto generated URI to the stream attachment in Equinix Portal
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Boolean value indicating enablement of metrics for this asset stream attachment
        /// </summary>
        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        /// <summary>
        /// UUID of the stream that is the target of this asset attachment
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.StreamAttachmentTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Equinix defined type for the asset stream attachment
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned unique id for the stream attachment
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public StreamAttachmentState()
        {
        }
        public static new StreamAttachmentState Empty => new StreamAttachmentState();
    }
}
