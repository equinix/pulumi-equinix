// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Aggregation
    /// 
    /// Additional Documentation:
    /// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
    /// </summary>
    [EquinixResourceType("equinix:fabric/routeAggregation:RouteAggregation")]
    public partial class RouteAggregation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Current state of latest Route Aggregation change
        /// </summary>
        [Output("change")]
        public Output<Outputs.RouteAggregationChange> Change { get; private set; } = null!;

        /// <summary>
        /// Details of the last change on the route aggregation resource
        /// </summary>
        [Output("changeLog")]
        public Output<Outputs.RouteAggregationChangeLog> ChangeLog { get; private set; } = null!;

        /// <summary>
        /// Number of Connections attached to route aggregation
        /// </summary>
        [Output("connectionsCount")]
        public Output<int> ConnectionsCount { get; private set; } = null!;

        /// <summary>
        /// Customer-provided route aggregation description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Equinix auto generated URI to the route aggregation resource
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Customer provided name of the route aggregation
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        [Output("project")]
        public Output<Outputs.RouteAggregationProject> Project { get; private set; } = null!;

        /// <summary>
        /// Number of Rules attached to route aggregation
        /// </summary>
        [Output("rulesCount")]
        public Output<int> RulesCount { get; private set; } = null!;

        /// <summary>
        /// Value representing provisioning status for the route aggregation resource
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RouteAggregationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix-assigned unique id for the route aggregation resource
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a RouteAggregation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteAggregation(string name, RouteAggregationArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeAggregation:RouteAggregation", name, args ?? new RouteAggregationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteAggregation(string name, Input<string> id, RouteAggregationState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/routeAggregation:RouteAggregation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteAggregation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteAggregation Get(string name, Input<string> id, RouteAggregationState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteAggregation(name, id, state, options);
        }
    }

    public sealed class RouteAggregationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Customer-provided route aggregation description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Customer provided name of the route aggregation
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        [Input("project", required: true)]
        public Input<Inputs.RouteAggregationProjectArgs> Project { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.RouteAggregationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RouteAggregationArgs()
        {
        }
        public static new RouteAggregationArgs Empty => new RouteAggregationArgs();
    }

    public sealed class RouteAggregationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Current state of latest Route Aggregation change
        /// </summary>
        [Input("change")]
        public Input<Inputs.RouteAggregationChangeGetArgs>? Change { get; set; }

        /// <summary>
        /// Details of the last change on the route aggregation resource
        /// </summary>
        [Input("changeLog")]
        public Input<Inputs.RouteAggregationChangeLogGetArgs>? ChangeLog { get; set; }

        /// <summary>
        /// Number of Connections attached to route aggregation
        /// </summary>
        [Input("connectionsCount")]
        public Input<int>? ConnectionsCount { get; set; }

        /// <summary>
        /// Customer-provided route aggregation description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Equinix auto generated URI to the route aggregation resource
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Customer provided name of the route aggregation
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Equinix Project attribute object
        /// </summary>
        [Input("project")]
        public Input<Inputs.RouteAggregationProjectGetArgs>? Project { get; set; }

        /// <summary>
        /// Number of Rules attached to route aggregation
        /// </summary>
        [Input("rulesCount")]
        public Input<int>? RulesCount { get; set; }

        /// <summary>
        /// Value representing provisioning status for the route aggregation resource
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("timeouts")]
        public Input<Inputs.RouteAggregationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned unique id for the route aggregation resource
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public RouteAggregationState()
        {
        }
        public static new RouteAggregationState Empty => new RouteAggregationState();
    }
}
