// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Network
    /// 
    /// Additional documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
    /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var newNetwork = new Equinix.Fabric.Network("newNetwork", new()
    ///     {
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.NetworkNotificationArgs
    ///             {
    ///                 Emails = new[]
    ///                 {
    ///                     "example@equinix.com",
    ///                     "test1@equinix.com",
    ///                 },
    ///                 Type = "ALL",
    ///             },
    ///         },
    ///         Project = new Equinix.Fabric.Inputs.NetworkProjectArgs
    ///         {
    ///             ProjectId = "776847000642406",
    ///         },
    ///         Scope = "GLOBAL",
    ///         Type = "EVPLAN",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Information on asset change operation
        /// </summary>
        [Output("change")]
        public Output<Outputs.NetworkChange> Change { get; private set; } = null!;

        /// <summary>
        /// A permanent record of asset creation, modification, or deletion
        /// </summary>
        [Output("changeLog")]
        public Output<Outputs.NetworkChangeLog> ChangeLog { get; private set; } = null!;

        /// <summary>
        /// Number of connections associated with this network
        /// </summary>
        [Output("connectionsCount")]
        public Output<int> ConnectionsCount { get; private set; } = null!;

        /// <summary>
        /// Fabric Network URI information
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Fabric Network location
        /// </summary>
        [Output("location")]
        public Output<Outputs.NetworkLocation> Location { get; private set; } = null!;

        /// <summary>
        /// Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Preferences for notifications on Fabric Network configuration or status changes
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.NetworkNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Network operation information that is associated with this Fabric Network
        /// </summary>
        [Output("operation")]
        public Output<Outputs.NetworkOperation> Operation { get; private set; } = null!;

        /// <summary>
        /// Fabric Network project
        /// </summary>
        [Output("project")]
        public Output<Outputs.NetworkProject> Project { get; private set; } = null!;

        /// <summary>
        /// Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// Fabric Network overall state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix-assigned network identifier
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fabric Network location
        /// </summary>
        [Input("location")]
        public Input<Inputs.NetworkLocationArgs>? Location { get; set; }

        /// <summary>
        /// Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<Inputs.NetworkNotificationArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on Fabric Network configuration or status changes
        /// </summary>
        public InputList<Inputs.NetworkNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.NetworkNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Fabric Network project
        /// </summary>
        [Input("project", required: true)]
        public Input<Inputs.NetworkProjectArgs> Project { get; set; } = null!;

        /// <summary>
        /// Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information on asset change operation
        /// </summary>
        [Input("change")]
        public Input<Inputs.NetworkChangeGetArgs>? Change { get; set; }

        /// <summary>
        /// A permanent record of asset creation, modification, or deletion
        /// </summary>
        [Input("changeLog")]
        public Input<Inputs.NetworkChangeLogGetArgs>? ChangeLog { get; set; }

        /// <summary>
        /// Number of connections associated with this network
        /// </summary>
        [Input("connectionsCount")]
        public Input<int>? ConnectionsCount { get; set; }

        /// <summary>
        /// Fabric Network URI information
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Fabric Network location
        /// </summary>
        [Input("location")]
        public Input<Inputs.NetworkLocationGetArgs>? Location { get; set; }

        /// <summary>
        /// Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.NetworkNotificationGetArgs>? _notifications;

        /// <summary>
        /// Preferences for notifications on Fabric Network configuration or status changes
        /// </summary>
        public InputList<Inputs.NetworkNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.NetworkNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// Network operation information that is associated with this Fabric Network
        /// </summary>
        [Input("operation")]
        public Input<Inputs.NetworkOperationGetArgs>? Operation { get; set; }

        /// <summary>
        /// Fabric Network project
        /// </summary>
        [Input("project")]
        public Input<Inputs.NetworkProjectGetArgs>? Project { get; set; }

        /// <summary>
        /// Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Fabric Network overall state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned network identifier
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
