// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// Fabric V4 API compatible resource allows creation and management of Equinix Fabric connection
    /// 
    /// Additional documentation:
    /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
    /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
    /// 
    /// ## Example Usage
    /// ### example 3
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var direct = new Equinix.Fabric.RoutingProtocol("direct", new()
    ///     {
    ///         ConnectionUuid = "&lt;some_id&gt;",
    ///         Type = "DIRECT",
    ///         Name = "direct_rp",
    ///         DirectIpv4 = new Equinix.Fabric.Inputs.RoutingProtocolDirectIpv4Args
    ///         {
    ///             EquinixIfaceIp = "190.1.1.1/30",
    ///         },
    ///         DirectIpv6 = new Equinix.Fabric.Inputs.RoutingProtocolDirectIpv6Args
    ///         {
    ///             EquinixIfaceIp = "190::1:1/126",
    ///         },
    ///     });
    /// 
    ///     var bgp = new Equinix.Fabric.RoutingProtocol("bgp", new()
    ///     {
    ///         ConnectionUuid = "&lt;same_connection_id_as_first_equinix_fabric_routing_protocol&gt;",
    ///         Type = "BGP",
    ///         Name = "bgp_rp",
    ///         BgpIpv4 = new Equinix.Fabric.Inputs.RoutingProtocolBgpIpv4Args
    ///         {
    ///             CustomerPeerIp = "190.1.1.2",
    ///             Enabled = true,
    ///         },
    ///         BgpIpv6 = new Equinix.Fabric.Inputs.RoutingProtocolBgpIpv6Args
    ///         {
    ///             CustomerPeerIp = "190::1:2",
    ///             Enabled = true,
    ///         },
    ///         CustomerAsn = 4532,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             direct,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 1
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var direct = new Equinix.Fabric.RoutingProtocol("direct", new()
    ///     {
    ///         ConnectionUuid = "&lt;some_id&gt;",
    ///         Type = "DIRECT",
    ///         Name = "direct_rp",
    ///         DirectIpv4 = new Equinix.Fabric.Inputs.RoutingProtocolDirectIpv4Args
    ///         {
    ///             EquinixIfaceIp = "190.1.1.1/30",
    ///         },
    ///         DirectIpv6 = new Equinix.Fabric.Inputs.RoutingProtocolDirectIpv6Args
    ///         {
    ///             EquinixIfaceIp = "190::1:1/126",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 2
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bgp = new Equinix.Fabric.RoutingProtocol("bgp", new()
    ///     {
    ///         ConnectionUuid = "&lt;same_connection_id_as_first_equinix_fabric_routing_protocol&gt;",
    ///         Type = "BGP",
    ///         Name = "bgp_rp",
    ///         BgpIpv4 = new Equinix.Fabric.Inputs.RoutingProtocolBgpIpv4Args
    ///         {
    ///             CustomerPeerIp = "190.1.1.2",
    ///             Enabled = true,
    ///         },
    ///         BgpIpv6 = new Equinix.Fabric.Inputs.RoutingProtocolBgpIpv6Args
    ///         {
    ///             CustomerPeerIp = "190::1:2",
    ///             Enabled = true,
    ///         },
    ///         CustomerAsn = 4532,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/routingProtocol:RoutingProtocol")]
    public partial class RoutingProtocol : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        [Output("bfd")]
        public Output<Outputs.RoutingProtocolBfd> Bfd { get; private set; } = null!;

        /// <summary>
        /// BGP authorization key
        /// </summary>
        [Output("bgpAuthKey")]
        public Output<string> BgpAuthKey { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        [Output("bgpIpv4")]
        public Output<Outputs.RoutingProtocolBgpIpv4> BgpIpv4 { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        [Output("bgpIpv6")]
        public Output<Outputs.RoutingProtocolBgpIpv6> BgpIpv6 { get; private set; } = null!;

        /// <summary>
        /// Captures Routing Protocol lifecycle change information
        /// </summary>
        [Output("changeLogs")]
        public Output<ImmutableArray<Outputs.RoutingProtocolChangeLog>> ChangeLogs { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol configuration Changes
        /// </summary>
        [Output("changes")]
        public Output<ImmutableArray<Outputs.RoutingProtocolChange>> Changes { get; private set; } = null!;

        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Output("connectionUuid")]
        public Output<string> ConnectionUuid { get; private set; } = null!;

        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        [Output("customerAsn")]
        public Output<int> CustomerAsn { get; private set; } = null!;

        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        [Output("directIpv4")]
        public Output<Outputs.RoutingProtocolDirectIpv4> DirectIpv4 { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        [Output("directIpv6")]
        public Output<Outputs.RoutingProtocolDirectIpv6> DirectIpv6 { get; private set; } = null!;

        /// <summary>
        /// Equinix ASN
        /// </summary>
        [Output("equinixAsn")]
        public Output<int> EquinixAsn { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol URI information
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol type-specific operational data
        /// </summary>
        [Output("operations")]
        public Output<ImmutableArray<Outputs.RoutingProtocolOperation>> Operations { get; private set; } = null!;

        /// <summary>
        /// Routing Protocol overall state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Defines the routing protocol type like BGP or DIRECT
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a RoutingProtocol resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoutingProtocol(string name, RoutingProtocolArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/routingProtocol:RoutingProtocol", name, args ?? new RoutingProtocolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoutingProtocol(string name, Input<string> id, RoutingProtocolState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/routingProtocol:RoutingProtocol", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoutingProtocol resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoutingProtocol Get(string name, Input<string> id, RoutingProtocolState? state = null, CustomResourceOptions? options = null)
        {
            return new RoutingProtocol(name, id, state, options);
        }
    }

    public sealed class RoutingProtocolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        [Input("bfd")]
        public Input<Inputs.RoutingProtocolBfdArgs>? Bfd { get; set; }

        /// <summary>
        /// BGP authorization key
        /// </summary>
        [Input("bgpAuthKey")]
        public Input<string>? BgpAuthKey { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        [Input("bgpIpv4")]
        public Input<Inputs.RoutingProtocolBgpIpv4Args>? BgpIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        [Input("bgpIpv6")]
        public Input<Inputs.RoutingProtocolBgpIpv6Args>? BgpIpv6 { get; set; }

        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid", required: true)]
        public Input<string> ConnectionUuid { get; set; } = null!;

        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        [Input("customerAsn")]
        public Input<int>? CustomerAsn { get; set; }

        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        [Input("directIpv4")]
        public Input<Inputs.RoutingProtocolDirectIpv4Args>? DirectIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        [Input("directIpv6")]
        public Input<Inputs.RoutingProtocolDirectIpv6Args>? DirectIpv6 { get; set; }

        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the routing protocol type like BGP or DIRECT
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public RoutingProtocolArgs()
        {
        }
        public static new RoutingProtocolArgs Empty => new RoutingProtocolArgs();
    }

    public sealed class RoutingProtocolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bidirectional Forwarding Detection
        /// </summary>
        [Input("bfd")]
        public Input<Inputs.RoutingProtocolBfdGetArgs>? Bfd { get; set; }

        /// <summary>
        /// BGP authorization key
        /// </summary>
        [Input("bgpAuthKey")]
        public Input<string>? BgpAuthKey { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv4
        /// </summary>
        [Input("bgpIpv4")]
        public Input<Inputs.RoutingProtocolBgpIpv4GetArgs>? BgpIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol BGP IPv6
        /// </summary>
        [Input("bgpIpv6")]
        public Input<Inputs.RoutingProtocolBgpIpv6GetArgs>? BgpIpv6 { get; set; }

        [Input("changeLogs")]
        private InputList<Inputs.RoutingProtocolChangeLogGetArgs>? _changeLogs;

        /// <summary>
        /// Captures Routing Protocol lifecycle change information
        /// </summary>
        public InputList<Inputs.RoutingProtocolChangeLogGetArgs> ChangeLogs
        {
            get => _changeLogs ?? (_changeLogs = new InputList<Inputs.RoutingProtocolChangeLogGetArgs>());
            set => _changeLogs = value;
        }

        [Input("changes")]
        private InputList<Inputs.RoutingProtocolChangeGetArgs>? _changes;

        /// <summary>
        /// Routing Protocol configuration Changes
        /// </summary>
        public InputList<Inputs.RoutingProtocolChangeGetArgs> Changes
        {
            get => _changes ?? (_changes = new InputList<Inputs.RoutingProtocolChangeGetArgs>());
            set => _changes = value;
        }

        /// <summary>
        /// Connection URI associated with Routing Protocol
        /// </summary>
        [Input("connectionUuid")]
        public Input<string>? ConnectionUuid { get; set; }

        /// <summary>
        /// Customer-provided ASN
        /// </summary>
        [Input("customerAsn")]
        public Input<int>? CustomerAsn { get; set; }

        /// <summary>
        /// Customer-provided Fabric Routing Protocol description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv4
        /// </summary>
        [Input("directIpv4")]
        public Input<Inputs.RoutingProtocolDirectIpv4GetArgs>? DirectIpv4 { get; set; }

        /// <summary>
        /// Routing Protocol Direct IPv6
        /// </summary>
        [Input("directIpv6")]
        public Input<Inputs.RoutingProtocolDirectIpv6GetArgs>? DirectIpv6 { get; set; }

        /// <summary>
        /// Equinix ASN
        /// </summary>
        [Input("equinixAsn")]
        public Input<int>? EquinixAsn { get; set; }

        /// <summary>
        /// Routing Protocol URI information
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operations")]
        private InputList<Inputs.RoutingProtocolOperationGetArgs>? _operations;

        /// <summary>
        /// Routing Protocol type-specific operational data
        /// </summary>
        public InputList<Inputs.RoutingProtocolOperationGetArgs> Operations
        {
            get => _operations ?? (_operations = new InputList<Inputs.RoutingProtocolOperationGetArgs>());
            set => _operations = value;
        }

        /// <summary>
        /// Routing Protocol overall state
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Defines the routing protocol type like BGP or DIRECT
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix-assigned routing protocol identifier
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public RoutingProtocolState()
        {
        }
        public static new RoutingProtocolState Empty => new RoutingProtocolState();
    }
}
