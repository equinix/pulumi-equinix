// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAttachment = new Equinix.Fabric.ConnectionRouteAggregation("policy_attachment", new()
    ///     {
    ///         RouteAggregationId = "&lt;route_aggregation_id&gt;",
    ///         ConnectionId = "&lt;connection_id&gt;",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["connectionRouteAggregationId"] = policyAttachment.Id,
    ///         ["connectionRouteAggregationConnectionId"] = policyAttachment.ConnectionId,
    ///         ["connectionRouteAggregationType"] = policyAttachment.Type,
    ///         ["connectionRouteAggregationAttachmentStatus"] = policyAttachment.AttachmentStatus,
    ///     };
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation")]
    public partial class ConnectionRouteAggregation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Status of the Route Aggregation Policy attachment lifecycle
        /// </summary>
        [Output("attachmentStatus")]
        public Output<string> AttachmentStatus { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// URI to the attached Route Aggregation Policy on the Connection
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// UUID of the Route Aggregation to apply this Rule to
        /// </summary>
        [Output("routeAggregationId")]
        public Output<string> RouteAggregationId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ConnectionRouteAggregationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Equinix Assigned ID for Route Aggregation Policy
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionRouteAggregation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionRouteAggregation(string name, ConnectionRouteAggregationArgs args, CustomResourceOptions? options = null)
            : base("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation", name, args ?? new ConnectionRouteAggregationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionRouteAggregation(string name, Input<string> id, ConnectionRouteAggregationState? state = null, CustomResourceOptions? options = null)
            : base("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionRouteAggregation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionRouteAggregation Get(string name, Input<string> id, ConnectionRouteAggregationState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectionRouteAggregation(name, id, state, options);
        }
    }

    public sealed class ConnectionRouteAggregationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// UUID of the Route Aggregation to apply this Rule to
        /// </summary>
        [Input("routeAggregationId", required: true)]
        public Input<string> RouteAggregationId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ConnectionRouteAggregationTimeoutsArgs>? Timeouts { get; set; }

        public ConnectionRouteAggregationArgs()
        {
        }
        public static new ConnectionRouteAggregationArgs Empty => new ConnectionRouteAggregationArgs();
    }

    public sealed class ConnectionRouteAggregationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Status of the Route Aggregation Policy attachment lifecycle
        /// </summary>
        [Input("attachmentStatus")]
        public Input<string>? AttachmentStatus { get; set; }

        /// <summary>
        /// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// URI to the attached Route Aggregation Policy on the Connection
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// UUID of the Route Aggregation to apply this Rule to
        /// </summary>
        [Input("routeAggregationId")]
        public Input<string>? RouteAggregationId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ConnectionRouteAggregationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Equinix Assigned ID for Route Aggregation Policy
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ConnectionRouteAggregationState()
        {
        }
        public static new ConnectionRouteAggregationState Empty => new ConnectionRouteAggregationState();
    }
}
