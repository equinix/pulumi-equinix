// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetRouteFilter
    {
        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicy = Equinix.Fabric.GetRouteFilter.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_route_filter",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Id),
        ///         ["type"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Type),
        ///         ["state"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.State),
        ///         ["notMatchedRulesAction"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteFilterResult> InvokeAsync(GetRouteFilterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteFilterResult>("equinix:fabric/getRouteFilter:getRouteFilter", args ?? new GetRouteFilterArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicy = Equinix.Fabric.GetRouteFilter.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_route_filter",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Id),
        ///         ["type"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Type),
        ///         ["state"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.State),
        ///         ["notMatchedRulesAction"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteFilterResult> Invoke(GetRouteFilterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteFilterResult>("equinix:fabric/getRouteFilter:getRouteFilter", args ?? new GetRouteFilterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
        /// 
        /// Additional Documentation:
        /// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        /// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var rfPolicy = Equinix.Fabric.GetRouteFilter.Invoke(new()
        ///     {
        ///         Uuid = "&lt;uuid_of_route_filter",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Id),
        ///         ["type"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.Type),
        ///         ["state"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.State),
        ///         ["notMatchedRulesAction"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.NotMatchedRuleAction),
        ///         ["connectionsCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.ConnectionsCount),
        ///         ["rulesCount"] = rfPolicy.Apply(getRouteFilterResult =&gt; getRouteFilterResult.RulesCount),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteFilterResult> Invoke(GetRouteFilterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteFilterResult>("equinix:fabric/getRouteFilter:getRouteFilter", args ?? new GetRouteFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteFilterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix Assigned ID for Route Filter
        /// </summary>
        [Input("uuid", required: true)]
        public string Uuid { get; set; } = null!;

        public GetRouteFilterArgs()
        {
        }
        public static new GetRouteFilterArgs Empty => new GetRouteFilterArgs();
    }

    public sealed class GetRouteFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Equinix Assigned ID for Route Filter
        /// </summary>
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public GetRouteFilterInvokeArgs()
        {
        }
        public static new GetRouteFilterInvokeArgs Empty => new GetRouteFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteFilterResult
    {
        public readonly ImmutableArray<Outputs.GetRouteFilterChangeLogResult> ChangeLogs;
        /// <summary>
        /// An object with the details of the previous change applied on the Route Filter
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFilterChangeResult> Changes;
        /// <summary>
        /// The number of Fabric Connections that this Route Filter is attached to
        /// </summary>
        public readonly int ConnectionsCount;
        /// <summary>
        /// Optional description to add to the Route Filter you will be creating
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Route filter URI
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the Route Filter
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        /// </summary>
        public readonly string NotMatchedRuleAction;
        /// <summary>
        /// The Project object that contains ProjectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteFilterProjectResult> Projects;
        /// <summary>
        /// The number of Route Filter Rules attached to this Route Filter
        /// </summary>
        public readonly int RulesCount;
        /// <summary>
        /// State of the Route Filter in its lifecycle
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Equinix Assigned ID for Route Filter
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetRouteFilterResult(
            ImmutableArray<Outputs.GetRouteFilterChangeLogResult> changeLogs,

            ImmutableArray<Outputs.GetRouteFilterChangeResult> changes,

            int connectionsCount,

            string description,

            string href,

            string id,

            string name,

            string notMatchedRuleAction,

            ImmutableArray<Outputs.GetRouteFilterProjectResult> projects,

            int rulesCount,

            string state,

            string type,

            string uuid)
        {
            ChangeLogs = changeLogs;
            Changes = changes;
            ConnectionsCount = connectionsCount;
            Description = description;
            Href = href;
            Id = id;
            Name = name;
            NotMatchedRuleAction = notMatchedRuleAction;
            Projects = projects;
            RulesCount = rulesCount;
            State = state;
            Type = type;
            Uuid = uuid;
        }
    }
}
