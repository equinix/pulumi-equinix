// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Fabric
{
    public static class GetMetro
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metro = Equinix.Fabric.GetMetro.Invoke(new()
        ///     {
        ///         MetroCode = "&lt;metro_code&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = metro.Apply(getMetroResult =&gt; getMetroResult.Id),
        ///         ["type"] = metro.Apply(getMetroResult =&gt; getMetroResult.Type),
        ///         ["metroCode"] = metro.Apply(getMetroResult =&gt; getMetroResult.MetroCode),
        ///         ["region"] = metro.Apply(getMetroResult =&gt; getMetroResult.Region),
        ///         ["name"] = metro.Apply(getMetroResult =&gt; getMetroResult.Name),
        ///         ["equinixAsn"] = metro.Apply(getMetroResult =&gt; getMetroResult.EquinixAsn),
        ///         ["localVcBandwidthMax"] = metro.Apply(getMetroResult =&gt; getMetroResult.LocalVcBandwidthMax),
        ///         ["geoCoordinates"] = metro.Apply(getMetroResult =&gt; getMetroResult.GeoCoordinates),
        ///         ["connectedMetros"] = metro.Apply(getMetroResult =&gt; getMetroResult.ConnectedMetros),
        ///         ["geoScopes"] = metro.Apply(getMetroResult =&gt; getMetroResult.GeoScopes),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetroResult> InvokeAsync(GetMetroArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetroResult>("equinix:fabric/getMetro:getMetro", args ?? new GetMetroArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metro = Equinix.Fabric.GetMetro.Invoke(new()
        ///     {
        ///         MetroCode = "&lt;metro_code&gt;",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = metro.Apply(getMetroResult =&gt; getMetroResult.Id),
        ///         ["type"] = metro.Apply(getMetroResult =&gt; getMetroResult.Type),
        ///         ["metroCode"] = metro.Apply(getMetroResult =&gt; getMetroResult.MetroCode),
        ///         ["region"] = metro.Apply(getMetroResult =&gt; getMetroResult.Region),
        ///         ["name"] = metro.Apply(getMetroResult =&gt; getMetroResult.Name),
        ///         ["equinixAsn"] = metro.Apply(getMetroResult =&gt; getMetroResult.EquinixAsn),
        ///         ["localVcBandwidthMax"] = metro.Apply(getMetroResult =&gt; getMetroResult.LocalVcBandwidthMax),
        ///         ["geoCoordinates"] = metro.Apply(getMetroResult =&gt; getMetroResult.GeoCoordinates),
        ///         ["connectedMetros"] = metro.Apply(getMetroResult =&gt; getMetroResult.ConnectedMetros),
        ///         ["geoScopes"] = metro.Apply(getMetroResult =&gt; getMetroResult.GeoScopes),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetroResult> Invoke(GetMetroInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetroResult>("equinix:fabric/getMetro:getMetro", args ?? new GetMetroInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetroArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metro code this data source should retrieve
        /// </summary>
        [Input("metroCode", required: true)]
        public string MetroCode { get; set; } = null!;

        public GetMetroArgs()
        {
        }
        public static new GetMetroArgs Empty => new GetMetroArgs();
    }

    public sealed class GetMetroInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metro code this data source should retrieve
        /// </summary>
        [Input("metroCode", required: true)]
        public Input<string> MetroCode { get; set; } = null!;

        public GetMetroInvokeArgs()
        {
        }
        public static new GetMetroInvokeArgs Empty => new GetMetroInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetroResult
    {
        /// <summary>
        /// Code assigned to an Equinix IBX data center in a specified metropolitan area
        /// </summary>
        public readonly string Code;
        /// <summary>
        /// Arrays of objects containing latency data for the specified metro
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetroConnectedMetroResult> ConnectedMetros;
        /// <summary>
        /// Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
        /// </summary>
        public readonly int EquinixAsn;
        /// <summary>
        /// Geographic location data of Fabric Metro
        /// </summary>
        public readonly Outputs.GetMetroGeoCoordinatesResult GeoCoordinates;
        /// <summary>
        /// List of supported geographic boundaries of a Fabric Metro. Example values: CANADA, CONUS.
        /// </summary>
        public readonly ImmutableArray<string> GeoScopes;
        /// <summary>
        /// The canonical URL at which the resource resides
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The unique identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This field holds Max Connection speed within the metro.
        /// </summary>
        public readonly int LocalVcBandwidthMax;
        /// <summary>
        /// The metro code this data source should retrieve
        /// </summary>
        public readonly string MetroCode;
        /// <summary>
        /// Name of the region in which the data center is located
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Board geographical area in which the data center is located
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Indicator of a fabric metro
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMetroResult(
            string code,

            ImmutableArray<Outputs.GetMetroConnectedMetroResult> connectedMetros,

            int equinixAsn,

            Outputs.GetMetroGeoCoordinatesResult geoCoordinates,

            ImmutableArray<string> geoScopes,

            string href,

            string id,

            int localVcBandwidthMax,

            string metroCode,

            string name,

            string region,

            string type)
        {
            Code = code;
            ConnectedMetros = connectedMetros;
            EquinixAsn = equinixAsn;
            GeoCoordinates = geoCoordinates;
            GeoScopes = geoScopes;
            Href = href;
            Id = id;
            LocalVcBandwidthMax = localVcBandwidthMax;
            MetroCode = metroCode;
            Name = name;
            Region = region;
            Type = type;
        }
    }
}
