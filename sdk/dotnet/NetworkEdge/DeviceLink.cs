// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.NetworkEdge
{
    /// <summary>
    /// Resource `equinix.networkedge.DeviceLink` allows creation and management of Equinix Network Edge virtual network device links.
    /// 
    /// ## Example Usage
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var accountName = config.Require("accountName");
    ///     var accountMetro = config.Require("accountMetro");
    ///     var device1Id = config.Require("device1Id");
    ///     var device2Id = config.Require("device2Id");
    ///     var accountfNum = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = accountName,
    ///         MetroCode = accountMetro,
    ///     }).Apply(invoke =&gt; invoke.Number);
    /// 
    ///     var device1Metro = Equinix.NetworkEdge.GetDevice.Invoke(new()
    ///     {
    ///         Uuid = device1Id,
    ///     }).Apply(invoke =&gt; invoke.MetroCode);
    /// 
    ///     var device2Metro = Equinix.NetworkEdge.GetDevice.Invoke(new()
    ///     {
    ///         Uuid = device2Id,
    ///     }).Apply(invoke =&gt; invoke.MetroCode);
    /// 
    ///     var deviceLink = new Equinix.NetworkEdge.DeviceLink("deviceLink", new()
    ///     {
    ///         Name = "test-link",
    ///         Subnet = "192.168.40.64/27",
    ///         Devices = new[]
    ///         {
    ///             new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs
    ///             {
    ///                 Id = "device1Id",
    ///                 Asn = 22111,
    ///                 InterfaceId = 6,
    ///             },
    ///             new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs
    ///             {
    ///                 Id = "device2Id",
    ///                 Asn = 22333,
    ///                 InterfaceId = 7,
    ///             },
    ///         },
    ///         Links = new[]
    ///         {
    ///             new Equinix.NetworkEdge.Inputs.DeviceLinkLinkArgs
    ///             {
    ///                 AccountNumber = accountfNum,
    ///                 SrcMetroCode = device1Metro,
    ///                 DstMetroCode = device2Metro,
    ///                 Throughput = "50",
    ///                 ThroughputUnit = "Mbps",
    ///             },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["status"] = deviceLink.Status,
    ///         ["devices"] = deviceLink.Devices,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using an existing ID:
    /// 
    /// ```sh
    /// $ pulumi import equinix:networkedge/deviceLink:DeviceLink example {existing_id}
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:networkedge/deviceLink:DeviceLink")]
    public partial class DeviceLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// definition of one or more devices belonging to the device link. See Device section below for more details.
        /// </summary>
        [Output("devices")]
        public Output<ImmutableArray<Outputs.DeviceLinkDevice>> Devices { get; private set; } = null!;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Link section below for more details.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.DeviceLinkLink>> Links { get; private set; } = null!;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Metro Link section below for more details.
        /// </summary>
        [Output("metroLinks")]
        public Output<ImmutableArray<Outputs.DeviceLinkMetroLink>> MetroLinks { get; private set; } = null!;

        /// <summary>
        /// device link name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique Identifier for the project resource where the device link is scoped to.If you leave it out, the device link will be created under the default project id of your organization.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the connection should be created through Fabric's primary or secondary port. Supported values: `PRIMARY` (Default), `SECONDARY`, `HYBRID`
        /// </summary>
        [Output("redundancyType")]
        public Output<string?> RedundancyType { get; private set; } = null!;

        /// <summary>
        /// device link provisioning status on a given device. One of `PROVISIONING`, `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// device link subnet in CIDR format. Not required for link between self configured devices.
        /// </summary>
        [Output("subnet")]
        public Output<string?> Subnet { get; private set; } = null!;

        /// <summary>
        /// Device link unique identifier.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceLink(string name, DeviceLinkArgs args, CustomResourceOptions? options = null)
            : base("equinix:networkedge/deviceLink:DeviceLink", name, args ?? new DeviceLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceLink(string name, Input<string> id, DeviceLinkState? state = null, CustomResourceOptions? options = null)
            : base("equinix:networkedge/deviceLink:DeviceLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceLink Get(string name, Input<string> id, DeviceLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceLink(name, id, state, options);
        }
    }

    public sealed class DeviceLinkArgs : global::Pulumi.ResourceArgs
    {
        [Input("devices", required: true)]
        private InputList<Inputs.DeviceLinkDeviceArgs>? _devices;

        /// <summary>
        /// definition of one or more devices belonging to the device link. See Device section below for more details.
        /// </summary>
        public InputList<Inputs.DeviceLinkDeviceArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.DeviceLinkDeviceArgs>());
            set => _devices = value;
        }

        [Input("links")]
        private InputList<Inputs.DeviceLinkLinkArgs>? _links;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Link section below for more details.
        /// </summary>
        [Obsolete(@"Links is deprecated. Please use metro links instead.")]
        public InputList<Inputs.DeviceLinkLinkArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.DeviceLinkLinkArgs>());
            set => _links = value;
        }

        [Input("metroLinks")]
        private InputList<Inputs.DeviceLinkMetroLinkArgs>? _metroLinks;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Metro Link section below for more details.
        /// </summary>
        public InputList<Inputs.DeviceLinkMetroLinkArgs> MetroLinks
        {
            get => _metroLinks ?? (_metroLinks = new InputList<Inputs.DeviceLinkMetroLinkArgs>());
            set => _metroLinks = value;
        }

        /// <summary>
        /// device link name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Identifier for the project resource where the device link is scoped to.If you leave it out, the device link will be created under the default project id of your organization.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Whether the connection should be created through Fabric's primary or secondary port. Supported values: `PRIMARY` (Default), `SECONDARY`, `HYBRID`
        /// </summary>
        [Input("redundancyType")]
        public Input<string>? RedundancyType { get; set; }

        /// <summary>
        /// device link subnet in CIDR format. Not required for link between self configured devices.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        public DeviceLinkArgs()
        {
        }
        public static new DeviceLinkArgs Empty => new DeviceLinkArgs();
    }

    public sealed class DeviceLinkState : global::Pulumi.ResourceArgs
    {
        [Input("devices")]
        private InputList<Inputs.DeviceLinkDeviceGetArgs>? _devices;

        /// <summary>
        /// definition of one or more devices belonging to the device link. See Device section below for more details.
        /// </summary>
        public InputList<Inputs.DeviceLinkDeviceGetArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.DeviceLinkDeviceGetArgs>());
            set => _devices = value;
        }

        [Input("links")]
        private InputList<Inputs.DeviceLinkLinkGetArgs>? _links;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Link section below for more details.
        /// </summary>
        [Obsolete(@"Links is deprecated. Please use metro links instead.")]
        public InputList<Inputs.DeviceLinkLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.DeviceLinkLinkGetArgs>());
            set => _links = value;
        }

        [Input("metroLinks")]
        private InputList<Inputs.DeviceLinkMetroLinkGetArgs>? _metroLinks;

        /// <summary>
        /// definition of one or more, inter metro, connections belonging to the device link. See Metro Link section below for more details.
        /// </summary>
        public InputList<Inputs.DeviceLinkMetroLinkGetArgs> MetroLinks
        {
            get => _metroLinks ?? (_metroLinks = new InputList<Inputs.DeviceLinkMetroLinkGetArgs>());
            set => _metroLinks = value;
        }

        /// <summary>
        /// device link name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Identifier for the project resource where the device link is scoped to.If you leave it out, the device link will be created under the default project id of your organization.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Whether the connection should be created through Fabric's primary or secondary port. Supported values: `PRIMARY` (Default), `SECONDARY`, `HYBRID`
        /// </summary>
        [Input("redundancyType")]
        public Input<string>? RedundancyType { get; set; }

        /// <summary>
        /// device link provisioning status on a given device. One of `PROVISIONING`, `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// device link subnet in CIDR format. Not required for link between self configured devices.
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// Device link unique identifier.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public DeviceLinkState()
        {
        }
        public static new DeviceLinkState Empty => new DeviceLinkState();
    }
}
