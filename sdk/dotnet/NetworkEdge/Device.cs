// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.NetworkEdge
{
    /// <summary>
    /// Resource `equinix.networkedge.Device` allows creation and management of Equinix Network Edge virtual network devices.
    /// 
    /// Network Edge virtual network devices can be created in two modes:
    /// 
    /// * **managed** - (default) Where Equinix manages connectivity and services in the device and customer gets limited access to the device.
    /// * **self-configured** - Where customer provisions and manages own services in the device with less restricted access. Some device types are offered only in this mode.
    /// 
    /// In addition to management modes, there are two software license modes available:
    /// 
    /// * **subscription** - Where Equinix provides software license, including end-to-end support, and bills for the service respectively.
    /// * **BYOL** - [bring your own license] Where customer brings his own, already procured device software license. There are no charges associated with such license. It is the only licensing mode for `self-configured` devices.
    /// 
    /// ## Example Usage
    /// ### example 1
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dc = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "DC",
    ///     });
    /// 
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var csr1000VHa = new Equinix.NetworkEdge.Device("csr1000vHa", new()
    ///     {
    ///         Name = "tf-csr1000v-p",
    ///         Throughput = 500,
    ///         ThroughputUnit = Equinix.NetworkEdge.ThroughputUnit.Mbps,
    ///         MetroCode = dc.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "CSR1000V",
    ///         SelfManaged = false,
    ///         Connectivity = "INTERNET-ACCESS",
    ///         Byol = false,
    ///         PackageCode = "SEC",
    ///         Notifications = new[]
    ///         {
    ///             "john@equinix.com",
    ///             "marry@equinix.com",
    ///             "fred@equinix.com",
    ///         },
    ///         Hostname = "csr1000v-p",
    ///         TermLength = 12,
    ///         AccountNumber = dc.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "16.09.05",
    ///         CoreCount = 2,
    ///         SecondaryDevice = new Equinix.NetworkEdge.Inputs.DeviceSecondaryDeviceArgs
    ///         {
    ///             Name = "tf-csr1000v-s",
    ///             MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///             Hostname = "csr1000v-s",
    ///             Notifications = new[]
    ///             {
    ///                 "john@equinix.com",
    ///                 "marry@equinix.com",
    ///             },
    ///             AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 2
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var panwCluster = new Equinix.NetworkEdge.Device("panwCluster", new()
    ///     {
    ///         Name = "tf-panw",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "PA-VM",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "VM100",
    ///         Notifications = new[]
    ///         {
    ///             "john@equinix.com",
    ///             "marry@equinix.com",
    ///             "fred@equinix.com",
    ///         },
    ///         TermLength = 12,
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "10.1.3",
    ///         InterfaceCount = 10,
    ///         CoreCount = 2,
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test",
    ///             KeyName = "test-key",
    ///         },
    ///         AclTemplateId = "0bff6e05-f0e7-44cd-804a-25b92b835f8b",
    ///         ClusterDetails = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsArgs
    ///         {
    ///             ClusterName = "tf-panw-cluster",
    ///             Node0 = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode0Args
    ///             {
    ///                 VendorConfiguration = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode0VendorConfigurationArgs
    ///                 {
    ///                     Hostname = "panw-node0",
    ///                 },
    ///                 LicenseToken = "licenseToken",
    ///             },
    ///             Node1 = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode1Args
    ///             {
    ///                 VendorConfiguration = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode1VendorConfigurationArgs
    ///                 {
    ///                     Hostname = "panw-node1",
    ///                 },
    ///                 LicenseToken = "licenseToken",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 3
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var filepath = config.Get("filepath") ?? "cloudInitFileFolder/TF-AVX-cloud-init-file.txt";
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var aviatrixCloudinitFile = new Equinix.NetworkEdge.NetworkFile("aviatrixCloudinitFile", new()
    ///     {
    ///         FileName = "TF-AVX-cloud-init-file.txt",
    ///         Content = Std.File.Invoke(new()
    ///         {
    ///             Input = filepath,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode).Apply(System.Enum.Parse&lt;Equinix.Metro&gt;),
    ///         DeviceTypeCode = "AVIATRIX_EDGE",
    ///         ProcessType = Equinix.NetworkEdge.FileType.CloudInit,
    ///         SelfManaged = true,
    ///         Byol = true,
    ///     });
    /// 
    ///     var aviatrixSingle = new Equinix.NetworkEdge.Device("aviatrixSingle", new()
    ///     {
    ///         Name = "tf-aviatrix",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "AVIATRIX_EDGE",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "STD",
    ///         Notifications = new[]
    ///         {
    ///             "john@equinix.com",
    ///         },
    ///         TermLength = 12,
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "6.9",
    ///         CoreCount = 2,
    ///         CloudInitFileId = aviatrixCloudinitFile.Uuid,
    ///         AclTemplateId = "c06150ea-b604-4ad1-832a-d63936e9b938",
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 4
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = "account-name",
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var c8KvSingle = new Equinix.NetworkEdge.Device("c8kvSingle", new()
    ///     {
    ///         Name = "tf-c8kv",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "C8000V",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "network-essentials",
    ///         Notifications = new[]
    ///         {
    ///             "test@equinix.com",
    ///         },
    ///         Hostname = "C8KV",
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "17.06.01a",
    ///         CoreCount = 2,
    ///         TermLength = 12,
    ///         LicenseToken = "valid-license-token",
    ///         AdditionalBandwidth = 5,
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test-username",
    ///             KeyName = "valid-key-name",
    ///         },
    ///         AclTemplateId = "3e548c02-9164-4197-aa23-05b1f644883c",
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 5
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = "account-name",
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var vsrxSingle = new Equinix.NetworkEdge.Device("vsrxSingle", new()
    ///     {
    ///         Name = "tf-c8kv-sdwan",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "VSRX",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "STD",
    ///         Notifications = new[]
    ///         {
    ///             "test@equinix.com",
    ///         },
    ///         Hostname = "VSRX",
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "23.2R1.13",
    ///         CoreCount = 2,
    ///         TermLength = 12,
    ///         AdditionalBandwidth = 5,
    ///         ProjectId = "a86d7112-d740-4758-9c9c-31e66373746b",
    ///         DiverseDeviceId = "ed7891bd-15b4-4f72-ac56-d96cfdacddcc",
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test-username",
    ///             KeyName = "valid-key-name",
    ///         },
    ///         AclTemplateId = "3e548c02-9164-4197-aa23-05b1f644883c",
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 6
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = "account-name",
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var testPublicKey = new Equinix.NetworkEdge.SshKey("testPublicKey", new()
    ///     {
    ///         Name = "key-name",
    ///         PublicKey = "ssh-dss key-value",
    ///         Type = "DSA",
    ///     });
    /// 
    ///     var aristaHa = new Equinix.NetworkEdge.Device("aristaHa", new()
    ///     {
    ///         Name = "tf-arista-p",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "ARISTA-ROUTER",
    ///         SelfManaged = true,
    ///         Connectivity = "PRIVATE",
    ///         Byol = true,
    ///         PackageCode = "CloudEOS",
    ///         Notifications = new[]
    ///         {
    ///             "test@equinix.com",
    ///         },
    ///         Hostname = "arista-p",
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "4.29.0",
    ///         CoreCount = 4,
    ///         TermLength = 12,
    ///         AdditionalBandwidth = 5,
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test-username",
    ///             KeyName = testPublicKey.Name,
    ///         },
    ///         AclTemplateId = "c637a17b-7a6a-4486-924b-30e6c36904b0",
    ///         SecondaryDevice = new Equinix.NetworkEdge.Inputs.DeviceSecondaryDeviceArgs
    ///         {
    ///             Name = "tf-arista-s",
    ///             MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///             Hostname = "arista-s",
    ///             Notifications = new[]
    ///             {
    ///                 "test@eq.com",
    ///             },
    ///             AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///             AclTemplateId = "fee5e2c0-6198-4ce6-9cbd-bbe6c1dbe138",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 7
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = "account-name",
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var testPublicKey = new Equinix.NetworkEdge.SshKey("testPublicKey", new()
    ///     {
    ///         Name = "key-name",
    ///         PublicKey = "ssh-dss key-value",
    ///         Type = "DSA",
    ///     });
    /// 
    ///     var bluecatBddsHa = new Equinix.NetworkEdge.Device("bluecatBddsHa", new()
    ///     {
    ///         Name = "tf-bluecat-bdds-p",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "BLUECAT",
    ///         SelfManaged = true,
    ///         Connectivity = "PRIVATE",
    ///         Byol = true,
    ///         PackageCode = "STD",
    ///         Notifications = new[]
    ///         {
    ///             "test@equinix.com",
    ///         },
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "9.6.0",
    ///         CoreCount = 2,
    ///         TermLength = 12,
    ///         VendorConfiguration = 
    ///         {
    ///             { "hostname", "test" },
    ///             { "privateAddress", "x.x.x.x" },
    ///             { "privateCidrMask", "24" },
    ///             { "privateGateway", "x.x.x.x" },
    ///             { "licenseKey", "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx" },
    ///             { "licenseId", "xxxxxxxxxxxxxxx" },
    ///         },
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test-username",
    ///             KeyName = testPublicKey.Name,
    ///         },
    ///         SecondaryDevice = new Equinix.NetworkEdge.Inputs.DeviceSecondaryDeviceArgs
    ///         {
    ///             Name = "tf-bluecat-bdds-s",
    ///             MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///             Notifications = new[]
    ///             {
    ///                 "test@eq.com",
    ///             },
    ///             AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///             VendorConfiguration = 
    ///             {
    ///                 { "hostname", "test" },
    ///                 { "privateAddress", "x.x.x.x" },
    ///                 { "privateCidrMask", "24" },
    ///                 { "privateGateway", "x.x.x.x" },
    ///                 { "licenseKey", "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx" },
    ///                 { "licenseId", "xxxxxxxxxxxxxxx" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 8
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         Name = "account-name",
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var bluecatEdgeServicePointCloudinitPrimaryFile = new Equinix.NetworkEdge.NetworkFile("bluecatEdgeServicePointCloudinitPrimaryFile", new()
    ///     {
    ///         FileName = "TF-BLUECAT-ESP-cloud-init-file.txt",
    ///         Content = Std.File.Invoke(new()
    ///         {
    ///             Input = filepath,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode).Apply(System.Enum.Parse&lt;Equinix.Metro&gt;),
    ///         DeviceTypeCode = "BLUECAT-EDGE-SERVICE-POINT",
    ///         ProcessType = Equinix.NetworkEdge.FileType.CloudInit,
    ///         SelfManaged = true,
    ///         Byol = true,
    ///     });
    /// 
    ///     var bluecatEdgeServicePointCloudinitSecondaryFile = new Equinix.NetworkEdge.NetworkFile("bluecatEdgeServicePointCloudinitSecondaryFile", new()
    ///     {
    ///         FileName = "TF-BLUECAT-ESP-cloud-init-file.txt",
    ///         Content = Std.File.Invoke(new()
    ///         {
    ///             Input = filepath,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode).Apply(System.Enum.Parse&lt;Equinix.Metro&gt;),
    ///         DeviceTypeCode = "BLUECAT-EDGE-SERVICE-POINT",
    ///         ProcessType = Equinix.NetworkEdge.FileType.CloudInit,
    ///         SelfManaged = true,
    ///         Byol = true,
    ///     });
    /// 
    ///     var bluecatEdgeServicePointHa = new Equinix.NetworkEdge.Device("bluecatEdgeServicePointHa", new()
    ///     {
    ///         Name = "tf-bluecat-edge-service-point-p",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "BLUECAT-EDGE-SERVICE-POINT",
    ///         SelfManaged = true,
    ///         Connectivity = "PRIVATE",
    ///         Byol = true,
    ///         PackageCode = "STD",
    ///         Notifications = new[]
    ///         {
    ///             "test@equinix.com",
    ///         },
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         CloudInitFileId = bluecatEdgeServicePointCloudinitPrimaryFile.Uuid,
    ///         Version = "4.6.3",
    ///         CoreCount = 4,
    ///         TermLength = 12,
    ///         SecondaryDevice = new Equinix.NetworkEdge.Inputs.DeviceSecondaryDeviceArgs
    ///         {
    ///             Name = "tf-bluecat-edge-service-point-s",
    ///             MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///             Notifications = new[]
    ///             {
    ///                 "test@eq.com",
    ///             },
    ///             AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///             CloudInitFileId = bluecatEdgeServicePointCloudinitSecondaryFile.Uuid,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example 9
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var panwCluster = new Equinix.NetworkEdge.Device("panwCluster", new()
    ///     {
    ///         Name = "tf-panw",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "PA-VM",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "VM100",
    ///         Notifications = new[]
    ///         {
    ///             "john@equinix.com",
    ///             "marry@equinix.com",
    ///             "fred@equinix.com",
    ///         },
    ///         TermLength = 12,
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "11.1.3",
    ///         InterfaceCount = 10,
    ///         CoreCount = 2,
    ///         SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs
    ///         {
    ///             Username = "test",
    ///             KeyName = "test-key",
    ///         },
    ///         AclTemplateId = "0bff6e05-f0e7-44cd-804a-25b92b835f8b",
    ///         ClusterDetails = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsArgs
    ///         {
    ///             ClusterName = "tf-panw-cluster",
    ///             Node0 = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode0Args
    ///             {
    ///                 VendorConfiguration = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode0VendorConfigurationArgs
    ///                 {
    ///                     Hostname = "panw-node0",
    ///                     PanoramaIpAddress = "x.x.x.x",
    ///                     PanoramaAuthKey = "xxxxxxxxxxx",
    ///                 },
    ///                 LicenseToken = "licenseToken",
    ///             },
    ///             Node1 = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode1Args
    ///             {
    ///                 VendorConfiguration = new Equinix.NetworkEdge.Inputs.DeviceClusterDetailsNode1VendorConfigurationArgs
    ///                 {
    ///                     Hostname = "panw-node1",
    ///                     PanoramaIpAddress = "x.x.x.x",
    ///                     PanoramaAuthKey = "xxxxxxxxxxx",
    ///                 },
    ///                 LicenseToken = "licenseToken",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example Aviatrix Transit Edge
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var filepath = config.Get("filepath") ?? "cloudInitFileFolder/TF-AVX-cloud-init-file.txt";
    ///     var sv = Equinix.NetworkEdge.GetAccount.Invoke(new()
    ///     {
    ///         MetroCode = "SV",
    ///     });
    /// 
    ///     var aviatrixCloudinitFile = new Equinix.NetworkEdge.NetworkFile("aviatrixCloudinitFile", new()
    ///     {
    ///         FileName = "TF-AVX-cloud-init-file.txt",
    ///         Content = Std.File.Invoke(new()
    ///         {
    ///             Input = filepath,
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode).Apply(System.Enum.Parse&lt;Equinix.Metro&gt;),
    ///         DeviceTypeCode = "AVIATRIX_TRANSIT_EDGE",
    ///         ProcessType = Equinix.NetworkEdge.FileType.CloudInit,
    ///         SelfManaged = true,
    ///         Byol = true,
    ///     });
    /// 
    ///     var aviatrixTransitEdgeSingle = new Equinix.NetworkEdge.Device("aviatrix-transit-edge-single", new()
    ///     {
    ///         Name = "tf-aviatrix",
    ///         MetroCode = sv.Apply(getAccountResult =&gt; getAccountResult.MetroCode),
    ///         TypeCode = "AVIATRIX_TRANSIT_EDGE",
    ///         SelfManaged = true,
    ///         Byol = true,
    ///         PackageCode = "STD",
    ///         Notifications = new[]
    ///         {
    ///             "john@equinix.com",
    ///         },
    ///         TermLength = 12,
    ///         AccountNumber = sv.Apply(getAccountResult =&gt; getAccountResult.Number),
    ///         Version = "7.2.a",
    ///         CoreCount = 2,
    ///         CloudInitFileId = aviatrixCloudinitFile.Uuid,
    ///         AclTemplateId = "c06150ea-b604-4ad1-832a-d63936e9b938",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using an existing ID:
    /// 
    /// ```sh
    /// $ pulumi import equinix:networkedge/device:Device example {existing_id}
    /// ```
    /// 
    /// The `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported.
    /// </summary>
    [EquinixResourceType("equinix:networkedge/device:Device")]
    public partial class Device : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Billing account number for a device.
        /// </summary>
        [Output("accountNumber")]
        public Output<string> AccountNumber { get; private set; } = null!;

        /// <summary>
        /// Identifier of a WAN interface ACL template that will be applied on the device.
        /// </summary>
        [Output("aclTemplateId")]
        public Output<string?> AclTemplateId { get; private set; } = null!;

        /// <summary>
        /// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
        /// </summary>
        [Output("additionalBandwidth")]
        public Output<int> AdditionalBandwidth { get; private set; } = null!;

        /// <summary>
        /// (Autonomous System Number) Unique identifier for a network on the internet.
        /// </summary>
        [Output("asn")]
        public Output<int> Asn { get; private set; } = null!;

        /// <summary>
        /// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
        /// </summary>
        [Output("byol")]
        public Output<bool?> Byol { get; private set; } = null!;

        /// <summary>
        /// Identifier of a cloud init file that will be applied on the device.
        /// </summary>
        [Output("cloudInitFileId")]
        public Output<string?> CloudInitFileId { get; private set; } = null!;

        /// <summary>
        /// An object that has the cluster details. See Cluster Details below for more details.
        /// </summary>
        [Output("clusterDetails")]
        public Output<Outputs.DeviceClusterDetails?> ClusterDetails { get; private set; } = null!;

        /// <summary>
        /// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
        /// </summary>
        [Output("connectivity")]
        public Output<string?> Connectivity { get; private set; } = null!;

        /// <summary>
        /// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
        /// </summary>
        [Output("coreCount")]
        public Output<int> CoreCount { get; private set; } = null!;

        /// <summary>
        /// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
        /// </summary>
        [Output("diverseDeviceId")]
        public Output<string> DiverseDeviceId { get; private set; } = null!;

        /// <summary>
        /// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
        /// </summary>
        [Output("diverseDeviceName")]
        public Output<string> DiverseDeviceName { get; private set; } = null!;

        /// <summary>
        /// Device hostname prefix.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Device location Equinix Business Exchange name.
        /// </summary>
        [Output("ibx")]
        public Output<string> Ibx { get; private set; } = null!;

        /// <summary>
        /// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
        /// </summary>
        [Output("interfaceCount")]
        public Output<int> InterfaceCount { get; private set; } = null!;

        /// <summary>
        /// List of device interfaces. See Interface Attribute below for more details.
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.DeviceInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Output("licenseFile")]
        public Output<string?> LicenseFile { get; private set; } = null!;

        /// <summary>
        /// Identifier of a license file that will be applied on the device.
        /// </summary>
        [Output("licenseFileId")]
        public Output<string> LicenseFileId { get; private set; } = null!;

        /// <summary>
        /// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        /// </summary>
        [Output("licenseStatus")]
        public Output<string> LicenseStatus { get; private set; } = null!;

        /// <summary>
        /// License Token applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Output("licenseToken")]
        public Output<string?> LicenseToken { get; private set; } = null!;

        /// <summary>
        /// Device location metro code.
        /// </summary>
        [Output("metroCode")]
        public Output<string> MetroCode { get; private set; } = null!;

        /// <summary>
        /// Identifier of an MGMT interface ACL template that will be applied on the device.
        /// </summary>
        [Output("mgmtAclTemplateUuid")]
        public Output<string?> MgmtAclTemplateUuid { get; private set; } = null!;

        /// <summary>
        /// Device name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of email addresses that will receive device status notifications.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<string>> Notifications { get; private set; } = null!;

        /// <summary>
        /// Name/number used to identify device order on the invoice.
        /// </summary>
        [Output("orderReference")]
        public Output<string?> OrderReference { get; private set; } = null!;

        /// <summary>
        /// Device software package code.
        /// </summary>
        [Output("packageCode")]
        public Output<string> PackageCode { get; private set; } = null!;

        /// <summary>
        /// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Purchase order number associated with a device order.
        /// </summary>
        [Output("purchaseOrderNumber")]
        public Output<string?> PurchaseOrderNumber { get; private set; } = null!;

        /// <summary>
        /// Device redundancy type applicable for HA devices, either primary or secondary.
        /// </summary>
        [Output("redundancyType")]
        public Output<string> RedundancyType { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for a redundant device applicable for HA devices.
        /// </summary>
        [Output("redundantId")]
        public Output<string> RedundantId { get; private set; } = null!;

        /// <summary>
        /// Device location region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
        /// </summary>
        [Output("secondaryDevice")]
        public Output<Outputs.DeviceSecondaryDevice?> SecondaryDevice { get; private set; } = null!;

        /// <summary>
        /// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
        /// </summary>
        [Output("selfManaged")]
        public Output<bool?> SelfManaged { get; private set; } = null!;

        /// <summary>
        /// IP address of SSH enabled interface on the device.
        /// </summary>
        [Output("sshIpAddress")]
        public Output<string> SshIpAddress { get; private set; } = null!;

        /// <summary>
        /// FQDN of SSH enabled interface on the device.
        /// </summary>
        [Output("sshIpFqdn")]
        public Output<string> SshIpFqdn { get; private set; } = null!;

        /// <summary>
        /// Definition of SSH key that will be provisioned on a device
        /// </summary>
        [Output("sshKey")]
        public Output<Outputs.DeviceSshKey?> SshKey { get; private set; } = null!;

        /// <summary>
        /// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Device term length.
        /// </summary>
        [Output("termLength")]
        public Output<int> TermLength { get; private set; } = null!;

        /// <summary>
        /// Device license throughput.
        /// </summary>
        [Output("throughput")]
        public Output<int?> Throughput { get; private set; } = null!;

        /// <summary>
        /// License throughput unit. One of `Mbps` or `Gbps`.
        /// </summary>
        [Output("throughputUnit")]
        public Output<string?> ThroughputUnit { get; private set; } = null!;

        /// <summary>
        /// Device type code.
        /// </summary>
        [Output("typeCode")]
        public Output<string> TypeCode { get; private set; } = null!;

        /// <summary>
        /// Device unique identifier.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress)
        /// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
        /// </summary>
        [Output("vendorConfiguration")]
        public Output<ImmutableDictionary<string, string>> VendorConfiguration { get; private set; } = null!;

        /// <summary>
        /// Device software software version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// device interface id picked for WAN
        /// </summary>
        [Output("wanInterfaceId")]
        public Output<string?> WanInterfaceId { get; private set; } = null!;

        /// <summary>
        /// Device location zone code.
        /// </summary>
        [Output("zoneCode")]
        public Output<string> ZoneCode { get; private set; } = null!;


        /// <summary>
        /// Create a Device resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Device(string name, DeviceArgs args, CustomResourceOptions? options = null)
            : base("equinix:networkedge/device:Device", name, args ?? new DeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Device(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
            : base("equinix:networkedge/device:Device", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Device resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Device Get(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new Device(name, id, state, options);
        }
    }

    public sealed class DeviceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Billing account number for a device.
        /// </summary>
        [Input("accountNumber", required: true)]
        public Input<string> AccountNumber { get; set; } = null!;

        /// <summary>
        /// Identifier of a WAN interface ACL template that will be applied on the device.
        /// </summary>
        [Input("aclTemplateId")]
        public Input<string>? AclTemplateId { get; set; }

        /// <summary>
        /// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
        /// </summary>
        [Input("additionalBandwidth")]
        public Input<int>? AdditionalBandwidth { get; set; }

        /// <summary>
        /// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
        /// </summary>
        [Input("byol")]
        public Input<bool>? Byol { get; set; }

        /// <summary>
        /// Identifier of a cloud init file that will be applied on the device.
        /// </summary>
        [Input("cloudInitFileId")]
        public Input<string>? CloudInitFileId { get; set; }

        /// <summary>
        /// An object that has the cluster details. See Cluster Details below for more details.
        /// </summary>
        [Input("clusterDetails")]
        public Input<Inputs.DeviceClusterDetailsArgs>? ClusterDetails { get; set; }

        /// <summary>
        /// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
        /// </summary>
        [Input("connectivity")]
        public Input<string>? Connectivity { get; set; }

        /// <summary>
        /// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
        /// </summary>
        [Input("coreCount", required: true)]
        public Input<int> CoreCount { get; set; } = null!;

        /// <summary>
        /// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
        /// </summary>
        [Input("diverseDeviceId")]
        public Input<string>? DiverseDeviceId { get; set; }

        /// <summary>
        /// Device hostname prefix.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
        /// </summary>
        [Input("interfaceCount")]
        public Input<int>? InterfaceCount { get; set; }

        /// <summary>
        /// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Input("licenseFile")]
        public Input<string>? LicenseFile { get; set; }

        /// <summary>
        /// Identifier of a license file that will be applied on the device.
        /// </summary>
        [Input("licenseFileId")]
        public Input<string>? LicenseFileId { get; set; }

        /// <summary>
        /// License Token applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Input("licenseToken")]
        public Input<string>? LicenseToken { get; set; }

        /// <summary>
        /// Device location metro code.
        /// </summary>
        [Input("metroCode", required: true)]
        public Input<string> MetroCode { get; set; } = null!;

        /// <summary>
        /// Identifier of an MGMT interface ACL template that will be applied on the device.
        /// </summary>
        [Input("mgmtAclTemplateUuid")]
        public Input<string>? MgmtAclTemplateUuid { get; set; }

        /// <summary>
        /// Device name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of email addresses that will receive device status notifications.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Name/number used to identify device order on the invoice.
        /// </summary>
        [Input("orderReference")]
        public Input<string>? OrderReference { get; set; }

        /// <summary>
        /// Device software package code.
        /// </summary>
        [Input("packageCode", required: true)]
        public Input<string> PackageCode { get; set; } = null!;

        /// <summary>
        /// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Purchase order number associated with a device order.
        /// </summary>
        [Input("purchaseOrderNumber")]
        public Input<string>? PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
        /// </summary>
        [Input("secondaryDevice")]
        public Input<Inputs.DeviceSecondaryDeviceArgs>? SecondaryDevice { get; set; }

        /// <summary>
        /// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
        /// </summary>
        [Input("selfManaged")]
        public Input<bool>? SelfManaged { get; set; }

        /// <summary>
        /// Definition of SSH key that will be provisioned on a device
        /// </summary>
        [Input("sshKey")]
        public Input<Inputs.DeviceSshKeyArgs>? SshKey { get; set; }

        /// <summary>
        /// Device term length.
        /// </summary>
        [Input("termLength", required: true)]
        public Input<int> TermLength { get; set; } = null!;

        /// <summary>
        /// Device license throughput.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        /// <summary>
        /// License throughput unit. One of `Mbps` or `Gbps`.
        /// </summary>
        [Input("throughputUnit")]
        public InputUnion<string, Pulumi.Equinix.NetworkEdge.ThroughputUnit>? ThroughputUnit { get; set; }

        /// <summary>
        /// Device type code.
        /// </summary>
        [Input("typeCode", required: true)]
        public Input<string> TypeCode { get; set; } = null!;

        [Input("vendorConfiguration")]
        private InputMap<string>? _vendorConfiguration;

        /// <summary>
        /// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress)
        /// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
        /// </summary>
        public InputMap<string> VendorConfiguration
        {
            get => _vendorConfiguration ?? (_vendorConfiguration = new InputMap<string>());
            set => _vendorConfiguration = value;
        }

        /// <summary>
        /// Device software software version.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        /// <summary>
        /// device interface id picked for WAN
        /// </summary>
        [Input("wanInterfaceId")]
        public Input<string>? WanInterfaceId { get; set; }

        public DeviceArgs()
        {
        }
        public static new DeviceArgs Empty => new DeviceArgs();
    }

    public sealed class DeviceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Billing account number for a device.
        /// </summary>
        [Input("accountNumber")]
        public Input<string>? AccountNumber { get; set; }

        /// <summary>
        /// Identifier of a WAN interface ACL template that will be applied on the device.
        /// </summary>
        [Input("aclTemplateId")]
        public Input<string>? AclTemplateId { get; set; }

        /// <summary>
        /// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
        /// </summary>
        [Input("additionalBandwidth")]
        public Input<int>? AdditionalBandwidth { get; set; }

        /// <summary>
        /// (Autonomous System Number) Unique identifier for a network on the internet.
        /// </summary>
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        /// <summary>
        /// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
        /// </summary>
        [Input("byol")]
        public Input<bool>? Byol { get; set; }

        /// <summary>
        /// Identifier of a cloud init file that will be applied on the device.
        /// </summary>
        [Input("cloudInitFileId")]
        public Input<string>? CloudInitFileId { get; set; }

        /// <summary>
        /// An object that has the cluster details. See Cluster Details below for more details.
        /// </summary>
        [Input("clusterDetails")]
        public Input<Inputs.DeviceClusterDetailsGetArgs>? ClusterDetails { get; set; }

        /// <summary>
        /// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
        /// </summary>
        [Input("connectivity")]
        public Input<string>? Connectivity { get; set; }

        /// <summary>
        /// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
        /// </summary>
        [Input("coreCount")]
        public Input<int>? CoreCount { get; set; }

        /// <summary>
        /// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
        /// </summary>
        [Input("diverseDeviceId")]
        public Input<string>? DiverseDeviceId { get; set; }

        /// <summary>
        /// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
        /// </summary>
        [Input("diverseDeviceName")]
        public Input<string>? DiverseDeviceName { get; set; }

        /// <summary>
        /// Device hostname prefix.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Device location Equinix Business Exchange name.
        /// </summary>
        [Input("ibx")]
        public Input<string>? Ibx { get; set; }

        /// <summary>
        /// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
        /// </summary>
        [Input("interfaceCount")]
        public Input<int>? InterfaceCount { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.DeviceInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// List of device interfaces. See Interface Attribute below for more details.
        /// </summary>
        public InputList<Inputs.DeviceInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.DeviceInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Input("licenseFile")]
        public Input<string>? LicenseFile { get; set; }

        /// <summary>
        /// Identifier of a license file that will be applied on the device.
        /// </summary>
        [Input("licenseFileId")]
        public Input<string>? LicenseFileId { get; set; }

        /// <summary>
        /// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        /// </summary>
        [Input("licenseStatus")]
        public Input<string>? LicenseStatus { get; set; }

        /// <summary>
        /// License Token applicable for some device types in BYOL licensing mode.
        /// </summary>
        [Input("licenseToken")]
        public Input<string>? LicenseToken { get; set; }

        /// <summary>
        /// Device location metro code.
        /// </summary>
        [Input("metroCode")]
        public Input<string>? MetroCode { get; set; }

        /// <summary>
        /// Identifier of an MGMT interface ACL template that will be applied on the device.
        /// </summary>
        [Input("mgmtAclTemplateUuid")]
        public Input<string>? MgmtAclTemplateUuid { get; set; }

        /// <summary>
        /// Device name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// List of email addresses that will receive device status notifications.
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        /// <summary>
        /// Name/number used to identify device order on the invoice.
        /// </summary>
        [Input("orderReference")]
        public Input<string>? OrderReference { get; set; }

        /// <summary>
        /// Device software package code.
        /// </summary>
        [Input("packageCode")]
        public Input<string>? PackageCode { get; set; }

        /// <summary>
        /// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Purchase order number associated with a device order.
        /// </summary>
        [Input("purchaseOrderNumber")]
        public Input<string>? PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Device redundancy type applicable for HA devices, either primary or secondary.
        /// </summary>
        [Input("redundancyType")]
        public Input<string>? RedundancyType { get; set; }

        /// <summary>
        /// Unique identifier for a redundant device applicable for HA devices.
        /// </summary>
        [Input("redundantId")]
        public Input<string>? RedundantId { get; set; }

        /// <summary>
        /// Device location region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
        /// </summary>
        [Input("secondaryDevice")]
        public Input<Inputs.DeviceSecondaryDeviceGetArgs>? SecondaryDevice { get; set; }

        /// <summary>
        /// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
        /// </summary>
        [Input("selfManaged")]
        public Input<bool>? SelfManaged { get; set; }

        /// <summary>
        /// IP address of SSH enabled interface on the device.
        /// </summary>
        [Input("sshIpAddress")]
        public Input<string>? SshIpAddress { get; set; }

        /// <summary>
        /// FQDN of SSH enabled interface on the device.
        /// </summary>
        [Input("sshIpFqdn")]
        public Input<string>? SshIpFqdn { get; set; }

        /// <summary>
        /// Definition of SSH key that will be provisioned on a device
        /// </summary>
        [Input("sshKey")]
        public Input<Inputs.DeviceSshKeyGetArgs>? SshKey { get; set; }

        /// <summary>
        /// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Device term length.
        /// </summary>
        [Input("termLength")]
        public Input<int>? TermLength { get; set; }

        /// <summary>
        /// Device license throughput.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        /// <summary>
        /// License throughput unit. One of `Mbps` or `Gbps`.
        /// </summary>
        [Input("throughputUnit")]
        public InputUnion<string, Pulumi.Equinix.NetworkEdge.ThroughputUnit>? ThroughputUnit { get; set; }

        /// <summary>
        /// Device type code.
        /// </summary>
        [Input("typeCode")]
        public Input<string>? TypeCode { get; set; }

        /// <summary>
        /// Device unique identifier.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        [Input("vendorConfiguration")]
        private InputMap<string>? _vendorConfiguration;

        /// <summary>
        /// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress)
        /// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
        /// </summary>
        public InputMap<string> VendorConfiguration
        {
            get => _vendorConfiguration ?? (_vendorConfiguration = new InputMap<string>());
            set => _vendorConfiguration = value;
        }

        /// <summary>
        /// Device software software version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// device interface id picked for WAN
        /// </summary>
        [Input("wanInterfaceId")]
        public Input<string>? WanInterfaceId { get; set; }

        /// <summary>
        /// Device location zone code.
        /// </summary>
        [Input("zoneCode")]
        public Input<string>? ZoneCode { get; set; }

        public DeviceState()
        {
        }
        public static new DeviceState Empty => new DeviceState();
    }
}
