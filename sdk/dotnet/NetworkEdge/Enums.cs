// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Equinix.NetworkEdge
{
    [EnumType]
    public readonly struct AclRuleProtocolType : IEquatable<AclRuleProtocolType>
    {
        private readonly string _value;

        private AclRuleProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AclRuleProtocolType IP { get; } = new AclRuleProtocolType("IP");
        public static AclRuleProtocolType TCP { get; } = new AclRuleProtocolType("TCP");
        public static AclRuleProtocolType UDP { get; } = new AclRuleProtocolType("UDP");

        public static bool operator ==(AclRuleProtocolType left, AclRuleProtocolType right) => left.Equals(right);
        public static bool operator !=(AclRuleProtocolType left, AclRuleProtocolType right) => !left.Equals(right);

        public static explicit operator string(AclRuleProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AclRuleProtocolType other && Equals(other);
        public bool Equals(AclRuleProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FileType : IEquatable<FileType>
    {
        private readonly string _value;

        private FileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FileType License { get; } = new FileType("LICENSE");
        public static FileType CloudInit { get; } = new FileType("CLOUD_INIT");

        public static bool operator ==(FileType left, FileType right) => left.Equals(right);
        public static bool operator !=(FileType left, FileType right) => !left.Equals(right);

        public static explicit operator string(FileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileType other && Equals(other);
        public bool Equals(FileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThroughputUnit : IEquatable<ThroughputUnit>
    {
        private readonly string _value;

        private ThroughputUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThroughputUnit Mbps { get; } = new ThroughputUnit("Mbps");
        public static ThroughputUnit Gbps { get; } = new ThroughputUnit("Gbps");

        public static bool operator ==(ThroughputUnit left, ThroughputUnit right) => left.Equals(right);
        public static bool operator !=(ThroughputUnit left, ThroughputUnit right) => !left.Equals(right);

        public static explicit operator string(ThroughputUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThroughputUnit other && Equals(other);
        public bool Equals(ThroughputUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
