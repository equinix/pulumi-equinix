// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Equinix
{
    [EnumType]
    public readonly struct Metro : IEquatable<Metro>
    {
        private readonly string _value;

        private Metro(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Metro Amsterdam { get; } = new Metro("AM");
        public static Metro Ashburn { get; } = new Metro("DC");
        public static Metro Atlanta { get; } = new Metro("AT");
        public static Metro Barcelona { get; } = new Metro("BA");
        public static Metro Bogota { get; } = new Metro("BG");
        public static Metro Bordeaux { get; } = new Metro("BX");
        public static Metro Boston { get; } = new Metro("BO");
        public static Metro Brussels { get; } = new Metro("BL");
        public static Metro Calgary { get; } = new Metro("CL");
        public static Metro Canberra { get; } = new Metro("CA");
        public static Metro Chicago { get; } = new Metro("CH");
        public static Metro Dallas { get; } = new Metro("DA");
        public static Metro Denver { get; } = new Metro("DE");
        public static Metro Dubai { get; } = new Metro("DX");
        public static Metro Dublin { get; } = new Metro("DB");
        public static Metro Frankfurt { get; } = new Metro("FR");
        public static Metro Geneva { get; } = new Metro("GV");
        public static Metro Hamburg { get; } = new Metro("HH");
        public static Metro Helsinki { get; } = new Metro("HE");
        public static Metro HongKong { get; } = new Metro("HK");
        public static Metro Istanbul { get; } = new Metro("IL");
        public static Metro Kamloops { get; } = new Metro("KA");
        public static Metro Lisbon { get; } = new Metro("LS");
        public static Metro London { get; } = new Metro("LD");
        public static Metro LosAngeles { get; } = new Metro("LA");
        public static Metro Madrid { get; } = new Metro("MD");
        public static Metro Manchester { get; } = new Metro("MA");
        public static Metro Melbourne { get; } = new Metro("ME");
        public static Metro MexicoCity { get; } = new Metro("MX");
        public static Metro Miami { get; } = new Metro("MI");
        public static Metro Milan { get; } = new Metro("ML");
        public static Metro Montreal { get; } = new Metro("MT");
        public static Metro Mumbai { get; } = new Metro("MB");
        public static Metro Munich { get; } = new Metro("MU");
        public static Metro NewYork { get; } = new Metro("NY");
        public static Metro Osaka { get; } = new Metro("OS");
        public static Metro Paris { get; } = new Metro("PA");
        public static Metro Perth { get; } = new Metro("PE");
        public static Metro Philadelphia { get; } = new Metro("PH");
        public static Metro RioDeJaneiro { get; } = new Metro("RJ");
        public static Metro SaoPaulo { get; } = new Metro("SP");
        public static Metro Seattle { get; } = new Metro("SE");
        public static Metro Seoul { get; } = new Metro("SL");
        public static Metro SiliconValley { get; } = new Metro("SV");
        public static Metro Singapore { get; } = new Metro("SG");
        public static Metro Sofia { get; } = new Metro("SO");
        public static Metro Stockholm { get; } = new Metro("SK");
        public static Metro Sydney { get; } = new Metro("SY");
        public static Metro Tokyo { get; } = new Metro("TY");
        public static Metro Toronto { get; } = new Metro("TR");
        public static Metro Vancouver { get; } = new Metro("VA");
        public static Metro Warsaw { get; } = new Metro("WA");
        public static Metro Winnipeg { get; } = new Metro("WI");
        public static Metro Zurich { get; } = new Metro("ZH");

        public static bool operator ==(Metro left, Metro right) => left.Equals(right);
        public static bool operator !=(Metro left, Metro right) => !left.Equals(right);

        public static explicit operator string(Metro value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Metro other && Equals(other);
        public bool Equals(Metro other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
