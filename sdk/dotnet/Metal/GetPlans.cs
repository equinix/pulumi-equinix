// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Metal
{
    public static class GetPlans
    {
        public static Task<GetPlansResult> InvokeAsync(GetPlansArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPlansResult>("equinix:metal/getPlans:getPlans", args ?? new GetPlansArgs(), options.WithDefaults());

        public static Output<GetPlansResult> Invoke(GetPlansInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPlansResult>("equinix:metal/getPlans:getPlans", args ?? new GetPlansInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlansArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPlansFilterArgs>? _filters;

        /// <summary>
        /// One or more attribute/values pairs to filter off of
        /// </summary>
        public List<Inputs.GetPlansFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPlansFilterArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private List<Inputs.GetPlansSortArgs>? _sorts;

        /// <summary>
        /// One or more attribute/direction pairs on which to sort results. If multiple
        /// sorts are provided, they will be applied in order
        /// </summary>
        public List<Inputs.GetPlansSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetPlansSortArgs>());
            set => _sorts = value;
        }

        public GetPlansArgs()
        {
        }
        public static new GetPlansArgs Empty => new GetPlansArgs();
    }

    public sealed class GetPlansInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPlansFilterInputArgs>? _filters;

        /// <summary>
        /// One or more attribute/values pairs to filter off of
        /// </summary>
        public InputList<Inputs.GetPlansFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPlansFilterInputArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private InputList<Inputs.GetPlansSortInputArgs>? _sorts;

        /// <summary>
        /// One or more attribute/direction pairs on which to sort results. If multiple
        /// sorts are provided, they will be applied in order
        /// </summary>
        public InputList<Inputs.GetPlansSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetPlansSortInputArgs>());
            set => _sorts = value;
        }

        public GetPlansInvokeArgs()
        {
        }
        public static new GetPlansInvokeArgs Empty => new GetPlansInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlansResult
    {
        public readonly ImmutableArray<Outputs.GetPlansFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the facility
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPlansPlanResult> Plans;
        public readonly ImmutableArray<Outputs.GetPlansSortResult> Sorts;

        [OutputConstructor]
        private GetPlansResult(
            ImmutableArray<Outputs.GetPlansFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetPlansPlanResult> plans,

            ImmutableArray<Outputs.GetPlansSortResult> sorts)
        {
            Filters = filters;
            Id = id;
            Plans = plans;
            Sorts = sorts;
        }
    }
}
