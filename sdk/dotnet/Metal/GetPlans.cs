// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Metal
{
    public static class GetPlans
    {
        /// <summary>
        /// Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansSortInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Direction = "asc",
        ///             },
        ///         },
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Values = new[]
        ///                 {
        ///                     "2.5",
        ///                 },
        ///                 MatchBy = "less_than",
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "da",
        ///                     "sv",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["plans"] = example.Apply(getPlansResult =&gt; getPlansResult.Plans),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "class",
        ///                 Values = new[]
        ///                 {
        ///                     "large",
        ///                 },
        ///                 MatchBy = "substring",
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "deployment_types",
        ///                 Values = new[]
        ///                 {
        ///                     "spot_market",
        ///                 },
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "da",
        ///                     "sv",
        ///                 },
        ///                 All = true,
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["plans"] = example.Apply(getPlansResult =&gt; getPlansResult.Plans),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Ignoring Changes to Plans/Metro
        /// 
        /// Preserve deployed device plan, facility and metro when creating a new execution plan.
        /// 
        /// As described in the `data-resource-behavior` feature as shown in the example below.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePlans = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansSortInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Direction = "asc",
        ///             },
        ///         },
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "name",
        ///                 Values = new[]
        ///                 {
        ///                     "c3.small.x86",
        ///                     "c3.medium.x86",
        ///                     "m3.large.x86",
        ///                 },
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "sv",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // This equinix_metal_device will use the first returned plan and the first metro in which that plan is available
        ///     // It will ignore future changes on plan and metro
        ///     var exampleDevice = new Equinix.Metal.Device("exampleDevice", new()
        ///     {
        ///         Hostname = "example",
        ///         Plan = examplePlans.Apply(getPlansResult =&gt; getPlansResult.Plans[0]?.Name).Apply(System.Enum.Parse&lt;Equinix.Metal.Plan&gt;),
        ///         Metro = examplePlans.Apply(getPlansResult =&gt; getPlansResult.Plans[0]?.AvailableInMetros[0]),
        ///         OperatingSystem = Equinix.Metal.OperatingSystem.Ubuntu20_04,
        ///         BillingCycle = Equinix.Metal.BillingCycle.Hourly,
        ///         ProjectId = @var.Project_id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// If your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var ignorePlansMetrosChanges = config.GetBoolean("ignorePlansMetrosChanges") ?? false;
        ///     var examplePlans = Equinix.Metal.GetPlans.Invoke();
        /// 
        ///     // required device arguments
        ///     var exampleDevice = new Equinix.Metal.Device("exampleDevice");
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetPlansResult> InvokeAsync(GetPlansArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPlansResult>("equinix:metal/getPlans:getPlans", args ?? new GetPlansArgs(), options.WithDefaults());

        /// <summary>
        /// Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansSortInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Direction = "asc",
        ///             },
        ///         },
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Values = new[]
        ///                 {
        ///                     "2.5",
        ///                 },
        ///                 MatchBy = "less_than",
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "da",
        ///                     "sv",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["plans"] = example.Apply(getPlansResult =&gt; getPlansResult.Plans),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "class",
        ///                 Values = new[]
        ///                 {
        ///                     "large",
        ///                 },
        ///                 MatchBy = "substring",
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "deployment_types",
        ///                 Values = new[]
        ///                 {
        ///                     "spot_market",
        ///                 },
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "da",
        ///                     "sv",
        ///                 },
        ///                 All = true,
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["plans"] = example.Apply(getPlansResult =&gt; getPlansResult.Plans),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Ignoring Changes to Plans/Metro
        /// 
        /// Preserve deployed device plan, facility and metro when creating a new execution plan.
        /// 
        /// As described in the `data-resource-behavior` feature as shown in the example below.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePlans = Equinix.Metal.GetPlans.Invoke(new()
        ///     {
        ///         Sorts = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansSortInputArgs
        ///             {
        ///                 Attribute = "pricing_hour",
        ///                 Direction = "asc",
        ///             },
        ///         },
        ///         Filters = new[]
        ///         {
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "name",
        ///                 Values = new[]
        ///                 {
        ///                     "c3.small.x86",
        ///                     "c3.medium.x86",
        ///                     "m3.large.x86",
        ///                 },
        ///             },
        ///             new Equinix.Metal.Inputs.GetPlansFilterInputArgs
        ///             {
        ///                 Attribute = "available_in_metros",
        ///                 Values = new[]
        ///                 {
        ///                     "sv",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // This equinix_metal_device will use the first returned plan and the first metro in which that plan is available
        ///     // It will ignore future changes on plan and metro
        ///     var exampleDevice = new Equinix.Metal.Device("exampleDevice", new()
        ///     {
        ///         Hostname = "example",
        ///         Plan = examplePlans.Apply(getPlansResult =&gt; getPlansResult.Plans[0]?.Name).Apply(System.Enum.Parse&lt;Equinix.Metal.Plan&gt;),
        ///         Metro = examplePlans.Apply(getPlansResult =&gt; getPlansResult.Plans[0]?.AvailableInMetros[0]),
        ///         OperatingSystem = Equinix.Metal.OperatingSystem.Ubuntu20_04,
        ///         BillingCycle = Equinix.Metal.BillingCycle.Hourly,
        ///         ProjectId = @var.Project_id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// If your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var ignorePlansMetrosChanges = config.GetBoolean("ignorePlansMetrosChanges") ?? false;
        ///     var examplePlans = Equinix.Metal.GetPlans.Invoke();
        /// 
        ///     // required device arguments
        ///     var exampleDevice = new Equinix.Metal.Device("exampleDevice");
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetPlansResult> Invoke(GetPlansInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlansResult>("equinix:metal/getPlans:getPlans", args ?? new GetPlansInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlansArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPlansFilterArgs>? _filters;

        /// <summary>
        /// One or more attribute/values pairs to filter off of
        /// </summary>
        public List<Inputs.GetPlansFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPlansFilterArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private List<Inputs.GetPlansSortArgs>? _sorts;

        /// <summary>
        /// One or more attribute/direction pairs on which to sort results. If multiple
        /// sorts are provided, they will be applied in order
        /// </summary>
        public List<Inputs.GetPlansSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetPlansSortArgs>());
            set => _sorts = value;
        }

        public GetPlansArgs()
        {
        }
        public static new GetPlansArgs Empty => new GetPlansArgs();
    }

    public sealed class GetPlansInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPlansFilterInputArgs>? _filters;

        /// <summary>
        /// One or more attribute/values pairs to filter off of
        /// </summary>
        public InputList<Inputs.GetPlansFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPlansFilterInputArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private InputList<Inputs.GetPlansSortInputArgs>? _sorts;

        /// <summary>
        /// One or more attribute/direction pairs on which to sort results. If multiple
        /// sorts are provided, they will be applied in order
        /// </summary>
        public InputList<Inputs.GetPlansSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetPlansSortInputArgs>());
            set => _sorts = value;
        }

        public GetPlansInvokeArgs()
        {
        }
        public static new GetPlansInvokeArgs Empty => new GetPlansInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlansResult
    {
        public readonly ImmutableArray<Outputs.GetPlansFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetPlansPlanResult> Plans;
        public readonly ImmutableArray<Outputs.GetPlansSortResult> Sorts;

        [OutputConstructor]
        private GetPlansResult(
            ImmutableArray<Outputs.GetPlansFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetPlansPlanResult> plans,

            ImmutableArray<Outputs.GetPlansSortResult> sorts)
        {
            Filters = filters;
            Id = id;
            Plans = plans;
            Sorts = sorts;
        }
    }
}
