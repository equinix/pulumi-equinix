// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Metal
{
    public static class GetIpBlockRanges
    {
        /// <summary>
        /// Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
        /// 
        /// There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
        /// 
        /// The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projectId = "&lt;UUID_of_your_project&gt;";
        /// 
        ///     var test = Equinix.Metal.GetIpBlockRanges.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["out"] = test,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpBlockRangesResult> InvokeAsync(GetIpBlockRangesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpBlockRangesResult>("equinix:metal/getIpBlockRanges:getIpBlockRanges", args ?? new GetIpBlockRangesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
        /// 
        /// There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
        /// 
        /// The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var projectId = "&lt;UUID_of_your_project&gt;";
        /// 
        ///     var test = Equinix.Metal.GetIpBlockRanges.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["out"] = test,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpBlockRangesResult> Invoke(GetIpBlockRangesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpBlockRangesResult>("equinix:metal/getIpBlockRanges:getIpBlockRanges", args ?? new GetIpBlockRangesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpBlockRangesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Facility code filtering the IP blocks. Global IPv4 blocks will be listed anyway. If you omit this and metro, all the block from the project will be listed. Use metro instead; read the facility to metro migration guide
        /// </summary>
        [Input("facility")]
        public string? Facility { get; set; }

        /// <summary>
        /// Metro code filtering the IP blocks. Global IPv4 blocks will be listed anyway. If you omit this and facility, all the block from the project will be listed.
        /// </summary>
        [Input("metro")]
        public string? Metro { get; set; }

        /// <summary>
        /// ID of the project from which to list the blocks.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetIpBlockRangesArgs()
        {
        }
        public static new GetIpBlockRangesArgs Empty => new GetIpBlockRangesArgs();
    }

    public sealed class GetIpBlockRangesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Facility code filtering the IP blocks. Global IPv4 blocks will be listed anyway. If you omit this and metro, all the block from the project will be listed. Use metro instead; read the facility to metro migration guide
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// Metro code filtering the IP blocks. Global IPv4 blocks will be listed anyway. If you omit this and facility, all the block from the project will be listed.
        /// </summary>
        [Input("metro")]
        public Input<string>? Metro { get; set; }

        /// <summary>
        /// ID of the project from which to list the blocks.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetIpBlockRangesInvokeArgs()
        {
        }
        public static new GetIpBlockRangesInvokeArgs Empty => new GetIpBlockRangesInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpBlockRangesResult
    {
        public readonly string? Facility;
        /// <summary>
        /// list of CIDR expressions for Global IPv4 blocks in the project.
        /// </summary>
        public readonly ImmutableArray<string> GlobalIpv4s;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// list of CIDR expressions for IPv6 blocks in the project.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6s;
        public readonly string? Metro;
        /// <summary>
        /// list of CIDR expressions for Private IPv4 blocks in the project.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIpv4s;
        public readonly string ProjectId;
        /// <summary>
        /// list of CIDR expressions for Public IPv4 blocks in the project.
        /// </summary>
        public readonly ImmutableArray<string> PublicIpv4s;

        [OutputConstructor]
        private GetIpBlockRangesResult(
            string? facility,

            ImmutableArray<string> globalIpv4s,

            string id,

            ImmutableArray<string> ipv6s,

            string? metro,

            ImmutableArray<string> privateIpv4s,

            string projectId,

            ImmutableArray<string> publicIpv4s)
        {
            Facility = facility;
            GlobalIpv4s = globalIpv4s;
            Id = id;
            Ipv6s = ipv6s;
            Metro = metro;
            PrivateIpv4s = privateIpv4s;
            ProjectId = projectId;
            PublicIpv4s = publicIpv4s;
        }
    }
}
