// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Metal
{
    public static class GetGateway
    {
        /// <summary>
        /// Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
        /// 
        /// See the [Virtual Routing and Forwarding documentation](https://deploy.equinix.com/developers/docs/metal/layer2-networking/vrf/) for product details and API reference material.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses
        ///     var testVlan = new Equinix.Metal.Vlan("testVlan", new()
        ///     {
        ///         Description = "test VLAN in SV",
        ///         Metro = "sv",
        ///         ProjectId = local.Project_id,
        ///     });
        /// 
        ///     var testGateway = Equinix.Metal.GetGateway.Invoke(new()
        ///     {
        ///         GatewayId = local.Gateway_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGatewayResult> InvokeAsync(GetGatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayResult>("equinix:metal/getGateway:getGateway", args ?? new GetGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
        /// 
        /// See the [Virtual Routing and Forwarding documentation](https://deploy.equinix.com/developers/docs/metal/layer2-networking/vrf/) for product details and API reference material.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses
        ///     var testVlan = new Equinix.Metal.Vlan("testVlan", new()
        ///     {
        ///         Description = "test VLAN in SV",
        ///         Metro = "sv",
        ///         ProjectId = local.Project_id,
        ///     });
        /// 
        ///     var testGateway = Equinix.Metal.GetGateway.Invoke(new()
        ///     {
        ///         GatewayId = local.Gateway_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewayResult> Invoke(GetGatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayResult>("equinix:metal/getGateway:getGateway", args ?? new GetGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
        /// 
        /// See the [Virtual Routing and Forwarding documentation](https://deploy.equinix.com/developers/docs/metal/layer2-networking/vrf/) for product details and API reference material.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Equinix = Pulumi.Equinix;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses
        ///     var testVlan = new Equinix.Metal.Vlan("testVlan", new()
        ///     {
        ///         Description = "test VLAN in SV",
        ///         Metro = "sv",
        ///         ProjectId = local.Project_id,
        ///     });
        /// 
        ///     var testGateway = Equinix.Metal.GetGateway.Invoke(new()
        ///     {
        ///         GatewayId = local.Gateway_id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewayResult> Invoke(GetGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayResult>("equinix:metal/getGateway:getGateway", args ?? new GetGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// UUID of the metal gateway resource to retrieve.
        /// </summary>
        [Input("gatewayId", required: true)]
        public string GatewayId { get; set; } = null!;

        public GetGatewayArgs()
        {
        }
        public static new GetGatewayArgs Empty => new GetGatewayArgs();
    }

    public sealed class GetGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// UUID of the metal gateway resource to retrieve.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        public GetGatewayInvokeArgs()
        {
        }
        public static new GetGatewayInvokeArgs Empty => new GetGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayResult
    {
        public readonly string GatewayId;
        public readonly string Id;
        /// <summary>
        /// UUID of IP reservation block bound to the gateway.
        /// </summary>
        public readonly string IpReservationId;
        /// <summary>
        /// Size of the private IPv4 subnet bound to this metal gateway. One of `8`, `16`, `32`, `64`, `128`.
        /// </summary>
        public readonly int PrivateIpv4SubnetSize;
        /// <summary>
        /// UUID of the project where the gateway is scoped to.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Status of the gateway resource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// UUID of the VLAN where the gateway is scoped to.
        /// </summary>
        public readonly string VlanId;
        /// <summary>
        /// UUID of the VRF associated with the IP Reservation.
        /// </summary>
        public readonly string VrfId;

        [OutputConstructor]
        private GetGatewayResult(
            string gatewayId,

            string id,

            string ipReservationId,

            int privateIpv4SubnetSize,

            string projectId,

            string state,

            string vlanId,

            string vrfId)
        {
            GatewayId = gatewayId;
            Id = id;
            IpReservationId = ipReservationId;
            PrivateIpv4SubnetSize = privateIpv4SubnetSize;
            ProjectId = projectId;
            State = state;
            VlanId = vlanId;
            VrfId = vrfId;
        }
    }
}
