// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Equinix.Metal
{
    /// <summary>
    /// Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).
    /// 
    /// ## Example Usage
    /// ### example fabric billed metal from fabric port
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aSide = Equinix.Fabric.GetPorts.Invoke(new()
    ///     {
    ///         Filter = new Equinix.Fabric.Inputs.GetPortsFilterInputArgs
    ///         {
    ///             Name = "&lt;name_of_port||port_prefix&gt;",
    ///         },
    ///     });
    /// 
    ///     var example = new Equinix.Metal.Vlan("example", new()
    ///     {
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Metro = "FR",
    ///     });
    /// 
    ///     var exampleInterconnection = new Equinix.Metal.Interconnection("exampleInterconnection", new()
    ///     {
    ///         Name = "tf-metal-from-port",
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Type = "shared",
    ///         Redundancy = "primary",
    ///         Metro = "FR",
    ///         Speed = "200Mbps",
    ///         ServiceTokenType = "z_side",
    ///         ContactEmail = "username@example.com",
    ///         Vlans = new[]
    ///         {
    ///             example.Vxlan,
    ///         },
    ///     });
    /// 
    ///     var exampleConnection = new Equinix.Fabric.Connection("exampleConnection", new()
    ///     {
    ///         Name = "tf-metal-from-port",
    ///         Type = Equinix.Fabric.ConnectionType.EVPL,
    ///         Bandwidth = 200,
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ConnectionNotificationArgs
    ///             {
    ///                 Type = Equinix.Fabric.NotificationsType.All,
    ///                 Emails = new[]
    ///                 {
    ///                     "username@example.com",
    ///                 },
    ///             },
    ///         },
    ///         Order = new Equinix.Fabric.Inputs.ConnectionOrderArgs
    ///         {
    ///             PurchaseOrderNumber = "1-323292",
    ///         },
    ///         Project = new Equinix.Fabric.Inputs.ConnectionProjectArgs
    ///         {
    ///             ProjectId = "&lt;fabric_project_id&gt;",
    ///         },
    ///         ASide = new Equinix.Fabric.Inputs.ConnectionASideArgs
    ///         {
    ///             AccessPoint = new Equinix.Fabric.Inputs.ConnectionASideAccessPointArgs
    ///             {
    ///                 Type = Equinix.Fabric.AccessPointType.Colo,
    ///                 Port = new Equinix.Fabric.Inputs.ConnectionASideAccessPointPortArgs
    ///                 {
    ///                     Uuid = aSide.Apply(getPortsResult =&gt; getPortsResult.Data[0]?.Uuid),
    ///                 },
    ///                 LinkProtocol = new Equinix.Fabric.Inputs.ConnectionASideAccessPointLinkProtocolArgs
    ///                 {
    ///                     Type = Equinix.Fabric.AccessPointLinkProtocolType.Dot1q,
    ///                     VlanTag = 1234,
    ///                 },
    ///             },
    ///         },
    ///         ZSide = new Equinix.Fabric.Inputs.ConnectionZSideArgs
    ///         {
    ///             ServiceToken = new Equinix.Fabric.Inputs.ConnectionZSideServiceTokenArgs
    ///             {
    ///                 Uuid = exampleInterconnection.ServiceTokens.Apply(serviceTokens =&gt; serviceTokens[0].Id),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example fabric billed metal from fcr
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example1 = new Equinix.Metal.Vlan("example1", new()
    ///     {
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Metro = "SV",
    ///     });
    /// 
    ///     var example = new Equinix.Metal.Interconnection("example", new()
    ///     {
    ///         Name = "tf-metal-from-fcr",
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Metro = "SV",
    ///         Redundancy = "primary",
    ///         Type = "shared_port_vlan",
    ///         ContactEmail = "username@example.com",
    ///         Speed = "200Mbps",
    ///         Vlans = new[]
    ///         {
    ///             example1.Vxlan,
    ///         },
    ///     });
    /// 
    ///     var exampleConnection = new Equinix.Fabric.Connection("exampleConnection", new()
    ///     {
    ///         Name = "tf-metal-from-fcr",
    ///         Type = "IP_VC",
    ///         Bandwidth = 200,
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ConnectionNotificationArgs
    ///             {
    ///                 Type = Equinix.Fabric.NotificationsType.All,
    ///                 Emails = new[]
    ///                 {
    ///                     "username@example.com",
    ///                 },
    ///             },
    ///         },
    ///         Project = new Equinix.Fabric.Inputs.ConnectionProjectArgs
    ///         {
    ///             ProjectId = "&lt;fabric_project_id&gt;",
    ///         },
    ///         ASide = new Equinix.Fabric.Inputs.ConnectionASideArgs
    ///         {
    ///             AccessPoint = new Equinix.Fabric.Inputs.ConnectionASideAccessPointArgs
    ///             {
    ///                 Type = "CLOUD_ROUTER",
    ///                 Router = new Equinix.Fabric.Inputs.ConnectionASideAccessPointRouterArgs
    ///                 {
    ///                     Uuid = exampleEquinixFabricCloudRouter.Id,
    ///                 },
    ///             },
    ///         },
    ///         ZSide = new Equinix.Fabric.Inputs.ConnectionZSideArgs
    ///         {
    ///             AccessPoint = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointArgs
    ///             {
    ///                 Type = "METAL_NETWORK",
    ///                 AuthenticationKey = example.AuthorizationCode,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example fabric billed metal from network edge
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Equinix.Metal.Vrf("example", new()
    ///     {
    ///         Name = "tf-metal-from-ne",
    ///         Metro = "FR",
    ///         LocalAsn = 65001,
    ///         IpRanges = new[]
    ///         {
    ///             "10.99.1.0/24",
    ///         },
    ///         ProjectId = test.Id,
    ///     });
    /// 
    ///     var exampleInterconnection = new Equinix.Metal.Interconnection("exampleInterconnection", new()
    ///     {
    ///         Name = "tf-metal-from-ne",
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Type = "shared",
    ///         Redundancy = "primary",
    ///         Metro = "FR",
    ///         Speed = "200Mbps",
    ///         ServiceTokenType = "z_side",
    ///         ContactEmail = "username@example.com",
    ///         Vrfs = new[]
    ///         {
    ///             example.Vxlan,
    ///         },
    ///     });
    /// 
    ///     var exampleConnection = new Equinix.Fabric.Connection("exampleConnection", new()
    ///     {
    ///         Name = "tf-metal-from-ne",
    ///         Type = Equinix.Fabric.ConnectionType.EVPL,
    ///         Bandwidth = 200,
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ConnectionNotificationArgs
    ///             {
    ///                 Type = Equinix.Fabric.NotificationsType.All,
    ///                 Emails = new[]
    ///                 {
    ///                     "username@example.com",
    ///                 },
    ///             },
    ///         },
    ///         Order = new Equinix.Fabric.Inputs.ConnectionOrderArgs
    ///         {
    ///             PurchaseOrderNumber = "1-323292",
    ///         },
    ///         Project = new Equinix.Fabric.Inputs.ConnectionProjectArgs
    ///         {
    ///             ProjectId = "&lt;fabric_project_id&gt;",
    ///         },
    ///         ASide = new Equinix.Fabric.Inputs.ConnectionASideArgs
    ///         {
    ///             AccessPoint = new Equinix.Fabric.Inputs.ConnectionASideAccessPointArgs
    ///             {
    ///                 Type = Equinix.Fabric.AccessPointType.VD,
    ///                 VirtualDevice = new Equinix.Fabric.Inputs.ConnectionASideAccessPointVirtualDeviceArgs
    ///                 {
    ///                     Type = "EDGE",
    ///                     Uuid = exampleEquinixNetworkDevice.Id,
    ///                 },
    ///             },
    ///         },
    ///         ZSide = new Equinix.Fabric.Inputs.ConnectionZSideArgs
    ///         {
    ///             ServiceToken = new Equinix.Fabric.Inputs.ConnectionZSideServiceTokenArgs
    ///             {
    ///                 Uuid = exampleInterconnection.ServiceTokens.Apply(serviceTokens =&gt; serviceTokens[0].Id),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### example metal billed metal to fabric port
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Equinix = Pulumi.Equinix;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aSide = Equinix.Fabric.GetPorts.Invoke(new()
    ///     {
    ///         Filter = new Equinix.Fabric.Inputs.GetPortsFilterInputArgs
    ///         {
    ///             Name = "&lt;name_of_port||port_prefix&gt;",
    ///         },
    ///     });
    /// 
    ///     var example = new Equinix.Metal.Interconnection("example", new()
    ///     {
    ///         Name = "tf-metal-2-port",
    ///         ProjectId = "&lt;metal_project_id&gt;",
    ///         Type = "shared",
    ///         Redundancy = "redundant",
    ///         Metro = "FR",
    ///         Speed = "1Gbps",
    ///         ServiceTokenType = "a_side",
    ///         ContactEmail = "username@example.com",
    ///     });
    /// 
    ///     var exampleConnection = new Equinix.Fabric.Connection("exampleConnection", new()
    ///     {
    ///         Name = "tf-metal-2-port",
    ///         Type = Equinix.Fabric.ConnectionType.EVPL,
    ///         Notifications = new[]
    ///         {
    ///             new Equinix.Fabric.Inputs.ConnectionNotificationArgs
    ///             {
    ///                 Type = Equinix.Fabric.NotificationsType.All,
    ///                 Emails = new[]
    ///                 {
    ///                     "username@example.com",
    ///                 },
    ///             },
    ///         },
    ///         Project = new Equinix.Fabric.Inputs.ConnectionProjectArgs
    ///         {
    ///             ProjectId = "&lt;fabric_project_id&gt;",
    ///         },
    ///         Bandwidth = 100,
    ///         Order = new Equinix.Fabric.Inputs.ConnectionOrderArgs
    ///         {
    ///             PurchaseOrderNumber = "1-323292",
    ///         },
    ///         ASide = new Equinix.Fabric.Inputs.ConnectionASideArgs
    ///         {
    ///             ServiceToken = new Equinix.Fabric.Inputs.ConnectionASideServiceTokenArgs
    ///             {
    ///                 Uuid = example.ServiceTokens.Apply(serviceTokens =&gt; serviceTokens[0].Id),
    ///             },
    ///         },
    ///         ZSide = new Equinix.Fabric.Inputs.ConnectionZSideArgs
    ///         {
    ///             AccessPoint = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointArgs
    ///             {
    ///                 Type = Equinix.Fabric.AccessPointType.Colo,
    ///                 Port = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointPortArgs
    ///                 {
    ///                     Uuid = aSide.Apply(getPortsResult =&gt; getPortsResult.Data[0]?.Uuid),
    ///                 },
    ///                 LinkProtocol = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointLinkProtocolArgs
    ///                 {
    ///                     Type = Equinix.Fabric.AccessPointLinkProtocolType.Dot1q,
    ///                     VlanTag = 1234,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [EquinixResourceType("equinix:metal/interconnection:Interconnection")]
    public partial class Interconnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Only used with Fabric Shared connection. Fabric uses this token to be able to give more detailed information about the Metal end of the network, when viewing resources from within Fabric.
        /// </summary>
        [Output("authorizationCode")]
        public Output<string> AuthorizationCode { get; private set; } = null!;

        /// <summary>
        /// The preferred email used for communication and notifications about the Equinix Fabric interconnection
        /// </summary>
        [Output("contactEmail")]
        public Output<string> ContactEmail { get; private set; } = null!;

        /// <summary>
        /// Description of the connection resource
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Facility where the connection will be created
        /// </summary>
        [Output("facility")]
        public Output<string> Facility { get; private set; } = null!;

        /// <summary>
        /// Metro where the connection will be created
        /// </summary>
        [Output("metro")]
        public Output<string> Metro { get; private set; } = null!;

        /// <summary>
        /// Mode for connections in IBX facilities with the dedicated type - standard or tunnel
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Name of the connection resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the organization responsible for the connection. Applicable with type "dedicated"
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<Outputs.InterconnectionPort>> Ports { get; private set; } = null!;

        /// <summary>
        /// ID of the project where the connection is scoped to. Required with type "shared"
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Connection redundancy - redundant or primary
        /// </summary>
        [Output("redundancy")]
        public Output<string> Redundancy { get; private set; } = null!;

        /// <summary>
        /// Only used with shared connection. Type of service token to use for the connection, a*side or z*side
        /// </summary>
        [Output("serviceTokenType")]
        public Output<string?> ServiceTokenType { get; private set; } = null!;

        /// <summary>
        /// Only used with shared connection. List of service tokens required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
        /// </summary>
        [Output("serviceTokens")]
        public Output<ImmutableArray<Outputs.InterconnectionServiceToken>> ServiceTokens { get; private set; } = null!;

        /// <summary>
        /// Connection speed -  Values must be in the format '\n\nMbps' or '\n\nGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        /// </summary>
        [Output("speed")]
        public Output<string> Speed { get; private set; } = null!;

        /// <summary>
        /// Status of the connection resource
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags attached to the connection
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Only used with shared connection. Fabric Token required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Connection type - dedicated, shared or shared*port*vlan
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Only used with shared connection. VLANs to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection
        /// </summary>
        [Output("vlans")]
        public Output<ImmutableArray<int>> Vlans { get; private set; } = null!;

        /// <summary>
        /// Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant connection
        /// </summary>
        [Output("vrfs")]
        public Output<ImmutableArray<string>> Vrfs { get; private set; } = null!;


        /// <summary>
        /// Create a Interconnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Interconnection(string name, InterconnectionArgs args, CustomResourceOptions? options = null)
            : base("equinix:metal/interconnection:Interconnection", name, args ?? new InterconnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Interconnection(string name, Input<string> id, InterconnectionState? state = null, CustomResourceOptions? options = null)
            : base("equinix:metal/interconnection:Interconnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/equinix",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Interconnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Interconnection Get(string name, Input<string> id, InterconnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Interconnection(name, id, state, options);
        }
    }

    public sealed class InterconnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The preferred email used for communication and notifications about the Equinix Fabric interconnection
        /// </summary>
        [Input("contactEmail")]
        public Input<string>? ContactEmail { get; set; }

        /// <summary>
        /// Description of the connection resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Facility where the connection will be created
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// Metro where the connection will be created
        /// </summary>
        [Input("metro")]
        public Input<string>? Metro { get; set; }

        /// <summary>
        /// Mode for connections in IBX facilities with the dedicated type - standard or tunnel
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Name of the connection resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization responsible for the connection. Applicable with type "dedicated"
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// ID of the project where the connection is scoped to. Required with type "shared"
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Connection redundancy - redundant or primary
        /// </summary>
        [Input("redundancy", required: true)]
        public Input<string> Redundancy { get; set; } = null!;

        /// <summary>
        /// Only used with shared connection. Type of service token to use for the connection, a*side or z*side
        /// </summary>
        [Input("serviceTokenType")]
        public Input<string>? ServiceTokenType { get; set; }

        /// <summary>
        /// Connection speed -  Values must be in the format '\n\nMbps' or '\n\nGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags attached to the connection
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Connection type - dedicated, shared or shared*port*vlan
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("vlans")]
        private InputList<int>? _vlans;

        /// <summary>
        /// Only used with shared connection. VLANs to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection
        /// </summary>
        public InputList<int> Vlans
        {
            get => _vlans ?? (_vlans = new InputList<int>());
            set => _vlans = value;
        }

        [Input("vrfs")]
        private InputList<string>? _vrfs;

        /// <summary>
        /// Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant connection
        /// </summary>
        public InputList<string> Vrfs
        {
            get => _vrfs ?? (_vrfs = new InputList<string>());
            set => _vrfs = value;
        }

        public InterconnectionArgs()
        {
        }
        public static new InterconnectionArgs Empty => new InterconnectionArgs();
    }

    public sealed class InterconnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only used with Fabric Shared connection. Fabric uses this token to be able to give more detailed information about the Metal end of the network, when viewing resources from within Fabric.
        /// </summary>
        [Input("authorizationCode")]
        public Input<string>? AuthorizationCode { get; set; }

        /// <summary>
        /// The preferred email used for communication and notifications about the Equinix Fabric interconnection
        /// </summary>
        [Input("contactEmail")]
        public Input<string>? ContactEmail { get; set; }

        /// <summary>
        /// Description of the connection resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Facility where the connection will be created
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// Metro where the connection will be created
        /// </summary>
        [Input("metro")]
        public Input<string>? Metro { get; set; }

        /// <summary>
        /// Mode for connections in IBX facilities with the dedicated type - standard or tunnel
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Name of the connection resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization responsible for the connection. Applicable with type "dedicated"
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("ports")]
        private InputList<Inputs.InterconnectionPortGetArgs>? _ports;

        /// <summary>
        /// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
        /// </summary>
        public InputList<Inputs.InterconnectionPortGetArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.InterconnectionPortGetArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// ID of the project where the connection is scoped to. Required with type "shared"
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Connection redundancy - redundant or primary
        /// </summary>
        [Input("redundancy")]
        public Input<string>? Redundancy { get; set; }

        /// <summary>
        /// Only used with shared connection. Type of service token to use for the connection, a*side or z*side
        /// </summary>
        [Input("serviceTokenType")]
        public Input<string>? ServiceTokenType { get; set; }

        [Input("serviceTokens")]
        private InputList<Inputs.InterconnectionServiceTokenGetArgs>? _serviceTokens;

        /// <summary>
        /// Only used with shared connection. List of service tokens required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
        /// </summary>
        public InputList<Inputs.InterconnectionServiceTokenGetArgs> ServiceTokens
        {
            get => _serviceTokens ?? (_serviceTokens = new InputList<Inputs.InterconnectionServiceTokenGetArgs>());
            set => _serviceTokens = value;
        }

        /// <summary>
        /// Connection speed -  Values must be in the format '\n\nMbps' or '\n\nGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Status of the connection resource
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags attached to the connection
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Only used with shared connection. Fabric Token required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Connection type - dedicated, shared or shared*port*vlan
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vlans")]
        private InputList<int>? _vlans;

        /// <summary>
        /// Only used with shared connection. VLANs to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection
        /// </summary>
        public InputList<int> Vlans
        {
            get => _vlans ?? (_vlans = new InputList<int>());
            set => _vlans = value;
        }

        [Input("vrfs")]
        private InputList<string>? _vrfs;

        /// <summary>
        /// Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant connection
        /// </summary>
        public InputList<string> Vrfs
        {
            get => _vrfs ?? (_vrfs = new InputList<string>());
            set => _vrfs = value;
        }

        public InterconnectionState()
        {
        }
        public static new InterconnectionState Empty => new InterconnectionState();
    }
}
