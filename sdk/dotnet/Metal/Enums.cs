// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Equinix.Metal
{
    [EnumType]
    public readonly struct BillingCycle : IEquatable<BillingCycle>
    {
        private readonly string _value;

        private BillingCycle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingCycle Hourly { get; } = new BillingCycle("hourly");
        public static BillingCycle Monthly { get; } = new BillingCycle("monthly");

        public static bool operator ==(BillingCycle left, BillingCycle right) => left.Equals(right);
        public static bool operator !=(BillingCycle left, BillingCycle right) => !left.Equals(right);

        public static explicit operator string(BillingCycle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingCycle other && Equals(other);
        public bool Equals(BillingCycle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// See https://deploy.equinix.com/developers/api/metal/#tag/Facilities/operation/findFacilities
    /// </summary>
    [EnumType]
    public readonly struct Facility : IEquatable<Facility>
    {
        private readonly string _value;

        private Facility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Amsterdam 2
        /// </summary>
        public static Facility AM2 { get; } = new Facility("am2");
        /// <summary>
        /// Amsterdam 6
        /// </summary>
        public static Facility AM6 { get; } = new Facility("am6");
        /// <summary>
        /// Manchester 5
        /// </summary>
        public static Facility MA5 { get; } = new Facility("ma5");
        /// <summary>
        /// Tokio 1
        /// </summary>
        public static Facility NRT1 { get; } = new Facility("nrt1");
        /// <summary>
        /// Paris 4
        /// </summary>
        public static Facility PA4 { get; } = new Facility("pa4");
        /// <summary>
        /// Stockholm 2
        /// </summary>
        public static Facility SK2 { get; } = new Facility("sk2");
        /// <summary>
        /// Melbourne 2
        /// </summary>
        public static Facility ME2 { get; } = new Facility("me2");
        /// <summary>
        /// Hong Kong 2
        /// </summary>
        public static Facility HK2 { get; } = new Facility("hk2");
        /// <summary>
        /// Tokyo 11
        /// </summary>
        public static Facility TY11 { get; } = new Facility("ty11");
        /// <summary>
        /// Los Angeles 4
        /// </summary>
        public static Facility LA4 { get; } = new Facility("la4");
        /// <summary>
        /// Dallas 6
        /// </summary>
        public static Facility DA6 { get; } = new Facility("da6");
        /// <summary>
        /// Dallas 11
        /// </summary>
        public static Facility DA11 { get; } = new Facility("da11");
        /// <summary>
        /// Dallas 3
        /// </summary>
        public static Facility DA3 { get; } = new Facility("da3");
        /// <summary>
        /// Sao Paulo 4
        /// </summary>
        public static Facility SP4 { get; } = new Facility("sp4");
        /// <summary>
        /// Montreal 1
        /// </summary>
        public static Facility MT1 { get; } = new Facility("mt1");
        /// <summary>
        /// Silicon Valley 16
        /// </summary>
        public static Facility SV16 { get; } = new Facility("sv16");
        /// <summary>
        /// Sunnyvale, CA 1
        /// </summary>
        public static Facility SJC1 { get; } = new Facility("sjc1");
        /// <summary>
        /// Frankfurt 2
        /// </summary>
        public static Facility FRA2 { get; } = new Facility("fra2");
        /// <summary>
        /// Frankfurt 8
        /// </summary>
        public static Facility FRA8 { get; } = new Facility("fr8");
        /// <summary>
        /// New York 5
        /// </summary>
        public static Facility NY5 { get; } = new Facility("ny5");
        /// <summary>
        /// New York 6
        /// </summary>
        public static Facility NY6 { get; } = new Facility("ny6");
        /// <summary>
        /// New York 7
        /// </summary>
        public static Facility NY7 { get; } = new Facility("ny7");
        /// <summary>
        /// Chicago 3
        /// </summary>
        public static Facility CH3 { get; } = new Facility("ch3");
        /// <summary>
        /// Seoul 1
        /// </summary>
        public static Facility SL1 { get; } = new Facility("sl1");
        /// <summary>
        /// Sydney 5
        /// </summary>
        public static Facility SY5 { get; } = new Facility("sy5");
        /// <summary>
        /// Osaka 3
        /// </summary>
        public static Facility OS3 { get; } = new Facility("os3");
        /// <summary>
        /// London 7
        /// </summary>
        public static Facility LD7 { get; } = new Facility("ld7");
        /// <summary>
        /// Washington DC 10
        /// </summary>
        public static Facility DC10 { get; } = new Facility("dc10");
        /// <summary>
        /// Amsterdam 1
        /// </summary>
        public static Facility AMS1 { get; } = new Facility("ams1");
        /// <summary>
        /// Singapore 4
        /// </summary>
        public static Facility SG4 { get; } = new Facility("sg4");
        /// <summary>
        /// Seattle 4
        /// </summary>
        public static Facility SE4 { get; } = new Facility("se4");
        /// <summary>
        /// Sydney 4
        /// </summary>
        public static Facility SY4 { get; } = new Facility("sy4");
        /// <summary>
        /// Atlanta 4
        /// </summary>
        public static Facility AT4 { get; } = new Facility("at4");
        /// <summary>
        /// Dallas 2
        /// </summary>
        public static Facility DFW2 { get; } = new Facility("dfw2");
        /// <summary>
        /// Toronto
        /// </summary>
        public static Facility TR2 { get; } = new Facility("tr2");
        /// <summary>
        /// Washington DC
        /// </summary>
        public static Facility DC13 { get; } = new Facility("dc13");
        /// <summary>
        /// Helsinki
        /// </summary>
        public static Facility HE7 { get; } = new Facility("he7");
        /// <summary>
        /// Parsippany, NJ 1
        /// </summary>
        public static Facility EWR1 { get; } = new Facility("ewr1");
        /// <summary>
        /// Singapore 5
        /// </summary>
        public static Facility SG5 { get; } = new Facility("sg5");
        /// <summary>
        /// Singapore 1
        /// </summary>
        public static Facility SG1 { get; } = new Facility("sg1");
        /// <summary>
        /// Madrid 2
        /// </summary>
        public static Facility MD2 { get; } = new Facility("md2");
        /// <summary>
        /// Silicon Valley 15
        /// </summary>
        public static Facility SV15 { get; } = new Facility("sv15");

        public static bool operator ==(Facility left, Facility right) => left.Equals(right);
        public static bool operator !=(Facility left, Facility right) => !left.Equals(right);

        public static explicit operator string(Facility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Facility other && Equals(other);
        public bool Equals(Facility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IpBlockType : IEquatable<IpBlockType>
    {
        private readonly string _value;

        private IpBlockType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpBlockType GlobalIPv4 { get; } = new IpBlockType("global_ipv4");
        public static IpBlockType PublicIPv4 { get; } = new IpBlockType("public_ipv4");

        public static bool operator ==(IpBlockType left, IpBlockType right) => left.Equals(right);
        public static bool operator !=(IpBlockType left, IpBlockType right) => !left.Equals(right);

        public static explicit operator string(IpBlockType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpBlockType other && Equals(other);
        public bool Equals(IpBlockType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkType : IEquatable<NetworkType>
    {
        private readonly string _value;

        private NetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkType Layer3 { get; } = new NetworkType("layer3");
        public static NetworkType Layer2Individual { get; } = new NetworkType("layer2-individual");
        public static NetworkType Layer2Bonded { get; } = new NetworkType("layer2-bonded");
        public static NetworkType Hybrid { get; } = new NetworkType("hybrid");

        public static bool operator ==(NetworkType left, NetworkType right) => left.Equals(right);
        public static bool operator !=(NetworkType left, NetworkType right) => !left.Equals(right);

        public static explicit operator string(NetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkType other && Equals(other);
        public bool Equals(NetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// See https://deploy.equinix.com/developers/api/metal/#tag/OperatingSystems/operation/findOperatingSystems
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystem : IEquatable<OperatingSystem>
    {
        private readonly string _value;

        private OperatingSystem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystem Alma8 { get; } = new OperatingSystem("alma_8");
        public static OperatingSystem Alma9 { get; } = new OperatingSystem("alma_9");
        public static OperatingSystem Alpine3 { get; } = new OperatingSystem("alpine_3");
        public static OperatingSystem CentOS6 { get; } = new OperatingSystem("centos_6");
        public static OperatingSystem CentOS7 { get; } = new OperatingSystem("centos_7");
        public static OperatingSystem CentOS8 { get; } = new OperatingSystem("centos_8");
        public static OperatingSystem CoreOSAlpha { get; } = new OperatingSystem("coreos_alpha");
        public static OperatingSystem CoreOSBeta { get; } = new OperatingSystem("coreos_beta");
        public static OperatingSystem CoreOSStable { get; } = new OperatingSystem("coreos_stable");
        public static OperatingSystem CustomIPXE { get; } = new OperatingSystem("custom_ipxe");
        public static OperatingSystem Debian10 { get; } = new OperatingSystem("debian_10");
        public static OperatingSystem Debian11 { get; } = new OperatingSystem("debian_11");
        public static OperatingSystem Debian7 { get; } = new OperatingSystem("debian_7");
        public static OperatingSystem Debian8 { get; } = new OperatingSystem("debian_8");
        public static OperatingSystem Debian9 { get; } = new OperatingSystem("debian_9");
        public static OperatingSystem Fedora31 { get; } = new OperatingSystem("fedora_31");
        public static OperatingSystem Fedora34 { get; } = new OperatingSystem("fedora_34");
        public static OperatingSystem FlatcarAlpha { get; } = new OperatingSystem("flatcar_alpha");
        public static OperatingSystem FlatcarBeta { get; } = new OperatingSystem("flatcar_beta");
        public static OperatingSystem FlatcarEdge { get; } = new OperatingSystem("flatcar_edge");
        public static OperatingSystem FlatcarLTS { get; } = new OperatingSystem("flatcar_lts");
        public static OperatingSystem FlatcarStable { get; } = new OperatingSystem("flatcar_stable");
        public static OperatingSystem FreeBSD10_3 { get; } = new OperatingSystem("freebsd_10_3");
        public static OperatingSystem FreeBSD10_4 { get; } = new OperatingSystem("freebsd_10_4");
        public static OperatingSystem FreeBSD11_0 { get; } = new OperatingSystem("freebsd_11_0");
        public static OperatingSystem FreeBSD11_1 { get; } = new OperatingSystem("freebsd_11_1");
        public static OperatingSystem FreeBSD11_2 { get; } = new OperatingSystem("freebsd_11_2");
        public static OperatingSystem FreeBSD11_3 { get; } = new OperatingSystem("freebsd_11_3");
        public static OperatingSystem FreeBSD11_4 { get; } = new OperatingSystem("freebsd_11_4");
        public static OperatingSystem FreeBSD12Testing { get; } = new OperatingSystem("freebsd_12_testing");
        public static OperatingSystem FreeBSD12_1 { get; } = new OperatingSystem("freebsd_12_1");
        public static OperatingSystem FreeBSD13_0 { get; } = new OperatingSystem("freebsd_13_0");
        public static OperatingSystem FreeBSD13_1 { get; } = new OperatingSystem("freebsd_13_1");
        public static OperatingSystem FreeBSD13_testing { get; } = new OperatingSystem("freebsd_13_testing");
        public static OperatingSystem HookEsxi7 { get; } = new OperatingSystem("hook_esxi7");
        public static OperatingSystem NixOS17_03 { get; } = new OperatingSystem("nixos_17_03");
        public static OperatingSystem NixOS18_03 { get; } = new OperatingSystem("nixos_18_03");
        public static OperatingSystem NixOS19_03 { get; } = new OperatingSystem("nixos_19_03");
        public static OperatingSystem NixOS20_09 { get; } = new OperatingSystem("nixos_20_09");
        public static OperatingSystem NixOS21_11 { get; } = new OperatingSystem("nixos_21_11");
        public static OperatingSystem NixOS22_05 { get; } = new OperatingSystem("nixos_22_05");
        public static OperatingSystem NixOS22_11 { get; } = new OperatingSystem("nixos_22_11");
        public static OperatingSystem Nixos21_05 { get; } = new OperatingSystem("nixos_21_05");
        public static OperatingSystem NutanixCentos { get; } = new OperatingSystem("nutanix_centos");
        public static OperatingSystem NutanixLTS5_19_1 { get; } = new OperatingSystem("nutanix_lts_5_19_1");
        public static OperatingSystem NutanixLTS5_20 { get; } = new OperatingSystem("nutanix_lts_5_20");
        public static OperatingSystem OpenSUSE42_3 { get; } = new OperatingSystem("opensuse_42_3");
        public static OperatingSystem RHEL7 { get; } = new OperatingSystem("rhel_7");
        public static OperatingSystem RHEL8 { get; } = new OperatingSystem("rhel_8");
        public static OperatingSystem RHEL9 { get; } = new OperatingSystem("rhel_9");
        public static OperatingSystem RancherOS { get; } = new OperatingSystem("rancher");
        public static OperatingSystem Rocky8 { get; } = new OperatingSystem("rocky_8");
        public static OperatingSystem Rocky9 { get; } = new OperatingSystem("rocky_9");
        public static OperatingSystem SLES12SP3 { get; } = new OperatingSystem("suse_sles12_sp3");
        public static OperatingSystem ScientificLinux6 { get; } = new OperatingSystem("scientific_6");
        public static OperatingSystem TalosV1 { get; } = new OperatingSystem("talos_v1");
        public static OperatingSystem Ubuntu1710 { get; } = new OperatingSystem("ubuntu_17_10");
        public static OperatingSystem Ubuntu18_04 { get; } = new OperatingSystem("ubuntu_18_04");
        public static OperatingSystem Ubuntu1904 { get; } = new OperatingSystem("ubuntu_19_04");
        public static OperatingSystem Ubuntu19_10 { get; } = new OperatingSystem("ubuntu_19_10");
        public static OperatingSystem Ubuntu20_04 { get; } = new OperatingSystem("ubuntu_20_04");
        public static OperatingSystem Ubuntu20_04_legacy { get; } = new OperatingSystem("ubuntu_20_04_legacy");
        public static OperatingSystem Ubuntu20_10 { get; } = new OperatingSystem("ubuntu_20_10");
        public static OperatingSystem Ubuntu2204 { get; } = new OperatingSystem("ubuntu_22_04");
        public static OperatingSystem VMWareAlloyVcf { get; } = new OperatingSystem("vmware_alloy_vcf");
        public static OperatingSystem VMWareEsxi5_5 { get; } = new OperatingSystem("vmware_esxi_5_5");
        public static OperatingSystem VMWareEsxi6_0 { get; } = new OperatingSystem("vmware_esxi_6_0");
        public static OperatingSystem VMWareEsxi6_5 { get; } = new OperatingSystem("vmware_esxi_6_5");
        public static OperatingSystem VMWareEsxi6_7 { get; } = new OperatingSystem("vmware_esxi_6_7");
        public static OperatingSystem VMWareEsxi6_7_vcf { get; } = new OperatingSystem("vmware_esxi_6_7_vcf");
        public static OperatingSystem VMWareEsxi7_0 { get; } = new OperatingSystem("vmware_esxi_7_0");
        public static OperatingSystem VMWareEsxi7_0U2a { get; } = new OperatingSystem("vmware_esxi_7_0U2a");
        public static OperatingSystem VMWareEsxi7_0_vcf { get; } = new OperatingSystem("vmware_esxi_7_0_vcf");
        public static OperatingSystem VMWareNsx2_5_0 { get; } = new OperatingSystem("vmware_nsx_2_5_0");
        public static OperatingSystem VMWareNsx3_0_0 { get; } = new OperatingSystem("vmware_nsx_3_0_0");
        public static OperatingSystem Virtuozzo7 { get; } = new OperatingSystem("virtuozzo_7");
        public static OperatingSystem Windows2012R2 { get; } = new OperatingSystem("windows_2012_r2");
        public static OperatingSystem Windows2016 { get; } = new OperatingSystem("windows_2016");
        public static OperatingSystem Windows2019 { get; } = new OperatingSystem("windows_2019");
        public static OperatingSystem Windows2022 { get; } = new OperatingSystem("windows_2022");

        public static bool operator ==(OperatingSystem left, OperatingSystem right) => left.Equals(right);
        public static bool operator !=(OperatingSystem left, OperatingSystem right) => !left.Equals(right);

        public static explicit operator string(OperatingSystem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystem other && Equals(other);
        public bool Equals(OperatingSystem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// See https://deploy.equinix.com/developers/api/metal/#tag/Plans/operation/findPlans
    /// </summary>
    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan A3LargeX86 { get; } = new Plan("a3.large.x86");
        public static Plan C2LargeARM { get; } = new Plan("c2.large.arm");
        public static Plan C2MediumX86 { get; } = new Plan("c2.medium.x86");
        public static Plan C3LargeARM { get; } = new Plan("c3.large.arm64");
        public static Plan C3MediumX86 { get; } = new Plan("c3.medium.x86");
        public static Plan C3SmallX86 { get; } = new Plan("c3.small.x86");
        public static Plan F3LargeX86 { get; } = new Plan("f3.large.x86");
        public static Plan F3MediumX86 { get; } = new Plan("f3.medium.x86");
        public static Plan G2LargeX86 { get; } = new Plan("g2.large.x86");
        public static Plan M2XLargeX86 { get; } = new Plan("m2.xlarge.x86");
        public static Plan M3LargeX86 { get; } = new Plan("m3.large.x86");
        public static Plan M3SmallX86 { get; } = new Plan("m3.small.x86");
        public static Plan N2XLargeX86 { get; } = new Plan("n2.xlarge.x86");
        public static Plan N3XLargeX86 { get; } = new Plan("n3.xlarge.x86");
        public static Plan S3XLargeX86 { get; } = new Plan("s3.xlarge.x86");
        public static Plan T3SmallX86 { get; } = new Plan("t3.small.x86");
        public static Plan X2XLargeX86 { get; } = new Plan("x2.xlarge.x86");
        public static Plan X3XLargeX86 { get; } = new Plan("x3.xlarge.x86");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
