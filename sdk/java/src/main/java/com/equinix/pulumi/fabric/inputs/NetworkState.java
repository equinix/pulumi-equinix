// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.NetworkChangeArgs;
import com.equinix.pulumi.fabric.inputs.NetworkChangeLogArgs;
import com.equinix.pulumi.fabric.inputs.NetworkLocationArgs;
import com.equinix.pulumi.fabric.inputs.NetworkNotificationArgs;
import com.equinix.pulumi.fabric.inputs.NetworkOperationArgs;
import com.equinix.pulumi.fabric.inputs.NetworkProjectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkState Empty = new NetworkState();

    /**
     * Information on asset change operation
     * 
     */
    @Import(name="change")
    private @Nullable Output<NetworkChangeArgs> change;

    /**
     * @return Information on asset change operation
     * 
     */
    public Optional<Output<NetworkChangeArgs>> change() {
        return Optional.ofNullable(this.change);
    }

    /**
     * A permanent record of asset creation, modification, or deletion
     * 
     */
    @Import(name="changeLog")
    private @Nullable Output<NetworkChangeLogArgs> changeLog;

    /**
     * @return A permanent record of asset creation, modification, or deletion
     * 
     */
    public Optional<Output<NetworkChangeLogArgs>> changeLog() {
        return Optional.ofNullable(this.changeLog);
    }

    /**
     * Number of connections associated with this network
     * 
     */
    @Import(name="connectionsCount")
    private @Nullable Output<Integer> connectionsCount;

    /**
     * @return Number of connections associated with this network
     * 
     */
    public Optional<Output<Integer>> connectionsCount() {
        return Optional.ofNullable(this.connectionsCount);
    }

    /**
     * Fabric Network URI information
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Fabric Network URI information
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Fabric Network location
     * 
     */
    @Import(name="location")
    private @Nullable Output<NetworkLocationArgs> location;

    /**
     * @return Fabric Network location
     * 
     */
    public Optional<Output<NetworkLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<NetworkNotificationArgs>> notifications;

    /**
     * @return Preferences for notifications on Fabric Network configuration or status changes
     * 
     */
    public Optional<Output<List<NetworkNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * Network operation information that is associated with this Fabric Network
     * 
     */
    @Import(name="operation")
    private @Nullable Output<NetworkOperationArgs> operation;

    /**
     * @return Network operation information that is associated with this Fabric Network
     * 
     */
    public Optional<Output<NetworkOperationArgs>> operation() {
        return Optional.ofNullable(this.operation);
    }

    /**
     * Fabric Network project
     * 
     */
    @Import(name="project")
    private @Nullable Output<NetworkProjectArgs> project;

    /**
     * @return Fabric Network project
     * 
     */
    public Optional<Output<NetworkProjectArgs>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Fabric Network scope
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Fabric Network scope
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Fabric Network overall state
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Fabric Network overall state
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Supported Network types - EVPLAN, EPLAN, IPWAN
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned network identifier
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned network identifier
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private NetworkState() {}

    private NetworkState(NetworkState $) {
        this.change = $.change;
        this.changeLog = $.changeLog;
        this.connectionsCount = $.connectionsCount;
        this.href = $.href;
        this.location = $.location;
        this.name = $.name;
        this.notifications = $.notifications;
        this.operation = $.operation;
        this.project = $.project;
        this.scope = $.scope;
        this.state = $.state;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkState $;

        public Builder() {
            $ = new NetworkState();
        }

        public Builder(NetworkState defaults) {
            $ = new NetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param change Information on asset change operation
         * 
         * @return builder
         * 
         */
        public Builder change(@Nullable Output<NetworkChangeArgs> change) {
            $.change = change;
            return this;
        }

        /**
         * @param change Information on asset change operation
         * 
         * @return builder
         * 
         */
        public Builder change(NetworkChangeArgs change) {
            return change(Output.of(change));
        }

        /**
         * @param changeLog A permanent record of asset creation, modification, or deletion
         * 
         * @return builder
         * 
         */
        public Builder changeLog(@Nullable Output<NetworkChangeLogArgs> changeLog) {
            $.changeLog = changeLog;
            return this;
        }

        /**
         * @param changeLog A permanent record of asset creation, modification, or deletion
         * 
         * @return builder
         * 
         */
        public Builder changeLog(NetworkChangeLogArgs changeLog) {
            return changeLog(Output.of(changeLog));
        }

        /**
         * @param connectionsCount Number of connections associated with this network
         * 
         * @return builder
         * 
         */
        public Builder connectionsCount(@Nullable Output<Integer> connectionsCount) {
            $.connectionsCount = connectionsCount;
            return this;
        }

        /**
         * @param connectionsCount Number of connections associated with this network
         * 
         * @return builder
         * 
         */
        public Builder connectionsCount(Integer connectionsCount) {
            return connectionsCount(Output.of(connectionsCount));
        }

        /**
         * @param href Fabric Network URI information
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Fabric Network URI information
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param location Fabric Network location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<NetworkLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Fabric Network location
         * 
         * @return builder
         * 
         */
        public Builder location(NetworkLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param name Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<List<NetworkNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<NetworkNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(NetworkNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param operation Network operation information that is associated with this Fabric Network
         * 
         * @return builder
         * 
         */
        public Builder operation(@Nullable Output<NetworkOperationArgs> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation Network operation information that is associated with this Fabric Network
         * 
         * @return builder
         * 
         */
        public Builder operation(NetworkOperationArgs operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param project Fabric Network project
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<NetworkProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Fabric Network project
         * 
         * @return builder
         * 
         */
        public Builder project(NetworkProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Fabric Network scope
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Fabric Network scope
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param state Fabric Network overall state
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Fabric Network overall state
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type Supported Network types - EVPLAN, EPLAN, IPWAN
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Supported Network types - EVPLAN, EPLAN, IPWAN
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned network identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned network identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public NetworkState build() {
            return $;
        }
    }

}
