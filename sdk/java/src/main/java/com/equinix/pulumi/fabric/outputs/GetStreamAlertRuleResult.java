// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetStreamAlertRuleChangeLog;
import com.equinix.pulumi.fabric.outputs.GetStreamAlertRuleResourceSelector;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamAlertRuleResult {
    /**
     * @return The uuid of the stream alert rule
     * 
     */
    private String alertRuleId;
    /**
     * @return Details of the last change on the stream resource
     * 
     */
    private GetStreamAlertRuleChangeLog changeLog;
    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    private String criticalThreshold;
    /**
     * @return Customer-provided stream alert rule description
     * 
     */
    private String description;
    /**
     * @return Stream subscription enabled status
     * 
     */
    private Boolean enabled;
    /**
     * @return Equinix assigned URI of the stream alert rule resource
     * 
     */
    private String href;
    /**
     * @return The unique identifier of the resource
     * 
     */
    private String id;
    /**
     * @return Stream alert rule metric name
     * 
     */
    private String metricName;
    /**
     * @return Customer-provided stream alert rule name
     * 
     */
    private String name;
    /**
     * @return Stream alert rule metric operand
     * 
     */
    private String operand;
    /**
     * @return Lists of metrics to be included/excluded on the stream alert rule
     * 
     */
    private GetStreamAlertRuleResourceSelector resourceSelector;
    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    private String state;
    /**
     * @return The uuid of the stream that is the target of the stream alert rule
     * 
     */
    private String streamId;
    /**
     * @return Type of the stream alert rule
     * 
     */
    private String type;
    /**
     * @return Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    private String uuid;
    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    private String warningThreshold;
    /**
     * @return Stream alert rule metric window size
     * 
     */
    private String windowSize;

    private GetStreamAlertRuleResult() {}
    /**
     * @return The uuid of the stream alert rule
     * 
     */
    public String alertRuleId() {
        return this.alertRuleId;
    }
    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public GetStreamAlertRuleChangeLog changeLog() {
        return this.changeLog;
    }
    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    public String criticalThreshold() {
        return this.criticalThreshold;
    }
    /**
     * @return Customer-provided stream alert rule description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Stream subscription enabled status
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Equinix assigned URI of the stream alert rule resource
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The unique identifier of the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Stream alert rule metric name
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return Customer-provided stream alert rule name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Stream alert rule metric operand
     * 
     */
    public String operand() {
        return this.operand;
    }
    /**
     * @return Lists of metrics to be included/excluded on the stream alert rule
     * 
     */
    public GetStreamAlertRuleResourceSelector resourceSelector() {
        return this.resourceSelector;
    }
    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The uuid of the stream that is the target of the stream alert rule
     * 
     */
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return Type of the stream alert rule
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    public String warningThreshold() {
        return this.warningThreshold;
    }
    /**
     * @return Stream alert rule metric window size
     * 
     */
    public String windowSize() {
        return this.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamAlertRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertRuleId;
        private GetStreamAlertRuleChangeLog changeLog;
        private String criticalThreshold;
        private String description;
        private Boolean enabled;
        private String href;
        private String id;
        private String metricName;
        private String name;
        private String operand;
        private GetStreamAlertRuleResourceSelector resourceSelector;
        private String state;
        private String streamId;
        private String type;
        private String uuid;
        private String warningThreshold;
        private String windowSize;
        public Builder() {}
        public Builder(GetStreamAlertRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertRuleId = defaults.alertRuleId;
    	      this.changeLog = defaults.changeLog;
    	      this.criticalThreshold = defaults.criticalThreshold;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.metricName = defaults.metricName;
    	      this.name = defaults.name;
    	      this.operand = defaults.operand;
    	      this.resourceSelector = defaults.resourceSelector;
    	      this.state = defaults.state;
    	      this.streamId = defaults.streamId;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.warningThreshold = defaults.warningThreshold;
    	      this.windowSize = defaults.windowSize;
        }

        @CustomType.Setter
        public Builder alertRuleId(String alertRuleId) {
            if (alertRuleId == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "alertRuleId");
            }
            this.alertRuleId = alertRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder changeLog(GetStreamAlertRuleChangeLog changeLog) {
            if (changeLog == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "changeLog");
            }
            this.changeLog = changeLog;
            return this;
        }
        @CustomType.Setter
        public Builder criticalThreshold(String criticalThreshold) {
            if (criticalThreshold == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "criticalThreshold");
            }
            this.criticalThreshold = criticalThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            if (metricName == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "metricName");
            }
            this.metricName = metricName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder operand(String operand) {
            if (operand == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "operand");
            }
            this.operand = operand;
            return this;
        }
        @CustomType.Setter
        public Builder resourceSelector(GetStreamAlertRuleResourceSelector resourceSelector) {
            if (resourceSelector == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "resourceSelector");
            }
            this.resourceSelector = resourceSelector;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            if (streamId == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "streamId");
            }
            this.streamId = streamId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder warningThreshold(String warningThreshold) {
            if (warningThreshold == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "warningThreshold");
            }
            this.warningThreshold = warningThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder windowSize(String windowSize) {
            if (windowSize == null) {
              throw new MissingRequiredPropertyException("GetStreamAlertRuleResult", "windowSize");
            }
            this.windowSize = windowSize;
            return this;
        }
        public GetStreamAlertRuleResult build() {
            final var _resultValue = new GetStreamAlertRuleResult();
            _resultValue.alertRuleId = alertRuleId;
            _resultValue.changeLog = changeLog;
            _resultValue.criticalThreshold = criticalThreshold;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.href = href;
            _resultValue.id = id;
            _resultValue.metricName = metricName;
            _resultValue.name = name;
            _resultValue.operand = operand;
            _resultValue.resourceSelector = resourceSelector;
            _resultValue.state = state;
            _resultValue.streamId = streamId;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.warningThreshold = warningThreshold;
            _resultValue.windowSize = windowSize;
            return _resultValue;
        }
    }
}
