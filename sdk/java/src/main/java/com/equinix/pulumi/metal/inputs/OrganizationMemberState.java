// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationMemberState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationMemberState Empty = new OrganizationMemberState();

    /**
     * When the invitation was created (only known in the invitation stage)
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return When the invitation was created (only known in the invitation stage)
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * The userId of the user that sent the invitation (only known in the invitation stage)
     * 
     */
    @Import(name="invitedBy")
    private @Nullable Output<String> invitedBy;

    /**
     * @return The userId of the user that sent the invitation (only known in the invitation stage)
     * 
     */
    public Optional<Output<String>> invitedBy() {
        return Optional.ofNullable(this.invitedBy);
    }

    /**
     * The email address of the user to invite
     * 
     */
    @Import(name="invitee")
    private @Nullable Output<String> invitee;

    /**
     * @return The email address of the user to invite
     * 
     */
    public Optional<Output<String>> invitee() {
        return Optional.ofNullable(this.invitee);
    }

    /**
     * A message to include in the emailed invitation.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return A message to include in the emailed invitation.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The nonce for the invitation (only known in the invitation stage)
     * 
     */
    @Import(name="nonce")
    private @Nullable Output<String> nonce;

    /**
     * @return The nonce for the invitation (only known in the invitation stage)
     * 
     */
    public Optional<Output<String>> nonce() {
        return Optional.ofNullable(this.nonce);
    }

    /**
     * The organization to invite the user to
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return The organization to invite the user to
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * Project IDs the member has access to within the organization. If the member is an &#39;admin&#39;, the projects list should be empty.
     * 
     */
    @Import(name="projectsIds")
    private @Nullable Output<List<String>> projectsIds;

    /**
     * @return Project IDs the member has access to within the organization. If the member is an &#39;admin&#39;, the projects list should be empty.
     * 
     */
    public Optional<Output<List<String>>> projectsIds() {
        return Optional.ofNullable(this.projectsIds);
    }

    /**
     * Organization roles (admin, collaborator, limited_collaborator, billing)
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Organization roles (admin, collaborator, limited_collaborator, billing)
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The state of the membership (&#39;invited&#39; when an invitation is open, &#39;active&#39; when the user is an organization member)
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the membership (&#39;invited&#39; when an invitation is open, &#39;active&#39; when the user is an organization member)
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * When the invitation was updated (only known in the invitation stage)
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return When the invitation was updated (only known in the invitation stage)
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private OrganizationMemberState() {}

    private OrganizationMemberState(OrganizationMemberState $) {
        this.created = $.created;
        this.invitedBy = $.invitedBy;
        this.invitee = $.invitee;
        this.message = $.message;
        this.nonce = $.nonce;
        this.organizationId = $.organizationId;
        this.projectsIds = $.projectsIds;
        this.roles = $.roles;
        this.state = $.state;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationMemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationMemberState $;

        public Builder() {
            $ = new OrganizationMemberState();
        }

        public Builder(OrganizationMemberState defaults) {
            $ = new OrganizationMemberState(Objects.requireNonNull(defaults));
        }

        /**
         * @param created When the invitation was created (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When the invitation was created (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param invitedBy The userId of the user that sent the invitation (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder invitedBy(@Nullable Output<String> invitedBy) {
            $.invitedBy = invitedBy;
            return this;
        }

        /**
         * @param invitedBy The userId of the user that sent the invitation (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder invitedBy(String invitedBy) {
            return invitedBy(Output.of(invitedBy));
        }

        /**
         * @param invitee The email address of the user to invite
         * 
         * @return builder
         * 
         */
        public Builder invitee(@Nullable Output<String> invitee) {
            $.invitee = invitee;
            return this;
        }

        /**
         * @param invitee The email address of the user to invite
         * 
         * @return builder
         * 
         */
        public Builder invitee(String invitee) {
            return invitee(Output.of(invitee));
        }

        /**
         * @param message A message to include in the emailed invitation.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message A message to include in the emailed invitation.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param nonce The nonce for the invitation (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder nonce(@Nullable Output<String> nonce) {
            $.nonce = nonce;
            return this;
        }

        /**
         * @param nonce The nonce for the invitation (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder nonce(String nonce) {
            return nonce(Output.of(nonce));
        }

        /**
         * @param organizationId The organization to invite the user to
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The organization to invite the user to
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param projectsIds Project IDs the member has access to within the organization. If the member is an &#39;admin&#39;, the projects list should be empty.
         * 
         * @return builder
         * 
         */
        public Builder projectsIds(@Nullable Output<List<String>> projectsIds) {
            $.projectsIds = projectsIds;
            return this;
        }

        /**
         * @param projectsIds Project IDs the member has access to within the organization. If the member is an &#39;admin&#39;, the projects list should be empty.
         * 
         * @return builder
         * 
         */
        public Builder projectsIds(List<String> projectsIds) {
            return projectsIds(Output.of(projectsIds));
        }

        /**
         * @param projectsIds Project IDs the member has access to within the organization. If the member is an &#39;admin&#39;, the projects list should be empty.
         * 
         * @return builder
         * 
         */
        public Builder projectsIds(String... projectsIds) {
            return projectsIds(List.of(projectsIds));
        }

        /**
         * @param roles Organization roles (admin, collaborator, limited_collaborator, billing)
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Organization roles (admin, collaborator, limited_collaborator, billing)
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Organization roles (admin, collaborator, limited_collaborator, billing)
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param state The state of the membership (&#39;invited&#39; when an invitation is open, &#39;active&#39; when the user is an organization member)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the membership (&#39;invited&#39; when an invitation is open, &#39;active&#39; when the user is an organization member)
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param updated When the invitation was updated (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When the invitation was updated (only known in the invitation stage)
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public OrganizationMemberState build() {
            return $;
        }
    }

}
