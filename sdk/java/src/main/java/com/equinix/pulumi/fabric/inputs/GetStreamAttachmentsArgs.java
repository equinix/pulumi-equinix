// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentsFilterArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentsPaginationArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentsSortArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamAttachmentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamAttachmentsArgs Empty = new GetStreamAttachmentsArgs();

    /**
     * List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetStreamAttachmentsFilterArgs>> filters;

    /**
     * @return List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
     * 
     */
    public Optional<Output<List<GetStreamAttachmentsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Pagination details for the returned streams list
     * 
     */
    @Import(name="pagination", required=true)
    private Output<GetStreamAttachmentsPaginationArgs> pagination;

    /**
     * @return Pagination details for the returned streams list
     * 
     */
    public Output<GetStreamAttachmentsPaginationArgs> pagination() {
        return this.pagination;
    }

    /**
     * The list of sort criteria for the stream assets search request
     * 
     */
    @Import(name="sorts")
    private @Nullable Output<List<GetStreamAttachmentsSortArgs>> sorts;

    /**
     * @return The list of sort criteria for the stream assets search request
     * 
     */
    public Optional<Output<List<GetStreamAttachmentsSortArgs>>> sorts() {
        return Optional.ofNullable(this.sorts);
    }

    private GetStreamAttachmentsArgs() {}

    private GetStreamAttachmentsArgs(GetStreamAttachmentsArgs $) {
        this.filters = $.filters;
        this.pagination = $.pagination;
        this.sorts = $.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamAttachmentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamAttachmentsArgs $;

        public Builder() {
            $ = new GetStreamAttachmentsArgs();
        }

        public Builder(GetStreamAttachmentsArgs defaults) {
            $ = new GetStreamAttachmentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetStreamAttachmentsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetStreamAttachmentsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
         * 
         * @return builder
         * 
         */
        public Builder filters(GetStreamAttachmentsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param pagination Pagination details for the returned streams list
         * 
         * @return builder
         * 
         */
        public Builder pagination(Output<GetStreamAttachmentsPaginationArgs> pagination) {
            $.pagination = pagination;
            return this;
        }

        /**
         * @param pagination Pagination details for the returned streams list
         * 
         * @return builder
         * 
         */
        public Builder pagination(GetStreamAttachmentsPaginationArgs pagination) {
            return pagination(Output.of(pagination));
        }

        /**
         * @param sorts The list of sort criteria for the stream assets search request
         * 
         * @return builder
         * 
         */
        public Builder sorts(@Nullable Output<List<GetStreamAttachmentsSortArgs>> sorts) {
            $.sorts = sorts;
            return this;
        }

        /**
         * @param sorts The list of sort criteria for the stream assets search request
         * 
         * @return builder
         * 
         */
        public Builder sorts(List<GetStreamAttachmentsSortArgs> sorts) {
            return sorts(Output.of(sorts));
        }

        /**
         * @param sorts The list of sort criteria for the stream assets search request
         * 
         * @return builder
         * 
         */
        public Builder sorts(GetStreamAttachmentsSortArgs... sorts) {
            return sorts(List.of(sorts));
        }

        public GetStreamAttachmentsArgs build() {
            if ($.pagination == null) {
                throw new MissingRequiredPropertyException("GetStreamAttachmentsArgs", "pagination");
            }
            return $;
        }
    }

}
