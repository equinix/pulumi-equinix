// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.metal.PortArgs;
import com.equinix.pulumi.metal.inputs.PortState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
<<<<<<< HEAD
=======
 * ### equinix metal port hybrid bonded
>>>>>>> 667aad3 (add make command to build examples and examples in docs)
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Port;
 * import com.pulumi.equinix.metal.PortArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
<<<<<<< HEAD
 *         final var portId = config.get("portId").get();
 *         final var vlanId = config.get("vlanId").get();
 *         var port = new Port("port", PortArgs.builder()        
=======
 *         final var portId = config.get("portId");
 *         final var vlanId = config.get("vlanId");
 *         var port = new Port("port", PortArgs.builder()
>>>>>>> 667aad3 (add make command to build examples and examples in docs)
 *             .portId(portId)
 *             .bonded(true)
 *             .layer2(false)
 *             .vlanIds(vlanId)
 *             .build());
 * 
 *         ctx.export("portType", port.type());
 *         ctx.export("portBondedNetworkType", port.networkType());
 *     }
 * }
 * }
 * </pre>
<<<<<<< HEAD
=======
 * ### equinix metal port hybrid unbonded
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Port;
 * import com.pulumi.equinix.metal.PortArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var portId = config.get("portId");
 *         var port = new Port("port", PortArgs.builder()
 *             .portId(portId)
 *             .bonded(false)
 *             .build());
 * 
 *         ctx.export("portType", port.type());
 *     }
 * }
 * }
 * </pre>
 * ### equinix metal port layer2 bonded
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Port;
 * import com.pulumi.equinix.metal.PortArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var portId = config.get("portId");
 *         var port = new Port("port", PortArgs.builder()
 *             .portId(portId)
 *             .bonded(true)
 *             .layer2(true)
 *             .build());
 * 
 *         ctx.export("portType", port.type());
 *         ctx.export("portBondedNetworkType", port.networkType());
 *     }
 * }
 * }
 * </pre>
>>>>>>> 667aad3 (add make command to build examples and examples in docs)
 * 
 */
@ResourceType(type="equinix:metal/port:Port")
public class Port extends com.pulumi.resources.CustomResource {
    /**
     * UUID of the bond port.
     * 
     */
    @Export(name="bondId", refs={String.class}, tree="[0]")
    private Output<String> bondId;

    /**
     * @return UUID of the bond port.
     * 
     */
    public Output<String> bondId() {
        return this.bondId;
    }
    /**
     * Name of the bond port.
     * 
     */
    @Export(name="bondName", refs={String.class}, tree="[0]")
    private Output<String> bondName;

    /**
     * @return Name of the bond port.
     * 
     */
    public Output<String> bondName() {
        return this.bondName;
    }
    /**
     * Whether the port should be bonded.
     * 
     */
    @Export(name="bonded", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> bonded;

    /**
     * @return Whether the port should be bonded.
     * 
     */
    public Output<Boolean> bonded() {
        return this.bonded;
    }
    /**
     * Flag indicating whether the port can be removed from a bond.
     * 
     */
    @Export(name="disbondSupported", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disbondSupported;

    /**
     * @return Flag indicating whether the port can be removed from a bond.
     * 
     */
    public Output<Boolean> disbondSupported() {
        return this.disbondSupported;
    }
    /**
     * Whether to put the port to Layer 2 mode, valid only for bond ports.
     * 
     */
    @Export(name="layer2", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> layer2;

    /**
     * @return Whether to put the port to Layer 2 mode, valid only for bond ports.
     * 
     */
    public Output<Optional<Boolean>> layer2() {
        return Codegen.optional(this.layer2);
    }
    /**
     * MAC address of the port.
     * 
     */
    @Export(name="mac", refs={String.class}, tree="[0]")
    private Output<String> mac;

    /**
     * @return MAC address of the port.
     * 
     */
    public Output<String> mac() {
        return this.mac;
    }
    /**
     * Name of the port, e.g. `bond0` or `eth0`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the port, e.g. `bond0` or `eth0`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * UUID of a VLAN to assign as a native VLAN. It must be one of attached VLANs (from `vlan_ids` parameter).
     * 
     */
    @Export(name="nativeVlanId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nativeVlanId;

    /**
     * @return UUID of a VLAN to assign as a native VLAN. It must be one of attached VLANs (from `vlan_ids` parameter).
     * 
     */
    public Output<Optional<String>> nativeVlanId() {
        return Codegen.optional(this.nativeVlanId);
    }
    /**
     * One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This attribute is only set on bond ports.
     * 
     */
    @Export(name="networkType", refs={String.class}, tree="[0]")
    private Output<String> networkType;

    /**
     * @return One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This attribute is only set on bond ports.
     * 
     */
    public Output<String> networkType() {
        return this.networkType;
    }
    /**
     * ID of the port to read.
     * 
     */
    @Export(name="portId", refs={String.class}, tree="[0]")
    private Output<String> portId;

    /**
     * @return ID of the port to read.
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }
    /**
     * Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
     * 
     */
    @Export(name="resetOnDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> resetOnDelete;

    /**
     * @return Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
     * 
     */
    public Output<Optional<Boolean>> resetOnDelete() {
        return Codegen.optional(this.resetOnDelete);
    }
    /**
     * Type is either &#34;NetworkBondPort&#34; for bond ports or &#34;NetworkPort&#34; for bondable ethernet ports.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type is either &#34;NetworkBondPort&#34; for bond ports or &#34;NetworkPort&#34; for bondable ethernet ports.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid ports.
     * 
     */
    @Export(name="vlanIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> vlanIds;

    /**
     * @return List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid ports.
     * 
     */
    public Output<List<String>> vlanIds() {
        return this.vlanIds;
    }
    /**
     * List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid ports.
     * 
     */
    @Export(name="vxlanIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> vxlanIds;

    /**
     * @return List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid ports.
     * 
     */
    public Output<List<Integer>> vxlanIds() {
        return this.vxlanIds;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Port(String name) {
        this(name, PortArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Port(String name, PortArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Port(String name, PortArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/port:Port", name, args == null ? PortArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Port(String name, Output<String> id, @Nullable PortState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/port:Port", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Port get(String name, Output<String> id, @Nullable PortState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Port(name, id, state, options);
    }
}
