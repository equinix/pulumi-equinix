// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.metal.inputs;

import com.equinix.pulumi.equinix.metal.enums.BillingCycle;
import com.equinix.pulumi.equinix.metal.enums.Facility;
import com.equinix.pulumi.equinix.metal.enums.NetworkType;
import com.equinix.pulumi.equinix.metal.enums.OperatingSystem;
import com.equinix.pulumi.equinix.metal.enums.Plan;
import com.equinix.pulumi.equinix.metal.inputs.DeviceBehaviorArgs;
import com.equinix.pulumi.equinix.metal.inputs.DeviceIpAddressArgs;
import com.equinix.pulumi.equinix.metal.inputs.DeviceNetworkArgs;
import com.equinix.pulumi.equinix.metal.inputs.DevicePortArgs;
import com.equinix.pulumi.equinix.metal.inputs.DeviceReinstallArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceState extends com.pulumi.resources.ResourceArgs {

    public static final DeviceState Empty = new DeviceState();

    /**
     * The ipv4 private IP assigned to the device.
     * 
     */
    @Import(name="accessPrivateIpv4")
    private @Nullable Output<String> accessPrivateIpv4;

    /**
     * @return The ipv4 private IP assigned to the device.
     * 
     */
    public Optional<Output<String>> accessPrivateIpv4() {
        return Optional.ofNullable(this.accessPrivateIpv4);
    }

    /**
     * The ipv4 maintenance IP assigned to the device.
     * 
     */
    @Import(name="accessPublicIpv4")
    private @Nullable Output<String> accessPublicIpv4;

    /**
     * @return The ipv4 maintenance IP assigned to the device.
     * 
     */
    public Optional<Output<String>> accessPublicIpv4() {
        return Optional.ofNullable(this.accessPublicIpv4);
    }

    /**
     * The ipv6 maintenance IP assigned to the device.
     * 
     */
    @Import(name="accessPublicIpv6")
    private @Nullable Output<String> accessPublicIpv6;

    /**
     * @return The ipv6 maintenance IP assigned to the device.
     * 
     */
    public Optional<Output<String>> accessPublicIpv6() {
        return Optional.ofNullable(this.accessPublicIpv6);
    }

    /**
     * If true, a device with OS `custom_ipxe` will continue to boot via iPXE
     * on reboots.
     * 
     */
    @Import(name="alwaysPxe")
    private @Nullable Output<Boolean> alwaysPxe;

    /**
     * @return If true, a device with OS `custom_ipxe` will continue to boot via iPXE
     * on reboots.
     * 
     */
    public Optional<Output<Boolean>> alwaysPxe() {
        return Optional.ofNullable(this.alwaysPxe);
    }

    /**
     * Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.
     * 
     */
    @Import(name="behavior")
    private @Nullable Output<DeviceBehaviorArgs> behavior;

    /**
     * @return Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.
     * 
     */
    public Optional<Output<DeviceBehaviorArgs>> behavior() {
        return Optional.ofNullable(this.behavior);
    }

    /**
     * monthly or hourly
     * 
     */
    @Import(name="billingCycle")
    private @Nullable Output<Either<String,BillingCycle>> billingCycle;

    /**
     * @return monthly or hourly
     * 
     */
    public Optional<Output<Either<String,BillingCycle>>> billingCycle() {
        return Optional.ofNullable(this.billingCycle);
    }

    /**
     * The timestamp for when the device was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The timestamp for when the device was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;custom_data&#34;`, the device will be updated in-place instead of recreated.
     * 
     */
    @Import(name="customData")
    private @Nullable Output<String> customData;

    /**
     * @return A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;custom_data&#34;`, the device will be updated in-place instead of recreated.
     * 
     */
    public Optional<Output<String>> customData() {
        return Optional.ofNullable(this.customData);
    }

    /**
     * The facility where the device is deployed.
     * 
     */
    @Import(name="deployedFacility")
    private @Nullable Output<String> deployedFacility;

    /**
     * @return The facility where the device is deployed.
     * 
     */
    public Optional<Output<String>> deployedFacility() {
        return Optional.ofNullable(this.deployedFacility);
    }

    /**
     * ID of hardware reservation where this device was deployed.
     * It is useful when using the `next-available` hardware reservation.
     * 
     */
    @Import(name="deployedHardwareReservationId")
    private @Nullable Output<String> deployedHardwareReservationId;

    /**
     * @return ID of hardware reservation where this device was deployed.
     * It is useful when using the `next-available` hardware reservation.
     * 
     */
    public Optional<Output<String>> deployedHardwareReservationId() {
        return Optional.ofNullable(this.deployedHardwareReservationId);
    }

    /**
     * The device description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The device description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of facility codes with deployment preferences. Equinix Metal API will go
     * through the list and will deploy your device to first facility with free capacity. List items must
     * be facility codes or `any` (a wildcard). To find the facility code, visit
     * [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth
     * token in the top of the page and see JSON from the API response. Conflicts with `metro`.
     * 
     */
    @Import(name="facilities")
    private @Nullable Output<List<Either<String,Facility>>> facilities;

    /**
     * @return List of facility codes with deployment preferences. Equinix Metal API will go
     * through the list and will deploy your device to first facility with free capacity. List items must
     * be facility codes or `any` (a wildcard). To find the facility code, visit
     * [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth
     * token in the top of the page and see JSON from the API response. Conflicts with `metro`.
     * 
     */
    public Optional<Output<List<Either<String,Facility>>>> facilities() {
        return Optional.ofNullable(this.facilities);
    }

    /**
     * Delete device even if it has volumes attached. Only applies
     * for destroy action.
     * 
     */
    @Import(name="forceDetachVolumes")
    private @Nullable Output<Boolean> forceDetachVolumes;

    /**
     * @return Delete device even if it has volumes attached. Only applies
     * for destroy action.
     * 
     */
    public Optional<Output<Boolean>> forceDetachVolumes() {
        return Optional.ofNullable(this.forceDetachVolumes);
    }

    /**
     * The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your
     * next available reservation automatically
     * 
     */
    @Import(name="hardwareReservationId")
    private @Nullable Output<String> hardwareReservationId;

    /**
     * @return The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your
     * next available reservation automatically
     * 
     */
    public Optional<Output<String>> hardwareReservationId() {
        return Optional.ofNullable(this.hardwareReservationId);
    }

    /**
     * The device hostname used in deployments taking advantage of Layer3 DHCP
     * or metadata service configuration.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The device hostname used in deployments taking advantage of Layer3 DHCP
     * or metadata service configuration.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * A list of IP address types for the device. See
     * IP address below for more details.
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<DeviceIpAddressArgs>> ipAddresses;

    /**
     * @return A list of IP address types for the device. See
     * IP address below for more details.
     * 
     */
    public Optional<Output<List<DeviceIpAddressArgs>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * URL pointing to a hosted iPXE script. More information is in the
     * [Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.
     * 
     */
    @Import(name="ipxeScriptUrl")
    private @Nullable Output<String> ipxeScriptUrl;

    /**
     * @return URL pointing to a hosted iPXE script. More information is in the
     * [Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.
     * 
     */
    public Optional<Output<String>> ipxeScriptUrl() {
        return Optional.ofNullable(this.ipxeScriptUrl);
    }

    /**
     * Whether the device is locked.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Whether the device is locked.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Metro area for the new device. Conflicts with `facilities`.
     * 
     */
    @Import(name="metro")
    private @Nullable Output<String> metro;

    /**
     * @return Metro area for the new device. Conflicts with `facilities`.
     * 
     */
    public Optional<Output<String>> metro() {
        return Optional.ofNullable(this.metro);
    }

    /**
     * (Deprecated) Network type of a device, used in
     * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
     * attribute is deprecated you should handle Network Type with one of
     * equinix_metal_port,
     * equinix.metal.DeviceNetworkType resources or
     * equinix.metal.Port datasource.
     * See network_types guide for more info.
     * 
     * @deprecated
     * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
     * 
     */
    @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
    @Import(name="networkType")
    private @Nullable Output<Either<String,NetworkType>> networkType;

    /**
     * @return (Deprecated) Network type of a device, used in
     * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
     * attribute is deprecated you should handle Network Type with one of
     * equinix_metal_port,
     * equinix.metal.DeviceNetworkType resources or
     * equinix.metal.Port datasource.
     * See network_types guide for more info.
     * 
     * @deprecated
     * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
     * 
     */
    @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
    public Optional<Output<Either<String,NetworkType>>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The device&#39;s private and public IP (v4 and v6) network details. See
     * Network Attribute below for more details.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<DeviceNetworkArgs>> networks;

    /**
     * @return The device&#39;s private and public IP (v4 and v6) network details. See
     * Network Attribute below for more details.
     * 
     */
    public Optional<Output<List<DeviceNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * The operating system slug. To find the slug, or visit
     * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
     * API auth token in the top of the page and see JSON from the API response.
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<Either<String,OperatingSystem>> operatingSystem;

    /**
     * @return The operating system slug. To find the slug, or visit
     * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
     * API auth token in the top of the page and see JSON from the API response.
     * 
     */
    public Optional<Output<Either<String,OperatingSystem>>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * The device plan slug. To find the plan slug, visit
     * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
     * top of the page and see JSON from the API response.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<Either<String,Plan>> plan;

    /**
     * @return The device plan slug. To find the plan slug, visit
     * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
     * top of the page and see JSON from the API response.
     * 
     */
    public Optional<Output<Either<String,Plan>>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * List of ports assigned to the device. See Ports Attribute below for
     * more details.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<DevicePortArgs>> ports;

    /**
     * @return List of ports assigned to the device. See Ports Attribute below for
     * more details.
     * 
     */
    public Optional<Output<List<DevicePortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The ID of the project in which to create the device
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project in which to create the device
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Array of IDs of the project SSH keys which should be added to the device.
     * If you omit this, SSH keys of all the members of the parent project will be added to the device. If
     * you specify this array, only the listed project SSH keys will be added. Project SSH keys can be
     * created with the equinix.metal.ProjectSshKey resource.
     * 
     */
    @Import(name="projectSshKeyIds")
    private @Nullable Output<List<String>> projectSshKeyIds;

    /**
     * @return Array of IDs of the project SSH keys which should be added to the device.
     * If you omit this, SSH keys of all the members of the parent project will be added to the device. If
     * you specify this array, only the listed project SSH keys will be added. Project SSH keys can be
     * created with the equinix.metal.ProjectSshKey resource.
     * 
     */
    public Optional<Output<List<String>>> projectSshKeyIds() {
        return Optional.ofNullable(this.projectSshKeyIds);
    }

    /**
     * Whether the device should be reinstalled instead of destroyed when
     * modifying user_data, custom_data, or operating system. See Reinstall below for more
     * details.
     * 
     */
    @Import(name="reinstall")
    private @Nullable Output<DeviceReinstallArgs> reinstall;

    /**
     * @return Whether the device should be reinstalled instead of destroyed when
     * modifying user_data, custom_data, or operating system. See Reinstall below for more
     * details.
     * 
     */
    public Optional<Output<DeviceReinstallArgs>> reinstall() {
        return Optional.ofNullable(this.reinstall);
    }

    /**
     * Root password to the server (disabled after 24 hours).
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    /**
     * @return Root password to the server (disabled after 24 hours).
     * 
     */
    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.
     * 
     */
    @Import(name="sshKeyIds")
    private @Nullable Output<List<String>> sshKeyIds;

    /**
     * @return List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.
     * 
     */
    public Optional<Output<List<String>>> sshKeyIds() {
        return Optional.ofNullable(this.sshKeyIds);
    }

    /**
     * The status of the device.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The status of the device.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * JSON for custom partitioning. Only usable on reserved hardware. More
     * information in in the
     * [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)
     * doc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can
     * be a number string, or size notation string, e.g. &#34;4G&#34; or &#34;8M&#34; (for gigabytes and megabytes).
     * 
     */
    @Import(name="storage")
    private @Nullable Output<String> storage;

    /**
     * @return JSON for custom partitioning. Only usable on reserved hardware. More
     * information in in the
     * [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)
     * doc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can
     * be a number string, or size notation string, e.g. &#34;4G&#34; or &#34;8M&#34; (for gigabytes and megabytes).
     * 
     */
    public Optional<Output<String>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * Tags attached to the device.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags attached to the device.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.
     * If you don&#39;t supply timezone info, timestamp is assumed to be in UTC.
     * 
     */
    @Import(name="terminationTime")
    private @Nullable Output<String> terminationTime;

    /**
     * @return Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.
     * If you don&#39;t supply timezone info, timestamp is assumed to be in UTC.
     * 
     */
    public Optional<Output<String>> terminationTime() {
        return Optional.ofNullable(this.terminationTime);
    }

    /**
     * The timestamp for the last time the device was updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return The timestamp for the last time the device was updated.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;user_data&#34;`, the device will be updated in-place instead of recreated.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;user_data&#34;`, the device will be updated in-place instead of recreated.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource
     * 
     */
    @Import(name="userSshKeyIds")
    private @Nullable Output<List<String>> userSshKeyIds;

    /**
     * @return Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource
     * 
     */
    public Optional<Output<List<String>>> userSshKeyIds() {
        return Optional.ofNullable(this.userSshKeyIds);
    }

    /**
     * Only used for devices in reserved hardware. If
     * set, the deletion of this device will block until the hardware reservation is marked provisionable
     * (about 4 minutes in August 2019).
     * 
     */
    @Import(name="waitForReservationDeprovision")
    private @Nullable Output<Boolean> waitForReservationDeprovision;

    /**
     * @return Only used for devices in reserved hardware. If
     * set, the deletion of this device will block until the hardware reservation is marked provisionable
     * (about 4 minutes in August 2019).
     * 
     */
    public Optional<Output<Boolean>> waitForReservationDeprovision() {
        return Optional.ofNullable(this.waitForReservationDeprovision);
    }

    private DeviceState() {}

    private DeviceState(DeviceState $) {
        this.accessPrivateIpv4 = $.accessPrivateIpv4;
        this.accessPublicIpv4 = $.accessPublicIpv4;
        this.accessPublicIpv6 = $.accessPublicIpv6;
        this.alwaysPxe = $.alwaysPxe;
        this.behavior = $.behavior;
        this.billingCycle = $.billingCycle;
        this.created = $.created;
        this.customData = $.customData;
        this.deployedFacility = $.deployedFacility;
        this.deployedHardwareReservationId = $.deployedHardwareReservationId;
        this.description = $.description;
        this.facilities = $.facilities;
        this.forceDetachVolumes = $.forceDetachVolumes;
        this.hardwareReservationId = $.hardwareReservationId;
        this.hostname = $.hostname;
        this.ipAddresses = $.ipAddresses;
        this.ipxeScriptUrl = $.ipxeScriptUrl;
        this.locked = $.locked;
        this.metro = $.metro;
        this.networkType = $.networkType;
        this.networks = $.networks;
        this.operatingSystem = $.operatingSystem;
        this.plan = $.plan;
        this.ports = $.ports;
        this.projectId = $.projectId;
        this.projectSshKeyIds = $.projectSshKeyIds;
        this.reinstall = $.reinstall;
        this.rootPassword = $.rootPassword;
        this.sshKeyIds = $.sshKeyIds;
        this.state = $.state;
        this.storage = $.storage;
        this.tags = $.tags;
        this.terminationTime = $.terminationTime;
        this.updated = $.updated;
        this.userData = $.userData;
        this.userSshKeyIds = $.userSshKeyIds;
        this.waitForReservationDeprovision = $.waitForReservationDeprovision;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceState $;

        public Builder() {
            $ = new DeviceState();
        }

        public Builder(DeviceState defaults) {
            $ = new DeviceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPrivateIpv4 The ipv4 private IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPrivateIpv4(@Nullable Output<String> accessPrivateIpv4) {
            $.accessPrivateIpv4 = accessPrivateIpv4;
            return this;
        }

        /**
         * @param accessPrivateIpv4 The ipv4 private IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPrivateIpv4(String accessPrivateIpv4) {
            return accessPrivateIpv4(Output.of(accessPrivateIpv4));
        }

        /**
         * @param accessPublicIpv4 The ipv4 maintenance IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPublicIpv4(@Nullable Output<String> accessPublicIpv4) {
            $.accessPublicIpv4 = accessPublicIpv4;
            return this;
        }

        /**
         * @param accessPublicIpv4 The ipv4 maintenance IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPublicIpv4(String accessPublicIpv4) {
            return accessPublicIpv4(Output.of(accessPublicIpv4));
        }

        /**
         * @param accessPublicIpv6 The ipv6 maintenance IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPublicIpv6(@Nullable Output<String> accessPublicIpv6) {
            $.accessPublicIpv6 = accessPublicIpv6;
            return this;
        }

        /**
         * @param accessPublicIpv6 The ipv6 maintenance IP assigned to the device.
         * 
         * @return builder
         * 
         */
        public Builder accessPublicIpv6(String accessPublicIpv6) {
            return accessPublicIpv6(Output.of(accessPublicIpv6));
        }

        /**
         * @param alwaysPxe If true, a device with OS `custom_ipxe` will continue to boot via iPXE
         * on reboots.
         * 
         * @return builder
         * 
         */
        public Builder alwaysPxe(@Nullable Output<Boolean> alwaysPxe) {
            $.alwaysPxe = alwaysPxe;
            return this;
        }

        /**
         * @param alwaysPxe If true, a device with OS `custom_ipxe` will continue to boot via iPXE
         * on reboots.
         * 
         * @return builder
         * 
         */
        public Builder alwaysPxe(Boolean alwaysPxe) {
            return alwaysPxe(Output.of(alwaysPxe));
        }

        /**
         * @param behavior Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.
         * 
         * @return builder
         * 
         */
        public Builder behavior(@Nullable Output<DeviceBehaviorArgs> behavior) {
            $.behavior = behavior;
            return this;
        }

        /**
         * @param behavior Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.
         * 
         * @return builder
         * 
         */
        public Builder behavior(DeviceBehaviorArgs behavior) {
            return behavior(Output.of(behavior));
        }

        /**
         * @param billingCycle monthly or hourly
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(@Nullable Output<Either<String,BillingCycle>> billingCycle) {
            $.billingCycle = billingCycle;
            return this;
        }

        /**
         * @param billingCycle monthly or hourly
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(Either<String,BillingCycle> billingCycle) {
            return billingCycle(Output.of(billingCycle));
        }

        /**
         * @param billingCycle monthly or hourly
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(String billingCycle) {
            return billingCycle(Either.ofLeft(billingCycle));
        }

        /**
         * @param billingCycle monthly or hourly
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(BillingCycle billingCycle) {
            return billingCycle(Either.ofRight(billingCycle));
        }

        /**
         * @param created The timestamp for when the device was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The timestamp for when the device was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param customData A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;custom_data&#34;`, the device will be updated in-place instead of recreated.
         * 
         * @return builder
         * 
         */
        public Builder customData(@Nullable Output<String> customData) {
            $.customData = customData;
            return this;
        }

        /**
         * @param customData A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;custom_data&#34;`, the device will be updated in-place instead of recreated.
         * 
         * @return builder
         * 
         */
        public Builder customData(String customData) {
            return customData(Output.of(customData));
        }

        /**
         * @param deployedFacility The facility where the device is deployed.
         * 
         * @return builder
         * 
         */
        public Builder deployedFacility(@Nullable Output<String> deployedFacility) {
            $.deployedFacility = deployedFacility;
            return this;
        }

        /**
         * @param deployedFacility The facility where the device is deployed.
         * 
         * @return builder
         * 
         */
        public Builder deployedFacility(String deployedFacility) {
            return deployedFacility(Output.of(deployedFacility));
        }

        /**
         * @param deployedHardwareReservationId ID of hardware reservation where this device was deployed.
         * It is useful when using the `next-available` hardware reservation.
         * 
         * @return builder
         * 
         */
        public Builder deployedHardwareReservationId(@Nullable Output<String> deployedHardwareReservationId) {
            $.deployedHardwareReservationId = deployedHardwareReservationId;
            return this;
        }

        /**
         * @param deployedHardwareReservationId ID of hardware reservation where this device was deployed.
         * It is useful when using the `next-available` hardware reservation.
         * 
         * @return builder
         * 
         */
        public Builder deployedHardwareReservationId(String deployedHardwareReservationId) {
            return deployedHardwareReservationId(Output.of(deployedHardwareReservationId));
        }

        /**
         * @param description The device description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The device description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param facilities List of facility codes with deployment preferences. Equinix Metal API will go
         * through the list and will deploy your device to first facility with free capacity. List items must
         * be facility codes or `any` (a wildcard). To find the facility code, visit
         * [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth
         * token in the top of the page and see JSON from the API response. Conflicts with `metro`.
         * 
         * @return builder
         * 
         */
        public Builder facilities(@Nullable Output<List<Either<String,Facility>>> facilities) {
            $.facilities = facilities;
            return this;
        }

        /**
         * @param facilities List of facility codes with deployment preferences. Equinix Metal API will go
         * through the list and will deploy your device to first facility with free capacity. List items must
         * be facility codes or `any` (a wildcard). To find the facility code, visit
         * [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth
         * token in the top of the page and see JSON from the API response. Conflicts with `metro`.
         * 
         * @return builder
         * 
         */
        public Builder facilities(List<Either<String,Facility>> facilities) {
            return facilities(Output.of(facilities));
        }

        /**
         * @param facilities List of facility codes with deployment preferences. Equinix Metal API will go
         * through the list and will deploy your device to first facility with free capacity. List items must
         * be facility codes or `any` (a wildcard). To find the facility code, visit
         * [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth
         * token in the top of the page and see JSON from the API response. Conflicts with `metro`.
         * 
         * @return builder
         * 
         */
        public Builder facilities(Either<String,Facility>... facilities) {
            return facilities(List.of(facilities));
        }

        /**
         * @param forceDetachVolumes Delete device even if it has volumes attached. Only applies
         * for destroy action.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachVolumes(@Nullable Output<Boolean> forceDetachVolumes) {
            $.forceDetachVolumes = forceDetachVolumes;
            return this;
        }

        /**
         * @param forceDetachVolumes Delete device even if it has volumes attached. Only applies
         * for destroy action.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachVolumes(Boolean forceDetachVolumes) {
            return forceDetachVolumes(Output.of(forceDetachVolumes));
        }

        /**
         * @param hardwareReservationId The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your
         * next available reservation automatically
         * 
         * @return builder
         * 
         */
        public Builder hardwareReservationId(@Nullable Output<String> hardwareReservationId) {
            $.hardwareReservationId = hardwareReservationId;
            return this;
        }

        /**
         * @param hardwareReservationId The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your
         * next available reservation automatically
         * 
         * @return builder
         * 
         */
        public Builder hardwareReservationId(String hardwareReservationId) {
            return hardwareReservationId(Output.of(hardwareReservationId));
        }

        /**
         * @param hostname The device hostname used in deployments taking advantage of Layer3 DHCP
         * or metadata service configuration.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The device hostname used in deployments taking advantage of Layer3 DHCP
         * or metadata service configuration.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ipAddresses A list of IP address types for the device. See
         * IP address below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<List<DeviceIpAddressArgs>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses A list of IP address types for the device. See
         * IP address below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<DeviceIpAddressArgs> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param ipAddresses A list of IP address types for the device. See
         * IP address below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(DeviceIpAddressArgs... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param ipxeScriptUrl URL pointing to a hosted iPXE script. More information is in the
         * [Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.
         * 
         * @return builder
         * 
         */
        public Builder ipxeScriptUrl(@Nullable Output<String> ipxeScriptUrl) {
            $.ipxeScriptUrl = ipxeScriptUrl;
            return this;
        }

        /**
         * @param ipxeScriptUrl URL pointing to a hosted iPXE script. More information is in the
         * [Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.
         * 
         * @return builder
         * 
         */
        public Builder ipxeScriptUrl(String ipxeScriptUrl) {
            return ipxeScriptUrl(Output.of(ipxeScriptUrl));
        }

        /**
         * @param locked Whether the device is locked.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Whether the device is locked.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param metro Metro area for the new device. Conflicts with `facilities`.
         * 
         * @return builder
         * 
         */
        public Builder metro(@Nullable Output<String> metro) {
            $.metro = metro;
            return this;
        }

        /**
         * @param metro Metro area for the new device. Conflicts with `facilities`.
         * 
         * @return builder
         * 
         */
        public Builder metro(String metro) {
            return metro(Output.of(metro));
        }

        /**
         * @param networkType (Deprecated) Network type of a device, used in
         * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
         * attribute is deprecated you should handle Network Type with one of
         * equinix_metal_port,
         * equinix.metal.DeviceNetworkType resources or
         * equinix.metal.Port datasource.
         * See network_types guide for more info.
         * 
         * @return builder
         * 
         * @deprecated
         * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
         * 
         */
        @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
        public Builder networkType(@Nullable Output<Either<String,NetworkType>> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType (Deprecated) Network type of a device, used in
         * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
         * attribute is deprecated you should handle Network Type with one of
         * equinix_metal_port,
         * equinix.metal.DeviceNetworkType resources or
         * equinix.metal.Port datasource.
         * See network_types guide for more info.
         * 
         * @return builder
         * 
         * @deprecated
         * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
         * 
         */
        @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
        public Builder networkType(Either<String,NetworkType> networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param networkType (Deprecated) Network type of a device, used in
         * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
         * attribute is deprecated you should handle Network Type with one of
         * equinix_metal_port,
         * equinix.metal.DeviceNetworkType resources or
         * equinix.metal.Port datasource.
         * See network_types guide for more info.
         * 
         * @return builder
         * 
         * @deprecated
         * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
         * 
         */
        @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
        public Builder networkType(String networkType) {
            return networkType(Either.ofLeft(networkType));
        }

        /**
         * @param networkType (Deprecated) Network type of a device, used in
         * [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this
         * attribute is deprecated you should handle Network Type with one of
         * equinix_metal_port,
         * equinix.metal.DeviceNetworkType resources or
         * equinix.metal.Port datasource.
         * See network_types guide for more info.
         * 
         * @return builder
         * 
         * @deprecated
         * You should handle Network Type with one of &#39;equinix_metal_port&#39; or &#39;equinix_metal_device_network_type&#39; resources. See section &#39;Guides&#39; for more info
         * 
         */
        @Deprecated /* You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info */
        public Builder networkType(NetworkType networkType) {
            return networkType(Either.ofRight(networkType));
        }

        /**
         * @param networks The device&#39;s private and public IP (v4 and v6) network details. See
         * Network Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<DeviceNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks The device&#39;s private and public IP (v4 and v6) network details. See
         * Network Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<DeviceNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks The device&#39;s private and public IP (v4 and v6) network details. See
         * Network Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder networks(DeviceNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param operatingSystem The operating system slug. To find the slug, or visit
         * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
         * API auth token in the top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<Either<String,OperatingSystem>> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem The operating system slug. To find the slug, or visit
         * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
         * API auth token in the top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(Either<String,OperatingSystem> operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param operatingSystem The operating system slug. To find the slug, or visit
         * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
         * API auth token in the top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(String operatingSystem) {
            return operatingSystem(Either.ofLeft(operatingSystem));
        }

        /**
         * @param operatingSystem The operating system slug. To find the slug, or visit
         * [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your
         * API auth token in the top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(OperatingSystem operatingSystem) {
            return operatingSystem(Either.ofRight(operatingSystem));
        }

        /**
         * @param plan The device plan slug. To find the plan slug, visit
         * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
         * top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<Either<String,Plan>> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The device plan slug. To find the plan slug, visit
         * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
         * top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder plan(Either<String,Plan> plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param plan The device plan slug. To find the plan slug, visit
         * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
         * top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Either.ofLeft(plan));
        }

        /**
         * @param plan The device plan slug. To find the plan slug, visit
         * [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the
         * top of the page and see JSON from the API response.
         * 
         * @return builder
         * 
         */
        public Builder plan(Plan plan) {
            return plan(Either.ofRight(plan));
        }

        /**
         * @param ports List of ports assigned to the device. See Ports Attribute below for
         * more details.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<DevicePortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports List of ports assigned to the device. See Ports Attribute below for
         * more details.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<DevicePortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports List of ports assigned to the device. See Ports Attribute below for
         * more details.
         * 
         * @return builder
         * 
         */
        public Builder ports(DevicePortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param projectId The ID of the project in which to create the device
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project in which to create the device
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param projectSshKeyIds Array of IDs of the project SSH keys which should be added to the device.
         * If you omit this, SSH keys of all the members of the parent project will be added to the device. If
         * you specify this array, only the listed project SSH keys will be added. Project SSH keys can be
         * created with the equinix.metal.ProjectSshKey resource.
         * 
         * @return builder
         * 
         */
        public Builder projectSshKeyIds(@Nullable Output<List<String>> projectSshKeyIds) {
            $.projectSshKeyIds = projectSshKeyIds;
            return this;
        }

        /**
         * @param projectSshKeyIds Array of IDs of the project SSH keys which should be added to the device.
         * If you omit this, SSH keys of all the members of the parent project will be added to the device. If
         * you specify this array, only the listed project SSH keys will be added. Project SSH keys can be
         * created with the equinix.metal.ProjectSshKey resource.
         * 
         * @return builder
         * 
         */
        public Builder projectSshKeyIds(List<String> projectSshKeyIds) {
            return projectSshKeyIds(Output.of(projectSshKeyIds));
        }

        /**
         * @param projectSshKeyIds Array of IDs of the project SSH keys which should be added to the device.
         * If you omit this, SSH keys of all the members of the parent project will be added to the device. If
         * you specify this array, only the listed project SSH keys will be added. Project SSH keys can be
         * created with the equinix.metal.ProjectSshKey resource.
         * 
         * @return builder
         * 
         */
        public Builder projectSshKeyIds(String... projectSshKeyIds) {
            return projectSshKeyIds(List.of(projectSshKeyIds));
        }

        /**
         * @param reinstall Whether the device should be reinstalled instead of destroyed when
         * modifying user_data, custom_data, or operating system. See Reinstall below for more
         * details.
         * 
         * @return builder
         * 
         */
        public Builder reinstall(@Nullable Output<DeviceReinstallArgs> reinstall) {
            $.reinstall = reinstall;
            return this;
        }

        /**
         * @param reinstall Whether the device should be reinstalled instead of destroyed when
         * modifying user_data, custom_data, or operating system. See Reinstall below for more
         * details.
         * 
         * @return builder
         * 
         */
        public Builder reinstall(DeviceReinstallArgs reinstall) {
            return reinstall(Output.of(reinstall));
        }

        /**
         * @param rootPassword Root password to the server (disabled after 24 hours).
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        /**
         * @param rootPassword Root password to the server (disabled after 24 hours).
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        /**
         * @param sshKeyIds List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(@Nullable Output<List<String>> sshKeyIds) {
            $.sshKeyIds = sshKeyIds;
            return this;
        }

        /**
         * @param sshKeyIds List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(List<String> sshKeyIds) {
            return sshKeyIds(Output.of(sshKeyIds));
        }

        /**
         * @param sshKeyIds List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(String... sshKeyIds) {
            return sshKeyIds(List.of(sshKeyIds));
        }

        /**
         * @param state The status of the device.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The status of the device.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storage JSON for custom partitioning. Only usable on reserved hardware. More
         * information in in the
         * [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)
         * doc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can
         * be a number string, or size notation string, e.g. &#34;4G&#34; or &#34;8M&#34; (for gigabytes and megabytes).
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<String> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage JSON for custom partitioning. Only usable on reserved hardware. More
         * information in in the
         * [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)
         * doc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can
         * be a number string, or size notation string, e.g. &#34;4G&#34; or &#34;8M&#34; (for gigabytes and megabytes).
         * 
         * @return builder
         * 
         */
        public Builder storage(String storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param tags Tags attached to the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags attached to the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags attached to the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param terminationTime Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.
         * If you don&#39;t supply timezone info, timestamp is assumed to be in UTC.
         * 
         * @return builder
         * 
         */
        public Builder terminationTime(@Nullable Output<String> terminationTime) {
            $.terminationTime = terminationTime;
            return this;
        }

        /**
         * @param terminationTime Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.
         * If you don&#39;t supply timezone info, timestamp is assumed to be in UTC.
         * 
         * @return builder
         * 
         */
        public Builder terminationTime(String terminationTime) {
            return terminationTime(Output.of(terminationTime));
        }

        /**
         * @param updated The timestamp for the last time the device was updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated The timestamp for the last time the device was updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param userData A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;user_data&#34;`, the device will be updated in-place instead of recreated.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `&#34;user_data&#34;`, the device will be updated in-place instead of recreated.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param userSshKeyIds Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource
         * 
         * @return builder
         * 
         */
        public Builder userSshKeyIds(@Nullable Output<List<String>> userSshKeyIds) {
            $.userSshKeyIds = userSshKeyIds;
            return this;
        }

        /**
         * @param userSshKeyIds Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource
         * 
         * @return builder
         * 
         */
        public Builder userSshKeyIds(List<String> userSshKeyIds) {
            return userSshKeyIds(Output.of(userSshKeyIds));
        }

        /**
         * @param userSshKeyIds Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource
         * 
         * @return builder
         * 
         */
        public Builder userSshKeyIds(String... userSshKeyIds) {
            return userSshKeyIds(List.of(userSshKeyIds));
        }

        /**
         * @param waitForReservationDeprovision Only used for devices in reserved hardware. If
         * set, the deletion of this device will block until the hardware reservation is marked provisionable
         * (about 4 minutes in August 2019).
         * 
         * @return builder
         * 
         */
        public Builder waitForReservationDeprovision(@Nullable Output<Boolean> waitForReservationDeprovision) {
            $.waitForReservationDeprovision = waitForReservationDeprovision;
            return this;
        }

        /**
         * @param waitForReservationDeprovision Only used for devices in reserved hardware. If
         * set, the deletion of this device will block until the hardware reservation is marked provisionable
         * (about 4 minutes in August 2019).
         * 
         * @return builder
         * 
         */
        public Builder waitForReservationDeprovision(Boolean waitForReservationDeprovision) {
            return waitForReservationDeprovision(Output.of(waitForReservationDeprovision));
        }

        public DeviceState build() {
            return $;
        }
    }

}
