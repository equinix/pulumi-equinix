// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetPortAccount;
import com.equinix.pulumi.fabric.outputs.GetPortChangeLog;
import com.equinix.pulumi.fabric.outputs.GetPortDevice;
import com.equinix.pulumi.fabric.outputs.GetPortEncapsulation;
import com.equinix.pulumi.fabric.outputs.GetPortLag;
import com.equinix.pulumi.fabric.outputs.GetPortLocation;
import com.equinix.pulumi.fabric.outputs.GetPortOperation;
import com.equinix.pulumi.fabric.outputs.GetPortRedundancy;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPortResult {
    /**
     * @return Customer account information that is associated with this port
     * 
     */
    private GetPortAccount account;
    /**
     * @return Port available bandwidth in Mbps
     * 
     */
    private Integer availableBandwidth;
    /**
     * @return Port bandwidth in Mbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Captures port lifecycle change information
     * 
     */
    private GetPortChangeLog changeLog;
    /**
     * @return Port description
     * 
     */
    private String description;
    /**
     * @return Port device
     * 
     */
    private GetPortDevice device;
    /**
     * @return Port encapsulation protocol
     * 
     */
    private GetPortEncapsulation encapsulation;
    /**
     * @return Port URI information
     * 
     */
    private String href;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Port Lag
     * 
     */
    private GetPortLag lag;
    /**
     * @return Port location information
     * 
     */
    private GetPortLocation location;
    /**
     * @return Port name
     * 
     */
    private String name;
    /**
     * @return Port specific operational data
     * 
     */
    private GetPortOperation operation;
    /**
     * @return Port redundancy information
     * 
     */
    private GetPortRedundancy redundancy;
    /**
     * @return Port service type
     * 
     */
    private String serviceType;
    /**
     * @return Port state
     * 
     */
    private String state;
    /**
     * @return Port type
     * 
     */
    private String type;
    /**
     * @return Port used bandwidth in Mbps
     * 
     */
    private Integer usedBandwidth;
    /**
     * @return Equinix-assigned port identifier
     * 
     */
    private String uuid;

    private GetPortResult() {}
    /**
     * @return Customer account information that is associated with this port
     * 
     */
    public GetPortAccount account() {
        return this.account;
    }
    /**
     * @return Port available bandwidth in Mbps
     * 
     */
    public Integer availableBandwidth() {
        return this.availableBandwidth;
    }
    /**
     * @return Port bandwidth in Mbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Captures port lifecycle change information
     * 
     */
    public GetPortChangeLog changeLog() {
        return this.changeLog;
    }
    /**
     * @return Port description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Port device
     * 
     */
    public GetPortDevice device() {
        return this.device;
    }
    /**
     * @return Port encapsulation protocol
     * 
     */
    public GetPortEncapsulation encapsulation() {
        return this.encapsulation;
    }
    /**
     * @return Port URI information
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Port Lag
     * 
     */
    public GetPortLag lag() {
        return this.lag;
    }
    /**
     * @return Port location information
     * 
     */
    public GetPortLocation location() {
        return this.location;
    }
    /**
     * @return Port name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Port specific operational data
     * 
     */
    public GetPortOperation operation() {
        return this.operation;
    }
    /**
     * @return Port redundancy information
     * 
     */
    public GetPortRedundancy redundancy() {
        return this.redundancy;
    }
    /**
     * @return Port service type
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return Port state
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Port type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Port used bandwidth in Mbps
     * 
     */
    public Integer usedBandwidth() {
        return this.usedBandwidth;
    }
    /**
     * @return Equinix-assigned port identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPortResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetPortAccount account;
        private Integer availableBandwidth;
        private Integer bandwidth;
        private GetPortChangeLog changeLog;
        private String description;
        private GetPortDevice device;
        private GetPortEncapsulation encapsulation;
        private String href;
        private String id;
        private GetPortLag lag;
        private GetPortLocation location;
        private String name;
        private GetPortOperation operation;
        private GetPortRedundancy redundancy;
        private String serviceType;
        private String state;
        private String type;
        private Integer usedBandwidth;
        private String uuid;
        public Builder() {}
        public Builder(GetPortResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.availableBandwidth = defaults.availableBandwidth;
    	      this.bandwidth = defaults.bandwidth;
    	      this.changeLog = defaults.changeLog;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.encapsulation = defaults.encapsulation;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.lag = defaults.lag;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.operation = defaults.operation;
    	      this.redundancy = defaults.redundancy;
    	      this.serviceType = defaults.serviceType;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.usedBandwidth = defaults.usedBandwidth;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder account(GetPortAccount account) {
            this.account = Objects.requireNonNull(account);
            return this;
        }
        @CustomType.Setter
        public Builder availableBandwidth(Integer availableBandwidth) {
            this.availableBandwidth = Objects.requireNonNull(availableBandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder changeLog(GetPortChangeLog changeLog) {
            this.changeLog = Objects.requireNonNull(changeLog);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder device(GetPortDevice device) {
            this.device = Objects.requireNonNull(device);
            return this;
        }
        @CustomType.Setter
        public Builder encapsulation(GetPortEncapsulation encapsulation) {
            this.encapsulation = Objects.requireNonNull(encapsulation);
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            this.href = Objects.requireNonNull(href);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lag(GetPortLag lag) {
            this.lag = Objects.requireNonNull(lag);
            return this;
        }
        @CustomType.Setter
        public Builder location(GetPortLocation location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder operation(GetPortOperation operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }
        @CustomType.Setter
        public Builder redundancy(GetPortRedundancy redundancy) {
            this.redundancy = Objects.requireNonNull(redundancy);
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            this.serviceType = Objects.requireNonNull(serviceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder usedBandwidth(Integer usedBandwidth) {
            this.usedBandwidth = Objects.requireNonNull(usedBandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            this.uuid = Objects.requireNonNull(uuid);
            return this;
        }
        public GetPortResult build() {
            final var o = new GetPortResult();
            o.account = account;
            o.availableBandwidth = availableBandwidth;
            o.bandwidth = bandwidth;
            o.changeLog = changeLog;
            o.description = description;
            o.device = device;
            o.encapsulation = encapsulation;
            o.href = href;
            o.id = id;
            o.lag = lag;
            o.location = location;
            o.name = name;
            o.operation = operation;
            o.redundancy = redundancy;
            o.serviceType = serviceType;
            o.state = state;
            o.type = type;
            o.usedBandwidth = usedBandwidth;
            o.uuid = uuid;
            return o;
        }
    }
}
