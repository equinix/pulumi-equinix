// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.metal.inputs.GetDeviceArgs;
import com.equinix.pulumi.metal.inputs.GetDeviceBgpNeighborsArgs;
import com.equinix.pulumi.metal.inputs.GetDeviceBgpNeighborsPlainArgs;
import com.equinix.pulumi.metal.inputs.GetDevicePlainArgs;
import com.equinix.pulumi.metal.inputs.GetFacilityArgs;
import com.equinix.pulumi.metal.inputs.GetFacilityPlainArgs;
import com.equinix.pulumi.metal.inputs.GetGatewayArgs;
import com.equinix.pulumi.metal.inputs.GetGatewayPlainArgs;
import com.equinix.pulumi.metal.inputs.GetHardwareReservationArgs;
import com.equinix.pulumi.metal.inputs.GetHardwareReservationPlainArgs;
import com.equinix.pulumi.metal.inputs.GetInterconnectionArgs;
import com.equinix.pulumi.metal.inputs.GetInterconnectionPlainArgs;
import com.equinix.pulumi.metal.inputs.GetIpBlockRangesArgs;
import com.equinix.pulumi.metal.inputs.GetIpBlockRangesPlainArgs;
import com.equinix.pulumi.metal.inputs.GetMetroArgs;
import com.equinix.pulumi.metal.inputs.GetMetroPlainArgs;
import com.equinix.pulumi.metal.inputs.GetOperatingSystemArgs;
import com.equinix.pulumi.metal.inputs.GetOperatingSystemPlainArgs;
import com.equinix.pulumi.metal.inputs.GetOrganizationArgs;
import com.equinix.pulumi.metal.inputs.GetOrganizationPlainArgs;
import com.equinix.pulumi.metal.inputs.GetPlansArgs;
import com.equinix.pulumi.metal.inputs.GetPlansPlainArgs;
import com.equinix.pulumi.metal.inputs.GetPortArgs;
import com.equinix.pulumi.metal.inputs.GetPortPlainArgs;
import com.equinix.pulumi.metal.inputs.GetPrecreatedIpBlockArgs;
import com.equinix.pulumi.metal.inputs.GetPrecreatedIpBlockPlainArgs;
import com.equinix.pulumi.metal.inputs.GetProjectArgs;
import com.equinix.pulumi.metal.inputs.GetProjectPlainArgs;
import com.equinix.pulumi.metal.inputs.GetProjectSshKeyArgs;
import com.equinix.pulumi.metal.inputs.GetProjectSshKeyPlainArgs;
import com.equinix.pulumi.metal.inputs.GetReservedIpBlockArgs;
import com.equinix.pulumi.metal.inputs.GetReservedIpBlockPlainArgs;
import com.equinix.pulumi.metal.inputs.GetSpotMarketPriceArgs;
import com.equinix.pulumi.metal.inputs.GetSpotMarketPricePlainArgs;
import com.equinix.pulumi.metal.inputs.GetSpotMarketRequestArgs;
import com.equinix.pulumi.metal.inputs.GetSpotMarketRequestPlainArgs;
import com.equinix.pulumi.metal.inputs.GetVirtualCircuitArgs;
import com.equinix.pulumi.metal.inputs.GetVirtualCircuitPlainArgs;
import com.equinix.pulumi.metal.inputs.GetVlanArgs;
import com.equinix.pulumi.metal.inputs.GetVlanPlainArgs;
import com.equinix.pulumi.metal.inputs.GetVrfArgs;
import com.equinix.pulumi.metal.inputs.GetVrfPlainArgs;
import com.equinix.pulumi.metal.outputs.GetDeviceBgpNeighborsResult;
import com.equinix.pulumi.metal.outputs.GetDeviceResult;
import com.equinix.pulumi.metal.outputs.GetFacilityResult;
import com.equinix.pulumi.metal.outputs.GetGatewayResult;
import com.equinix.pulumi.metal.outputs.GetHardwareReservationResult;
import com.equinix.pulumi.metal.outputs.GetInterconnectionResult;
import com.equinix.pulumi.metal.outputs.GetIpBlockRangesResult;
import com.equinix.pulumi.metal.outputs.GetMetroResult;
import com.equinix.pulumi.metal.outputs.GetOperatingSystemResult;
import com.equinix.pulumi.metal.outputs.GetOrganizationResult;
import com.equinix.pulumi.metal.outputs.GetPlansResult;
import com.equinix.pulumi.metal.outputs.GetPortResult;
import com.equinix.pulumi.metal.outputs.GetPrecreatedIpBlockResult;
import com.equinix.pulumi.metal.outputs.GetProjectResult;
import com.equinix.pulumi.metal.outputs.GetProjectSshKeyResult;
import com.equinix.pulumi.metal.outputs.GetReservedIpBlockResult;
import com.equinix.pulumi.metal.outputs.GetSpotMarketPriceResult;
import com.equinix.pulumi.metal.outputs.GetSpotMarketRequestResult;
import com.equinix.pulumi.metal.outputs.GetVirtualCircuitResult;
import com.equinix.pulumi.metal.outputs.GetVlanResult;
import com.equinix.pulumi.metal.outputs.GetVrfResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class MetalFunctions {
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDeviceResult> getDevice() {
        return getDevice(GetDeviceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDeviceResult> getDevicePlain() {
        return getDevicePlain(GetDevicePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDeviceResult> getDevice(GetDeviceArgs args) {
        return getDevice(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDeviceResult> getDevicePlain(GetDevicePlainArgs args) {
        return getDevicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDeviceResult> getDevice(GetDeviceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getDevice:getDevice", TypeShape.of(GetDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal device datasource.
     * 
     * &gt; **Note:** All arguments including the `root_password` and `user_data` will be stored in
     *  the raw state as plain-text.
     * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .projectId(local.project_id())
     *             .hostname(&#34;mydevice&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.id()));
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ipv4&#34;, test.applyValue(getDeviceResult -&gt; getDeviceResult.accessPublicIpv4()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDeviceResult> getDevicePlain(GetDevicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getDevice:getDevice", TypeShape.of(GetDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.
     * 
     * To have any BGP neighbors listed, the device must be in BGP-enabled project
     * and have a BGP session assigned.
     * 
     * To learn more about using BGP in Equinix Metal, see the
     * equinix.metal.BgpSession resource documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bgpNeighborsListing&#34;, test.applyValue(getDeviceBgpNeighborsResult -&gt; getDeviceBgpNeighborsResult.bgpNeighbors()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDeviceBgpNeighborsResult> getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs args) {
        return getDeviceBgpNeighbors(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.
     * 
     * To have any BGP neighbors listed, the device must be in BGP-enabled project
     * and have a BGP session assigned.
     * 
     * To learn more about using BGP in Equinix Metal, see the
     * equinix.metal.BgpSession resource documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bgpNeighborsListing&#34;, test.applyValue(getDeviceBgpNeighborsResult -&gt; getDeviceBgpNeighborsResult.bgpNeighbors()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDeviceBgpNeighborsResult> getDeviceBgpNeighborsPlain(GetDeviceBgpNeighborsPlainArgs args) {
        return getDeviceBgpNeighborsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.
     * 
     * To have any BGP neighbors listed, the device must be in BGP-enabled project
     * and have a BGP session assigned.
     * 
     * To learn more about using BGP in Equinix Metal, see the
     * equinix.metal.BgpSession resource documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bgpNeighborsListing&#34;, test.applyValue(getDeviceBgpNeighborsResult -&gt; getDeviceBgpNeighborsResult.bgpNeighbors()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDeviceBgpNeighborsResult> getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getDeviceBgpNeighbors:getDeviceBgpNeighbors", TypeShape.of(GetDeviceBgpNeighborsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.
     * 
     * To have any BGP neighbors listed, the device must be in BGP-enabled project
     * and have a BGP session assigned.
     * 
     * To learn more about using BGP in Equinix Metal, see the
     * equinix.metal.BgpSession resource documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()
     *             .deviceId(&#34;4c641195-25e5-4c3c-b2b7-4cd7a42c7b40&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bgpNeighborsListing&#34;, test.applyValue(getDeviceBgpNeighborsResult -&gt; getDeviceBgpNeighborsResult.bgpNeighbors()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDeviceBgpNeighborsResult> getDeviceBgpNeighborsPlain(GetDeviceBgpNeighborsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getDeviceBgpNeighbors:getDeviceBgpNeighbors", TypeShape.of(GetDeviceBgpNeighborsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal facility datasource.
     * 
     */
    public static Output<GetFacilityResult> getFacility(GetFacilityArgs args) {
        return getFacility(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal facility datasource.
     * 
     */
    public static CompletableFuture<GetFacilityResult> getFacilityPlain(GetFacilityPlainArgs args) {
        return getFacilityPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal facility datasource.
     * 
     */
    public static Output<GetFacilityResult> getFacility(GetFacilityArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getFacility:getFacility", TypeShape.of(GetFacilityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal facility datasource.
     * 
     */
    public static CompletableFuture<GetFacilityResult> getFacilityPlain(GetFacilityPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getFacility:getFacility", TypeShape.of(GetFacilityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testVlan = new Vlan(&#34;testVlan&#34;, VlanArgs.builder()        
     *             .description(&#34;test VLAN in SV&#34;)
     *             .metro(&#34;sv&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *         final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()
     *             .gatewayId(local.gateway_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGatewayResult> getGateway(GetGatewayArgs args) {
        return getGateway(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testVlan = new Vlan(&#34;testVlan&#34;, VlanArgs.builder()        
     *             .description(&#34;test VLAN in SV&#34;)
     *             .metro(&#34;sv&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *         final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()
     *             .gatewayId(local.gateway_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGatewayResult> getGatewayPlain(GetGatewayPlainArgs args) {
        return getGatewayPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testVlan = new Vlan(&#34;testVlan&#34;, VlanArgs.builder()        
     *             .description(&#34;test VLAN in SV&#34;)
     *             .metro(&#34;sv&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *         final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()
     *             .gatewayId(local.gateway_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGatewayResult> getGateway(GetGatewayArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getGateway:getGateway", TypeShape.of(GetGatewayResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve Metal Gateway resources in Equinix Metal.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testVlan = new Vlan(&#34;testVlan&#34;, VlanArgs.builder()        
     *             .description(&#34;test VLAN in SV&#34;)
     *             .metro(&#34;sv&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *         final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()
     *             .gatewayId(local.gateway_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGatewayResult> getGatewayPlain(GetGatewayPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getGateway:getGateway", TypeShape.of(GetGatewayResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetHardwareReservationResult> getHardwareReservation() {
        return getHardwareReservation(GetHardwareReservationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetHardwareReservationResult> getHardwareReservationPlain() {
        return getHardwareReservationPlain(GetHardwareReservationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetHardwareReservationResult> getHardwareReservation(GetHardwareReservationArgs args) {
        return getHardwareReservation(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetHardwareReservationResult> getHardwareReservationPlain(GetHardwareReservationPlainArgs args) {
        return getHardwareReservationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetHardwareReservationResult> getHardwareReservation(GetHardwareReservationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getHardwareReservation:getHardwareReservation", TypeShape.of(GetHardwareReservationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).
     * 
     * You can look up hardware reservation by its ID or by ID of device which occupies it.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .id(&#34;4347e805-eb46-4699-9eb9-5c116e6a0172&#34;)
     *             .build());
     * 
     *         final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()
     *             .deviceId(&#34;ff85aa58-c106-4624-8f1c-7c64554047ea&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetHardwareReservationResult> getHardwareReservationPlain(GetHardwareReservationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getHardwareReservation:getHardwareReservation", TypeShape.of(GetHardwareReservationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInterconnectionResult> getInterconnection(GetInterconnectionArgs args) {
        return getInterconnection(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInterconnectionResult> getInterconnectionPlain(GetInterconnectionPlainArgs args) {
        return getInterconnectionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInterconnectionResult> getInterconnection(GetInterconnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getInterconnection:getInterconnection", TypeShape.of(GetInterconnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInterconnectionResult> getInterconnectionPlain(GetInterconnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getInterconnection:getInterconnection", TypeShape.of(GetInterconnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
     * 
     * There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
     * 
     * The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()
     *             .projectId(projectId)
     *             .build());
     * 
     *         ctx.export(&#34;out&#34;, test.applyValue(getIpBlockRangesResult -&gt; getIpBlockRangesResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpBlockRangesResult> getIpBlockRanges(GetIpBlockRangesArgs args) {
        return getIpBlockRanges(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
     * 
     * There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
     * 
     * The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()
     *             .projectId(projectId)
     *             .build());
     * 
     *         ctx.export(&#34;out&#34;, test.applyValue(getIpBlockRangesResult -&gt; getIpBlockRangesResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpBlockRangesResult> getIpBlockRangesPlain(GetIpBlockRangesPlainArgs args) {
        return getIpBlockRangesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
     * 
     * There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
     * 
     * The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()
     *             .projectId(projectId)
     *             .build());
     * 
     *         ctx.export(&#34;out&#34;, test.applyValue(getIpBlockRangesResult -&gt; getIpBlockRangesResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpBlockRangesResult> getIpBlockRanges(GetIpBlockRangesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getIpBlockRanges:getIpBlockRanges", TypeShape.of(GetIpBlockRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.
     * 
     * There are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.
     * 
     * The datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`&lt;network&gt;/&lt;mask&gt;`) of respective blocks from the project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()
     *             .projectId(projectId)
     *             .build());
     * 
     *         ctx.export(&#34;out&#34;, test.applyValue(getIpBlockRangesResult -&gt; getIpBlockRangesResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpBlockRangesResult> getIpBlockRangesPlain(GetIpBlockRangesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getIpBlockRanges:getIpBlockRanges", TypeShape.of(GetIpBlockRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal metro datasource.
     * 
     */
    public static Output<GetMetroResult> getMetro(GetMetroArgs args) {
        return getMetro(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal metro datasource.
     * 
     */
    public static CompletableFuture<GetMetroResult> getMetroPlain(GetMetroPlainArgs args) {
        return getMetroPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal metro datasource.
     * 
     */
    public static Output<GetMetroResult> getMetro(GetMetroArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getMetro:getMetro", TypeShape.of(GetMetroResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal metro datasource.
     * 
     */
    public static CompletableFuture<GetMetroResult> getMetroPlain(GetMetroPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getMetro:getMetro", TypeShape.of(GetMetroResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOperatingSystemResult> getOperatingSystem() {
        return getOperatingSystem(GetOperatingSystemArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOperatingSystemResult> getOperatingSystemPlain() {
        return getOperatingSystemPlain(GetOperatingSystemPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOperatingSystemResult> getOperatingSystem(GetOperatingSystemArgs args) {
        return getOperatingSystem(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOperatingSystemResult> getOperatingSystemPlain(GetOperatingSystemPlainArgs args) {
        return getOperatingSystemPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOperatingSystemResult> getOperatingSystem(GetOperatingSystemArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getOperatingSystem:getOperatingSystem", TypeShape.of(GetOperatingSystemResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get Equinix Metal Operating System image.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()
     *             .distro(&#34;ubuntu&#34;)
     *             .version(&#34;20.04&#34;)
     *             .provisionableOn(&#34;c3.medium.x86&#34;)
     *             .build());
     * 
     *         var server = new Device(&#34;server&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tf.ubuntu&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;ny5&#34;)
     *             .operatingSystem(example.applyValue(getOperatingSystemResult -&gt; getOperatingSystemResult.id()))
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOperatingSystemResult> getOperatingSystemPlain(GetOperatingSystemPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getOperatingSystem:getOperatingSystem", TypeShape.of(GetOperatingSystemResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization() {
        return getOrganization(GetOrganizationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain() {
        return getOrganizationPlain(GetOrganizationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal organization datasource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .organizationId(local.org_id())
     *             .build());
     * 
     *         ctx.export(&#34;projectsInTheOrg&#34;, test.applyValue(getOrganizationResult -&gt; getOrganizationResult.projectIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPlansResult> getPlans() {
        return getPlans(GetPlansArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPlansResult> getPlansPlain() {
        return getPlansPlain(GetPlansPlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<GetPlansResult> getPlans(GetPlansArgs args) {
        return getPlans(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPlansResult> getPlansPlain(GetPlansPlainArgs args) {
        return getPlansPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPlansResult> getPlans(GetPlansArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getPlans:getPlans", TypeShape.of(GetPlansResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPlansResult> getPlansPlain(GetPlansPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getPlans:getPlans", TypeShape.of(GetPlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPortResult> getPort() {
        return getPort(GetPortArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain() {
        return getPortPlain(GetPortPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args) {
        return getPort(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args) {
        return getPortPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to read ports of existing devices. You can read port by either its UUID,
     * or by a device UUID and port name.
     * 
     * ## Example Usage
     * 
     * Create a device and read it&#39;s eth0 port to the datasource.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Device;
     * import com.pulumi.equinix.metal.DeviceArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var projectId = &#34;&lt;UUID_of_your_project&gt;&#34;;
     * 
     *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
     *             .hostname(&#34;tfacc-test-device-port&#34;)
     *             .plan(&#34;c3.medium.x86&#34;)
     *             .facilities(&#34;sv15&#34;)
     *             .operatingSystem(&#34;ubuntu_20_04&#34;)
     *             .billingCycle(&#34;hourly&#34;)
     *             .projectId(projectId)
     *             .build());
     * 
     *         final var testPort = MetalFunctions.getPort(GetPortArgs.builder()
     *             .deviceId(testDevice.id())
     *             .name(&#34;eth0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.
     * You can then use the cidrsubnet TF builtin function to derive subnets.
     * 
     * &gt; For backward compatibility, this data source will also return reserved (elastic) IP blocks.
     * 
     * &gt; Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
     * 
     * &gt; Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
     * 
     */
    public static Output<GetPrecreatedIpBlockResult> getPrecreatedIpBlock(GetPrecreatedIpBlockArgs args) {
        return getPrecreatedIpBlock(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.
     * You can then use the cidrsubnet TF builtin function to derive subnets.
     * 
     * &gt; For backward compatibility, this data source will also return reserved (elastic) IP blocks.
     * 
     * &gt; Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
     * 
     * &gt; Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
     * 
     */
    public static CompletableFuture<GetPrecreatedIpBlockResult> getPrecreatedIpBlockPlain(GetPrecreatedIpBlockPlainArgs args) {
        return getPrecreatedIpBlockPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.
     * You can then use the cidrsubnet TF builtin function to derive subnets.
     * 
     * &gt; For backward compatibility, this data source will also return reserved (elastic) IP blocks.
     * 
     * &gt; Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
     * 
     * &gt; Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
     * 
     */
    public static Output<GetPrecreatedIpBlockResult> getPrecreatedIpBlock(GetPrecreatedIpBlockArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock", TypeShape.of(GetPrecreatedIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.
     * You can then use the cidrsubnet TF builtin function to derive subnets.
     * 
     * &gt; For backward compatibility, this data source will also return reserved (elastic) IP blocks.
     * 
     * &gt; Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
     * 
     * &gt; Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
     * 
     */
    public static CompletableFuture<GetPrecreatedIpBlockResult> getPrecreatedIpBlockPlain(GetPrecreatedIpBlockPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock", TypeShape.of(GetPrecreatedIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve attributes of the Project API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;Terraform Fun&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;usersOfTerraformFun&#34;, tfProject1.applyValue(getProjectResult -&gt; getProjectResult.userIds()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve attributes of a Project SSH Key API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()
     *             .search(&#34;username@hostname&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectSshKeyResult> getProjectSshKey(GetProjectSshKeyArgs args) {
        return getProjectSshKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of a Project SSH Key API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()
     *             .search(&#34;username@hostname&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectSshKeyResult> getProjectSshKeyPlain(GetProjectSshKeyPlainArgs args) {
        return getProjectSshKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this datasource to retrieve attributes of a Project SSH Key API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()
     *             .search(&#34;username@hostname&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectSshKeyResult> getProjectSshKey(GetProjectSshKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getProjectSshKey:getProjectSshKey", TypeShape.of(GetProjectSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this datasource to retrieve attributes of a Project SSH Key API resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()
     *             .search(&#34;username@hostname&#34;)
     *             .projectId(local.project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectSshKeyResult> getProjectSshKeyPlain(GetProjectSshKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getProjectSshKey:getProjectSshKey", TypeShape.of(GetProjectSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static Output<GetReservedIpBlockResult> getReservedIpBlock() {
        return getReservedIpBlock(GetReservedIpBlockArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static CompletableFuture<GetReservedIpBlockResult> getReservedIpBlockPlain() {
        return getReservedIpBlockPlain(GetReservedIpBlockPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static Output<GetReservedIpBlockResult> getReservedIpBlock(GetReservedIpBlockArgs args) {
        return getReservedIpBlock(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static CompletableFuture<GetReservedIpBlockResult> getReservedIpBlockPlain(GetReservedIpBlockPlainArgs args) {
        return getReservedIpBlockPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static Output<GetReservedIpBlockResult> getReservedIpBlock(GetReservedIpBlockArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getReservedIpBlock:getReservedIpBlock", TypeShape.of(GetReservedIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block
     * ID for lookup.
     * 
     * &gt; For backward compatibility, this data source can be also used for precreated (management) IP blocks.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     */
    public static CompletableFuture<GetReservedIpBlockResult> getReservedIpBlockPlain(GetReservedIpBlockPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getReservedIpBlock:getReservedIpBlock", TypeShape.of(GetReservedIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get Equinix Metal Spot Market Price for a plan.
     * 
     * ## Example Usage
     * 
     * Lookup by facility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .facility(&#34;ny5&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Lookup by metro:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .metro(&#34;sv&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpotMarketPriceResult> getSpotMarketPrice(GetSpotMarketPriceArgs args) {
        return getSpotMarketPrice(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Spot Market Price for a plan.
     * 
     * ## Example Usage
     * 
     * Lookup by facility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .facility(&#34;ny5&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Lookup by metro:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .metro(&#34;sv&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpotMarketPriceResult> getSpotMarketPricePlain(GetSpotMarketPricePlainArgs args) {
        return getSpotMarketPricePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get Equinix Metal Spot Market Price for a plan.
     * 
     * ## Example Usage
     * 
     * Lookup by facility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .facility(&#34;ny5&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Lookup by metro:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .metro(&#34;sv&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpotMarketPriceResult> getSpotMarketPrice(GetSpotMarketPriceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getSpotMarketPrice:getSpotMarketPrice", TypeShape.of(GetSpotMarketPriceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get Equinix Metal Spot Market Price for a plan.
     * 
     * ## Example Usage
     * 
     * Lookup by facility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .facility(&#34;ny5&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Lookup by metro:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()
     *             .metro(&#34;sv&#34;)
     *             .plan(&#34;c3.small.x86&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpotMarketPriceResult> getSpotMarketPricePlain(GetSpotMarketPricePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getSpotMarketPrice:getSpotMarketPrice", TypeShape.of(GetSpotMarketPriceResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSpotMarketRequestResult> getSpotMarketRequest(GetSpotMarketRequestArgs args) {
        return getSpotMarketRequest(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSpotMarketRequestResult> getSpotMarketRequestPlain(GetSpotMarketRequestPlainArgs args) {
        return getSpotMarketRequestPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSpotMarketRequestResult> getSpotMarketRequest(GetSpotMarketRequestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getSpotMarketRequest:getSpotMarketRequest", TypeShape.of(GetSpotMarketRequestResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSpotMarketRequestResult> getSpotMarketRequestPlain(GetSpotMarketRequestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getSpotMarketRequest:getSpotMarketRequest", TypeShape.of(GetSpotMarketRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a virtual circuit resource from
     * [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import com.pulumi.equinix.metal.inputs.GetVirtualCircuitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleConnection = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *         final var exampleVc = MetalFunctions.getVirtualCircuit(GetVirtualCircuitArgs.builder()
     *             .virtualCircuitId(exampleConnection.applyValue(getInterconnectionResult -&gt; getInterconnectionResult.ports()[1].virtualCircuitIds()[0]))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVirtualCircuitResult> getVirtualCircuit(GetVirtualCircuitArgs args) {
        return getVirtualCircuit(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a virtual circuit resource from
     * [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import com.pulumi.equinix.metal.inputs.GetVirtualCircuitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleConnection = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *         final var exampleVc = MetalFunctions.getVirtualCircuit(GetVirtualCircuitArgs.builder()
     *             .virtualCircuitId(exampleConnection.applyValue(getInterconnectionResult -&gt; getInterconnectionResult.ports()[1].virtualCircuitIds()[0]))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVirtualCircuitResult> getVirtualCircuitPlain(GetVirtualCircuitPlainArgs args) {
        return getVirtualCircuitPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a virtual circuit resource from
     * [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import com.pulumi.equinix.metal.inputs.GetVirtualCircuitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleConnection = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *         final var exampleVc = MetalFunctions.getVirtualCircuit(GetVirtualCircuitArgs.builder()
     *             .virtualCircuitId(exampleConnection.applyValue(getInterconnectionResult -&gt; getInterconnectionResult.ports()[1].virtualCircuitIds()[0]))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVirtualCircuitResult> getVirtualCircuit(GetVirtualCircuitArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getVirtualCircuit:getVirtualCircuit", TypeShape.of(GetVirtualCircuitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a virtual circuit resource from
     * [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;
     * import com.pulumi.equinix.metal.inputs.GetVirtualCircuitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleConnection = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()
     *             .connectionId(&#34;4347e805-eb46-4699-9eb9-5c116e6a017d&#34;)
     *             .build());
     * 
     *         final var exampleVc = MetalFunctions.getVirtualCircuit(GetVirtualCircuitArgs.builder()
     *             .virtualCircuitId(exampleConnection.applyValue(getInterconnectionResult -&gt; getInterconnectionResult.ports()[1].virtualCircuitIds()[0]))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVirtualCircuitResult> getVirtualCircuitPlain(GetVirtualCircuitPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getVirtualCircuit:getVirtualCircuit", TypeShape.of(GetVirtualCircuitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVlanResult> getVlan() {
        return getVlan(GetVlanArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVlanResult> getVlanPlain() {
        return getVlanPlain(GetVlanPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVlanResult> getVlan(GetVlanArgs args) {
        return getVlan(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVlanResult> getVlanPlain(GetVlanPlainArgs args) {
        return getVlanPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVlanResult> getVlan(GetVlanArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getVlan:getVlan", TypeShape.of(GetVlanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
     * searched by VLAN UUID, or project UUID and vxlan number.
     * 
     * ## Example Usage
     * 
     * Fetch a vlan by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.Vlan;
     * import com.pulumi.equinix.metal.VlanArgs;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var foovlan = new Vlan(&#34;foovlan&#34;, VlanArgs.builder()        
     *             .projectId(local.project_id())
     *             .metro(&#34;sv&#34;)
     *             .vxlan(5)
     *             .build());
     * 
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .vlanId(foovlan.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Fetch a vlan by project ID, vxlan and metro
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVlanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()
     *             .projectId(local.project_id())
     *             .vxlan(5)
     *             .metro(&#34;sv&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVlanResult> getVlanPlain(GetVlanPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getVlan:getVlan", TypeShape.of(GetVlanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a VRF resource.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVrfArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()
     *             .vrfId(&#34;48630899-9ff2-4ce6-a93f-50ff4ebcdf6e&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVrfResult> getVrf(GetVrfArgs args) {
        return getVrf(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a VRF resource.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVrfArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()
     *             .vrfId(&#34;48630899-9ff2-4ce6-a93f-50ff4ebcdf6e&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVrfResult> getVrfPlain(GetVrfPlainArgs args) {
        return getVrfPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a VRF resource.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVrfArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()
     *             .vrfId(&#34;48630899-9ff2-4ce6-a93f-50ff4ebcdf6e&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVrfResult> getVrf(GetVrfArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:metal/getVrf:getVrf", TypeShape.of(GetVrfResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a VRF resource.
     * 
     * &gt; VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.metal.MetalFunctions;
     * import com.pulumi.equinix.metal.inputs.GetVrfArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()
     *             .vrfId(&#34;48630899-9ff2-4ce6-a93f-50ff4ebcdf6e&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVrfResult> getVrfPlain(GetVrfPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:metal/getVrf:getVrf", TypeShape.of(GetVrfResult.class), args, Utilities.withVersion(options));
    }
}
