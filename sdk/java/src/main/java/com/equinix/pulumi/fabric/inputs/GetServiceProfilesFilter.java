// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServiceProfilesFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceProfilesFilter Empty = new GetServiceProfilesFilter();

    /**
     * Operators to use on your filtered field with the values given. One of [=]
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    /**
     * @return Operators to use on your filtered field with the values given. One of [=]
     * 
     */
    public String operator() {
        return this.operator;
    }

    /**
     * Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
     * 
     */
    @Import(name="property", required=true)
    private String property;

    /**
     * @return Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
     * 
     */
    public String property() {
        return this.property;
    }

    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    @Import(name="values", required=true)
    private List<String> values;

    /**
     * @return The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    public List<String> values() {
        return this.values;
    }

    private GetServiceProfilesFilter() {}

    private GetServiceProfilesFilter(GetServiceProfilesFilter $) {
        this.operator = $.operator;
        this.property = $.property;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceProfilesFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceProfilesFilter $;

        public Builder() {
            $ = new GetServiceProfilesFilter();
        }

        public Builder(GetServiceProfilesFilter defaults) {
            $ = new GetServiceProfilesFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator Operators to use on your filtered field with the values given. One of [=]
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param property Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            $.property = property;
            return this;
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetServiceProfilesFilter build() {
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
