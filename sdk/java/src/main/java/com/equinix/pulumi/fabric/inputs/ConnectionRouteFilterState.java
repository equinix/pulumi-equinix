// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionRouteFilterState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionRouteFilterState Empty = new ConnectionRouteFilterState();

    /**
     * Status of the Route Filter Policy attachment lifecycle
     * 
     */
    @Import(name="attachmentStatus")
    private @Nullable Output<String> attachmentStatus;

    /**
     * @return Status of the Route Filter Policy attachment lifecycle
     * 
     */
    public Optional<Output<String>> attachmentStatus() {
        return Optional.ofNullable(this.attachmentStatus);
    }

    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Direction of the filtering of the attached Route Filter Policy
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return Direction of the filtering of the attached Route Filter Policy
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * URI to the attached Route Filter Policy on the Connection
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return URI to the attached Route Filter Policy on the Connection
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     * 
     */
    @Import(name="routeFilterId")
    private @Nullable Output<String> routeFilterId;

    /**
     * @return Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     * 
     */
    public Optional<Output<String>> routeFilterId() {
        return Optional.ofNullable(this.routeFilterId);
    }

    /**
     * Route Filter Type. One of [ &#34;BGP*IPv4*PREFIX*FILTER&#34;, &#34;BGP*IPv6*PREFIX*FILTER&#34; ]
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Route Filter Type. One of [ &#34;BGP*IPv4*PREFIX*FILTER&#34;, &#34;BGP*IPv6*PREFIX*FILTER&#34; ]
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix Assigned ID for Route Filter Policy
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix Assigned ID for Route Filter Policy
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ConnectionRouteFilterState() {}

    private ConnectionRouteFilterState(ConnectionRouteFilterState $) {
        this.attachmentStatus = $.attachmentStatus;
        this.connectionId = $.connectionId;
        this.direction = $.direction;
        this.href = $.href;
        this.routeFilterId = $.routeFilterId;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionRouteFilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionRouteFilterState $;

        public Builder() {
            $ = new ConnectionRouteFilterState();
        }

        public Builder(ConnectionRouteFilterState defaults) {
            $ = new ConnectionRouteFilterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentStatus Status of the Route Filter Policy attachment lifecycle
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(@Nullable Output<String> attachmentStatus) {
            $.attachmentStatus = attachmentStatus;
            return this;
        }

        /**
         * @param attachmentStatus Status of the Route Filter Policy attachment lifecycle
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(String attachmentStatus) {
            return attachmentStatus(Output.of(attachmentStatus));
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param direction Direction of the filtering of the attached Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the filtering of the attached Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param href URI to the attached Route Filter Policy on the Connection
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href URI to the attached Route Filter Policy on the Connection
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param routeFilterId Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(@Nullable Output<String> routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        /**
         * @param routeFilterId Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            return routeFilterId(Output.of(routeFilterId));
        }

        /**
         * @param type Route Filter Type. One of [ &#34;BGP*IPv4*PREFIX*FILTER&#34;, &#34;BGP*IPv6*PREFIX*FILTER&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Route Filter Type. One of [ &#34;BGP*IPv4*PREFIX*FILTER&#34;, &#34;BGP*IPv6*PREFIX*FILTER&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix Assigned ID for Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix Assigned ID for Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ConnectionRouteFilterState build() {
            return $;
        }
    }

}
