// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge;

import com.equinix.pulumi.equinix.Utilities;
import com.equinix.pulumi.equinix.networkedge.DeviceLinkArgs;
import com.equinix.pulumi.equinix.networkedge.inputs.DeviceLinkState;
import com.equinix.pulumi.equinix.networkedge.outputs.DeviceLinkDevice;
import com.equinix.pulumi.equinix.networkedge.outputs.DeviceLinkLink;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource `equinix.networkedge.DeviceLink` allows creation and management of Equinix
 * Network Edge virtual network device links.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.DeviceLink;
 * import com.pulumi.equinix.networkedge.DeviceLinkArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceLinkDeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceLinkLinkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DeviceLink(&#34;test&#34;, DeviceLinkArgs.builder()        
 *             .subnet(&#34;192.168.40.64/27&#34;)
 *             .devices(            
 *                 DeviceLinkDeviceArgs.builder()
 *                     .id(equinix_network_device.test().uuid())
 *                     .asn(equinix_network_device.test().asn() &gt; 0 ? equinix_network_device.test().asn() : 22111)
 *                     .interfaceId(6)
 *                     .build(),
 *                 DeviceLinkDeviceArgs.builder()
 *                     .id(equinix_network_device.test().secondary_device()[0].uuid())
 *                     .asn(equinix_network_device.test().secondary_device()[0].asn() &gt; 0 ? equinix_network_device.test().secondary_device()[0].asn() : 22333)
 *                     .interfaceId(7)
 *                     .build())
 *             .links(DeviceLinkLinkArgs.builder()
 *                 .accountNumber(equinix_network_device.test().account_number())
 *                 .srcMetroCode(equinix_network_device.test().metro_code())
 *                 .dstMetroCode(equinix_network_device.test().secondary_device()[0].metro_code())
 *                 .throughput(&#34;50&#34;)
 *                 .throughputUnit(&#34;Mbps&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * This resource can be imported using an existing ID
 * 
 * ```sh
 *  $ pulumi import equinix:networkedge/deviceLink:DeviceLink example {existing_id}
 * ```
 * 
 */
@ResourceType(type="equinix:networkedge/deviceLink:DeviceLink")
public class DeviceLink extends com.pulumi.resources.CustomResource {
    /**
     * definition of one or more devices belonging to the
     * device link. See Device section below for more details.
     * 
     */
    @Export(name="devices", refs={List.class,DeviceLinkDevice.class}, tree="[0,1]")
    private Output<List<DeviceLinkDevice>> devices;

    /**
     * @return definition of one or more devices belonging to the
     * device link. See Device section below for more details.
     * 
     */
    public Output<List<DeviceLinkDevice>> devices() {
        return this.devices;
    }
    /**
     * definition of one or more, inter metro, connections belonging
     * to the device link. See Link section below for more details.
     * 
     */
    @Export(name="links", refs={List.class,DeviceLinkLink.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DeviceLinkLink>> links;

    /**
     * @return definition of one or more, inter metro, connections belonging
     * to the device link. See Link section below for more details.
     * 
     */
    public Output<Optional<List<DeviceLinkLink>>> links() {
        return Codegen.optional(this.links);
    }
    /**
     * device link name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return device link name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * device link provisioning status on a given device. One of `PROVISIONING`,
     * `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return device link provisioning status on a given device. One of `PROVISIONING`,
     * `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * device link subnet in CIDR format. Not required for link
     * between self configured devices.
     * 
     */
    @Export(name="subnet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subnet;

    /**
     * @return device link subnet in CIDR format. Not required for link
     * between self configured devices.
     * 
     */
    public Output<Optional<String>> subnet() {
        return Codegen.optional(this.subnet);
    }
    /**
     * Device link unique identifier.
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Device link unique identifier.
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeviceLink(String name) {
        this(name, DeviceLinkArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeviceLink(String name, DeviceLinkArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeviceLink(String name, DeviceLinkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:networkedge/deviceLink:DeviceLink", name, args == null ? DeviceLinkArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DeviceLink(String name, Output<String> id, @Nullable DeviceLinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:networkedge/deviceLink:DeviceLink", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeviceLink get(String name, Output<String> id, @Nullable DeviceLinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DeviceLink(name, id, state, options);
    }
}
