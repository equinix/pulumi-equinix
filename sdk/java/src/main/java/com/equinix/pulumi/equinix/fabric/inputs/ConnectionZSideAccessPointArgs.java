// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.fabric.inputs;

import com.equinix.pulumi.equinix.fabric.enums.AccessPointLinkProtocolType;
import com.equinix.pulumi.equinix.fabric.enums.AccessPointPeeringType;
import com.equinix.pulumi.equinix.fabric.enums.AccessPointType;
import com.equinix.pulumi.equinix.fabric.enums.ProfileType;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointAccountArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointGatewayArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointInterfaceArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointRoutingProtocolArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointVirtualDeviceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionZSideAccessPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionZSideAccessPointArgs Empty = new ConnectionZSideAccessPointArgs();

    /**
     * Customer account information that is associated with this connection
     * 
     */
    @Import(name="accounts")
    private @Nullable Output<List<ConnectionZSideAccessPointAccountArgs>> accounts;

    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    public Optional<Output<List<ConnectionZSideAccessPointAccountArgs>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    @Import(name="authenticationKey")
    private @Nullable Output<String> authenticationKey;

    public Optional<Output<String>> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }

    @Import(name="gateways")
    private @Nullable Output<List<ConnectionZSideAccessPointGatewayArgs>> gateways;

    public Optional<Output<List<ConnectionZSideAccessPointGatewayArgs>>> gateways() {
        return Optional.ofNullable(this.gateways);
    }

    @Import(name="interfaces")
    private @Nullable Output<List<ConnectionZSideAccessPointInterfaceArgs>> interfaces;

    public Optional<Output<List<ConnectionZSideAccessPointInterfaceArgs>>> interfaces() {
        return Optional.ofNullable(this.interfaces);
    }

    @Import(name="linkProtocols")
    private @Nullable Output<Either<String,AccessPointLinkProtocolType>> linkProtocols;

    public Optional<Output<Either<String,AccessPointLinkProtocolType>>> linkProtocols() {
        return Optional.ofNullable(this.linkProtocols);
    }

    @Import(name="locations")
    private @Nullable Output<List<ConnectionZSideAccessPointLocationArgs>> locations;

    public Optional<Output<List<ConnectionZSideAccessPointLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    @Import(name="peeringType")
    private @Nullable Output<Either<String,AccessPointPeeringType>> peeringType;

    public Optional<Output<Either<String,AccessPointPeeringType>>> peeringType() {
        return Optional.ofNullable(this.peeringType);
    }

    @Import(name="ports")
    private @Nullable Output<List<ConnectionZSideAccessPointPortArgs>> ports;

    public Optional<Output<List<ConnectionZSideAccessPointPortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    @Import(name="profiles")
    private @Nullable Output<Either<String,ProfileType>> profiles;

    public Optional<Output<Either<String,ProfileType>>> profiles() {
        return Optional.ofNullable(this.profiles);
    }

    @Import(name="providerConnectionId")
    private @Nullable Output<String> providerConnectionId;

    public Optional<Output<String>> providerConnectionId() {
        return Optional.ofNullable(this.providerConnectionId);
    }

    @Import(name="routingProtocols")
    private @Nullable Output<List<ConnectionZSideAccessPointRoutingProtocolArgs>> routingProtocols;

    public Optional<Output<List<ConnectionZSideAccessPointRoutingProtocolArgs>>> routingProtocols() {
        return Optional.ofNullable(this.routingProtocols);
    }

    @Import(name="sellerRegion")
    private @Nullable Output<String> sellerRegion;

    public Optional<Output<String>> sellerRegion() {
        return Optional.ofNullable(this.sellerRegion);
    }

    /**
     * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,AccessPointType>> type;

    /**
     * @return Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    public Optional<Output<Either<String,AccessPointType>>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="virtualDevices")
    private @Nullable Output<List<ConnectionZSideAccessPointVirtualDeviceArgs>> virtualDevices;

    public Optional<Output<List<ConnectionZSideAccessPointVirtualDeviceArgs>>> virtualDevices() {
        return Optional.ofNullable(this.virtualDevices);
    }

    private ConnectionZSideAccessPointArgs() {}

    private ConnectionZSideAccessPointArgs(ConnectionZSideAccessPointArgs $) {
        this.accounts = $.accounts;
        this.authenticationKey = $.authenticationKey;
        this.gateways = $.gateways;
        this.interfaces = $.interfaces;
        this.linkProtocols = $.linkProtocols;
        this.locations = $.locations;
        this.peeringType = $.peeringType;
        this.ports = $.ports;
        this.profiles = $.profiles;
        this.providerConnectionId = $.providerConnectionId;
        this.routingProtocols = $.routingProtocols;
        this.sellerRegion = $.sellerRegion;
        this.type = $.type;
        this.virtualDevices = $.virtualDevices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionZSideAccessPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionZSideAccessPointArgs $;

        public Builder() {
            $ = new ConnectionZSideAccessPointArgs();
        }

        public Builder(ConnectionZSideAccessPointArgs defaults) {
            $ = new ConnectionZSideAccessPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accounts Customer account information that is associated with this connection
         * 
         * @return builder
         * 
         */
        public Builder accounts(@Nullable Output<List<ConnectionZSideAccessPointAccountArgs>> accounts) {
            $.accounts = accounts;
            return this;
        }

        /**
         * @param accounts Customer account information that is associated with this connection
         * 
         * @return builder
         * 
         */
        public Builder accounts(List<ConnectionZSideAccessPointAccountArgs> accounts) {
            return accounts(Output.of(accounts));
        }

        /**
         * @param accounts Customer account information that is associated with this connection
         * 
         * @return builder
         * 
         */
        public Builder accounts(ConnectionZSideAccessPointAccountArgs... accounts) {
            return accounts(List.of(accounts));
        }

        public Builder authenticationKey(@Nullable Output<String> authenticationKey) {
            $.authenticationKey = authenticationKey;
            return this;
        }

        public Builder authenticationKey(String authenticationKey) {
            return authenticationKey(Output.of(authenticationKey));
        }

        public Builder gateways(@Nullable Output<List<ConnectionZSideAccessPointGatewayArgs>> gateways) {
            $.gateways = gateways;
            return this;
        }

        public Builder gateways(List<ConnectionZSideAccessPointGatewayArgs> gateways) {
            return gateways(Output.of(gateways));
        }

        public Builder gateways(ConnectionZSideAccessPointGatewayArgs... gateways) {
            return gateways(List.of(gateways));
        }

        public Builder interfaces(@Nullable Output<List<ConnectionZSideAccessPointInterfaceArgs>> interfaces) {
            $.interfaces = interfaces;
            return this;
        }

        public Builder interfaces(List<ConnectionZSideAccessPointInterfaceArgs> interfaces) {
            return interfaces(Output.of(interfaces));
        }

        public Builder interfaces(ConnectionZSideAccessPointInterfaceArgs... interfaces) {
            return interfaces(List.of(interfaces));
        }

        public Builder linkProtocols(@Nullable Output<Either<String,AccessPointLinkProtocolType>> linkProtocols) {
            $.linkProtocols = linkProtocols;
            return this;
        }

        public Builder linkProtocols(Either<String,AccessPointLinkProtocolType> linkProtocols) {
            return linkProtocols(Output.of(linkProtocols));
        }

        public Builder linkProtocols(String linkProtocols) {
            return linkProtocols(Either.ofLeft(linkProtocols));
        }

        public Builder linkProtocols(AccessPointLinkProtocolType linkProtocols) {
            return linkProtocols(Either.ofRight(linkProtocols));
        }

        public Builder locations(@Nullable Output<List<ConnectionZSideAccessPointLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(List<ConnectionZSideAccessPointLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        public Builder locations(ConnectionZSideAccessPointLocationArgs... locations) {
            return locations(List.of(locations));
        }

        public Builder peeringType(@Nullable Output<Either<String,AccessPointPeeringType>> peeringType) {
            $.peeringType = peeringType;
            return this;
        }

        public Builder peeringType(Either<String,AccessPointPeeringType> peeringType) {
            return peeringType(Output.of(peeringType));
        }

        public Builder peeringType(String peeringType) {
            return peeringType(Either.ofLeft(peeringType));
        }

        public Builder peeringType(AccessPointPeeringType peeringType) {
            return peeringType(Either.ofRight(peeringType));
        }

        public Builder ports(@Nullable Output<List<ConnectionZSideAccessPointPortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(List<ConnectionZSideAccessPointPortArgs> ports) {
            return ports(Output.of(ports));
        }

        public Builder ports(ConnectionZSideAccessPointPortArgs... ports) {
            return ports(List.of(ports));
        }

        public Builder profiles(@Nullable Output<Either<String,ProfileType>> profiles) {
            $.profiles = profiles;
            return this;
        }

        public Builder profiles(Either<String,ProfileType> profiles) {
            return profiles(Output.of(profiles));
        }

        public Builder profiles(String profiles) {
            return profiles(Either.ofLeft(profiles));
        }

        public Builder profiles(ProfileType profiles) {
            return profiles(Either.ofRight(profiles));
        }

        public Builder providerConnectionId(@Nullable Output<String> providerConnectionId) {
            $.providerConnectionId = providerConnectionId;
            return this;
        }

        public Builder providerConnectionId(String providerConnectionId) {
            return providerConnectionId(Output.of(providerConnectionId));
        }

        public Builder routingProtocols(@Nullable Output<List<ConnectionZSideAccessPointRoutingProtocolArgs>> routingProtocols) {
            $.routingProtocols = routingProtocols;
            return this;
        }

        public Builder routingProtocols(List<ConnectionZSideAccessPointRoutingProtocolArgs> routingProtocols) {
            return routingProtocols(Output.of(routingProtocols));
        }

        public Builder routingProtocols(ConnectionZSideAccessPointRoutingProtocolArgs... routingProtocols) {
            return routingProtocols(List.of(routingProtocols));
        }

        public Builder sellerRegion(@Nullable Output<String> sellerRegion) {
            $.sellerRegion = sellerRegion;
            return this;
        }

        public Builder sellerRegion(String sellerRegion) {
            return sellerRegion(Output.of(sellerRegion));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,AccessPointType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,AccessPointType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(AccessPointType type) {
            return type(Either.ofRight(type));
        }

        public Builder virtualDevices(@Nullable Output<List<ConnectionZSideAccessPointVirtualDeviceArgs>> virtualDevices) {
            $.virtualDevices = virtualDevices;
            return this;
        }

        public Builder virtualDevices(List<ConnectionZSideAccessPointVirtualDeviceArgs> virtualDevices) {
            return virtualDevices(Output.of(virtualDevices));
        }

        public Builder virtualDevices(ConnectionZSideAccessPointVirtualDeviceArgs... virtualDevices) {
            return virtualDevices(List.of(virtualDevices));
        }

        public ConnectionZSideAccessPointArgs build() {
            return $;
        }
    }

}
