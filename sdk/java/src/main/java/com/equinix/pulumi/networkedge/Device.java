// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.networkedge.DeviceArgs;
import com.equinix.pulumi.networkedge.inputs.DeviceState;
import com.equinix.pulumi.networkedge.outputs.DeviceClusterDetails;
import com.equinix.pulumi.networkedge.outputs.DeviceInterface;
import com.equinix.pulumi.networkedge.outputs.DeviceSecondaryDevice;
import com.equinix.pulumi.networkedge.outputs.DeviceSshKey;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource `equinix.networkedge.Device` allows creation and management of Equinix Network Edge virtual network devices.
 * 
 * Network Edge virtual network devices can be created in two modes:
 * 
 * * **managed** - (default) Where Equinix manages connectivity and services in the device and customer gets limited access to the device.
 * * **self-configured** - Where customer provisions and manages own services in the device with less restricted access. Some device types are offered only in this mode.
 * 
 * In addition to management modes, there are two software license modes available:
 * 
 * * **subscription** - Where Equinix provides software license, including end-to-end support, and bills for the service respectively.
 * * **BYOL** - [bring your own license] Where customer brings his own, already procured device software license. There are no charges associated with such license. It is the only licensing mode for `self-configured` devices.
 * 
 * ## Example Usage
 * ### example 1
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var dc = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("DC")
 *             .build());
 * 
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var csr1000VHa = new Device("csr1000VHa", DeviceArgs.builder()
 *             .name("tf-csr1000v-p")
 *             .throughput(500)
 *             .throughputUnit("Mbps")
 *             .metroCode(dc.applyValue(_dc -> _dc.metroCode()))
 *             .typeCode("CSR1000V")
 *             .selfManaged(false)
 *             .connectivity("INTERNET-ACCESS")
 *             .byol(false)
 *             .packageCode("SEC")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .hostname("csr1000v-p")
 *             .termLength(12)
 *             .accountNumber(dc.applyValue(_dc -> _dc.number()))
 *             .version("16.09.05")
 *             .coreCount(2)
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("tf-csr1000v-s")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .hostname("csr1000v-s")
 *                 .notifications(                
 *                     "john}{@literal @}{@code equinix.com",
 *                     "marry}{@literal @}{@code equinix.com")
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 2
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0VendorConfigurationArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1VendorConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var panwCluster = new Device("panwCluster", DeviceArgs.builder()
 *             .name("tf-panw")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("PA-VM")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("VM100")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("10.1.3")
 *             .interfaceCount(10)
 *             .coreCount(2)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .aclTemplateId("0bff6e05-f0e7-44cd-804a-25b92b835f8b")
 *             .clusterDetails(DeviceClusterDetailsArgs.builder()
 *                 .clusterName("tf-panw-cluster")
 *                 .node0(DeviceClusterDetailsNode0Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode0VendorConfigurationArgs.builder()
 *                         .hostname("panw-node0")
 *                         .build())
 *                     .licenseToken("licenseToken")
 *                     .build())
 *                 .node1(DeviceClusterDetailsNode1Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode1VendorConfigurationArgs.builder()
 *                         .hostname("panw-node1")
 *                         .build())
 *                     .licenseToken("licenseToken")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 3
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.NetworkFile;
 * import com.pulumi.equinix.networkedge.NetworkFileArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var config = ctx.config();
 *         final var filepath = config.get("filepath").orElse("cloudInitFileFolder/TF-AVX-cloud-init-file.txt");
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var aviatrixCloudinitFile = new NetworkFile("aviatrixCloudinitFile", NetworkFileArgs.builder()
 *             .fileName("TF-AVX-cloud-init-file.txt")
 *             .content(StdFunctions.file(FileArgs.builder()
 *                 .input(filepath)
 *                 .build()).applyValue(_invoke -> _invoke.result()))
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .deviceTypeCode("AVIATRIX_EDGE_10")
 *             .processType("CLOUD_INIT")
 *             .selfManaged(true)
 *             .byol(true)
 *             .build());
 * 
 *         var aviatrixSingle = new Device("aviatrixSingle", DeviceArgs.builder()
 *             .name("tf-aviatrix")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("AVIATRIX_EDGE_10")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("john}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("6.9")
 *             .coreCount(2)
 *             .cloudInitFileId(aviatrixCloudinitFile.uuid())
 *             .aclTemplateId("c06150ea-b604-4ad1-832a-d63936e9b938")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 4
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .name("account-name")
 *             .metroCode("SV")
 *             .build());
 * 
 *         var c8KvSingle = new Device("c8KvSingle", DeviceArgs.builder()
 *             .name("tf-c8kv")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("C8000V")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("network-essentials")
 *             .notifications("test}{@literal @}{@code equinix.com")
 *             .hostname("C8KV")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("17.06.01a")
 *             .coreCount(2)
 *             .termLength(12)
 *             .licenseToken("valid-license-token")
 *             .additionalBandwidth(5)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test-username")
 *                 .keyName("valid-key-name")
 *                 .build())
 *             .aclTemplateId("3e548c02-9164-4197-aa23-05b1f644883c")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 5
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .name("account-name")
 *             .metroCode("SV")
 *             .build());
 * 
 *         var vsrxSingle = new Device("vsrxSingle", DeviceArgs.builder()
 *             .name("tf-c8kv-sdwan")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("VSRX")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("test}{@literal @}{@code equinix.com")
 *             .hostname("VSRX")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("23.2R1.13")
 *             .coreCount(2)
 *             .termLength(12)
 *             .additionalBandwidth(5)
 *             .projectId("a86d7112-d740-4758-9c9c-31e66373746b")
 *             .diverseDeviceId("ed7891bd-15b4-4f72-ac56-d96cfdacddcc")
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test-username")
 *                 .keyName("valid-key-name")
 *                 .build())
 *             .aclTemplateId("3e548c02-9164-4197-aa23-05b1f644883c")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 6
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.SshKey;
 * import com.pulumi.equinix.networkedge.SshKeyArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .name("account-name")
 *             .metroCode("SV")
 *             .build());
 * 
 *         var testPublicKey = new SshKey("testPublicKey", SshKeyArgs.builder()
 *             .name("key-name")
 *             .publicKey("ssh-dss key-value")
 *             .type("DSA")
 *             .build());
 * 
 *         var aristaHa = new Device("aristaHa", DeviceArgs.builder()
 *             .name("tf-arista-p")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("ARISTA-ROUTER")
 *             .selfManaged(true)
 *             .connectivity("PRIVATE")
 *             .byol(true)
 *             .packageCode("CloudEOS")
 *             .notifications("test}{@literal @}{@code equinix.com")
 *             .hostname("arista-p")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("4.29.0")
 *             .coreCount(4)
 *             .termLength(12)
 *             .additionalBandwidth(5)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test-username")
 *                 .keyName(testPublicKey.name())
 *                 .build())
 *             .aclTemplateId("c637a17b-7a6a-4486-924b-30e6c36904b0")
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("tf-arista-s")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .hostname("arista-s")
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .aclTemplateId("fee5e2c0-6198-4ce6-9cbd-bbe6c1dbe138")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 7
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.SshKey;
 * import com.pulumi.equinix.networkedge.SshKeyArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .name("account-name")
 *             .metroCode("SV")
 *             .build());
 * 
 *         var testPublicKey = new SshKey("testPublicKey", SshKeyArgs.builder()
 *             .name("key-name")
 *             .publicKey("ssh-dss key-value")
 *             .type("DSA")
 *             .build());
 * 
 *         var bluecatBddsHa = new Device("bluecatBddsHa", DeviceArgs.builder()
 *             .name("tf-bluecat-bdds-p")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("BLUECAT")
 *             .selfManaged(true)
 *             .connectivity("PRIVATE")
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("test}{@literal @}{@code equinix.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("9.6.0")
 *             .coreCount(2)
 *             .termLength(12)
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("hostname", "test"),
 *                 Map.entry("privateAddress", "x.x.x.x"),
 *                 Map.entry("privateCidrMask", "24"),
 *                 Map.entry("privateGateway", "x.x.x.x"),
 *                 Map.entry("licenseKey", "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"),
 *                 Map.entry("licenseId", "xxxxxxxxxxxxxxx")
 *             ))
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test-username")
 *                 .keyName(testPublicKey.name())
 *                 .build())
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("tf-bluecat-bdds-s")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .vendorConfiguration(Map.ofEntries(
 *                     Map.entry("hostname", "test"),
 *                     Map.entry("privateAddress", "x.x.x.x"),
 *                     Map.entry("privateCidrMask", "24"),
 *                     Map.entry("privateGateway", "x.x.x.x"),
 *                     Map.entry("licenseKey", "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"),
 *                     Map.entry("licenseId", "xxxxxxxxxxxxxxx")
 *                 ))
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 8
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.NetworkFile;
 * import com.pulumi.equinix.networkedge.NetworkFileArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .name("account-name")
 *             .metroCode("SV")
 *             .build());
 * 
 *         var bluecatEdgeServicePointCloudinitPrimaryFile = new NetworkFile("bluecatEdgeServicePointCloudinitPrimaryFile", NetworkFileArgs.builder()
 *             .fileName("TF-BLUECAT-ESP-cloud-init-file.txt")
 *             .content(StdFunctions.file(FileArgs.builder()
 *                 .input(filepath)
 *                 .build()).applyValue(_invoke -> _invoke.result()))
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .deviceTypeCode("BLUECAT-EDGE-SERVICE-POINT")
 *             .processType("CLOUD_INIT")
 *             .selfManaged(true)
 *             .byol(true)
 *             .build());
 * 
 *         var bluecatEdgeServicePointCloudinitSecondaryFile = new NetworkFile("bluecatEdgeServicePointCloudinitSecondaryFile", NetworkFileArgs.builder()
 *             .fileName("TF-BLUECAT-ESP-cloud-init-file.txt")
 *             .content(StdFunctions.file(FileArgs.builder()
 *                 .input(filepath)
 *                 .build()).applyValue(_invoke -> _invoke.result()))
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .deviceTypeCode("BLUECAT-EDGE-SERVICE-POINT")
 *             .processType("CLOUD_INIT")
 *             .selfManaged(true)
 *             .byol(true)
 *             .build());
 * 
 *         var bluecatEdgeServicePointHa = new Device("bluecatEdgeServicePointHa", DeviceArgs.builder()
 *             .name("tf-bluecat-edge-service-point-p")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("BLUECAT-EDGE-SERVICE-POINT")
 *             .selfManaged(true)
 *             .connectivity("PRIVATE")
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("test}{@literal @}{@code equinix.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .cloudInitFileId(bluecatEdgeServicePointCloudinitPrimaryFile.uuid())
 *             .version("4.6.3")
 *             .coreCount(4)
 *             .termLength(12)
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("tf-bluecat-edge-service-point-s")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .cloudInitFileId(bluecatEdgeServicePointCloudinitSecondaryFile.uuid())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example 9
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0VendorConfigurationArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1VendorConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var panwCluster = new Device("panwCluster", DeviceArgs.builder()
 *             .name("tf-panw")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("PA-VM")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("VM100")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("11.1.3")
 *             .interfaceCount(10)
 *             .coreCount(2)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .aclTemplateId("0bff6e05-f0e7-44cd-804a-25b92b835f8b")
 *             .clusterDetails(DeviceClusterDetailsArgs.builder()
 *                 .clusterName("tf-panw-cluster")
 *                 .node0(DeviceClusterDetailsNode0Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode0VendorConfigurationArgs.builder()
 *                         .hostname("panw-node0")
 *                         .panoramaIpAddress("x.x.x.x")
 *                         .panoramaAuthKey("xxxxxxxxxxx")
 *                         .build())
 *                     .licenseToken("licenseToken")
 *                     .build())
 *                 .node1(DeviceClusterDetailsNode1Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode1VendorConfigurationArgs.builder()
 *                         .hostname("panw-node1")
 *                         .panoramaIpAddress("x.x.x.x")
 *                         .panoramaAuthKey("xxxxxxxxxxx")
 *                         .build())
 *                     .licenseToken("licenseToken")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example Aviatrix Transit Edge
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.NetworkFile;
 * import com.pulumi.equinix.networkedge.NetworkFileArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var config = ctx.config();
 *         final var filepath = config.get("filepath").orElse("cloudInitFileFolder/TF-AVX-cloud-init-file.txt");
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var aviatrixCloudinitFile = new NetworkFile("aviatrixCloudinitFile", NetworkFileArgs.builder()
 *             .fileName("TF-AVX-cloud-init-file.txt")
 *             .content(StdFunctions.file(FileArgs.builder()
 *                 .input(filepath)
 *                 .build()).applyValue(_invoke -> _invoke.result()))
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .deviceTypeCode("AVIATRIX_TRANSIT_EDGE")
 *             .processType("CLOUD_INIT")
 *             .selfManaged(true)
 *             .byol(true)
 *             .build());
 * 
 *         var aviatrixTransitEdgeSingle = new Device("aviatrixTransitEdgeSingle", DeviceArgs.builder()
 *             .name("tf-aviatrix")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("AVIATRIX_TRANSIT_EDGE")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("john}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("7.2.a")
 *             .coreCount(2)
 *             .cloudInitFileId(aviatrixCloudinitFile.uuid())
 *             .aclTemplateId("c06150ea-b604-4ad1-832a-d63936e9b938")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example aruba edgeconnect ha device
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var aRUBAEDGECONNECTAM = new Device("aRUBAEDGECONNECTAM", DeviceArgs.builder()
 *             .name("TF_Aruba_Edge_Connect")
 *             .projectId("XXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("EDGECONNECT-SDWAN")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("EC-V")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("9.4.2.3")
 *             .coreCount(2)
 *             .termLength(1)
 *             .additionalBandwidth(50)
 *             .interfaceCount(32)
 *             .aclTemplateId("XXXXXXX")
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("accountKey", "xxxxx"),
 *                 Map.entry("accountName", "xxxx"),
 *                 Map.entry("applianceTag", "tests"),
 *                 Map.entry("hostname", "test")
 *             ))
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("TF_CHECKPOINT")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .aclTemplateId("XXXXXXX")
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .vendorConfiguration(Map.ofEntries(
 *                     Map.entry("accountKey", "xxxxx"),
 *                     Map.entry("accountName", "xxxx"),
 *                     Map.entry("applianceTag", "test"),
 *                     Map.entry("hostname", "test")
 *                 ))
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example c8000v byol without default password
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var c8000VByolWithtoutDefaultPassword = new Device("c8000VByolWithtoutDefaultPassword", DeviceArgs.builder()
 *             .name("tf-c8000v-byol")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("C8000V")
 *             .selfManaged(true)
 *             .byol(true)
 *             .generateDefaultPassword(false)
 *             .packageCode("VM100")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("17.11.01a")
 *             .interfaceCount(10)
 *             .coreCount(2)
 *             .tier(1)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .aclTemplateId("0bff6e05-f0e7-44cd-804a-25b92b835f8b")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example c8000v byol with bandwidth throughput
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var c8000VByolThroughput = new Device("c8000VByolThroughput", DeviceArgs.builder()
 *             .name("tf-c8000v-byol")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("C8000V")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("VM100")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("17.11.01a")
 *             .interfaceCount(10)
 *             .coreCount(2)
 *             .throughput(100)
 *             .throughputUnit("Mbps")
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .aclTemplateId("0bff6e05-f0e7-44cd-804a-25b92b835f8b")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example c8000v byol with bandwidth tier
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var c8000VByolTier = new Device("c8000VByolTier", DeviceArgs.builder()
 *             .name("tf-c8000v-byol")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("C8000V")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("VM100")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("17.11.01a")
 *             .interfaceCount(10)
 *             .coreCount(2)
 *             .tier(1)
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .aclTemplateId("0bff6e05-f0e7-44cd-804a-25b92b835f8b")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example checkpoint single device
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var cHECKPOINTSV = new Device("cHECKPOINTSV", DeviceArgs.builder()
 *             .name("TF_CHECKPOINT")
 *             .projectId("XXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("CGUARD")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("STD")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("R81.20")
 *             .hostname("test")
 *             .coreCount(2)
 *             .termLength(1)
 *             .additionalBandwidth(5)
 *             .aclTemplateId("XXXXXXX")
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("XXXXX")
 *                 .keyName("XXXXXX")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example cisco ftd cluster znpd
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode0VendorConfigurationArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1Args;
 * import com.pulumi.equinix.networkedge.inputs.DeviceClusterDetailsNode1VendorConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var ciscoFTDSV = new Device("ciscoFTDSV", DeviceArgs.builder()
 *             .name("TF_Cisco_NGFW_CLUSTER_ZNPD")
 *             .projectId("XXXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("Cisco_NGFW")
 *             .selfManaged(true)
 *             .connectivity("PRIVATE")
 *             .byol(true)
 *             .packageCode("FTDv10")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("7.0.4-55")
 *             .hostname("test")
 *             .coreCount(4)
 *             .termLength(1)
 *             .interfaceCount(10)
 *             .clusterDetails(DeviceClusterDetailsArgs.builder()
 *                 .clusterName("tf-ftd-cluster")
 *                 .node0(DeviceClusterDetailsNode0Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode0VendorConfigurationArgs.builder()
 *                         .hostname("test")
 *                         .activationKey("XXXXX")
 *                         .controller1("X.X.X.X")
 *                         .managementType("FMC")
 *                         .build())
 *                     .build())
 *                 .node1(DeviceClusterDetailsNode1Args.builder()
 *                     .vendorConfiguration(DeviceClusterDetailsNode1VendorConfigurationArgs.builder()
 *                         .hostname("test")
 *                         .managementType("FMC")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fortigate sdwan single device
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var fTNTSDWANSV = new Device("fTNTSDWANSV", DeviceArgs.builder()
 *             .name("TF_FTNT-SDWAN")
 *             .projectId("XXXXXXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("FG-SDWAN")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("VM02")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("7.0.14")
 *             .hostname("test")
 *             .coreCount(2)
 *             .termLength(1)
 *             .additionalBandwidth(50)
 *             .aclTemplateId("XXXXXXXX")
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("adminPassword", "XXXXX"),
 *                 Map.entry("controller1", "X.X.X.X")
 *             ))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example versa sdwan ha device
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var fTNTSDWANSV = new Device("fTNTSDWANSV", DeviceArgs.builder()
 *             .name("TF_VERSA-SDWAN")
 *             .projectId("XXXXXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("VERSA_SDWAN")
 *             .selfManaged(true)
 *             .byol(true)
 *             .packageCode("FLEX_VNF_2")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("21.2.3")
 *             .coreCount(2)
 *             .termLength(1)
 *             .additionalBandwidth(50)
 *             .aclTemplateId("XXXXXXXXX")
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("controller1", "X.X.X.X"),
 *                 Map.entry("controller2", "X.X.X.X"),
 *                 Map.entry("localId", "test}{@literal @}{@code test.com"),
 *                 Map.entry("remoteId", "test}{@literal @}{@code test.com"),
 *                 Map.entry("serialNumber", "4")
 *             ))
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("Praveena_TF_VERSA")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .aclTemplateId("XXXXXXXX")
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .vendorConfiguration(Map.ofEntries(
 *                     Map.entry("controller1", "X.X.X.X"),
 *                     Map.entry("controller2", "X.X.X.X"),
 *                     Map.entry("localId", "test}{@literal @}{@code test.com"),
 *                     Map.entry("remoteId", "test}{@literal @}{@code test.com"),
 *                     Map.entry("serialNumber", "4")
 *                 ))
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example vyos router ha device
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSecondaryDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var vYOSAM = new Device("vYOSAM", DeviceArgs.builder()
 *             .name("TF_VYOS")
 *             .projectId("XXXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("VYOS-ROUTER")
 *             .selfManaged(true)
 *             .byol(false)
 *             .packageCode("STD")
 *             .notifications("test}{@literal @}{@code eq.com")
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("1.4.1-2501")
 *             .hostname("test")
 *             .coreCount(2)
 *             .termLength(1)
 *             .additionalBandwidth(50)
 *             .aclTemplateId("XXXXXXXX")
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("xxxxxxxx")
 *                 .build())
 *             .secondaryDevice(DeviceSecondaryDeviceArgs.builder()
 *                 .name("TF_CHECKPOINT")
 *                 .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *                 .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *                 .hostname("test")
 *                 .aclTemplateId("XXXXXXXXXXX")
 *                 .notifications("test}{@literal @}{@code eq.com")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example zscaler appc
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var zscalerAppcSingle = new Device("zscalerAppcSingle", DeviceArgs.builder()
 *             .name("tf-zscaler-appc")
 *             .projectId("XXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("ZSCALER-APPC")
 *             .selfManaged(true)
 *             .byol(true)
 *             .connectivity("PRIVATE")
 *             .packageCode("STD")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("23.395.1")
 *             .interfaceCount(1)
 *             .coreCount(4)
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("provisioningKey", "XXXXXXXXXX"),
 *                 Map.entry("hostname", "XXXX")
 *             ))
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example zscaler pse
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.networkedge.NetworkedgeFunctions;
 * import com.pulumi.equinix.networkedge.inputs.GetAccountArgs;
 * import com.pulumi.equinix.networkedge.Device;
 * import com.pulumi.equinix.networkedge.DeviceArgs;
 * import com.pulumi.equinix.networkedge.inputs.DeviceSshKeyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var sv = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()
 *             .metroCode("SV")
 *             .build());
 * 
 *         var zscalerPseSingle = new Device("zscalerPseSingle", DeviceArgs.builder()
 *             .name("tf-zscaler-pse")
 *             .projectId("XXXXXX")
 *             .metroCode(sv.applyValue(_sv -> _sv.metroCode()))
 *             .typeCode("ZSCALER-PSE")
 *             .selfManaged(true)
 *             .byol(true)
 *             .connectivity("PRIVATE")
 *             .packageCode("STD")
 *             .notifications(            
 *                 "john}{@literal @}{@code equinix.com",
 *                 "marry}{@literal @}{@code equinix.com",
 *                 "fred}{@literal @}{@code equinix.com")
 *             .termLength(12)
 *             .accountNumber(sv.applyValue(_sv -> _sv.number()))
 *             .version("23.395.1")
 *             .interfaceCount(1)
 *             .coreCount(4)
 *             .vendorConfiguration(Map.ofEntries(
 *                 Map.entry("provisioningKey", "XXXXXXXXXX"),
 *                 Map.entry("hostname", "XXXX")
 *             ))
 *             .sshKey(DeviceSshKeyArgs.builder()
 *                 .username("test")
 *                 .keyName("test-key")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 * ## Import
 * 
 * This resource can be imported using an existing ID:
 * 
 * ```sh
 * $ pulumi import equinix:networkedge/device:Device example {existing_id}
 * ```
 * 
 * The `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported.
 * 
 */
@ResourceType(type="equinix:networkedge/device:Device")
public class Device extends com.pulumi.resources.CustomResource {
    /**
     * Billing account number for a device.
     * 
     */
    @Export(name="accountNumber", refs={String.class}, tree="[0]")
    private Output<String> accountNumber;

    /**
     * @return Billing account number for a device.
     * 
     */
    public Output<String> accountNumber() {
        return this.accountNumber;
    }
    /**
     * Identifier of a WAN interface ACL template that will be applied on the device.
     * 
     */
    @Export(name="aclTemplateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> aclTemplateId;

    /**
     * @return Identifier of a WAN interface ACL template that will be applied on the device.
     * 
     */
    public Output<Optional<String>> aclTemplateId() {
        return Codegen.optional(this.aclTemplateId);
    }
    /**
     * Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
     * 
     */
    @Export(name="additionalBandwidth", refs={Integer.class}, tree="[0]")
    private Output<Integer> additionalBandwidth;

    /**
     * @return Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
     * 
     */
    public Output<Integer> additionalBandwidth() {
        return this.additionalBandwidth;
    }
    /**
     * (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    @Export(name="asn", refs={Integer.class}, tree="[0]")
    private Output<Integer> asn;

    /**
     * @return (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    public Output<Integer> asn() {
        return this.asn;
    }
    /**
     * Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
     * 
     */
    @Export(name="byol", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> byol;

    /**
     * @return Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
     * 
     */
    public Output<Optional<Boolean>> byol() {
        return Codegen.optional(this.byol);
    }
    /**
     * Identifier of a cloud init file that will be applied on the device.
     * 
     */
    @Export(name="cloudInitFileId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cloudInitFileId;

    /**
     * @return Identifier of a cloud init file that will be applied on the device.
     * 
     */
    public Output<Optional<String>> cloudInitFileId() {
        return Codegen.optional(this.cloudInitFileId);
    }
    /**
     * An object that has the cluster details. See Cluster Details below for more details.
     * 
     */
    @Export(name="clusterDetails", refs={DeviceClusterDetails.class}, tree="[0]")
    private Output</* @Nullable */ DeviceClusterDetails> clusterDetails;

    /**
     * @return An object that has the cluster details. See Cluster Details below for more details.
     * 
     */
    public Output<Optional<DeviceClusterDetails>> clusterDetails() {
        return Codegen.optional(this.clusterDetails);
    }
    /**
     * Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
     * 
     */
    @Export(name="connectivity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectivity;

    /**
     * @return Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
     * 
     */
    public Output<Optional<String>> connectivity() {
        return Codegen.optional(this.connectivity);
    }
    /**
     * Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
     * 
     */
    @Export(name="coreCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> coreCount;

    /**
     * @return Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
     * 
     */
    public Output<Integer> coreCount() {
        return this.coreCount;
    }
    /**
     * Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
     * 
     */
    @Export(name="diverseDeviceId", refs={String.class}, tree="[0]")
    private Output<String> diverseDeviceId;

    /**
     * @return Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
     * 
     */
    public Output<String> diverseDeviceId() {
        return this.diverseDeviceId;
    }
    /**
     * Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
     * 
     */
    @Export(name="diverseDeviceName", refs={String.class}, tree="[0]")
    private Output<String> diverseDeviceName;

    /**
     * @return Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
     * 
     */
    public Output<String> diverseDeviceName() {
        return this.diverseDeviceName;
    }
    /**
     * Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
     * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
     * 
     */
    @Export(name="generateDefaultPassword", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> generateDefaultPassword;

    /**
     * @return Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
     * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
     * 
     */
    public Output<Optional<Boolean>> generateDefaultPassword() {
        return Codegen.optional(this.generateDefaultPassword);
    }
    /**
     * Device hostname prefix.
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output<String> hostname;

    /**
     * @return Device hostname prefix.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }
    /**
     * Device location Equinix Business Exchange name.
     * 
     */
    @Export(name="ibx", refs={String.class}, tree="[0]")
    private Output<String> ibx;

    /**
     * @return Device location Equinix Business Exchange name.
     * 
     */
    public Output<String> ibx() {
        return this.ibx;
    }
    /**
     * Number of network interfaces on a device. If not specified, default number for a given device type will be used.
     * 
     */
    @Export(name="interfaceCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> interfaceCount;

    /**
     * @return Number of network interfaces on a device. If not specified, default number for a given device type will be used.
     * 
     */
    public Output<Integer> interfaceCount() {
        return this.interfaceCount;
    }
    /**
     * List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    @Export(name="interfaces", refs={List.class,DeviceInterface.class}, tree="[0,1]")
    private Output<List<DeviceInterface>> interfaces;

    /**
     * @return List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    public Output<List<DeviceInterface>> interfaces() {
        return this.interfaces;
    }
    /**
     * Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    @Export(name="licenseFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> licenseFile;

    /**
     * @return Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    public Output<Optional<String>> licenseFile() {
        return Codegen.optional(this.licenseFile);
    }
    /**
     * Identifier of a license file that will be applied on the device.
     * 
     */
    @Export(name="licenseFileId", refs={String.class}, tree="[0]")
    private Output<String> licenseFileId;

    /**
     * @return Identifier of a license file that will be applied on the device.
     * 
     */
    public Output<String> licenseFileId() {
        return this.licenseFileId;
    }
    /**
     * Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    @Export(name="licenseStatus", refs={String.class}, tree="[0]")
    private Output<String> licenseStatus;

    /**
     * @return Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    public Output<String> licenseStatus() {
        return this.licenseStatus;
    }
    /**
     * License Token applicable for some device types in BYOL licensing mode.
     * 
     */
    @Export(name="licenseToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> licenseToken;

    /**
     * @return License Token applicable for some device types in BYOL licensing mode.
     * 
     */
    public Output<Optional<String>> licenseToken() {
        return Codegen.optional(this.licenseToken);
    }
    /**
     * Device location metro code.
     * 
     */
    @Export(name="metroCode", refs={String.class}, tree="[0]")
    private Output<String> metroCode;

    /**
     * @return Device location metro code.
     * 
     */
    public Output<String> metroCode() {
        return this.metroCode;
    }
    /**
     * Identifier of an MGMT interface ACL template that will be applied on the device.
     * 
     */
    @Export(name="mgmtAclTemplateUuid", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mgmtAclTemplateUuid;

    /**
     * @return Identifier of an MGMT interface ACL template that will be applied on the device.
     * 
     */
    public Output<Optional<String>> mgmtAclTemplateUuid() {
        return Codegen.optional(this.mgmtAclTemplateUuid);
    }
    /**
     * Device name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Device name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of email addresses that will receive device status notifications.
     * 
     */
    @Export(name="notifications", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> notifications;

    /**
     * @return List of email addresses that will receive device status notifications.
     * 
     */
    public Output<List<String>> notifications() {
        return this.notifications;
    }
    /**
     * Name/number used to identify device order on the invoice.
     * 
     */
    @Export(name="orderReference", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orderReference;

    /**
     * @return Name/number used to identify device order on the invoice.
     * 
     */
    public Output<Optional<String>> orderReference() {
        return Codegen.optional(this.orderReference);
    }
    /**
     * Device software package code.
     * 
     */
    @Export(name="packageCode", refs={String.class}, tree="[0]")
    private Output<String> packageCode;

    /**
     * @return Device software package code.
     * 
     */
    public Output<String> packageCode() {
        return this.packageCode;
    }
    /**
     * Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Purchase order number associated with a device order.
     * 
     */
    @Export(name="purchaseOrderNumber", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> purchaseOrderNumber;

    /**
     * @return Purchase order number associated with a device order.
     * 
     */
    public Output<Optional<String>> purchaseOrderNumber() {
        return Codegen.optional(this.purchaseOrderNumber);
    }
    /**
     * Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    @Export(name="redundancyType", refs={String.class}, tree="[0]")
    private Output<String> redundancyType;

    /**
     * @return Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    public Output<String> redundancyType() {
        return this.redundancyType;
    }
    /**
     * Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    @Export(name="redundantId", refs={String.class}, tree="[0]")
    private Output<String> redundantId;

    /**
     * @return Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    public Output<String> redundantId() {
        return this.redundantId;
    }
    /**
     * Device location region.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return Device location region.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
     * 
     */
    @Export(name="secondaryDevice", refs={DeviceSecondaryDevice.class}, tree="[0]")
    private Output</* @Nullable */ DeviceSecondaryDevice> secondaryDevice;

    /**
     * @return Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
     * 
     */
    public Output<Optional<DeviceSecondaryDevice>> secondaryDevice() {
        return Codegen.optional(this.secondaryDevice);
    }
    /**
     * Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
     * 
     */
    @Export(name="selfManaged", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> selfManaged;

    /**
     * @return Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
     * 
     */
    public Output<Optional<Boolean>> selfManaged() {
        return Codegen.optional(this.selfManaged);
    }
    /**
     * IP address of SSH enabled interface on the device.
     * 
     */
    @Export(name="sshIpAddress", refs={String.class}, tree="[0]")
    private Output<String> sshIpAddress;

    /**
     * @return IP address of SSH enabled interface on the device.
     * 
     */
    public Output<String> sshIpAddress() {
        return this.sshIpAddress;
    }
    /**
     * FQDN of SSH enabled interface on the device.
     * 
     */
    @Export(name="sshIpFqdn", refs={String.class}, tree="[0]")
    private Output<String> sshIpFqdn;

    /**
     * @return FQDN of SSH enabled interface on the device.
     * 
     */
    public Output<String> sshIpFqdn() {
        return this.sshIpFqdn;
    }
    /**
     * Definition of SSH key that will be provisioned on a device
     * 
     */
    @Export(name="sshKey", refs={DeviceSshKey.class}, tree="[0]")
    private Output</* @Nullable */ DeviceSshKey> sshKey;

    /**
     * @return Definition of SSH key that will be provisioned on a device
     * 
     */
    public Output<Optional<DeviceSshKey>> sshKey() {
        return Codegen.optional(this.sshKey);
    }
    /**
     * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Device term length.
     * 
     */
    @Export(name="termLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> termLength;

    /**
     * @return Device term length.
     * 
     */
    public Output<Integer> termLength() {
        return this.termLength;
    }
    /**
     * Device license throughput.
     * 
     */
    @Export(name="throughput", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> throughput;

    /**
     * @return Device license throughput.
     * 
     */
    public Output<Optional<Integer>> throughput() {
        return Codegen.optional(this.throughput);
    }
    /**
     * License throughput unit. One of `Mbps` or `Gbps`.
     * 
     */
    @Export(name="throughputUnit", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> throughputUnit;

    /**
     * @return License throughput unit. One of `Mbps` or `Gbps`.
     * 
     */
    public Output<Optional<String>> throughputUnit() {
        return Codegen.optional(this.throughputUnit);
    }
    /**
     * Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
     * 
     */
    @Export(name="tier", refs={Integer.class}, tree="[0]")
    private Output<Integer> tier;

    /**
     * @return Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
     * 
     */
    public Output<Integer> tier() {
        return this.tier;
    }
    /**
     * Device type code.
     * 
     */
    @Export(name="typeCode", refs={String.class}, tree="[0]")
    private Output<String> typeCode;

    /**
     * @return Device type code.
     * 
     */
    public Output<String> typeCode() {
        return this.typeCode;
    }
    /**
     * Device unique identifier.
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Device unique identifier.
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }
    /**
     * Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey)
     * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
     * 
     */
    @Export(name="vendorConfiguration", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> vendorConfiguration;

    /**
     * @return Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey)
     * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
     * 
     */
    public Output<Map<String,String>> vendorConfiguration() {
        return this.vendorConfiguration;
    }
    /**
     * Device software software version.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Device software software version.
     * 
     */
    public Output<String> version() {
        return this.version;
    }
    /**
     * device interface id picked for WAN
     * 
     */
    @Export(name="wanInterfaceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> wanInterfaceId;

    /**
     * @return device interface id picked for WAN
     * 
     */
    public Output<Optional<String>> wanInterfaceId() {
        return Codegen.optional(this.wanInterfaceId);
    }
    /**
     * Device location zone code.
     * 
     */
    @Export(name="zoneCode", refs={String.class}, tree="[0]")
    private Output<String> zoneCode;

    /**
     * @return Device location zone code.
     * 
     */
    public Output<String> zoneCode() {
        return this.zoneCode;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Device(java.lang.String name) {
        this(name, DeviceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Device(java.lang.String name, DeviceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Device(java.lang.String name, DeviceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:networkedge/device:Device", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Device(java.lang.String name, Output<java.lang.String> id, @Nullable DeviceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:networkedge/device:Device", name, state, makeResourceOptions(options, id), false);
    }

    private static DeviceArgs makeArgs(DeviceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DeviceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/equinix")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Device get(java.lang.String name, Output<java.lang.String> id, @Nullable DeviceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Device(name, id, state, options);
    }
}
