// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.PortPhysicalPortDemarcationPointArgs;
import com.equinix.pulumi.fabric.inputs.PortPhysicalPortInterfaceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortPhysicalPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortPhysicalPortArgs Empty = new PortPhysicalPortArgs();

    /**
     * Customer physical port
     * 
     */
    @Import(name="demarcationPoint", required=true)
    private Output<PortPhysicalPortDemarcationPointArgs> demarcationPoint;

    /**
     * @return Customer physical port
     * 
     */
    public Output<PortPhysicalPortDemarcationPointArgs> demarcationPoint() {
        return this.demarcationPoint;
    }

    /**
     * Physical port interface
     * 
     */
    @Import(name="interface")
    private @Nullable Output<PortPhysicalPortInterfaceArgs> interface_;

    /**
     * @return Physical port interface
     * 
     */
    public Optional<Output<PortPhysicalPortInterfaceArgs>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * Physical Port type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Physical Port type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PortPhysicalPortArgs() {}

    private PortPhysicalPortArgs(PortPhysicalPortArgs $) {
        this.demarcationPoint = $.demarcationPoint;
        this.interface_ = $.interface_;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortPhysicalPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortPhysicalPortArgs $;

        public Builder() {
            $ = new PortPhysicalPortArgs();
        }

        public Builder(PortPhysicalPortArgs defaults) {
            $ = new PortPhysicalPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param demarcationPoint Customer physical port
         * 
         * @return builder
         * 
         */
        public Builder demarcationPoint(Output<PortPhysicalPortDemarcationPointArgs> demarcationPoint) {
            $.demarcationPoint = demarcationPoint;
            return this;
        }

        /**
         * @param demarcationPoint Customer physical port
         * 
         * @return builder
         * 
         */
        public Builder demarcationPoint(PortPhysicalPortDemarcationPointArgs demarcationPoint) {
            return demarcationPoint(Output.of(demarcationPoint));
        }

        /**
         * @param interface_ Physical port interface
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<PortPhysicalPortInterfaceArgs> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ Physical port interface
         * 
         * @return builder
         * 
         */
        public Builder interface_(PortPhysicalPortInterfaceArgs interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param type Physical Port type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Physical Port type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PortPhysicalPortArgs build() {
            if ($.demarcationPoint == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortArgs", "demarcationPoint");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortArgs", "type");
            }
            return $;
        }
    }

}
