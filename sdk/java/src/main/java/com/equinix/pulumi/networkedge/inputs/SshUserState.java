// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SshUserState extends com.pulumi.resources.ResourceArgs {

    public static final SshUserState Empty = new SshUserState();

    /**
     * list of device identifiers to which user will have access.
     * 
     */
    @Import(name="deviceIds")
    private @Nullable Output<List<String>> deviceIds;

    /**
     * @return list of device identifiers to which user will have access.
     * 
     */
    public Optional<Output<List<String>>> deviceIds() {
        return Optional.ofNullable(this.deviceIds);
    }

    /**
     * SSH user password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return SSH user password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * SSH user login name.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return SSH user login name.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * SSH user unique identifier.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return SSH user unique identifier.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private SshUserState() {}

    private SshUserState(SshUserState $) {
        this.deviceIds = $.deviceIds;
        this.password = $.password;
        this.username = $.username;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SshUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SshUserState $;

        public Builder() {
            $ = new SshUserState();
        }

        public Builder(SshUserState defaults) {
            $ = new SshUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceIds list of device identifiers to which user will have access.
         * 
         * @return builder
         * 
         */
        public Builder deviceIds(@Nullable Output<List<String>> deviceIds) {
            $.deviceIds = deviceIds;
            return this;
        }

        /**
         * @param deviceIds list of device identifiers to which user will have access.
         * 
         * @return builder
         * 
         */
        public Builder deviceIds(List<String> deviceIds) {
            return deviceIds(Output.of(deviceIds));
        }

        /**
         * @param deviceIds list of device identifiers to which user will have access.
         * 
         * @return builder
         * 
         */
        public Builder deviceIds(String... deviceIds) {
            return deviceIds(List.of(deviceIds));
        }

        /**
         * @param password SSH user password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password SSH user password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username SSH user login name.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username SSH user login name.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param uuid SSH user unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid SSH user unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public SshUserState build() {
            return $;
        }
    }

}
