// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.metal;

import com.equinix.pulumi.equinix.Utilities;
import com.equinix.pulumi.equinix.metal.ConnectionArgs;
import com.equinix.pulumi.equinix.metal.inputs.ConnectionState;
import com.equinix.pulumi.equinix.metal.outputs.ConnectionPort;
import com.equinix.pulumi.equinix.metal.outputs.ConnectionServiceToken;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="equinix:metal/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Description for the connection resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description for the connection resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Facility where the connection will be created.
     * 
     */
    @Export(name="facility", refs={String.class}, tree="[0]")
    private Output<String> facility;

    /**
     * @return Facility where the connection will be created.
     * 
     */
    public Output<String> facility() {
        return this.facility;
    }
    /**
     * Metro where the connection will be created.
     * 
     */
    @Export(name="metro", refs={String.class}, tree="[0]")
    private Output<String> metro;

    /**
     * @return Metro where the connection will be created.
     * 
     */
    public Output<String> metro() {
        return this.metro;
    }
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    /**
     * @return Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
     * 
     */
    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * Name of the connection resource
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the connection resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * ID of the organization where the connection is scoped to.
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return ID of the organization where the connection is scoped to.
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of
     * port is described in documentation of the
     * equinix.metal.Connection datasource.
     * 
     */
    @Export(name="ports", refs={List.class,ConnectionPort.class}, tree="[0,1]")
    private Output<List<ConnectionPort>> ports;

    /**
     * @return List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of
     * port is described in documentation of the
     * equinix.metal.Connection datasource.
     * 
     */
    public Output<List<ConnectionPort>> ports() {
        return this.ports;
    }
    /**
     * ID of the project where the connection is scoped to, must be set for.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return ID of the project where the connection is scoped to, must be set for.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Connection redundancy - redundant or primary.
     * 
     */
    @Export(name="redundancy", refs={String.class}, tree="[0]")
    private Output<String> redundancy;

    /**
     * @return Connection redundancy - redundant or primary.
     * 
     */
    public Output<String> redundancy() {
        return this.redundancy;
    }
    /**
     * Only used with shared connection. Type of service token to use for the connection, a_side or z_side
     * 
     */
    @Export(name="serviceTokenType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceTokenType;

    /**
     * @return Only used with shared connection. Type of service token to use for the connection, a_side or z_side
     * 
     */
    public Output<Optional<String>> serviceTokenType() {
        return Codegen.optional(this.serviceTokenType);
    }
    /**
     * List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Connection datasource.
     * 
     */
    @Export(name="serviceTokens", refs={List.class,ConnectionServiceToken.class}, tree="[0,1]")
    private Output<List<ConnectionServiceToken>> serviceTokens;

    /**
     * @return List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Connection datasource.
     * 
     */
    public Output<List<ConnectionServiceToken>> serviceTokens() {
        return this.serviceTokens;
    }
    /**
     * Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
     * 
     */
    @Export(name="speed", refs={String.class}, tree="[0]")
    private Output<String> speed;

    /**
     * @return Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
     * 
     */
    public Output<String> speed() {
        return this.speed;
    }
    /**
     * Status of the connection resource.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the connection resource.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * String list of tags.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return String list of tags.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
     * 
     * @deprecated
     * If your organization already has connection service tokens enabled, use `service_tokens` instead
     * 
     */
    @Deprecated /* If your organization already has connection service tokens enabled, use `service_tokens` instead */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Connection type - dedicated or shared.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Connection type - dedicated or shared.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
     * 
     */
    @Export(name="vlans", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> vlans;

    /**
     * @return Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
     * 
     */
    public Output<Optional<List<Integer>>> vlans() {
        return Codegen.optional(this.vlans);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/connection:Connection", name, args == null ? ConnectionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Connection(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/connection:Connection", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(String name, Output<String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
