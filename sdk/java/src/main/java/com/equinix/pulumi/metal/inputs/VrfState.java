// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VrfState extends com.pulumi.resources.ResourceArgs {

    public static final VrfState Empty = new VrfState();

    /**
     * Description of the VRF
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the VRF
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     * 
     */
    @Import(name="ipRanges")
    private @Nullable Output<List<String>> ipRanges;

    /**
     * @return All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     * 
     */
    public Optional<Output<List<String>>> ipRanges() {
        return Optional.ofNullable(this.ipRanges);
    }

    /**
     * The 4-byte ASN set on the VRF.
     * 
     */
    @Import(name="localAsn")
    private @Nullable Output<Integer> localAsn;

    /**
     * @return The 4-byte ASN set on the VRF.
     * 
     */
    public Optional<Output<Integer>> localAsn() {
        return Optional.ofNullable(this.localAsn);
    }

    /**
     * Metro ID or Code where the VRF will be deployed
     * 
     */
    @Import(name="metro")
    private @Nullable Output<String> metro;

    /**
     * @return Metro ID or Code where the VRF will be deployed
     * 
     */
    public Optional<Output<String>> metro() {
        return Optional.ofNullable(this.metro);
    }

    /**
     * User-supplied name of the VRF, unique to the project
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return User-supplied name of the VRF, unique to the project
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Project ID where the VRF will be deployed
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project ID where the VRF will be deployed
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private VrfState() {}

    private VrfState(VrfState $) {
        this.description = $.description;
        this.ipRanges = $.ipRanges;
        this.localAsn = $.localAsn;
        this.metro = $.metro;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VrfState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VrfState $;

        public Builder() {
            $ = new VrfState();
        }

        public Builder(VrfState defaults) {
            $ = new VrfState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the VRF
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the VRF
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipRanges All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(@Nullable Output<List<String>> ipRanges) {
            $.ipRanges = ipRanges;
            return this;
        }

        /**
         * @param ipRanges All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(List<String> ipRanges) {
            return ipRanges(Output.of(ipRanges));
        }

        /**
         * @param ipRanges All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
         * 
         * @return builder
         * 
         */
        public Builder ipRanges(String... ipRanges) {
            return ipRanges(List.of(ipRanges));
        }

        /**
         * @param localAsn The 4-byte ASN set on the VRF.
         * 
         * @return builder
         * 
         */
        public Builder localAsn(@Nullable Output<Integer> localAsn) {
            $.localAsn = localAsn;
            return this;
        }

        /**
         * @param localAsn The 4-byte ASN set on the VRF.
         * 
         * @return builder
         * 
         */
        public Builder localAsn(Integer localAsn) {
            return localAsn(Output.of(localAsn));
        }

        /**
         * @param metro Metro ID or Code where the VRF will be deployed
         * 
         * @return builder
         * 
         */
        public Builder metro(@Nullable Output<String> metro) {
            $.metro = metro;
            return this;
        }

        /**
         * @param metro Metro ID or Code where the VRF will be deployed
         * 
         * @return builder
         * 
         */
        public Builder metro(String metro) {
            return metro(Output.of(metro));
        }

        /**
         * @param name User-supplied name of the VRF, unique to the project
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name User-supplied name of the VRF, unique to the project
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Project ID where the VRF will be deployed
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID where the VRF will be deployed
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public VrfState build() {
            return $;
        }
    }

}
