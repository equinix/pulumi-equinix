// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetRouteAggregationsFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRouteAggregationsFilterArgs Empty = new GetRouteAggregationsFilterArgs();

    /**
     * Operators to use on your filtered field with the values given. One of [ =, !=, &gt;, &gt;=, &lt;, &lt;=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Operators to use on your filtered field with the values given. One of [ =, !=, &gt;, &gt;=, &lt;, &lt;=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
     * 
     */
    @Import(name="property", required=true)
    private Output<String> property;

    /**
     * @return possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
     * 
     */
    public Output<String> property() {
        return this.property;
    }

    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private GetRouteAggregationsFilterArgs() {}

    private GetRouteAggregationsFilterArgs(GetRouteAggregationsFilterArgs $) {
        this.operator = $.operator;
        this.property = $.property;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteAggregationsFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteAggregationsFilterArgs $;

        public Builder() {
            $ = new GetRouteAggregationsFilterArgs();
        }

        public Builder(GetRouteAggregationsFilterArgs defaults) {
            $ = new GetRouteAggregationsFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator Operators to use on your filtered field with the values given. One of [ =, !=, &gt;, &gt;=, &lt;, &lt;=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operators to use on your filtered field with the values given. One of [ =, !=, &gt;, &gt;=, &lt;, &lt;=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param property possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
         * 
         * @return builder
         * 
         */
        public Builder property(Output<String> property) {
            $.property = property;
            return this;
        }

        /**
         * @param property possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            return property(Output.of(property));
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetRouteAggregationsFilterArgs build() {
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("GetRouteAggregationsFilterArgs", "operator");
            }
            if ($.property == null) {
                throw new MissingRequiredPropertyException("GetRouteAggregationsFilterArgs", "property");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("GetRouteAggregationsFilterArgs", "values");
            }
            return $;
        }
    }

}
