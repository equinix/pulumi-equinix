// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceIpAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceIpAddressArgs Empty = new DeviceIpAddressArgs();

    /**
     * CIDR suffix for IP block assigned to this device
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<Integer> cidr;

    /**
     * @return CIDR suffix for IP block assigned to this device
     * 
     */
    public Optional<Output<Integer>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * IDs of reservations to pick the blocks from
     * 
     */
    @Import(name="reservationIds")
    private @Nullable Output<List<String>> reservationIds;

    /**
     * @return IDs of reservations to pick the blocks from
     * 
     */
    public Optional<Output<List<String>>> reservationIds() {
        return Optional.ofNullable(this.reservationIds);
    }

    /**
     * one of public*ipv4,private*ipv4,public_ipv6
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return one of public*ipv4,private*ipv4,public_ipv6
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DeviceIpAddressArgs() {}

    private DeviceIpAddressArgs(DeviceIpAddressArgs $) {
        this.cidr = $.cidr;
        this.reservationIds = $.reservationIds;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceIpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceIpAddressArgs $;

        public Builder() {
            $ = new DeviceIpAddressArgs();
        }

        public Builder(DeviceIpAddressArgs defaults) {
            $ = new DeviceIpAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr CIDR suffix for IP block assigned to this device
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<Integer> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr CIDR suffix for IP block assigned to this device
         * 
         * @return builder
         * 
         */
        public Builder cidr(Integer cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param reservationIds IDs of reservations to pick the blocks from
         * 
         * @return builder
         * 
         */
        public Builder reservationIds(@Nullable Output<List<String>> reservationIds) {
            $.reservationIds = reservationIds;
            return this;
        }

        /**
         * @param reservationIds IDs of reservations to pick the blocks from
         * 
         * @return builder
         * 
         */
        public Builder reservationIds(List<String> reservationIds) {
            return reservationIds(Output.of(reservationIds));
        }

        /**
         * @param reservationIds IDs of reservations to pick the blocks from
         * 
         * @return builder
         * 
         */
        public Builder reservationIds(String... reservationIds) {
            return reservationIds(List.of(reservationIds));
        }

        /**
         * @param type one of public*ipv4,private*ipv4,public_ipv6
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type one of public*ipv4,private*ipv4,public_ipv6
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DeviceIpAddressArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
