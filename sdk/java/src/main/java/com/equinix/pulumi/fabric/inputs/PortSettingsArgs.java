// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class PortSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortSettingsArgs Empty = new PortSettingsArgs();

    /**
     * Billing package for the port being ordered
     * 
     */
    @Import(name="packageType", required=true)
    private Output<String> packageType;

    /**
     * @return Billing package for the port being ordered
     * 
     */
    public Output<String> packageType() {
        return this.packageType;
    }

    /**
     * Indicates whether this is a dedicated customer cage or a shared neutral cage
     * 
     */
    @Import(name="sharedPortType", required=true)
    private Output<Boolean> sharedPortType;

    /**
     * @return Indicates whether this is a dedicated customer cage or a shared neutral cage
     * 
     */
    public Output<Boolean> sharedPortType() {
        return this.sharedPortType;
    }

    private PortSettingsArgs() {}

    private PortSettingsArgs(PortSettingsArgs $) {
        this.packageType = $.packageType;
        this.sharedPortType = $.sharedPortType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortSettingsArgs $;

        public Builder() {
            $ = new PortSettingsArgs();
        }

        public Builder(PortSettingsArgs defaults) {
            $ = new PortSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param packageType Billing package for the port being ordered
         * 
         * @return builder
         * 
         */
        public Builder packageType(Output<String> packageType) {
            $.packageType = packageType;
            return this;
        }

        /**
         * @param packageType Billing package for the port being ordered
         * 
         * @return builder
         * 
         */
        public Builder packageType(String packageType) {
            return packageType(Output.of(packageType));
        }

        /**
         * @param sharedPortType Indicates whether this is a dedicated customer cage or a shared neutral cage
         * 
         * @return builder
         * 
         */
        public Builder sharedPortType(Output<Boolean> sharedPortType) {
            $.sharedPortType = sharedPortType;
            return this;
        }

        /**
         * @param sharedPortType Indicates whether this is a dedicated customer cage or a shared neutral cage
         * 
         * @return builder
         * 
         */
        public Builder sharedPortType(Boolean sharedPortType) {
            return sharedPortType(Output.of(sharedPortType));
        }

        public PortSettingsArgs build() {
            if ($.packageType == null) {
                throw new MissingRequiredPropertyException("PortSettingsArgs", "packageType");
            }
            if ($.sharedPortType == null) {
                throw new MissingRequiredPropertyException("PortSettingsArgs", "sharedPortType");
            }
            return $;
        }
    }

}
