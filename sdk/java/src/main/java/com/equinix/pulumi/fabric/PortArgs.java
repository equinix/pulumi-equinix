// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.PortAccountArgs;
import com.equinix.pulumi.fabric.inputs.PortAdditionalInfoArgs;
import com.equinix.pulumi.fabric.inputs.PortDeviceArgs;
import com.equinix.pulumi.fabric.inputs.PortEncapsulationArgs;
import com.equinix.pulumi.fabric.inputs.PortLocationArgs;
import com.equinix.pulumi.fabric.inputs.PortNotificationArgs;
import com.equinix.pulumi.fabric.inputs.PortOrderArgs;
import com.equinix.pulumi.fabric.inputs.PortPhysicalPortArgs;
import com.equinix.pulumi.fabric.inputs.PortProjectArgs;
import com.equinix.pulumi.fabric.inputs.PortRedundancyArgs;
import com.equinix.pulumi.fabric.inputs.PortSettingsArgs;
import com.equinix.pulumi.fabric.inputs.PortTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortArgs Empty = new PortArgs();

    /**
     * Port order account details
     * 
     */
    @Import(name="account", required=true)
    private Output<PortAccountArgs> account;

    /**
     * @return Port order account details
     * 
     */
    public Output<PortAccountArgs> account() {
        return this.account;
    }

    /**
     * List of key/value objects to provide additional context to the Port order
     * 
     */
    @Import(name="additionalInfos")
    private @Nullable Output<List<PortAdditionalInfoArgs>> additionalInfos;

    /**
     * @return List of key/value objects to provide additional context to the Port order
     * 
     */
    public Optional<Output<List<PortAdditionalInfoArgs>>> additionalInfos() {
        return Optional.ofNullable(this.additionalInfos);
    }

    /**
     * Connection type that is used from the port after creation
     * 
     */
    @Import(name="connectivitySourceType", required=true)
    private Output<String> connectivitySourceType;

    /**
     * @return Connection type that is used from the port after creation
     * 
     */
    public Output<String> connectivitySourceType() {
        return this.connectivitySourceType;
    }

    /**
     * IBX code where the port will be located
     * 
     */
    @Import(name="demarcationPointIbx", required=true)
    private Output<String> demarcationPointIbx;

    /**
     * @return IBX code where the port will be located
     * 
     */
    public Output<String> demarcationPointIbx() {
        return this.demarcationPointIbx;
    }

    /**
     * Port device configuration
     * 
     */
    @Import(name="device")
    private @Nullable Output<PortDeviceArgs> device;

    /**
     * @return Port device configuration
     * 
     */
    public Optional<Output<PortDeviceArgs>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Port encapsulation settings
     * 
     */
    @Import(name="encapsulation", required=true)
    private Output<PortEncapsulationArgs> encapsulation;

    /**
     * @return Port encapsulation settings
     * 
     */
    public Output<PortEncapsulationArgs> encapsulation() {
        return this.encapsulation;
    }

    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    @Import(name="lagEnabled", required=true)
    private Output<Boolean> lagEnabled;

    /**
     * @return Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    public Output<Boolean> lagEnabled() {
        return this.lagEnabled;
    }

    /**
     * Location details for the port order
     * 
     */
    @Import(name="location", required=true)
    private Output<PortLocationArgs> location;

    /**
     * @return Location details for the port order
     * 
     */
    public Output<PortLocationArgs> location() {
        return this.location;
    }

    /**
     * Designated name of the port
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Designated name of the port
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of notification types and the registered users to receive those notification types
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<PortNotificationArgs>> notifications;

    /**
     * @return List of notification types and the registered users to receive those notification types
     * 
     */
    public Output<List<PortNotificationArgs>> notifications() {
        return this.notifications;
    }

    /**
     * Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    @Import(name="order")
    private @Nullable Output<PortOrderArgs> order;

    /**
     * @return Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    public Optional<Output<PortOrderArgs>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * Physical ports that will implement this port order
     * 
     */
    @Import(name="physicalPorts", required=true)
    private Output<List<PortPhysicalPortArgs>> physicalPorts;

    /**
     * @return Physical ports that will implement this port order
     * 
     */
    public Output<List<PortPhysicalPortArgs>> physicalPorts() {
        return this.physicalPorts;
    }

    /**
     * Number of physical ports in the Port Order
     * 
     */
    @Import(name="physicalPortsCount", required=true)
    private Output<Integer> physicalPortsCount;

    /**
     * @return Number of physical ports in the Port Order
     * 
     */
    public Output<Integer> physicalPortsCount() {
        return this.physicalPortsCount;
    }

    /**
     * Physical Ports Speed in Mbps
     * 
     */
    @Import(name="physicalPortsSpeed", required=true)
    private Output<Integer> physicalPortsSpeed;

    /**
     * @return Physical Ports Speed in Mbps
     * 
     */
    public Output<Integer> physicalPortsSpeed() {
        return this.physicalPortsSpeed;
    }

    /**
     * Physical Ports Type
     * 
     */
    @Import(name="physicalPortsType", required=true)
    private Output<String> physicalPortsType;

    /**
     * @return Physical Ports Type
     * 
     */
    public Output<String> physicalPortsType() {
        return this.physicalPortsType;
    }

    /**
     * Port order project details
     * 
     */
    @Import(name="project", required=true)
    private Output<PortProjectArgs> project;

    /**
     * @return Port order project details
     * 
     */
    public Output<PortProjectArgs> project() {
        return this.project;
    }

    /**
     * Port redundancy settings
     * 
     */
    @Import(name="redundancy", required=true)
    private Output<PortRedundancyArgs> redundancy;

    /**
     * @return Port redundancy settings
     * 
     */
    public Output<PortRedundancyArgs> redundancy() {
        return this.redundancy;
    }

    /**
     * Port order configuration settings
     * 
     */
    @Import(name="settings", required=true)
    private Output<PortSettingsArgs> settings;

    /**
     * @return Port order configuration settings
     * 
     */
    public Output<PortSettingsArgs> settings() {
        return this.settings;
    }

    @Import(name="timeouts")
    private @Nullable Output<PortTimeoutsArgs> timeouts;

    public Optional<Output<PortTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of the port order request
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the port order request
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PortArgs() {}

    private PortArgs(PortArgs $) {
        this.account = $.account;
        this.additionalInfos = $.additionalInfos;
        this.connectivitySourceType = $.connectivitySourceType;
        this.demarcationPointIbx = $.demarcationPointIbx;
        this.device = $.device;
        this.encapsulation = $.encapsulation;
        this.lagEnabled = $.lagEnabled;
        this.location = $.location;
        this.name = $.name;
        this.notifications = $.notifications;
        this.order = $.order;
        this.physicalPorts = $.physicalPorts;
        this.physicalPortsCount = $.physicalPortsCount;
        this.physicalPortsSpeed = $.physicalPortsSpeed;
        this.physicalPortsType = $.physicalPortsType;
        this.project = $.project;
        this.redundancy = $.redundancy;
        this.settings = $.settings;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortArgs $;

        public Builder() {
            $ = new PortArgs();
        }

        public Builder(PortArgs defaults) {
            $ = new PortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Port order account details
         * 
         * @return builder
         * 
         */
        public Builder account(Output<PortAccountArgs> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Port order account details
         * 
         * @return builder
         * 
         */
        public Builder account(PortAccountArgs account) {
            return account(Output.of(account));
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(@Nullable Output<List<PortAdditionalInfoArgs>> additionalInfos) {
            $.additionalInfos = additionalInfos;
            return this;
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(List<PortAdditionalInfoArgs> additionalInfos) {
            return additionalInfos(Output.of(additionalInfos));
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(PortAdditionalInfoArgs... additionalInfos) {
            return additionalInfos(List.of(additionalInfos));
        }

        /**
         * @param connectivitySourceType Connection type that is used from the port after creation
         * 
         * @return builder
         * 
         */
        public Builder connectivitySourceType(Output<String> connectivitySourceType) {
            $.connectivitySourceType = connectivitySourceType;
            return this;
        }

        /**
         * @param connectivitySourceType Connection type that is used from the port after creation
         * 
         * @return builder
         * 
         */
        public Builder connectivitySourceType(String connectivitySourceType) {
            return connectivitySourceType(Output.of(connectivitySourceType));
        }

        /**
         * @param demarcationPointIbx IBX code where the port will be located
         * 
         * @return builder
         * 
         */
        public Builder demarcationPointIbx(Output<String> demarcationPointIbx) {
            $.demarcationPointIbx = demarcationPointIbx;
            return this;
        }

        /**
         * @param demarcationPointIbx IBX code where the port will be located
         * 
         * @return builder
         * 
         */
        public Builder demarcationPointIbx(String demarcationPointIbx) {
            return demarcationPointIbx(Output.of(demarcationPointIbx));
        }

        /**
         * @param device Port device configuration
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<PortDeviceArgs> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device Port device configuration
         * 
         * @return builder
         * 
         */
        public Builder device(PortDeviceArgs device) {
            return device(Output.of(device));
        }

        /**
         * @param encapsulation Port encapsulation settings
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(Output<PortEncapsulationArgs> encapsulation) {
            $.encapsulation = encapsulation;
            return this;
        }

        /**
         * @param encapsulation Port encapsulation settings
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(PortEncapsulationArgs encapsulation) {
            return encapsulation(Output.of(encapsulation));
        }

        /**
         * @param lagEnabled Boolean value to enable the created port with Link Aggregation Groups
         * 
         * @return builder
         * 
         */
        public Builder lagEnabled(Output<Boolean> lagEnabled) {
            $.lagEnabled = lagEnabled;
            return this;
        }

        /**
         * @param lagEnabled Boolean value to enable the created port with Link Aggregation Groups
         * 
         * @return builder
         * 
         */
        public Builder lagEnabled(Boolean lagEnabled) {
            return lagEnabled(Output.of(lagEnabled));
        }

        /**
         * @param location Location details for the port order
         * 
         * @return builder
         * 
         */
        public Builder location(Output<PortLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location details for the port order
         * 
         * @return builder
         * 
         */
        public Builder location(PortLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param name Designated name of the port
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Designated name of the port
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<PortNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<PortNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(PortNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param order Details of the Port Order such as purchaseOrder details and signature
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<PortOrderArgs> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Details of the Port Order such as purchaseOrder details and signature
         * 
         * @return builder
         * 
         */
        public Builder order(PortOrderArgs order) {
            return order(Output.of(order));
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(Output<List<PortPhysicalPortArgs>> physicalPorts) {
            $.physicalPorts = physicalPorts;
            return this;
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(List<PortPhysicalPortArgs> physicalPorts) {
            return physicalPorts(Output.of(physicalPorts));
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(PortPhysicalPortArgs... physicalPorts) {
            return physicalPorts(List.of(physicalPorts));
        }

        /**
         * @param physicalPortsCount Number of physical ports in the Port Order
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsCount(Output<Integer> physicalPortsCount) {
            $.physicalPortsCount = physicalPortsCount;
            return this;
        }

        /**
         * @param physicalPortsCount Number of physical ports in the Port Order
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsCount(Integer physicalPortsCount) {
            return physicalPortsCount(Output.of(physicalPortsCount));
        }

        /**
         * @param physicalPortsSpeed Physical Ports Speed in Mbps
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsSpeed(Output<Integer> physicalPortsSpeed) {
            $.physicalPortsSpeed = physicalPortsSpeed;
            return this;
        }

        /**
         * @param physicalPortsSpeed Physical Ports Speed in Mbps
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsSpeed(Integer physicalPortsSpeed) {
            return physicalPortsSpeed(Output.of(physicalPortsSpeed));
        }

        /**
         * @param physicalPortsType Physical Ports Type
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsType(Output<String> physicalPortsType) {
            $.physicalPortsType = physicalPortsType;
            return this;
        }

        /**
         * @param physicalPortsType Physical Ports Type
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsType(String physicalPortsType) {
            return physicalPortsType(Output.of(physicalPortsType));
        }

        /**
         * @param project Port order project details
         * 
         * @return builder
         * 
         */
        public Builder project(Output<PortProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Port order project details
         * 
         * @return builder
         * 
         */
        public Builder project(PortProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param redundancy Port redundancy settings
         * 
         * @return builder
         * 
         */
        public Builder redundancy(Output<PortRedundancyArgs> redundancy) {
            $.redundancy = redundancy;
            return this;
        }

        /**
         * @param redundancy Port redundancy settings
         * 
         * @return builder
         * 
         */
        public Builder redundancy(PortRedundancyArgs redundancy) {
            return redundancy(Output.of(redundancy));
        }

        /**
         * @param settings Port order configuration settings
         * 
         * @return builder
         * 
         */
        public Builder settings(Output<PortSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Port order configuration settings
         * 
         * @return builder
         * 
         */
        public Builder settings(PortSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        public Builder timeouts(@Nullable Output<PortTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(PortTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of the port order request
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the port order request
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PortArgs build() {
            if ($.account == null) {
                throw new MissingRequiredPropertyException("PortArgs", "account");
            }
            if ($.connectivitySourceType == null) {
                throw new MissingRequiredPropertyException("PortArgs", "connectivitySourceType");
            }
            if ($.demarcationPointIbx == null) {
                throw new MissingRequiredPropertyException("PortArgs", "demarcationPointIbx");
            }
            if ($.encapsulation == null) {
                throw new MissingRequiredPropertyException("PortArgs", "encapsulation");
            }
            if ($.lagEnabled == null) {
                throw new MissingRequiredPropertyException("PortArgs", "lagEnabled");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PortArgs", "location");
            }
            if ($.notifications == null) {
                throw new MissingRequiredPropertyException("PortArgs", "notifications");
            }
            if ($.physicalPorts == null) {
                throw new MissingRequiredPropertyException("PortArgs", "physicalPorts");
            }
            if ($.physicalPortsCount == null) {
                throw new MissingRequiredPropertyException("PortArgs", "physicalPortsCount");
            }
            if ($.physicalPortsSpeed == null) {
                throw new MissingRequiredPropertyException("PortArgs", "physicalPortsSpeed");
            }
            if ($.physicalPortsType == null) {
                throw new MissingRequiredPropertyException("PortArgs", "physicalPortsType");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("PortArgs", "project");
            }
            if ($.redundancy == null) {
                throw new MissingRequiredPropertyException("PortArgs", "redundancy");
            }
            if ($.settings == null) {
                throw new MissingRequiredPropertyException("PortArgs", "settings");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("PortArgs", "type");
            }
            return $;
        }
    }

}
