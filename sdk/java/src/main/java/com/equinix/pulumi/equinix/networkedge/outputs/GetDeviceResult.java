// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge.outputs;

import com.equinix.pulumi.equinix.networkedge.outputs.GetDeviceClusterDetail;
import com.equinix.pulumi.equinix.networkedge.outputs.GetDeviceInterface;
import com.equinix.pulumi.equinix.networkedge.outputs.GetDeviceSecondaryDevice;
import com.equinix.pulumi.equinix.networkedge.outputs.GetDeviceSshKey;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDeviceResult {
    private String accountNumber;
    /**
     * @return Unique identifier of applied ACL template
     * 
     */
    private String aclTemplateId;
    private Integer additionalBandwidth;
    /**
     * @return Autonomous system number
     * 
     */
    private Integer asn;
    private Boolean byol;
    private List<GetDeviceClusterDetail> clusterDetails;
    private Integer coreCount;
    private String hostname;
    /**
     * @return Device location Equinix Business Exchange name
     * 
     */
    private String ibx;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer interfaceCount;
    /**
     * @return List of device interfaces
     * * `interface.#.id` - interface identifier
     * * `interface.#.name` - interface name
     * * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
     * * `interface.#.operational_status` - interface operational status (up or down)
     * * `interface.#.mac_address` - interface MAC address
     * * `interface.#.ip_address` - interface IP address
     * * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
     * * `interface.#.type` - interface type
     * 
     */
    private List<GetDeviceInterface> interfaces;
    private String licenseFile;
    /**
     * @return Unique identifier of applied license file
     * 
     */
    private String licenseFileId;
    /**
     * @return Device license registration status
     * * APPLYING_LICENSE
     * * REGISTERED
     * * APPLIED
     * * WAITING_FOR_CLUSTER_SETUP
     * * REGISTRATION_FAILED
     * 
     */
    private String licenseStatus;
    private String licenseToken;
    private String metroCode;
    private String mgmtAclTemplateUuid;
    private String name;
    private List<String> notifications;
    private String orderReference;
    private String packageCode;
    private String purchaseOrderNumber;
    /**
     * @return Device redundancy type applicable for HA devices, either
     * primary or secondary
     * 
     */
    private String redundancyType;
    /**
     * @return Unique identifier for a redundant device applicable for HA devices
     * 
     */
    private String redundantId;
    /**
     * @return Device location region
     * 
     */
    private String region;
    private List<GetDeviceSecondaryDevice> secondaryDevices;
    private Boolean selfManaged;
    /**
     * @return IP address of SSH enabled interface on the device
     * 
     */
    private String sshIpAddress;
    /**
     * @return FQDN of SSH enabled interface on the device
     * 
     */
    private String sshIpFqdn;
    private List<GetDeviceSshKey> sshKeys;
    /**
     * @return Device provisioning status
     * * INITIALIZING
     * * PROVISIONING
     * * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
     * * WAITING_FOR_PRIMARY
     * * WAITING_FOR_SECONDARY
     * * WAITING_FOR_REPLICA_CLUSTER_NODES
     * * CLUSTER_SETUP_IN_PROGRESS
     * * FAILED
     * * DEPROVISIONING
     * * DEPROVISIONED
     * 
     */
    private String status;
    private Integer termLength;
    private Integer throughput;
    private String throughputUnit;
    private String typeCode;
    /**
     * @return Device unique identifier
     * 
     */
    private String uuid;
    /**
     * @return Comma separated list of device states (from see `status` for full list) to be considered valid. Default is &#39;PROVISIONED&#39;.  Case insensitive.
     * 
     */
    private @Nullable String validStatusList;
    private Map<String,String> vendorConfiguration;
    private String version;
    private String wanInterfaceId;
    /**
     * @return Device location zone code
     * 
     */
    private String zoneCode;

    private GetDeviceResult() {}
    public String accountNumber() {
        return this.accountNumber;
    }
    /**
     * @return Unique identifier of applied ACL template
     * 
     */
    public String aclTemplateId() {
        return this.aclTemplateId;
    }
    public Integer additionalBandwidth() {
        return this.additionalBandwidth;
    }
    /**
     * @return Autonomous system number
     * 
     */
    public Integer asn() {
        return this.asn;
    }
    public Boolean byol() {
        return this.byol;
    }
    public List<GetDeviceClusterDetail> clusterDetails() {
        return this.clusterDetails;
    }
    public Integer coreCount() {
        return this.coreCount;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Device location Equinix Business Exchange name
     * 
     */
    public String ibx() {
        return this.ibx;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer interfaceCount() {
        return this.interfaceCount;
    }
    /**
     * @return List of device interfaces
     * * `interface.#.id` - interface identifier
     * * `interface.#.name` - interface name
     * * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
     * * `interface.#.operational_status` - interface operational status (up or down)
     * * `interface.#.mac_address` - interface MAC address
     * * `interface.#.ip_address` - interface IP address
     * * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
     * * `interface.#.type` - interface type
     * 
     */
    public List<GetDeviceInterface> interfaces() {
        return this.interfaces;
    }
    public String licenseFile() {
        return this.licenseFile;
    }
    /**
     * @return Unique identifier of applied license file
     * 
     */
    public String licenseFileId() {
        return this.licenseFileId;
    }
    /**
     * @return Device license registration status
     * * APPLYING_LICENSE
     * * REGISTERED
     * * APPLIED
     * * WAITING_FOR_CLUSTER_SETUP
     * * REGISTRATION_FAILED
     * 
     */
    public String licenseStatus() {
        return this.licenseStatus;
    }
    public String licenseToken() {
        return this.licenseToken;
    }
    public String metroCode() {
        return this.metroCode;
    }
    public String mgmtAclTemplateUuid() {
        return this.mgmtAclTemplateUuid;
    }
    public String name() {
        return this.name;
    }
    public List<String> notifications() {
        return this.notifications;
    }
    public String orderReference() {
        return this.orderReference;
    }
    public String packageCode() {
        return this.packageCode;
    }
    public String purchaseOrderNumber() {
        return this.purchaseOrderNumber;
    }
    /**
     * @return Device redundancy type applicable for HA devices, either
     * primary or secondary
     * 
     */
    public String redundancyType() {
        return this.redundancyType;
    }
    /**
     * @return Unique identifier for a redundant device applicable for HA devices
     * 
     */
    public String redundantId() {
        return this.redundantId;
    }
    /**
     * @return Device location region
     * 
     */
    public String region() {
        return this.region;
    }
    public List<GetDeviceSecondaryDevice> secondaryDevices() {
        return this.secondaryDevices;
    }
    public Boolean selfManaged() {
        return this.selfManaged;
    }
    /**
     * @return IP address of SSH enabled interface on the device
     * 
     */
    public String sshIpAddress() {
        return this.sshIpAddress;
    }
    /**
     * @return FQDN of SSH enabled interface on the device
     * 
     */
    public String sshIpFqdn() {
        return this.sshIpFqdn;
    }
    public List<GetDeviceSshKey> sshKeys() {
        return this.sshKeys;
    }
    /**
     * @return Device provisioning status
     * * INITIALIZING
     * * PROVISIONING
     * * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
     * * WAITING_FOR_PRIMARY
     * * WAITING_FOR_SECONDARY
     * * WAITING_FOR_REPLICA_CLUSTER_NODES
     * * CLUSTER_SETUP_IN_PROGRESS
     * * FAILED
     * * DEPROVISIONING
     * * DEPROVISIONED
     * 
     */
    public String status() {
        return this.status;
    }
    public Integer termLength() {
        return this.termLength;
    }
    public Integer throughput() {
        return this.throughput;
    }
    public String throughputUnit() {
        return this.throughputUnit;
    }
    public String typeCode() {
        return this.typeCode;
    }
    /**
     * @return Device unique identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Comma separated list of device states (from see `status` for full list) to be considered valid. Default is &#39;PROVISIONED&#39;.  Case insensitive.
     * 
     */
    public Optional<String> validStatusList() {
        return Optional.ofNullable(this.validStatusList);
    }
    public Map<String,String> vendorConfiguration() {
        return this.vendorConfiguration;
    }
    public String version() {
        return this.version;
    }
    public String wanInterfaceId() {
        return this.wanInterfaceId;
    }
    /**
     * @return Device location zone code
     * 
     */
    public String zoneCode() {
        return this.zoneCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountNumber;
        private String aclTemplateId;
        private Integer additionalBandwidth;
        private Integer asn;
        private Boolean byol;
        private List<GetDeviceClusterDetail> clusterDetails;
        private Integer coreCount;
        private String hostname;
        private String ibx;
        private String id;
        private Integer interfaceCount;
        private List<GetDeviceInterface> interfaces;
        private String licenseFile;
        private String licenseFileId;
        private String licenseStatus;
        private String licenseToken;
        private String metroCode;
        private String mgmtAclTemplateUuid;
        private String name;
        private List<String> notifications;
        private String orderReference;
        private String packageCode;
        private String purchaseOrderNumber;
        private String redundancyType;
        private String redundantId;
        private String region;
        private List<GetDeviceSecondaryDevice> secondaryDevices;
        private Boolean selfManaged;
        private String sshIpAddress;
        private String sshIpFqdn;
        private List<GetDeviceSshKey> sshKeys;
        private String status;
        private Integer termLength;
        private Integer throughput;
        private String throughputUnit;
        private String typeCode;
        private String uuid;
        private @Nullable String validStatusList;
        private Map<String,String> vendorConfiguration;
        private String version;
        private String wanInterfaceId;
        private String zoneCode;
        public Builder() {}
        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountNumber = defaults.accountNumber;
    	      this.aclTemplateId = defaults.aclTemplateId;
    	      this.additionalBandwidth = defaults.additionalBandwidth;
    	      this.asn = defaults.asn;
    	      this.byol = defaults.byol;
    	      this.clusterDetails = defaults.clusterDetails;
    	      this.coreCount = defaults.coreCount;
    	      this.hostname = defaults.hostname;
    	      this.ibx = defaults.ibx;
    	      this.id = defaults.id;
    	      this.interfaceCount = defaults.interfaceCount;
    	      this.interfaces = defaults.interfaces;
    	      this.licenseFile = defaults.licenseFile;
    	      this.licenseFileId = defaults.licenseFileId;
    	      this.licenseStatus = defaults.licenseStatus;
    	      this.licenseToken = defaults.licenseToken;
    	      this.metroCode = defaults.metroCode;
    	      this.mgmtAclTemplateUuid = defaults.mgmtAclTemplateUuid;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.orderReference = defaults.orderReference;
    	      this.packageCode = defaults.packageCode;
    	      this.purchaseOrderNumber = defaults.purchaseOrderNumber;
    	      this.redundancyType = defaults.redundancyType;
    	      this.redundantId = defaults.redundantId;
    	      this.region = defaults.region;
    	      this.secondaryDevices = defaults.secondaryDevices;
    	      this.selfManaged = defaults.selfManaged;
    	      this.sshIpAddress = defaults.sshIpAddress;
    	      this.sshIpFqdn = defaults.sshIpFqdn;
    	      this.sshKeys = defaults.sshKeys;
    	      this.status = defaults.status;
    	      this.termLength = defaults.termLength;
    	      this.throughput = defaults.throughput;
    	      this.throughputUnit = defaults.throughputUnit;
    	      this.typeCode = defaults.typeCode;
    	      this.uuid = defaults.uuid;
    	      this.validStatusList = defaults.validStatusList;
    	      this.vendorConfiguration = defaults.vendorConfiguration;
    	      this.version = defaults.version;
    	      this.wanInterfaceId = defaults.wanInterfaceId;
    	      this.zoneCode = defaults.zoneCode;
        }

        @CustomType.Setter
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = Objects.requireNonNull(accountNumber);
            return this;
        }
        @CustomType.Setter
        public Builder aclTemplateId(String aclTemplateId) {
            this.aclTemplateId = Objects.requireNonNull(aclTemplateId);
            return this;
        }
        @CustomType.Setter
        public Builder additionalBandwidth(Integer additionalBandwidth) {
            this.additionalBandwidth = Objects.requireNonNull(additionalBandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder asn(Integer asn) {
            this.asn = Objects.requireNonNull(asn);
            return this;
        }
        @CustomType.Setter
        public Builder byol(Boolean byol) {
            this.byol = Objects.requireNonNull(byol);
            return this;
        }
        @CustomType.Setter
        public Builder clusterDetails(List<GetDeviceClusterDetail> clusterDetails) {
            this.clusterDetails = Objects.requireNonNull(clusterDetails);
            return this;
        }
        public Builder clusterDetails(GetDeviceClusterDetail... clusterDetails) {
            return clusterDetails(List.of(clusterDetails));
        }
        @CustomType.Setter
        public Builder coreCount(Integer coreCount) {
            this.coreCount = Objects.requireNonNull(coreCount);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder ibx(String ibx) {
            this.ibx = Objects.requireNonNull(ibx);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder interfaceCount(Integer interfaceCount) {
            this.interfaceCount = Objects.requireNonNull(interfaceCount);
            return this;
        }
        @CustomType.Setter
        public Builder interfaces(List<GetDeviceInterface> interfaces) {
            this.interfaces = Objects.requireNonNull(interfaces);
            return this;
        }
        public Builder interfaces(GetDeviceInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder licenseFile(String licenseFile) {
            this.licenseFile = Objects.requireNonNull(licenseFile);
            return this;
        }
        @CustomType.Setter
        public Builder licenseFileId(String licenseFileId) {
            this.licenseFileId = Objects.requireNonNull(licenseFileId);
            return this;
        }
        @CustomType.Setter
        public Builder licenseStatus(String licenseStatus) {
            this.licenseStatus = Objects.requireNonNull(licenseStatus);
            return this;
        }
        @CustomType.Setter
        public Builder licenseToken(String licenseToken) {
            this.licenseToken = Objects.requireNonNull(licenseToken);
            return this;
        }
        @CustomType.Setter
        public Builder metroCode(String metroCode) {
            this.metroCode = Objects.requireNonNull(metroCode);
            return this;
        }
        @CustomType.Setter
        public Builder mgmtAclTemplateUuid(String mgmtAclTemplateUuid) {
            this.mgmtAclTemplateUuid = Objects.requireNonNull(mgmtAclTemplateUuid);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<String> notifications) {
            this.notifications = Objects.requireNonNull(notifications);
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder orderReference(String orderReference) {
            this.orderReference = Objects.requireNonNull(orderReference);
            return this;
        }
        @CustomType.Setter
        public Builder packageCode(String packageCode) {
            this.packageCode = Objects.requireNonNull(packageCode);
            return this;
        }
        @CustomType.Setter
        public Builder purchaseOrderNumber(String purchaseOrderNumber) {
            this.purchaseOrderNumber = Objects.requireNonNull(purchaseOrderNumber);
            return this;
        }
        @CustomType.Setter
        public Builder redundancyType(String redundancyType) {
            this.redundancyType = Objects.requireNonNull(redundancyType);
            return this;
        }
        @CustomType.Setter
        public Builder redundantId(String redundantId) {
            this.redundantId = Objects.requireNonNull(redundantId);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDevices(List<GetDeviceSecondaryDevice> secondaryDevices) {
            this.secondaryDevices = Objects.requireNonNull(secondaryDevices);
            return this;
        }
        public Builder secondaryDevices(GetDeviceSecondaryDevice... secondaryDevices) {
            return secondaryDevices(List.of(secondaryDevices));
        }
        @CustomType.Setter
        public Builder selfManaged(Boolean selfManaged) {
            this.selfManaged = Objects.requireNonNull(selfManaged);
            return this;
        }
        @CustomType.Setter
        public Builder sshIpAddress(String sshIpAddress) {
            this.sshIpAddress = Objects.requireNonNull(sshIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder sshIpFqdn(String sshIpFqdn) {
            this.sshIpFqdn = Objects.requireNonNull(sshIpFqdn);
            return this;
        }
        @CustomType.Setter
        public Builder sshKeys(List<GetDeviceSshKey> sshKeys) {
            this.sshKeys = Objects.requireNonNull(sshKeys);
            return this;
        }
        public Builder sshKeys(GetDeviceSshKey... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder termLength(Integer termLength) {
            this.termLength = Objects.requireNonNull(termLength);
            return this;
        }
        @CustomType.Setter
        public Builder throughput(Integer throughput) {
            this.throughput = Objects.requireNonNull(throughput);
            return this;
        }
        @CustomType.Setter
        public Builder throughputUnit(String throughputUnit) {
            this.throughputUnit = Objects.requireNonNull(throughputUnit);
            return this;
        }
        @CustomType.Setter
        public Builder typeCode(String typeCode) {
            this.typeCode = Objects.requireNonNull(typeCode);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            this.uuid = Objects.requireNonNull(uuid);
            return this;
        }
        @CustomType.Setter
        public Builder validStatusList(@Nullable String validStatusList) {
            this.validStatusList = validStatusList;
            return this;
        }
        @CustomType.Setter
        public Builder vendorConfiguration(Map<String,String> vendorConfiguration) {
            this.vendorConfiguration = Objects.requireNonNull(vendorConfiguration);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder wanInterfaceId(String wanInterfaceId) {
            this.wanInterfaceId = Objects.requireNonNull(wanInterfaceId);
            return this;
        }
        @CustomType.Setter
        public Builder zoneCode(String zoneCode) {
            this.zoneCode = Objects.requireNonNull(zoneCode);
            return this;
        }
        public GetDeviceResult build() {
            final var o = new GetDeviceResult();
            o.accountNumber = accountNumber;
            o.aclTemplateId = aclTemplateId;
            o.additionalBandwidth = additionalBandwidth;
            o.asn = asn;
            o.byol = byol;
            o.clusterDetails = clusterDetails;
            o.coreCount = coreCount;
            o.hostname = hostname;
            o.ibx = ibx;
            o.id = id;
            o.interfaceCount = interfaceCount;
            o.interfaces = interfaces;
            o.licenseFile = licenseFile;
            o.licenseFileId = licenseFileId;
            o.licenseStatus = licenseStatus;
            o.licenseToken = licenseToken;
            o.metroCode = metroCode;
            o.mgmtAclTemplateUuid = mgmtAclTemplateUuid;
            o.name = name;
            o.notifications = notifications;
            o.orderReference = orderReference;
            o.packageCode = packageCode;
            o.purchaseOrderNumber = purchaseOrderNumber;
            o.redundancyType = redundancyType;
            o.redundantId = redundantId;
            o.region = region;
            o.secondaryDevices = secondaryDevices;
            o.selfManaged = selfManaged;
            o.sshIpAddress = sshIpAddress;
            o.sshIpFqdn = sshIpFqdn;
            o.sshKeys = sshKeys;
            o.status = status;
            o.termLength = termLength;
            o.throughput = throughput;
            o.throughputUnit = throughputUnit;
            o.typeCode = typeCode;
            o.uuid = uuid;
            o.validStatusList = validStatusList;
            o.vendorConfiguration = vendorConfiguration;
            o.version = version;
            o.wanInterfaceId = wanInterfaceId;
            o.zoneCode = zoneCode;
            return o;
        }
    }
}
