// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamAlertRuleDetectionMethod {
    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    private @Nullable String criticalThreshold;
    /**
     * @return Stream alert rule metric operand
     * 
     */
    private @Nullable String operand;
    /**
     * @return Stream Alert Rule detection method type
     * 
     */
    private String type;
    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    private @Nullable String warningThreshold;
    /**
     * @return Stream alert rule metric window size
     * 
     */
    private @Nullable String windowSize;

    private StreamAlertRuleDetectionMethod() {}
    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    public Optional<String> criticalThreshold() {
        return Optional.ofNullable(this.criticalThreshold);
    }
    /**
     * @return Stream alert rule metric operand
     * 
     */
    public Optional<String> operand() {
        return Optional.ofNullable(this.operand);
    }
    /**
     * @return Stream Alert Rule detection method type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    public Optional<String> warningThreshold() {
        return Optional.ofNullable(this.warningThreshold);
    }
    /**
     * @return Stream alert rule metric window size
     * 
     */
    public Optional<String> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamAlertRuleDetectionMethod defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String criticalThreshold;
        private @Nullable String operand;
        private String type;
        private @Nullable String warningThreshold;
        private @Nullable String windowSize;
        public Builder() {}
        public Builder(StreamAlertRuleDetectionMethod defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.criticalThreshold = defaults.criticalThreshold;
    	      this.operand = defaults.operand;
    	      this.type = defaults.type;
    	      this.warningThreshold = defaults.warningThreshold;
    	      this.windowSize = defaults.windowSize;
        }

        @CustomType.Setter
        public Builder criticalThreshold(@Nullable String criticalThreshold) {

            this.criticalThreshold = criticalThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder operand(@Nullable String operand) {

            this.operand = operand;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("StreamAlertRuleDetectionMethod", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder warningThreshold(@Nullable String warningThreshold) {

            this.warningThreshold = warningThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder windowSize(@Nullable String windowSize) {

            this.windowSize = windowSize;
            return this;
        }
        public StreamAlertRuleDetectionMethod build() {
            final var _resultValue = new StreamAlertRuleDetectionMethod();
            _resultValue.criticalThreshold = criticalThreshold;
            _resultValue.operand = operand;
            _resultValue.type = type;
            _resultValue.warningThreshold = warningThreshold;
            _resultValue.windowSize = windowSize;
            return _resultValue;
        }
    }
}
