// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualCircuitArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualCircuitArgs Empty = new VirtualCircuitArgs();

    /**
     * UUID of Connection where the VC is scoped to.  Only used for dedicated connections
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return UUID of Connection where the VC is scoped to.  Only used for dedicated connections
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    @Import(name="customerIp")
    private @Nullable Output<String> customerIp;

    /**
     * @return The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    public Optional<Output<String>> customerIp() {
        return Optional.ofNullable(this.customerIp);
    }

    /**
     * The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
     * 
     */
    @Import(name="customerIpv6")
    private @Nullable Output<String> customerIpv6;

    /**
     * @return The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
     * 
     */
    public Optional<Output<String>> customerIpv6() {
        return Optional.ofNullable(this.customerIpv6);
    }

    /**
     * Description of the Virtual Circuit resource
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the Virtual Circuit resource
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The password that can be set for the VRF BGP peer
     * 
     */
    @Import(name="md5")
    private @Nullable Output<String> md5;

    /**
     * @return The password that can be set for the VRF BGP peer
     * 
     */
    public Optional<Output<String>> md5() {
        return Optional.ofNullable(this.md5);
    }

    /**
     * The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    @Import(name="metalIp")
    private @Nullable Output<String> metalIp;

    /**
     * @return The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    public Optional<Output<String>> metalIp() {
        return Optional.ofNullable(this.metalIp);
    }

    /**
     * The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
     * 
     */
    @Import(name="metalIpv6")
    private @Nullable Output<String> metalIpv6;

    /**
     * @return The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
     * 
     */
    public Optional<Output<String>> metalIpv6() {
        return Optional.ofNullable(this.metalIpv6);
    }

    /**
     * Name of the Virtual Circuit resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Virtual Circuit resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Equinix Metal network-to-network VLAN ID (optional when the connection has mode=tunnel)
     * 
     */
    @Import(name="nniVlan")
    private @Nullable Output<Integer> nniVlan;

    /**
     * @return Equinix Metal network-to-network VLAN ID (optional when the connection has mode=tunnel)
     * 
     */
    public Optional<Output<Integer>> nniVlan() {
        return Optional.ofNullable(this.nniVlan);
    }

    /**
     * The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the localAsn of the VRF.
     * 
     */
    @Import(name="peerAsn")
    private @Nullable Output<Integer> peerAsn;

    /**
     * @return The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the localAsn of the VRF.
     * 
     */
    public Optional<Output<Integer>> peerAsn() {
        return Optional.ofNullable(this.peerAsn);
    }

    /**
     * UUID of the Connection Port where the VC is scoped to
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return UUID of the Connection Port where the VC is scoped to
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * UUID of the Project where the VC is scoped to
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return UUID of the Project where the VC is scoped to
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
     * 
     */
    @Import(name="speed")
    private @Nullable Output<String> speed;

    /**
     * @return Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
     * 
     */
    public Optional<Output<String>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
     * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    @Import(name="subnetIpv6")
    private @Nullable Output<String> subnetIpv6;

    /**
     * @return A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
     * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    public Optional<Output<String>> subnetIpv6() {
        return Optional.ofNullable(this.subnetIpv6);
    }

    /**
     * Tags attached to the virtual circuit
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags attached to the virtual circuit
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * UUID of an existing VC to configure. Used in the case of shared interconnections where the VC has already been created.
     * 
     */
    @Import(name="virtualCircuitId")
    private @Nullable Output<String> virtualCircuitId;

    /**
     * @return UUID of an existing VC to configure. Used in the case of shared interconnections where the VC has already been created.
     * 
     */
    public Optional<Output<String>> virtualCircuitId() {
        return Optional.ofNullable(this.virtualCircuitId);
    }

    /**
     * UUID of the VLAN to associate
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<String> vlanId;

    /**
     * @return UUID of the VLAN to associate
     * 
     */
    public Optional<Output<String>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * UUID of the VRF to associate
     * 
     */
    @Import(name="vrfId")
    private @Nullable Output<String> vrfId;

    /**
     * @return UUID of the VRF to associate
     * 
     */
    public Optional<Output<String>> vrfId() {
        return Optional.ofNullable(this.vrfId);
    }

    private VirtualCircuitArgs() {}

    private VirtualCircuitArgs(VirtualCircuitArgs $) {
        this.connectionId = $.connectionId;
        this.customerIp = $.customerIp;
        this.customerIpv6 = $.customerIpv6;
        this.description = $.description;
        this.md5 = $.md5;
        this.metalIp = $.metalIp;
        this.metalIpv6 = $.metalIpv6;
        this.name = $.name;
        this.nniVlan = $.nniVlan;
        this.peerAsn = $.peerAsn;
        this.portId = $.portId;
        this.projectId = $.projectId;
        this.speed = $.speed;
        this.subnet = $.subnet;
        this.subnetIpv6 = $.subnetIpv6;
        this.tags = $.tags;
        this.virtualCircuitId = $.virtualCircuitId;
        this.vlanId = $.vlanId;
        this.vrfId = $.vrfId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualCircuitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualCircuitArgs $;

        public Builder() {
            $ = new VirtualCircuitArgs();
        }

        public Builder(VirtualCircuitArgs defaults) {
            $ = new VirtualCircuitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId UUID of Connection where the VC is scoped to.  Only used for dedicated connections
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId UUID of Connection where the VC is scoped to.  Only used for dedicated connections
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param customerIp The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder customerIp(@Nullable Output<String> customerIp) {
            $.customerIp = customerIp;
            return this;
        }

        /**
         * @param customerIp The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder customerIp(String customerIp) {
            return customerIp(Output.of(customerIp));
        }

        /**
         * @param customerIpv6 The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder customerIpv6(@Nullable Output<String> customerIpv6) {
            $.customerIpv6 = customerIpv6;
            return this;
        }

        /**
         * @param customerIpv6 The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder customerIpv6(String customerIpv6) {
            return customerIpv6(Output.of(customerIpv6));
        }

        /**
         * @param description Description of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param md5 The password that can be set for the VRF BGP peer
         * 
         * @return builder
         * 
         */
        public Builder md5(@Nullable Output<String> md5) {
            $.md5 = md5;
            return this;
        }

        /**
         * @param md5 The password that can be set for the VRF BGP peer
         * 
         * @return builder
         * 
         */
        public Builder md5(String md5) {
            return md5(Output.of(md5));
        }

        /**
         * @param metalIp The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder metalIp(@Nullable Output<String> metalIp) {
            $.metalIp = metalIp;
            return this;
        }

        /**
         * @param metalIp The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
         * 
         * @return builder
         * 
         */
        public Builder metalIp(String metalIp) {
            return metalIp(Output.of(metalIp));
        }

        /**
         * @param metalIpv6 The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder metalIpv6(@Nullable Output<String> metalIpv6) {
            $.metalIpv6 = metalIpv6;
            return this;
        }

        /**
         * @param metalIpv6 The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
         * 
         * @return builder
         * 
         */
        public Builder metalIpv6(String metalIpv6) {
            return metalIpv6(Output.of(metalIpv6));
        }

        /**
         * @param name Name of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Virtual Circuit resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nniVlan Equinix Metal network-to-network VLAN ID (optional when the connection has mode=tunnel)
         * 
         * @return builder
         * 
         */
        public Builder nniVlan(@Nullable Output<Integer> nniVlan) {
            $.nniVlan = nniVlan;
            return this;
        }

        /**
         * @param nniVlan Equinix Metal network-to-network VLAN ID (optional when the connection has mode=tunnel)
         * 
         * @return builder
         * 
         */
        public Builder nniVlan(Integer nniVlan) {
            return nniVlan(Output.of(nniVlan));
        }

        /**
         * @param peerAsn The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the localAsn of the VRF.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(@Nullable Output<Integer> peerAsn) {
            $.peerAsn = peerAsn;
            return this;
        }

        /**
         * @param peerAsn The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the localAsn of the VRF.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(Integer peerAsn) {
            return peerAsn(Output.of(peerAsn));
        }

        /**
         * @param portId UUID of the Connection Port where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId UUID of the Connection Port where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param projectId UUID of the Project where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId UUID of the Project where the VC is scoped to
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param speed Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
         * 
         * @return builder
         * 
         */
        public Builder speed(@Nullable Output<String> speed) {
            $.speed = speed;
            return this;
        }

        /**
         * @param speed Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
         * 
         * @return builder
         * 
         */
        public Builder speed(String speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param subnet A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
         * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
         * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
         * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
         * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param subnetIpv6 A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
         * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
         * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
         * 
         * @return builder
         * 
         */
        public Builder subnetIpv6(@Nullable Output<String> subnetIpv6) {
            $.subnetIpv6 = subnetIpv6;
            return this;
        }

        /**
         * @param subnetIpv6 A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
         * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
         * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
         * 
         * @return builder
         * 
         */
        public Builder subnetIpv6(String subnetIpv6) {
            return subnetIpv6(Output.of(subnetIpv6));
        }

        /**
         * @param tags Tags attached to the virtual circuit
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags attached to the virtual circuit
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags attached to the virtual circuit
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param virtualCircuitId UUID of an existing VC to configure. Used in the case of shared interconnections where the VC has already been created.
         * 
         * @return builder
         * 
         */
        public Builder virtualCircuitId(@Nullable Output<String> virtualCircuitId) {
            $.virtualCircuitId = virtualCircuitId;
            return this;
        }

        /**
         * @param virtualCircuitId UUID of an existing VC to configure. Used in the case of shared interconnections where the VC has already been created.
         * 
         * @return builder
         * 
         */
        public Builder virtualCircuitId(String virtualCircuitId) {
            return virtualCircuitId(Output.of(virtualCircuitId));
        }

        /**
         * @param vlanId UUID of the VLAN to associate
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId UUID of the VLAN to associate
         * 
         * @return builder
         * 
         */
        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vrfId UUID of the VRF to associate
         * 
         * @return builder
         * 
         */
        public Builder vrfId(@Nullable Output<String> vrfId) {
            $.vrfId = vrfId;
            return this;
        }

        /**
         * @param vrfId UUID of the VRF to associate
         * 
         * @return builder
         * 
         */
        public Builder vrfId(String vrfId) {
            return vrfId(Output.of(vrfId));
        }

        public VirtualCircuitArgs build() {
            if ($.portId == null) {
                throw new MissingRequiredPropertyException("VirtualCircuitArgs", "portId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("VirtualCircuitArgs", "projectId");
            }
            return $;
        }
    }

}
