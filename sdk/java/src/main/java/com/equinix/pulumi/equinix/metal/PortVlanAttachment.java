// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.metal;

import com.equinix.pulumi.equinix.Utilities;
import com.equinix.pulumi.equinix.metal.PortVlanAttachmentArgs;
import com.equinix.pulumi.equinix.metal.inputs.PortVlanAttachmentState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource to attach device ports to VLANs.
 * 
 * Device and VLAN must be in the same facility.
 * 
 * If you need this resource to add the port back to bond on removal, set `force_bond = true`.
 * 
 * To learn more about Layer 2 networking in Equinix Metal, refer to
 * 
 * * &lt;https://metal.equinix.com/developers/docs/networking/layer2/&gt;
 * * &lt;https://metal.equinix.com/developers/docs/networking/layer2-configs/&gt;
 * 
 * ## Example Usage
 * ### Hybrid network type
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Vlan;
 * import com.pulumi.equinix.metal.VlanArgs;
 * import com.pulumi.equinix.metal.Device;
 * import com.pulumi.equinix.metal.DeviceArgs;
 * import com.pulumi.equinix.metal.DeviceNetworkType;
 * import com.pulumi.equinix.metal.DeviceNetworkTypeArgs;
 * import com.pulumi.equinix.metal.PortVlanAttachment;
 * import com.pulumi.equinix.metal.PortVlanAttachmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testVlan = new Vlan(&#34;testVlan&#34;, VlanArgs.builder()        
 *             .description(&#34;VLAN in New Jersey&#34;)
 *             .facility(&#34;ny5&#34;)
 *             .projectId(local.project_id())
 *             .build());
 * 
 *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
 *             .hostname(&#34;test&#34;)
 *             .plan(&#34;c3.small.x86&#34;)
 *             .facilities(&#34;ny5&#34;)
 *             .operatingSystem(&#34;ubuntu_20_04&#34;)
 *             .billingCycle(&#34;hourly&#34;)
 *             .projectId(local.project_id())
 *             .build());
 * 
 *         var testDeviceNetworkType = new DeviceNetworkType(&#34;testDeviceNetworkType&#34;, DeviceNetworkTypeArgs.builder()        
 *             .deviceId(testDevice.id())
 *             .type(&#34;hybrid&#34;)
 *             .build());
 * 
 *         var testPortVlanAttachment = new PortVlanAttachment(&#34;testPortVlanAttachment&#34;, PortVlanAttachmentArgs.builder()        
 *             .deviceId(testDeviceNetworkType.id())
 *             .portName(&#34;eth1&#34;)
 *             .vlanVnid(testVlan.vxlan())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Layer 2 network
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Device;
 * import com.pulumi.equinix.metal.DeviceArgs;
 * import com.pulumi.equinix.metal.DeviceNetworkType;
 * import com.pulumi.equinix.metal.DeviceNetworkTypeArgs;
 * import com.pulumi.equinix.metal.Vlan;
 * import com.pulumi.equinix.metal.VlanArgs;
 * import com.pulumi.equinix.metal.PortVlanAttachment;
 * import com.pulumi.equinix.metal.PortVlanAttachmentArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testDevice = new Device(&#34;testDevice&#34;, DeviceArgs.builder()        
 *             .hostname(&#34;test&#34;)
 *             .plan(&#34;c3.small.x86&#34;)
 *             .facilities(&#34;ny5&#34;)
 *             .operatingSystem(&#34;ubuntu_20_04&#34;)
 *             .billingCycle(&#34;hourly&#34;)
 *             .projectId(local.project_id())
 *             .build());
 * 
 *         var testDeviceNetworkType = new DeviceNetworkType(&#34;testDeviceNetworkType&#34;, DeviceNetworkTypeArgs.builder()        
 *             .deviceId(testDevice.id())
 *             .type(&#34;layer2-individual&#34;)
 *             .build());
 * 
 *         var test1Vlan = new Vlan(&#34;test1Vlan&#34;, VlanArgs.builder()        
 *             .description(&#34;VLAN in New Jersey&#34;)
 *             .facility(&#34;ny5&#34;)
 *             .projectId(local.project_id())
 *             .build());
 * 
 *         var test2Vlan = new Vlan(&#34;test2Vlan&#34;, VlanArgs.builder()        
 *             .description(&#34;VLAN in New Jersey&#34;)
 *             .facility(&#34;ny5&#34;)
 *             .projectId(local.project_id())
 *             .build());
 * 
 *         var test1PortVlanAttachment = new PortVlanAttachment(&#34;test1PortVlanAttachment&#34;, PortVlanAttachmentArgs.builder()        
 *             .deviceId(testDeviceNetworkType.id())
 *             .vlanVnid(test1Vlan.vxlan())
 *             .portName(&#34;eth1&#34;)
 *             .build());
 * 
 *         var test2PortVlanAttachment = new PortVlanAttachment(&#34;test2PortVlanAttachment&#34;, PortVlanAttachmentArgs.builder()        
 *             .deviceId(testDeviceNetworkType.id())
 *             .vlanVnid(test2Vlan.vxlan())
 *             .portName(&#34;eth1&#34;)
 *             .native_(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(&#34;equinix_metal_port_vlan_attachment.test1&#34;)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ## Attribute Referece
 * 
 * In addition to all arguments above, the following attributes are exported:
 * 
 * * `id` - UUID of device port used in the assignment.
 * * `vlan_id` - UUID of VLAN API resource.
 * * `port_id` - UUID of device port.
 * 
 */
@ResourceType(type="equinix:metal/portVlanAttachment:PortVlanAttachment")
public class PortVlanAttachment extends com.pulumi.resources.CustomResource {
    /**
     * ID of device to be assigned to the VLAN.
     * 
     */
    @Export(name="deviceId", refs={String.class}, tree="[0]")
    private Output<String> deviceId;

    /**
     * @return ID of device to be assigned to the VLAN.
     * 
     */
    public Output<String> deviceId() {
        return this.deviceId;
    }
    /**
     * Add port back to the bond when this resource is removed. Default is
     * `false`.
     * 
     */
    @Export(name="forceBond", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceBond;

    /**
     * @return Add port back to the bond when this resource is removed. Default is
     * `false`.
     * 
     */
    public Output<Optional<Boolean>> forceBond() {
        return Codegen.optional(this.forceBond);
    }
    /**
     * Mark this VLAN a native VLAN on the port. This can be used only if this
     * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
     * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
     * like in the layer2-individual example above.
     * 
     */
    @Export(name="native", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> native_;

    /**
     * @return Mark this VLAN a native VLAN on the port. This can be used only if this
     * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
     * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
     * like in the layer2-individual example above.
     * 
     */
    public Output<Optional<Boolean>> native_() {
        return Codegen.optional(this.native_);
    }
    /**
     * UUID of device port
     * 
     */
    @Export(name="portId", refs={String.class}, tree="[0]")
    private Output<String> portId;

    /**
     * @return UUID of device port
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }
    /**
     * Name of network port to be assigned to the VLAN.
     * 
     */
    @Export(name="portName", refs={String.class}, tree="[0]")
    private Output<String> portName;

    /**
     * @return Name of network port to be assigned to the VLAN.
     * 
     */
    public Output<String> portName() {
        return this.portName;
    }
    /**
     * UUID of VLAN API resource
     * 
     */
    @Export(name="vlanId", refs={String.class}, tree="[0]")
    private Output<String> vlanId;

    /**
     * @return UUID of VLAN API resource
     * 
     */
    public Output<String> vlanId() {
        return this.vlanId;
    }
    /**
     * VXLAN Network Identifier.
     * 
     */
    @Export(name="vlanVnid", refs={Integer.class}, tree="[0]")
    private Output<Integer> vlanVnid;

    /**
     * @return VXLAN Network Identifier.
     * 
     */
    public Output<Integer> vlanVnid() {
        return this.vlanVnid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PortVlanAttachment(String name) {
        this(name, PortVlanAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PortVlanAttachment(String name, PortVlanAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PortVlanAttachment(String name, PortVlanAttachmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/portVlanAttachment:PortVlanAttachment", name, args == null ? PortVlanAttachmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PortVlanAttachment(String name, Output<String> id, @Nullable PortVlanAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/portVlanAttachment:PortVlanAttachment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PortVlanAttachment get(String name, Output<String> id, @Nullable PortVlanAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PortVlanAttachment(name, id, state, options);
    }
}
