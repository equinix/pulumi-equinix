// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.StreamProjectArgs;
import com.equinix.pulumi.fabric.inputs.StreamTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamArgs Empty = new StreamArgs();

    /**
     * Customer-provided description of the stream resource
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Customer-provided description of the stream resource
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Customer-provided name of the stream resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customer-provided name of the stream resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Equinix Project attribute object
     * 
     */
    @Import(name="project", required=true)
    private Output<StreamProjectArgs> project;

    /**
     * @return Equinix Project attribute object
     * 
     */
    public Output<StreamProjectArgs> project() {
        return this.project;
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamTimeoutsArgs> timeouts;

    public Optional<Output<StreamTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Equinix defined Streaming Type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Equinix defined Streaming Type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private StreamArgs() {}

    private StreamArgs(StreamArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.project = $.project;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamArgs $;

        public Builder() {
            $ = new StreamArgs();
        }

        public Builder(StreamArgs defaults) {
            $ = new StreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Customer-provided description of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Customer-provided description of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Customer-provided name of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customer-provided name of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project Equinix Project attribute object
         * 
         * @return builder
         * 
         */
        public Builder project(Output<StreamProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Equinix Project attribute object
         * 
         * @return builder
         * 
         */
        public Builder project(StreamProjectArgs project) {
            return project(Output.of(project));
        }

        public Builder timeouts(@Nullable Output<StreamTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Equinix defined Streaming Type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Equinix defined Streaming Type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StreamArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "description");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "project");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamArgs", "type");
            }
            return $;
        }
    }

}
