// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionASide;
import com.equinix.pulumi.fabric.outputs.GetConnectionAccount;
import com.equinix.pulumi.fabric.outputs.GetConnectionChangeLog;
import com.equinix.pulumi.fabric.outputs.GetConnectionNotification;
import com.equinix.pulumi.fabric.outputs.GetConnectionOperation;
import com.equinix.pulumi.fabric.outputs.GetConnectionOrder;
import com.equinix.pulumi.fabric.outputs.GetConnectionProject;
import com.equinix.pulumi.fabric.outputs.GetConnectionRedundancy;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSide;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionResult {
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    private GetConnectionASide aSide;
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    private GetConnectionAccount account;
    /**
     * @return Connection additional information
     * 
     */
    private List<Map<String,String>> additionalInfo;
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    private GetConnectionChangeLog changeLog;
    /**
     * @return Customer-provided connection description
     * 
     */
    private String description;
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    private String direction;
    /**
     * @return Connection URI information
     * 
     */
    private String href;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Connection property derived from access point locations
     * 
     */
    private Boolean isRemote;
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    private String name;
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    private List<GetConnectionNotification> notifications;
    /**
     * @return Connection type-specific operational data
     * 
     */
    private GetConnectionOperation operation;
    /**
     * @return Order details
     * 
     */
    private GetConnectionOrder order;
    /**
     * @return Project information
     * 
     */
    private GetConnectionProject project;
    /**
     * @return Connection Redundancy Configuration
     * 
     */
    private GetConnectionRedundancy redundancy;
    /**
     * @return Connection overall state
     * 
     */
    private String state;
    /**
     * @return Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, EC*VC
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    private String uuid;
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    private GetConnectionZSide zSide;

    private GetConnectionResult() {}
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    public GetConnectionASide aSide() {
        return this.aSide;
    }
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    public GetConnectionAccount account() {
        return this.account;
    }
    /**
     * @return Connection additional information
     * 
     */
    public List<Map<String,String>> additionalInfo() {
        return this.additionalInfo;
    }
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public GetConnectionChangeLog changeLog() {
        return this.changeLog;
    }
    /**
     * @return Customer-provided connection description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Connection URI information
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Connection property derived from access point locations
     * 
     */
    public Boolean isRemote() {
        return this.isRemote;
    }
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public List<GetConnectionNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Connection type-specific operational data
     * 
     */
    public GetConnectionOperation operation() {
        return this.operation;
    }
    /**
     * @return Order details
     * 
     */
    public GetConnectionOrder order() {
        return this.order;
    }
    /**
     * @return Project information
     * 
     */
    public GetConnectionProject project() {
        return this.project;
    }
    /**
     * @return Connection Redundancy Configuration
     * 
     */
    public GetConnectionRedundancy redundancy() {
        return this.redundancy;
    }
    /**
     * @return Connection overall state
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, EC*VC
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    public GetConnectionZSide zSide() {
        return this.zSide;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetConnectionASide aSide;
        private GetConnectionAccount account;
        private List<Map<String,String>> additionalInfo;
        private Integer bandwidth;
        private GetConnectionChangeLog changeLog;
        private String description;
        private String direction;
        private String href;
        private String id;
        private Boolean isRemote;
        private String name;
        private List<GetConnectionNotification> notifications;
        private GetConnectionOperation operation;
        private GetConnectionOrder order;
        private GetConnectionProject project;
        private GetConnectionRedundancy redundancy;
        private String state;
        private String type;
        private String uuid;
        private GetConnectionZSide zSide;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aSide = defaults.aSide;
    	      this.account = defaults.account;
    	      this.additionalInfo = defaults.additionalInfo;
    	      this.bandwidth = defaults.bandwidth;
    	      this.changeLog = defaults.changeLog;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.isRemote = defaults.isRemote;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.operation = defaults.operation;
    	      this.order = defaults.order;
    	      this.project = defaults.project;
    	      this.redundancy = defaults.redundancy;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.zSide = defaults.zSide;
        }

        @CustomType.Setter
        public Builder aSide(GetConnectionASide aSide) {
            if (aSide == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "aSide");
            }
            this.aSide = aSide;
            return this;
        }
        @CustomType.Setter
        public Builder account(GetConnectionAccount account) {
            if (account == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "account");
            }
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder additionalInfo(List<Map<String,String>> additionalInfo) {
            if (additionalInfo == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "additionalInfo");
            }
            this.additionalInfo = additionalInfo;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder changeLog(GetConnectionChangeLog changeLog) {
            if (changeLog == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "changeLog");
            }
            this.changeLog = changeLog;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRemote(Boolean isRemote) {
            if (isRemote == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "isRemote");
            }
            this.isRemote = isRemote;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetConnectionNotification> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetConnectionNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder operation(GetConnectionOperation operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder order(GetConnectionOrder order) {
            if (order == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "order");
            }
            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder project(GetConnectionProject project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder redundancy(GetConnectionRedundancy redundancy) {
            if (redundancy == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "redundancy");
            }
            this.redundancy = redundancy;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder zSide(GetConnectionZSide zSide) {
            if (zSide == null) {
              throw new MissingRequiredPropertyException("GetConnectionResult", "zSide");
            }
            this.zSide = zSide;
            return this;
        }
        public GetConnectionResult build() {
            final var _resultValue = new GetConnectionResult();
            _resultValue.aSide = aSide;
            _resultValue.account = account;
            _resultValue.additionalInfo = additionalInfo;
            _resultValue.bandwidth = bandwidth;
            _resultValue.changeLog = changeLog;
            _resultValue.description = description;
            _resultValue.direction = direction;
            _resultValue.href = href;
            _resultValue.id = id;
            _resultValue.isRemote = isRemote;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.operation = operation;
            _resultValue.order = order;
            _resultValue.project = project;
            _resultValue.redundancy = redundancy;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.zSide = zSide;
            return _resultValue;
        }
    }
}
