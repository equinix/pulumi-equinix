// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.fabric.inputs;

import com.equinix.pulumi.equinix.fabric.enums.NotificationsType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionNotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionNotificationArgs Empty = new ConnectionNotificationArgs();

    /**
     * Array of contact emails
     * 
     */
    @Import(name="emails", required=true)
    private Output<List<String>> emails;

    /**
     * @return Array of contact emails
     * 
     */
    public Output<List<String>> emails() {
        return this.emails;
    }

    /**
     * Send interval
     * 
     */
    @Import(name="sendInterval")
    private @Nullable Output<String> sendInterval;

    /**
     * @return Send interval
     * 
     */
    public Optional<Output<String>> sendInterval() {
        return Optional.ofNullable(this.sendInterval);
    }

    /**
     * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,NotificationsType>> type;

    /**
     * @return Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
     * 
     */
    public Output<Either<String,NotificationsType>> type() {
        return this.type;
    }

    private ConnectionNotificationArgs() {}

    private ConnectionNotificationArgs(ConnectionNotificationArgs $) {
        this.emails = $.emails;
        this.sendInterval = $.sendInterval;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionNotificationArgs $;

        public Builder() {
            $ = new ConnectionNotificationArgs();
        }

        public Builder(ConnectionNotificationArgs defaults) {
            $ = new ConnectionNotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emails Array of contact emails
         * 
         * @return builder
         * 
         */
        public Builder emails(Output<List<String>> emails) {
            $.emails = emails;
            return this;
        }

        /**
         * @param emails Array of contact emails
         * 
         * @return builder
         * 
         */
        public Builder emails(List<String> emails) {
            return emails(Output.of(emails));
        }

        /**
         * @param emails Array of contact emails
         * 
         * @return builder
         * 
         */
        public Builder emails(String... emails) {
            return emails(List.of(emails));
        }

        /**
         * @param sendInterval Send interval
         * 
         * @return builder
         * 
         */
        public Builder sendInterval(@Nullable Output<String> sendInterval) {
            $.sendInterval = sendInterval;
            return this;
        }

        /**
         * @param sendInterval Send interval
         * 
         * @return builder
         * 
         */
        public Builder sendInterval(String sendInterval) {
            return sendInterval(Output.of(sendInterval));
        }

        /**
         * @param type Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,NotificationsType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,NotificationsType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         * 
         * @return builder
         * 
         */
        public Builder type(NotificationsType type) {
            return type(Either.ofRight(type));
        }

        public ConnectionNotificationArgs build() {
            $.emails = Objects.requireNonNull($.emails, "expected parameter 'emails' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
