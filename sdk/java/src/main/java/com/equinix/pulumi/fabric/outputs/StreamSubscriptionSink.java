// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.StreamSubscriptionSinkCredential;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionSinkSettings;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSubscriptionSink {
    /**
     * @return Boolean switch enabling batch delivery of data
     * 
     */
    private @Nullable Boolean batchEnabled;
    /**
     * @return Maximum size of the batch delivery if enabled
     * 
     */
    private @Nullable Integer batchSizeMax;
    /**
     * @return Maximum time to wait for batch delivery if enabled
     * 
     */
    private @Nullable Integer batchWaitTimeMax;
    /**
     * @return Access details for the specified sink type
     * 
     */
    private @Nullable StreamSubscriptionSinkCredential credential;
    /**
     * @return Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    private @Nullable String host;
    /**
     * @return Stream subscription sink settings
     * 
     */
    private @Nullable StreamSubscriptionSinkSettings settings;
    /**
     * @return Type of the subscriber
     * 
     */
    private String type;
    /**
     * @return Publicly reachable http endpoint destination for data stream
     * 
     */
    private @Nullable String uri;

    private StreamSubscriptionSink() {}
    /**
     * @return Boolean switch enabling batch delivery of data
     * 
     */
    public Optional<Boolean> batchEnabled() {
        return Optional.ofNullable(this.batchEnabled);
    }
    /**
     * @return Maximum size of the batch delivery if enabled
     * 
     */
    public Optional<Integer> batchSizeMax() {
        return Optional.ofNullable(this.batchSizeMax);
    }
    /**
     * @return Maximum time to wait for batch delivery if enabled
     * 
     */
    public Optional<Integer> batchWaitTimeMax() {
        return Optional.ofNullable(this.batchWaitTimeMax);
    }
    /**
     * @return Access details for the specified sink type
     * 
     */
    public Optional<StreamSubscriptionSinkCredential> credential() {
        return Optional.ofNullable(this.credential);
    }
    /**
     * @return Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Stream subscription sink settings
     * 
     */
    public Optional<StreamSubscriptionSinkSettings> settings() {
        return Optional.ofNullable(this.settings);
    }
    /**
     * @return Type of the subscriber
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Publicly reachable http endpoint destination for data stream
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSubscriptionSink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean batchEnabled;
        private @Nullable Integer batchSizeMax;
        private @Nullable Integer batchWaitTimeMax;
        private @Nullable StreamSubscriptionSinkCredential credential;
        private @Nullable String host;
        private @Nullable StreamSubscriptionSinkSettings settings;
        private String type;
        private @Nullable String uri;
        public Builder() {}
        public Builder(StreamSubscriptionSink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchEnabled = defaults.batchEnabled;
    	      this.batchSizeMax = defaults.batchSizeMax;
    	      this.batchWaitTimeMax = defaults.batchWaitTimeMax;
    	      this.credential = defaults.credential;
    	      this.host = defaults.host;
    	      this.settings = defaults.settings;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder batchEnabled(@Nullable Boolean batchEnabled) {

            this.batchEnabled = batchEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder batchSizeMax(@Nullable Integer batchSizeMax) {

            this.batchSizeMax = batchSizeMax;
            return this;
        }
        @CustomType.Setter
        public Builder batchWaitTimeMax(@Nullable Integer batchWaitTimeMax) {

            this.batchWaitTimeMax = batchWaitTimeMax;
            return this;
        }
        @CustomType.Setter
        public Builder credential(@Nullable StreamSubscriptionSinkCredential credential) {

            this.credential = credential;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder settings(@Nullable StreamSubscriptionSinkSettings settings) {

            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("StreamSubscriptionSink", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        public StreamSubscriptionSink build() {
            final var _resultValue = new StreamSubscriptionSink();
            _resultValue.batchEnabled = batchEnabled;
            _resultValue.batchSizeMax = batchSizeMax;
            _resultValue.batchWaitTimeMax = batchWaitTimeMax;
            _resultValue.credential = credential;
            _resultValue.host = host;
            _resultValue.settings = settings;
            _resultValue.type = type;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
