// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.metal.outputs;

import com.equinix.pulumi.equinix.metal.outputs.GetProjectBgpConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectResult {
    /**
     * @return Whether Backend Transfer is enabled for this project.
     * 
     */
    private Boolean backendTransfer;
    /**
     * @return Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
     * 
     */
    private GetProjectBgpConfig bgpConfig;
    /**
     * @return The timestamp for when the project was created.
     * 
     */
    private String created;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The UUID of this project&#39;s parent organization.
     * 
     */
    private String organizationId;
    /**
     * @return The UUID of payment method for this project.
     * 
     */
    private String paymentMethodId;
    private String projectId;
    /**
     * @return The timestamp for the last time the project was updated.
     * 
     */
    private String updated;
    /**
     * @return List of UUIDs of user accounts which belong to this project.
     * 
     */
    private List<String> userIds;

    private GetProjectResult() {}
    /**
     * @return Whether Backend Transfer is enabled for this project.
     * 
     */
    public Boolean backendTransfer() {
        return this.backendTransfer;
    }
    /**
     * @return Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).
     * 
     */
    public GetProjectBgpConfig bgpConfig() {
        return this.bgpConfig;
    }
    /**
     * @return The timestamp for when the project was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The UUID of this project&#39;s parent organization.
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return The UUID of payment method for this project.
     * 
     */
    public String paymentMethodId() {
        return this.paymentMethodId;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The timestamp for the last time the project was updated.
     * 
     */
    public String updated() {
        return this.updated;
    }
    /**
     * @return List of UUIDs of user accounts which belong to this project.
     * 
     */
    public List<String> userIds() {
        return this.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean backendTransfer;
        private GetProjectBgpConfig bgpConfig;
        private String created;
        private String id;
        private String name;
        private String organizationId;
        private String paymentMethodId;
        private String projectId;
        private String updated;
        private List<String> userIds;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendTransfer = defaults.backendTransfer;
    	      this.bgpConfig = defaults.bgpConfig;
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.organizationId = defaults.organizationId;
    	      this.paymentMethodId = defaults.paymentMethodId;
    	      this.projectId = defaults.projectId;
    	      this.updated = defaults.updated;
    	      this.userIds = defaults.userIds;
        }

        @CustomType.Setter
        public Builder backendTransfer(Boolean backendTransfer) {
            this.backendTransfer = Objects.requireNonNull(backendTransfer);
            return this;
        }
        @CustomType.Setter
        public Builder bgpConfig(GetProjectBgpConfig bgpConfig) {
            this.bgpConfig = Objects.requireNonNull(bgpConfig);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        @CustomType.Setter
        public Builder paymentMethodId(String paymentMethodId) {
            this.paymentMethodId = Objects.requireNonNull(paymentMethodId);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        @CustomType.Setter
        public Builder userIds(List<String> userIds) {
            this.userIds = Objects.requireNonNull(userIds);
            return this;
        }
        public Builder userIds(String... userIds) {
            return userIds(List.of(userIds));
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.backendTransfer = backendTransfer;
            o.bgpConfig = bgpConfig;
            o.created = created;
            o.id = id;
            o.name = name;
            o.organizationId = organizationId;
            o.paymentMethodId = paymentMethodId;
            o.projectId = projectId;
            o.updated = updated;
            o.userIds = userIds;
            return o;
        }
    }
}
