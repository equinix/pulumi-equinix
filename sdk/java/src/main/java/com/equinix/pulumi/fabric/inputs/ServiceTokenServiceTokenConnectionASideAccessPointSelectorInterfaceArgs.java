// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs Empty = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs();

    /**
     * id
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return id
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Interface type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Interface type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Equinix-assigned interface identifier
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned interface identifier
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs() {}

    private ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs(ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs $) {
        this.id = $.id;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs $;

        public Builder() {
            $ = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs();
        }

        public Builder(ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs defaults) {
            $ = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id id
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id id
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param type Interface type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Interface type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned interface identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned interface identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs", "type");
            }
            return $;
        }
    }

}
