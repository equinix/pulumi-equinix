// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.enums.ServiceTokenType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionZSideServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionZSideServiceTokenArgs Empty = new ConnectionZSideServiceTokenArgs();

    /**
     * Service token description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Service token description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An absolute URL that is the subject of the link&#39;s context
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return An absolute URL that is the subject of the link&#39;s context
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Token type - VC_TOKEN
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,ServiceTokenType>> type;

    /**
     * @return Token type - VC_TOKEN
     * 
     */
    public Optional<Output<Either<String,ServiceTokenType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned service token identifier
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned service token identifier
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ConnectionZSideServiceTokenArgs() {}

    private ConnectionZSideServiceTokenArgs(ConnectionZSideServiceTokenArgs $) {
        this.description = $.description;
        this.href = $.href;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionZSideServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionZSideServiceTokenArgs $;

        public Builder() {
            $ = new ConnectionZSideServiceTokenArgs();
        }

        public Builder(ConnectionZSideServiceTokenArgs defaults) {
            $ = new ConnectionZSideServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Service token description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Service token description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param href An absolute URL that is the subject of the link&#39;s context
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href An absolute URL that is the subject of the link&#39;s context
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param type Token type - VC_TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,ServiceTokenType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Token type - VC_TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,ServiceTokenType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Token type - VC_TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Token type - VC_TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(ServiceTokenType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param uuid Equinix-assigned service token identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned service token identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ConnectionZSideServiceTokenArgs build() {
            return $;
        }
    }

}
