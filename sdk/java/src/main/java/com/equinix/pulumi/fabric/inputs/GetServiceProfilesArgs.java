// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetServiceProfilesFilterArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesPaginationArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesSortArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceProfilesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceProfilesArgs Empty = new GetServiceProfilesArgs();

    /**
     * Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
     * 
     */
    @Import(name="andFilters")
    private @Nullable Output<Boolean> andFilters;

    /**
     * @return Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
     * 
     */
    public Optional<Output<Boolean>> andFilters() {
        return Optional.ofNullable(this.andFilters);
    }

    /**
     * Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
     * 
     */
    @Import(name="filter", required=true)
    private Output<GetServiceProfilesFilterArgs> filter;

    /**
     * @return Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
     * 
     */
    public Output<GetServiceProfilesFilterArgs> filter() {
        return this.filter;
    }

    /**
     * Pagination details for the Data Source Search Request
     * 
     */
    @Import(name="pagination")
    private @Nullable Output<GetServiceProfilesPaginationArgs> pagination;

    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    public Optional<Output<GetServiceProfilesPaginationArgs>> pagination() {
        return Optional.ofNullable(this.pagination);
    }

    /**
     * Filters for the Data Source Search Request
     * 
     */
    @Import(name="sort")
    private @Nullable Output<List<GetServiceProfilesSortArgs>> sort;

    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public Optional<Output<List<GetServiceProfilesSortArgs>>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    @Import(name="viewPoint")
    private @Nullable Output<String> viewPoint;

    /**
     * @return flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    public Optional<Output<String>> viewPoint() {
        return Optional.ofNullable(this.viewPoint);
    }

    private GetServiceProfilesArgs() {}

    private GetServiceProfilesArgs(GetServiceProfilesArgs $) {
        this.andFilters = $.andFilters;
        this.filter = $.filter;
        this.pagination = $.pagination;
        this.sort = $.sort;
        this.viewPoint = $.viewPoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceProfilesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceProfilesArgs $;

        public Builder() {
            $ = new GetServiceProfilesArgs();
        }

        public Builder(GetServiceProfilesArgs defaults) {
            $ = new GetServiceProfilesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param andFilters Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder andFilters(@Nullable Output<Boolean> andFilters) {
            $.andFilters = andFilters;
            return this;
        }

        /**
         * @param andFilters Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder andFilters(Boolean andFilters) {
            return andFilters(Output.of(andFilters));
        }

        /**
         * @param filter Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<GetServiceProfilesFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
         * 
         * @return builder
         * 
         */
        public Builder filter(GetServiceProfilesFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param pagination Pagination details for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder pagination(@Nullable Output<GetServiceProfilesPaginationArgs> pagination) {
            $.pagination = pagination;
            return this;
        }

        /**
         * @param pagination Pagination details for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder pagination(GetServiceProfilesPaginationArgs pagination) {
            return pagination(Output.of(pagination));
        }

        /**
         * @param sort Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<List<GetServiceProfilesSortArgs>> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sort(List<GetServiceProfilesSortArgs> sort) {
            return sort(Output.of(sort));
        }

        /**
         * @param sort Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sort(GetServiceProfilesSortArgs... sort) {
            return sort(List.of(sort));
        }

        /**
         * @param viewPoint flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
         * 
         * @return builder
         * 
         */
        public Builder viewPoint(@Nullable Output<String> viewPoint) {
            $.viewPoint = viewPoint;
            return this;
        }

        /**
         * @param viewPoint flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
         * 
         * @return builder
         * 
         */
        public Builder viewPoint(String viewPoint) {
            return viewPoint(Output.of(viewPoint));
        }

        public GetServiceProfilesArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
