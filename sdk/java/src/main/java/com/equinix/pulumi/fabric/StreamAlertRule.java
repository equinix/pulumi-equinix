// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.StreamAlertRuleArgs;
import com.equinix.pulumi.fabric.inputs.StreamAlertRuleState;
import com.equinix.pulumi.fabric.outputs.StreamAlertRuleChangeLog;
import com.equinix.pulumi.fabric.outputs.StreamAlertRuleResourceSelector;
import com.equinix.pulumi.fabric.outputs.StreamAlertRuleTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules&#39;
 * }
 * 
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.equinix.pulumi.fabric.StreamAlertRule;
 * import com.equinix.pulumi.fabric.StreamAlertRuleArgs;
 * import com.pulumi.equinix.fabric.inputs.StreamAlertRuleResourceSelectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var newStreamAlertRule = new StreamAlertRule("newStreamAlertRule", StreamAlertRuleArgs.builder()
 *             .streamId("<stream_id>")
 *             .name("<name>")
 *             .type("METRIC_ALERT")
 *             .description("<description>")
 *             .enabled(true)
 *             .operand("ABOVE")
 *             .windowSize("<window_size>")
 *             .warningThreshold("<warning_threshold>")
 *             .criticalThreshold("<critical_threshold>")
 *             .metricName("equinix.fabric.connection.bandwidth_tx.usage")
 *             .resourceSelector(StreamAlertRuleResourceSelectorArgs.builder()
 *                 .includes("*}&#47;{@code connections/<connection_id>")
 *                 .build())
 *             .build());
 * 
 *         ctx.export("streamAlertRuleType", newStreamAlertRule.type());
 *         ctx.export("streamAlertRuleId", newStreamAlertRule.uuid());
 *         ctx.export("streamAlertRuleStreamId", newStreamAlertRule.streamId());
 *         ctx.export("streamAlertRuleState", newStreamAlertRule.state());
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="equinix:fabric/streamAlertRule:StreamAlertRule")
public class StreamAlertRule extends com.pulumi.resources.CustomResource {
    /**
     * Details of the last change on the stream resource
     * 
     */
    @Export(name="changeLog", refs={StreamAlertRuleChangeLog.class}, tree="[0]")
    private Output<StreamAlertRuleChangeLog> changeLog;

    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public Output<StreamAlertRuleChangeLog> changeLog() {
        return this.changeLog;
    }
    /**
     * Stream alert rule metric critical threshold
     * 
     */
    @Export(name="criticalThreshold", refs={String.class}, tree="[0]")
    private Output<String> criticalThreshold;

    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    public Output<String> criticalThreshold() {
        return this.criticalThreshold;
    }
    /**
     * Customer-provided stream alert rule description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Customer-provided stream alert rule description
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Stream alert rule enabled status
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Stream alert rule enabled status
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Equinix assigned URI of the stream alert rule
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Equinix assigned URI of the stream alert rule
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Stream alert rule metric name
     * 
     */
    @Export(name="metricName", refs={String.class}, tree="[0]")
    private Output<String> metricName;

    /**
     * @return Stream alert rule metric name
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }
    /**
     * Customer-provided stream alert rule name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Customer-provided stream alert rule name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Stream alert rule metric operand
     * 
     */
    @Export(name="operand", refs={String.class}, tree="[0]")
    private Output<String> operand;

    /**
     * @return Stream alert rule metric operand
     * 
     */
    public Output<String> operand() {
        return this.operand;
    }
    /**
     * Resource selector for the stream alert rule
     * 
     */
    @Export(name="resourceSelector", refs={StreamAlertRuleResourceSelector.class}, tree="[0]")
    private Output<StreamAlertRuleResourceSelector> resourceSelector;

    /**
     * @return Resource selector for the stream alert rule
     * 
     */
    public Output<StreamAlertRuleResourceSelector> resourceSelector() {
        return this.resourceSelector;
    }
    /**
     * Value representing provisioning status for the stream alert rule
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Value representing provisioning status for the stream alert rule
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The stream UUID that contains this alert rule
     * 
     */
    @Export(name="streamId", refs={String.class}, tree="[0]")
    private Output<String> streamId;

    /**
     * @return The stream UUID that contains this alert rule
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }
    @Export(name="timeouts", refs={StreamAlertRuleTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ StreamAlertRuleTimeouts> timeouts;

    public Output<Optional<StreamAlertRuleTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Type of the stream alert rule
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of the stream alert rule
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix assigned unique identifier for the stream alert rule
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix assigned unique identifier for the stream alert rule
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }
    /**
     * Stream alert rule metric warning threshold
     * 
     */
    @Export(name="warningThreshold", refs={String.class}, tree="[0]")
    private Output<String> warningThreshold;

    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    public Output<String> warningThreshold() {
        return this.warningThreshold;
    }
    /**
     * Stream alert rule metric window size
     * 
     */
    @Export(name="windowSize", refs={String.class}, tree="[0]")
    private Output<String> windowSize;

    /**
     * @return Stream alert rule metric window size
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamAlertRule(java.lang.String name) {
        this(name, StreamAlertRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamAlertRule(java.lang.String name, StreamAlertRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamAlertRule(java.lang.String name, StreamAlertRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/streamAlertRule:StreamAlertRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private StreamAlertRule(java.lang.String name, Output<java.lang.String> id, @Nullable StreamAlertRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/streamAlertRule:StreamAlertRule", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamAlertRuleArgs makeArgs(StreamAlertRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamAlertRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/equinix")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamAlertRule get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamAlertRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamAlertRule(name, id, state, options);
    }
}
