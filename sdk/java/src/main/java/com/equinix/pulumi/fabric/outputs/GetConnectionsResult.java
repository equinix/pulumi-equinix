// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionsData;
import com.equinix.pulumi.fabric.outputs.GetConnectionsFilter;
import com.equinix.pulumi.fabric.outputs.GetConnectionsPagination;
import com.equinix.pulumi.fabric.outputs.GetConnectionsSort;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionsResult {
    /**
     * @return List of Cloud Routers
     * 
     */
    private List<GetConnectionsData> datas;
    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    private List<GetConnectionsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
     * 
     */
    private String outerOperator;
    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    private @Nullable GetConnectionsPagination pagination;
    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    private @Nullable List<GetConnectionsSort> sorts;

    private GetConnectionsResult() {}
    /**
     * @return List of Cloud Routers
     * 
     */
    public List<GetConnectionsData> datas() {
        return this.datas;
    }
    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public List<GetConnectionsFilter> filters() {
        return this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
     * 
     */
    public String outerOperator() {
        return this.outerOperator;
    }
    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    public Optional<GetConnectionsPagination> pagination() {
        return Optional.ofNullable(this.pagination);
    }
    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public List<GetConnectionsSort> sorts() {
        return this.sorts == null ? List.of() : this.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionsData> datas;
        private List<GetConnectionsFilter> filters;
        private String id;
        private String outerOperator;
        private @Nullable GetConnectionsPagination pagination;
        private @Nullable List<GetConnectionsSort> sorts;
        public Builder() {}
        public Builder(GetConnectionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datas = defaults.datas;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.outerOperator = defaults.outerOperator;
    	      this.pagination = defaults.pagination;
    	      this.sorts = defaults.sorts;
        }

        @CustomType.Setter
        public Builder datas(List<GetConnectionsData> datas) {
            if (datas == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "datas");
            }
            this.datas = datas;
            return this;
        }
        public Builder datas(GetConnectionsData... datas) {
            return datas(List.of(datas));
        }
        @CustomType.Setter
        public Builder filters(List<GetConnectionsFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetConnectionsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder outerOperator(String outerOperator) {
            if (outerOperator == null) {
              throw new MissingRequiredPropertyException("GetConnectionsResult", "outerOperator");
            }
            this.outerOperator = outerOperator;
            return this;
        }
        @CustomType.Setter
        public Builder pagination(@Nullable GetConnectionsPagination pagination) {

            this.pagination = pagination;
            return this;
        }
        @CustomType.Setter
        public Builder sorts(@Nullable List<GetConnectionsSort> sorts) {

            this.sorts = sorts;
            return this;
        }
        public Builder sorts(GetConnectionsSort... sorts) {
            return sorts(List.of(sorts));
        }
        public GetConnectionsResult build() {
            final var _resultValue = new GetConnectionsResult();
            _resultValue.datas = datas;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.outerOperator = outerOperator;
            _resultValue.pagination = pagination;
            _resultValue.sorts = sorts;
            return _resultValue;
        }
    }
}
