// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetRouteFilterRulesData;
import com.equinix.pulumi.fabric.outputs.GetRouteFilterRulesPagination;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRouteFilterRulesResult {
    /**
     * @return The list of Rules attached to the given Route Filter Policy UUID
     * 
     */
    private List<GetRouteFilterRulesData> datas;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     * 
     */
    private @Nullable Integer limit;
    /**
     * @return The page offset for the pagination request. Index of the first element. Default is 0.
     * 
     */
    private @Nullable Integer offset;
    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    private List<GetRouteFilterRulesPagination> paginations;
    /**
     * @return UUID of the Route Filter Policy the rule is attached to
     * 
     */
    private String routeFilterId;

    private GetRouteFilterRulesResult() {}
    /**
     * @return The list of Rules attached to the given Route Filter Policy UUID
     * 
     */
    public List<GetRouteFilterRulesData> datas() {
        return this.datas;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return The page offset for the pagination request. Index of the first element. Default is 0.
     * 
     */
    public Optional<Integer> offset() {
        return Optional.ofNullable(this.offset);
    }
    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    public List<GetRouteFilterRulesPagination> paginations() {
        return this.paginations;
    }
    /**
     * @return UUID of the Route Filter Policy the rule is attached to
     * 
     */
    public String routeFilterId() {
        return this.routeFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteFilterRulesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRouteFilterRulesData> datas;
        private String id;
        private @Nullable Integer limit;
        private @Nullable Integer offset;
        private List<GetRouteFilterRulesPagination> paginations;
        private String routeFilterId;
        public Builder() {}
        public Builder(GetRouteFilterRulesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datas = defaults.datas;
    	      this.id = defaults.id;
    	      this.limit = defaults.limit;
    	      this.offset = defaults.offset;
    	      this.paginations = defaults.paginations;
    	      this.routeFilterId = defaults.routeFilterId;
        }

        @CustomType.Setter
        public Builder datas(List<GetRouteFilterRulesData> datas) {
            if (datas == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRulesResult", "datas");
            }
            this.datas = datas;
            return this;
        }
        public Builder datas(GetRouteFilterRulesData... datas) {
            return datas(List.of(datas));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRulesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder offset(@Nullable Integer offset) {

            this.offset = offset;
            return this;
        }
        @CustomType.Setter
        public Builder paginations(List<GetRouteFilterRulesPagination> paginations) {
            if (paginations == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRulesResult", "paginations");
            }
            this.paginations = paginations;
            return this;
        }
        public Builder paginations(GetRouteFilterRulesPagination... paginations) {
            return paginations(List.of(paginations));
        }
        @CustomType.Setter
        public Builder routeFilterId(String routeFilterId) {
            if (routeFilterId == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRulesResult", "routeFilterId");
            }
            this.routeFilterId = routeFilterId;
            return this;
        }
        public GetRouteFilterRulesResult build() {
            final var _resultValue = new GetRouteFilterRulesResult();
            _resultValue.datas = datas;
            _resultValue.id = id;
            _resultValue.limit = limit;
            _resultValue.offset = offset;
            _resultValue.paginations = paginations;
            _resultValue.routeFilterId = routeFilterId;
            return _resultValue;
        }
    }
}
