// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.NetworkLocationArgs;
import com.equinix.pulumi.fabric.inputs.NetworkNotificationArgs;
import com.equinix.pulumi.fabric.inputs.NetworkProjectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkArgs Empty = new NetworkArgs();

    /**
     * Fabric Network location
     * 
     */
    @Import(name="location")
    private @Nullable Output<NetworkLocationArgs> location;

    /**
     * @return Fabric Network location
     * 
     */
    public Optional<Output<NetworkLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<NetworkNotificationArgs>> notifications;

    /**
     * @return Preferences for notifications on Fabric Network configuration or status changes
     * 
     */
    public Output<List<NetworkNotificationArgs>> notifications() {
        return this.notifications;
    }

    /**
     * Fabric Network project
     * 
     */
    @Import(name="project", required=true)
    private Output<NetworkProjectArgs> project;

    /**
     * @return Fabric Network project
     * 
     */
    public Output<NetworkProjectArgs> project() {
        return this.project;
    }

    /**
     * Fabric Network scope
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Fabric Network scope
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Supported Network types - EVPLAN, EPLAN, IPWAN
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NetworkArgs() {}

    private NetworkArgs(NetworkArgs $) {
        this.location = $.location;
        this.name = $.name;
        this.notifications = $.notifications;
        this.project = $.project;
        this.scope = $.scope;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkArgs $;

        public Builder() {
            $ = new NetworkArgs();
        }

        public Builder(NetworkArgs defaults) {
            $ = new NetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location Fabric Network location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<NetworkLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Fabric Network location
         * 
         * @return builder
         * 
         */
        public Builder location(NetworkLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param name Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<NetworkNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<NetworkNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Preferences for notifications on Fabric Network configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(NetworkNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param project Fabric Network project
         * 
         * @return builder
         * 
         */
        public Builder project(Output<NetworkProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Fabric Network project
         * 
         * @return builder
         * 
         */
        public Builder project(NetworkProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param scope Fabric Network scope
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Fabric Network scope
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param type Supported Network types - EVPLAN, EPLAN, IPWAN
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Supported Network types - EVPLAN, EPLAN, IPWAN
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NetworkArgs build() {
            if ($.notifications == null) {
                throw new MissingRequiredPropertyException("NetworkArgs", "notifications");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("NetworkArgs", "project");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("NetworkArgs", "scope");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NetworkArgs", "type");
            }
            return $;
        }
    }

}
