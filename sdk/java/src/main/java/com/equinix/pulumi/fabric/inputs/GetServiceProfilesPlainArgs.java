// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetServiceProfilesFilter;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesPagination;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesSort;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServiceProfilesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServiceProfilesPlainArgs Empty = new GetServiceProfilesPlainArgs();

    /**
     * Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
     * 
     */
    @Import(name="andFilters")
    private @Nullable Boolean andFilters;

    /**
     * @return Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
     * 
     */
    public Optional<Boolean> andFilters() {
        return Optional.ofNullable(this.andFilters);
    }

    /**
     * Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
     * 
     */
    @Import(name="filter", required=true)
    private GetServiceProfilesFilter filter;

    /**
     * @return Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
     * 
     */
    public GetServiceProfilesFilter filter() {
        return this.filter;
    }

    /**
     * Pagination details for the Data Source Search Request
     * 
     */
    @Import(name="pagination")
    private @Nullable GetServiceProfilesPagination pagination;

    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    public Optional<GetServiceProfilesPagination> pagination() {
        return Optional.ofNullable(this.pagination);
    }

    /**
     * Filters for the Data Source Search Request
     * 
     */
    @Import(name="sort")
    private @Nullable List<GetServiceProfilesSort> sort;

    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public Optional<List<GetServiceProfilesSort>> sort() {
        return Optional.ofNullable(this.sort);
    }

    /**
     * flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    @Import(name="viewPoint")
    private @Nullable String viewPoint;

    /**
     * @return flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    public Optional<String> viewPoint() {
        return Optional.ofNullable(this.viewPoint);
    }

    private GetServiceProfilesPlainArgs() {}

    private GetServiceProfilesPlainArgs(GetServiceProfilesPlainArgs $) {
        this.andFilters = $.andFilters;
        this.filter = $.filter;
        this.pagination = $.pagination;
        this.sort = $.sort;
        this.viewPoint = $.viewPoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServiceProfilesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServiceProfilesPlainArgs $;

        public Builder() {
            $ = new GetServiceProfilesPlainArgs();
        }

        public Builder(GetServiceProfilesPlainArgs defaults) {
            $ = new GetServiceProfilesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param andFilters Optional boolean flag to indicate if the filters will be AND&#39;d together. Defaults to false
         * 
         * @return builder
         * 
         */
        public Builder andFilters(@Nullable Boolean andFilters) {
            $.andFilters = andFilters;
            return this;
        }

        /**
         * @param filter Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
         * 
         * @return builder
         * 
         */
        public Builder filter(GetServiceProfilesFilter filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param pagination Pagination details for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder pagination(@Nullable GetServiceProfilesPagination pagination) {
            $.pagination = pagination;
            return this;
        }

        /**
         * @param sort Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable List<GetServiceProfilesSort> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sort(GetServiceProfilesSort... sort) {
            return sort(List.of(sort));
        }

        /**
         * @param viewPoint flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
         * 
         * @return builder
         * 
         */
        public Builder viewPoint(@Nullable String viewPoint) {
            $.viewPoint = viewPoint;
            return this;
        }

        public GetServiceProfilesPlainArgs build() {
            if ($.filter == null) {
                throw new MissingRequiredPropertyException("GetServiceProfilesPlainArgs", "filter");
            }
            return $;
        }
    }

}
