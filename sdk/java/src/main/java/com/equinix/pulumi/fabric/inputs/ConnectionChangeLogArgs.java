// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionChangeLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionChangeLogArgs Empty = new ConnectionChangeLogArgs();

    /**
     * Created by User Key
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Created by User Key
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Created by User Email Address
     * 
     */
    @Import(name="createdByEmail")
    private @Nullable Output<String> createdByEmail;

    /**
     * @return Created by User Email Address
     * 
     */
    public Optional<Output<String>> createdByEmail() {
        return Optional.ofNullable(this.createdByEmail);
    }

    /**
     * Created by User Full Name
     * 
     */
    @Import(name="createdByFullName")
    private @Nullable Output<String> createdByFullName;

    /**
     * @return Created by User Full Name
     * 
     */
    public Optional<Output<String>> createdByFullName() {
        return Optional.ofNullable(this.createdByFullName);
    }

    /**
     * Created by Date and Time
     * 
     */
    @Import(name="createdDateTime")
    private @Nullable Output<String> createdDateTime;

    /**
     * @return Created by Date and Time
     * 
     */
    public Optional<Output<String>> createdDateTime() {
        return Optional.ofNullable(this.createdDateTime);
    }

    /**
     * Deleted by User Key
     * 
     */
    @Import(name="deletedBy")
    private @Nullable Output<String> deletedBy;

    /**
     * @return Deleted by User Key
     * 
     */
    public Optional<Output<String>> deletedBy() {
        return Optional.ofNullable(this.deletedBy);
    }

    /**
     * Deleted by User Email Address
     * 
     */
    @Import(name="deletedByEmail")
    private @Nullable Output<String> deletedByEmail;

    /**
     * @return Deleted by User Email Address
     * 
     */
    public Optional<Output<String>> deletedByEmail() {
        return Optional.ofNullable(this.deletedByEmail);
    }

    /**
     * Deleted by User Full Name
     * 
     */
    @Import(name="deletedByFullName")
    private @Nullable Output<String> deletedByFullName;

    /**
     * @return Deleted by User Full Name
     * 
     */
    public Optional<Output<String>> deletedByFullName() {
        return Optional.ofNullable(this.deletedByFullName);
    }

    /**
     * Deleted by Date and Time
     * 
     */
    @Import(name="deletedDateTime")
    private @Nullable Output<String> deletedDateTime;

    /**
     * @return Deleted by Date and Time
     * 
     */
    public Optional<Output<String>> deletedDateTime() {
        return Optional.ofNullable(this.deletedDateTime);
    }

    /**
     * Updated by User Key
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    /**
     * @return Updated by User Key
     * 
     */
    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * Updated by User Email Address
     * 
     */
    @Import(name="updatedByEmail")
    private @Nullable Output<String> updatedByEmail;

    /**
     * @return Updated by User Email Address
     * 
     */
    public Optional<Output<String>> updatedByEmail() {
        return Optional.ofNullable(this.updatedByEmail);
    }

    /**
     * Updated by User Full Name
     * 
     */
    @Import(name="updatedByFullName")
    private @Nullable Output<String> updatedByFullName;

    /**
     * @return Updated by User Full Name
     * 
     */
    public Optional<Output<String>> updatedByFullName() {
        return Optional.ofNullable(this.updatedByFullName);
    }

    /**
     * Updated by Date and Time
     * 
     */
    @Import(name="updatedDateTime")
    private @Nullable Output<String> updatedDateTime;

    /**
     * @return Updated by Date and Time
     * 
     */
    public Optional<Output<String>> updatedDateTime() {
        return Optional.ofNullable(this.updatedDateTime);
    }

    private ConnectionChangeLogArgs() {}

    private ConnectionChangeLogArgs(ConnectionChangeLogArgs $) {
        this.createdBy = $.createdBy;
        this.createdByEmail = $.createdByEmail;
        this.createdByFullName = $.createdByFullName;
        this.createdDateTime = $.createdDateTime;
        this.deletedBy = $.deletedBy;
        this.deletedByEmail = $.deletedByEmail;
        this.deletedByFullName = $.deletedByFullName;
        this.deletedDateTime = $.deletedDateTime;
        this.updatedBy = $.updatedBy;
        this.updatedByEmail = $.updatedByEmail;
        this.updatedByFullName = $.updatedByFullName;
        this.updatedDateTime = $.updatedDateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionChangeLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionChangeLogArgs $;

        public Builder() {
            $ = new ConnectionChangeLogArgs();
        }

        public Builder(ConnectionChangeLogArgs defaults) {
            $ = new ConnectionChangeLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy Created by User Key
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Created by User Key
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdByEmail Created by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder createdByEmail(@Nullable Output<String> createdByEmail) {
            $.createdByEmail = createdByEmail;
            return this;
        }

        /**
         * @param createdByEmail Created by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder createdByEmail(String createdByEmail) {
            return createdByEmail(Output.of(createdByEmail));
        }

        /**
         * @param createdByFullName Created by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder createdByFullName(@Nullable Output<String> createdByFullName) {
            $.createdByFullName = createdByFullName;
            return this;
        }

        /**
         * @param createdByFullName Created by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder createdByFullName(String createdByFullName) {
            return createdByFullName(Output.of(createdByFullName));
        }

        /**
         * @param createdDateTime Created by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder createdDateTime(@Nullable Output<String> createdDateTime) {
            $.createdDateTime = createdDateTime;
            return this;
        }

        /**
         * @param createdDateTime Created by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder createdDateTime(String createdDateTime) {
            return createdDateTime(Output.of(createdDateTime));
        }

        /**
         * @param deletedBy Deleted by User Key
         * 
         * @return builder
         * 
         */
        public Builder deletedBy(@Nullable Output<String> deletedBy) {
            $.deletedBy = deletedBy;
            return this;
        }

        /**
         * @param deletedBy Deleted by User Key
         * 
         * @return builder
         * 
         */
        public Builder deletedBy(String deletedBy) {
            return deletedBy(Output.of(deletedBy));
        }

        /**
         * @param deletedByEmail Deleted by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder deletedByEmail(@Nullable Output<String> deletedByEmail) {
            $.deletedByEmail = deletedByEmail;
            return this;
        }

        /**
         * @param deletedByEmail Deleted by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder deletedByEmail(String deletedByEmail) {
            return deletedByEmail(Output.of(deletedByEmail));
        }

        /**
         * @param deletedByFullName Deleted by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder deletedByFullName(@Nullable Output<String> deletedByFullName) {
            $.deletedByFullName = deletedByFullName;
            return this;
        }

        /**
         * @param deletedByFullName Deleted by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder deletedByFullName(String deletedByFullName) {
            return deletedByFullName(Output.of(deletedByFullName));
        }

        /**
         * @param deletedDateTime Deleted by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder deletedDateTime(@Nullable Output<String> deletedDateTime) {
            $.deletedDateTime = deletedDateTime;
            return this;
        }

        /**
         * @param deletedDateTime Deleted by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder deletedDateTime(String deletedDateTime) {
            return deletedDateTime(Output.of(deletedDateTime));
        }

        /**
         * @param updatedBy Updated by User Key
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy Updated by User Key
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param updatedByEmail Updated by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder updatedByEmail(@Nullable Output<String> updatedByEmail) {
            $.updatedByEmail = updatedByEmail;
            return this;
        }

        /**
         * @param updatedByEmail Updated by User Email Address
         * 
         * @return builder
         * 
         */
        public Builder updatedByEmail(String updatedByEmail) {
            return updatedByEmail(Output.of(updatedByEmail));
        }

        /**
         * @param updatedByFullName Updated by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder updatedByFullName(@Nullable Output<String> updatedByFullName) {
            $.updatedByFullName = updatedByFullName;
            return this;
        }

        /**
         * @param updatedByFullName Updated by User Full Name
         * 
         * @return builder
         * 
         */
        public Builder updatedByFullName(String updatedByFullName) {
            return updatedByFullName(Output.of(updatedByFullName));
        }

        /**
         * @param updatedDateTime Updated by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder updatedDateTime(@Nullable Output<String> updatedDateTime) {
            $.updatedDateTime = updatedDateTime;
            return this;
        }

        /**
         * @param updatedDateTime Updated by Date and Time
         * 
         * @return builder
         * 
         */
        public Builder updatedDateTime(String updatedDateTime) {
            return updatedDateTime(Output.of(updatedDateTime));
        }

        public ConnectionChangeLogArgs build() {
            return $;
        }
    }

}
