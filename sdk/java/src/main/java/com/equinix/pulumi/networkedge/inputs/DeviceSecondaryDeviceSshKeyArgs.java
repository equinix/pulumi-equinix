// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceSecondaryDeviceSshKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceSecondaryDeviceSshKeyArgs Empty = new DeviceSecondaryDeviceSshKeyArgs();

    /**
     * Reference by name to previously provisioned public SSH key
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return Reference by name to previously provisioned public SSH key
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * username associated with given key.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return username associated with given key.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private DeviceSecondaryDeviceSshKeyArgs() {}

    private DeviceSecondaryDeviceSshKeyArgs(DeviceSecondaryDeviceSshKeyArgs $) {
        this.keyName = $.keyName;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceSecondaryDeviceSshKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceSecondaryDeviceSshKeyArgs $;

        public Builder() {
            $ = new DeviceSecondaryDeviceSshKeyArgs();
        }

        public Builder(DeviceSecondaryDeviceSshKeyArgs defaults) {
            $ = new DeviceSecondaryDeviceSshKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName Reference by name to previously provisioned public SSH key
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName Reference by name to previously provisioned public SSH key
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param username username associated with given key.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username username associated with given key.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public DeviceSecondaryDeviceSshKeyArgs build() {
            if ($.username == null) {
                throw new MissingRequiredPropertyException("DeviceSecondaryDeviceSshKeyArgs", "username");
            }
            return $;
        }
    }

}
