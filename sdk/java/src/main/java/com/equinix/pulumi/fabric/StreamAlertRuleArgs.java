// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.StreamAlertRuleDetectionMethodArgs;
import com.equinix.pulumi.fabric.inputs.StreamAlertRuleMetricSelectorArgs;
import com.equinix.pulumi.fabric.inputs.StreamAlertRuleResourceSelectorArgs;
import com.equinix.pulumi.fabric.inputs.StreamAlertRuleTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamAlertRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamAlertRuleArgs Empty = new StreamAlertRuleArgs();

    /**
     * Customer-provided stream alert rule description
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Customer-provided stream alert rule description
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Detection method for stream alert rule
     * 
     */
    @Import(name="detectionMethod")
    private @Nullable Output<StreamAlertRuleDetectionMethodArgs> detectionMethod;

    /**
     * @return Detection method for stream alert rule
     * 
     */
    public Optional<Output<StreamAlertRuleDetectionMethodArgs>> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }

    /**
     * Stream alert rule enabled status
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Stream alert rule enabled status
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Metric selector for the stream alert rule
     * 
     */
    @Import(name="metricSelector")
    private @Nullable Output<StreamAlertRuleMetricSelectorArgs> metricSelector;

    /**
     * @return Metric selector for the stream alert rule
     * 
     */
    public Optional<Output<StreamAlertRuleMetricSelectorArgs>> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    /**
     * Customer-provided stream alert rule name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customer-provided stream alert rule name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Resource selector for the stream alert rule
     * 
     */
    @Import(name="resourceSelector")
    private @Nullable Output<StreamAlertRuleResourceSelectorArgs> resourceSelector;

    /**
     * @return Resource selector for the stream alert rule
     * 
     */
    public Optional<Output<StreamAlertRuleResourceSelectorArgs>> resourceSelector() {
        return Optional.ofNullable(this.resourceSelector);
    }

    /**
     * The stream UUID that contains this alert rule
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return The stream UUID that contains this alert rule
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamAlertRuleTimeoutsArgs> timeouts;

    public Optional<Output<StreamAlertRuleTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of the stream alert rule
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the stream alert rule
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private StreamAlertRuleArgs() {}

    private StreamAlertRuleArgs(StreamAlertRuleArgs $) {
        this.description = $.description;
        this.detectionMethod = $.detectionMethod;
        this.enabled = $.enabled;
        this.metricSelector = $.metricSelector;
        this.name = $.name;
        this.resourceSelector = $.resourceSelector;
        this.streamId = $.streamId;
        this.timeouts = $.timeouts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamAlertRuleArgs $;

        public Builder() {
            $ = new StreamAlertRuleArgs();
        }

        public Builder(StreamAlertRuleArgs defaults) {
            $ = new StreamAlertRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Customer-provided stream alert rule description
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Customer-provided stream alert rule description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param detectionMethod Detection method for stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder detectionMethod(@Nullable Output<StreamAlertRuleDetectionMethodArgs> detectionMethod) {
            $.detectionMethod = detectionMethod;
            return this;
        }

        /**
         * @param detectionMethod Detection method for stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder detectionMethod(StreamAlertRuleDetectionMethodArgs detectionMethod) {
            return detectionMethod(Output.of(detectionMethod));
        }

        /**
         * @param enabled Stream alert rule enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Stream alert rule enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metricSelector Metric selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable Output<StreamAlertRuleMetricSelectorArgs> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector Metric selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(StreamAlertRuleMetricSelectorArgs metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        /**
         * @param name Customer-provided stream alert rule name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customer-provided stream alert rule name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceSelector Resource selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder resourceSelector(@Nullable Output<StreamAlertRuleResourceSelectorArgs> resourceSelector) {
            $.resourceSelector = resourceSelector;
            return this;
        }

        /**
         * @param resourceSelector Resource selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder resourceSelector(StreamAlertRuleResourceSelectorArgs resourceSelector) {
            return resourceSelector(Output.of(resourceSelector));
        }

        /**
         * @param streamId The stream UUID that contains this alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The stream UUID that contains this alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder timeouts(@Nullable Output<StreamAlertRuleTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamAlertRuleTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StreamAlertRuleArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "description");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "streamId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "type");
            }
            return $;
        }
    }

}
