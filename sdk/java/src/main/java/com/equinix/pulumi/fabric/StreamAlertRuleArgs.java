// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.StreamAlertRuleResourceSelectorArgs;
import com.equinix.pulumi.fabric.inputs.StreamAlertRuleTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamAlertRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamAlertRuleArgs Empty = new StreamAlertRuleArgs();

    /**
     * Stream alert rule metric critical threshold
     * 
     */
    @Import(name="criticalThreshold", required=true)
    private Output<String> criticalThreshold;

    /**
     * @return Stream alert rule metric critical threshold
     * 
     */
    public Output<String> criticalThreshold() {
        return this.criticalThreshold;
    }

    /**
     * Customer-provided stream alert rule description
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Customer-provided stream alert rule description
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Stream alert rule enabled status
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Stream alert rule enabled status
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Stream alert rule metric name
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return Stream alert rule metric name
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Customer-provided stream alert rule name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customer-provided stream alert rule name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Stream alert rule metric operand
     * 
     */
    @Import(name="operand", required=true)
    private Output<String> operand;

    /**
     * @return Stream alert rule metric operand
     * 
     */
    public Output<String> operand() {
        return this.operand;
    }

    /**
     * Resource selector for the stream alert rule
     * 
     */
    @Import(name="resourceSelector")
    private @Nullable Output<StreamAlertRuleResourceSelectorArgs> resourceSelector;

    /**
     * @return Resource selector for the stream alert rule
     * 
     */
    public Optional<Output<StreamAlertRuleResourceSelectorArgs>> resourceSelector() {
        return Optional.ofNullable(this.resourceSelector);
    }

    /**
     * The stream UUID that contains this alert rule
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return The stream UUID that contains this alert rule
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamAlertRuleTimeoutsArgs> timeouts;

    public Optional<Output<StreamAlertRuleTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of the stream alert rule
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the stream alert rule
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Stream alert rule metric warning threshold
     * 
     */
    @Import(name="warningThreshold", required=true)
    private Output<String> warningThreshold;

    /**
     * @return Stream alert rule metric warning threshold
     * 
     */
    public Output<String> warningThreshold() {
        return this.warningThreshold;
    }

    /**
     * Stream alert rule metric window size
     * 
     */
    @Import(name="windowSize", required=true)
    private Output<String> windowSize;

    /**
     * @return Stream alert rule metric window size
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }

    private StreamAlertRuleArgs() {}

    private StreamAlertRuleArgs(StreamAlertRuleArgs $) {
        this.criticalThreshold = $.criticalThreshold;
        this.description = $.description;
        this.enabled = $.enabled;
        this.metricName = $.metricName;
        this.name = $.name;
        this.operand = $.operand;
        this.resourceSelector = $.resourceSelector;
        this.streamId = $.streamId;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.warningThreshold = $.warningThreshold;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamAlertRuleArgs $;

        public Builder() {
            $ = new StreamAlertRuleArgs();
        }

        public Builder(StreamAlertRuleArgs defaults) {
            $ = new StreamAlertRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param criticalThreshold Stream alert rule metric critical threshold
         * 
         * @return builder
         * 
         */
        public Builder criticalThreshold(Output<String> criticalThreshold) {
            $.criticalThreshold = criticalThreshold;
            return this;
        }

        /**
         * @param criticalThreshold Stream alert rule metric critical threshold
         * 
         * @return builder
         * 
         */
        public Builder criticalThreshold(String criticalThreshold) {
            return criticalThreshold(Output.of(criticalThreshold));
        }

        /**
         * @param description Customer-provided stream alert rule description
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Customer-provided stream alert rule description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Stream alert rule enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Stream alert rule enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metricName Stream alert rule metric name
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName Stream alert rule metric name
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param name Customer-provided stream alert rule name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customer-provided stream alert rule name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operand Stream alert rule metric operand
         * 
         * @return builder
         * 
         */
        public Builder operand(Output<String> operand) {
            $.operand = operand;
            return this;
        }

        /**
         * @param operand Stream alert rule metric operand
         * 
         * @return builder
         * 
         */
        public Builder operand(String operand) {
            return operand(Output.of(operand));
        }

        /**
         * @param resourceSelector Resource selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder resourceSelector(@Nullable Output<StreamAlertRuleResourceSelectorArgs> resourceSelector) {
            $.resourceSelector = resourceSelector;
            return this;
        }

        /**
         * @param resourceSelector Resource selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder resourceSelector(StreamAlertRuleResourceSelectorArgs resourceSelector) {
            return resourceSelector(Output.of(resourceSelector));
        }

        /**
         * @param streamId The stream UUID that contains this alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The stream UUID that contains this alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder timeouts(@Nullable Output<StreamAlertRuleTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamAlertRuleTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param warningThreshold Stream alert rule metric warning threshold
         * 
         * @return builder
         * 
         */
        public Builder warningThreshold(Output<String> warningThreshold) {
            $.warningThreshold = warningThreshold;
            return this;
        }

        /**
         * @param warningThreshold Stream alert rule metric warning threshold
         * 
         * @return builder
         * 
         */
        public Builder warningThreshold(String warningThreshold) {
            return warningThreshold(Output.of(warningThreshold));
        }

        /**
         * @param windowSize Stream alert rule metric window size
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize Stream alert rule metric window size
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public StreamAlertRuleArgs build() {
            if ($.criticalThreshold == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "criticalThreshold");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "description");
            }
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "metricName");
            }
            if ($.operand == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "operand");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "streamId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "type");
            }
            if ($.warningThreshold == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "warningThreshold");
            }
            if ($.windowSize == null) {
                throw new MissingRequiredPropertyException("StreamAlertRuleArgs", "windowSize");
            }
            return $;
        }
    }

}
