// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetStreamAlertRuleDetectionMethod;
import com.equinix.pulumi.fabric.inputs.GetStreamAlertRuleMetricSelector;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamAlertRulePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamAlertRulePlainArgs Empty = new GetStreamAlertRulePlainArgs();

    /**
     * The uuid of the stream alert rule
     * 
     */
    @Import(name="alertRuleId", required=true)
    private String alertRuleId;

    /**
     * @return The uuid of the stream alert rule
     * 
     */
    public String alertRuleId() {
        return this.alertRuleId;
    }

    /**
     * Detection method for stream alert rule
     * 
     */
    @Import(name="detectionMethod")
    private @Nullable GetStreamAlertRuleDetectionMethod detectionMethod;

    /**
     * @return Detection method for stream alert rule
     * 
     */
    public Optional<GetStreamAlertRuleDetectionMethod> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }

    /**
     * Metric selector for the stream alert rule
     * 
     */
    @Import(name="metricSelector")
    private @Nullable GetStreamAlertRuleMetricSelector metricSelector;

    /**
     * @return Metric selector for the stream alert rule
     * 
     */
    public Optional<GetStreamAlertRuleMetricSelector> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    /**
     * The uuid of the stream that is the target of the stream alert rule
     * 
     */
    @Import(name="streamId", required=true)
    private String streamId;

    /**
     * @return The uuid of the stream that is the target of the stream alert rule
     * 
     */
    public String streamId() {
        return this.streamId;
    }

    private GetStreamAlertRulePlainArgs() {}

    private GetStreamAlertRulePlainArgs(GetStreamAlertRulePlainArgs $) {
        this.alertRuleId = $.alertRuleId;
        this.detectionMethod = $.detectionMethod;
        this.metricSelector = $.metricSelector;
        this.streamId = $.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamAlertRulePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamAlertRulePlainArgs $;

        public Builder() {
            $ = new GetStreamAlertRulePlainArgs();
        }

        public Builder(GetStreamAlertRulePlainArgs defaults) {
            $ = new GetStreamAlertRulePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertRuleId The uuid of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder alertRuleId(String alertRuleId) {
            $.alertRuleId = alertRuleId;
            return this;
        }

        /**
         * @param detectionMethod Detection method for stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder detectionMethod(@Nullable GetStreamAlertRuleDetectionMethod detectionMethod) {
            $.detectionMethod = detectionMethod;
            return this;
        }

        /**
         * @param metricSelector Metric selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable GetStreamAlertRuleMetricSelector metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param streamId The uuid of the stream that is the target of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            $.streamId = streamId;
            return this;
        }

        public GetStreamAlertRulePlainArgs build() {
            if ($.alertRuleId == null) {
                throw new MissingRequiredPropertyException("GetStreamAlertRulePlainArgs", "alertRuleId");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("GetStreamAlertRulePlainArgs", "streamId");
            }
            return $;
        }
    }

}
