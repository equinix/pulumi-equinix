// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class InterconnectionPort {
    private String id;
    private String linkStatus;
    /**
     * @return Name of the connection resource
     * 
     */
    private String name;
    private String role;
    /**
     * @return Connection speed - Values must be in the format &#39;&lt;number&gt;Mbps&#39; or &#39;&lt;number&gt;Gpbs&#39;, for example &#39;100Mbps&#39; or &#39;50Gbps&#39;. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
     * 
     */
    private Integer speed;
    /**
     * @return Status of the connection resource.
     * 
     */
    private String status;
    private List<String> virtualCircuitIds;

    private InterconnectionPort() {}
    public String id() {
        return this.id;
    }
    public String linkStatus() {
        return this.linkStatus;
    }
    /**
     * @return Name of the connection resource
     * 
     */
    public String name() {
        return this.name;
    }
    public String role() {
        return this.role;
    }
    /**
     * @return Connection speed - Values must be in the format &#39;&lt;number&gt;Mbps&#39; or &#39;&lt;number&gt;Gpbs&#39;, for example &#39;100Mbps&#39; or &#39;50Gbps&#39;. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
     * 
     */
    public Integer speed() {
        return this.speed;
    }
    /**
     * @return Status of the connection resource.
     * 
     */
    public String status() {
        return this.status;
    }
    public List<String> virtualCircuitIds() {
        return this.virtualCircuitIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InterconnectionPort defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String linkStatus;
        private String name;
        private String role;
        private Integer speed;
        private String status;
        private List<String> virtualCircuitIds;
        public Builder() {}
        public Builder(InterconnectionPort defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.linkStatus = defaults.linkStatus;
    	      this.name = defaults.name;
    	      this.role = defaults.role;
    	      this.speed = defaults.speed;
    	      this.status = defaults.status;
    	      this.virtualCircuitIds = defaults.virtualCircuitIds;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder linkStatus(String linkStatus) {
            this.linkStatus = Objects.requireNonNull(linkStatus);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder speed(Integer speed) {
            this.speed = Objects.requireNonNull(speed);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder virtualCircuitIds(List<String> virtualCircuitIds) {
            this.virtualCircuitIds = Objects.requireNonNull(virtualCircuitIds);
            return this;
        }
        public Builder virtualCircuitIds(String... virtualCircuitIds) {
            return virtualCircuitIds(List.of(virtualCircuitIds));
        }
        public InterconnectionPort build() {
            final var _resultValue = new InterconnectionPort();
            _resultValue.id = id;
            _resultValue.linkStatus = linkStatus;
            _resultValue.name = name;
            _resultValue.role = role;
            _resultValue.speed = speed;
            _resultValue.status = status;
            _resultValue.virtualCircuitIds = virtualCircuitIds;
            return _resultValue;
        }
    }
}
