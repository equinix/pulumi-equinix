// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortVlanAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final PortVlanAttachmentState Empty = new PortVlanAttachmentState();

    /**
     * ID of device to be assigned to the VLAN.
     * 
     */
    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    /**
     * @return ID of device to be assigned to the VLAN.
     * 
     */
    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * Add port back to the bond when this resource is removed. Default is
     * `false`.
     * 
     */
    @Import(name="forceBond")
    private @Nullable Output<Boolean> forceBond;

    /**
     * @return Add port back to the bond when this resource is removed. Default is
     * `false`.
     * 
     */
    public Optional<Output<Boolean>> forceBond() {
        return Optional.ofNullable(this.forceBond);
    }

    /**
     * Mark this VLAN a native VLAN on the port. This can be used only if this
     * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
     * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
     * like in the layer2-individual example above.
     * 
     */
    @Import(name="native")
    private @Nullable Output<Boolean> native_;

    /**
     * @return Mark this VLAN a native VLAN on the port. This can be used only if this
     * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
     * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
     * like in the layer2-individual example above.
     * 
     */
    public Optional<Output<Boolean>> native_() {
        return Optional.ofNullable(this.native_);
    }

    /**
     * UUID of device port
     * 
     */
    @Import(name="portId")
    private @Nullable Output<String> portId;

    /**
     * @return UUID of device port
     * 
     */
    public Optional<Output<String>> portId() {
        return Optional.ofNullable(this.portId);
    }

    /**
     * Name of network port to be assigned to the VLAN.
     * 
     */
    @Import(name="portName")
    private @Nullable Output<String> portName;

    /**
     * @return Name of network port to be assigned to the VLAN.
     * 
     */
    public Optional<Output<String>> portName() {
        return Optional.ofNullable(this.portName);
    }

    /**
     * UUID of VLAN API resource
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<String> vlanId;

    /**
     * @return UUID of VLAN API resource
     * 
     */
    public Optional<Output<String>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * VXLAN Network Identifier.
     * 
     */
    @Import(name="vlanVnid")
    private @Nullable Output<Integer> vlanVnid;

    /**
     * @return VXLAN Network Identifier.
     * 
     */
    public Optional<Output<Integer>> vlanVnid() {
        return Optional.ofNullable(this.vlanVnid);
    }

    private PortVlanAttachmentState() {}

    private PortVlanAttachmentState(PortVlanAttachmentState $) {
        this.deviceId = $.deviceId;
        this.forceBond = $.forceBond;
        this.native_ = $.native_;
        this.portId = $.portId;
        this.portName = $.portName;
        this.vlanId = $.vlanId;
        this.vlanVnid = $.vlanVnid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortVlanAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortVlanAttachmentState $;

        public Builder() {
            $ = new PortVlanAttachmentState();
        }

        public Builder(PortVlanAttachmentState defaults) {
            $ = new PortVlanAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceId ID of device to be assigned to the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        /**
         * @param deviceId ID of device to be assigned to the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        /**
         * @param forceBond Add port back to the bond when this resource is removed. Default is
         * `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceBond(@Nullable Output<Boolean> forceBond) {
            $.forceBond = forceBond;
            return this;
        }

        /**
         * @param forceBond Add port back to the bond when this resource is removed. Default is
         * `false`.
         * 
         * @return builder
         * 
         */
        public Builder forceBond(Boolean forceBond) {
            return forceBond(Output.of(forceBond));
        }

        /**
         * @param native_ Mark this VLAN a native VLAN on the port. This can be used only if this
         * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
         * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
         * like in the layer2-individual example above.
         * 
         * @return builder
         * 
         */
        public Builder native_(@Nullable Output<Boolean> native_) {
            $.native_ = native_;
            return this;
        }

        /**
         * @param native_ Mark this VLAN a native VLAN on the port. This can be used only if this
         * assignment assigns second or further VLAN to the port. To ensure that this attachment is not first
         * on a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just
         * like in the layer2-individual example above.
         * 
         * @return builder
         * 
         */
        public Builder native_(Boolean native_) {
            return native_(Output.of(native_));
        }

        /**
         * @param portId UUID of device port
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId UUID of device port
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param portName Name of network port to be assigned to the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder portName(@Nullable Output<String> portName) {
            $.portName = portName;
            return this;
        }

        /**
         * @param portName Name of network port to be assigned to the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder portName(String portName) {
            return portName(Output.of(portName));
        }

        /**
         * @param vlanId UUID of VLAN API resource
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId UUID of VLAN API resource
         * 
         * @return builder
         * 
         */
        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vlanVnid VXLAN Network Identifier.
         * 
         * @return builder
         * 
         */
        public Builder vlanVnid(@Nullable Output<Integer> vlanVnid) {
            $.vlanVnid = vlanVnid;
            return this;
        }

        /**
         * @param vlanVnid VXLAN Network Identifier.
         * 
         * @return builder
         * 
         */
        public Builder vlanVnid(Integer vlanVnid) {
            return vlanVnid(Output.of(vlanVnid));
        }

        public PortVlanAttachmentState build() {
            return $;
        }
    }

}
