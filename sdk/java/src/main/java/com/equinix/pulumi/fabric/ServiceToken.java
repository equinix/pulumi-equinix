// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.ServiceTokenArgs;
import com.equinix.pulumi.fabric.inputs.ServiceTokenState;
import com.equinix.pulumi.fabric.outputs.ServiceTokenAccount;
import com.equinix.pulumi.fabric.outputs.ServiceTokenChangeLog;
import com.equinix.pulumi.fabric.outputs.ServiceTokenNotification;
import com.equinix.pulumi.fabric.outputs.ServiceTokenProject;
import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Service Token](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
 * 
 * Additional documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
 * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
 * 
 * ## Example Usage
 * 
 * Aside Port Service Token
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.ServiceToken;
 * import com.pulumi.equinix.fabric.ServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenServiceTokenConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var test = new ServiceToken("test", ServiceTokenArgs.builder()
 *             .description("Aside COLO Service Token")
 *             .expirationDateTime("2025-01-18T06:43:49.981Z")
 *             .notifications(ServiceTokenNotificationArgs.builder()
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .type("ALL")
 *                 .build())
 *             .serviceTokenConnections(ServiceTokenServiceTokenConnectionArgs.builder()
 *                 .aSides(ServiceTokenServiceTokenConnectionASideArgs.builder()
 *                     .accessPointSelectors(ServiceTokenServiceTokenConnectionASideAccessPointSelectorArgs.builder()
 *                         .linkProtocol(ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolArgs.builder()
 *                             .type("DOT1Q")
 *                             .vlanTag("2987")
 *                             .build())
 *                         .port(ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs.builder()
 *                             .uuid("<port_uuid>")
 *                             .build())
 *                         .type("COLO")
 *                         .build())
 *                     .build())
 *                 .bandwidthLimit(1000)
 *                 .type("EVPL_VC")
 *                 .build())
 *             .type("VC_TOKEN")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Zside Port Service Token
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.ServiceToken;
 * import com.pulumi.equinix.fabric.ServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenServiceTokenConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var test = new ServiceToken("test", ServiceTokenArgs.builder()
 *             .description("Zside COLO Service Token")
 *             .expirationDateTime("2025-01-18T06:43:49.981Z")
 *             .notifications(ServiceTokenNotificationArgs.builder()
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .type("ALL")
 *                 .build())
 *             .serviceTokenConnections(ServiceTokenServiceTokenConnectionArgs.builder()
 *                 .supportedBandwidths(                
 *                     50,
 *                     200,
 *                     10000)
 *                 .type("EVPL_VC")
 *                 .zSides(ServiceTokenServiceTokenConnectionZSideArgs.builder()
 *                     .accessPointSelectors(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs.builder()
 *                         .linkProtocol(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolArgs.builder()
 *                             .type("DOT1Q")
 *                             .vlanTag("2087")
 *                             .build())
 *                         .port(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortArgs.builder()
 *                             .uuid("<port_uuid>")
 *                             .build())
 *                         .type("COLO")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .type("VC_TOKEN")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Zside Network Service Token
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.ServiceToken;
 * import com.pulumi.equinix.fabric.ServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenServiceTokenConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var test = new ServiceToken("test", ServiceTokenArgs.builder()
 *             .description("Zside Network Service Token")
 *             .expirationDateTime("2025-01-18T06:43:49.986Z")
 *             .notifications(ServiceTokenNotificationArgs.builder()
 *                 .emails("example}{@literal @}{@code equinix.com")
 *                 .type("ALL")
 *                 .build())
 *             .serviceTokenConnections(ServiceTokenServiceTokenConnectionArgs.builder()
 *                 .supportedBandwidths(                
 *                     50,
 *                     200,
 *                     10000)
 *                 .type("EVPL_VC")
 *                 .zSides(ServiceTokenServiceTokenConnectionZSideArgs.builder()
 *                     .accessPointSelectors(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs.builder()
 *                         .network(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkArgs.builder()
 *                             .uuid("<network_uuid>")
 *                             .build())
 *                         .type("NETWORK")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .type("VC_TOKEN")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Zside Virtual Device Service Token
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.ServiceToken;
 * import com.pulumi.equinix.fabric.ServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ServiceTokenServiceTokenConnectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var test = new ServiceToken("test", ServiceTokenArgs.builder()
 *             .description("Zside VD Service Token")
 *             .expirationDateTime("2025-01-18T06:43:49.986Z")
 *             .notifications(ServiceTokenNotificationArgs.builder()
 *                 .emails("example}{@literal @}{@code equinix.com")
 *                 .type("ALL")
 *                 .build())
 *             .serviceTokenConnections(ServiceTokenServiceTokenConnectionArgs.builder()
 *                 .supportedBandwidths(                
 *                     50,
 *                     200,
 *                     10000)
 *                 .type("EVPL_VC")
 *                 .zSides(ServiceTokenServiceTokenConnectionZSideArgs.builder()
 *                     .accessPointSelectors(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs.builder()
 *                         .interface_(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceArgs.builder()
 *                             .type("NETWORK")
 *                             .build())
 *                         .type("VD")
 *                         .virtualDevice(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceArgs.builder()
 *                             .type("EDGE")
 *                             .uuid("<device_uuid>")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .type("VC_TOKEN")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="equinix:fabric/serviceToken:ServiceToken")
public class ServiceToken extends com.pulumi.resources.CustomResource {
    /**
     * Customer account information that is associated with this service token
     * 
     */
    @Export(name="accounts", refs={List.class,ServiceTokenAccount.class}, tree="[0,1]")
    private Output<List<ServiceTokenAccount>> accounts;

    /**
     * @return Customer account information that is associated with this service token
     * 
     */
    public Output<List<ServiceTokenAccount>> accounts() {
        return this.accounts;
    }
    /**
     * Captures connection lifecycle change information
     * 
     */
    @Export(name="changeLogs", refs={List.class,ServiceTokenChangeLog.class}, tree="[0,1]")
    private Output<List<ServiceTokenChangeLog>> changeLogs;

    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public Output<List<ServiceTokenChangeLog>> changeLogs() {
        return this.changeLogs;
    }
    /**
     * Optional Description to the Service Token you will be creating
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Optional Description to the Service Token you will be creating
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    @Export(name="expirationDateTime", refs={String.class}, tree="[0]")
    private Output<String> expirationDateTime;

    /**
     * @return Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    public Output<String> expirationDateTime() {
        return this.expirationDateTime;
    }
    /**
     * An absolute URL that is the subject of the link&#39;s context.
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return An absolute URL that is the subject of the link&#39;s context.
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Information about token side; ASIDE, ZSIDE
     * 
     */
    @Export(name="issuerSide", refs={String.class}, tree="[0]")
    private Output<String> issuerSide;

    /**
     * @return Information about token side; ASIDE, ZSIDE
     * 
     */
    public Output<String> issuerSide() {
        return this.issuerSide;
    }
    /**
     * Name of the Service Token
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Service Token
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Preferences for notifications on Service Token configuration or status changes
     * 
     */
    @Export(name="notifications", refs={List.class,ServiceTokenNotification.class}, tree="[0,1]")
    private Output<List<ServiceTokenNotification>> notifications;

    /**
     * @return Preferences for notifications on Service Token configuration or status changes
     * 
     */
    public Output<List<ServiceTokenNotification>> notifications() {
        return this.notifications;
    }
    /**
     * Project information
     * 
     */
    @Export(name="project", refs={ServiceTokenProject.class}, tree="[0]")
    private Output<ServiceTokenProject> project;

    /**
     * @return Project information
     * 
     */
    public Output<ServiceTokenProject> project() {
        return this.project;
    }
    /**
     * Service Token Connection Type Information
     * 
     */
    @Export(name="serviceTokenConnections", refs={List.class,ServiceTokenServiceTokenConnection.class}, tree="[0,1]")
    private Output<List<ServiceTokenServiceTokenConnection>> serviceTokenConnections;

    /**
     * @return Service Token Connection Type Information
     * 
     */
    public Output<List<ServiceTokenServiceTokenConnection>> serviceTokenConnections() {
        return this.serviceTokenConnections;
    }
    /**
     * Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Service Token Type; VC*TOKEN,EPL*TOKEN
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Service Token Type; VC*TOKEN,EPL*TOKEN
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix-assigned service token identifier
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix-assigned service token identifier
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceToken(java.lang.String name) {
        this(name, ServiceTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceToken(java.lang.String name, ServiceTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceToken(java.lang.String name, ServiceTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/serviceToken:ServiceToken", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServiceToken(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/serviceToken:ServiceToken", name, state, makeResourceOptions(options, id), false);
    }

    private static ServiceTokenArgs makeArgs(ServiceTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServiceTokenArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceToken get(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceToken(name, id, state, options);
    }
}
