// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.metal.InterconnectionArgs;
import com.equinix.pulumi.metal.inputs.InterconnectionState;
import com.equinix.pulumi.metal.outputs.InterconnectionPort;
import com.equinix.pulumi.metal.outputs.InterconnectionServiceToken;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).
 * 
 * ## Example Usage
 * ### example fabric billed metal from fabric port
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.FabricFunctions;
 * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
 * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
 * import com.pulumi.equinix.metal.Vlan;
 * import com.pulumi.equinix.metal.VlanArgs;
 * import com.pulumi.equinix.metal.Interconnection;
 * import com.pulumi.equinix.metal.InterconnectionArgs;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionProjectArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideServiceTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var aSide = FabricFunctions.getPorts(GetPortsArgs.builder()
 *             .filter(GetPortsFilterArgs.builder()
 *                 .name("<name_of_port||port_prefix>")
 *                 .build())
 *             .build());
 * 
 *         var example = new Vlan("example", VlanArgs.builder()
 *             .projectId("<metal_project_id>")
 *             .metro("FR")
 *             .build());
 * 
 *         var exampleInterconnection = new Interconnection("exampleInterconnection", InterconnectionArgs.builder()
 *             .name("tf-metal-from-port")
 *             .projectId("<metal_project_id>")
 *             .type("shared")
 *             .redundancy("primary")
 *             .metro("FR")
 *             .speed("200Mbps")
 *             .serviceTokenType("z_side")
 *             .contactEmail("username}{@literal @}{@code example.com")
 *             .vlans(example.vxlan())
 *             .build());
 * 
 *         var exampleConnection = new Connection("exampleConnection", ConnectionArgs.builder()
 *             .name("tf-metal-from-port")
 *             .type("EVPL_VC")
 *             .bandwidth(200)
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails("username}{@literal @}{@code example.com")
 *                 .build())
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .project(ConnectionProjectArgs.builder()
 *                 .projectId("<fabric_project_id>")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid(aSide.applyValue(_aSide -> _aSide.data()[0].uuid()))
 *                         .build())
 *                     .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()
 *                         .type("DOT1Q")
 *                         .vlanTag(1234)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .serviceToken(ConnectionZSideServiceTokenArgs.builder()
 *                     .uuid(exampleInterconnection.serviceTokens().applyValue(_serviceTokens -> _serviceTokens[0].id()))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fabric billed metal from fcr
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Vlan;
 * import com.pulumi.equinix.metal.VlanArgs;
 * import com.pulumi.equinix.metal.Interconnection;
 * import com.pulumi.equinix.metal.InterconnectionArgs;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionProjectArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointRouterArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example1 = new Vlan("example1", VlanArgs.builder()
 *             .projectId("<metal_project_id>")
 *             .metro("SV")
 *             .build());
 * 
 *         var example = new Interconnection("example", InterconnectionArgs.builder()
 *             .name("tf-metal-from-fcr")
 *             .projectId("<metal_project_id>")
 *             .metro("SV")
 *             .redundancy("primary")
 *             .type("shared_port_vlan")
 *             .contactEmail("username}{@literal @}{@code example.com")
 *             .speed("200Mbps")
 *             .vlans(example1.vxlan())
 *             .build());
 * 
 *         var exampleConnection = new Connection("exampleConnection", ConnectionArgs.builder()
 *             .name("tf-metal-from-fcr")
 *             .type("IP_VC")
 *             .bandwidth(200)
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails("username}{@literal @}{@code example.com")
 *                 .build())
 *             .project(ConnectionProjectArgs.builder()
 *                 .projectId("<fabric_project_id>")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("CLOUD_ROUTER")
 *                     .router(ConnectionASideAccessPointRouterArgs.builder()
 *                         .uuid(exampleEquinixFabricCloudRouter.id())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("METAL_NETWORK")
 *                     .authenticationKey(example.authorizationCode())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fabric billed metal from network edge
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.metal.Vrf;
 * import com.pulumi.equinix.metal.VrfArgs;
 * import com.pulumi.equinix.metal.Interconnection;
 * import com.pulumi.equinix.metal.InterconnectionArgs;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionProjectArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideServiceTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new Vrf("example", VrfArgs.builder()
 *             .name("tf-metal-from-ne")
 *             .metro("FR")
 *             .localAsn(65001)
 *             .ipRanges("10.99.1.0/24")
 *             .projectId(test.id())
 *             .build());
 * 
 *         var exampleInterconnection = new Interconnection("exampleInterconnection", InterconnectionArgs.builder()
 *             .name("tf-metal-from-ne")
 *             .projectId("<metal_project_id>")
 *             .type("shared")
 *             .redundancy("primary")
 *             .metro("FR")
 *             .speed("200Mbps")
 *             .serviceTokenType("z_side")
 *             .contactEmail("username}{@literal @}{@code example.com")
 *             .vrfs(example.vxlan())
 *             .build());
 * 
 *         var exampleConnection = new Connection("exampleConnection", ConnectionArgs.builder()
 *             .name("tf-metal-from-ne")
 *             .type("EVPL_VC")
 *             .bandwidth(200)
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails("username}{@literal @}{@code example.com")
 *                 .build())
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .project(ConnectionProjectArgs.builder()
 *                 .projectId("<fabric_project_id>")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid(exampleEquinixNetworkDevice.id())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .serviceToken(ConnectionZSideServiceTokenArgs.builder()
 *                     .uuid(exampleInterconnection.serviceTokens().applyValue(_serviceTokens -> _serviceTokens[0].id()))
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example metal billed metal to fabric port
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.FabricFunctions;
 * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
 * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
 * import com.pulumi.equinix.metal.Interconnection;
 * import com.pulumi.equinix.metal.InterconnectionArgs;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionProjectArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLinkProtocolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         final var aSide = FabricFunctions.getPorts(GetPortsArgs.builder()
 *             .filter(GetPortsFilterArgs.builder()
 *                 .name("<name_of_port||port_prefix>")
 *                 .build())
 *             .build());
 * 
 *         var example = new Interconnection("example", InterconnectionArgs.builder()
 *             .name("tf-metal-2-port")
 *             .projectId("<metal_project_id>")
 *             .type("shared")
 *             .redundancy("redundant")
 *             .metro("FR")
 *             .speed("1Gbps")
 *             .serviceTokenType("a_side")
 *             .contactEmail("username}{@literal @}{@code example.com")
 *             .build());
 * 
 *         var exampleConnection = new Connection("exampleConnection", ConnectionArgs.builder()
 *             .name("tf-metal-2-port")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails("username}{@literal @}{@code example.com")
 *                 .build())
 *             .project(ConnectionProjectArgs.builder()
 *                 .projectId("<fabric_project_id>")
 *                 .build())
 *             .bandwidth(100)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .serviceToken(ConnectionASideServiceTokenArgs.builder()
 *                     .uuid(example.serviceTokens().applyValue(_serviceTokens -> _serviceTokens[0].id()))
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid(aSide.applyValue(_aSide -> _aSide.data()[0].uuid()))
 *                         .build())
 *                     .linkProtocol(ConnectionZSideAccessPointLinkProtocolArgs.builder()
 *                         .type("DOT1Q")
 *                         .vlanTag(1234)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="equinix:metal/interconnection:Interconnection")
public class Interconnection extends com.pulumi.resources.CustomResource {
    /**
     * Only used with Fabric Shared connection. Fabric uses this token to be able to give more detailed information about the Metal end of the network, when viewing resources from within Fabric.
     * 
     */
    @Export(name="authorizationCode", refs={String.class}, tree="[0]")
    private Output<String> authorizationCode;

    /**
     * @return Only used with Fabric Shared connection. Fabric uses this token to be able to give more detailed information about the Metal end of the network, when viewing resources from within Fabric.
     * 
     */
    public Output<String> authorizationCode() {
        return this.authorizationCode;
    }
    /**
     * The preferred email used for communication and notifications about the Equinix Fabric interconnection
     * 
     */
    @Export(name="contactEmail", refs={String.class}, tree="[0]")
    private Output<String> contactEmail;

    /**
     * @return The preferred email used for communication and notifications about the Equinix Fabric interconnection
     * 
     */
    public Output<String> contactEmail() {
        return this.contactEmail;
    }
    /**
     * Description of the connection resource
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the connection resource
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Facility where the connection will be created
     * 
     * @deprecated
     * Use metro instead of facility. For more information, read the migration guide.
     * 
     */
    @Deprecated /* Use metro instead of facility. For more information, read the migration guide. */
    @Export(name="facility", refs={String.class}, tree="[0]")
    private Output<String> facility;

    /**
     * @return Facility where the connection will be created
     * 
     */
    public Output<String> facility() {
        return this.facility;
    }
    /**
     * Metro where the connection will be created
     * 
     */
    @Export(name="metro", refs={String.class}, tree="[0]")
    private Output<String> metro;

    /**
     * @return Metro where the connection will be created
     * 
     */
    public Output<String> metro() {
        return this.metro;
    }
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output<String> mode;

    /**
     * @return Mode for connections in IBX facilities with the dedicated type - standard or tunnel
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * Name of the connection resource
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the connection resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * ID of the organization responsible for the connection. Applicable with type &#34;dedicated&#34;
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return ID of the organization responsible for the connection. Applicable with type &#34;dedicated&#34;
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
     * 
     */
    @Export(name="ports", refs={List.class,InterconnectionPort.class}, tree="[0,1]")
    private Output<List<InterconnectionPort>> ports;

    /**
     * @return List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
     * 
     */
    public Output<List<InterconnectionPort>> ports() {
        return this.ports;
    }
    /**
     * ID of the project where the connection is scoped to. Required with type &#34;shared&#34;
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return ID of the project where the connection is scoped to. Required with type &#34;shared&#34;
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Connection redundancy - redundant or primary
     * 
     */
    @Export(name="redundancy", refs={String.class}, tree="[0]")
    private Output<String> redundancy;

    /**
     * @return Connection redundancy - redundant or primary
     * 
     */
    public Output<String> redundancy() {
        return this.redundancy;
    }
    /**
     * Only used with shared connection. Type of service token to use for the connection, a*side or z*side
     * 
     */
    @Export(name="serviceTokenType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceTokenType;

    /**
     * @return Only used with shared connection. Type of service token to use for the connection, a*side or z*side
     * 
     */
    public Output<Optional<String>> serviceTokenType() {
        return Codegen.optional(this.serviceTokenType);
    }
    /**
     * Only used with shared connection. List of service tokens required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
     * 
     */
    @Export(name="serviceTokens", refs={List.class,InterconnectionServiceToken.class}, tree="[0,1]")
    private Output<List<InterconnectionServiceToken>> serviceTokens;

    /**
     * @return Only used with shared connection. List of service tokens required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
     * 
     */
    public Output<List<InterconnectionServiceToken>> serviceTokens() {
        return this.serviceTokens;
    }
    /**
     * Connection speed -  Values must be in the format &#39;\n\nMbps&#39; or &#39;\n\nGpbs&#39;, for example &#39;100Mbps&#39; or &#39;50Gbps&#39;.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
     * 
     */
    @Export(name="speed", refs={String.class}, tree="[0]")
    private Output<String> speed;

    /**
     * @return Connection speed -  Values must be in the format &#39;\n\nMbps&#39; or &#39;\n\nGpbs&#39;, for example &#39;100Mbps&#39; or &#39;50Gbps&#39;.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
     * 
     */
    public Output<String> speed() {
        return this.speed;
    }
    /**
     * Status of the connection resource
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the connection resource
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Tags attached to the connection
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags attached to the connection
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Only used with shared connection. Fabric Token required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
     * 
     * @deprecated
     * If your organization already has connection service tokens enabled, use `service_tokens` instead
     * 
     */
    @Deprecated /* If your organization already has connection service tokens enabled, use `service_tokens` instead */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return Only used with shared connection. Fabric Token required to continue the setup process with equinix*fabric*connection or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard)
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Connection type - dedicated, shared or shared*port*vlan
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Connection type - dedicated, shared or shared*port*vlan
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Only used with shared connection. VLANs to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection
     * 
     */
    @Export(name="vlans", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> vlans;

    /**
     * @return Only used with shared connection. VLANs to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection
     * 
     */
    public Output<Optional<List<Integer>>> vlans() {
        return Codegen.optional(this.vlans);
    }
    /**
     * Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant connection
     * 
     */
    @Export(name="vrfs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> vrfs;

    /**
     * @return Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant connection
     * 
     */
    public Output<Optional<List<String>>> vrfs() {
        return Codegen.optional(this.vrfs);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Interconnection(java.lang.String name) {
        this(name, InterconnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Interconnection(java.lang.String name, InterconnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Interconnection(java.lang.String name, InterconnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/interconnection:Interconnection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Interconnection(java.lang.String name, Output<java.lang.String> id, @Nullable InterconnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:metal/interconnection:Interconnection", name, state, makeResourceOptions(options, id), false);
    }

    private static InterconnectionArgs makeArgs(InterconnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InterconnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/equinix")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Interconnection get(java.lang.String name, Output<java.lang.String> id, @Nullable InterconnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Interconnection(name, id, state, options);
    }
}
