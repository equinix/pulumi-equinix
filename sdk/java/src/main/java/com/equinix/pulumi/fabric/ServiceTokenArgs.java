// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.ServiceTokenNotificationArgs;
import com.equinix.pulumi.fabric.inputs.ServiceTokenProjectArgs;
import com.equinix.pulumi.fabric.inputs.ServiceTokenServiceTokenConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenArgs Empty = new ServiceTokenArgs();

    /**
     * Optional Description to the Service Token you will be creating
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional Description to the Service Token you will be creating
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    @Import(name="expirationDateTime", required=true)
    private Output<String> expirationDateTime;

    /**
     * @return Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    public Output<String> expirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Name of the Service Token
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Service Token
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Preferences for notifications on Service Token configuration or status changes
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<ServiceTokenNotificationArgs>> notifications;

    /**
     * @return Preferences for notifications on Service Token configuration or status changes
     * 
     */
    public Output<List<ServiceTokenNotificationArgs>> notifications() {
        return this.notifications;
    }

    /**
     * Project information
     * 
     */
    @Import(name="project")
    private @Nullable Output<ServiceTokenProjectArgs> project;

    /**
     * @return Project information
     * 
     */
    public Optional<Output<ServiceTokenProjectArgs>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Service Token Connection Type Information
     * 
     */
    @Import(name="serviceTokenConnections", required=true)
    private Output<List<ServiceTokenServiceTokenConnectionArgs>> serviceTokenConnections;

    /**
     * @return Service Token Connection Type Information
     * 
     */
    public Output<List<ServiceTokenServiceTokenConnectionArgs>> serviceTokenConnections() {
        return this.serviceTokenConnections;
    }

    /**
     * Service Token Type; VC*TOKEN,EPL*TOKEN
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Service Token Type; VC*TOKEN,EPL*TOKEN
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ServiceTokenArgs() {}

    private ServiceTokenArgs(ServiceTokenArgs $) {
        this.description = $.description;
        this.expirationDateTime = $.expirationDateTime;
        this.name = $.name;
        this.notifications = $.notifications;
        this.project = $.project;
        this.serviceTokenConnections = $.serviceTokenConnections;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenArgs $;

        public Builder() {
            $ = new ServiceTokenArgs();
        }

        public Builder(ServiceTokenArgs defaults) {
            $ = new ServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional Description to the Service Token you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional Description to the Service Token you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expirationDateTime Expiration date and time of the service token; 2020-11-06T07:00:00Z
         * 
         * @return builder
         * 
         */
        public Builder expirationDateTime(Output<String> expirationDateTime) {
            $.expirationDateTime = expirationDateTime;
            return this;
        }

        /**
         * @param expirationDateTime Expiration date and time of the service token; 2020-11-06T07:00:00Z
         * 
         * @return builder
         * 
         */
        public Builder expirationDateTime(String expirationDateTime) {
            return expirationDateTime(Output.of(expirationDateTime));
        }

        /**
         * @param name Name of the Service Token
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Service Token
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications Preferences for notifications on Service Token configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<ServiceTokenNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Preferences for notifications on Service Token configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<ServiceTokenNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Preferences for notifications on Service Token configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(ServiceTokenNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param project Project information
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<ServiceTokenProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Project information
         * 
         * @return builder
         * 
         */
        public Builder project(ServiceTokenProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceTokenConnections Service Token Connection Type Information
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenConnections(Output<List<ServiceTokenServiceTokenConnectionArgs>> serviceTokenConnections) {
            $.serviceTokenConnections = serviceTokenConnections;
            return this;
        }

        /**
         * @param serviceTokenConnections Service Token Connection Type Information
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenConnections(List<ServiceTokenServiceTokenConnectionArgs> serviceTokenConnections) {
            return serviceTokenConnections(Output.of(serviceTokenConnections));
        }

        /**
         * @param serviceTokenConnections Service Token Connection Type Information
         * 
         * @return builder
         * 
         */
        public Builder serviceTokenConnections(ServiceTokenServiceTokenConnectionArgs... serviceTokenConnections) {
            return serviceTokenConnections(List.of(serviceTokenConnections));
        }

        /**
         * @param type Service Token Type; VC*TOKEN,EPL*TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Service Token Type; VC*TOKEN,EPL*TOKEN
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceTokenArgs build() {
            if ($.expirationDateTime == null) {
                throw new MissingRequiredPropertyException("ServiceTokenArgs", "expirationDateTime");
            }
            if ($.notifications == null) {
                throw new MissingRequiredPropertyException("ServiceTokenArgs", "notifications");
            }
            if ($.serviceTokenConnections == null) {
                throw new MissingRequiredPropertyException("ServiceTokenArgs", "serviceTokenConnections");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ServiceTokenArgs", "type");
            }
            return $;
        }
    }

}
