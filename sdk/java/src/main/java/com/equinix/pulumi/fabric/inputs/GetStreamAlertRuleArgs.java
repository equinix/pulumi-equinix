// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetStreamAlertRuleDetectionMethodArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAlertRuleMetricSelectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamAlertRuleArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamAlertRuleArgs Empty = new GetStreamAlertRuleArgs();

    /**
     * The uuid of the stream alert rule
     * 
     */
    @Import(name="alertRuleId", required=true)
    private Output<String> alertRuleId;

    /**
     * @return The uuid of the stream alert rule
     * 
     */
    public Output<String> alertRuleId() {
        return this.alertRuleId;
    }

    /**
     * Detection method for stream alert rule
     * 
     */
    @Import(name="detectionMethod")
    private @Nullable Output<GetStreamAlertRuleDetectionMethodArgs> detectionMethod;

    /**
     * @return Detection method for stream alert rule
     * 
     */
    public Optional<Output<GetStreamAlertRuleDetectionMethodArgs>> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }

    /**
     * Metric selector for the stream alert rule
     * 
     */
    @Import(name="metricSelector")
    private @Nullable Output<GetStreamAlertRuleMetricSelectorArgs> metricSelector;

    /**
     * @return Metric selector for the stream alert rule
     * 
     */
    public Optional<Output<GetStreamAlertRuleMetricSelectorArgs>> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    /**
     * The uuid of the stream that is the target of the stream alert rule
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return The uuid of the stream that is the target of the stream alert rule
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    private GetStreamAlertRuleArgs() {}

    private GetStreamAlertRuleArgs(GetStreamAlertRuleArgs $) {
        this.alertRuleId = $.alertRuleId;
        this.detectionMethod = $.detectionMethod;
        this.metricSelector = $.metricSelector;
        this.streamId = $.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamAlertRuleArgs $;

        public Builder() {
            $ = new GetStreamAlertRuleArgs();
        }

        public Builder(GetStreamAlertRuleArgs defaults) {
            $ = new GetStreamAlertRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertRuleId The uuid of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder alertRuleId(Output<String> alertRuleId) {
            $.alertRuleId = alertRuleId;
            return this;
        }

        /**
         * @param alertRuleId The uuid of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder alertRuleId(String alertRuleId) {
            return alertRuleId(Output.of(alertRuleId));
        }

        /**
         * @param detectionMethod Detection method for stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder detectionMethod(@Nullable Output<GetStreamAlertRuleDetectionMethodArgs> detectionMethod) {
            $.detectionMethod = detectionMethod;
            return this;
        }

        /**
         * @param detectionMethod Detection method for stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder detectionMethod(GetStreamAlertRuleDetectionMethodArgs detectionMethod) {
            return detectionMethod(Output.of(detectionMethod));
        }

        /**
         * @param metricSelector Metric selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable Output<GetStreamAlertRuleMetricSelectorArgs> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector Metric selector for the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(GetStreamAlertRuleMetricSelectorArgs metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        /**
         * @param streamId The uuid of the stream that is the target of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The uuid of the stream that is the target of the stream alert rule
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public GetStreamAlertRuleArgs build() {
            if ($.alertRuleId == null) {
                throw new MissingRequiredPropertyException("GetStreamAlertRuleArgs", "alertRuleId");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("GetStreamAlertRuleArgs", "streamId");
            }
            return $;
        }
    }

}
