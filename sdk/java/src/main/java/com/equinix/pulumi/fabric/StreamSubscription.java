// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.StreamSubscriptionArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionState;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionChangeLog;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionEventSelector;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionMetricSelector;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionSink;
import com.equinix.pulumi.fabric.outputs.StreamSubscriptionTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Subscriptions
 * 
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
 * 
 * ## Example Usage
 * 
 */
@ResourceType(type="equinix:fabric/streamSubscription:StreamSubscription")
public class StreamSubscription extends com.pulumi.resources.CustomResource {
    /**
     * Details of the last change on the stream resource
     * 
     */
    @Export(name="changeLog", refs={StreamSubscriptionChangeLog.class}, tree="[0]")
    private Output<StreamSubscriptionChangeLog> changeLog;

    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public Output<StreamSubscriptionChangeLog> changeLog() {
        return this.changeLog;
    }
    /**
     * Customer-provided stream subscription description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Customer-provided stream subscription description
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Stream subscription enabled status
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Stream subscription enabled status
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Lists of events to be included/excluded on the stream subscription
     * 
     */
    @Export(name="eventSelector", refs={StreamSubscriptionEventSelector.class}, tree="[0]")
    private Output<StreamSubscriptionEventSelector> eventSelector;

    /**
     * @return Lists of events to be included/excluded on the stream subscription
     * 
     */
    public Output<StreamSubscriptionEventSelector> eventSelector() {
        return this.eventSelector;
    }
    /**
     * Equinix assigned URI of the stream subscription resource
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Equinix assigned URI of the stream subscription resource
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Lists of metrics to be included/excluded on the stream subscription
     * 
     */
    @Export(name="metricSelector", refs={StreamSubscriptionMetricSelector.class}, tree="[0]")
    private Output<StreamSubscriptionMetricSelector> metricSelector;

    /**
     * @return Lists of metrics to be included/excluded on the stream subscription
     * 
     */
    public Output<StreamSubscriptionMetricSelector> metricSelector() {
        return this.metricSelector;
    }
    /**
     * Customer-provided stream subscription name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Customer-provided stream subscription name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The details of the subscriber to the Equinix Stream
     * 
     */
    @Export(name="sink", refs={StreamSubscriptionSink.class}, tree="[0]")
    private Output<StreamSubscriptionSink> sink;

    /**
     * @return The details of the subscriber to the Equinix Stream
     * 
     */
    public Output<StreamSubscriptionSink> sink() {
        return this.sink;
    }
    /**
     * Value representing provisioning status for the stream resource
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The uuid of the stream that is the target of the stream subscription
     * 
     */
    @Export(name="streamId", refs={String.class}, tree="[0]")
    private Output<String> streamId;

    /**
     * @return The uuid of the stream that is the target of the stream subscription
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }
    @Export(name="timeouts", refs={StreamSubscriptionTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ StreamSubscriptionTimeouts> timeouts;

    public Output<Optional<StreamSubscriptionTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Type of the stream subscription request
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of the stream subscription request
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamSubscription(java.lang.String name) {
        this(name, StreamSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamSubscription(java.lang.String name, StreamSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamSubscription(java.lang.String name, StreamSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/streamSubscription:StreamSubscription", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private StreamSubscription(java.lang.String name, Output<java.lang.String> id, @Nullable StreamSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/streamSubscription:StreamSubscription", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamSubscriptionArgs makeArgs(StreamSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamSubscriptionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/equinix")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamSubscription get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamSubscription(name, id, state, options);
    }
}
