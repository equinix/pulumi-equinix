// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointAccount;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointGateway;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointInterface;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointLinkProtocol;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointLocation;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointNetwork;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointPort;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointProfile;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointRouter;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointVirtualDevice;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionASideAccessPoint {
    /**
     * @return Account
     * 
     */
    private List<GetConnectionASideAccessPointAccount> accounts;
    /**
     * @return Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    private @Nullable String authenticationKey;
    /**
     * @return **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    private @Nullable GetConnectionASideAccessPointGateway gateway;
    /**
     * @return Virtual device interface
     * 
     */
    private @Nullable GetConnectionASideAccessPointInterface interface_;
    /**
     * @return Connection link protocol
     * 
     */
    private @Nullable GetConnectionASideAccessPointLinkProtocol linkProtocol;
    /**
     * @return Access point location
     * 
     */
    private GetConnectionASideAccessPointLocation location;
    /**
     * @return network access point information
     * 
     */
    private @Nullable GetConnectionASideAccessPointNetwork network;
    /**
     * @return Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    private @Nullable String peeringType;
    /**
     * @return Port access point information
     * 
     */
    private @Nullable GetConnectionASideAccessPointPort port;
    /**
     * @return Service Profile
     * 
     */
    private @Nullable GetConnectionASideAccessPointProfile profile;
    /**
     * @return Provider assigned Connection Id
     * 
     */
    private String providerConnectionId;
    /**
     * @return Cloud Router access point information that replaces `gateway`
     * 
     */
    private @Nullable GetConnectionASideAccessPointRouter router;
    /**
     * @return Access point seller region
     * 
     */
    private @Nullable String sellerRegion;
    /**
     * @return Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     * 
     */
    private @Nullable String type;
    /**
     * @return Virtual device
     * 
     */
    private @Nullable GetConnectionASideAccessPointVirtualDevice virtualDevice;

    private GetConnectionASideAccessPoint() {}
    /**
     * @return Account
     * 
     */
    public List<GetConnectionASideAccessPointAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    public Optional<String> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }
    /**
     * @return **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    public Optional<GetConnectionASideAccessPointGateway> gateway() {
        return Optional.ofNullable(this.gateway);
    }
    /**
     * @return Virtual device interface
     * 
     */
    public Optional<GetConnectionASideAccessPointInterface> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return Connection link protocol
     * 
     */
    public Optional<GetConnectionASideAccessPointLinkProtocol> linkProtocol() {
        return Optional.ofNullable(this.linkProtocol);
    }
    /**
     * @return Access point location
     * 
     */
    public GetConnectionASideAccessPointLocation location() {
        return this.location;
    }
    /**
     * @return network access point information
     * 
     */
    public Optional<GetConnectionASideAccessPointNetwork> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    public Optional<String> peeringType() {
        return Optional.ofNullable(this.peeringType);
    }
    /**
     * @return Port access point information
     * 
     */
    public Optional<GetConnectionASideAccessPointPort> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Service Profile
     * 
     */
    public Optional<GetConnectionASideAccessPointProfile> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return Provider assigned Connection Id
     * 
     */
    public String providerConnectionId() {
        return this.providerConnectionId;
    }
    /**
     * @return Cloud Router access point information that replaces `gateway`
     * 
     */
    public Optional<GetConnectionASideAccessPointRouter> router() {
        return Optional.ofNullable(this.router);
    }
    /**
     * @return Access point seller region
     * 
     */
    public Optional<String> sellerRegion() {
        return Optional.ofNullable(this.sellerRegion);
    }
    /**
     * @return Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Virtual device
     * 
     */
    public Optional<GetConnectionASideAccessPointVirtualDevice> virtualDevice() {
        return Optional.ofNullable(this.virtualDevice);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionASideAccessPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionASideAccessPointAccount> accounts;
        private @Nullable String authenticationKey;
        private @Nullable GetConnectionASideAccessPointGateway gateway;
        private @Nullable GetConnectionASideAccessPointInterface interface_;
        private @Nullable GetConnectionASideAccessPointLinkProtocol linkProtocol;
        private GetConnectionASideAccessPointLocation location;
        private @Nullable GetConnectionASideAccessPointNetwork network;
        private @Nullable String peeringType;
        private @Nullable GetConnectionASideAccessPointPort port;
        private @Nullable GetConnectionASideAccessPointProfile profile;
        private String providerConnectionId;
        private @Nullable GetConnectionASideAccessPointRouter router;
        private @Nullable String sellerRegion;
        private @Nullable String type;
        private @Nullable GetConnectionASideAccessPointVirtualDevice virtualDevice;
        public Builder() {}
        public Builder(GetConnectionASideAccessPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accounts = defaults.accounts;
    	      this.authenticationKey = defaults.authenticationKey;
    	      this.gateway = defaults.gateway;
    	      this.interface_ = defaults.interface_;
    	      this.linkProtocol = defaults.linkProtocol;
    	      this.location = defaults.location;
    	      this.network = defaults.network;
    	      this.peeringType = defaults.peeringType;
    	      this.port = defaults.port;
    	      this.profile = defaults.profile;
    	      this.providerConnectionId = defaults.providerConnectionId;
    	      this.router = defaults.router;
    	      this.sellerRegion = defaults.sellerRegion;
    	      this.type = defaults.type;
    	      this.virtualDevice = defaults.virtualDevice;
        }

        @CustomType.Setter
        public Builder accounts(List<GetConnectionASideAccessPointAccount> accounts) {
            if (accounts == null) {
              throw new MissingRequiredPropertyException("GetConnectionASideAccessPoint", "accounts");
            }
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(GetConnectionASideAccessPointAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder authenticationKey(@Nullable String authenticationKey) {

            this.authenticationKey = authenticationKey;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(@Nullable GetConnectionASideAccessPointGateway gateway) {

            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(@Nullable GetConnectionASideAccessPointInterface interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder linkProtocol(@Nullable GetConnectionASideAccessPointLinkProtocol linkProtocol) {

            this.linkProtocol = linkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder location(GetConnectionASideAccessPointLocation location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetConnectionASideAccessPoint", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable GetConnectionASideAccessPointNetwork network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder peeringType(@Nullable String peeringType) {

            this.peeringType = peeringType;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable GetConnectionASideAccessPointPort port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable GetConnectionASideAccessPointProfile profile) {

            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder providerConnectionId(String providerConnectionId) {
            if (providerConnectionId == null) {
              throw new MissingRequiredPropertyException("GetConnectionASideAccessPoint", "providerConnectionId");
            }
            this.providerConnectionId = providerConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder router(@Nullable GetConnectionASideAccessPointRouter router) {

            this.router = router;
            return this;
        }
        @CustomType.Setter
        public Builder sellerRegion(@Nullable String sellerRegion) {

            this.sellerRegion = sellerRegion;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder virtualDevice(@Nullable GetConnectionASideAccessPointVirtualDevice virtualDevice) {

            this.virtualDevice = virtualDevice;
            return this;
        }
        public GetConnectionASideAccessPoint build() {
            final var _resultValue = new GetConnectionASideAccessPoint();
            _resultValue.accounts = accounts;
            _resultValue.authenticationKey = authenticationKey;
            _resultValue.gateway = gateway;
            _resultValue.interface_ = interface_;
            _resultValue.linkProtocol = linkProtocol;
            _resultValue.location = location;
            _resultValue.network = network;
            _resultValue.peeringType = peeringType;
            _resultValue.port = port;
            _resultValue.profile = profile;
            _resultValue.providerConnectionId = providerConnectionId;
            _resultValue.router = router;
            _resultValue.sellerRegion = sellerRegion;
            _resultValue.type = type;
            _resultValue.virtualDevice = virtualDevice;
            return _resultValue;
        }
    }
}
