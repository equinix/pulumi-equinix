// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointAccount;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointGateway;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointInterface;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointLinkProtocol;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointLocation;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointPort;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointProfile;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointRouter;
import com.equinix.pulumi.fabric.outputs.GetConnectionASideAccessPointVirtualDevice;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectionASideAccessPoint {
    private List<GetConnectionASideAccessPointAccount> accounts;
    private String authenticationKey;
    /**
     * @deprecated
     * router attribute will be returned instead
     * 
     */
    @Deprecated /* router attribute will be returned instead */
    private List<GetConnectionASideAccessPointGateway> gateways;
    private List<GetConnectionASideAccessPointInterface> interfaces;
    private List<GetConnectionASideAccessPointLinkProtocol> linkProtocols;
    private List<GetConnectionASideAccessPointLocation> locations;
    private String peeringType;
    private List<GetConnectionASideAccessPointPort> ports;
    private List<GetConnectionASideAccessPointProfile> profiles;
    private String providerConnectionId;
    /**
     * @return CloudRouter; Replaces `gateway` attribute (Set of Object)
     * 
     */
    private List<GetConnectionASideAccessPointRouter> routers;
    private String sellerRegion;
    private String type;
    private List<GetConnectionASideAccessPointVirtualDevice> virtualDevices;

    private GetConnectionASideAccessPoint() {}
    public List<GetConnectionASideAccessPointAccount> accounts() {
        return this.accounts;
    }
    public String authenticationKey() {
        return this.authenticationKey;
    }
    /**
     * @deprecated
     * router attribute will be returned instead
     * 
     */
    @Deprecated /* router attribute will be returned instead */
    public List<GetConnectionASideAccessPointGateway> gateways() {
        return this.gateways;
    }
    public List<GetConnectionASideAccessPointInterface> interfaces() {
        return this.interfaces;
    }
    public List<GetConnectionASideAccessPointLinkProtocol> linkProtocols() {
        return this.linkProtocols;
    }
    public List<GetConnectionASideAccessPointLocation> locations() {
        return this.locations;
    }
    public String peeringType() {
        return this.peeringType;
    }
    public List<GetConnectionASideAccessPointPort> ports() {
        return this.ports;
    }
    public List<GetConnectionASideAccessPointProfile> profiles() {
        return this.profiles;
    }
    public String providerConnectionId() {
        return this.providerConnectionId;
    }
    /**
     * @return CloudRouter; Replaces `gateway` attribute (Set of Object)
     * 
     */
    public List<GetConnectionASideAccessPointRouter> routers() {
        return this.routers;
    }
    public String sellerRegion() {
        return this.sellerRegion;
    }
    public String type() {
        return this.type;
    }
    public List<GetConnectionASideAccessPointVirtualDevice> virtualDevices() {
        return this.virtualDevices;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionASideAccessPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionASideAccessPointAccount> accounts;
        private String authenticationKey;
        private List<GetConnectionASideAccessPointGateway> gateways;
        private List<GetConnectionASideAccessPointInterface> interfaces;
        private List<GetConnectionASideAccessPointLinkProtocol> linkProtocols;
        private List<GetConnectionASideAccessPointLocation> locations;
        private String peeringType;
        private List<GetConnectionASideAccessPointPort> ports;
        private List<GetConnectionASideAccessPointProfile> profiles;
        private String providerConnectionId;
        private List<GetConnectionASideAccessPointRouter> routers;
        private String sellerRegion;
        private String type;
        private List<GetConnectionASideAccessPointVirtualDevice> virtualDevices;
        public Builder() {}
        public Builder(GetConnectionASideAccessPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accounts = defaults.accounts;
    	      this.authenticationKey = defaults.authenticationKey;
    	      this.gateways = defaults.gateways;
    	      this.interfaces = defaults.interfaces;
    	      this.linkProtocols = defaults.linkProtocols;
    	      this.locations = defaults.locations;
    	      this.peeringType = defaults.peeringType;
    	      this.ports = defaults.ports;
    	      this.profiles = defaults.profiles;
    	      this.providerConnectionId = defaults.providerConnectionId;
    	      this.routers = defaults.routers;
    	      this.sellerRegion = defaults.sellerRegion;
    	      this.type = defaults.type;
    	      this.virtualDevices = defaults.virtualDevices;
        }

        @CustomType.Setter
        public Builder accounts(List<GetConnectionASideAccessPointAccount> accounts) {
            this.accounts = Objects.requireNonNull(accounts);
            return this;
        }
        public Builder accounts(GetConnectionASideAccessPointAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder authenticationKey(String authenticationKey) {
            this.authenticationKey = Objects.requireNonNull(authenticationKey);
            return this;
        }
        @CustomType.Setter
        public Builder gateways(List<GetConnectionASideAccessPointGateway> gateways) {
            this.gateways = Objects.requireNonNull(gateways);
            return this;
        }
        public Builder gateways(GetConnectionASideAccessPointGateway... gateways) {
            return gateways(List.of(gateways));
        }
        @CustomType.Setter
        public Builder interfaces(List<GetConnectionASideAccessPointInterface> interfaces) {
            this.interfaces = Objects.requireNonNull(interfaces);
            return this;
        }
        public Builder interfaces(GetConnectionASideAccessPointInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder linkProtocols(List<GetConnectionASideAccessPointLinkProtocol> linkProtocols) {
            this.linkProtocols = Objects.requireNonNull(linkProtocols);
            return this;
        }
        public Builder linkProtocols(GetConnectionASideAccessPointLinkProtocol... linkProtocols) {
            return linkProtocols(List.of(linkProtocols));
        }
        @CustomType.Setter
        public Builder locations(List<GetConnectionASideAccessPointLocation> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(GetConnectionASideAccessPointLocation... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder peeringType(String peeringType) {
            this.peeringType = Objects.requireNonNull(peeringType);
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetConnectionASideAccessPointPort> ports) {
            this.ports = Objects.requireNonNull(ports);
            return this;
        }
        public Builder ports(GetConnectionASideAccessPointPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder profiles(List<GetConnectionASideAccessPointProfile> profiles) {
            this.profiles = Objects.requireNonNull(profiles);
            return this;
        }
        public Builder profiles(GetConnectionASideAccessPointProfile... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder providerConnectionId(String providerConnectionId) {
            this.providerConnectionId = Objects.requireNonNull(providerConnectionId);
            return this;
        }
        @CustomType.Setter
        public Builder routers(List<GetConnectionASideAccessPointRouter> routers) {
            this.routers = Objects.requireNonNull(routers);
            return this;
        }
        public Builder routers(GetConnectionASideAccessPointRouter... routers) {
            return routers(List.of(routers));
        }
        @CustomType.Setter
        public Builder sellerRegion(String sellerRegion) {
            this.sellerRegion = Objects.requireNonNull(sellerRegion);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualDevices(List<GetConnectionASideAccessPointVirtualDevice> virtualDevices) {
            this.virtualDevices = Objects.requireNonNull(virtualDevices);
            return this;
        }
        public Builder virtualDevices(GetConnectionASideAccessPointVirtualDevice... virtualDevices) {
            return virtualDevices(List.of(virtualDevices));
        }
        public GetConnectionASideAccessPoint build() {
            final var o = new GetConnectionASideAccessPoint();
            o.accounts = accounts;
            o.authenticationKey = authenticationKey;
            o.gateways = gateways;
            o.interfaces = interfaces;
            o.linkProtocols = linkProtocols;
            o.locations = locations;
            o.peeringType = peeringType;
            o.ports = ports;
            o.profiles = profiles;
            o.providerConnectionId = providerConnectionId;
            o.routers = routers;
            o.sellerRegion = sellerRegion;
            o.type = type;
            o.virtualDevices = virtualDevices;
            return o;
        }
    }
}
