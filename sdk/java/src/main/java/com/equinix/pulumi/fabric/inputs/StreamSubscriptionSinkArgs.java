// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.StreamSubscriptionSinkCredentialArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionSinkSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamSubscriptionSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSubscriptionSinkArgs Empty = new StreamSubscriptionSinkArgs();

    /**
     * Boolean switch enabling batch delivery of data
     * 
     */
    @Import(name="batchEnabled")
    private @Nullable Output<Boolean> batchEnabled;

    /**
     * @return Boolean switch enabling batch delivery of data
     * 
     */
    public Optional<Output<Boolean>> batchEnabled() {
        return Optional.ofNullable(this.batchEnabled);
    }

    /**
     * Maximum size of the batch delivery if enabled
     * 
     */
    @Import(name="batchSizeMax")
    private @Nullable Output<Integer> batchSizeMax;

    /**
     * @return Maximum size of the batch delivery if enabled
     * 
     */
    public Optional<Output<Integer>> batchSizeMax() {
        return Optional.ofNullable(this.batchSizeMax);
    }

    /**
     * Maximum time to wait for batch delivery if enabled
     * 
     */
    @Import(name="batchWaitTimeMax")
    private @Nullable Output<Integer> batchWaitTimeMax;

    /**
     * @return Maximum time to wait for batch delivery if enabled
     * 
     */
    public Optional<Output<Integer>> batchWaitTimeMax() {
        return Optional.ofNullable(this.batchWaitTimeMax);
    }

    /**
     * Access details for the specified sink type
     * 
     */
    @Import(name="credential")
    private @Nullable Output<StreamSubscriptionSinkCredentialArgs> credential;

    /**
     * @return Access details for the specified sink type
     * 
     */
    public Optional<Output<StreamSubscriptionSinkCredentialArgs>> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Stream subscription sink settings
     * 
     */
    @Import(name="settings")
    private @Nullable Output<StreamSubscriptionSinkSettingsArgs> settings;

    /**
     * @return Stream subscription sink settings
     * 
     */
    public Optional<Output<StreamSubscriptionSinkSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Type of the subscriber
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the subscriber
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Publicly reachable http endpoint destination for data stream
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return Publicly reachable http endpoint destination for data stream
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private StreamSubscriptionSinkArgs() {}

    private StreamSubscriptionSinkArgs(StreamSubscriptionSinkArgs $) {
        this.batchEnabled = $.batchEnabled;
        this.batchSizeMax = $.batchSizeMax;
        this.batchWaitTimeMax = $.batchWaitTimeMax;
        this.credential = $.credential;
        this.host = $.host;
        this.settings = $.settings;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSubscriptionSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSubscriptionSinkArgs $;

        public Builder() {
            $ = new StreamSubscriptionSinkArgs();
        }

        public Builder(StreamSubscriptionSinkArgs defaults) {
            $ = new StreamSubscriptionSinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchEnabled Boolean switch enabling batch delivery of data
         * 
         * @return builder
         * 
         */
        public Builder batchEnabled(@Nullable Output<Boolean> batchEnabled) {
            $.batchEnabled = batchEnabled;
            return this;
        }

        /**
         * @param batchEnabled Boolean switch enabling batch delivery of data
         * 
         * @return builder
         * 
         */
        public Builder batchEnabled(Boolean batchEnabled) {
            return batchEnabled(Output.of(batchEnabled));
        }

        /**
         * @param batchSizeMax Maximum size of the batch delivery if enabled
         * 
         * @return builder
         * 
         */
        public Builder batchSizeMax(@Nullable Output<Integer> batchSizeMax) {
            $.batchSizeMax = batchSizeMax;
            return this;
        }

        /**
         * @param batchSizeMax Maximum size of the batch delivery if enabled
         * 
         * @return builder
         * 
         */
        public Builder batchSizeMax(Integer batchSizeMax) {
            return batchSizeMax(Output.of(batchSizeMax));
        }

        /**
         * @param batchWaitTimeMax Maximum time to wait for batch delivery if enabled
         * 
         * @return builder
         * 
         */
        public Builder batchWaitTimeMax(@Nullable Output<Integer> batchWaitTimeMax) {
            $.batchWaitTimeMax = batchWaitTimeMax;
            return this;
        }

        /**
         * @param batchWaitTimeMax Maximum time to wait for batch delivery if enabled
         * 
         * @return builder
         * 
         */
        public Builder batchWaitTimeMax(Integer batchWaitTimeMax) {
            return batchWaitTimeMax(Output.of(batchWaitTimeMax));
        }

        /**
         * @param credential Access details for the specified sink type
         * 
         * @return builder
         * 
         */
        public Builder credential(@Nullable Output<StreamSubscriptionSinkCredentialArgs> credential) {
            $.credential = credential;
            return this;
        }

        /**
         * @param credential Access details for the specified sink type
         * 
         * @return builder
         * 
         */
        public Builder credential(StreamSubscriptionSinkCredentialArgs credential) {
            return credential(Output.of(credential));
        }

        /**
         * @param host Known hostname of certain data stream subscription products. Not to be confused with a variable URI
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Known hostname of certain data stream subscription products. Not to be confused with a variable URI
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param settings Stream subscription sink settings
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<StreamSubscriptionSinkSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Stream subscription sink settings
         * 
         * @return builder
         * 
         */
        public Builder settings(StreamSubscriptionSinkSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param type Type of the subscriber
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the subscriber
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uri Publicly reachable http endpoint destination for data stream
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri Publicly reachable http endpoint destination for data stream
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public StreamSubscriptionSinkArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamSubscriptionSinkArgs", "type");
            }
            return $;
        }
    }

}
