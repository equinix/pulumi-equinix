// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVrfResult {
    /**
     * @return Description of the VRF.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     * 
     */
    private List<String> ipRanges;
    /**
     * @return The 4-byte ASN set on the VRF.
     * 
     */
    private Integer localAsn;
    /**
     * @return Metro ID or Code where the VRF will be deployed.
     * 
     */
    private String metro;
    /**
     * @return User-supplied name of the VRF, unique to the project
     * 
     */
    private String name;
    /**
     * @return Project ID where the VRF will be deployed.
     * 
     */
    private String projectId;
    private String vrfId;

    private GetVrfResult() {}
    /**
     * @return Description of the VRF.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     * 
     */
    public List<String> ipRanges() {
        return this.ipRanges;
    }
    /**
     * @return The 4-byte ASN set on the VRF.
     * 
     */
    public Integer localAsn() {
        return this.localAsn;
    }
    /**
     * @return Metro ID or Code where the VRF will be deployed.
     * 
     */
    public String metro() {
        return this.metro;
    }
    /**
     * @return User-supplied name of the VRF, unique to the project
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Project ID where the VRF will be deployed.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    public String vrfId() {
        return this.vrfId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVrfResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String id;
        private List<String> ipRanges;
        private Integer localAsn;
        private String metro;
        private String name;
        private String projectId;
        private String vrfId;
        public Builder() {}
        public Builder(GetVrfResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.ipRanges = defaults.ipRanges;
    	      this.localAsn = defaults.localAsn;
    	      this.metro = defaults.metro;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.vrfId = defaults.vrfId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipRanges(List<String> ipRanges) {
            this.ipRanges = Objects.requireNonNull(ipRanges);
            return this;
        }
        public Builder ipRanges(String... ipRanges) {
            return ipRanges(List.of(ipRanges));
        }
        @CustomType.Setter
        public Builder localAsn(Integer localAsn) {
            this.localAsn = Objects.requireNonNull(localAsn);
            return this;
        }
        @CustomType.Setter
        public Builder metro(String metro) {
            this.metro = Objects.requireNonNull(metro);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder vrfId(String vrfId) {
            this.vrfId = Objects.requireNonNull(vrfId);
            return this;
        }
        public GetVrfResult build() {
            final var o = new GetVrfResult();
            o.description = description;
            o.id = id;
            o.ipRanges = ipRanges;
            o.localAsn = localAsn;
            o.metro = metro;
            o.name = name;
            o.projectId = projectId;
            o.vrfId = vrfId;
            return o;
        }
    }
}
