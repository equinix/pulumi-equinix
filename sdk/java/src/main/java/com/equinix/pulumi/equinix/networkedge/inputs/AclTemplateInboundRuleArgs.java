// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge.inputs;

import com.equinix.pulumi.equinix.networkedge.enums.AclProtocolType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclTemplateInboundRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclTemplateInboundRuleArgs Empty = new AclTemplateInboundRuleArgs();

    /**
     * Inbound rule description, up to 200 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Inbound rule description, up to 200 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Inbound traffic destination ports. Allowed values are a comma separated
     * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    @Import(name="dstPort", required=true)
    private Output<String> dstPort;

    /**
     * @return Inbound traffic destination ports. Allowed values are a comma separated
     * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    public Output<String> dstPort() {
        return this.dstPort;
    }

    /**
     * Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<Either<String,AclProtocolType>> protocol;

    /**
     * @return Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
     * 
     */
    public Output<Either<String,AclProtocolType>> protocol() {
        return this.protocol;
    }

    @Import(name="sequenceNumber")
    private @Nullable Output<Integer> sequenceNumber;

    public Optional<Output<Integer>> sequenceNumber() {
        return Optional.ofNullable(this.sequenceNumber);
    }

    /**
     * @deprecated
     * Source Type will not be returned
     * 
     */
    @Deprecated /* Source Type will not be returned */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @deprecated
     * Source Type will not be returned
     * 
     */
    @Deprecated /* Source Type will not be returned */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * Inbound traffic source ports. Allowed values are a comma separated list
     * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    @Import(name="srcPort", required=true)
    private Output<String> srcPort;

    /**
     * @return Inbound traffic source ports. Allowed values are a comma separated list
     * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    public Output<String> srcPort() {
        return this.srcPort;
    }

    /**
     * Inbound traffic source IP subnet in CIDR format.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return Inbound traffic source IP subnet in CIDR format.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Inbound traffic source IP subnets in CIDR format.
     * 
     * @deprecated
     * Use Subnet instead
     * 
     */
    @Deprecated /* Use Subnet instead */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return Inbound traffic source IP subnets in CIDR format.
     * 
     * @deprecated
     * Use Subnet instead
     * 
     */
    @Deprecated /* Use Subnet instead */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    private AclTemplateInboundRuleArgs() {}

    private AclTemplateInboundRuleArgs(AclTemplateInboundRuleArgs $) {
        this.description = $.description;
        this.dstPort = $.dstPort;
        this.protocol = $.protocol;
        this.sequenceNumber = $.sequenceNumber;
        this.sourceType = $.sourceType;
        this.srcPort = $.srcPort;
        this.subnet = $.subnet;
        this.subnets = $.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclTemplateInboundRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclTemplateInboundRuleArgs $;

        public Builder() {
            $ = new AclTemplateInboundRuleArgs();
        }

        public Builder(AclTemplateInboundRuleArgs defaults) {
            $ = new AclTemplateInboundRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Inbound rule description, up to 200 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Inbound rule description, up to 200 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dstPort Inbound traffic destination ports. Allowed values are a comma separated
         * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         * 
         * @return builder
         * 
         */
        public Builder dstPort(Output<String> dstPort) {
            $.dstPort = dstPort;
            return this;
        }

        /**
         * @param dstPort Inbound traffic destination ports. Allowed values are a comma separated
         * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         * 
         * @return builder
         * 
         */
        public Builder dstPort(String dstPort) {
            return dstPort(Output.of(dstPort));
        }

        /**
         * @param protocol Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<Either<String,AclProtocolType>> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Either<String,AclProtocolType> protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocol Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        /**
         * @param protocol Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(AclProtocolType protocol) {
            return protocol(Either.ofRight(protocol));
        }

        public Builder sequenceNumber(@Nullable Output<Integer> sequenceNumber) {
            $.sequenceNumber = sequenceNumber;
            return this;
        }

        public Builder sequenceNumber(Integer sequenceNumber) {
            return sequenceNumber(Output.of(sequenceNumber));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Source Type will not be returned
         * 
         */
        @Deprecated /* Source Type will not be returned */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Source Type will not be returned
         * 
         */
        @Deprecated /* Source Type will not be returned */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param srcPort Inbound traffic source ports. Allowed values are a comma separated list
         * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         * 
         * @return builder
         * 
         */
        public Builder srcPort(Output<String> srcPort) {
            $.srcPort = srcPort;
            return this;
        }

        /**
         * @param srcPort Inbound traffic source ports. Allowed values are a comma separated list
         * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         * 
         * @return builder
         * 
         */
        public Builder srcPort(String srcPort) {
            return srcPort(Output.of(srcPort));
        }

        /**
         * @param subnet Inbound traffic source IP subnet in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Inbound traffic source IP subnet in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param subnets Inbound traffic source IP subnets in CIDR format.
         * 
         * @return builder
         * 
         * @deprecated
         * Use Subnet instead
         * 
         */
        @Deprecated /* Use Subnet instead */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets Inbound traffic source IP subnets in CIDR format.
         * 
         * @return builder
         * 
         * @deprecated
         * Use Subnet instead
         * 
         */
        @Deprecated /* Use Subnet instead */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets Inbound traffic source IP subnets in CIDR format.
         * 
         * @return builder
         * 
         * @deprecated
         * Use Subnet instead
         * 
         */
        @Deprecated /* Use Subnet instead */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        public AclTemplateInboundRuleArgs build() {
            $.dstPort = Objects.requireNonNull($.dstPort, "expected parameter 'dstPort' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.srcPort = Objects.requireNonNull($.srcPort, "expected parameter 'srcPort' to be non-null");
            return $;
        }
    }

}
