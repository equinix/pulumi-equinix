// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointAccount;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointGateway;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointInterface;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointLinkProtocol;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointLocation;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointNetwork;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointPort;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointProfile;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointRouter;
import com.equinix.pulumi.fabric.outputs.GetConnectionZSideAccessPointVirtualDevice;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionZSideAccessPoint {
    /**
     * @return Account
     * 
     */
    private List<GetConnectionZSideAccessPointAccount> accounts;
    /**
     * @return Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    private @Nullable String authenticationKey;
    /**
     * @return **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    private @Nullable GetConnectionZSideAccessPointGateway gateway;
    /**
     * @return Virtual device interface
     * 
     */
    private @Nullable GetConnectionZSideAccessPointInterface interface_;
    /**
     * @return Connection link protocol
     * 
     */
    private @Nullable GetConnectionZSideAccessPointLinkProtocol linkProtocol;
    /**
     * @return Access point location
     * 
     */
    private GetConnectionZSideAccessPointLocation location;
    /**
     * @return network access point information
     * 
     */
    private @Nullable GetConnectionZSideAccessPointNetwork network;
    /**
     * @return Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    private @Nullable String peeringType;
    /**
     * @return Port access point information
     * 
     */
    private @Nullable GetConnectionZSideAccessPointPort port;
    /**
     * @return Service Profile
     * 
     */
    private @Nullable GetConnectionZSideAccessPointProfile profile;
    /**
     * @return Provider assigned Connection Id
     * 
     */
    private String providerConnectionId;
    /**
     * @return Cloud Router access point information that replaces `gateway`
     * 
     */
    private @Nullable GetConnectionZSideAccessPointRouter router;
    /**
     * @return Access point seller region
     * 
     */
    private @Nullable String sellerRegion;
    /**
     * @return Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     * 
     */
    private @Nullable String type;
    /**
     * @return Virtual device
     * 
     */
    private @Nullable GetConnectionZSideAccessPointVirtualDevice virtualDevice;

    private GetConnectionZSideAccessPoint() {}
    /**
     * @return Account
     * 
     */
    public List<GetConnectionZSideAccessPointAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    public Optional<String> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }
    /**
     * @return **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    public Optional<GetConnectionZSideAccessPointGateway> gateway() {
        return Optional.ofNullable(this.gateway);
    }
    /**
     * @return Virtual device interface
     * 
     */
    public Optional<GetConnectionZSideAccessPointInterface> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return Connection link protocol
     * 
     */
    public Optional<GetConnectionZSideAccessPointLinkProtocol> linkProtocol() {
        return Optional.ofNullable(this.linkProtocol);
    }
    /**
     * @return Access point location
     * 
     */
    public GetConnectionZSideAccessPointLocation location() {
        return this.location;
    }
    /**
     * @return network access point information
     * 
     */
    public Optional<GetConnectionZSideAccessPointNetwork> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    public Optional<String> peeringType() {
        return Optional.ofNullable(this.peeringType);
    }
    /**
     * @return Port access point information
     * 
     */
    public Optional<GetConnectionZSideAccessPointPort> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Service Profile
     * 
     */
    public Optional<GetConnectionZSideAccessPointProfile> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return Provider assigned Connection Id
     * 
     */
    public String providerConnectionId() {
        return this.providerConnectionId;
    }
    /**
     * @return Cloud Router access point information that replaces `gateway`
     * 
     */
    public Optional<GetConnectionZSideAccessPointRouter> router() {
        return Optional.ofNullable(this.router);
    }
    /**
     * @return Access point seller region
     * 
     */
    public Optional<String> sellerRegion() {
        return Optional.ofNullable(this.sellerRegion);
    }
    /**
     * @return Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Virtual device
     * 
     */
    public Optional<GetConnectionZSideAccessPointVirtualDevice> virtualDevice() {
        return Optional.ofNullable(this.virtualDevice);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionZSideAccessPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionZSideAccessPointAccount> accounts;
        private @Nullable String authenticationKey;
        private @Nullable GetConnectionZSideAccessPointGateway gateway;
        private @Nullable GetConnectionZSideAccessPointInterface interface_;
        private @Nullable GetConnectionZSideAccessPointLinkProtocol linkProtocol;
        private GetConnectionZSideAccessPointLocation location;
        private @Nullable GetConnectionZSideAccessPointNetwork network;
        private @Nullable String peeringType;
        private @Nullable GetConnectionZSideAccessPointPort port;
        private @Nullable GetConnectionZSideAccessPointProfile profile;
        private String providerConnectionId;
        private @Nullable GetConnectionZSideAccessPointRouter router;
        private @Nullable String sellerRegion;
        private @Nullable String type;
        private @Nullable GetConnectionZSideAccessPointVirtualDevice virtualDevice;
        public Builder() {}
        public Builder(GetConnectionZSideAccessPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accounts = defaults.accounts;
    	      this.authenticationKey = defaults.authenticationKey;
    	      this.gateway = defaults.gateway;
    	      this.interface_ = defaults.interface_;
    	      this.linkProtocol = defaults.linkProtocol;
    	      this.location = defaults.location;
    	      this.network = defaults.network;
    	      this.peeringType = defaults.peeringType;
    	      this.port = defaults.port;
    	      this.profile = defaults.profile;
    	      this.providerConnectionId = defaults.providerConnectionId;
    	      this.router = defaults.router;
    	      this.sellerRegion = defaults.sellerRegion;
    	      this.type = defaults.type;
    	      this.virtualDevice = defaults.virtualDevice;
        }

        @CustomType.Setter
        public Builder accounts(List<GetConnectionZSideAccessPointAccount> accounts) {
            if (accounts == null) {
              throw new MissingRequiredPropertyException("GetConnectionZSideAccessPoint", "accounts");
            }
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(GetConnectionZSideAccessPointAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder authenticationKey(@Nullable String authenticationKey) {

            this.authenticationKey = authenticationKey;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(@Nullable GetConnectionZSideAccessPointGateway gateway) {

            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(@Nullable GetConnectionZSideAccessPointInterface interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder linkProtocol(@Nullable GetConnectionZSideAccessPointLinkProtocol linkProtocol) {

            this.linkProtocol = linkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder location(GetConnectionZSideAccessPointLocation location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetConnectionZSideAccessPoint", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable GetConnectionZSideAccessPointNetwork network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder peeringType(@Nullable String peeringType) {

            this.peeringType = peeringType;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable GetConnectionZSideAccessPointPort port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable GetConnectionZSideAccessPointProfile profile) {

            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder providerConnectionId(String providerConnectionId) {
            if (providerConnectionId == null) {
              throw new MissingRequiredPropertyException("GetConnectionZSideAccessPoint", "providerConnectionId");
            }
            this.providerConnectionId = providerConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder router(@Nullable GetConnectionZSideAccessPointRouter router) {

            this.router = router;
            return this;
        }
        @CustomType.Setter
        public Builder sellerRegion(@Nullable String sellerRegion) {

            this.sellerRegion = sellerRegion;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder virtualDevice(@Nullable GetConnectionZSideAccessPointVirtualDevice virtualDevice) {

            this.virtualDevice = virtualDevice;
            return this;
        }
        public GetConnectionZSideAccessPoint build() {
            final var _resultValue = new GetConnectionZSideAccessPoint();
            _resultValue.accounts = accounts;
            _resultValue.authenticationKey = authenticationKey;
            _resultValue.gateway = gateway;
            _resultValue.interface_ = interface_;
            _resultValue.linkProtocol = linkProtocol;
            _resultValue.location = location;
            _resultValue.network = network;
            _resultValue.peeringType = peeringType;
            _resultValue.port = port;
            _resultValue.profile = profile;
            _resultValue.providerConnectionId = providerConnectionId;
            _resultValue.router = router;
            _resultValue.sellerRegion = sellerRegion;
            _resultValue.type = type;
            _resultValue.virtualDevice = virtualDevice;
            return _resultValue;
        }
    }
}
