// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.inputs;

import com.equinix.pulumi.networkedge.enums.ThroughputUnit;
import com.equinix.pulumi.networkedge.inputs.DeviceClusterDetailsArgs;
import com.equinix.pulumi.networkedge.inputs.DeviceInterfaceArgs;
import com.equinix.pulumi.networkedge.inputs.DeviceSecondaryDeviceArgs;
import com.equinix.pulumi.networkedge.inputs.DeviceSshKeyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceState extends com.pulumi.resources.ResourceArgs {

    public static final DeviceState Empty = new DeviceState();

    /**
     * Billing account number for a device.
     * 
     */
    @Import(name="accountNumber")
    private @Nullable Output<String> accountNumber;

    /**
     * @return Billing account number for a device.
     * 
     */
    public Optional<Output<String>> accountNumber() {
        return Optional.ofNullable(this.accountNumber);
    }

    /**
     * Identifier of a WAN interface ACL template that will be applied on the device.
     * 
     */
    @Import(name="aclTemplateId")
    private @Nullable Output<String> aclTemplateId;

    /**
     * @return Identifier of a WAN interface ACL template that will be applied on the device.
     * 
     */
    public Optional<Output<String>> aclTemplateId() {
        return Optional.ofNullable(this.aclTemplateId);
    }

    /**
     * Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
     * 
     */
    @Import(name="additionalBandwidth")
    private @Nullable Output<Integer> additionalBandwidth;

    /**
     * @return Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
     * 
     */
    public Optional<Output<Integer>> additionalBandwidth() {
        return Optional.ofNullable(this.additionalBandwidth);
    }

    /**
     * (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    @Import(name="asn")
    private @Nullable Output<Integer> asn;

    /**
     * @return (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    public Optional<Output<Integer>> asn() {
        return Optional.ofNullable(this.asn);
    }

    /**
     * Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
     * 
     */
    @Import(name="byol")
    private @Nullable Output<Boolean> byol;

    /**
     * @return Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
     * 
     */
    public Optional<Output<Boolean>> byol() {
        return Optional.ofNullable(this.byol);
    }

    /**
     * Identifier of a cloud init file that will be applied on the device.
     * 
     */
    @Import(name="cloudInitFileId")
    private @Nullable Output<String> cloudInitFileId;

    /**
     * @return Identifier of a cloud init file that will be applied on the device.
     * 
     */
    public Optional<Output<String>> cloudInitFileId() {
        return Optional.ofNullable(this.cloudInitFileId);
    }

    /**
     * An object that has the cluster details. See Cluster Details below for more details.
     * 
     */
    @Import(name="clusterDetails")
    private @Nullable Output<DeviceClusterDetailsArgs> clusterDetails;

    /**
     * @return An object that has the cluster details. See Cluster Details below for more details.
     * 
     */
    public Optional<Output<DeviceClusterDetailsArgs>> clusterDetails() {
        return Optional.ofNullable(this.clusterDetails);
    }

    /**
     * Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
     * 
     */
    @Import(name="connectivity")
    private @Nullable Output<String> connectivity;

    /**
     * @return Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
     * 
     */
    public Optional<Output<String>> connectivity() {
        return Optional.ofNullable(this.connectivity);
    }

    /**
     * Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
     * 
     */
    @Import(name="coreCount")
    private @Nullable Output<Integer> coreCount;

    /**
     * @return Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
     * 
     */
    public Optional<Output<Integer>> coreCount() {
        return Optional.ofNullable(this.coreCount);
    }

    /**
     * Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
     * 
     */
    @Import(name="diverseDeviceId")
    private @Nullable Output<String> diverseDeviceId;

    /**
     * @return Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
     * 
     */
    public Optional<Output<String>> diverseDeviceId() {
        return Optional.ofNullable(this.diverseDeviceId);
    }

    /**
     * Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
     * 
     */
    @Import(name="diverseDeviceName")
    private @Nullable Output<String> diverseDeviceName;

    /**
     * @return Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
     * 
     */
    public Optional<Output<String>> diverseDeviceName() {
        return Optional.ofNullable(this.diverseDeviceName);
    }

    /**
     * Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
     * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
     * 
     */
    @Import(name="generateDefaultPassword")
    private @Nullable Output<Boolean> generateDefaultPassword;

    /**
     * @return Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
     * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
     * 
     */
    public Optional<Output<Boolean>> generateDefaultPassword() {
        return Optional.ofNullable(this.generateDefaultPassword);
    }

    /**
     * Device hostname prefix.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Device hostname prefix.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Device location Equinix Business Exchange name.
     * 
     */
    @Import(name="ibx")
    private @Nullable Output<String> ibx;

    /**
     * @return Device location Equinix Business Exchange name.
     * 
     */
    public Optional<Output<String>> ibx() {
        return Optional.ofNullable(this.ibx);
    }

    /**
     * Number of network interfaces on a device. If not specified, default number for a given device type will be used.
     * 
     */
    @Import(name="interfaceCount")
    private @Nullable Output<Integer> interfaceCount;

    /**
     * @return Number of network interfaces on a device. If not specified, default number for a given device type will be used.
     * 
     */
    public Optional<Output<Integer>> interfaceCount() {
        return Optional.ofNullable(this.interfaceCount);
    }

    /**
     * List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    @Import(name="interfaces")
    private @Nullable Output<List<DeviceInterfaceArgs>> interfaces;

    /**
     * @return List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    public Optional<Output<List<DeviceInterfaceArgs>>> interfaces() {
        return Optional.ofNullable(this.interfaces);
    }

    /**
     * Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    @Import(name="licenseFile")
    private @Nullable Output<String> licenseFile;

    /**
     * @return Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    public Optional<Output<String>> licenseFile() {
        return Optional.ofNullable(this.licenseFile);
    }

    /**
     * Identifier of a license file that will be applied on the device.
     * 
     */
    @Import(name="licenseFileId")
    private @Nullable Output<String> licenseFileId;

    /**
     * @return Identifier of a license file that will be applied on the device.
     * 
     */
    public Optional<Output<String>> licenseFileId() {
        return Optional.ofNullable(this.licenseFileId);
    }

    /**
     * Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    @Import(name="licenseStatus")
    private @Nullable Output<String> licenseStatus;

    /**
     * @return Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    public Optional<Output<String>> licenseStatus() {
        return Optional.ofNullable(this.licenseStatus);
    }

    /**
     * License Token applicable for some device types in BYOL licensing mode.
     * 
     */
    @Import(name="licenseToken")
    private @Nullable Output<String> licenseToken;

    /**
     * @return License Token applicable for some device types in BYOL licensing mode.
     * 
     */
    public Optional<Output<String>> licenseToken() {
        return Optional.ofNullable(this.licenseToken);
    }

    /**
     * Device location metro code.
     * 
     */
    @Import(name="metroCode")
    private @Nullable Output<String> metroCode;

    /**
     * @return Device location metro code.
     * 
     */
    public Optional<Output<String>> metroCode() {
        return Optional.ofNullable(this.metroCode);
    }

    /**
     * Identifier of an MGMT interface ACL template that will be applied on the device.
     * 
     */
    @Import(name="mgmtAclTemplateUuid")
    private @Nullable Output<String> mgmtAclTemplateUuid;

    /**
     * @return Identifier of an MGMT interface ACL template that will be applied on the device.
     * 
     */
    public Optional<Output<String>> mgmtAclTemplateUuid() {
        return Optional.ofNullable(this.mgmtAclTemplateUuid);
    }

    /**
     * Device name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Device name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of email addresses that will receive device status notifications.
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<String>> notifications;

    /**
     * @return List of email addresses that will receive device status notifications.
     * 
     */
    public Optional<Output<List<String>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * Name/number used to identify device order on the invoice.
     * 
     */
    @Import(name="orderReference")
    private @Nullable Output<String> orderReference;

    /**
     * @return Name/number used to identify device order on the invoice.
     * 
     */
    public Optional<Output<String>> orderReference() {
        return Optional.ofNullable(this.orderReference);
    }

    /**
     * Device software package code.
     * 
     */
    @Import(name="packageCode")
    private @Nullable Output<String> packageCode;

    /**
     * @return Device software package code.
     * 
     */
    public Optional<Output<String>> packageCode() {
        return Optional.ofNullable(this.packageCode);
    }

    /**
     * Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Purchase order number associated with a device order.
     * 
     */
    @Import(name="purchaseOrderNumber")
    private @Nullable Output<String> purchaseOrderNumber;

    /**
     * @return Purchase order number associated with a device order.
     * 
     */
    public Optional<Output<String>> purchaseOrderNumber() {
        return Optional.ofNullable(this.purchaseOrderNumber);
    }

    /**
     * Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    @Import(name="redundancyType")
    private @Nullable Output<String> redundancyType;

    /**
     * @return Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    public Optional<Output<String>> redundancyType() {
        return Optional.ofNullable(this.redundancyType);
    }

    /**
     * Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    @Import(name="redundantId")
    private @Nullable Output<String> redundantId;

    /**
     * @return Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    public Optional<Output<String>> redundantId() {
        return Optional.ofNullable(this.redundantId);
    }

    /**
     * Device location region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Device location region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
     * 
     */
    @Import(name="secondaryDevice")
    private @Nullable Output<DeviceSecondaryDeviceArgs> secondaryDevice;

    /**
     * @return Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
     * 
     */
    public Optional<Output<DeviceSecondaryDeviceArgs>> secondaryDevice() {
        return Optional.ofNullable(this.secondaryDevice);
    }

    /**
     * Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
     * 
     */
    @Import(name="selfManaged")
    private @Nullable Output<Boolean> selfManaged;

    /**
     * @return Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
     * 
     */
    public Optional<Output<Boolean>> selfManaged() {
        return Optional.ofNullable(this.selfManaged);
    }

    /**
     * IP address of SSH enabled interface on the device.
     * 
     */
    @Import(name="sshIpAddress")
    private @Nullable Output<String> sshIpAddress;

    /**
     * @return IP address of SSH enabled interface on the device.
     * 
     */
    public Optional<Output<String>> sshIpAddress() {
        return Optional.ofNullable(this.sshIpAddress);
    }

    /**
     * FQDN of SSH enabled interface on the device.
     * 
     */
    @Import(name="sshIpFqdn")
    private @Nullable Output<String> sshIpFqdn;

    /**
     * @return FQDN of SSH enabled interface on the device.
     * 
     */
    public Optional<Output<String>> sshIpFqdn() {
        return Optional.ofNullable(this.sshIpFqdn);
    }

    /**
     * Definition of SSH key that will be provisioned on a device
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<DeviceSshKeyArgs> sshKey;

    /**
     * @return Definition of SSH key that will be provisioned on a device
     * 
     */
    public Optional<Output<DeviceSshKeyArgs>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Device term length.
     * 
     */
    @Import(name="termLength")
    private @Nullable Output<Integer> termLength;

    /**
     * @return Device term length.
     * 
     */
    public Optional<Output<Integer>> termLength() {
        return Optional.ofNullable(this.termLength);
    }

    /**
     * Device license throughput.
     * 
     */
    @Import(name="throughput")
    private @Nullable Output<Integer> throughput;

    /**
     * @return Device license throughput.
     * 
     */
    public Optional<Output<Integer>> throughput() {
        return Optional.ofNullable(this.throughput);
    }

    /**
     * License throughput unit. One of `Mbps` or `Gbps`.
     * 
     */
    @Import(name="throughputUnit")
    private @Nullable Output<Either<String,ThroughputUnit>> throughputUnit;

    /**
     * @return License throughput unit. One of `Mbps` or `Gbps`.
     * 
     */
    public Optional<Output<Either<String,ThroughputUnit>>> throughputUnit() {
        return Optional.ofNullable(this.throughputUnit);
    }

    /**
     * Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<Integer> tier;

    /**
     * @return Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
     * 
     */
    public Optional<Output<Integer>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * Device type code.
     * 
     */
    @Import(name="typeCode")
    private @Nullable Output<String> typeCode;

    /**
     * @return Device type code.
     * 
     */
    public Optional<Output<String>> typeCode() {
        return Optional.ofNullable(this.typeCode);
    }

    /**
     * Device unique identifier.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Device unique identifier.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
     * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
     * 
     */
    @Import(name="vendorConfiguration")
    private @Nullable Output<Map<String,String>> vendorConfiguration;

    /**
     * @return Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
     * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
     * 
     */
    public Optional<Output<Map<String,String>>> vendorConfiguration() {
        return Optional.ofNullable(this.vendorConfiguration);
    }

    /**
     * Device software software version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Device software software version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * device interface id picked for WAN
     * 
     */
    @Import(name="wanInterfaceId")
    private @Nullable Output<String> wanInterfaceId;

    /**
     * @return device interface id picked for WAN
     * 
     */
    public Optional<Output<String>> wanInterfaceId() {
        return Optional.ofNullable(this.wanInterfaceId);
    }

    /**
     * Device location zone code.
     * 
     */
    @Import(name="zoneCode")
    private @Nullable Output<String> zoneCode;

    /**
     * @return Device location zone code.
     * 
     */
    public Optional<Output<String>> zoneCode() {
        return Optional.ofNullable(this.zoneCode);
    }

    private DeviceState() {}

    private DeviceState(DeviceState $) {
        this.accountNumber = $.accountNumber;
        this.aclTemplateId = $.aclTemplateId;
        this.additionalBandwidth = $.additionalBandwidth;
        this.asn = $.asn;
        this.byol = $.byol;
        this.cloudInitFileId = $.cloudInitFileId;
        this.clusterDetails = $.clusterDetails;
        this.connectivity = $.connectivity;
        this.coreCount = $.coreCount;
        this.diverseDeviceId = $.diverseDeviceId;
        this.diverseDeviceName = $.diverseDeviceName;
        this.generateDefaultPassword = $.generateDefaultPassword;
        this.hostname = $.hostname;
        this.ibx = $.ibx;
        this.interfaceCount = $.interfaceCount;
        this.interfaces = $.interfaces;
        this.licenseFile = $.licenseFile;
        this.licenseFileId = $.licenseFileId;
        this.licenseStatus = $.licenseStatus;
        this.licenseToken = $.licenseToken;
        this.metroCode = $.metroCode;
        this.mgmtAclTemplateUuid = $.mgmtAclTemplateUuid;
        this.name = $.name;
        this.notifications = $.notifications;
        this.orderReference = $.orderReference;
        this.packageCode = $.packageCode;
        this.projectId = $.projectId;
        this.purchaseOrderNumber = $.purchaseOrderNumber;
        this.redundancyType = $.redundancyType;
        this.redundantId = $.redundantId;
        this.region = $.region;
        this.secondaryDevice = $.secondaryDevice;
        this.selfManaged = $.selfManaged;
        this.sshIpAddress = $.sshIpAddress;
        this.sshIpFqdn = $.sshIpFqdn;
        this.sshKey = $.sshKey;
        this.status = $.status;
        this.termLength = $.termLength;
        this.throughput = $.throughput;
        this.throughputUnit = $.throughputUnit;
        this.tier = $.tier;
        this.typeCode = $.typeCode;
        this.uuid = $.uuid;
        this.vendorConfiguration = $.vendorConfiguration;
        this.version = $.version;
        this.wanInterfaceId = $.wanInterfaceId;
        this.zoneCode = $.zoneCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceState $;

        public Builder() {
            $ = new DeviceState();
        }

        public Builder(DeviceState defaults) {
            $ = new DeviceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountNumber Billing account number for a device.
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(@Nullable Output<String> accountNumber) {
            $.accountNumber = accountNumber;
            return this;
        }

        /**
         * @param accountNumber Billing account number for a device.
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(String accountNumber) {
            return accountNumber(Output.of(accountNumber));
        }

        /**
         * @param aclTemplateId Identifier of a WAN interface ACL template that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder aclTemplateId(@Nullable Output<String> aclTemplateId) {
            $.aclTemplateId = aclTemplateId;
            return this;
        }

        /**
         * @param aclTemplateId Identifier of a WAN interface ACL template that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder aclTemplateId(String aclTemplateId) {
            return aclTemplateId(Output.of(aclTemplateId));
        }

        /**
         * @param additionalBandwidth Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
         * 
         * @return builder
         * 
         */
        public Builder additionalBandwidth(@Nullable Output<Integer> additionalBandwidth) {
            $.additionalBandwidth = additionalBandwidth;
            return this;
        }

        /**
         * @param additionalBandwidth Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
         * 
         * @return builder
         * 
         */
        public Builder additionalBandwidth(Integer additionalBandwidth) {
            return additionalBandwidth(Output.of(additionalBandwidth));
        }

        /**
         * @param asn (Autonomous System Number) Unique identifier for a network on the internet.
         * 
         * @return builder
         * 
         */
        public Builder asn(@Nullable Output<Integer> asn) {
            $.asn = asn;
            return this;
        }

        /**
         * @param asn (Autonomous System Number) Unique identifier for a network on the internet.
         * 
         * @return builder
         * 
         */
        public Builder asn(Integer asn) {
            return asn(Output.of(asn));
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
         * 
         * @return builder
         * 
         */
        public Builder byol(@Nullable Output<Boolean> byol) {
            $.byol = byol;
            return this;
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
         * 
         * @return builder
         * 
         */
        public Builder byol(Boolean byol) {
            return byol(Output.of(byol));
        }

        /**
         * @param cloudInitFileId Identifier of a cloud init file that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder cloudInitFileId(@Nullable Output<String> cloudInitFileId) {
            $.cloudInitFileId = cloudInitFileId;
            return this;
        }

        /**
         * @param cloudInitFileId Identifier of a cloud init file that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder cloudInitFileId(String cloudInitFileId) {
            return cloudInitFileId(Output.of(cloudInitFileId));
        }

        /**
         * @param clusterDetails An object that has the cluster details. See Cluster Details below for more details.
         * 
         * @return builder
         * 
         */
        public Builder clusterDetails(@Nullable Output<DeviceClusterDetailsArgs> clusterDetails) {
            $.clusterDetails = clusterDetails;
            return this;
        }

        /**
         * @param clusterDetails An object that has the cluster details. See Cluster Details below for more details.
         * 
         * @return builder
         * 
         */
        public Builder clusterDetails(DeviceClusterDetailsArgs clusterDetails) {
            return clusterDetails(Output.of(clusterDetails));
        }

        /**
         * @param connectivity Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
         * 
         * @return builder
         * 
         */
        public Builder connectivity(@Nullable Output<String> connectivity) {
            $.connectivity = connectivity;
            return this;
        }

        /**
         * @param connectivity Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
         * 
         * @return builder
         * 
         */
        public Builder connectivity(String connectivity) {
            return connectivity(Output.of(connectivity));
        }

        /**
         * @param coreCount Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
         * 
         * @return builder
         * 
         */
        public Builder coreCount(@Nullable Output<Integer> coreCount) {
            $.coreCount = coreCount;
            return this;
        }

        /**
         * @param coreCount Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
         * 
         * @return builder
         * 
         */
        public Builder coreCount(Integer coreCount) {
            return coreCount(Output.of(coreCount));
        }

        /**
         * @param diverseDeviceId Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
         * 
         * @return builder
         * 
         */
        public Builder diverseDeviceId(@Nullable Output<String> diverseDeviceId) {
            $.diverseDeviceId = diverseDeviceId;
            return this;
        }

        /**
         * @param diverseDeviceId Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
         * 
         * @return builder
         * 
         */
        public Builder diverseDeviceId(String diverseDeviceId) {
            return diverseDeviceId(Output.of(diverseDeviceId));
        }

        /**
         * @param diverseDeviceName Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
         * 
         * @return builder
         * 
         */
        public Builder diverseDeviceName(@Nullable Output<String> diverseDeviceName) {
            $.diverseDeviceName = diverseDeviceName;
            return this;
        }

        /**
         * @param diverseDeviceName Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
         * 
         * @return builder
         * 
         */
        public Builder diverseDeviceName(String diverseDeviceName) {
            return diverseDeviceName(Output.of(diverseDeviceName));
        }

        /**
         * @param generateDefaultPassword Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
         * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
         * 
         * @return builder
         * 
         */
        public Builder generateDefaultPassword(@Nullable Output<Boolean> generateDefaultPassword) {
            $.generateDefaultPassword = generateDefaultPassword;
            return this;
        }

        /**
         * @param generateDefaultPassword Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
         * This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
         * 
         * @return builder
         * 
         */
        public Builder generateDefaultPassword(Boolean generateDefaultPassword) {
            return generateDefaultPassword(Output.of(generateDefaultPassword));
        }

        /**
         * @param hostname Device hostname prefix.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Device hostname prefix.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ibx Device location Equinix Business Exchange name.
         * 
         * @return builder
         * 
         */
        public Builder ibx(@Nullable Output<String> ibx) {
            $.ibx = ibx;
            return this;
        }

        /**
         * @param ibx Device location Equinix Business Exchange name.
         * 
         * @return builder
         * 
         */
        public Builder ibx(String ibx) {
            return ibx(Output.of(ibx));
        }

        /**
         * @param interfaceCount Number of network interfaces on a device. If not specified, default number for a given device type will be used.
         * 
         * @return builder
         * 
         */
        public Builder interfaceCount(@Nullable Output<Integer> interfaceCount) {
            $.interfaceCount = interfaceCount;
            return this;
        }

        /**
         * @param interfaceCount Number of network interfaces on a device. If not specified, default number for a given device type will be used.
         * 
         * @return builder
         * 
         */
        public Builder interfaceCount(Integer interfaceCount) {
            return interfaceCount(Output.of(interfaceCount));
        }

        /**
         * @param interfaces List of device interfaces. See Interface Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(@Nullable Output<List<DeviceInterfaceArgs>> interfaces) {
            $.interfaces = interfaces;
            return this;
        }

        /**
         * @param interfaces List of device interfaces. See Interface Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(List<DeviceInterfaceArgs> interfaces) {
            return interfaces(Output.of(interfaces));
        }

        /**
         * @param interfaces List of device interfaces. See Interface Attribute below for more details.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(DeviceInterfaceArgs... interfaces) {
            return interfaces(List.of(interfaces));
        }

        /**
         * @param licenseFile Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
         * 
         * @return builder
         * 
         */
        public Builder licenseFile(@Nullable Output<String> licenseFile) {
            $.licenseFile = licenseFile;
            return this;
        }

        /**
         * @param licenseFile Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
         * 
         * @return builder
         * 
         */
        public Builder licenseFile(String licenseFile) {
            return licenseFile(Output.of(licenseFile));
        }

        /**
         * @param licenseFileId Identifier of a license file that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder licenseFileId(@Nullable Output<String> licenseFileId) {
            $.licenseFileId = licenseFileId;
            return this;
        }

        /**
         * @param licenseFileId Identifier of a license file that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder licenseFileId(String licenseFileId) {
            return licenseFileId(Output.of(licenseFileId));
        }

        /**
         * @param licenseStatus Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder licenseStatus(@Nullable Output<String> licenseStatus) {
            $.licenseStatus = licenseStatus;
            return this;
        }

        /**
         * @param licenseStatus Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder licenseStatus(String licenseStatus) {
            return licenseStatus(Output.of(licenseStatus));
        }

        /**
         * @param licenseToken License Token applicable for some device types in BYOL licensing mode.
         * 
         * @return builder
         * 
         */
        public Builder licenseToken(@Nullable Output<String> licenseToken) {
            $.licenseToken = licenseToken;
            return this;
        }

        /**
         * @param licenseToken License Token applicable for some device types in BYOL licensing mode.
         * 
         * @return builder
         * 
         */
        public Builder licenseToken(String licenseToken) {
            return licenseToken(Output.of(licenseToken));
        }

        /**
         * @param metroCode Device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(@Nullable Output<String> metroCode) {
            $.metroCode = metroCode;
            return this;
        }

        /**
         * @param metroCode Device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(String metroCode) {
            return metroCode(Output.of(metroCode));
        }

        /**
         * @param mgmtAclTemplateUuid Identifier of an MGMT interface ACL template that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder mgmtAclTemplateUuid(@Nullable Output<String> mgmtAclTemplateUuid) {
            $.mgmtAclTemplateUuid = mgmtAclTemplateUuid;
            return this;
        }

        /**
         * @param mgmtAclTemplateUuid Identifier of an MGMT interface ACL template that will be applied on the device.
         * 
         * @return builder
         * 
         */
        public Builder mgmtAclTemplateUuid(String mgmtAclTemplateUuid) {
            return mgmtAclTemplateUuid(Output.of(mgmtAclTemplateUuid));
        }

        /**
         * @param name Device name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Device name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications List of email addresses that will receive device status notifications.
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<List<String>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications List of email addresses that will receive device status notifications.
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<String> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications List of email addresses that will receive device status notifications.
         * 
         * @return builder
         * 
         */
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param orderReference Name/number used to identify device order on the invoice.
         * 
         * @return builder
         * 
         */
        public Builder orderReference(@Nullable Output<String> orderReference) {
            $.orderReference = orderReference;
            return this;
        }

        /**
         * @param orderReference Name/number used to identify device order on the invoice.
         * 
         * @return builder
         * 
         */
        public Builder orderReference(String orderReference) {
            return orderReference(Output.of(orderReference));
        }

        /**
         * @param packageCode Device software package code.
         * 
         * @return builder
         * 
         */
        public Builder packageCode(@Nullable Output<String> packageCode) {
            $.packageCode = packageCode;
            return this;
        }

        /**
         * @param packageCode Device software package code.
         * 
         * @return builder
         * 
         */
        public Builder packageCode(String packageCode) {
            return packageCode(Output.of(packageCode));
        }

        /**
         * @param projectId Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param purchaseOrderNumber Purchase order number associated with a device order.
         * 
         * @return builder
         * 
         */
        public Builder purchaseOrderNumber(@Nullable Output<String> purchaseOrderNumber) {
            $.purchaseOrderNumber = purchaseOrderNumber;
            return this;
        }

        /**
         * @param purchaseOrderNumber Purchase order number associated with a device order.
         * 
         * @return builder
         * 
         */
        public Builder purchaseOrderNumber(String purchaseOrderNumber) {
            return purchaseOrderNumber(Output.of(purchaseOrderNumber));
        }

        /**
         * @param redundancyType Device redundancy type applicable for HA devices, either primary or secondary.
         * 
         * @return builder
         * 
         */
        public Builder redundancyType(@Nullable Output<String> redundancyType) {
            $.redundancyType = redundancyType;
            return this;
        }

        /**
         * @param redundancyType Device redundancy type applicable for HA devices, either primary or secondary.
         * 
         * @return builder
         * 
         */
        public Builder redundancyType(String redundancyType) {
            return redundancyType(Output.of(redundancyType));
        }

        /**
         * @param redundantId Unique identifier for a redundant device applicable for HA devices.
         * 
         * @return builder
         * 
         */
        public Builder redundantId(@Nullable Output<String> redundantId) {
            $.redundantId = redundantId;
            return this;
        }

        /**
         * @param redundantId Unique identifier for a redundant device applicable for HA devices.
         * 
         * @return builder
         * 
         */
        public Builder redundantId(String redundantId) {
            return redundantId(Output.of(redundantId));
        }

        /**
         * @param region Device location region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Device location region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secondaryDevice Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDevice(@Nullable Output<DeviceSecondaryDeviceArgs> secondaryDevice) {
            $.secondaryDevice = secondaryDevice;
            return this;
        }

        /**
         * @param secondaryDevice Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
         * 
         * @return builder
         * 
         */
        public Builder secondaryDevice(DeviceSecondaryDeviceArgs secondaryDevice) {
            return secondaryDevice(Output.of(secondaryDevice));
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(@Nullable Output<Boolean> selfManaged) {
            $.selfManaged = selfManaged;
            return this;
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(Boolean selfManaged) {
            return selfManaged(Output.of(selfManaged));
        }

        /**
         * @param sshIpAddress IP address of SSH enabled interface on the device.
         * 
         * @return builder
         * 
         */
        public Builder sshIpAddress(@Nullable Output<String> sshIpAddress) {
            $.sshIpAddress = sshIpAddress;
            return this;
        }

        /**
         * @param sshIpAddress IP address of SSH enabled interface on the device.
         * 
         * @return builder
         * 
         */
        public Builder sshIpAddress(String sshIpAddress) {
            return sshIpAddress(Output.of(sshIpAddress));
        }

        /**
         * @param sshIpFqdn FQDN of SSH enabled interface on the device.
         * 
         * @return builder
         * 
         */
        public Builder sshIpFqdn(@Nullable Output<String> sshIpFqdn) {
            $.sshIpFqdn = sshIpFqdn;
            return this;
        }

        /**
         * @param sshIpFqdn FQDN of SSH enabled interface on the device.
         * 
         * @return builder
         * 
         */
        public Builder sshIpFqdn(String sshIpFqdn) {
            return sshIpFqdn(Output.of(sshIpFqdn));
        }

        /**
         * @param sshKey Definition of SSH key that will be provisioned on a device
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<DeviceSshKeyArgs> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey Definition of SSH key that will be provisioned on a device
         * 
         * @return builder
         * 
         */
        public Builder sshKey(DeviceSshKeyArgs sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param status interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param termLength Device term length.
         * 
         * @return builder
         * 
         */
        public Builder termLength(@Nullable Output<Integer> termLength) {
            $.termLength = termLength;
            return this;
        }

        /**
         * @param termLength Device term length.
         * 
         * @return builder
         * 
         */
        public Builder termLength(Integer termLength) {
            return termLength(Output.of(termLength));
        }

        /**
         * @param throughput Device license throughput.
         * 
         * @return builder
         * 
         */
        public Builder throughput(@Nullable Output<Integer> throughput) {
            $.throughput = throughput;
            return this;
        }

        /**
         * @param throughput Device license throughput.
         * 
         * @return builder
         * 
         */
        public Builder throughput(Integer throughput) {
            return throughput(Output.of(throughput));
        }

        /**
         * @param throughputUnit License throughput unit. One of `Mbps` or `Gbps`.
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(@Nullable Output<Either<String,ThroughputUnit>> throughputUnit) {
            $.throughputUnit = throughputUnit;
            return this;
        }

        /**
         * @param throughputUnit License throughput unit. One of `Mbps` or `Gbps`.
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(Either<String,ThroughputUnit> throughputUnit) {
            return throughputUnit(Output.of(throughputUnit));
        }

        /**
         * @param throughputUnit License throughput unit. One of `Mbps` or `Gbps`.
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(String throughputUnit) {
            return throughputUnit(Either.ofLeft(throughputUnit));
        }

        /**
         * @param throughputUnit License throughput unit. One of `Mbps` or `Gbps`.
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(ThroughputUnit throughputUnit) {
            return throughputUnit(Either.ofRight(throughputUnit));
        }

        /**
         * @param tier Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<Integer> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to &#39;2&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tier(Integer tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param typeCode Device type code.
         * 
         * @return builder
         * 
         */
        public Builder typeCode(@Nullable Output<String> typeCode) {
            $.typeCode = typeCode;
            return this;
        }

        /**
         * @param typeCode Device type code.
         * 
         * @return builder
         * 
         */
        public Builder typeCode(String typeCode) {
            return typeCode(Output.of(typeCode));
        }

        /**
         * @param uuid Device unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Device unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param vendorConfiguration Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
         * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
         * 
         * @return builder
         * 
         */
        public Builder vendorConfiguration(@Nullable Output<Map<String,String>> vendorConfiguration) {
            $.vendorConfiguration = vendorConfiguration;
            return this;
        }

        /**
         * @param vendorConfiguration Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
         * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
         * 
         * @return builder
         * 
         */
        public Builder vendorConfiguration(Map<String,String> vendorConfiguration) {
            return vendorConfiguration(Output.of(vendorConfiguration));
        }

        /**
         * @param version Device software software version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Device software software version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param wanInterfaceId device interface id picked for WAN
         * 
         * @return builder
         * 
         */
        public Builder wanInterfaceId(@Nullable Output<String> wanInterfaceId) {
            $.wanInterfaceId = wanInterfaceId;
            return this;
        }

        /**
         * @param wanInterfaceId device interface id picked for WAN
         * 
         * @return builder
         * 
         */
        public Builder wanInterfaceId(String wanInterfaceId) {
            return wanInterfaceId(Output.of(wanInterfaceId));
        }

        /**
         * @param zoneCode Device location zone code.
         * 
         * @return builder
         * 
         */
        public Builder zoneCode(@Nullable Output<String> zoneCode) {
            $.zoneCode = zoneCode;
            return this;
        }

        /**
         * @param zoneCode Device location zone code.
         * 
         * @return builder
         * 
         */
        public Builder zoneCode(String zoneCode) {
            return zoneCode(Output.of(zoneCode));
        }

        public DeviceState build() {
            return $;
        }
    }

}
