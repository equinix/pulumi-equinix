// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPrecisionTimeServicePtpAdvancedConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPrecisionTimeServicePtpAdvancedConfigurationArgs Empty = new GetPrecisionTimeServicePtpAdvancedConfigurationArgs();

    /**
     * The PTP domain value
     * 
     */
    @Import(name="domain")
    private @Nullable Output<Integer> domain;

    /**
     * @return The PTP domain value
     * 
     */
    public Optional<Output<Integer>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
     * 
     */
    @Import(name="grantTime")
    private @Nullable Output<Integer> grantTime;

    /**
     * @return Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
     * 
     */
    public Optional<Output<Integer>> grantTime() {
        return Optional.ofNullable(this.grantTime);
    }

    /**
     * Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
     * 
     */
    @Import(name="logAnnounceInterval")
    private @Nullable Output<Integer> logAnnounceInterval;

    /**
     * @return Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
     * 
     */
    public Optional<Output<Integer>> logAnnounceInterval() {
        return Optional.ofNullable(this.logAnnounceInterval);
    }

    /**
     * Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
     * 
     */
    @Import(name="logDelayReqInterval")
    private @Nullable Output<Integer> logDelayReqInterval;

    /**
     * @return Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
     * 
     */
    public Optional<Output<Integer>> logDelayReqInterval() {
        return Optional.ofNullable(this.logDelayReqInterval);
    }

    /**
     * Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
     * 
     */
    @Import(name="logSyncInterval")
    private @Nullable Output<Integer> logSyncInterval;

    /**
     * @return Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
     * 
     */
    public Optional<Output<Integer>> logSyncInterval() {
        return Optional.ofNullable(this.logSyncInterval);
    }

    /**
     * The priority1 value determines the best primary clock, Lower value indicates higher priority
     * 
     */
    @Import(name="priority1")
    private @Nullable Output<Integer> priority1;

    /**
     * @return The priority1 value determines the best primary clock, Lower value indicates higher priority
     * 
     */
    public Optional<Output<Integer>> priority1() {
        return Optional.ofNullable(this.priority1);
    }

    /**
     * The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
     * 
     */
    @Import(name="priority2")
    private @Nullable Output<Integer> priority2;

    /**
     * @return The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
     * 
     */
    public Optional<Output<Integer>> priority2() {
        return Optional.ofNullable(this.priority2);
    }

    /**
     * Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
     * 
     */
    @Import(name="timeScale")
    private @Nullable Output<String> timeScale;

    /**
     * @return Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
     * 
     */
    public Optional<Output<String>> timeScale() {
        return Optional.ofNullable(this.timeScale);
    }

    /**
     * ptp transport mode
     * 
     */
    @Import(name="transportMode")
    private @Nullable Output<String> transportMode;

    /**
     * @return ptp transport mode
     * 
     */
    public Optional<Output<String>> transportMode() {
        return Optional.ofNullable(this.transportMode);
    }

    private GetPrecisionTimeServicePtpAdvancedConfigurationArgs() {}

    private GetPrecisionTimeServicePtpAdvancedConfigurationArgs(GetPrecisionTimeServicePtpAdvancedConfigurationArgs $) {
        this.domain = $.domain;
        this.grantTime = $.grantTime;
        this.logAnnounceInterval = $.logAnnounceInterval;
        this.logDelayReqInterval = $.logDelayReqInterval;
        this.logSyncInterval = $.logSyncInterval;
        this.priority1 = $.priority1;
        this.priority2 = $.priority2;
        this.timeScale = $.timeScale;
        this.transportMode = $.transportMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrecisionTimeServicePtpAdvancedConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrecisionTimeServicePtpAdvancedConfigurationArgs $;

        public Builder() {
            $ = new GetPrecisionTimeServicePtpAdvancedConfigurationArgs();
        }

        public Builder(GetPrecisionTimeServicePtpAdvancedConfigurationArgs defaults) {
            $ = new GetPrecisionTimeServicePtpAdvancedConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The PTP domain value
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<Integer> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The PTP domain value
         * 
         * @return builder
         * 
         */
        public Builder domain(Integer domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param grantTime Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
         * 
         * @return builder
         * 
         */
        public Builder grantTime(@Nullable Output<Integer> grantTime) {
            $.grantTime = grantTime;
            return this;
        }

        /**
         * @param grantTime Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
         * 
         * @return builder
         * 
         */
        public Builder grantTime(Integer grantTime) {
            return grantTime(Output.of(grantTime));
        }

        /**
         * @param logAnnounceInterval Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
         * 
         * @return builder
         * 
         */
        public Builder logAnnounceInterval(@Nullable Output<Integer> logAnnounceInterval) {
            $.logAnnounceInterval = logAnnounceInterval;
            return this;
        }

        /**
         * @param logAnnounceInterval Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
         * 
         * @return builder
         * 
         */
        public Builder logAnnounceInterval(Integer logAnnounceInterval) {
            return logAnnounceInterval(Output.of(logAnnounceInterval));
        }

        /**
         * @param logDelayReqInterval Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
         * 
         * @return builder
         * 
         */
        public Builder logDelayReqInterval(@Nullable Output<Integer> logDelayReqInterval) {
            $.logDelayReqInterval = logDelayReqInterval;
            return this;
        }

        /**
         * @param logDelayReqInterval Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
         * 
         * @return builder
         * 
         */
        public Builder logDelayReqInterval(Integer logDelayReqInterval) {
            return logDelayReqInterval(Output.of(logDelayReqInterval));
        }

        /**
         * @param logSyncInterval Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
         * 
         * @return builder
         * 
         */
        public Builder logSyncInterval(@Nullable Output<Integer> logSyncInterval) {
            $.logSyncInterval = logSyncInterval;
            return this;
        }

        /**
         * @param logSyncInterval Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
         * 
         * @return builder
         * 
         */
        public Builder logSyncInterval(Integer logSyncInterval) {
            return logSyncInterval(Output.of(logSyncInterval));
        }

        /**
         * @param priority1 The priority1 value determines the best primary clock, Lower value indicates higher priority
         * 
         * @return builder
         * 
         */
        public Builder priority1(@Nullable Output<Integer> priority1) {
            $.priority1 = priority1;
            return this;
        }

        /**
         * @param priority1 The priority1 value determines the best primary clock, Lower value indicates higher priority
         * 
         * @return builder
         * 
         */
        public Builder priority1(Integer priority1) {
            return priority1(Output.of(priority1));
        }

        /**
         * @param priority2 The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
         * 
         * @return builder
         * 
         */
        public Builder priority2(@Nullable Output<Integer> priority2) {
            $.priority2 = priority2;
            return this;
        }

        /**
         * @param priority2 The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
         * 
         * @return builder
         * 
         */
        public Builder priority2(Integer priority2) {
            return priority2(Output.of(priority2));
        }

        /**
         * @param timeScale Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
         * 
         * @return builder
         * 
         */
        public Builder timeScale(@Nullable Output<String> timeScale) {
            $.timeScale = timeScale;
            return this;
        }

        /**
         * @param timeScale Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
         * 
         * @return builder
         * 
         */
        public Builder timeScale(String timeScale) {
            return timeScale(Output.of(timeScale));
        }

        /**
         * @param transportMode ptp transport mode
         * 
         * @return builder
         * 
         */
        public Builder transportMode(@Nullable Output<String> transportMode) {
            $.transportMode = transportMode;
            return this;
        }

        /**
         * @param transportMode ptp transport mode
         * 
         * @return builder
         * 
         */
        public Builder transportMode(String transportMode) {
            return transportMode(Output.of(transportMode));
        }

        public GetPrecisionTimeServicePtpAdvancedConfigurationArgs build() {
            return $;
        }
    }

}
