// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRouteFilterRulesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRouteFilterRulesPlainArgs Empty = new GetRouteFilterRulesPlainArgs();

    /**
     * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     * 
     */
    @Import(name="limit")
    private @Nullable Integer limit;

    /**
     * @return Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The page offset for the pagination request. Index of the first element. Default is 0.
     * 
     */
    @Import(name="offset")
    private @Nullable Integer offset;

    /**
     * @return The page offset for the pagination request. Index of the first element. Default is 0.
     * 
     */
    public Optional<Integer> offset() {
        return Optional.ofNullable(this.offset);
    }

    /**
     * UUID of the Route Filter Policy the rule is attached to
     * 
     */
    @Import(name="routeFilterId", required=true)
    private String routeFilterId;

    /**
     * @return UUID of the Route Filter Policy the rule is attached to
     * 
     */
    public String routeFilterId() {
        return this.routeFilterId;
    }

    private GetRouteFilterRulesPlainArgs() {}

    private GetRouteFilterRulesPlainArgs(GetRouteFilterRulesPlainArgs $) {
        this.limit = $.limit;
        this.offset = $.offset;
        this.routeFilterId = $.routeFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteFilterRulesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteFilterRulesPlainArgs $;

        public Builder() {
            $ = new GetRouteFilterRulesPlainArgs();
        }

        public Builder(GetRouteFilterRulesPlainArgs defaults) {
            $ = new GetRouteFilterRulesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Integer limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param offset The page offset for the pagination request. Index of the first element. Default is 0.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Integer offset) {
            $.offset = offset;
            return this;
        }

        /**
         * @param routeFilterId UUID of the Route Filter Policy the rule is attached to
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        public GetRouteFilterRulesPlainArgs build() {
            if ($.routeFilterId == null) {
                throw new MissingRequiredPropertyException("GetRouteFilterRulesPlainArgs", "routeFilterId");
            }
            return $;
        }
    }

}
