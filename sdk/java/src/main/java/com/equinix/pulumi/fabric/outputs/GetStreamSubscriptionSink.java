// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetStreamSubscriptionSinkCredential;
import com.equinix.pulumi.fabric.outputs.GetStreamSubscriptionSinkSettings;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamSubscriptionSink {
    /**
     * @return Boolean switch enabling batch delivery of data
     * 
     */
    private Boolean batchEnabled;
    /**
     * @return Maximum size of the batch delivery if enabled
     * 
     */
    private Integer batchSizeMax;
    /**
     * @return Maximum time to wait for batch delivery if enabled
     * 
     */
    private Integer batchWaitTimeMax;
    /**
     * @return Access details for the specified sink type
     * 
     */
    private GetStreamSubscriptionSinkCredential credential;
    /**
     * @return Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    private String host;
    /**
     * @return Stream subscription sink settings
     * 
     */
    private GetStreamSubscriptionSinkSettings settings;
    /**
     * @return Type of the subscriber
     * 
     */
    private String type;
    /**
     * @return Publicly reachable http endpoint destination for data stream
     * 
     */
    private String uri;

    private GetStreamSubscriptionSink() {}
    /**
     * @return Boolean switch enabling batch delivery of data
     * 
     */
    public Boolean batchEnabled() {
        return this.batchEnabled;
    }
    /**
     * @return Maximum size of the batch delivery if enabled
     * 
     */
    public Integer batchSizeMax() {
        return this.batchSizeMax;
    }
    /**
     * @return Maximum time to wait for batch delivery if enabled
     * 
     */
    public Integer batchWaitTimeMax() {
        return this.batchWaitTimeMax;
    }
    /**
     * @return Access details for the specified sink type
     * 
     */
    public GetStreamSubscriptionSinkCredential credential() {
        return this.credential;
    }
    /**
     * @return Known hostname of certain data stream subscription products. Not to be confused with a variable URI
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Stream subscription sink settings
     * 
     */
    public GetStreamSubscriptionSinkSettings settings() {
        return this.settings;
    }
    /**
     * @return Type of the subscriber
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Publicly reachable http endpoint destination for data stream
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamSubscriptionSink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean batchEnabled;
        private Integer batchSizeMax;
        private Integer batchWaitTimeMax;
        private GetStreamSubscriptionSinkCredential credential;
        private String host;
        private GetStreamSubscriptionSinkSettings settings;
        private String type;
        private String uri;
        public Builder() {}
        public Builder(GetStreamSubscriptionSink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchEnabled = defaults.batchEnabled;
    	      this.batchSizeMax = defaults.batchSizeMax;
    	      this.batchWaitTimeMax = defaults.batchWaitTimeMax;
    	      this.credential = defaults.credential;
    	      this.host = defaults.host;
    	      this.settings = defaults.settings;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder batchEnabled(Boolean batchEnabled) {
            if (batchEnabled == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "batchEnabled");
            }
            this.batchEnabled = batchEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder batchSizeMax(Integer batchSizeMax) {
            if (batchSizeMax == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "batchSizeMax");
            }
            this.batchSizeMax = batchSizeMax;
            return this;
        }
        @CustomType.Setter
        public Builder batchWaitTimeMax(Integer batchWaitTimeMax) {
            if (batchWaitTimeMax == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "batchWaitTimeMax");
            }
            this.batchWaitTimeMax = batchWaitTimeMax;
            return this;
        }
        @CustomType.Setter
        public Builder credential(GetStreamSubscriptionSinkCredential credential) {
            if (credential == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "credential");
            }
            this.credential = credential;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder settings(GetStreamSubscriptionSinkSettings settings) {
            if (settings == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "settings");
            }
            this.settings = settings;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetStreamSubscriptionSink", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetStreamSubscriptionSink build() {
            final var _resultValue = new GetStreamSubscriptionSink();
            _resultValue.batchEnabled = batchEnabled;
            _resultValue.batchSizeMax = batchSizeMax;
            _resultValue.batchWaitTimeMax = batchWaitTimeMax;
            _resultValue.credential = credential;
            _resultValue.host = host;
            _resultValue.settings = settings;
            _resultValue.type = type;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
