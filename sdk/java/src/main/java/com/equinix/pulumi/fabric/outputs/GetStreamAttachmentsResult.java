// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentsData;
import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentsFilter;
import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentsPagination;
import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentsSort;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetStreamAttachmentsResult {
    /**
     * @return Returned list of stream objects
     * 
     */
    private List<GetStreamAttachmentsData> datas;
    /**
     * @return List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
     * 
     */
    private List<GetStreamAttachmentsFilter> filters;
    /**
     * @return The unique identifier of the resource
     * 
     */
    private String id;
    /**
     * @return Pagination details for the returned streams list
     * 
     */
    private GetStreamAttachmentsPagination pagination;
    /**
     * @return The list of sort criteria for the stream assets search request
     * 
     */
    private @Nullable List<GetStreamAttachmentsSort> sorts;

    private GetStreamAttachmentsResult() {}
    /**
     * @return Returned list of stream objects
     * 
     */
    public List<GetStreamAttachmentsData> datas() {
        return this.datas;
    }
    /**
     * @return List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND&#39;d together with 1 of the 8 being a possible OR group of 3
     * 
     */
    public List<GetStreamAttachmentsFilter> filters() {
        return this.filters;
    }
    /**
     * @return The unique identifier of the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Pagination details for the returned streams list
     * 
     */
    public GetStreamAttachmentsPagination pagination() {
        return this.pagination;
    }
    /**
     * @return The list of sort criteria for the stream assets search request
     * 
     */
    public List<GetStreamAttachmentsSort> sorts() {
        return this.sorts == null ? List.of() : this.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamAttachmentsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetStreamAttachmentsData> datas;
        private List<GetStreamAttachmentsFilter> filters;
        private String id;
        private GetStreamAttachmentsPagination pagination;
        private @Nullable List<GetStreamAttachmentsSort> sorts;
        public Builder() {}
        public Builder(GetStreamAttachmentsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datas = defaults.datas;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.pagination = defaults.pagination;
    	      this.sorts = defaults.sorts;
        }

        @CustomType.Setter
        public Builder datas(List<GetStreamAttachmentsData> datas) {
            if (datas == null) {
              throw new MissingRequiredPropertyException("GetStreamAttachmentsResult", "datas");
            }
            this.datas = datas;
            return this;
        }
        public Builder datas(GetStreamAttachmentsData... datas) {
            return datas(List.of(datas));
        }
        @CustomType.Setter
        public Builder filters(List<GetStreamAttachmentsFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetStreamAttachmentsResult", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetStreamAttachmentsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamAttachmentsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder pagination(GetStreamAttachmentsPagination pagination) {
            if (pagination == null) {
              throw new MissingRequiredPropertyException("GetStreamAttachmentsResult", "pagination");
            }
            this.pagination = pagination;
            return this;
        }
        @CustomType.Setter
        public Builder sorts(@Nullable List<GetStreamAttachmentsSort> sorts) {

            this.sorts = sorts;
            return this;
        }
        public Builder sorts(GetStreamAttachmentsSort... sorts) {
            return sorts(List.of(sorts));
        }
        public GetStreamAttachmentsResult build() {
            final var _resultValue = new GetStreamAttachmentsResult();
            _resultValue.datas = datas;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.pagination = pagination;
            _resultValue.sorts = sorts;
            return _resultValue;
        }
    }
}
