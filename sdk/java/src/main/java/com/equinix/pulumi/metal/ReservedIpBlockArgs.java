// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.equinix.pulumi.metal.enums.Facility;
import com.equinix.pulumi.metal.enums.IpBlockType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpBlockArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpBlockArgs Empty = new ReservedIpBlockArgs();

    /**
     * Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<Integer> cidr;

    /**
     * @return Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.
     * 
     */
    public Optional<Output<Integer>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    @Import(name="customData")
    private @Nullable Output<String> customData;

    public Optional<Output<String>> customData() {
        return Optional.ofNullable(this.customData);
    }

    /**
     * Arbitrary description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Arbitrary description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
     * 
     */
    @Import(name="facility")
    private @Nullable Output<Either<String,Facility>> facility;

    /**
     * @return Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
     * 
     */
    public Optional<Output<Either<String,Facility>>> facility() {
        return Optional.ofNullable(this.facility);
    }

    /**
     * Metro where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.
     * 
     */
    @Import(name="metro")
    private @Nullable Output<String> metro;

    /**
     * @return Metro where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.
     * 
     */
    public Optional<Output<String>> metro() {
        return Optional.ofNullable(this.metro);
    }

    /**
     * Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * The metal project ID where to allocate the address block.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The metal project ID where to allocate the address block.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.
     * 
     */
    @Import(name="quantity")
    private @Nullable Output<Integer> quantity;

    /**
     * @return The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.
     * 
     */
    public Optional<Output<Integer>> quantity() {
        return Optional.ofNullable(this.quantity);
    }

    /**
     * String list of tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return String list of tags.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,IpBlockType>> type;

    /**
     * @return One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
     * 
     */
    public Optional<Output<Either<String,IpBlockType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.
     * 
     */
    @Import(name="vrfId")
    private @Nullable Output<String> vrfId;

    /**
     * @return Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.
     * 
     */
    public Optional<Output<String>> vrfId() {
        return Optional.ofNullable(this.vrfId);
    }

    /**
     * Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.
     * 
     */
    @Import(name="waitForState")
    private @Nullable Output<String> waitForState;

    /**
     * @return Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.
     * 
     */
    public Optional<Output<String>> waitForState() {
        return Optional.ofNullable(this.waitForState);
    }

    private ReservedIpBlockArgs() {}

    private ReservedIpBlockArgs(ReservedIpBlockArgs $) {
        this.cidr = $.cidr;
        this.customData = $.customData;
        this.description = $.description;
        this.facility = $.facility;
        this.metro = $.metro;
        this.network = $.network;
        this.projectId = $.projectId;
        this.quantity = $.quantity;
        this.tags = $.tags;
        this.type = $.type;
        this.vrfId = $.vrfId;
        this.waitForState = $.waitForState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpBlockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpBlockArgs $;

        public Builder() {
            $ = new ReservedIpBlockArgs();
        }

        public Builder(ReservedIpBlockArgs defaults) {
            $ = new ReservedIpBlockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<Integer> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.
         * 
         * @return builder
         * 
         */
        public Builder cidr(Integer cidr) {
            return cidr(Output.of(cidr));
        }

        public Builder customData(@Nullable Output<String> customData) {
            $.customData = customData;
            return this;
        }

        public Builder customData(String customData) {
            return customData(Output.of(customData));
        }

        /**
         * @param description Arbitrary description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Arbitrary description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
         * 
         * @return builder
         * 
         */
        public Builder facility(@Nullable Output<Either<String,Facility>> facility) {
            $.facility = facility;
            return this;
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
         * 
         * @return builder
         * 
         */
        public Builder facility(Either<String,Facility> facility) {
            return facility(Output.of(facility));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
         * 
         * @return builder
         * 
         */
        public Builder facility(String facility) {
            return facility(Either.ofLeft(facility));
        }

        /**
         * @param facility Facility where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide
         * 
         * @return builder
         * 
         */
        public Builder facility(Facility facility) {
            return facility(Either.ofRight(facility));
        }

        /**
         * @param metro Metro where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.
         * 
         * @return builder
         * 
         */
        public Builder metro(@Nullable Output<String> metro) {
            $.metro = metro;
            return this;
        }

        /**
         * @param metro Metro where to allocate the public IP address block, makes sense only if type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.
         * 
         * @return builder
         * 
         */
        public Builder metro(String metro) {
            return metro(Output.of(metro));
        }

        /**
         * @param network Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param projectId The metal project ID where to allocate the address block.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The metal project ID where to allocate the address block.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param quantity The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.
         * 
         * @return builder
         * 
         */
        public Builder quantity(@Nullable Output<Integer> quantity) {
            $.quantity = quantity;
            return this;
        }

        /**
         * @param quantity The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.
         * 
         * @return builder
         * 
         */
        public Builder quantity(Integer quantity) {
            return quantity(Output.of(quantity));
        }

        /**
         * @param tags String list of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags String list of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags String list of tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,IpBlockType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,IpBlockType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder type(IpBlockType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param vrfId Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.
         * 
         * @return builder
         * 
         */
        public Builder vrfId(@Nullable Output<String> vrfId) {
            $.vrfId = vrfId;
            return this;
        }

        /**
         * @param vrfId Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.
         * 
         * @return builder
         * 
         */
        public Builder vrfId(String vrfId) {
            return vrfId(Output.of(vrfId));
        }

        /**
         * @param waitForState Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.
         * 
         * @return builder
         * 
         */
        public Builder waitForState(@Nullable Output<String> waitForState) {
            $.waitForState = waitForState;
            return this;
        }

        /**
         * @param waitForState Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.
         * 
         * @return builder
         * 
         */
        public Builder waitForState(String waitForState) {
            return waitForState(Output.of(waitForState));
        }

        public ReservedIpBlockArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
