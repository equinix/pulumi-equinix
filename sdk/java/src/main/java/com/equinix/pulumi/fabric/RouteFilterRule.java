// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.RouteFilterRuleArgs;
import com.equinix.pulumi.fabric.inputs.RouteFilterRuleState;
import com.equinix.pulumi.fabric.outputs.RouteFilterRuleChange;
import com.equinix.pulumi.fabric.outputs.RouteFilterRuleChangeLog;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Rule
 * 
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
 * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.RouteFilterRule;
 * import com.pulumi.equinix.fabric.RouteFilterRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var rfRule = new RouteFilterRule("rfRule", RouteFilterRuleArgs.builder()
 *             .routeFilterId("<route_filter_policy_id>")
 *             .prefix("192.168.0.0/24")
 *             .prefixMatch("exact")
 *             .description("Route Filter Rule for X Purpose")
 *             .build());
 * 
 *         ctx.export("routeFilterRuleId", rfRule.id());
 *         ctx.export("routeFilterId", rfRule.routeFilterId());
 *         ctx.export("routeFilterRulePrefix", rfRule.prefix());
 *         ctx.export("routeFilterRulePrefixMatch", rfRule.prefixMatch());
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="equinix:fabric/routeFilterRule:RouteFilterRule")
public class RouteFilterRule extends com.pulumi.resources.CustomResource {
    /**
     * Action that will be taken on IP Addresses matching the rule
     * 
     */
    @Export(name="action", refs={String.class}, tree="[0]")
    private Output<String> action;

    /**
     * @return Action that will be taken on IP Addresses matching the rule
     * 
     */
    public Output<String> action() {
        return this.action;
    }
    @Export(name="changeLogs", refs={List.class,RouteFilterRuleChangeLog.class}, tree="[0,1]")
    private Output<List<RouteFilterRuleChangeLog>> changeLogs;

    public Output<List<RouteFilterRuleChangeLog>> changeLogs() {
        return this.changeLogs;
    }
    /**
     * An object with the details of the previous change applied on the Route Filter
     * 
     */
    @Export(name="changes", refs={List.class,RouteFilterRuleChange.class}, tree="[0,1]")
    private Output<List<RouteFilterRuleChange>> changes;

    /**
     * @return An object with the details of the previous change applied on the Route Filter
     * 
     */
    public Output<List<RouteFilterRuleChange>> changes() {
        return this.changes;
    }
    /**
     * Optional description to add to the Route Filter you will be creating
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Optional description to add to the Route Filter you will be creating
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Route filter rules URI
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Route filter rules URI
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Name of the Route Filter
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Route Filter
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * IP Address Prefix to Filter on
     * 
     */
    @Export(name="prefix", refs={String.class}, tree="[0]")
    private Output<String> prefix;

    /**
     * @return IP Address Prefix to Filter on
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }
    /**
     * Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    @Export(name="prefixMatch", refs={String.class}, tree="[0]")
    private Output<String> prefixMatch;

    /**
     * @return Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    public Output<String> prefixMatch() {
        return this.prefixMatch;
    }
    /**
     * UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    @Export(name="routeFilterId", refs={String.class}, tree="[0]")
    private Output<String> routeFilterId;

    /**
     * @return UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    public Output<String> routeFilterId() {
        return this.routeFilterId;
    }
    /**
     * State of the Route Filter Rule in its lifecycle
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return State of the Route Filter Rule in its lifecycle
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix Assigned ID for Route Filter Rule
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix Assigned ID for Route Filter Rule
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RouteFilterRule(java.lang.String name) {
        this(name, RouteFilterRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RouteFilterRule(java.lang.String name, RouteFilterRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RouteFilterRule(java.lang.String name, RouteFilterRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/routeFilterRule:RouteFilterRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RouteFilterRule(java.lang.String name, Output<java.lang.String> id, @Nullable RouteFilterRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/routeFilterRule:RouteFilterRule", name, state, makeResourceOptions(options, id), false);
    }

    private static RouteFilterRuleArgs makeArgs(RouteFilterRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RouteFilterRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RouteFilterRule get(java.lang.String name, Output<java.lang.String> id, @Nullable RouteFilterRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RouteFilterRule(name, id, state, options);
    }
}
