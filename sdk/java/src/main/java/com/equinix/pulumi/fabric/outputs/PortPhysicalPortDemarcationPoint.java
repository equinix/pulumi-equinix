// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PortPhysicalPortDemarcationPoint {
    /**
     * @return Port cabinet unique space id
     * 
     */
    private String cabinetUniqueSpaceId;
    /**
     * @return Port cage unique space id
     * 
     */
    private String cageUniqueSpaceId;
    /**
     * @return Port connector type
     * 
     */
    private String connectorType;
    /**
     * @return IBX Metro code for the physical port
     * 
     */
    private String ibx;
    /**
     * @return Port patch panel
     * 
     */
    private String patchPanel;

    private PortPhysicalPortDemarcationPoint() {}
    /**
     * @return Port cabinet unique space id
     * 
     */
    public String cabinetUniqueSpaceId() {
        return this.cabinetUniqueSpaceId;
    }
    /**
     * @return Port cage unique space id
     * 
     */
    public String cageUniqueSpaceId() {
        return this.cageUniqueSpaceId;
    }
    /**
     * @return Port connector type
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }
    /**
     * @return IBX Metro code for the physical port
     * 
     */
    public String ibx() {
        return this.ibx;
    }
    /**
     * @return Port patch panel
     * 
     */
    public String patchPanel() {
        return this.patchPanel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PortPhysicalPortDemarcationPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cabinetUniqueSpaceId;
        private String cageUniqueSpaceId;
        private String connectorType;
        private String ibx;
        private String patchPanel;
        public Builder() {}
        public Builder(PortPhysicalPortDemarcationPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cabinetUniqueSpaceId = defaults.cabinetUniqueSpaceId;
    	      this.cageUniqueSpaceId = defaults.cageUniqueSpaceId;
    	      this.connectorType = defaults.connectorType;
    	      this.ibx = defaults.ibx;
    	      this.patchPanel = defaults.patchPanel;
        }

        @CustomType.Setter
        public Builder cabinetUniqueSpaceId(String cabinetUniqueSpaceId) {
            if (cabinetUniqueSpaceId == null) {
              throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPoint", "cabinetUniqueSpaceId");
            }
            this.cabinetUniqueSpaceId = cabinetUniqueSpaceId;
            return this;
        }
        @CustomType.Setter
        public Builder cageUniqueSpaceId(String cageUniqueSpaceId) {
            if (cageUniqueSpaceId == null) {
              throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPoint", "cageUniqueSpaceId");
            }
            this.cageUniqueSpaceId = cageUniqueSpaceId;
            return this;
        }
        @CustomType.Setter
        public Builder connectorType(String connectorType) {
            if (connectorType == null) {
              throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPoint", "connectorType");
            }
            this.connectorType = connectorType;
            return this;
        }
        @CustomType.Setter
        public Builder ibx(String ibx) {
            if (ibx == null) {
              throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPoint", "ibx");
            }
            this.ibx = ibx;
            return this;
        }
        @CustomType.Setter
        public Builder patchPanel(String patchPanel) {
            if (patchPanel == null) {
              throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPoint", "patchPanel");
            }
            this.patchPanel = patchPanel;
            return this;
        }
        public PortPhysicalPortDemarcationPoint build() {
            final var _resultValue = new PortPhysicalPortDemarcationPoint();
            _resultValue.cabinetUniqueSpaceId = cabinetUniqueSpaceId;
            _resultValue.cageUniqueSpaceId = cageUniqueSpaceId;
            _resultValue.connectorType = connectorType;
            _resultValue.ibx = ibx;
            _resultValue.patchPanel = patchPanel;
            return _resultValue;
        }
    }
}
