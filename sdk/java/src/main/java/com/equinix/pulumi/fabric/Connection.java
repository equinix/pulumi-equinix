// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.ConnectionArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionState;
import com.equinix.pulumi.fabric.outputs.ConnectionASide;
import com.equinix.pulumi.fabric.outputs.ConnectionAccount;
import com.equinix.pulumi.fabric.outputs.ConnectionChangeLog;
import com.equinix.pulumi.fabric.outputs.ConnectionNotification;
import com.equinix.pulumi.fabric.outputs.ConnectionOperation;
import com.equinix.pulumi.fabric.outputs.ConnectionOrder;
import com.equinix.pulumi.fabric.outputs.ConnectionProject;
import com.equinix.pulumi.fabric.outputs.ConnectionRedundancy;
import com.equinix.pulumi.fabric.outputs.ConnectionZSide;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### example fcr to azure
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointRouterArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var fcr2Azure = new Connection("fcr2Azure", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("IP_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("CLOUD_ROUTER")
 *                     .router(ConnectionASideAccessPointRouterArgs.builder()
 *                         .uuid("<cloud_router_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<Azure_ExpressRouter_Auth_Key>")
 *                     .peeringType("PRIVATE")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<Azure_Service_Profile_UUID>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fcr to metal
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointRouterArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var fcr2Metal = new Connection("fcr2Metal", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("IP_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("CLOUD_ROUTER")
 *                     .router(ConnectionASideAccessPointRouterArgs.builder()
 *                         .uuid("<cloud_router_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("METAL_NETWORK")
 *                     .authenticationKey("<metal_authorization_code>")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fcr to network
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointRouterArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var fcr2Network = new Connection("fcr2Network", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("IPWAN_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("CLOUD_ROUTER")
 *                     .router(ConnectionASideAccessPointRouterArgs.builder()
 *                         .uuid("<cloud_router_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("NETWORK")
 *                     .network(ConnectionZSideAccessPointNetworkArgs.builder()
 *                         .uuid("<network_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example fcr to port
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointRouterArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var fcr2Port = new Connection("fcr2Port", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("IP_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("CLOUD_ROUTER")
 *                     .router(ConnectionASideAccessPointRouterArgs.builder()
 *                         .uuid("<cloud_router_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid("<port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionZSideAccessPointLinkProtocolArgs.builder()
 *                         .type("DOT1Q")
 *                         .vlanTag("2711")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example metal to aws
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var metal2Aws = new Connection("metal2Aws", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPLAN_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("METAL_NETWORK")
 *                     .authenticationKey("<metal_authorization_code>")
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<aws_account_id>")
 *                     .sellerRegion("us-west-1")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<service_profile_uuid>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to aws
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionRedundancyArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var port2Aws = new Connection("port2Aws", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .redundancy(ConnectionRedundancyArgs.builder()
 *                 .priority("PRIMARY")
 *                 .build())
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323929")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()
 *                         .type("QINQ")
 *                         .vlanSTag("2019")
 *                         .vlanCTag("2112")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<aws_account_id>")
 *                     .sellerRegion("us-west-1")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<service_profile_uuid>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .additionalInfo(            
 *                 Map.ofEntries(
 *                     Map.entry("key", "accessKey"),
 *                     Map.entry("value", "<aws_access_key>")
 *                 ),
 *                 Map.ofEntries(
 *                     Map.entry("key", "secretKey"),
 *                     Map.entry("value", "<aws_secret_key>")
 *                 ))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to network eplan
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var eplan = new Connection("eplan", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EPLAN_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("NETWORK")
 *                     .network(ConnectionZSideAccessPointNetworkArgs.builder()
 *                         .uuid("<network_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to network evplan
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var evplan = new Connection("evplan", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPLAN_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()
 *                         .type("DOT1Q")
 *                         .vlanSTag("1976")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("NETWORK")
 *                     .network(ConnectionZSideAccessPointNetworkArgs.builder()
 *                         .uuid("<network_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to port
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var port2Port = new Connection("port2Port", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()
 *                         .type("QINQ")
 *                         .vlanSTag("1976")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid("<zside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionZSideAccessPointLinkProtocolArgs.builder()
 *                         .type("QINQ")
 *                         .vlanSTag("3711")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to port access epl
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var accessEplVc = new Connection("accessEplVc", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("ACCESS_EPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()
 *                         .type("QINQ")
 *                         .vlanSTag("1976")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid("<zside_port_uuid>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to port epl
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var epl = new Connection("epl", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionASideAccessPointPortArgs.builder()
 *                         .uuid("<aside_port_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid("<zside_port_uuid>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example port to vd
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointInterfaceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointPortArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLinkProtocolArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var vd2Port = new Connection("vd2Port", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("NETWORK")
 *                         .id(7)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("COLO")
 *                     .port(ConnectionZSideAccessPointPortArgs.builder()
 *                         .uuid("<zside_port_uuid>")
 *                         .build())
 *                     .linkProtocol(ConnectionZSideAccessPointLinkProtocolArgs.builder()
 *                         .type("DOT1Q")
 *                         .vlanSTag("3711")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example token to aws
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideServiceTokenArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var token2Aws = new Connection("token2Aws", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .serviceToken(ConnectionASideServiceTokenArgs.builder()
 *                     .uuid("<service_token_uuid>")
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<aws_account_id>")
 *                     .sellerRegion("us-west-1")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<service_profile_uuid>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example vd to azure
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointInterfaceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var vd2Azure = new Connection("vd2Azure", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("CLOUD")
 *                         .id(7)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<Azure_ExpressRouter_Auth_Key>")
 *                     .peeringType("PRIVATE")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<Azure_Service_Profile_UUID>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example vd to azure redundant
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionRedundancyArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointInterfaceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var vd2AzurePrimary = new Connection("vd2AzurePrimary", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .redundancy(ConnectionRedundancyArgs.builder()
 *                 .priority("PRIMARY")
 *                 .build())
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("CLOUD")
 *                         .id(7)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<Azure_ExpressRouter_Auth_Key>")
 *                     .peeringType("PRIVATE")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<Azure_Service_Profile_UUID>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var vd2AzureSecondary = new Connection("vd2AzureSecondary", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .redundancy(ConnectionRedundancyArgs.builder()
 *                 .priority("SECONDARY")
 *                 .group(vd2AzurePrimary.redundancy().applyValue(redundancy -> redundancy.group()))
 *                 .build())
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("CLOUD")
 *                         .id(5)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("SP")
 *                     .authenticationKey("<Azure_ExpressRouter_Auth_Key>")
 *                     .peeringType("PRIVATE")
 *                     .profile(ConnectionZSideAccessPointProfileArgs.builder()
 *                         .type("L2_PROFILE")
 *                         .uuid("<Azure_Service_Profile_UUID>")
 *                         .build())
 *                     .location(ConnectionZSideAccessPointLocationArgs.builder()
 *                         .metroCode("SV")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example vd to network
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointInterfaceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideAccessPointNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var vd2Network = new Connection("vd2Network", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPLAN_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("CLOUD")
 *                         .id(7)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .accessPoint(ConnectionZSideAccessPointArgs.builder()
 *                     .type("NETWORK")
 *                     .network(ConnectionZSideAccessPointNetworkArgs.builder()
 *                         .uuid("<network_uuid>")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### example vd to token
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Connection;
 * import com.pulumi.equinix.fabric.ConnectionArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointVirtualDeviceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionASideAccessPointInterfaceArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
 * import com.pulumi.equinix.fabric.inputs.ConnectionZSideServiceTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var vd2Token = new Connection("vd2Token", ConnectionArgs.builder()
 *             .name("ConnectionName")
 *             .type("EVPL_VC")
 *             .notifications(ConnectionNotificationArgs.builder()
 *                 .type("ALL")
 *                 .emails(                
 *                     "example}{@literal @}{@code equinix.com",
 *                     "test1}{@literal @}{@code equinix.com")
 *                 .build())
 *             .bandwidth(50)
 *             .order(ConnectionOrderArgs.builder()
 *                 .purchaseOrderNumber("1-323292")
 *                 .build())
 *             .aSide(ConnectionASideArgs.builder()
 *                 .accessPoint(ConnectionASideAccessPointArgs.builder()
 *                     .type("VD")
 *                     .virtualDevice(ConnectionASideAccessPointVirtualDeviceArgs.builder()
 *                         .type("EDGE")
 *                         .uuid("<device_uuid>")
 *                         .build())
 *                     .interface_(ConnectionASideAccessPointInterfaceArgs.builder()
 *                         .type("NETWORK")
 *                         .id(7)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .zSide(ConnectionZSideArgs.builder()
 *                 .serviceToken(ConnectionZSideServiceTokenArgs.builder()
 *                     .uuid("<service_token_uuid>")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="equinix:fabric/connection:Connection")
public class Connection extends com.pulumi.resources.CustomResource {
    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    @Export(name="aSide", refs={ConnectionASide.class}, tree="[0]")
    private Output<ConnectionASide> aSide;

    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    public Output<ConnectionASide> aSide() {
        return this.aSide;
    }
    /**
     * Customer account information that is associated with this connection
     * 
     */
    @Export(name="account", refs={ConnectionAccount.class}, tree="[0]")
    private Output<ConnectionAccount> account;

    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    public Output<ConnectionAccount> account() {
        return this.account;
    }
    /**
     * Connection additional information
     * 
     */
    @Export(name="additionalInfo", refs={List.class,Map.class,String.class,Object.class}, tree="[0,[1,2,3]]")
    private Output</* @Nullable */ List<Map<String,Object>>> additionalInfo;

    /**
     * @return Connection additional information
     * 
     */
    public Output<Optional<List<Map<String,Object>>>> additionalInfo() {
        return Codegen.optional(this.additionalInfo);
    }
    /**
     * Connection bandwidth in Mbps
     * 
     */
    @Export(name="bandwidth", refs={Integer.class}, tree="[0]")
    private Output<Integer> bandwidth;

    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    public Output<Integer> bandwidth() {
        return this.bandwidth;
    }
    /**
     * Captures connection lifecycle change information
     * 
     */
    @Export(name="changeLog", refs={ConnectionChangeLog.class}, tree="[0]")
    private Output<ConnectionChangeLog> changeLog;

    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public Output<ConnectionChangeLog> changeLog() {
        return this.changeLog;
    }
    /**
     * Customer-provided connection description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Customer-provided connection description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Connection directionality from the requester point of view
     * 
     */
    @Export(name="direction", refs={String.class}, tree="[0]")
    private Output<String> direction;

    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }
    /**
     * Connection URI information
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Connection URI information
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Connection property derived from access point locations
     * 
     */
    @Export(name="isRemote", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isRemote;

    /**
     * @return Connection property derived from access point locations
     * 
     */
    public Output<Boolean> isRemote() {
        return this.isRemote;
    }
    /**
     * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Preferences for notifications on connection configuration or status changes
     * 
     */
    @Export(name="notifications", refs={List.class,ConnectionNotification.class}, tree="[0,1]")
    private Output<List<ConnectionNotification>> notifications;

    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public Output<List<ConnectionNotification>> notifications() {
        return this.notifications;
    }
    /**
     * Connection type-specific operational data
     * 
     */
    @Export(name="operation", refs={ConnectionOperation.class}, tree="[0]")
    private Output<ConnectionOperation> operation;

    /**
     * @return Connection type-specific operational data
     * 
     */
    public Output<ConnectionOperation> operation() {
        return this.operation;
    }
    /**
     * Order details
     * 
     */
    @Export(name="order", refs={ConnectionOrder.class}, tree="[0]")
    private Output<ConnectionOrder> order;

    /**
     * @return Order details
     * 
     */
    public Output<ConnectionOrder> order() {
        return this.order;
    }
    /**
     * Project information
     * 
     */
    @Export(name="project", refs={ConnectionProject.class}, tree="[0]")
    private Output<ConnectionProject> project;

    /**
     * @return Project information
     * 
     */
    public Output<ConnectionProject> project() {
        return this.project;
    }
    /**
     * Connection Redundancy Configuration
     * 
     */
    @Export(name="redundancy", refs={ConnectionRedundancy.class}, tree="[0]")
    private Output</* @Nullable */ ConnectionRedundancy> redundancy;

    /**
     * @return Connection Redundancy Configuration
     * 
     */
    public Output<Optional<ConnectionRedundancy>> redundancy() {
        return Codegen.optional(this.redundancy);
    }
    /**
     * Connection overall state
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Connection overall state
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, IA*VC, EC_VC
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, IA*VC, EC_VC
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix-assigned connection identifier
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    @Export(name="zSide", refs={ConnectionZSide.class}, tree="[0]")
    private Output<ConnectionZSide> zSide;

    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    public Output<ConnectionZSide> zSide() {
        return this.zSide;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Connection(java.lang.String name) {
        this(name, ConnectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Connection(java.lang.String name, ConnectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Connection(java.lang.String name, ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/connection:Connection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Connection(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/connection:Connection", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectionArgs makeArgs(ConnectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Connection get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Connection(name, id, state, options);
    }
}
