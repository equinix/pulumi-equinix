// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BgpState extends com.pulumi.resources.ResourceArgs {

    public static final BgpState Empty = new BgpState();

    /**
     * shared key used for BGP peer authentication.
     * 
     */
    @Import(name="authenticationKey")
    private @Nullable Output<String> authenticationKey;

    /**
     * @return shared key used for BGP peer authentication.
     * 
     */
    public Optional<Output<String>> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }

    /**
     * identifier of a connection established between.
     * network device and remote service provider that will be used for peering.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return identifier of a connection established between.
     * network device and remote service provider that will be used for peering.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * unique identifier of a network device that is a local peer in a given BGP peering
     * configuration.
     * 
     */
    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    /**
     * @return unique identifier of a network device that is a local peer in a given BGP peering
     * configuration.
     * 
     */
    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * Local ASN number.
     * 
     */
    @Import(name="localAsn")
    private @Nullable Output<Integer> localAsn;

    /**
     * @return Local ASN number.
     * 
     */
    public Optional<Output<Integer>> localAsn() {
        return Optional.ofNullable(this.localAsn);
    }

    /**
     * IP address in CIDR format of a local device.
     * 
     */
    @Import(name="localIpAddress")
    private @Nullable Output<String> localIpAddress;

    /**
     * @return IP address in CIDR format of a local device.
     * 
     */
    public Optional<Output<String>> localIpAddress() {
        return Optional.ofNullable(this.localIpAddress);
    }

    /**
     * BGP peering configuration provisioning status, one of `PROVISIONING`,
     * `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
     * 
     */
    @Import(name="provisioningStatus")
    private @Nullable Output<String> provisioningStatus;

    /**
     * @return BGP peering configuration provisioning status, one of `PROVISIONING`,
     * `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
     * 
     */
    public Optional<Output<String>> provisioningStatus() {
        return Optional.ofNullable(this.provisioningStatus);
    }

    /**
     * Remote ASN number.
     * 
     */
    @Import(name="remoteAsn")
    private @Nullable Output<Integer> remoteAsn;

    /**
     * @return Remote ASN number.
     * 
     */
    public Optional<Output<Integer>> remoteAsn() {
        return Optional.ofNullable(this.remoteAsn);
    }

    /**
     * IP address of remote peer.
     * 
     */
    @Import(name="remoteIpAddress")
    private @Nullable Output<String> remoteIpAddress;

    /**
     * @return IP address of remote peer.
     * 
     */
    public Optional<Output<String>> remoteIpAddress() {
        return Optional.ofNullable(this.remoteIpAddress);
    }

    /**
     * BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
     * `Established`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
     * `Established`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * BGP peering configuration unique identifier.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return BGP peering configuration unique identifier.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private BgpState() {}

    private BgpState(BgpState $) {
        this.authenticationKey = $.authenticationKey;
        this.connectionId = $.connectionId;
        this.deviceId = $.deviceId;
        this.localAsn = $.localAsn;
        this.localIpAddress = $.localIpAddress;
        this.provisioningStatus = $.provisioningStatus;
        this.remoteAsn = $.remoteAsn;
        this.remoteIpAddress = $.remoteIpAddress;
        this.state = $.state;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpState $;

        public Builder() {
            $ = new BgpState();
        }

        public Builder(BgpState defaults) {
            $ = new BgpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationKey shared key used for BGP peer authentication.
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(@Nullable Output<String> authenticationKey) {
            $.authenticationKey = authenticationKey;
            return this;
        }

        /**
         * @param authenticationKey shared key used for BGP peer authentication.
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(String authenticationKey) {
            return authenticationKey(Output.of(authenticationKey));
        }

        /**
         * @param connectionId identifier of a connection established between.
         * network device and remote service provider that will be used for peering.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId identifier of a connection established between.
         * network device and remote service provider that will be used for peering.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param deviceId unique identifier of a network device that is a local peer in a given BGP peering
         * configuration.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        /**
         * @param deviceId unique identifier of a network device that is a local peer in a given BGP peering
         * configuration.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        /**
         * @param localAsn Local ASN number.
         * 
         * @return builder
         * 
         */
        public Builder localAsn(@Nullable Output<Integer> localAsn) {
            $.localAsn = localAsn;
            return this;
        }

        /**
         * @param localAsn Local ASN number.
         * 
         * @return builder
         * 
         */
        public Builder localAsn(Integer localAsn) {
            return localAsn(Output.of(localAsn));
        }

        /**
         * @param localIpAddress IP address in CIDR format of a local device.
         * 
         * @return builder
         * 
         */
        public Builder localIpAddress(@Nullable Output<String> localIpAddress) {
            $.localIpAddress = localIpAddress;
            return this;
        }

        /**
         * @param localIpAddress IP address in CIDR format of a local device.
         * 
         * @return builder
         * 
         */
        public Builder localIpAddress(String localIpAddress) {
            return localIpAddress(Output.of(localIpAddress));
        }

        /**
         * @param provisioningStatus BGP peering configuration provisioning status, one of `PROVISIONING`,
         * `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder provisioningStatus(@Nullable Output<String> provisioningStatus) {
            $.provisioningStatus = provisioningStatus;
            return this;
        }

        /**
         * @param provisioningStatus BGP peering configuration provisioning status, one of `PROVISIONING`,
         * `PENDING_UPDATE`, `PROVISIONED`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder provisioningStatus(String provisioningStatus) {
            return provisioningStatus(Output.of(provisioningStatus));
        }

        /**
         * @param remoteAsn Remote ASN number.
         * 
         * @return builder
         * 
         */
        public Builder remoteAsn(@Nullable Output<Integer> remoteAsn) {
            $.remoteAsn = remoteAsn;
            return this;
        }

        /**
         * @param remoteAsn Remote ASN number.
         * 
         * @return builder
         * 
         */
        public Builder remoteAsn(Integer remoteAsn) {
            return remoteAsn(Output.of(remoteAsn));
        }

        /**
         * @param remoteIpAddress IP address of remote peer.
         * 
         * @return builder
         * 
         */
        public Builder remoteIpAddress(@Nullable Output<String> remoteIpAddress) {
            $.remoteIpAddress = remoteIpAddress;
            return this;
        }

        /**
         * @param remoteIpAddress IP address of remote peer.
         * 
         * @return builder
         * 
         */
        public Builder remoteIpAddress(String remoteIpAddress) {
            return remoteIpAddress(Output.of(remoteIpAddress));
        }

        /**
         * @param state BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
         * `Established`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,
         * `Established`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uuid BGP peering configuration unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid BGP peering configuration unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public BgpState build() {
            return $;
        }
    }

}
