// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamSubscriptionSinkCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamSubscriptionSinkCredentialArgs Empty = new StreamSubscriptionSinkCredentialArgs();

    /**
     * Passed as Authorization header value
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * Passed as Authorization header value
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * Passed as Authorization header value
     * 
     */
    @Import(name="integrationKey")
    private @Nullable Output<String> integrationKey;

    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<Output<String>> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }

    /**
     * Passed as Authorization header value
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Type of the credential being passed
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the credential being passed
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Passed as Authorization header value
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private StreamSubscriptionSinkCredentialArgs() {}

    private StreamSubscriptionSinkCredentialArgs(StreamSubscriptionSinkCredentialArgs $) {
        this.accessToken = $.accessToken;
        this.apiKey = $.apiKey;
        this.integrationKey = $.integrationKey;
        this.password = $.password;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSubscriptionSinkCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSubscriptionSinkCredentialArgs $;

        public Builder() {
            $ = new StreamSubscriptionSinkCredentialArgs();
        }

        public Builder(StreamSubscriptionSinkCredentialArgs defaults) {
            $ = new StreamSubscriptionSinkCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param apiKey Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param integrationKey Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(@Nullable Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param password Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param type Type of the credential being passed
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the credential being passed
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Passed as Authorization header value
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public StreamSubscriptionSinkCredentialArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("StreamSubscriptionSinkCredentialArgs", "type");
            }
            return $;
        }
    }

}
