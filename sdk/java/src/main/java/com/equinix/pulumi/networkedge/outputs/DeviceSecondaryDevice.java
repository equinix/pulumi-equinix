// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.outputs;

import com.equinix.pulumi.networkedge.outputs.DeviceSecondaryDeviceInterface;
import com.equinix.pulumi.networkedge.outputs.DeviceSecondaryDeviceSshKey;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceSecondaryDevice {
    /**
     * @return Billing account number for secondary device.
     * 
     */
    private String accountNumber;
    /**
     * @return Identifier of a WAN interface ACL template that will be applied on a secondary device.
     * 
     */
    private @Nullable String aclTemplateId;
    /**
     * @return Additional Internet bandwidth, in Mbps, for a secondary device.
     * 
     */
    private @Nullable Integer additionalBandwidth;
    /**
     * @return (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    private @Nullable Integer asn;
    /**
     * @return Identifier of a cloud init file that will be applied on a secondary device.
     * 
     */
    private @Nullable String cloudInitFileId;
    /**
     * @return Secondary device hostname.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Device location Equinix Business Exchange name.
     * 
     */
    private @Nullable String ibx;
    /**
     * @return List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    private @Nullable List<DeviceSecondaryDeviceInterface> interfaces;
    /**
     * @return Path to the license file that will be uploaded and applied on a secondary device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    private @Nullable String licenseFile;
    /**
     * @return Identifier of a license file that will be applied on a secondary device.
     * 
     */
    private @Nullable String licenseFileId;
    /**
     * @return Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    private @Nullable String licenseStatus;
    /**
     * @return License Token can be provided for some device types o the device.
     * 
     */
    private @Nullable String licenseToken;
    /**
     * @return Metro location of a secondary device.
     * 
     */
    private String metroCode;
    /**
     * @return Identifier of an MGMT interface ACL template that will be applied on a secondary device.
     * * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary device.
     * 
     */
    private @Nullable String mgmtAclTemplateUuid;
    /**
     * @return Secondary device name.
     * 
     */
    private String name;
    /**
     * @return List of email addresses that will receive notifications about secondary device.
     * 
     */
    private List<String> notifications;
    /**
     * @return Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    private @Nullable String redundancyType;
    /**
     * @return Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    private @Nullable String redundantId;
    /**
     * @return Device location region.
     * 
     */
    private @Nullable String region;
    /**
     * @return IP address of SSH enabled interface on the device.
     * 
     */
    private @Nullable String sshIpAddress;
    /**
     * @return FQDN of SSH enabled interface on the device.
     * 
     */
    private @Nullable String sshIpFqdn;
    /**
     * @return Definition of SSH key that will be provisioned on a device
     * 
     */
    private @Nullable DeviceSecondaryDeviceSshKey sshKey;
    /**
     * @return interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    private @Nullable String status;
    /**
     * @return Device unique identifier.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return Key/Value pairs of vendor specific configuration parameters for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`, `systemIpAddress`, `privateAddress`, `privateCidrMask`, `privateGateway`, `licenseKey`, `licenseId`, `panoramaAuthKey`, `panoramaIpAddress`, `ipAddress`, `subnetMaskIp`, `gatewayIp`.
     * 
     */
    private @Nullable Map<String,String> vendorConfiguration;
    /**
     * @return device interface id picked for WAN
     * 
     */
    private @Nullable String wanInterfaceId;
    /**
     * @return Device location zone code.
     * 
     */
    private @Nullable String zoneCode;

    private DeviceSecondaryDevice() {}
    /**
     * @return Billing account number for secondary device.
     * 
     */
    public String accountNumber() {
        return this.accountNumber;
    }
    /**
     * @return Identifier of a WAN interface ACL template that will be applied on a secondary device.
     * 
     */
    public Optional<String> aclTemplateId() {
        return Optional.ofNullable(this.aclTemplateId);
    }
    /**
     * @return Additional Internet bandwidth, in Mbps, for a secondary device.
     * 
     */
    public Optional<Integer> additionalBandwidth() {
        return Optional.ofNullable(this.additionalBandwidth);
    }
    /**
     * @return (Autonomous System Number) Unique identifier for a network on the internet.
     * 
     */
    public Optional<Integer> asn() {
        return Optional.ofNullable(this.asn);
    }
    /**
     * @return Identifier of a cloud init file that will be applied on a secondary device.
     * 
     */
    public Optional<String> cloudInitFileId() {
        return Optional.ofNullable(this.cloudInitFileId);
    }
    /**
     * @return Secondary device hostname.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Device location Equinix Business Exchange name.
     * 
     */
    public Optional<String> ibx() {
        return Optional.ofNullable(this.ibx);
    }
    /**
     * @return List of device interfaces. See Interface Attribute below for more details.
     * 
     */
    public List<DeviceSecondaryDeviceInterface> interfaces() {
        return this.interfaces == null ? List.of() : this.interfaces;
    }
    /**
     * @return Path to the license file that will be uploaded and applied on a secondary device. Applicable for some device types in BYOL licensing mode.
     * 
     */
    public Optional<String> licenseFile() {
        return Optional.ofNullable(this.licenseFile);
    }
    /**
     * @return Identifier of a license file that will be applied on a secondary device.
     * 
     */
    public Optional<String> licenseFileId() {
        return Optional.ofNullable(this.licenseFileId);
    }
    /**
     * @return Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
     * 
     */
    public Optional<String> licenseStatus() {
        return Optional.ofNullable(this.licenseStatus);
    }
    /**
     * @return License Token can be provided for some device types o the device.
     * 
     */
    public Optional<String> licenseToken() {
        return Optional.ofNullable(this.licenseToken);
    }
    /**
     * @return Metro location of a secondary device.
     * 
     */
    public String metroCode() {
        return this.metroCode;
    }
    /**
     * @return Identifier of an MGMT interface ACL template that will be applied on a secondary device.
     * * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary device.
     * 
     */
    public Optional<String> mgmtAclTemplateUuid() {
        return Optional.ofNullable(this.mgmtAclTemplateUuid);
    }
    /**
     * @return Secondary device name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of email addresses that will receive notifications about secondary device.
     * 
     */
    public List<String> notifications() {
        return this.notifications;
    }
    /**
     * @return Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Device redundancy type applicable for HA devices, either primary or secondary.
     * 
     */
    public Optional<String> redundancyType() {
        return Optional.ofNullable(this.redundancyType);
    }
    /**
     * @return Unique identifier for a redundant device applicable for HA devices.
     * 
     */
    public Optional<String> redundantId() {
        return Optional.ofNullable(this.redundantId);
    }
    /**
     * @return Device location region.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return IP address of SSH enabled interface on the device.
     * 
     */
    public Optional<String> sshIpAddress() {
        return Optional.ofNullable(this.sshIpAddress);
    }
    /**
     * @return FQDN of SSH enabled interface on the device.
     * 
     */
    public Optional<String> sshIpFqdn() {
        return Optional.ofNullable(this.sshIpFqdn);
    }
    /**
     * @return Definition of SSH key that will be provisioned on a device
     * 
     */
    public Optional<DeviceSecondaryDeviceSshKey> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * @return interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Device unique identifier.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return Key/Value pairs of vendor specific configuration parameters for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`, `systemIpAddress`, `privateAddress`, `privateCidrMask`, `privateGateway`, `licenseKey`, `licenseId`, `panoramaAuthKey`, `panoramaIpAddress`, `ipAddress`, `subnetMaskIp`, `gatewayIp`.
     * 
     */
    public Map<String,String> vendorConfiguration() {
        return this.vendorConfiguration == null ? Map.of() : this.vendorConfiguration;
    }
    /**
     * @return device interface id picked for WAN
     * 
     */
    public Optional<String> wanInterfaceId() {
        return Optional.ofNullable(this.wanInterfaceId);
    }
    /**
     * @return Device location zone code.
     * 
     */
    public Optional<String> zoneCode() {
        return Optional.ofNullable(this.zoneCode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceSecondaryDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountNumber;
        private @Nullable String aclTemplateId;
        private @Nullable Integer additionalBandwidth;
        private @Nullable Integer asn;
        private @Nullable String cloudInitFileId;
        private @Nullable String hostname;
        private @Nullable String ibx;
        private @Nullable List<DeviceSecondaryDeviceInterface> interfaces;
        private @Nullable String licenseFile;
        private @Nullable String licenseFileId;
        private @Nullable String licenseStatus;
        private @Nullable String licenseToken;
        private String metroCode;
        private @Nullable String mgmtAclTemplateUuid;
        private String name;
        private List<String> notifications;
        private @Nullable String projectId;
        private @Nullable String redundancyType;
        private @Nullable String redundantId;
        private @Nullable String region;
        private @Nullable String sshIpAddress;
        private @Nullable String sshIpFqdn;
        private @Nullable DeviceSecondaryDeviceSshKey sshKey;
        private @Nullable String status;
        private @Nullable String uuid;
        private @Nullable Map<String,String> vendorConfiguration;
        private @Nullable String wanInterfaceId;
        private @Nullable String zoneCode;
        public Builder() {}
        public Builder(DeviceSecondaryDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountNumber = defaults.accountNumber;
    	      this.aclTemplateId = defaults.aclTemplateId;
    	      this.additionalBandwidth = defaults.additionalBandwidth;
    	      this.asn = defaults.asn;
    	      this.cloudInitFileId = defaults.cloudInitFileId;
    	      this.hostname = defaults.hostname;
    	      this.ibx = defaults.ibx;
    	      this.interfaces = defaults.interfaces;
    	      this.licenseFile = defaults.licenseFile;
    	      this.licenseFileId = defaults.licenseFileId;
    	      this.licenseStatus = defaults.licenseStatus;
    	      this.licenseToken = defaults.licenseToken;
    	      this.metroCode = defaults.metroCode;
    	      this.mgmtAclTemplateUuid = defaults.mgmtAclTemplateUuid;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.projectId = defaults.projectId;
    	      this.redundancyType = defaults.redundancyType;
    	      this.redundantId = defaults.redundantId;
    	      this.region = defaults.region;
    	      this.sshIpAddress = defaults.sshIpAddress;
    	      this.sshIpFqdn = defaults.sshIpFqdn;
    	      this.sshKey = defaults.sshKey;
    	      this.status = defaults.status;
    	      this.uuid = defaults.uuid;
    	      this.vendorConfiguration = defaults.vendorConfiguration;
    	      this.wanInterfaceId = defaults.wanInterfaceId;
    	      this.zoneCode = defaults.zoneCode;
        }

        @CustomType.Setter
        public Builder accountNumber(String accountNumber) {
            if (accountNumber == null) {
              throw new MissingRequiredPropertyException("DeviceSecondaryDevice", "accountNumber");
            }
            this.accountNumber = accountNumber;
            return this;
        }
        @CustomType.Setter
        public Builder aclTemplateId(@Nullable String aclTemplateId) {

            this.aclTemplateId = aclTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder additionalBandwidth(@Nullable Integer additionalBandwidth) {

            this.additionalBandwidth = additionalBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder asn(@Nullable Integer asn) {

            this.asn = asn;
            return this;
        }
        @CustomType.Setter
        public Builder cloudInitFileId(@Nullable String cloudInitFileId) {

            this.cloudInitFileId = cloudInitFileId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder ibx(@Nullable String ibx) {

            this.ibx = ibx;
            return this;
        }
        @CustomType.Setter
        public Builder interfaces(@Nullable List<DeviceSecondaryDeviceInterface> interfaces) {

            this.interfaces = interfaces;
            return this;
        }
        public Builder interfaces(DeviceSecondaryDeviceInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder licenseFile(@Nullable String licenseFile) {

            this.licenseFile = licenseFile;
            return this;
        }
        @CustomType.Setter
        public Builder licenseFileId(@Nullable String licenseFileId) {

            this.licenseFileId = licenseFileId;
            return this;
        }
        @CustomType.Setter
        public Builder licenseStatus(@Nullable String licenseStatus) {

            this.licenseStatus = licenseStatus;
            return this;
        }
        @CustomType.Setter
        public Builder licenseToken(@Nullable String licenseToken) {

            this.licenseToken = licenseToken;
            return this;
        }
        @CustomType.Setter
        public Builder metroCode(String metroCode) {
            if (metroCode == null) {
              throw new MissingRequiredPropertyException("DeviceSecondaryDevice", "metroCode");
            }
            this.metroCode = metroCode;
            return this;
        }
        @CustomType.Setter
        public Builder mgmtAclTemplateUuid(@Nullable String mgmtAclTemplateUuid) {

            this.mgmtAclTemplateUuid = mgmtAclTemplateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("DeviceSecondaryDevice", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<String> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("DeviceSecondaryDevice", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(String... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder redundancyType(@Nullable String redundancyType) {

            this.redundancyType = redundancyType;
            return this;
        }
        @CustomType.Setter
        public Builder redundantId(@Nullable String redundantId) {

            this.redundantId = redundantId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder sshIpAddress(@Nullable String sshIpAddress) {

            this.sshIpAddress = sshIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder sshIpFqdn(@Nullable String sshIpFqdn) {

            this.sshIpFqdn = sshIpFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder sshKey(@Nullable DeviceSecondaryDeviceSshKey sshKey) {

            this.sshKey = sshKey;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder vendorConfiguration(@Nullable Map<String,String> vendorConfiguration) {

            this.vendorConfiguration = vendorConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder wanInterfaceId(@Nullable String wanInterfaceId) {

            this.wanInterfaceId = wanInterfaceId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneCode(@Nullable String zoneCode) {

            this.zoneCode = zoneCode;
            return this;
        }
        public DeviceSecondaryDevice build() {
            final var _resultValue = new DeviceSecondaryDevice();
            _resultValue.accountNumber = accountNumber;
            _resultValue.aclTemplateId = aclTemplateId;
            _resultValue.additionalBandwidth = additionalBandwidth;
            _resultValue.asn = asn;
            _resultValue.cloudInitFileId = cloudInitFileId;
            _resultValue.hostname = hostname;
            _resultValue.ibx = ibx;
            _resultValue.interfaces = interfaces;
            _resultValue.licenseFile = licenseFile;
            _resultValue.licenseFileId = licenseFileId;
            _resultValue.licenseStatus = licenseStatus;
            _resultValue.licenseToken = licenseToken;
            _resultValue.metroCode = metroCode;
            _resultValue.mgmtAclTemplateUuid = mgmtAclTemplateUuid;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.projectId = projectId;
            _resultValue.redundancyType = redundancyType;
            _resultValue.redundantId = redundantId;
            _resultValue.region = region;
            _resultValue.sshIpAddress = sshIpAddress;
            _resultValue.sshIpFqdn = sshIpFqdn;
            _resultValue.sshKey = sshKey;
            _resultValue.status = status;
            _resultValue.uuid = uuid;
            _resultValue.vendorConfiguration = vendorConfiguration;
            _resultValue.wanInterfaceId = wanInterfaceId;
            _resultValue.zoneCode = zoneCode;
            return _resultValue;
        }
    }
}
