// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.StreamChangeLogArgs;
import com.equinix.pulumi.fabric.inputs.StreamProjectArgs;
import com.equinix.pulumi.fabric.inputs.StreamTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamState extends com.pulumi.resources.ResourceArgs {

    public static final StreamState Empty = new StreamState();

    /**
     * Count of the streaming assets attached to the stream resource
     * 
     */
    @Import(name="assetsCount")
    private @Nullable Output<Integer> assetsCount;

    /**
     * @return Count of the streaming assets attached to the stream resource
     * 
     */
    public Optional<Output<Integer>> assetsCount() {
        return Optional.ofNullable(this.assetsCount);
    }

    /**
     * Details of the last change on the stream resource
     * 
     */
    @Import(name="changeLog")
    private @Nullable Output<StreamChangeLogArgs> changeLog;

    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public Optional<Output<StreamChangeLogArgs>> changeLog() {
        return Optional.ofNullable(this.changeLog);
    }

    /**
     * Customer-provided description of the stream resource
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Customer-provided description of the stream resource
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Customer-provided name of the stream resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customer-provided name of the stream resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Equinix Project attribute object
     * 
     */
    @Import(name="project")
    private @Nullable Output<StreamProjectArgs> project;

    /**
     * @return Equinix Project attribute object
     * 
     */
    public Optional<Output<StreamProjectArgs>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Value representing provisioning status for the stream resource
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Count of the client subscriptions on the stream resource
     * 
     */
    @Import(name="streamSubscriptionsCount")
    private @Nullable Output<Integer> streamSubscriptionsCount;

    /**
     * @return Count of the client subscriptions on the stream resource
     * 
     */
    public Optional<Output<Integer>> streamSubscriptionsCount() {
        return Optional.ofNullable(this.streamSubscriptionsCount);
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamTimeoutsArgs> timeouts;

    public Optional<Output<StreamTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Equinix defined Streaming Type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Equinix defined Streaming Type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned unique id for the stream resource
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned unique id for the stream resource
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private StreamState() {}

    private StreamState(StreamState $) {
        this.assetsCount = $.assetsCount;
        this.changeLog = $.changeLog;
        this.description = $.description;
        this.href = $.href;
        this.name = $.name;
        this.project = $.project;
        this.state = $.state;
        this.streamSubscriptionsCount = $.streamSubscriptionsCount;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamState $;

        public Builder() {
            $ = new StreamState();
        }

        public Builder(StreamState defaults) {
            $ = new StreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetsCount Count of the streaming assets attached to the stream resource
         * 
         * @return builder
         * 
         */
        public Builder assetsCount(@Nullable Output<Integer> assetsCount) {
            $.assetsCount = assetsCount;
            return this;
        }

        /**
         * @param assetsCount Count of the streaming assets attached to the stream resource
         * 
         * @return builder
         * 
         */
        public Builder assetsCount(Integer assetsCount) {
            return assetsCount(Output.of(assetsCount));
        }

        /**
         * @param changeLog Details of the last change on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(@Nullable Output<StreamChangeLogArgs> changeLog) {
            $.changeLog = changeLog;
            return this;
        }

        /**
         * @param changeLog Details of the last change on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(StreamChangeLogArgs changeLog) {
            return changeLog(Output.of(changeLog));
        }

        /**
         * @param description Customer-provided description of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Customer-provided description of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param href Equinix auto generated URI to the stream resource in Equinix Portal
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Equinix auto generated URI to the stream resource in Equinix Portal
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param name Customer-provided name of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customer-provided name of the stream resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project Equinix Project attribute object
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<StreamProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Equinix Project attribute object
         * 
         * @return builder
         * 
         */
        public Builder project(StreamProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param state Value representing provisioning status for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Value representing provisioning status for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamSubscriptionsCount Count of the client subscriptions on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder streamSubscriptionsCount(@Nullable Output<Integer> streamSubscriptionsCount) {
            $.streamSubscriptionsCount = streamSubscriptionsCount;
            return this;
        }

        /**
         * @param streamSubscriptionsCount Count of the client subscriptions on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder streamSubscriptionsCount(Integer streamSubscriptionsCount) {
            return streamSubscriptionsCount(Output.of(streamSubscriptionsCount));
        }

        public Builder timeouts(@Nullable Output<StreamTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Equinix defined Streaming Type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Equinix defined Streaming Type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned unique id for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned unique id for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public StreamState build() {
            return $;
        }
    }

}
