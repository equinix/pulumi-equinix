// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.ServiceTokenServiceTokenConnectionASideArgs;
import com.equinix.pulumi.fabric.inputs.ServiceTokenServiceTokenConnectionZSideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTokenServiceTokenConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenServiceTokenConnectionArgs Empty = new ServiceTokenServiceTokenConnectionArgs();

    /**
     * A-Side Connection link protocol,virtual device or network configuration
     * 
     */
    @Import(name="aSides")
    private @Nullable Output<List<ServiceTokenServiceTokenConnectionASideArgs>> aSides;

    /**
     * @return A-Side Connection link protocol,virtual device or network configuration
     * 
     */
    public Optional<Output<List<ServiceTokenServiceTokenConnectionASideArgs>>> aSides() {
        return Optional.ofNullable(this.aSides);
    }

    /**
     * Allow custom bandwidth value
     * 
     */
    @Import(name="allowCustomBandwidth")
    private @Nullable Output<Boolean> allowCustomBandwidth;

    /**
     * @return Allow custom bandwidth value
     * 
     */
    public Optional<Output<Boolean>> allowCustomBandwidth() {
        return Optional.ofNullable(this.allowCustomBandwidth);
    }

    /**
     * Authorization to connect remotely
     * 
     */
    @Import(name="allowRemoteConnection")
    private @Nullable Output<Boolean> allowRemoteConnection;

    /**
     * @return Authorization to connect remotely
     * 
     */
    public Optional<Output<Boolean>> allowRemoteConnection() {
        return Optional.ofNullable(this.allowRemoteConnection);
    }

    /**
     * Connection bandwidth limit in Mbps
     * 
     */
    @Import(name="bandwidthLimit")
    private @Nullable Output<Integer> bandwidthLimit;

    /**
     * @return Connection bandwidth limit in Mbps
     * 
     */
    public Optional<Output<Integer>> bandwidthLimit() {
        return Optional.ofNullable(this.bandwidthLimit);
    }

    /**
     * List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
     * 
     */
    @Import(name="supportedBandwidths")
    private @Nullable Output<List<Integer>> supportedBandwidths;

    /**
     * @return List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
     * 
     */
    public Optional<Output<List<Integer>>> supportedBandwidths() {
        return Optional.ofNullable(this.supportedBandwidths);
    }

    /**
     * Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned connection identifier
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Z-Side Connection link protocol,virtual device or network configuration
     * 
     */
    @Import(name="zSides")
    private @Nullable Output<List<ServiceTokenServiceTokenConnectionZSideArgs>> zSides;

    /**
     * @return Z-Side Connection link protocol,virtual device or network configuration
     * 
     */
    public Optional<Output<List<ServiceTokenServiceTokenConnectionZSideArgs>>> zSides() {
        return Optional.ofNullable(this.zSides);
    }

    private ServiceTokenServiceTokenConnectionArgs() {}

    private ServiceTokenServiceTokenConnectionArgs(ServiceTokenServiceTokenConnectionArgs $) {
        this.aSides = $.aSides;
        this.allowCustomBandwidth = $.allowCustomBandwidth;
        this.allowRemoteConnection = $.allowRemoteConnection;
        this.bandwidthLimit = $.bandwidthLimit;
        this.supportedBandwidths = $.supportedBandwidths;
        this.type = $.type;
        this.uuid = $.uuid;
        this.zSides = $.zSides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenServiceTokenConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenServiceTokenConnectionArgs $;

        public Builder() {
            $ = new ServiceTokenServiceTokenConnectionArgs();
        }

        public Builder(ServiceTokenServiceTokenConnectionArgs defaults) {
            $ = new ServiceTokenServiceTokenConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aSides A-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder aSides(@Nullable Output<List<ServiceTokenServiceTokenConnectionASideArgs>> aSides) {
            $.aSides = aSides;
            return this;
        }

        /**
         * @param aSides A-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder aSides(List<ServiceTokenServiceTokenConnectionASideArgs> aSides) {
            return aSides(Output.of(aSides));
        }

        /**
         * @param aSides A-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder aSides(ServiceTokenServiceTokenConnectionASideArgs... aSides) {
            return aSides(List.of(aSides));
        }

        /**
         * @param allowCustomBandwidth Allow custom bandwidth value
         * 
         * @return builder
         * 
         */
        public Builder allowCustomBandwidth(@Nullable Output<Boolean> allowCustomBandwidth) {
            $.allowCustomBandwidth = allowCustomBandwidth;
            return this;
        }

        /**
         * @param allowCustomBandwidth Allow custom bandwidth value
         * 
         * @return builder
         * 
         */
        public Builder allowCustomBandwidth(Boolean allowCustomBandwidth) {
            return allowCustomBandwidth(Output.of(allowCustomBandwidth));
        }

        /**
         * @param allowRemoteConnection Authorization to connect remotely
         * 
         * @return builder
         * 
         */
        public Builder allowRemoteConnection(@Nullable Output<Boolean> allowRemoteConnection) {
            $.allowRemoteConnection = allowRemoteConnection;
            return this;
        }

        /**
         * @param allowRemoteConnection Authorization to connect remotely
         * 
         * @return builder
         * 
         */
        public Builder allowRemoteConnection(Boolean allowRemoteConnection) {
            return allowRemoteConnection(Output.of(allowRemoteConnection));
        }

        /**
         * @param bandwidthLimit Connection bandwidth limit in Mbps
         * 
         * @return builder
         * 
         */
        public Builder bandwidthLimit(@Nullable Output<Integer> bandwidthLimit) {
            $.bandwidthLimit = bandwidthLimit;
            return this;
        }

        /**
         * @param bandwidthLimit Connection bandwidth limit in Mbps
         * 
         * @return builder
         * 
         */
        public Builder bandwidthLimit(Integer bandwidthLimit) {
            return bandwidthLimit(Output.of(bandwidthLimit));
        }

        /**
         * @param supportedBandwidths List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
         * 
         * @return builder
         * 
         */
        public Builder supportedBandwidths(@Nullable Output<List<Integer>> supportedBandwidths) {
            $.supportedBandwidths = supportedBandwidths;
            return this;
        }

        /**
         * @param supportedBandwidths List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
         * 
         * @return builder
         * 
         */
        public Builder supportedBandwidths(List<Integer> supportedBandwidths) {
            return supportedBandwidths(Output.of(supportedBandwidths));
        }

        /**
         * @param supportedBandwidths List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
         * 
         * @return builder
         * 
         */
        public Builder supportedBandwidths(Integer... supportedBandwidths) {
            return supportedBandwidths(List.of(supportedBandwidths));
        }

        /**
         * @param type Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned connection identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned connection identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param zSides Z-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder zSides(@Nullable Output<List<ServiceTokenServiceTokenConnectionZSideArgs>> zSides) {
            $.zSides = zSides;
            return this;
        }

        /**
         * @param zSides Z-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder zSides(List<ServiceTokenServiceTokenConnectionZSideArgs> zSides) {
            return zSides(Output.of(zSides));
        }

        /**
         * @param zSides Z-Side Connection link protocol,virtual device or network configuration
         * 
         * @return builder
         * 
         */
        public Builder zSides(ServiceTokenServiceTokenConnectionZSideArgs... zSides) {
            return zSides(List.of(zSides));
        }

        public ServiceTokenServiceTokenConnectionArgs build() {
            return $;
        }
    }

}
