// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.ConnectionZSideAccessPoint;
import com.equinix.pulumi.fabric.outputs.ConnectionZSideAdditionalInfo;
import com.equinix.pulumi.fabric.outputs.ConnectionZSideServiceToken;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionZSide {
    /**
     * @return Point of access details
     * 
     */
    private @Nullable ConnectionZSideAccessPoint accessPoint;
    /**
     * @return Connection side additional information
     * 
     */
    private @Nullable List<ConnectionZSideAdditionalInfo> additionalInfo;
    /**
     * @return For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     * 
     */
    private @Nullable ConnectionZSideServiceToken serviceToken;

    private ConnectionZSide() {}
    /**
     * @return Point of access details
     * 
     */
    public Optional<ConnectionZSideAccessPoint> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }
    /**
     * @return Connection side additional information
     * 
     */
    public List<ConnectionZSideAdditionalInfo> additionalInfo() {
        return this.additionalInfo == null ? List.of() : this.additionalInfo;
    }
    /**
     * @return For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     * 
     */
    public Optional<ConnectionZSideServiceToken> serviceToken() {
        return Optional.ofNullable(this.serviceToken);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionZSide defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ConnectionZSideAccessPoint accessPoint;
        private @Nullable List<ConnectionZSideAdditionalInfo> additionalInfo;
        private @Nullable ConnectionZSideServiceToken serviceToken;
        public Builder() {}
        public Builder(ConnectionZSide defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPoint = defaults.accessPoint;
    	      this.additionalInfo = defaults.additionalInfo;
    	      this.serviceToken = defaults.serviceToken;
        }

        @CustomType.Setter
        public Builder accessPoint(@Nullable ConnectionZSideAccessPoint accessPoint) {

            this.accessPoint = accessPoint;
            return this;
        }
        @CustomType.Setter
        public Builder additionalInfo(@Nullable List<ConnectionZSideAdditionalInfo> additionalInfo) {

            this.additionalInfo = additionalInfo;
            return this;
        }
        public Builder additionalInfo(ConnectionZSideAdditionalInfo... additionalInfo) {
            return additionalInfo(List.of(additionalInfo));
        }
        @CustomType.Setter
        public Builder serviceToken(@Nullable ConnectionZSideServiceToken serviceToken) {

            this.serviceToken = serviceToken;
            return this;
        }
        public ConnectionZSide build() {
            final var _resultValue = new ConnectionZSide();
            _resultValue.accessPoint = accessPoint;
            _resultValue.additionalInfo = additionalInfo;
            _resultValue.serviceToken = serviceToken;
            return _resultValue;
        }
    }
}
