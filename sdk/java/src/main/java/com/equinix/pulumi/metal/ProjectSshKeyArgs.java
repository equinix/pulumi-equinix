// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectSshKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectSshKeyArgs Empty = new ProjectSshKeyArgs();

    /**
     * The name of the SSH key for identification.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the SSH key for identification.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of parent project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of parent project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The public key. If this is a file, it can be read using the file interpolation function.
     * 
     */
    @Import(name="publicKey", required=true)
    private Output<String> publicKey;

    /**
     * @return The public key. If this is a file, it can be read using the file interpolation function.
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }

    private ProjectSshKeyArgs() {}

    private ProjectSshKeyArgs(ProjectSshKeyArgs $) {
        this.name = $.name;
        this.projectId = $.projectId;
        this.publicKey = $.publicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectSshKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectSshKeyArgs $;

        public Builder() {
            $ = new ProjectSshKeyArgs();
        }

        public Builder(ProjectSshKeyArgs defaults) {
            $ = new ProjectSshKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the SSH key for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SSH key for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of parent project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of parent project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param publicKey The public key. If this is a file, it can be read using the file interpolation function.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The public key. If this is a file, it can be read using the file interpolation function.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public ProjectSshKeyArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ProjectSshKeyArgs", "projectId");
            }
            if ($.publicKey == null) {
                throw new MissingRequiredPropertyException("ProjectSshKeyArgs", "publicKey");
            }
            return $;
        }
    }

}
