// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeviceSoftwareArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeviceSoftwareArgs Empty = new GetDeviceSoftwareArgs();

    /**
     * Code of a device type.
     * 
     */
    @Import(name="deviceType", required=true)
    private Output<String> deviceType;

    /**
     * @return Code of a device type.
     * 
     */
    public Output<String> deviceType() {
        return this.deviceType;
    }

    /**
     * Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
     * 
     */
    @Import(name="mostRecent")
    private @Nullable Output<Boolean> mostRecent;

    /**
     * @return Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
     * 
     */
    public Optional<Output<Boolean>> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }

    /**
     * Limits returned versions to those that are supported by given software package codes.
     * 
     */
    @Import(name="packages")
    private @Nullable Output<List<String>> packages;

    /**
     * @return Limits returned versions to those that are supported by given software package codes.
     * 
     */
    public Optional<Output<List<String>>> packages() {
        return Optional.ofNullable(this.packages);
    }

    /**
     * Boolean value to limit query results to stable versions only.
     * 
     */
    @Import(name="stable")
    private @Nullable Output<Boolean> stable;

    /**
     * @return Boolean value to limit query results to stable versions only.
     * 
     */
    public Optional<Output<Boolean>> stable() {
        return Optional.ofNullable(this.stable);
    }

    /**
     * A regex string to apply on returned versions and filter search results.
     * 
     */
    @Import(name="versionRegex")
    private @Nullable Output<String> versionRegex;

    /**
     * @return A regex string to apply on returned versions and filter search results.
     * 
     */
    public Optional<Output<String>> versionRegex() {
        return Optional.ofNullable(this.versionRegex);
    }

    private GetDeviceSoftwareArgs() {}

    private GetDeviceSoftwareArgs(GetDeviceSoftwareArgs $) {
        this.deviceType = $.deviceType;
        this.mostRecent = $.mostRecent;
        this.packages = $.packages;
        this.stable = $.stable;
        this.versionRegex = $.versionRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeviceSoftwareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeviceSoftwareArgs $;

        public Builder() {
            $ = new GetDeviceSoftwareArgs();
        }

        public Builder(GetDeviceSoftwareArgs defaults) {
            $ = new GetDeviceSoftwareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceType Code of a device type.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(Output<String> deviceType) {
            $.deviceType = deviceType;
            return this;
        }

        /**
         * @param deviceType Code of a device type.
         * 
         * @return builder
         * 
         */
        public Builder deviceType(String deviceType) {
            return deviceType(Output.of(deviceType));
        }

        /**
         * @param mostRecent Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(@Nullable Output<Boolean> mostRecent) {
            $.mostRecent = mostRecent;
            return this;
        }

        /**
         * @param mostRecent Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(Boolean mostRecent) {
            return mostRecent(Output.of(mostRecent));
        }

        /**
         * @param packages Limits returned versions to those that are supported by given software package codes.
         * 
         * @return builder
         * 
         */
        public Builder packages(@Nullable Output<List<String>> packages) {
            $.packages = packages;
            return this;
        }

        /**
         * @param packages Limits returned versions to those that are supported by given software package codes.
         * 
         * @return builder
         * 
         */
        public Builder packages(List<String> packages) {
            return packages(Output.of(packages));
        }

        /**
         * @param packages Limits returned versions to those that are supported by given software package codes.
         * 
         * @return builder
         * 
         */
        public Builder packages(String... packages) {
            return packages(List.of(packages));
        }

        /**
         * @param stable Boolean value to limit query results to stable versions only.
         * 
         * @return builder
         * 
         */
        public Builder stable(@Nullable Output<Boolean> stable) {
            $.stable = stable;
            return this;
        }

        /**
         * @param stable Boolean value to limit query results to stable versions only.
         * 
         * @return builder
         * 
         */
        public Builder stable(Boolean stable) {
            return stable(Output.of(stable));
        }

        /**
         * @param versionRegex A regex string to apply on returned versions and filter search results.
         * 
         * @return builder
         * 
         */
        public Builder versionRegex(@Nullable Output<String> versionRegex) {
            $.versionRegex = versionRegex;
            return this;
        }

        /**
         * @param versionRegex A regex string to apply on returned versions and filter search results.
         * 
         * @return builder
         * 
         */
        public Builder versionRegex(String versionRegex) {
            return versionRegex(Output.of(versionRegex));
        }

        public GetDeviceSoftwareArgs build() {
            if ($.deviceType == null) {
                throw new MissingRequiredPropertyException("GetDeviceSoftwareArgs", "deviceType");
            }
            return $;
        }
    }

}
