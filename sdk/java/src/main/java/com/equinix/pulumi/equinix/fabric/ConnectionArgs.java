// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.fabric;

import com.equinix.pulumi.equinix.fabric.enums.ConnectionType;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionASideArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionAdditionalInfoArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionNotificationArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionOrderArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionProjectArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionRedundancyArgs;
import com.equinix.pulumi.equinix.fabric.inputs.ConnectionZSideArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    @Import(name="aSides", required=true)
    private Output<List<ConnectionASideArgs>> aSides;

    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    public Output<List<ConnectionASideArgs>> aSides() {
        return this.aSides;
    }

    /**
     * Connection additional information
     * 
     */
    @Import(name="additionalInfos")
    private @Nullable Output<List<ConnectionAdditionalInfoArgs>> additionalInfos;

    /**
     * @return Connection additional information
     * 
     */
    public Optional<Output<List<ConnectionAdditionalInfoArgs>>> additionalInfos() {
        return Optional.ofNullable(this.additionalInfos);
    }

    /**
     * Connection bandwidth in Mbps
     * 
     */
    @Import(name="bandwidth", required=true)
    private Output<Integer> bandwidth;

    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    public Output<Integer> bandwidth() {
        return this.bandwidth;
    }

    /**
     * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Preferences for notifications on connection configuration or status changes
     * 
     */
    @Import(name="notifications", required=true)
    private Output<List<ConnectionNotificationArgs>> notifications;

    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public Output<List<ConnectionNotificationArgs>> notifications() {
        return this.notifications;
    }

    /**
     * Order related to this connection information
     * 
     */
    @Import(name="orders")
    private @Nullable Output<List<ConnectionOrderArgs>> orders;

    /**
     * @return Order related to this connection information
     * 
     */
    public Optional<Output<List<ConnectionOrderArgs>>> orders() {
        return Optional.ofNullable(this.orders);
    }

    /**
     * Project information
     * 
     */
    @Import(name="projects")
    private @Nullable Output<List<ConnectionProjectArgs>> projects;

    /**
     * @return Project information
     * 
     */
    public Optional<Output<List<ConnectionProjectArgs>>> projects() {
        return Optional.ofNullable(this.projects);
    }

    /**
     * Redundancy Information
     * 
     */
    @Import(name="redundancies")
    private @Nullable Output<List<ConnectionRedundancyArgs>> redundancies;

    /**
     * @return Redundancy Information
     * 
     */
    public Optional<Output<List<ConnectionRedundancyArgs>>> redundancies() {
        return Optional.ofNullable(this.redundancies);
    }

    /**
     * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,ConnectionType>> type;

    /**
     * @return Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    public Output<Either<String,ConnectionType>> type() {
        return this.type;
    }

    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    @Import(name="zSides", required=true)
    private Output<List<ConnectionZSideArgs>> zSides;

    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    public Output<List<ConnectionZSideArgs>> zSides() {
        return this.zSides;
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.aSides = $.aSides;
        this.additionalInfos = $.additionalInfos;
        this.bandwidth = $.bandwidth;
        this.name = $.name;
        this.notifications = $.notifications;
        this.orders = $.orders;
        this.projects = $.projects;
        this.redundancies = $.redundancies;
        this.type = $.type;
        this.zSides = $.zSides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aSides Requester or Customer side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder aSides(Output<List<ConnectionASideArgs>> aSides) {
            $.aSides = aSides;
            return this;
        }

        /**
         * @param aSides Requester or Customer side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder aSides(List<ConnectionASideArgs> aSides) {
            return aSides(Output.of(aSides));
        }

        /**
         * @param aSides Requester or Customer side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder aSides(ConnectionASideArgs... aSides) {
            return aSides(List.of(aSides));
        }

        /**
         * @param additionalInfos Connection additional information
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(@Nullable Output<List<ConnectionAdditionalInfoArgs>> additionalInfos) {
            $.additionalInfos = additionalInfos;
            return this;
        }

        /**
         * @param additionalInfos Connection additional information
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(List<ConnectionAdditionalInfoArgs> additionalInfos) {
            return additionalInfos(Output.of(additionalInfos));
        }

        /**
         * @param additionalInfos Connection additional information
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(ConnectionAdditionalInfoArgs... additionalInfos) {
            return additionalInfos(List.of(additionalInfos));
        }

        /**
         * @param bandwidth Connection bandwidth in Mbps
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Connection bandwidth in Mbps
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param name Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications Preferences for notifications on connection configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(Output<List<ConnectionNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications Preferences for notifications on connection configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<ConnectionNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications Preferences for notifications on connection configuration or status changes
         * 
         * @return builder
         * 
         */
        public Builder notifications(ConnectionNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param orders Order related to this connection information
         * 
         * @return builder
         * 
         */
        public Builder orders(@Nullable Output<List<ConnectionOrderArgs>> orders) {
            $.orders = orders;
            return this;
        }

        /**
         * @param orders Order related to this connection information
         * 
         * @return builder
         * 
         */
        public Builder orders(List<ConnectionOrderArgs> orders) {
            return orders(Output.of(orders));
        }

        /**
         * @param orders Order related to this connection information
         * 
         * @return builder
         * 
         */
        public Builder orders(ConnectionOrderArgs... orders) {
            return orders(List.of(orders));
        }

        /**
         * @param projects Project information
         * 
         * @return builder
         * 
         */
        public Builder projects(@Nullable Output<List<ConnectionProjectArgs>> projects) {
            $.projects = projects;
            return this;
        }

        /**
         * @param projects Project information
         * 
         * @return builder
         * 
         */
        public Builder projects(List<ConnectionProjectArgs> projects) {
            return projects(Output.of(projects));
        }

        /**
         * @param projects Project information
         * 
         * @return builder
         * 
         */
        public Builder projects(ConnectionProjectArgs... projects) {
            return projects(List.of(projects));
        }

        /**
         * @param redundancies Redundancy Information
         * 
         * @return builder
         * 
         */
        public Builder redundancies(@Nullable Output<List<ConnectionRedundancyArgs>> redundancies) {
            $.redundancies = redundancies;
            return this;
        }

        /**
         * @param redundancies Redundancy Information
         * 
         * @return builder
         * 
         */
        public Builder redundancies(List<ConnectionRedundancyArgs> redundancies) {
            return redundancies(Output.of(redundancies));
        }

        /**
         * @param redundancies Redundancy Information
         * 
         * @return builder
         * 
         */
        public Builder redundancies(ConnectionRedundancyArgs... redundancies) {
            return redundancies(List.of(redundancies));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,ConnectionType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,ConnectionType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         * 
         * @return builder
         * 
         */
        public Builder type(ConnectionType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param zSides Destination or Provider side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder zSides(Output<List<ConnectionZSideArgs>> zSides) {
            $.zSides = zSides;
            return this;
        }

        /**
         * @param zSides Destination or Provider side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder zSides(List<ConnectionZSideArgs> zSides) {
            return zSides(Output.of(zSides));
        }

        /**
         * @param zSides Destination or Provider side connection configuration object of the multi-segment connection
         * 
         * @return builder
         * 
         */
        public Builder zSides(ConnectionZSideArgs... zSides) {
            return zSides(List.of(zSides));
        }

        public ConnectionArgs build() {
            $.aSides = Objects.requireNonNull($.aSides, "expected parameter 'aSides' to be non-null");
            $.bandwidth = Objects.requireNonNull($.bandwidth, "expected parameter 'bandwidth' to be non-null");
            $.notifications = Objects.requireNonNull($.notifications, "expected parameter 'notifications' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.zSides = Objects.requireNonNull($.zSides, "expected parameter 'zSides' to be non-null");
            return $;
        }
    }

}
