// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.equinix.pulumi.metal.outputs.GetDeviceNetwork;
import com.equinix.pulumi.metal.outputs.GetDevicePort;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeviceResult {
    /**
     * @return The ipv4 private IP assigned to the device
     * 
     */
    private String accessPrivateIpv4;
    /**
     * @return The ipv4 management IP assigned to the device
     * 
     */
    private String accessPublicIpv4;
    /**
     * @return The ipv6 management IP assigned to the device
     * 
     */
    private String accessPublicIpv6;
    private Boolean alwaysPxe;
    /**
     * @return The billing cycle of the device (monthly or hourly)
     * 
     */
    private String billingCycle;
    /**
     * @return Description string for the device
     * 
     */
    private String description;
    /**
     * @return Device ID
     * 
     */
    private String deviceId;
    /**
     * @return The facility where the device is deployed
     * 
     * @deprecated
     * Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
     * 
     */
    @Deprecated /* Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices */
    private String facility;
    /**
     * @return The id of hardware reservation which this device occupies
     * 
     */
    private String hardwareReservationId;
    /**
     * @return The device name
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String ipxeScriptUrl;
    /**
     * @return The metro where the device is deployed
     * 
     */
    private String metro;
    /**
     * @return L2 network type of the device, one oflayer3, hybrid, layer2-individual, layer2-bonded
     * 
     */
    private String networkType;
    /**
     * @return The device&#39;s private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 networks: ublic IPv4 at equinix*metal*device.name.network.0, IPv6 at equinix*metal*device.name.network.1 and private IPv4 at equinix*metal*device.name.network.2. Elastic addresses then stack by type - an assigned public IPv4 will go after the management public IPv4 (to index 1), and will then shift the indices of the IPv6 and private IPv4. Assigned private IPv4 will go after the management private IPv4 (to the end of the network list).
     * 
     */
    private List<GetDeviceNetwork> networks;
    /**
     * @return The operating system running on the device
     * 
     */
    private String operatingSystem;
    /**
     * @return The hardware config of the device
     * 
     */
    private String plan;
    /**
     * @return Ports assigned to the device
     * 
     */
    private List<GetDevicePort> ports;
    /**
     * @return The id of the project in which the devices exists
     * 
     */
    private String projectId;
    /**
     * @return Root password to the server (if still available)
     * 
     */
    private String rootPassword;
    /**
     * @return The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device
     * 
     */
    private String sosHostname;
    /**
     * @return List of IDs of SSH keys deployed in the device, can be both user or project SSH keys
     * 
     */
    private List<String> sshKeyIds;
    /**
     * @return The state of the device
     * 
     */
    private String state;
    private String storage;
    /**
     * @return Tags attached to the device
     * 
     */
    private List<String> tags;

    private GetDeviceResult() {}
    /**
     * @return The ipv4 private IP assigned to the device
     * 
     */
    public String accessPrivateIpv4() {
        return this.accessPrivateIpv4;
    }
    /**
     * @return The ipv4 management IP assigned to the device
     * 
     */
    public String accessPublicIpv4() {
        return this.accessPublicIpv4;
    }
    /**
     * @return The ipv6 management IP assigned to the device
     * 
     */
    public String accessPublicIpv6() {
        return this.accessPublicIpv6;
    }
    public Boolean alwaysPxe() {
        return this.alwaysPxe;
    }
    /**
     * @return The billing cycle of the device (monthly or hourly)
     * 
     */
    public String billingCycle() {
        return this.billingCycle;
    }
    /**
     * @return Description string for the device
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Device ID
     * 
     */
    public String deviceId() {
        return this.deviceId;
    }
    /**
     * @return The facility where the device is deployed
     * 
     * @deprecated
     * Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
     * 
     */
    @Deprecated /* Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices */
    public String facility() {
        return this.facility;
    }
    /**
     * @return The id of hardware reservation which this device occupies
     * 
     */
    public String hardwareReservationId() {
        return this.hardwareReservationId;
    }
    /**
     * @return The device name
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ipxeScriptUrl() {
        return this.ipxeScriptUrl;
    }
    /**
     * @return The metro where the device is deployed
     * 
     */
    public String metro() {
        return this.metro;
    }
    /**
     * @return L2 network type of the device, one oflayer3, hybrid, layer2-individual, layer2-bonded
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The device&#39;s private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 networks: ublic IPv4 at equinix*metal*device.name.network.0, IPv6 at equinix*metal*device.name.network.1 and private IPv4 at equinix*metal*device.name.network.2. Elastic addresses then stack by type - an assigned public IPv4 will go after the management public IPv4 (to index 1), and will then shift the indices of the IPv6 and private IPv4. Assigned private IPv4 will go after the management private IPv4 (to the end of the network list).
     * 
     */
    public List<GetDeviceNetwork> networks() {
        return this.networks;
    }
    /**
     * @return The operating system running on the device
     * 
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }
    /**
     * @return The hardware config of the device
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return Ports assigned to the device
     * 
     */
    public List<GetDevicePort> ports() {
        return this.ports;
    }
    /**
     * @return The id of the project in which the devices exists
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Root password to the server (if still available)
     * 
     */
    public String rootPassword() {
        return this.rootPassword;
    }
    /**
     * @return The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device
     * 
     */
    public String sosHostname() {
        return this.sosHostname;
    }
    /**
     * @return List of IDs of SSH keys deployed in the device, can be both user or project SSH keys
     * 
     */
    public List<String> sshKeyIds() {
        return this.sshKeyIds;
    }
    /**
     * @return The state of the device
     * 
     */
    public String state() {
        return this.state;
    }
    public String storage() {
        return this.storage;
    }
    /**
     * @return Tags attached to the device
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPrivateIpv4;
        private String accessPublicIpv4;
        private String accessPublicIpv6;
        private Boolean alwaysPxe;
        private String billingCycle;
        private String description;
        private String deviceId;
        private String facility;
        private String hardwareReservationId;
        private String hostname;
        private String id;
        private String ipxeScriptUrl;
        private String metro;
        private String networkType;
        private List<GetDeviceNetwork> networks;
        private String operatingSystem;
        private String plan;
        private List<GetDevicePort> ports;
        private String projectId;
        private String rootPassword;
        private String sosHostname;
        private List<String> sshKeyIds;
        private String state;
        private String storage;
        private List<String> tags;
        public Builder() {}
        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPrivateIpv4 = defaults.accessPrivateIpv4;
    	      this.accessPublicIpv4 = defaults.accessPublicIpv4;
    	      this.accessPublicIpv6 = defaults.accessPublicIpv6;
    	      this.alwaysPxe = defaults.alwaysPxe;
    	      this.billingCycle = defaults.billingCycle;
    	      this.description = defaults.description;
    	      this.deviceId = defaults.deviceId;
    	      this.facility = defaults.facility;
    	      this.hardwareReservationId = defaults.hardwareReservationId;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.ipxeScriptUrl = defaults.ipxeScriptUrl;
    	      this.metro = defaults.metro;
    	      this.networkType = defaults.networkType;
    	      this.networks = defaults.networks;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.plan = defaults.plan;
    	      this.ports = defaults.ports;
    	      this.projectId = defaults.projectId;
    	      this.rootPassword = defaults.rootPassword;
    	      this.sosHostname = defaults.sosHostname;
    	      this.sshKeyIds = defaults.sshKeyIds;
    	      this.state = defaults.state;
    	      this.storage = defaults.storage;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessPrivateIpv4(String accessPrivateIpv4) {
            if (accessPrivateIpv4 == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "accessPrivateIpv4");
            }
            this.accessPrivateIpv4 = accessPrivateIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder accessPublicIpv4(String accessPublicIpv4) {
            if (accessPublicIpv4 == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "accessPublicIpv4");
            }
            this.accessPublicIpv4 = accessPublicIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder accessPublicIpv6(String accessPublicIpv6) {
            if (accessPublicIpv6 == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "accessPublicIpv6");
            }
            this.accessPublicIpv6 = accessPublicIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysPxe(Boolean alwaysPxe) {
            if (alwaysPxe == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "alwaysPxe");
            }
            this.alwaysPxe = alwaysPxe;
            return this;
        }
        @CustomType.Setter
        public Builder billingCycle(String billingCycle) {
            if (billingCycle == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "billingCycle");
            }
            this.billingCycle = billingCycle;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceId(String deviceId) {
            if (deviceId == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "deviceId");
            }
            this.deviceId = deviceId;
            return this;
        }
        @CustomType.Setter
        public Builder facility(String facility) {
            if (facility == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "facility");
            }
            this.facility = facility;
            return this;
        }
        @CustomType.Setter
        public Builder hardwareReservationId(String hardwareReservationId) {
            if (hardwareReservationId == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "hardwareReservationId");
            }
            this.hardwareReservationId = hardwareReservationId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipxeScriptUrl(String ipxeScriptUrl) {
            if (ipxeScriptUrl == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "ipxeScriptUrl");
            }
            this.ipxeScriptUrl = ipxeScriptUrl;
            return this;
        }
        @CustomType.Setter
        public Builder metro(String metro) {
            if (metro == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "metro");
            }
            this.metro = metro;
            return this;
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<GetDeviceNetwork> networks) {
            if (networks == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "networks");
            }
            this.networks = networks;
            return this;
        }
        public Builder networks(GetDeviceNetwork... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder operatingSystem(String operatingSystem) {
            if (operatingSystem == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "operatingSystem");
            }
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetDevicePort> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(GetDevicePort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder rootPassword(String rootPassword) {
            if (rootPassword == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "rootPassword");
            }
            this.rootPassword = rootPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sosHostname(String sosHostname) {
            if (sosHostname == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "sosHostname");
            }
            this.sosHostname = sosHostname;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyIds(List<String> sshKeyIds) {
            if (sshKeyIds == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "sshKeyIds");
            }
            this.sshKeyIds = sshKeyIds;
            return this;
        }
        public Builder sshKeyIds(String... sshKeyIds) {
            return sshKeyIds(List.of(sshKeyIds));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storage(String storage) {
            if (storage == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "storage");
            }
            this.storage = storage;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetDeviceResult build() {
            final var _resultValue = new GetDeviceResult();
            _resultValue.accessPrivateIpv4 = accessPrivateIpv4;
            _resultValue.accessPublicIpv4 = accessPublicIpv4;
            _resultValue.accessPublicIpv6 = accessPublicIpv6;
            _resultValue.alwaysPxe = alwaysPxe;
            _resultValue.billingCycle = billingCycle;
            _resultValue.description = description;
            _resultValue.deviceId = deviceId;
            _resultValue.facility = facility;
            _resultValue.hardwareReservationId = hardwareReservationId;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.ipxeScriptUrl = ipxeScriptUrl;
            _resultValue.metro = metro;
            _resultValue.networkType = networkType;
            _resultValue.networks = networks;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.plan = plan;
            _resultValue.ports = ports;
            _resultValue.projectId = projectId;
            _resultValue.rootPassword = rootPassword;
            _resultValue.sosHostname = sosHostname;
            _resultValue.sshKeyIds = sshKeyIds;
            _resultValue.state = state;
            _resultValue.storage = storage;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
