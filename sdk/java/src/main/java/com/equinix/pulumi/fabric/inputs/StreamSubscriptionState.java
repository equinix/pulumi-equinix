// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.StreamSubscriptionChangeLogArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionEventSelectorArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionMetricSelectorArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionSinkArgs;
import com.equinix.pulumi.fabric.inputs.StreamSubscriptionTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final StreamSubscriptionState Empty = new StreamSubscriptionState();

    /**
     * Details of the last change on the stream resource
     * 
     */
    @Import(name="changeLog")
    private @Nullable Output<StreamSubscriptionChangeLogArgs> changeLog;

    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public Optional<Output<StreamSubscriptionChangeLogArgs>> changeLog() {
        return Optional.ofNullable(this.changeLog);
    }

    /**
     * Customer-provided stream subscription description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Customer-provided stream subscription description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Stream subscription enabled status
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Stream subscription enabled status
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Lists of events to be included/excluded on the stream subscription
     * 
     */
    @Import(name="eventSelector")
    private @Nullable Output<StreamSubscriptionEventSelectorArgs> eventSelector;

    /**
     * @return Lists of events to be included/excluded on the stream subscription
     * 
     */
    public Optional<Output<StreamSubscriptionEventSelectorArgs>> eventSelector() {
        return Optional.ofNullable(this.eventSelector);
    }

    /**
     * Equinix assigned URI of the stream subscription resource
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Equinix assigned URI of the stream subscription resource
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Lists of metrics to be included/excluded on the stream subscription
     * 
     */
    @Import(name="metricSelector")
    private @Nullable Output<StreamSubscriptionMetricSelectorArgs> metricSelector;

    /**
     * @return Lists of metrics to be included/excluded on the stream subscription
     * 
     */
    public Optional<Output<StreamSubscriptionMetricSelectorArgs>> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    /**
     * Customer-provided stream subscription name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customer-provided stream subscription name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The details of the subscriber to the Equinix Stream
     * 
     */
    @Import(name="sink")
    private @Nullable Output<StreamSubscriptionSinkArgs> sink;

    /**
     * @return The details of the subscriber to the Equinix Stream
     * 
     */
    public Optional<Output<StreamSubscriptionSinkArgs>> sink() {
        return Optional.ofNullable(this.sink);
    }

    /**
     * Value representing provisioning status for the stream resource
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The uuid of the stream that is the target of the stream subscription
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    /**
     * @return The uuid of the stream that is the target of the stream subscription
     * 
     */
    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamSubscriptionTimeoutsArgs> timeouts;

    public Optional<Output<StreamSubscriptionTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of the stream subscription request
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the stream subscription request
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix assigned unique identifier of the stream subscription resource
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private StreamSubscriptionState() {}

    private StreamSubscriptionState(StreamSubscriptionState $) {
        this.changeLog = $.changeLog;
        this.description = $.description;
        this.enabled = $.enabled;
        this.eventSelector = $.eventSelector;
        this.href = $.href;
        this.metricSelector = $.metricSelector;
        this.name = $.name;
        this.sink = $.sink;
        this.state = $.state;
        this.streamId = $.streamId;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamSubscriptionState $;

        public Builder() {
            $ = new StreamSubscriptionState();
        }

        public Builder(StreamSubscriptionState defaults) {
            $ = new StreamSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeLog Details of the last change on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(@Nullable Output<StreamSubscriptionChangeLogArgs> changeLog) {
            $.changeLog = changeLog;
            return this;
        }

        /**
         * @param changeLog Details of the last change on the stream resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(StreamSubscriptionChangeLogArgs changeLog) {
            return changeLog(Output.of(changeLog));
        }

        /**
         * @param description Customer-provided stream subscription description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Customer-provided stream subscription description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Stream subscription enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Stream subscription enabled status
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventSelector Lists of events to be included/excluded on the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder eventSelector(@Nullable Output<StreamSubscriptionEventSelectorArgs> eventSelector) {
            $.eventSelector = eventSelector;
            return this;
        }

        /**
         * @param eventSelector Lists of events to be included/excluded on the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder eventSelector(StreamSubscriptionEventSelectorArgs eventSelector) {
            return eventSelector(Output.of(eventSelector));
        }

        /**
         * @param href Equinix assigned URI of the stream subscription resource
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Equinix assigned URI of the stream subscription resource
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param metricSelector Lists of metrics to be included/excluded on the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable Output<StreamSubscriptionMetricSelectorArgs> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector Lists of metrics to be included/excluded on the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(StreamSubscriptionMetricSelectorArgs metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        /**
         * @param name Customer-provided stream subscription name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customer-provided stream subscription name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sink The details of the subscriber to the Equinix Stream
         * 
         * @return builder
         * 
         */
        public Builder sink(@Nullable Output<StreamSubscriptionSinkArgs> sink) {
            $.sink = sink;
            return this;
        }

        /**
         * @param sink The details of the subscriber to the Equinix Stream
         * 
         * @return builder
         * 
         */
        public Builder sink(StreamSubscriptionSinkArgs sink) {
            return sink(Output.of(sink));
        }

        /**
         * @param state Value representing provisioning status for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Value representing provisioning status for the stream resource
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamId The uuid of the stream that is the target of the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The uuid of the stream that is the target of the stream subscription
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder timeouts(@Nullable Output<StreamSubscriptionTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamSubscriptionTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of the stream subscription request
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the stream subscription request
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix assigned unique identifier of the stream subscription resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix assigned unique identifier of the stream subscription resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public StreamSubscriptionState build() {
            return $;
        }
    }

}
