// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetRouteAggregationsDataChange;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationsDataChangeLog;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationsDataProject;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRouteAggregationsData {
    /**
     * @return Current state of latest Route Aggregation change
     * 
     */
    private GetRouteAggregationsDataChange change;
    /**
     * @return Details of the last change on the route aggregation resource
     * 
     */
    private GetRouteAggregationsDataChangeLog changeLog;
    /**
     * @return Number of Connections attached to route aggregation
     * 
     */
    private Integer connectionsCount;
    /**
     * @return Customer-provided route aggregation description
     * 
     */
    private String description;
    /**
     * @return Equinix auto generated URI to the route aggregation resource
     * 
     */
    private String href;
    /**
     * @return Customer provided name of the route aggregation
     * 
     */
    private String name;
    /**
     * @return Equinix Project attribute object
     * 
     */
    private GetRouteAggregationsDataProject project;
    /**
     * @return Number of Rules attached to route aggregation
     * 
     */
    private Integer rulesCount;
    /**
     * @return Value representing provisioning status for the route aggregation resource
     * 
     */
    private String state;
    /**
     * @return Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned unique id for the route aggregation resource
     * 
     */
    private String uuid;

    private GetRouteAggregationsData() {}
    /**
     * @return Current state of latest Route Aggregation change
     * 
     */
    public GetRouteAggregationsDataChange change() {
        return this.change;
    }
    /**
     * @return Details of the last change on the route aggregation resource
     * 
     */
    public GetRouteAggregationsDataChangeLog changeLog() {
        return this.changeLog;
    }
    /**
     * @return Number of Connections attached to route aggregation
     * 
     */
    public Integer connectionsCount() {
        return this.connectionsCount;
    }
    /**
     * @return Customer-provided route aggregation description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Equinix auto generated URI to the route aggregation resource
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return Customer provided name of the route aggregation
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Equinix Project attribute object
     * 
     */
    public GetRouteAggregationsDataProject project() {
        return this.project;
    }
    /**
     * @return Number of Rules attached to route aggregation
     * 
     */
    public Integer rulesCount() {
        return this.rulesCount;
    }
    /**
     * @return Value representing provisioning status for the route aggregation resource
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned unique id for the route aggregation resource
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteAggregationsData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetRouteAggregationsDataChange change;
        private GetRouteAggregationsDataChangeLog changeLog;
        private Integer connectionsCount;
        private String description;
        private String href;
        private String name;
        private GetRouteAggregationsDataProject project;
        private Integer rulesCount;
        private String state;
        private String type;
        private String uuid;
        public Builder() {}
        public Builder(GetRouteAggregationsData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.change = defaults.change;
    	      this.changeLog = defaults.changeLog;
    	      this.connectionsCount = defaults.connectionsCount;
    	      this.description = defaults.description;
    	      this.href = defaults.href;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.rulesCount = defaults.rulesCount;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder change(GetRouteAggregationsDataChange change) {
            if (change == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "change");
            }
            this.change = change;
            return this;
        }
        @CustomType.Setter
        public Builder changeLog(GetRouteAggregationsDataChangeLog changeLog) {
            if (changeLog == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "changeLog");
            }
            this.changeLog = changeLog;
            return this;
        }
        @CustomType.Setter
        public Builder connectionsCount(Integer connectionsCount) {
            if (connectionsCount == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "connectionsCount");
            }
            this.connectionsCount = connectionsCount;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(GetRouteAggregationsDataProject project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder rulesCount(Integer rulesCount) {
            if (rulesCount == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "rulesCount");
            }
            this.rulesCount = rulesCount;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetRouteAggregationsData", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetRouteAggregationsData build() {
            final var _resultValue = new GetRouteAggregationsData();
            _resultValue.change = change;
            _resultValue.changeLog = changeLog;
            _resultValue.connectionsCount = connectionsCount;
            _resultValue.description = description;
            _resultValue.href = href;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.rulesCount = rulesCount;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
