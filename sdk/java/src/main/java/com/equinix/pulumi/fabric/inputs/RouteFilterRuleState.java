// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.RouteFilterRuleChangeArgs;
import com.equinix.pulumi.fabric.inputs.RouteFilterRuleChangeLogArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteFilterRuleState extends com.pulumi.resources.ResourceArgs {

    public static final RouteFilterRuleState Empty = new RouteFilterRuleState();

    /**
     * Action that will be taken on IP Addresses matching the rule
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action that will be taken on IP Addresses matching the rule
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    @Import(name="changeLogs")
    private @Nullable Output<List<RouteFilterRuleChangeLogArgs>> changeLogs;

    public Optional<Output<List<RouteFilterRuleChangeLogArgs>>> changeLogs() {
        return Optional.ofNullable(this.changeLogs);
    }

    /**
     * An object with the details of the previous change applied on the Route Filter
     * 
     */
    @Import(name="changes")
    private @Nullable Output<List<RouteFilterRuleChangeArgs>> changes;

    /**
     * @return An object with the details of the previous change applied on the Route Filter
     * 
     */
    public Optional<Output<List<RouteFilterRuleChangeArgs>>> changes() {
        return Optional.ofNullable(this.changes);
    }

    /**
     * Optional description to add to the Route Filter you will be creating
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description to add to the Route Filter you will be creating
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Route filter rules URI
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Route filter rules URI
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Name of the Route Filter
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Route Filter
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * IP Address Prefix to Filter on
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return IP Address Prefix to Filter on
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<String> prefixMatch;

    /**
     * @return Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    public Optional<Output<String>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    /**
     * UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    @Import(name="routeFilterId")
    private @Nullable Output<String> routeFilterId;

    /**
     * @return UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    public Optional<Output<String>> routeFilterId() {
        return Optional.ofNullable(this.routeFilterId);
    }

    /**
     * State of the Route Filter Rule in its lifecycle
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the Route Filter Rule in its lifecycle
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix Assigned ID for Route Filter Rule
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix Assigned ID for Route Filter Rule
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private RouteFilterRuleState() {}

    private RouteFilterRuleState(RouteFilterRuleState $) {
        this.action = $.action;
        this.changeLogs = $.changeLogs;
        this.changes = $.changes;
        this.description = $.description;
        this.href = $.href;
        this.name = $.name;
        this.prefix = $.prefix;
        this.prefixMatch = $.prefixMatch;
        this.routeFilterId = $.routeFilterId;
        this.state = $.state;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteFilterRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteFilterRuleState $;

        public Builder() {
            $ = new RouteFilterRuleState();
        }

        public Builder(RouteFilterRuleState defaults) {
            $ = new RouteFilterRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action that will be taken on IP Addresses matching the rule
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action that will be taken on IP Addresses matching the rule
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder changeLogs(@Nullable Output<List<RouteFilterRuleChangeLogArgs>> changeLogs) {
            $.changeLogs = changeLogs;
            return this;
        }

        public Builder changeLogs(List<RouteFilterRuleChangeLogArgs> changeLogs) {
            return changeLogs(Output.of(changeLogs));
        }

        public Builder changeLogs(RouteFilterRuleChangeLogArgs... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }

        /**
         * @param changes An object with the details of the previous change applied on the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder changes(@Nullable Output<List<RouteFilterRuleChangeArgs>> changes) {
            $.changes = changes;
            return this;
        }

        /**
         * @param changes An object with the details of the previous change applied on the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder changes(List<RouteFilterRuleChangeArgs> changes) {
            return changes(Output.of(changes));
        }

        /**
         * @param changes An object with the details of the previous change applied on the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder changes(RouteFilterRuleChangeArgs... changes) {
            return changes(List.of(changes));
        }

        /**
         * @param description Optional description to add to the Route Filter you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description to add to the Route Filter you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param href Route filter rules URI
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Route filter rules URI
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param name Name of the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param prefix IP Address Prefix to Filter on
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix IP Address Prefix to Filter on
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param prefixMatch Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        /**
         * @param routeFilterId UUID of the Route Filter Policy to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(@Nullable Output<String> routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        /**
         * @param routeFilterId UUID of the Route Filter Policy to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            return routeFilterId(Output.of(routeFilterId));
        }

        /**
         * @param state State of the Route Filter Rule in its lifecycle
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the Route Filter Rule in its lifecycle
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix Assigned ID for Route Filter Rule
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix Assigned ID for Route Filter Rule
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public RouteFilterRuleState build() {
            return $;
        }
    }

}
