// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.inputs.GetCloudRouterArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRouterPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRoutersArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRoutersPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworkArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworkPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworksArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworksPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPortArgs;
import com.equinix.pulumi.fabric.inputs.GetPortPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPortsArgs;
import com.equinix.pulumi.fabric.inputs.GetPortsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRoutingProtocolArgs;
import com.equinix.pulumi.fabric.inputs.GetRoutingProtocolPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfileArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilePlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesPlainArgs;
import com.equinix.pulumi.fabric.outputs.GetCloudRouterResult;
import com.equinix.pulumi.fabric.outputs.GetCloudRoutersResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionsResult;
import com.equinix.pulumi.fabric.outputs.GetNetworkResult;
import com.equinix.pulumi.fabric.outputs.GetNetworksResult;
import com.equinix.pulumi.fabric.outputs.GetPortResult;
import com.equinix.pulumi.fabric.outputs.GetPortsResult;
import com.equinix.pulumi.fabric.outputs.GetRoutingProtocolResult;
import com.equinix.pulumi.fabric.outputs.GetServiceProfileResult;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class FabricFunctions {
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_cloud_router&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.id()));
     *         ctx.export(&#34;name&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.name()));
     *         ctx.export(&#34;accountNumber&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export(&#34;equinixAsn&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.equinixAsn()));
     *         ctx.export(&#34;metroCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export(&#34;metroName&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export(&#34;region&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].region()));
     *         ctx.export(&#34;packageCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.packages()[0].code()));
     *         ctx.export(&#34;projectId&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export(&#34;type&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.type()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudRouterResult> getCloudRouter(GetCloudRouterArgs args) {
        return getCloudRouter(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_cloud_router&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.id()));
     *         ctx.export(&#34;name&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.name()));
     *         ctx.export(&#34;accountNumber&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export(&#34;equinixAsn&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.equinixAsn()));
     *         ctx.export(&#34;metroCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export(&#34;metroName&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export(&#34;region&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].region()));
     *         ctx.export(&#34;packageCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.packages()[0].code()));
     *         ctx.export(&#34;projectId&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export(&#34;type&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.type()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudRouterResult> getCloudRouterPlain(GetCloudRouterPlainArgs args) {
        return getCloudRouterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_cloud_router&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.id()));
     *         ctx.export(&#34;name&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.name()));
     *         ctx.export(&#34;accountNumber&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export(&#34;equinixAsn&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.equinixAsn()));
     *         ctx.export(&#34;metroCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export(&#34;metroName&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export(&#34;region&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].region()));
     *         ctx.export(&#34;packageCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.packages()[0].code()));
     *         ctx.export(&#34;projectId&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export(&#34;type&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.type()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudRouterResult> getCloudRouter(GetCloudRouterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouter:getCloudRouter", TypeShape.of(GetCloudRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_cloud_router&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.id()));
     *         ctx.export(&#34;name&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.name()));
     *         ctx.export(&#34;accountNumber&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export(&#34;equinixAsn&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.equinixAsn()));
     *         ctx.export(&#34;metroCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export(&#34;metroName&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export(&#34;region&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.locations()[0].region()));
     *         ctx.export(&#34;packageCode&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.packages()[0].code()));
     *         ctx.export(&#34;projectId&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export(&#34;type&#34;, cloudRouterDataName.applyValue(getCloudRouterResult -&gt; getCloudRouterResult.type()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudRouterResult> getCloudRouterPlain(GetCloudRouterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getCloudRouter:getCloudRouter", TypeShape.of(GetCloudRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     */
    public static Output<GetCloudRoutersResult> getCloudRouters(GetCloudRoutersArgs args) {
        return getCloudRouters(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     */
    public static CompletableFuture<GetCloudRoutersResult> getCloudRoutersPlain(GetCloudRoutersPlainArgs args) {
        return getCloudRoutersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     */
    public static Output<GetCloudRoutersResult> getCloudRouters(GetCloudRoutersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouters:getCloudRouters", TypeShape.of(GetCloudRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers&gt;
     * 
     */
    public static CompletableFuture<GetCloudRoutersResult> getCloudRoutersPlain(GetCloudRoutersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getCloudRouters:getCloudRouters", TypeShape.of(GetCloudRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_connection&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.id()));
     *         ctx.export(&#34;name&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;accountNumber&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.account().accountNumber()));
     *         ctx.export(&#34;bandwidth&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;projectId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.project().projectId()));
     *         ctx.export(&#34;redundancyGroup&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().group()));
     *         ctx.export(&#34;redundancyPriority&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().priority()));
     *         ctx.export(&#34;state&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.state()));
     *         ctx.export(&#34;type&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.type()));
     *         ctx.export(&#34;accessPointType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export(&#34;accessPointLinkProtocolType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanCTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanSTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export(&#34;accessPointProviderConnectionId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args) {
        return getConnection(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_connection&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.id()));
     *         ctx.export(&#34;name&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;accountNumber&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.account().accountNumber()));
     *         ctx.export(&#34;bandwidth&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;projectId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.project().projectId()));
     *         ctx.export(&#34;redundancyGroup&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().group()));
     *         ctx.export(&#34;redundancyPriority&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().priority()));
     *         ctx.export(&#34;state&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.state()));
     *         ctx.export(&#34;type&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.type()));
     *         ctx.export(&#34;accessPointType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export(&#34;accessPointLinkProtocolType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanCTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanSTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export(&#34;accessPointProviderConnectionId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args) {
        return getConnectionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_connection&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.id()));
     *         ctx.export(&#34;name&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;accountNumber&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.account().accountNumber()));
     *         ctx.export(&#34;bandwidth&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;projectId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.project().projectId()));
     *         ctx.export(&#34;redundancyGroup&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().group()));
     *         ctx.export(&#34;redundancyPriority&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().priority()));
     *         ctx.export(&#34;state&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.state()));
     *         ctx.export(&#34;type&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.type()));
     *         ctx.export(&#34;accessPointType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export(&#34;accessPointLinkProtocolType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanCTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanSTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export(&#34;accessPointProviderConnectionId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_connection&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.id()));
     *         ctx.export(&#34;name&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;accountNumber&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.account().accountNumber()));
     *         ctx.export(&#34;bandwidth&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.bandwidth()));
     *         ctx.export(&#34;projectId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.project().projectId()));
     *         ctx.export(&#34;redundancyGroup&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().group()));
     *         ctx.export(&#34;redundancyPriority&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.redundancy().priority()));
     *         ctx.export(&#34;state&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.state()));
     *         ctx.export(&#34;type&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.type()));
     *         ctx.export(&#34;accessPointType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export(&#34;accessPointLinkProtocolType&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanCTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export(&#34;accessPointLinkProtocolVlanSTag&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export(&#34;accessPointProviderConnectionId&#34;, connectionDataName.applyValue(getConnectionResult -&gt; getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args) {
        return getConnections(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args) {
        return getConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections&gt;
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_network&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.id()));
     *         ctx.export(&#34;name&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.name()));
     *         ctx.export(&#34;scope&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.scope()));
     *         ctx.export(&#34;type&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.type()));
     *         ctx.export(&#34;region&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.locations()[0].region()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args) {
        return getNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_network&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.id()));
     *         ctx.export(&#34;name&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.name()));
     *         ctx.export(&#34;scope&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.scope()));
     *         ctx.export(&#34;type&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.type()));
     *         ctx.export(&#34;region&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.locations()[0].region()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args) {
        return getNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_network&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.id()));
     *         ctx.export(&#34;name&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.name()));
     *         ctx.export(&#34;scope&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.scope()));
     *         ctx.export(&#34;type&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.type()));
     *         ctx.export(&#34;region&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.locations()[0].region()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_network&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.id()));
     *         ctx.export(&#34;name&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.name()));
     *         ctx.export(&#34;scope&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.scope()));
     *         ctx.export(&#34;type&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.type()));
     *         ctx.export(&#34;region&#34;, networkDataName.applyValue(getNetworkResult -&gt; getNetworkResult.locations()[0].region()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args) {
        return getNetworks(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args) {
        return getNetworksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_port&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.id()));
     *         ctx.export(&#34;name&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.name()));
     *         ctx.export(&#34;state&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.state()));
     *         ctx.export(&#34;accountName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.account().accountName()));
     *         ctx.export(&#34;type&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.type()));
     *         ctx.export(&#34;bandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.bandwidth()));
     *         ctx.export(&#34;usedBandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.usedBandwidth()));
     *         ctx.export(&#34;encapsulationType&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.encapsulation().type()));
     *         ctx.export(&#34;ibx&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().ibx()));
     *         ctx.export(&#34;metroCode&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroCode()));
     *         ctx.export(&#34;metroName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroName()));
     *         ctx.export(&#34;region&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().region()));
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args) {
        return getPort(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_port&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.id()));
     *         ctx.export(&#34;name&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.name()));
     *         ctx.export(&#34;state&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.state()));
     *         ctx.export(&#34;accountName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.account().accountName()));
     *         ctx.export(&#34;type&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.type()));
     *         ctx.export(&#34;bandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.bandwidth()));
     *         ctx.export(&#34;usedBandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.usedBandwidth()));
     *         ctx.export(&#34;encapsulationType&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.encapsulation().type()));
     *         ctx.export(&#34;ibx&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().ibx()));
     *         ctx.export(&#34;metroCode&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroCode()));
     *         ctx.export(&#34;metroName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroName()));
     *         ctx.export(&#34;region&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().region()));
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args) {
        return getPortPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_port&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.id()));
     *         ctx.export(&#34;name&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.name()));
     *         ctx.export(&#34;state&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.state()));
     *         ctx.export(&#34;accountName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.account().accountName()));
     *         ctx.export(&#34;type&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.type()));
     *         ctx.export(&#34;bandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.bandwidth()));
     *         ctx.export(&#34;usedBandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.usedBandwidth()));
     *         ctx.export(&#34;encapsulationType&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.encapsulation().type()));
     *         ctx.export(&#34;ibx&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().ibx()));
     *         ctx.export(&#34;metroCode&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroCode()));
     *         ctx.export(&#34;metroName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroName()));
     *         ctx.export(&#34;region&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().region()));
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_port&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.id()));
     *         ctx.export(&#34;name&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.name()));
     *         ctx.export(&#34;state&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.state()));
     *         ctx.export(&#34;accountName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.account().accountName()));
     *         ctx.export(&#34;type&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.type()));
     *         ctx.export(&#34;bandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.bandwidth()));
     *         ctx.export(&#34;usedBandwidth&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.usedBandwidth()));
     *         ctx.export(&#34;encapsulationType&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.encapsulation().type()));
     *         ctx.export(&#34;ibx&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().ibx()));
     *         ctx.export(&#34;metroCode&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroCode()));
     *         ctx.export(&#34;metroName&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().metroName()));
     *         ctx.export(&#34;region&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.location().region()));
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, portDataName.applyValue(getPortResult -&gt; getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name(&#34;&lt;name_of_port||port_prefix&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export(&#34;state&#34;, data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export(&#34;accountName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export(&#34;bandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export(&#34;usedBandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export(&#34;encapsulationType&#34;, data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export(&#34;ibx&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export(&#34;metroCode&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export(&#34;metroName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export(&#34;region&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortsResult> getPorts(GetPortsArgs args) {
        return getPorts(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name(&#34;&lt;name_of_port||port_prefix&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export(&#34;state&#34;, data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export(&#34;accountName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export(&#34;bandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export(&#34;usedBandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export(&#34;encapsulationType&#34;, data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export(&#34;ibx&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export(&#34;metroCode&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export(&#34;metroName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export(&#34;region&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortsResult> getPortsPlain(GetPortsPlainArgs args) {
        return getPortsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name(&#34;&lt;name_of_port||port_prefix&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export(&#34;state&#34;, data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export(&#34;accountName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export(&#34;bandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export(&#34;usedBandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export(&#34;encapsulationType&#34;, data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export(&#34;ibx&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export(&#34;metroCode&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export(&#34;metroName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export(&#34;region&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortsResult> getPorts(GetPortsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPorts:getPorts", TypeShape.of(GetPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name(&#34;&lt;name_of_port||port_prefix&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export(&#34;state&#34;, data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export(&#34;accountName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export(&#34;bandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export(&#34;usedBandwidth&#34;, data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export(&#34;encapsulationType&#34;, data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export(&#34;ibx&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export(&#34;metroCode&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export(&#34;metroName&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export(&#34;region&#34;, data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export(&#34;deviceRedundancyEnabled&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export(&#34;deviceRedundancyPriority&#34;, data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortsResult> getPortsPlain(GetPortsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPorts:getPorts", TypeShape.of(GetPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid(&#34;&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;&#34;)
     *             .uuid(&#34;&lt;uuid_of_routing_protocol&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.id()));
     *         ctx.export(&#34;name&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.name()));
     *         ctx.export(&#34;type&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.type()));
     *         ctx.export(&#34;directIpv4&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export(&#34;directIpv6&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export(&#34;bgpIpv4CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv4EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv4Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export(&#34;bgpIpv6CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv6EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv6Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export(&#34;customerAsn&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoutingProtocolResult> getRoutingProtocol(GetRoutingProtocolArgs args) {
        return getRoutingProtocol(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid(&#34;&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;&#34;)
     *             .uuid(&#34;&lt;uuid_of_routing_protocol&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.id()));
     *         ctx.export(&#34;name&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.name()));
     *         ctx.export(&#34;type&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.type()));
     *         ctx.export(&#34;directIpv4&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export(&#34;directIpv6&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export(&#34;bgpIpv4CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv4EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv4Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export(&#34;bgpIpv6CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv6EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv6Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export(&#34;customerAsn&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoutingProtocolResult> getRoutingProtocolPlain(GetRoutingProtocolPlainArgs args) {
        return getRoutingProtocolPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid(&#34;&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;&#34;)
     *             .uuid(&#34;&lt;uuid_of_routing_protocol&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.id()));
     *         ctx.export(&#34;name&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.name()));
     *         ctx.export(&#34;type&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.type()));
     *         ctx.export(&#34;directIpv4&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export(&#34;directIpv6&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export(&#34;bgpIpv4CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv4EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv4Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export(&#34;bgpIpv6CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv6EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv6Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export(&#34;customerAsn&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoutingProtocolResult> getRoutingProtocol(GetRoutingProtocolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRoutingProtocol:getRoutingProtocol", TypeShape.of(GetRoutingProtocolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid(&#34;&lt;uuid_of_connection_routing_protocol_is_applied_to&gt;&#34;)
     *             .uuid(&#34;&lt;uuid_of_routing_protocol&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.id()));
     *         ctx.export(&#34;name&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.name()));
     *         ctx.export(&#34;type&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.type()));
     *         ctx.export(&#34;directIpv4&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export(&#34;directIpv6&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export(&#34;bgpIpv4CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv4EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv4Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export(&#34;bgpIpv6CustomerPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export(&#34;bgpIpv6EquinixPeerIp&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export(&#34;bgpIpv6Enabled&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export(&#34;customerAsn&#34;, routingProtocolDataName.applyValue(getRoutingProtocolResult -&gt; getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoutingProtocolResult> getRoutingProtocolPlain(GetRoutingProtocolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRoutingProtocol:getRoutingProtocol", TypeShape.of(GetRoutingProtocolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_service_profile&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.id()));
     *         ctx.export(&#34;name&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.name()));
     *         ctx.export(&#34;type&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.type()));
     *         ctx.export(&#34;visibility&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.visibility()));
     *         ctx.export(&#34;orgName&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.account().organizationName()));
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export(&#34;allowRemoteConnections&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export(&#34;supportedBandwidth0&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export(&#34;supportedBandwidth1&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export(&#34;redundandyRequired&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export(&#34;allowOverSubscription&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfileResult> getServiceProfile(GetServiceProfileArgs args) {
        return getServiceProfile(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_service_profile&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.id()));
     *         ctx.export(&#34;name&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.name()));
     *         ctx.export(&#34;type&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.type()));
     *         ctx.export(&#34;visibility&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.visibility()));
     *         ctx.export(&#34;orgName&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.account().organizationName()));
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export(&#34;allowRemoteConnections&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export(&#34;supportedBandwidth0&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export(&#34;supportedBandwidth1&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export(&#34;redundandyRequired&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export(&#34;allowOverSubscription&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfileResult> getServiceProfilePlain(GetServiceProfilePlainArgs args) {
        return getServiceProfilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_service_profile&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.id()));
     *         ctx.export(&#34;name&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.name()));
     *         ctx.export(&#34;type&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.type()));
     *         ctx.export(&#34;visibility&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.visibility()));
     *         ctx.export(&#34;orgName&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.account().organizationName()));
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export(&#34;allowRemoteConnections&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export(&#34;supportedBandwidth0&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export(&#34;supportedBandwidth1&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export(&#34;redundandyRequired&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export(&#34;allowOverSubscription&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfileResult> getServiceProfile(GetServiceProfileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfile:getServiceProfile", TypeShape.of(GetServiceProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid(&#34;&lt;uuid_of_service_profile&gt;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.id()));
     *         ctx.export(&#34;name&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.name()));
     *         ctx.export(&#34;type&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.type()));
     *         ctx.export(&#34;visibility&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.visibility()));
     *         ctx.export(&#34;orgName&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.account().organizationName()));
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export(&#34;allowRemoteConnections&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export(&#34;supportedBandwidth0&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export(&#34;supportedBandwidth1&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export(&#34;redundandyRequired&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export(&#34;allowOverSubscription&#34;, serviceProfileDataName.applyValue(getServiceProfileResult -&gt; getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfileResult> getServiceProfilePlain(GetServiceProfilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceProfile:getServiceProfile", TypeShape.of(GetServiceProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles() {
        return getServiceProfiles(GetServiceProfilesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfilesResult> getServiceProfilesPlain() {
        return getServiceProfilesPlain(GetServiceProfilesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles(GetServiceProfilesArgs args) {
        return getServiceProfiles(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfilesResult> getServiceProfilesPlain(GetServiceProfilesPlainArgs args) {
        return getServiceProfilesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles(GetServiceProfilesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfiles:getServiceProfiles", TypeShape.of(GetServiceProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: &lt;https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm&gt;
     * * API: &lt;https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles&gt;
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()
     *             .filter(GetServiceProfilesFilterArgs.builder()
     *                 .property(&#34;/name&#34;)
     *                 .operator(&#34;=&#34;)
     *                 .values(&#34;&lt;list_of_profiles_to_return&gt;&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;id&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].id());
     *         ctx.export(&#34;name&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].name());
     *         ctx.export(&#34;type&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].type());
     *         ctx.export(&#34;visibility&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].visibility());
     *         ctx.export(&#34;orgName&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].account()[0].organization_name());
     *         ctx.export(&#34;accessPointTypeConfigsType&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].type());
     *         ctx.export(&#34;allowRemoteConnections&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].allow_remote_connections());
     *         ctx.export(&#34;supportedBandwidth0&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[0]);
     *         ctx.export(&#34;supportedBandwidth1&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].supported_bandwidths()[1]);
     *         ctx.export(&#34;redundandyRequired&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].connection_redundancy_required());
     *         ctx.export(&#34;allowOverSubscription&#34;, data.equinix_fabric_service_profile().service_profiles_data_name().data()[0].access_point_type_configs()[0].api_config()[0].allow_over_subscription());
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfilesResult> getServiceProfilesPlain(GetServiceProfilesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceProfiles:getServiceProfiles", TypeShape.of(GetServiceProfilesResult.class), args, Utilities.withVersion(options));
    }
}
