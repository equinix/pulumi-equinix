// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.inputs.GetCloudRouterArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRouterPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRoutersArgs;
import com.equinix.pulumi.fabric.inputs.GetCloudRoutersPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteAggregationArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteAggregationPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteAggregationsArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteAggregationsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteFilterArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteFilterPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteFiltersArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionRouteFiltersPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetMarketplaceSubscriptionArgs;
import com.equinix.pulumi.fabric.inputs.GetMarketplaceSubscriptionPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetMetroArgs;
import com.equinix.pulumi.fabric.inputs.GetMetroPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetMetrosArgs;
import com.equinix.pulumi.fabric.inputs.GetMetrosPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworkArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworkPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworksArgs;
import com.equinix.pulumi.fabric.inputs.GetNetworksPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPortArgs;
import com.equinix.pulumi.fabric.inputs.GetPortPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPortsArgs;
import com.equinix.pulumi.fabric.inputs.GetPortsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPrecisionTimeServiceArgs;
import com.equinix.pulumi.fabric.inputs.GetPrecisionTimeServicePlainArgs;
import com.equinix.pulumi.fabric.inputs.GetPrecisionTimeServicesArgs;
import com.equinix.pulumi.fabric.inputs.GetPrecisionTimeServicesPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationRuleArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationRulePlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationRulesArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationRulesPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationsArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteAggregationsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterRuleArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterRulePlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterRulesArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFilterRulesPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFiltersArgs;
import com.equinix.pulumi.fabric.inputs.GetRouteFiltersPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetRoutingProtocolArgs;
import com.equinix.pulumi.fabric.inputs.GetRoutingProtocolPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfileArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilePlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceProfilesPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceTokenArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceTokenPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceTokensArgs;
import com.equinix.pulumi.fabric.inputs.GetServiceTokensPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentsArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamAttachmentsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamSubscriptionArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamSubscriptionPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamSubscriptionsArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamSubscriptionsPlainArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamsArgs;
import com.equinix.pulumi.fabric.inputs.GetStreamsPlainArgs;
import com.equinix.pulumi.fabric.outputs.GetCloudRouterResult;
import com.equinix.pulumi.fabric.outputs.GetCloudRoutersResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionRouteAggregationResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionRouteAggregationsResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionRouteFilterResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionRouteFiltersResult;
import com.equinix.pulumi.fabric.outputs.GetConnectionsResult;
import com.equinix.pulumi.fabric.outputs.GetMarketplaceSubscriptionResult;
import com.equinix.pulumi.fabric.outputs.GetMetroResult;
import com.equinix.pulumi.fabric.outputs.GetMetrosResult;
import com.equinix.pulumi.fabric.outputs.GetNetworkResult;
import com.equinix.pulumi.fabric.outputs.GetNetworksResult;
import com.equinix.pulumi.fabric.outputs.GetPortResult;
import com.equinix.pulumi.fabric.outputs.GetPortsResult;
import com.equinix.pulumi.fabric.outputs.GetPrecisionTimeServiceResult;
import com.equinix.pulumi.fabric.outputs.GetPrecisionTimeServicesResult;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationResult;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationRuleResult;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationRulesResult;
import com.equinix.pulumi.fabric.outputs.GetRouteAggregationsResult;
import com.equinix.pulumi.fabric.outputs.GetRouteFilterResult;
import com.equinix.pulumi.fabric.outputs.GetRouteFilterRuleResult;
import com.equinix.pulumi.fabric.outputs.GetRouteFilterRulesResult;
import com.equinix.pulumi.fabric.outputs.GetRouteFiltersResult;
import com.equinix.pulumi.fabric.outputs.GetRoutingProtocolResult;
import com.equinix.pulumi.fabric.outputs.GetServiceProfileResult;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesResult;
import com.equinix.pulumi.fabric.outputs.GetServiceTokenResult;
import com.equinix.pulumi.fabric.outputs.GetServiceTokensResult;
import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentResult;
import com.equinix.pulumi.fabric.outputs.GetStreamAttachmentsResult;
import com.equinix.pulumi.fabric.outputs.GetStreamResult;
import com.equinix.pulumi.fabric.outputs.GetStreamSubscriptionResult;
import com.equinix.pulumi.fabric.outputs.GetStreamSubscriptionsResult;
import com.equinix.pulumi.fabric.outputs.GetStreamsResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class FabricFunctions {
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid("<uuid_of_cloud_router>")
     *             .build());
     * 
     *         ctx.export("id", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.id()));
     *         ctx.export("name", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.name()));
     *         ctx.export("accountNumber", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export("equinixAsn", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.equinixAsn()));
     *         ctx.export("metroCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export("metroName", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export("region", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].region()));
     *         ctx.export("packageCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.packages()[0].code()));
     *         ctx.export("projectId", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export("type", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudRouterResult> getCloudRouter(GetCloudRouterArgs args) {
        return getCloudRouter(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid("<uuid_of_cloud_router>")
     *             .build());
     * 
     *         ctx.export("id", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.id()));
     *         ctx.export("name", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.name()));
     *         ctx.export("accountNumber", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export("equinixAsn", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.equinixAsn()));
     *         ctx.export("metroCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export("metroName", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export("region", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].region()));
     *         ctx.export("packageCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.packages()[0].code()));
     *         ctx.export("projectId", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export("type", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudRouterResult> getCloudRouterPlain(GetCloudRouterPlainArgs args) {
        return getCloudRouterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid("<uuid_of_cloud_router>")
     *             .build());
     * 
     *         ctx.export("id", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.id()));
     *         ctx.export("name", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.name()));
     *         ctx.export("accountNumber", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export("equinixAsn", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.equinixAsn()));
     *         ctx.export("metroCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export("metroName", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export("region", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].region()));
     *         ctx.export("packageCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.packages()[0].code()));
     *         ctx.export("projectId", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export("type", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudRouterResult> getCloudRouter(GetCloudRouterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouter:getCloudRouter", TypeShape.of(GetCloudRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid("<uuid_of_cloud_router>")
     *             .build());
     * 
     *         ctx.export("id", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.id()));
     *         ctx.export("name", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.name()));
     *         ctx.export("accountNumber", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export("equinixAsn", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.equinixAsn()));
     *         ctx.export("metroCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export("metroName", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export("region", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].region()));
     *         ctx.export("packageCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.packages()[0].code()));
     *         ctx.export("projectId", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export("type", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudRouterResult> getCloudRouter(GetCloudRouterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouter:getCloudRouter", TypeShape.of(GetCloudRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()
     *             .uuid("<uuid_of_cloud_router>")
     *             .build());
     * 
     *         ctx.export("id", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.id()));
     *         ctx.export("name", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.name()));
     *         ctx.export("accountNumber", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.accounts()[0].accountNumber()));
     *         ctx.export("equinixAsn", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.equinixAsn()));
     *         ctx.export("metroCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroCode()));
     *         ctx.export("metroName", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].metroName()));
     *         ctx.export("region", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.locations()[0].region()));
     *         ctx.export("packageCode", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.packages()[0].code()));
     *         ctx.export("projectId", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.projects()[0].projectId()));
     *         ctx.export("type", cloudRouterDataName.applyValue(getCloudRouterResult -> getCloudRouterResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudRouterResult> getCloudRouterPlain(GetCloudRouterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getCloudRouter:getCloudRouter", TypeShape.of(GetCloudRouterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     */
    public static Output<GetCloudRoutersResult> getCloudRouters(GetCloudRoutersArgs args) {
        return getCloudRouters(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     */
    public static CompletableFuture<GetCloudRoutersResult> getCloudRoutersPlain(GetCloudRoutersPlainArgs args) {
        return getCloudRoutersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     */
    public static Output<GetCloudRoutersResult> getCloudRouters(GetCloudRoutersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouters:getCloudRouters", TypeShape.of(GetCloudRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     */
    public static Output<GetCloudRoutersResult> getCloudRouters(GetCloudRoutersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getCloudRouters:getCloudRouters", TypeShape.of(GetCloudRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Routers matching custom search criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers
     * 
     */
    public static CompletableFuture<GetCloudRoutersResult> getCloudRoutersPlain(GetCloudRoutersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getCloudRouters:getCloudRouters", TypeShape.of(GetCloudRoutersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid("<uuid_of_connection>")
     *             .build());
     * 
     *         ctx.export("id", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.id()));
     *         ctx.export("name", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("accountNumber", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.account().accountNumber()));
     *         ctx.export("bandwidth", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("projectId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.project().projectId()));
     *         ctx.export("redundancyGroup", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().group()));
     *         ctx.export("redundancyPriority", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().priority()));
     *         ctx.export("state", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.state()));
     *         ctx.export("type", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.type()));
     *         ctx.export("accessPointType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export("accessPointLinkProtocolType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export("accessPointLinkProtocolVlanTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export("accessPointLinkProtocolVlanCTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export("accessPointLinkProtocolVlanSTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export("accessPointProviderConnectionId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args) {
        return getConnection(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid("<uuid_of_connection>")
     *             .build());
     * 
     *         ctx.export("id", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.id()));
     *         ctx.export("name", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("accountNumber", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.account().accountNumber()));
     *         ctx.export("bandwidth", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("projectId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.project().projectId()));
     *         ctx.export("redundancyGroup", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().group()));
     *         ctx.export("redundancyPriority", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().priority()));
     *         ctx.export("state", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.state()));
     *         ctx.export("type", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.type()));
     *         ctx.export("accessPointType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export("accessPointLinkProtocolType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export("accessPointLinkProtocolVlanTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export("accessPointLinkProtocolVlanCTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export("accessPointLinkProtocolVlanSTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export("accessPointProviderConnectionId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args) {
        return getConnectionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid("<uuid_of_connection>")
     *             .build());
     * 
     *         ctx.export("id", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.id()));
     *         ctx.export("name", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("accountNumber", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.account().accountNumber()));
     *         ctx.export("bandwidth", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("projectId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.project().projectId()));
     *         ctx.export("redundancyGroup", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().group()));
     *         ctx.export("redundancyPriority", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().priority()));
     *         ctx.export("state", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.state()));
     *         ctx.export("type", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.type()));
     *         ctx.export("accessPointType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export("accessPointLinkProtocolType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export("accessPointLinkProtocolVlanTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export("accessPointLinkProtocolVlanCTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export("accessPointLinkProtocolVlanSTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export("accessPointProviderConnectionId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid("<uuid_of_connection>")
     *             .build());
     * 
     *         ctx.export("id", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.id()));
     *         ctx.export("name", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("accountNumber", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.account().accountNumber()));
     *         ctx.export("bandwidth", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("projectId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.project().projectId()));
     *         ctx.export("redundancyGroup", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().group()));
     *         ctx.export("redundancyPriority", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().priority()));
     *         ctx.export("state", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.state()));
     *         ctx.export("type", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.type()));
     *         ctx.export("accessPointType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export("accessPointLinkProtocolType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export("accessPointLinkProtocolVlanTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export("accessPointLinkProtocolVlanCTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export("accessPointLinkProtocolVlanSTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export("accessPointProviderConnectionId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionResult> getConnection(GetConnectionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()
     *             .uuid("<uuid_of_connection>")
     *             .build());
     * 
     *         ctx.export("id", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.id()));
     *         ctx.export("name", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("accountNumber", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.account().accountNumber()));
     *         ctx.export("bandwidth", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.bandwidth()));
     *         ctx.export("projectId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.project().projectId()));
     *         ctx.export("redundancyGroup", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().group()));
     *         ctx.export("redundancyPriority", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.redundancy().priority()));
     *         ctx.export("state", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.state()));
     *         ctx.export("type", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.type()));
     *         ctx.export("accessPointType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().type()));
     *         ctx.export("accessPointLinkProtocolType", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().type()));
     *         ctx.export("accessPointLinkProtocolVlanTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanTag()));
     *         ctx.export("accessPointLinkProtocolVlanCTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanCTag()));
     *         ctx.export("accessPointLinkProtocolVlanSTag", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().linkProtocol().vlanSTag()));
     *         ctx.export("accessPointProviderConnectionId", connectionDataName.applyValue(getConnectionResult -> getConnectionResult.aSide().accessPoint().providerConnectionId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionResult> getConnectionPlain(GetConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnection:getConnection", TypeShape.of(GetConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteAggregation(GetConnectionRouteAggregationArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .connectionId("<connection_id>")
     *             .build());
     * 
     *         ctx.export("connectionRouteAggregationId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.id()));
     *         ctx.export("connectionRouteAggregationConnectionId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.connectionId()));
     *         ctx.export("connectionRouteAggregationType", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.type()));
     *         ctx.export("connectionRouteAggregationAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationResult> getConnectionRouteAggregation(GetConnectionRouteAggregationArgs args) {
        return getConnectionRouteAggregation(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteAggregation(GetConnectionRouteAggregationArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .connectionId("<connection_id>")
     *             .build());
     * 
     *         ctx.export("connectionRouteAggregationId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.id()));
     *         ctx.export("connectionRouteAggregationConnectionId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.connectionId()));
     *         ctx.export("connectionRouteAggregationType", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.type()));
     *         ctx.export("connectionRouteAggregationAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteAggregationResult> getConnectionRouteAggregationPlain(GetConnectionRouteAggregationPlainArgs args) {
        return getConnectionRouteAggregationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteAggregation(GetConnectionRouteAggregationArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .connectionId("<connection_id>")
     *             .build());
     * 
     *         ctx.export("connectionRouteAggregationId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.id()));
     *         ctx.export("connectionRouteAggregationConnectionId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.connectionId()));
     *         ctx.export("connectionRouteAggregationType", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.type()));
     *         ctx.export("connectionRouteAggregationAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationResult> getConnectionRouteAggregation(GetConnectionRouteAggregationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", TypeShape.of(GetConnectionRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteAggregation(GetConnectionRouteAggregationArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .connectionId("<connection_id>")
     *             .build());
     * 
     *         ctx.export("connectionRouteAggregationId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.id()));
     *         ctx.export("connectionRouteAggregationConnectionId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.connectionId()));
     *         ctx.export("connectionRouteAggregationType", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.type()));
     *         ctx.export("connectionRouteAggregationAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationResult> getConnectionRouteAggregation(GetConnectionRouteAggregationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", TypeShape.of(GetConnectionRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteAggregation(GetConnectionRouteAggregationArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .connectionId("<connection_id>")
     *             .build());
     * 
     *         ctx.export("connectionRouteAggregationId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.id()));
     *         ctx.export("connectionRouteAggregationConnectionId", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.connectionId()));
     *         ctx.export("connectionRouteAggregationType", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.type()));
     *         ctx.export("connectionRouteAggregationAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteAggregationResult -> getConnectionRouteAggregationResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteAggregationResult> getConnectionRouteAggregationPlain(GetConnectionRouteAggregationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", TypeShape.of(GetConnectionRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicies = FabricFunctions.getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs.builder()
     *             .connectionId("connection_id")
     *             .build());
     * 
     *         ctx.export("connectionFirstRouteAggregationUuid", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].uuid()));
     *         ctx.export("connectionFirstRouteAggregationType", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].type()));
     *         ctx.export("connectionFirstRouteAggregationAttachmentStatus", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationsResult> getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs args) {
        return getConnectionRouteAggregations(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicies = FabricFunctions.getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs.builder()
     *             .connectionId("connection_id")
     *             .build());
     * 
     *         ctx.export("connectionFirstRouteAggregationUuid", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].uuid()));
     *         ctx.export("connectionFirstRouteAggregationType", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].type()));
     *         ctx.export("connectionFirstRouteAggregationAttachmentStatus", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteAggregationsResult> getConnectionRouteAggregationsPlain(GetConnectionRouteAggregationsPlainArgs args) {
        return getConnectionRouteAggregationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicies = FabricFunctions.getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs.builder()
     *             .connectionId("connection_id")
     *             .build());
     * 
     *         ctx.export("connectionFirstRouteAggregationUuid", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].uuid()));
     *         ctx.export("connectionFirstRouteAggregationType", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].type()));
     *         ctx.export("connectionFirstRouteAggregationAttachmentStatus", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationsResult> getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteAggregations:getConnectionRouteAggregations", TypeShape.of(GetConnectionRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicies = FabricFunctions.getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs.builder()
     *             .connectionId("connection_id")
     *             .build());
     * 
     *         ctx.export("connectionFirstRouteAggregationUuid", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].uuid()));
     *         ctx.export("connectionFirstRouteAggregationType", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].type()));
     *         ctx.export("connectionFirstRouteAggregationAttachmentStatus", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteAggregationsResult> getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteAggregations:getConnectionRouteAggregations", TypeShape.of(GetConnectionRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteAggregationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicies = FabricFunctions.getConnectionRouteAggregations(GetConnectionRouteAggregationsArgs.builder()
     *             .connectionId("connection_id")
     *             .build());
     * 
     *         ctx.export("connectionFirstRouteAggregationUuid", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].uuid()));
     *         ctx.export("connectionFirstRouteAggregationType", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].type()));
     *         ctx.export("connectionFirstRouteAggregationAttachmentStatus", attachedPolicies.applyValue(getConnectionRouteAggregationsResult -> getConnectionRouteAggregationsResult.datas()[0].attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteAggregationsResult> getConnectionRouteAggregationsPlain(GetConnectionRouteAggregationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnectionRouteAggregations:getConnectionRouteAggregations", TypeShape.of(GetConnectionRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteFilter(GetConnectionRouteFilterArgs.builder()
     *             .connectionId("<connection_uuid>")
     *             .routeFilterId("<route_filter_uuid>")
     *             .build());
     * 
     *         ctx.export("connectionRouteFilterId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.id()));
     *         ctx.export("connectionRouteFilterConnectionId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.connectionId()));
     *         ctx.export("connectionRouteFilterDirection", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.direction()));
     *         ctx.export("connectionRouteFilterType", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.type()));
     *         ctx.export("connectionRouteFilterAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteFilterResult> getConnectionRouteFilter(GetConnectionRouteFilterArgs args) {
        return getConnectionRouteFilter(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteFilter(GetConnectionRouteFilterArgs.builder()
     *             .connectionId("<connection_uuid>")
     *             .routeFilterId("<route_filter_uuid>")
     *             .build());
     * 
     *         ctx.export("connectionRouteFilterId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.id()));
     *         ctx.export("connectionRouteFilterConnectionId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.connectionId()));
     *         ctx.export("connectionRouteFilterDirection", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.direction()));
     *         ctx.export("connectionRouteFilterType", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.type()));
     *         ctx.export("connectionRouteFilterAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteFilterResult> getConnectionRouteFilterPlain(GetConnectionRouteFilterPlainArgs args) {
        return getConnectionRouteFilterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteFilter(GetConnectionRouteFilterArgs.builder()
     *             .connectionId("<connection_uuid>")
     *             .routeFilterId("<route_filter_uuid>")
     *             .build());
     * 
     *         ctx.export("connectionRouteFilterId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.id()));
     *         ctx.export("connectionRouteFilterConnectionId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.connectionId()));
     *         ctx.export("connectionRouteFilterDirection", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.direction()));
     *         ctx.export("connectionRouteFilterType", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.type()));
     *         ctx.export("connectionRouteFilterAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteFilterResult> getConnectionRouteFilter(GetConnectionRouteFilterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", TypeShape.of(GetConnectionRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteFilter(GetConnectionRouteFilterArgs.builder()
     *             .connectionId("<connection_uuid>")
     *             .routeFilterId("<route_filter_uuid>")
     *             .build());
     * 
     *         ctx.export("connectionRouteFilterId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.id()));
     *         ctx.export("connectionRouteFilterConnectionId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.connectionId()));
     *         ctx.export("connectionRouteFilterDirection", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.direction()));
     *         ctx.export("connectionRouteFilterType", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.type()));
     *         ctx.export("connectionRouteFilterAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConnectionRouteFilterResult> getConnectionRouteFilter(GetConnectionRouteFilterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", TypeShape.of(GetConnectionRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetConnectionRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var attachedPolicy = FabricFunctions.getConnectionRouteFilter(GetConnectionRouteFilterArgs.builder()
     *             .connectionId("<connection_uuid>")
     *             .routeFilterId("<route_filter_uuid>")
     *             .build());
     * 
     *         ctx.export("connectionRouteFilterId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.id()));
     *         ctx.export("connectionRouteFilterConnectionId", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.connectionId()));
     *         ctx.export("connectionRouteFilterDirection", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.direction()));
     *         ctx.export("connectionRouteFilterType", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.type()));
     *         ctx.export("connectionRouteFilterAttachmentStatus", attachedPolicy.applyValue(getConnectionRouteFilterResult -> getConnectionRouteFilterResult.attachmentStatus()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConnectionRouteFilterResult> getConnectionRouteFilterPlain(GetConnectionRouteFilterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", TypeShape.of(GetConnectionRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     */
    public static Output<GetConnectionRouteFiltersResult> getConnectionRouteFilters(GetConnectionRouteFiltersArgs args) {
        return getConnectionRouteFilters(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     */
    public static CompletableFuture<GetConnectionRouteFiltersResult> getConnectionRouteFiltersPlain(GetConnectionRouteFiltersPlainArgs args) {
        return getConnectionRouteFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     */
    public static Output<GetConnectionRouteFiltersResult> getConnectionRouteFilters(GetConnectionRouteFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteFilters:getConnectionRouteFilters", TypeShape.of(GetConnectionRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     */
    public static Output<GetConnectionRouteFiltersResult> getConnectionRouteFilters(GetConnectionRouteFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnectionRouteFilters:getConnectionRouteFilters", TypeShape.of(GetConnectionRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     */
    public static CompletableFuture<GetConnectionRouteFiltersResult> getConnectionRouteFiltersPlain(GetConnectionRouteFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnectionRouteFilters:getConnectionRouteFilters", TypeShape.of(GetConnectionRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args) {
        return getConnections(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args) {
        return getConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     */
    public static Output<GetConnectionsResult> getConnections(GetConnectionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
     * 
     */
    public static CompletableFuture<GetConnectionsResult> getConnectionsPlain(GetConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getConnections:getConnections", TypeShape.of(GetConnectionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMarketplaceSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subscription-test = FabricFunctions.getMarketplaceSubscription(GetMarketplaceSubscriptionArgs.builder()
     *             .uuid("<uuid_of_marketplace_subscription>")
     *             .build());
     * 
     *         ctx.export("id", subscription_test.id());
     *         ctx.export("status", subscription_test.status());
     *         ctx.export("marketplace", subscription_test.marketplace());
     *         ctx.export("offerType", subscription_test.offerType());
     *         ctx.export("isAutoRenew", subscription_test.isAutoRenew());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMarketplaceSubscriptionResult> getMarketplaceSubscription(GetMarketplaceSubscriptionArgs args) {
        return getMarketplaceSubscription(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMarketplaceSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subscription-test = FabricFunctions.getMarketplaceSubscription(GetMarketplaceSubscriptionArgs.builder()
     *             .uuid("<uuid_of_marketplace_subscription>")
     *             .build());
     * 
     *         ctx.export("id", subscription_test.id());
     *         ctx.export("status", subscription_test.status());
     *         ctx.export("marketplace", subscription_test.marketplace());
     *         ctx.export("offerType", subscription_test.offerType());
     *         ctx.export("isAutoRenew", subscription_test.isAutoRenew());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMarketplaceSubscriptionResult> getMarketplaceSubscriptionPlain(GetMarketplaceSubscriptionPlainArgs args) {
        return getMarketplaceSubscriptionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMarketplaceSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subscription-test = FabricFunctions.getMarketplaceSubscription(GetMarketplaceSubscriptionArgs.builder()
     *             .uuid("<uuid_of_marketplace_subscription>")
     *             .build());
     * 
     *         ctx.export("id", subscription_test.id());
     *         ctx.export("status", subscription_test.status());
     *         ctx.export("marketplace", subscription_test.marketplace());
     *         ctx.export("offerType", subscription_test.offerType());
     *         ctx.export("isAutoRenew", subscription_test.isAutoRenew());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMarketplaceSubscriptionResult> getMarketplaceSubscription(GetMarketplaceSubscriptionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMarketplaceSubscription:getMarketplaceSubscription", TypeShape.of(GetMarketplaceSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMarketplaceSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subscription-test = FabricFunctions.getMarketplaceSubscription(GetMarketplaceSubscriptionArgs.builder()
     *             .uuid("<uuid_of_marketplace_subscription>")
     *             .build());
     * 
     *         ctx.export("id", subscription_test.id());
     *         ctx.export("status", subscription_test.status());
     *         ctx.export("marketplace", subscription_test.marketplace());
     *         ctx.export("offerType", subscription_test.offerType());
     *         ctx.export("isAutoRenew", subscription_test.isAutoRenew());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMarketplaceSubscriptionResult> getMarketplaceSubscription(GetMarketplaceSubscriptionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMarketplaceSubscription:getMarketplaceSubscription", TypeShape.of(GetMarketplaceSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMarketplaceSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var subscription-test = FabricFunctions.getMarketplaceSubscription(GetMarketplaceSubscriptionArgs.builder()
     *             .uuid("<uuid_of_marketplace_subscription>")
     *             .build());
     * 
     *         ctx.export("id", subscription_test.id());
     *         ctx.export("status", subscription_test.status());
     *         ctx.export("marketplace", subscription_test.marketplace());
     *         ctx.export("offerType", subscription_test.offerType());
     *         ctx.export("isAutoRenew", subscription_test.isAutoRenew());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMarketplaceSubscriptionResult> getMarketplaceSubscriptionPlain(GetMarketplaceSubscriptionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getMarketplaceSubscription:getMarketplaceSubscription", TypeShape.of(GetMarketplaceSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMetroArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var metro = FabricFunctions.getMetro(GetMetroArgs.builder()
     *             .metroCode("<metro_code>")
     *             .build());
     * 
     *         ctx.export("id", metro.applyValue(getMetroResult -> getMetroResult.id()));
     *         ctx.export("type", metro.applyValue(getMetroResult -> getMetroResult.type()));
     *         ctx.export("metroCode", metro.applyValue(getMetroResult -> getMetroResult.metroCode()));
     *         ctx.export("region", metro.applyValue(getMetroResult -> getMetroResult.region()));
     *         ctx.export("name", metro.applyValue(getMetroResult -> getMetroResult.name()));
     *         ctx.export("equinixAsn", metro.applyValue(getMetroResult -> getMetroResult.equinixAsn()));
     *         ctx.export("localVcBandwidthMax", metro.applyValue(getMetroResult -> getMetroResult.localVcBandwidthMax()));
     *         ctx.export("geoCoordinates", metro.applyValue(getMetroResult -> getMetroResult.geoCoordinates()));
     *         ctx.export("connectedMetros", metro.applyValue(getMetroResult -> getMetroResult.connectedMetros()));
     *         ctx.export("geoScopes", metro.applyValue(getMetroResult -> getMetroResult.geoScopes()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMetroResult> getMetro(GetMetroArgs args) {
        return getMetro(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMetroArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var metro = FabricFunctions.getMetro(GetMetroArgs.builder()
     *             .metroCode("<metro_code>")
     *             .build());
     * 
     *         ctx.export("id", metro.applyValue(getMetroResult -> getMetroResult.id()));
     *         ctx.export("type", metro.applyValue(getMetroResult -> getMetroResult.type()));
     *         ctx.export("metroCode", metro.applyValue(getMetroResult -> getMetroResult.metroCode()));
     *         ctx.export("region", metro.applyValue(getMetroResult -> getMetroResult.region()));
     *         ctx.export("name", metro.applyValue(getMetroResult -> getMetroResult.name()));
     *         ctx.export("equinixAsn", metro.applyValue(getMetroResult -> getMetroResult.equinixAsn()));
     *         ctx.export("localVcBandwidthMax", metro.applyValue(getMetroResult -> getMetroResult.localVcBandwidthMax()));
     *         ctx.export("geoCoordinates", metro.applyValue(getMetroResult -> getMetroResult.geoCoordinates()));
     *         ctx.export("connectedMetros", metro.applyValue(getMetroResult -> getMetroResult.connectedMetros()));
     *         ctx.export("geoScopes", metro.applyValue(getMetroResult -> getMetroResult.geoScopes()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMetroResult> getMetroPlain(GetMetroPlainArgs args) {
        return getMetroPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMetroArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var metro = FabricFunctions.getMetro(GetMetroArgs.builder()
     *             .metroCode("<metro_code>")
     *             .build());
     * 
     *         ctx.export("id", metro.applyValue(getMetroResult -> getMetroResult.id()));
     *         ctx.export("type", metro.applyValue(getMetroResult -> getMetroResult.type()));
     *         ctx.export("metroCode", metro.applyValue(getMetroResult -> getMetroResult.metroCode()));
     *         ctx.export("region", metro.applyValue(getMetroResult -> getMetroResult.region()));
     *         ctx.export("name", metro.applyValue(getMetroResult -> getMetroResult.name()));
     *         ctx.export("equinixAsn", metro.applyValue(getMetroResult -> getMetroResult.equinixAsn()));
     *         ctx.export("localVcBandwidthMax", metro.applyValue(getMetroResult -> getMetroResult.localVcBandwidthMax()));
     *         ctx.export("geoCoordinates", metro.applyValue(getMetroResult -> getMetroResult.geoCoordinates()));
     *         ctx.export("connectedMetros", metro.applyValue(getMetroResult -> getMetroResult.connectedMetros()));
     *         ctx.export("geoScopes", metro.applyValue(getMetroResult -> getMetroResult.geoScopes()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMetroResult> getMetro(GetMetroArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMetro:getMetro", TypeShape.of(GetMetroResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMetroArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var metro = FabricFunctions.getMetro(GetMetroArgs.builder()
     *             .metroCode("<metro_code>")
     *             .build());
     * 
     *         ctx.export("id", metro.applyValue(getMetroResult -> getMetroResult.id()));
     *         ctx.export("type", metro.applyValue(getMetroResult -> getMetroResult.type()));
     *         ctx.export("metroCode", metro.applyValue(getMetroResult -> getMetroResult.metroCode()));
     *         ctx.export("region", metro.applyValue(getMetroResult -> getMetroResult.region()));
     *         ctx.export("name", metro.applyValue(getMetroResult -> getMetroResult.name()));
     *         ctx.export("equinixAsn", metro.applyValue(getMetroResult -> getMetroResult.equinixAsn()));
     *         ctx.export("localVcBandwidthMax", metro.applyValue(getMetroResult -> getMetroResult.localVcBandwidthMax()));
     *         ctx.export("geoCoordinates", metro.applyValue(getMetroResult -> getMetroResult.geoCoordinates()));
     *         ctx.export("connectedMetros", metro.applyValue(getMetroResult -> getMetroResult.connectedMetros()));
     *         ctx.export("geoScopes", metro.applyValue(getMetroResult -> getMetroResult.geoScopes()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMetroResult> getMetro(GetMetroArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMetro:getMetro", TypeShape.of(GetMetroResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetMetroArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var metro = FabricFunctions.getMetro(GetMetroArgs.builder()
     *             .metroCode("<metro_code>")
     *             .build());
     * 
     *         ctx.export("id", metro.applyValue(getMetroResult -> getMetroResult.id()));
     *         ctx.export("type", metro.applyValue(getMetroResult -> getMetroResult.type()));
     *         ctx.export("metroCode", metro.applyValue(getMetroResult -> getMetroResult.metroCode()));
     *         ctx.export("region", metro.applyValue(getMetroResult -> getMetroResult.region()));
     *         ctx.export("name", metro.applyValue(getMetroResult -> getMetroResult.name()));
     *         ctx.export("equinixAsn", metro.applyValue(getMetroResult -> getMetroResult.equinixAsn()));
     *         ctx.export("localVcBandwidthMax", metro.applyValue(getMetroResult -> getMetroResult.localVcBandwidthMax()));
     *         ctx.export("geoCoordinates", metro.applyValue(getMetroResult -> getMetroResult.geoCoordinates()));
     *         ctx.export("connectedMetros", metro.applyValue(getMetroResult -> getMetroResult.connectedMetros()));
     *         ctx.export("geoScopes", metro.applyValue(getMetroResult -> getMetroResult.geoScopes()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMetroResult> getMetroPlain(GetMetroPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getMetro:getMetro", TypeShape.of(GetMetroResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetMetrosResult> getMetros(GetMetrosArgs args) {
        return getMetros(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetMetrosResult> getMetrosPlain(GetMetrosPlainArgs args) {
        return getMetrosPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetMetrosResult> getMetros(GetMetrosArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMetros:getMetros", TypeShape.of(GetMetrosResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetMetrosResult> getMetros(GetMetrosArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getMetros:getMetros", TypeShape.of(GetMetrosResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetMetrosResult> getMetrosPlain(GetMetrosPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getMetros:getMetros", TypeShape.of(GetMetrosResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid("<uuid_of_network>")
     *             .build());
     * 
     *         ctx.export("id", networkDataName.applyValue(getNetworkResult -> getNetworkResult.id()));
     *         ctx.export("name", networkDataName.applyValue(getNetworkResult -> getNetworkResult.name()));
     *         ctx.export("scope", networkDataName.applyValue(getNetworkResult -> getNetworkResult.scope()));
     *         ctx.export("type", networkDataName.applyValue(getNetworkResult -> getNetworkResult.type()));
     *         ctx.export("region", networkDataName.applyValue(getNetworkResult -> getNetworkResult.locations()[0].region()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args) {
        return getNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid("<uuid_of_network>")
     *             .build());
     * 
     *         ctx.export("id", networkDataName.applyValue(getNetworkResult -> getNetworkResult.id()));
     *         ctx.export("name", networkDataName.applyValue(getNetworkResult -> getNetworkResult.name()));
     *         ctx.export("scope", networkDataName.applyValue(getNetworkResult -> getNetworkResult.scope()));
     *         ctx.export("type", networkDataName.applyValue(getNetworkResult -> getNetworkResult.type()));
     *         ctx.export("region", networkDataName.applyValue(getNetworkResult -> getNetworkResult.locations()[0].region()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args) {
        return getNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid("<uuid_of_network>")
     *             .build());
     * 
     *         ctx.export("id", networkDataName.applyValue(getNetworkResult -> getNetworkResult.id()));
     *         ctx.export("name", networkDataName.applyValue(getNetworkResult -> getNetworkResult.name()));
     *         ctx.export("scope", networkDataName.applyValue(getNetworkResult -> getNetworkResult.scope()));
     *         ctx.export("type", networkDataName.applyValue(getNetworkResult -> getNetworkResult.type()));
     *         ctx.export("region", networkDataName.applyValue(getNetworkResult -> getNetworkResult.locations()[0].region()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid("<uuid_of_network>")
     *             .build());
     * 
     *         ctx.export("id", networkDataName.applyValue(getNetworkResult -> getNetworkResult.id()));
     *         ctx.export("name", networkDataName.applyValue(getNetworkResult -> getNetworkResult.name()));
     *         ctx.export("scope", networkDataName.applyValue(getNetworkResult -> getNetworkResult.scope()));
     *         ctx.export("type", networkDataName.applyValue(getNetworkResult -> getNetworkResult.type()));
     *         ctx.export("region", networkDataName.applyValue(getNetworkResult -> getNetworkResult.locations()[0].region()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()
     *             .uuid("<uuid_of_network>")
     *             .build());
     * 
     *         ctx.export("id", networkDataName.applyValue(getNetworkResult -> getNetworkResult.id()));
     *         ctx.export("name", networkDataName.applyValue(getNetworkResult -> getNetworkResult.name()));
     *         ctx.export("scope", networkDataName.applyValue(getNetworkResult -> getNetworkResult.scope()));
     *         ctx.export("type", networkDataName.applyValue(getNetworkResult -> getNetworkResult.type()));
     *         ctx.export("region", networkDataName.applyValue(getNetworkResult -> getNetworkResult.locations()[0].region()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args) {
        return getNetworks(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args) {
        return getNetworksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid("<uuid_of_port>")
     *             .build());
     * 
     *         ctx.export("id", portDataName.applyValue(getPortResult -> getPortResult.id()));
     *         ctx.export("name", portDataName.applyValue(getPortResult -> getPortResult.name()));
     *         ctx.export("state", portDataName.applyValue(getPortResult -> getPortResult.state()));
     *         ctx.export("accountName", portDataName.applyValue(getPortResult -> getPortResult.account().accountName()));
     *         ctx.export("type", portDataName.applyValue(getPortResult -> getPortResult.type()));
     *         ctx.export("bandwidth", portDataName.applyValue(getPortResult -> getPortResult.bandwidth()));
     *         ctx.export("usedBandwidth", portDataName.applyValue(getPortResult -> getPortResult.usedBandwidth()));
     *         ctx.export("encapsulationType", portDataName.applyValue(getPortResult -> getPortResult.encapsulation().type()));
     *         ctx.export("ibx", portDataName.applyValue(getPortResult -> getPortResult.location().ibx()));
     *         ctx.export("metroCode", portDataName.applyValue(getPortResult -> getPortResult.location().metroCode()));
     *         ctx.export("metroName", portDataName.applyValue(getPortResult -> getPortResult.location().metroName()));
     *         ctx.export("region", portDataName.applyValue(getPortResult -> getPortResult.location().region()));
     *         ctx.export("deviceRedundancyEnabled", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export("deviceRedundancyPriority", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args) {
        return getPort(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid("<uuid_of_port>")
     *             .build());
     * 
     *         ctx.export("id", portDataName.applyValue(getPortResult -> getPortResult.id()));
     *         ctx.export("name", portDataName.applyValue(getPortResult -> getPortResult.name()));
     *         ctx.export("state", portDataName.applyValue(getPortResult -> getPortResult.state()));
     *         ctx.export("accountName", portDataName.applyValue(getPortResult -> getPortResult.account().accountName()));
     *         ctx.export("type", portDataName.applyValue(getPortResult -> getPortResult.type()));
     *         ctx.export("bandwidth", portDataName.applyValue(getPortResult -> getPortResult.bandwidth()));
     *         ctx.export("usedBandwidth", portDataName.applyValue(getPortResult -> getPortResult.usedBandwidth()));
     *         ctx.export("encapsulationType", portDataName.applyValue(getPortResult -> getPortResult.encapsulation().type()));
     *         ctx.export("ibx", portDataName.applyValue(getPortResult -> getPortResult.location().ibx()));
     *         ctx.export("metroCode", portDataName.applyValue(getPortResult -> getPortResult.location().metroCode()));
     *         ctx.export("metroName", portDataName.applyValue(getPortResult -> getPortResult.location().metroName()));
     *         ctx.export("region", portDataName.applyValue(getPortResult -> getPortResult.location().region()));
     *         ctx.export("deviceRedundancyEnabled", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export("deviceRedundancyPriority", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args) {
        return getPortPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid("<uuid_of_port>")
     *             .build());
     * 
     *         ctx.export("id", portDataName.applyValue(getPortResult -> getPortResult.id()));
     *         ctx.export("name", portDataName.applyValue(getPortResult -> getPortResult.name()));
     *         ctx.export("state", portDataName.applyValue(getPortResult -> getPortResult.state()));
     *         ctx.export("accountName", portDataName.applyValue(getPortResult -> getPortResult.account().accountName()));
     *         ctx.export("type", portDataName.applyValue(getPortResult -> getPortResult.type()));
     *         ctx.export("bandwidth", portDataName.applyValue(getPortResult -> getPortResult.bandwidth()));
     *         ctx.export("usedBandwidth", portDataName.applyValue(getPortResult -> getPortResult.usedBandwidth()));
     *         ctx.export("encapsulationType", portDataName.applyValue(getPortResult -> getPortResult.encapsulation().type()));
     *         ctx.export("ibx", portDataName.applyValue(getPortResult -> getPortResult.location().ibx()));
     *         ctx.export("metroCode", portDataName.applyValue(getPortResult -> getPortResult.location().metroCode()));
     *         ctx.export("metroName", portDataName.applyValue(getPortResult -> getPortResult.location().metroName()));
     *         ctx.export("region", portDataName.applyValue(getPortResult -> getPortResult.location().region()));
     *         ctx.export("deviceRedundancyEnabled", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export("deviceRedundancyPriority", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid("<uuid_of_port>")
     *             .build());
     * 
     *         ctx.export("id", portDataName.applyValue(getPortResult -> getPortResult.id()));
     *         ctx.export("name", portDataName.applyValue(getPortResult -> getPortResult.name()));
     *         ctx.export("state", portDataName.applyValue(getPortResult -> getPortResult.state()));
     *         ctx.export("accountName", portDataName.applyValue(getPortResult -> getPortResult.account().accountName()));
     *         ctx.export("type", portDataName.applyValue(getPortResult -> getPortResult.type()));
     *         ctx.export("bandwidth", portDataName.applyValue(getPortResult -> getPortResult.bandwidth()));
     *         ctx.export("usedBandwidth", portDataName.applyValue(getPortResult -> getPortResult.usedBandwidth()));
     *         ctx.export("encapsulationType", portDataName.applyValue(getPortResult -> getPortResult.encapsulation().type()));
     *         ctx.export("ibx", portDataName.applyValue(getPortResult -> getPortResult.location().ibx()));
     *         ctx.export("metroCode", portDataName.applyValue(getPortResult -> getPortResult.location().metroCode()));
     *         ctx.export("metroName", portDataName.applyValue(getPortResult -> getPortResult.location().metroName()));
     *         ctx.export("region", portDataName.applyValue(getPortResult -> getPortResult.location().region()));
     *         ctx.export("deviceRedundancyEnabled", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export("deviceRedundancyPriority", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortResult> getPort(GetPortArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by uuid
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()
     *             .uuid("<uuid_of_port>")
     *             .build());
     * 
     *         ctx.export("id", portDataName.applyValue(getPortResult -> getPortResult.id()));
     *         ctx.export("name", portDataName.applyValue(getPortResult -> getPortResult.name()));
     *         ctx.export("state", portDataName.applyValue(getPortResult -> getPortResult.state()));
     *         ctx.export("accountName", portDataName.applyValue(getPortResult -> getPortResult.account().accountName()));
     *         ctx.export("type", portDataName.applyValue(getPortResult -> getPortResult.type()));
     *         ctx.export("bandwidth", portDataName.applyValue(getPortResult -> getPortResult.bandwidth()));
     *         ctx.export("usedBandwidth", portDataName.applyValue(getPortResult -> getPortResult.usedBandwidth()));
     *         ctx.export("encapsulationType", portDataName.applyValue(getPortResult -> getPortResult.encapsulation().type()));
     *         ctx.export("ibx", portDataName.applyValue(getPortResult -> getPortResult.location().ibx()));
     *         ctx.export("metroCode", portDataName.applyValue(getPortResult -> getPortResult.location().metroCode()));
     *         ctx.export("metroName", portDataName.applyValue(getPortResult -> getPortResult.location().metroName()));
     *         ctx.export("region", portDataName.applyValue(getPortResult -> getPortResult.location().region()));
     *         ctx.export("deviceRedundancyEnabled", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].enabled()));
     *         ctx.export("deviceRedundancyPriority", portDataName.applyValue(getPortResult -> getPortResult.device().redundancies()[0].priority()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortResult> getPortPlain(GetPortPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPort:getPort", TypeShape.of(GetPortResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name("<name_of_port||port_prefix>")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("id", data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export("name", data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export("state", data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export("accountName", data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export("type", data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export("bandwidth", data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export("usedBandwidth", data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export("encapsulationType", data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export("ibx", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export("metroCode", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export("metroName", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export("region", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export("deviceRedundancyEnabled", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export("deviceRedundancyPriority", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortsResult> getPorts(GetPortsArgs args) {
        return getPorts(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name("<name_of_port||port_prefix>")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("id", data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export("name", data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export("state", data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export("accountName", data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export("type", data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export("bandwidth", data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export("usedBandwidth", data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export("encapsulationType", data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export("ibx", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export("metroCode", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export("metroName", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export("region", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export("deviceRedundancyEnabled", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export("deviceRedundancyPriority", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortsResult> getPortsPlain(GetPortsPlainArgs args) {
        return getPortsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name("<name_of_port||port_prefix>")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("id", data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export("name", data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export("state", data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export("accountName", data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export("type", data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export("bandwidth", data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export("usedBandwidth", data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export("encapsulationType", data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export("ibx", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export("metroCode", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export("metroName", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export("region", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export("deviceRedundancyEnabled", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export("deviceRedundancyPriority", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortsResult> getPorts(GetPortsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPorts:getPorts", TypeShape.of(GetPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name("<name_of_port||port_prefix>")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("id", data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export("name", data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export("state", data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export("accountName", data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export("type", data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export("bandwidth", data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export("usedBandwidth", data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export("encapsulationType", data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export("ibx", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export("metroCode", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export("metroName", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export("region", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export("deviceRedundancyEnabled", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export("deviceRedundancyPriority", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPortsResult> getPorts(GetPortsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPorts:getPorts", TypeShape.of(GetPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch port by name
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPortsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()
     *             .filter(GetPortsFilterArgs.builder()
     *                 .name("<name_of_port||port_prefix>")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("id", data.equinix_fabric_port().ports_data_name().data()[0].id());
     *         ctx.export("name", data.equinix_fabric_port().ports_data_name().data()[0].name());
     *         ctx.export("state", data.equinix_fabric_port().ports_data_name().data()[0].state());
     *         ctx.export("accountName", data.equinix_fabric_port().ports_data_name().data()[0].account()[0].account_name());
     *         ctx.export("type", data.equinix_fabric_port().ports_data_name().data()[0].type());
     *         ctx.export("bandwidth", data.equinix_fabric_port().ports_data_name().data()[0].bandwidth());
     *         ctx.export("usedBandwidth", data.equinix_fabric_port().ports_data_name().data()[0].used_bandwidth());
     *         ctx.export("encapsulationType", data.equinix_fabric_port().ports_data_name().data()[0].encapsulation()[0].type());
     *         ctx.export("ibx", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].ibx());
     *         ctx.export("metroCode", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_code());
     *         ctx.export("metroName", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].metro_name());
     *         ctx.export("region", data.equinix_fabric_port().ports_data_name().data()[0].location()[0].region());
     *         ctx.export("deviceRedundancyEnabled", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].enabled());
     *         ctx.export("deviceRedundancyPriority", data.equinix_fabric_port().ports_data_name().data()[0].device()[0].redundancy()[0].priority());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPortsResult> getPortsPlain(GetPortsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPorts:getPorts", TypeShape.of(GetPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPrecisionTimeServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ept-test = FabricFunctions.getPrecisionTimeService(GetPrecisionTimeServiceArgs.builder()
     *             .eptServiceId("<ept_service_id")
     *             .build());
     * 
     *         ctx.export("eptServiceId", ept_test.id());
     *         ctx.export("eptServiceName", ept_test.name());
     *         ctx.export("eptServiceState", ept_test.state());
     *         ctx.export("eptServiceType", ept_test.type());
     *         ctx.export("eptServiceIpv4", ept_test.ipv4());
     *         ctx.export("eptServiceConnection", equinix_fabric_precision_time_service.ptp().connections());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrecisionTimeServiceResult> getPrecisionTimeService(GetPrecisionTimeServiceArgs args) {
        return getPrecisionTimeService(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPrecisionTimeServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ept-test = FabricFunctions.getPrecisionTimeService(GetPrecisionTimeServiceArgs.builder()
     *             .eptServiceId("<ept_service_id")
     *             .build());
     * 
     *         ctx.export("eptServiceId", ept_test.id());
     *         ctx.export("eptServiceName", ept_test.name());
     *         ctx.export("eptServiceState", ept_test.state());
     *         ctx.export("eptServiceType", ept_test.type());
     *         ctx.export("eptServiceIpv4", ept_test.ipv4());
     *         ctx.export("eptServiceConnection", equinix_fabric_precision_time_service.ptp().connections());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrecisionTimeServiceResult> getPrecisionTimeServicePlain(GetPrecisionTimeServicePlainArgs args) {
        return getPrecisionTimeServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPrecisionTimeServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ept-test = FabricFunctions.getPrecisionTimeService(GetPrecisionTimeServiceArgs.builder()
     *             .eptServiceId("<ept_service_id")
     *             .build());
     * 
     *         ctx.export("eptServiceId", ept_test.id());
     *         ctx.export("eptServiceName", ept_test.name());
     *         ctx.export("eptServiceState", ept_test.state());
     *         ctx.export("eptServiceType", ept_test.type());
     *         ctx.export("eptServiceIpv4", ept_test.ipv4());
     *         ctx.export("eptServiceConnection", equinix_fabric_precision_time_service.ptp().connections());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrecisionTimeServiceResult> getPrecisionTimeService(GetPrecisionTimeServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", TypeShape.of(GetPrecisionTimeServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPrecisionTimeServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ept-test = FabricFunctions.getPrecisionTimeService(GetPrecisionTimeServiceArgs.builder()
     *             .eptServiceId("<ept_service_id")
     *             .build());
     * 
     *         ctx.export("eptServiceId", ept_test.id());
     *         ctx.export("eptServiceName", ept_test.name());
     *         ctx.export("eptServiceState", ept_test.state());
     *         ctx.export("eptServiceType", ept_test.type());
     *         ctx.export("eptServiceIpv4", ept_test.ipv4());
     *         ctx.export("eptServiceConnection", equinix_fabric_precision_time_service.ptp().connections());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrecisionTimeServiceResult> getPrecisionTimeService(GetPrecisionTimeServiceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", TypeShape.of(GetPrecisionTimeServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetPrecisionTimeServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ept-test = FabricFunctions.getPrecisionTimeService(GetPrecisionTimeServiceArgs.builder()
     *             .eptServiceId("<ept_service_id")
     *             .build());
     * 
     *         ctx.export("eptServiceId", ept_test.id());
     *         ctx.export("eptServiceName", ept_test.name());
     *         ctx.export("eptServiceState", ept_test.state());
     *         ctx.export("eptServiceType", ept_test.type());
     *         ctx.export("eptServiceIpv4", ept_test.ipv4());
     *         ctx.export("eptServiceConnection", equinix_fabric_precision_time_service.ptp().connections());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrecisionTimeServiceResult> getPrecisionTimeServicePlain(GetPrecisionTimeServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPrecisionTimeService:getPrecisionTimeService", TypeShape.of(GetPrecisionTimeServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static Output<GetPrecisionTimeServicesResult> getPrecisionTimeServices() {
        return getPrecisionTimeServices(GetPrecisionTimeServicesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static CompletableFuture<GetPrecisionTimeServicesResult> getPrecisionTimeServicesPlain() {
        return getPrecisionTimeServicesPlain(GetPrecisionTimeServicesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static Output<GetPrecisionTimeServicesResult> getPrecisionTimeServices(GetPrecisionTimeServicesArgs args) {
        return getPrecisionTimeServices(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static CompletableFuture<GetPrecisionTimeServicesResult> getPrecisionTimeServicesPlain(GetPrecisionTimeServicesPlainArgs args) {
        return getPrecisionTimeServicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static Output<GetPrecisionTimeServicesResult> getPrecisionTimeServices(GetPrecisionTimeServicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPrecisionTimeServices:getPrecisionTimeServices", TypeShape.of(GetPrecisionTimeServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static Output<GetPrecisionTimeServicesResult> getPrecisionTimeServices(GetPrecisionTimeServicesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getPrecisionTimeServices:getPrecisionTimeServices", TypeShape.of(GetPrecisionTimeServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
     * Additional Documentation:
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm
     * 
     */
    public static CompletableFuture<GetPrecisionTimeServicesResult> getPrecisionTimeServicesPlain(GetPrecisionTimeServicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getPrecisionTimeServices:getPrecisionTimeServices", TypeShape.of(GetPrecisionTimeServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregation(GetRouteAggregationArgs.builder()
     *             .uuid("<uuid_of_route_aggregation>")
     *             .build());
     * 
     *         ctx.export("id", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.id()));
     *         ctx.export("type", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.type()));
     *         ctx.export("state", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.state()));
     *         ctx.export("connectionsCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.connectionsCount()));
     *         ctx.export("rulesCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationResult> getRouteAggregation(GetRouteAggregationArgs args) {
        return getRouteAggregation(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregation(GetRouteAggregationArgs.builder()
     *             .uuid("<uuid_of_route_aggregation>")
     *             .build());
     * 
     *         ctx.export("id", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.id()));
     *         ctx.export("type", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.type()));
     *         ctx.export("state", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.state()));
     *         ctx.export("connectionsCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.connectionsCount()));
     *         ctx.export("rulesCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationResult> getRouteAggregationPlain(GetRouteAggregationPlainArgs args) {
        return getRouteAggregationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregation(GetRouteAggregationArgs.builder()
     *             .uuid("<uuid_of_route_aggregation>")
     *             .build());
     * 
     *         ctx.export("id", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.id()));
     *         ctx.export("type", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.type()));
     *         ctx.export("state", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.state()));
     *         ctx.export("connectionsCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.connectionsCount()));
     *         ctx.export("rulesCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationResult> getRouteAggregation(GetRouteAggregationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregation:getRouteAggregation", TypeShape.of(GetRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregation(GetRouteAggregationArgs.builder()
     *             .uuid("<uuid_of_route_aggregation>")
     *             .build());
     * 
     *         ctx.export("id", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.id()));
     *         ctx.export("type", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.type()));
     *         ctx.export("state", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.state()));
     *         ctx.export("connectionsCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.connectionsCount()));
     *         ctx.export("rulesCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationResult> getRouteAggregation(GetRouteAggregationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregation:getRouteAggregation", TypeShape.of(GetRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregation(GetRouteAggregationArgs.builder()
     *             .uuid("<uuid_of_route_aggregation>")
     *             .build());
     * 
     *         ctx.export("id", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.id()));
     *         ctx.export("type", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.type()));
     *         ctx.export("state", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.state()));
     *         ctx.export("connectionsCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.connectionsCount()));
     *         ctx.export("rulesCount", raPolicy.applyValue(getRouteAggregationResult -> getRouteAggregationResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationResult> getRouteAggregationPlain(GetRouteAggregationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteAggregation:getRouteAggregation", TypeShape.of(GetRouteAggregationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRule = FabricFunctions.getRouteAggregationRule(GetRouteAggregationRuleArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .routeAggregationRuleId("<route_aggregation_rule_id>")
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.name()));
     *         ctx.export("routeAggregationRuleDescription", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.description()));
     *         ctx.export("routeAggregationRuleType", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.type()));
     *         ctx.export("routeAggregationRulePrefix", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.prefix()));
     *         ctx.export("routeAggregationRuleState", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRuleResult> getRouteAggregationRule(GetRouteAggregationRuleArgs args) {
        return getRouteAggregationRule(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRule = FabricFunctions.getRouteAggregationRule(GetRouteAggregationRuleArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .routeAggregationRuleId("<route_aggregation_rule_id>")
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.name()));
     *         ctx.export("routeAggregationRuleDescription", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.description()));
     *         ctx.export("routeAggregationRuleType", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.type()));
     *         ctx.export("routeAggregationRulePrefix", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.prefix()));
     *         ctx.export("routeAggregationRuleState", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationRuleResult> getRouteAggregationRulePlain(GetRouteAggregationRulePlainArgs args) {
        return getRouteAggregationRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRule = FabricFunctions.getRouteAggregationRule(GetRouteAggregationRuleArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .routeAggregationRuleId("<route_aggregation_rule_id>")
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.name()));
     *         ctx.export("routeAggregationRuleDescription", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.description()));
     *         ctx.export("routeAggregationRuleType", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.type()));
     *         ctx.export("routeAggregationRulePrefix", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.prefix()));
     *         ctx.export("routeAggregationRuleState", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRuleResult> getRouteAggregationRule(GetRouteAggregationRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregationRule:getRouteAggregationRule", TypeShape.of(GetRouteAggregationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRule = FabricFunctions.getRouteAggregationRule(GetRouteAggregationRuleArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .routeAggregationRuleId("<route_aggregation_rule_id>")
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.name()));
     *         ctx.export("routeAggregationRuleDescription", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.description()));
     *         ctx.export("routeAggregationRuleType", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.type()));
     *         ctx.export("routeAggregationRulePrefix", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.prefix()));
     *         ctx.export("routeAggregationRuleState", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRuleResult> getRouteAggregationRule(GetRouteAggregationRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregationRule:getRouteAggregationRule", TypeShape.of(GetRouteAggregationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRule = FabricFunctions.getRouteAggregationRule(GetRouteAggregationRuleArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .routeAggregationRuleId("<route_aggregation_rule_id>")
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.name()));
     *         ctx.export("routeAggregationRuleDescription", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.description()));
     *         ctx.export("routeAggregationRuleType", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.type()));
     *         ctx.export("routeAggregationRulePrefix", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.prefix()));
     *         ctx.export("routeAggregationRuleState", raRule.applyValue(getRouteAggregationRuleResult -> getRouteAggregationRuleResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationRuleResult> getRouteAggregationRulePlain(GetRouteAggregationRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteAggregationRule:getRouteAggregationRule", TypeShape.of(GetRouteAggregationRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRules = FabricFunctions.getRouteAggregationRules(GetRouteAggregationRulesArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .pagination(GetRouteAggregationRulesPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].name()));
     *         ctx.export("routeAggregationRuleDescription", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].description()));
     *         ctx.export("routeAggregationRulePrefix", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].prefix()));
     *         ctx.export("routeAggregationRuleState", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRulesResult> getRouteAggregationRules(GetRouteAggregationRulesArgs args) {
        return getRouteAggregationRules(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRules = FabricFunctions.getRouteAggregationRules(GetRouteAggregationRulesArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .pagination(GetRouteAggregationRulesPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].name()));
     *         ctx.export("routeAggregationRuleDescription", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].description()));
     *         ctx.export("routeAggregationRulePrefix", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].prefix()));
     *         ctx.export("routeAggregationRuleState", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationRulesResult> getRouteAggregationRulesPlain(GetRouteAggregationRulesPlainArgs args) {
        return getRouteAggregationRulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRules = FabricFunctions.getRouteAggregationRules(GetRouteAggregationRulesArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .pagination(GetRouteAggregationRulesPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].name()));
     *         ctx.export("routeAggregationRuleDescription", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].description()));
     *         ctx.export("routeAggregationRulePrefix", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].prefix()));
     *         ctx.export("routeAggregationRuleState", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRulesResult> getRouteAggregationRules(GetRouteAggregationRulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", TypeShape.of(GetRouteAggregationRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRules = FabricFunctions.getRouteAggregationRules(GetRouteAggregationRulesArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .pagination(GetRouteAggregationRulesPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].name()));
     *         ctx.export("routeAggregationRuleDescription", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].description()));
     *         ctx.export("routeAggregationRulePrefix", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].prefix()));
     *         ctx.export("routeAggregationRuleState", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationRulesResult> getRouteAggregationRules(GetRouteAggregationRulesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", TypeShape.of(GetRouteAggregationRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
     * Additional Documentation:
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationRulesPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raRules = FabricFunctions.getRouteAggregationRules(GetRouteAggregationRulesArgs.builder()
     *             .routeAggregationId("<route_aggregation_id>")
     *             .pagination(GetRouteAggregationRulesPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("routeAggregationRuleName", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].name()));
     *         ctx.export("routeAggregationRuleDescription", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].description()));
     *         ctx.export("routeAggregationRulePrefix", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].prefix()));
     *         ctx.export("routeAggregationRuleState", raRules.applyValue(getRouteAggregationRulesResult -> getRouteAggregationRulesResult.datas()[0].state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationRulesResult> getRouteAggregationRulesPlain(GetRouteAggregationRulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteAggregationRules:getRouteAggregationRules", TypeShape.of(GetRouteAggregationRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsFilterArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregations(GetRouteAggregationsArgs.builder()
     *             .filter(GetRouteAggregationsFilterArgs.builder()
     *                 .property("/project/projectId")
     *                 .operator("=")
     *                 .values("<route_aggregation_project_id>")
     *                 .build())
     *             .pagination(GetRouteAggregationsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRouteAggregationName", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].name()));
     *         ctx.export("firstRouteAggregationDescription", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].description()));
     *         ctx.export("firstRouteAggregationConnectionsCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].connectionsCount()));
     *         ctx.export("firstRouteAggregationRulesCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationsResult> getRouteAggregations(GetRouteAggregationsArgs args) {
        return getRouteAggregations(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsFilterArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregations(GetRouteAggregationsArgs.builder()
     *             .filter(GetRouteAggregationsFilterArgs.builder()
     *                 .property("/project/projectId")
     *                 .operator("=")
     *                 .values("<route_aggregation_project_id>")
     *                 .build())
     *             .pagination(GetRouteAggregationsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRouteAggregationName", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].name()));
     *         ctx.export("firstRouteAggregationDescription", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].description()));
     *         ctx.export("firstRouteAggregationConnectionsCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].connectionsCount()));
     *         ctx.export("firstRouteAggregationRulesCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationsResult> getRouteAggregationsPlain(GetRouteAggregationsPlainArgs args) {
        return getRouteAggregationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsFilterArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregations(GetRouteAggregationsArgs.builder()
     *             .filter(GetRouteAggregationsFilterArgs.builder()
     *                 .property("/project/projectId")
     *                 .operator("=")
     *                 .values("<route_aggregation_project_id>")
     *                 .build())
     *             .pagination(GetRouteAggregationsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRouteAggregationName", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].name()));
     *         ctx.export("firstRouteAggregationDescription", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].description()));
     *         ctx.export("firstRouteAggregationConnectionsCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].connectionsCount()));
     *         ctx.export("firstRouteAggregationRulesCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationsResult> getRouteAggregations(GetRouteAggregationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregations:getRouteAggregations", TypeShape.of(GetRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsFilterArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregations(GetRouteAggregationsArgs.builder()
     *             .filter(GetRouteAggregationsFilterArgs.builder()
     *                 .property("/project/projectId")
     *                 .operator("=")
     *                 .values("<route_aggregation_project_id>")
     *                 .build())
     *             .pagination(GetRouteAggregationsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRouteAggregationName", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].name()));
     *         ctx.export("firstRouteAggregationDescription", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].description()));
     *         ctx.export("firstRouteAggregationConnectionsCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].connectionsCount()));
     *         ctx.export("firstRouteAggregationRulesCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteAggregationsResult> getRouteAggregations(GetRouteAggregationsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteAggregations:getRouteAggregations", TypeShape.of(GetRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsFilterArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteAggregationsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var raPolicy = FabricFunctions.getRouteAggregations(GetRouteAggregationsArgs.builder()
     *             .filter(GetRouteAggregationsFilterArgs.builder()
     *                 .property("/project/projectId")
     *                 .operator("=")
     *                 .values("<route_aggregation_project_id>")
     *                 .build())
     *             .pagination(GetRouteAggregationsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRouteAggregationName", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].name()));
     *         ctx.export("firstRouteAggregationDescription", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].description()));
     *         ctx.export("firstRouteAggregationConnectionsCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].connectionsCount()));
     *         ctx.export("firstRouteAggregationRulesCount", raPolicy.applyValue(getRouteAggregationsResult -> getRouteAggregationsResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteAggregationsResult> getRouteAggregationsPlain(GetRouteAggregationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteAggregations:getRouteAggregations", TypeShape.of(GetRouteAggregationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicy = FabricFunctions.getRouteFilter(GetRouteFilterArgs.builder()
     *             .uuid("<uuid_of_route_filter")
     *             .build());
     * 
     *         ctx.export("id", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.id()));
     *         ctx.export("type", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.type()));
     *         ctx.export("state", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.state()));
     *         ctx.export("notMatchedRulesAction", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.connectionsCount()));
     *         ctx.export("rulesCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterResult> getRouteFilter(GetRouteFilterArgs args) {
        return getRouteFilter(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicy = FabricFunctions.getRouteFilter(GetRouteFilterArgs.builder()
     *             .uuid("<uuid_of_route_filter")
     *             .build());
     * 
     *         ctx.export("id", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.id()));
     *         ctx.export("type", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.type()));
     *         ctx.export("state", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.state()));
     *         ctx.export("notMatchedRulesAction", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.connectionsCount()));
     *         ctx.export("rulesCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterResult> getRouteFilterPlain(GetRouteFilterPlainArgs args) {
        return getRouteFilterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicy = FabricFunctions.getRouteFilter(GetRouteFilterArgs.builder()
     *             .uuid("<uuid_of_route_filter")
     *             .build());
     * 
     *         ctx.export("id", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.id()));
     *         ctx.export("type", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.type()));
     *         ctx.export("state", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.state()));
     *         ctx.export("notMatchedRulesAction", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.connectionsCount()));
     *         ctx.export("rulesCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterResult> getRouteFilter(GetRouteFilterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilter:getRouteFilter", TypeShape.of(GetRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicy = FabricFunctions.getRouteFilter(GetRouteFilterArgs.builder()
     *             .uuid("<uuid_of_route_filter")
     *             .build());
     * 
     *         ctx.export("id", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.id()));
     *         ctx.export("type", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.type()));
     *         ctx.export("state", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.state()));
     *         ctx.export("notMatchedRulesAction", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.connectionsCount()));
     *         ctx.export("rulesCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterResult> getRouteFilter(GetRouteFilterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilter:getRouteFilter", TypeShape.of(GetRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicy = FabricFunctions.getRouteFilter(GetRouteFilterArgs.builder()
     *             .uuid("<uuid_of_route_filter")
     *             .build());
     * 
     *         ctx.export("id", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.id()));
     *         ctx.export("type", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.type()));
     *         ctx.export("state", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.state()));
     *         ctx.export("notMatchedRulesAction", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.connectionsCount()));
     *         ctx.export("rulesCount", rfPolicy.applyValue(getRouteFilterResult -> getRouteFilterResult.rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterResult> getRouteFilterPlain(GetRouteFilterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteFilter:getRouteFilter", TypeShape.of(GetRouteFilterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRule = FabricFunctions.getRouteFilterRule(GetRouteFilterRuleArgs.builder()
     *             .routeFilterId("<route_filter_policy_id>")
     *             .uuid("<route_filter_rule_uuid>")
     *             .build());
     * 
     *         ctx.export("routeFilterRuleName", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.name()));
     *         ctx.export("routeFilterRuleDescription", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.description()));
     *         ctx.export("routeFilterRulePrefix", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefix()));
     *         ctx.export("routeFilterRulePrefixMatch", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRuleResult> getRouteFilterRule(GetRouteFilterRuleArgs args) {
        return getRouteFilterRule(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRule = FabricFunctions.getRouteFilterRule(GetRouteFilterRuleArgs.builder()
     *             .routeFilterId("<route_filter_policy_id>")
     *             .uuid("<route_filter_rule_uuid>")
     *             .build());
     * 
     *         ctx.export("routeFilterRuleName", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.name()));
     *         ctx.export("routeFilterRuleDescription", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.description()));
     *         ctx.export("routeFilterRulePrefix", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefix()));
     *         ctx.export("routeFilterRulePrefixMatch", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterRuleResult> getRouteFilterRulePlain(GetRouteFilterRulePlainArgs args) {
        return getRouteFilterRulePlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRule = FabricFunctions.getRouteFilterRule(GetRouteFilterRuleArgs.builder()
     *             .routeFilterId("<route_filter_policy_id>")
     *             .uuid("<route_filter_rule_uuid>")
     *             .build());
     * 
     *         ctx.export("routeFilterRuleName", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.name()));
     *         ctx.export("routeFilterRuleDescription", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.description()));
     *         ctx.export("routeFilterRulePrefix", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefix()));
     *         ctx.export("routeFilterRulePrefixMatch", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRuleResult> getRouteFilterRule(GetRouteFilterRuleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilterRule:getRouteFilterRule", TypeShape.of(GetRouteFilterRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRule = FabricFunctions.getRouteFilterRule(GetRouteFilterRuleArgs.builder()
     *             .routeFilterId("<route_filter_policy_id>")
     *             .uuid("<route_filter_rule_uuid>")
     *             .build());
     * 
     *         ctx.export("routeFilterRuleName", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.name()));
     *         ctx.export("routeFilterRuleDescription", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.description()));
     *         ctx.export("routeFilterRulePrefix", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefix()));
     *         ctx.export("routeFilterRulePrefixMatch", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRuleResult> getRouteFilterRule(GetRouteFilterRuleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilterRule:getRouteFilterRule", TypeShape.of(GetRouteFilterRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRuleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRule = FabricFunctions.getRouteFilterRule(GetRouteFilterRuleArgs.builder()
     *             .routeFilterId("<route_filter_policy_id>")
     *             .uuid("<route_filter_rule_uuid>")
     *             .build());
     * 
     *         ctx.export("routeFilterRuleName", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.name()));
     *         ctx.export("routeFilterRuleDescription", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.description()));
     *         ctx.export("routeFilterRulePrefix", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefix()));
     *         ctx.export("routeFilterRulePrefixMatch", rfRule.applyValue(getRouteFilterRuleResult -> getRouteFilterRuleResult.prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterRuleResult> getRouteFilterRulePlain(GetRouteFilterRulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteFilterRule:getRouteFilterRule", TypeShape.of(GetRouteFilterRuleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRules = FabricFunctions.getRouteFilterRules(GetRouteFilterRulesArgs.builder()
     *             .routeFilterId("<route_filter_policy_id")
     *             .limit(100)
     *             .offset(5)
     *             .build());
     * 
     *         ctx.export("firstRouteFilterRuleName", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].name()));
     *         ctx.export("firstRouteFilterRuleDescription", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].description()));
     *         ctx.export("firstRouteFilterRulePrefix", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefix()));
     *         ctx.export("firstRouteFilterRulePrefixMatch", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRulesResult> getRouteFilterRules(GetRouteFilterRulesArgs args) {
        return getRouteFilterRules(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRules = FabricFunctions.getRouteFilterRules(GetRouteFilterRulesArgs.builder()
     *             .routeFilterId("<route_filter_policy_id")
     *             .limit(100)
     *             .offset(5)
     *             .build());
     * 
     *         ctx.export("firstRouteFilterRuleName", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].name()));
     *         ctx.export("firstRouteFilterRuleDescription", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].description()));
     *         ctx.export("firstRouteFilterRulePrefix", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefix()));
     *         ctx.export("firstRouteFilterRulePrefixMatch", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterRulesResult> getRouteFilterRulesPlain(GetRouteFilterRulesPlainArgs args) {
        return getRouteFilterRulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRules = FabricFunctions.getRouteFilterRules(GetRouteFilterRulesArgs.builder()
     *             .routeFilterId("<route_filter_policy_id")
     *             .limit(100)
     *             .offset(5)
     *             .build());
     * 
     *         ctx.export("firstRouteFilterRuleName", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].name()));
     *         ctx.export("firstRouteFilterRuleDescription", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].description()));
     *         ctx.export("firstRouteFilterRulePrefix", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefix()));
     *         ctx.export("firstRouteFilterRulePrefixMatch", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRulesResult> getRouteFilterRules(GetRouteFilterRulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilterRules:getRouteFilterRules", TypeShape.of(GetRouteFilterRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRules = FabricFunctions.getRouteFilterRules(GetRouteFilterRulesArgs.builder()
     *             .routeFilterId("<route_filter_policy_id")
     *             .limit(100)
     *             .offset(5)
     *             .build());
     * 
     *         ctx.export("firstRouteFilterRuleName", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].name()));
     *         ctx.export("firstRouteFilterRuleDescription", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].description()));
     *         ctx.export("firstRouteFilterRulePrefix", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefix()));
     *         ctx.export("firstRouteFilterRulePrefixMatch", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFilterRulesResult> getRouteFilterRules(GetRouteFilterRulesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilterRules:getRouteFilterRules", TypeShape.of(GetRouteFilterRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFilterRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfRules = FabricFunctions.getRouteFilterRules(GetRouteFilterRulesArgs.builder()
     *             .routeFilterId("<route_filter_policy_id")
     *             .limit(100)
     *             .offset(5)
     *             .build());
     * 
     *         ctx.export("firstRouteFilterRuleName", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].name()));
     *         ctx.export("firstRouteFilterRuleDescription", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].description()));
     *         ctx.export("firstRouteFilterRulePrefix", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefix()));
     *         ctx.export("firstRouteFilterRulePrefixMatch", rfRules.applyValue(getRouteFilterRulesResult -> getRouteFilterRulesResult.datas()[0].prefixMatch()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFilterRulesResult> getRouteFilterRulesPlain(GetRouteFilterRulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteFilterRules:getRouteFilterRules", TypeShape.of(GetRouteFilterRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicies = FabricFunctions.getRouteFilters(GetRouteFiltersArgs.builder()
     *             .filters(            
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/type")
     *                     .operator("=")
     *                     .values("BGP_IPv4_PREFIX_FILTER")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/state")
     *                     .operator("=")
     *                     .values("PROVISIONED")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/project/projectId")
     *                     .operator("=")
     *                     .values("<project_id>")
     *                     .build())
     *             .pagination(GetRouteFiltersPaginationArgs.builder()
     *                 .offset(0)
     *                 .limit(5)
     *                 .total(25)
     *                 .build())
     *             .sorts(GetRouteFiltersSortArgs.builder()
     *                 .direction("ASC")
     *                 .property("/name")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRfUuid", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].uuid()));
     *         ctx.export("type", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].type()));
     *         ctx.export("state", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].state()));
     *         ctx.export("notMatchedRuleAction", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].connectionsCount()));
     *         ctx.export("rulesCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFiltersResult> getRouteFilters(GetRouteFiltersArgs args) {
        return getRouteFilters(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicies = FabricFunctions.getRouteFilters(GetRouteFiltersArgs.builder()
     *             .filters(            
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/type")
     *                     .operator("=")
     *                     .values("BGP_IPv4_PREFIX_FILTER")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/state")
     *                     .operator("=")
     *                     .values("PROVISIONED")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/project/projectId")
     *                     .operator("=")
     *                     .values("<project_id>")
     *                     .build())
     *             .pagination(GetRouteFiltersPaginationArgs.builder()
     *                 .offset(0)
     *                 .limit(5)
     *                 .total(25)
     *                 .build())
     *             .sorts(GetRouteFiltersSortArgs.builder()
     *                 .direction("ASC")
     *                 .property("/name")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRfUuid", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].uuid()));
     *         ctx.export("type", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].type()));
     *         ctx.export("state", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].state()));
     *         ctx.export("notMatchedRuleAction", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].connectionsCount()));
     *         ctx.export("rulesCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFiltersResult> getRouteFiltersPlain(GetRouteFiltersPlainArgs args) {
        return getRouteFiltersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicies = FabricFunctions.getRouteFilters(GetRouteFiltersArgs.builder()
     *             .filters(            
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/type")
     *                     .operator("=")
     *                     .values("BGP_IPv4_PREFIX_FILTER")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/state")
     *                     .operator("=")
     *                     .values("PROVISIONED")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/project/projectId")
     *                     .operator("=")
     *                     .values("<project_id>")
     *                     .build())
     *             .pagination(GetRouteFiltersPaginationArgs.builder()
     *                 .offset(0)
     *                 .limit(5)
     *                 .total(25)
     *                 .build())
     *             .sorts(GetRouteFiltersSortArgs.builder()
     *                 .direction("ASC")
     *                 .property("/name")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRfUuid", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].uuid()));
     *         ctx.export("type", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].type()));
     *         ctx.export("state", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].state()));
     *         ctx.export("notMatchedRuleAction", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].connectionsCount()));
     *         ctx.export("rulesCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFiltersResult> getRouteFilters(GetRouteFiltersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilters:getRouteFilters", TypeShape.of(GetRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicies = FabricFunctions.getRouteFilters(GetRouteFiltersArgs.builder()
     *             .filters(            
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/type")
     *                     .operator("=")
     *                     .values("BGP_IPv4_PREFIX_FILTER")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/state")
     *                     .operator("=")
     *                     .values("PROVISIONED")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/project/projectId")
     *                     .operator("=")
     *                     .values("<project_id>")
     *                     .build())
     *             .pagination(GetRouteFiltersPaginationArgs.builder()
     *                 .offset(0)
     *                 .limit(5)
     *                 .total(25)
     *                 .build())
     *             .sorts(GetRouteFiltersSortArgs.builder()
     *                 .direction("ASC")
     *                 .property("/name")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRfUuid", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].uuid()));
     *         ctx.export("type", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].type()));
     *         ctx.export("state", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].state()));
     *         ctx.export("notMatchedRuleAction", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].connectionsCount()));
     *         ctx.export("rulesCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRouteFiltersResult> getRouteFilters(GetRouteFiltersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRouteFilters:getRouteFilters", TypeShape.of(GetRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch route filter for a given search data set
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersArgs;
     * import com.pulumi.equinix.fabric.inputs.GetRouteFiltersPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rfPolicies = FabricFunctions.getRouteFilters(GetRouteFiltersArgs.builder()
     *             .filters(            
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/type")
     *                     .operator("=")
     *                     .values("BGP_IPv4_PREFIX_FILTER")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/state")
     *                     .operator("=")
     *                     .values("PROVISIONED")
     *                     .build(),
     *                 GetRouteFiltersFilterArgs.builder()
     *                     .property("/project/projectId")
     *                     .operator("=")
     *                     .values("<project_id>")
     *                     .build())
     *             .pagination(GetRouteFiltersPaginationArgs.builder()
     *                 .offset(0)
     *                 .limit(5)
     *                 .total(25)
     *                 .build())
     *             .sorts(GetRouteFiltersSortArgs.builder()
     *                 .direction("ASC")
     *                 .property("/name")
     *                 .build())
     *             .build());
     * 
     *         ctx.export("firstRfUuid", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].uuid()));
     *         ctx.export("type", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].type()));
     *         ctx.export("state", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].state()));
     *         ctx.export("notMatchedRuleAction", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].notMatchedRuleAction()));
     *         ctx.export("connectionsCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].connectionsCount()));
     *         ctx.export("rulesCount", rfPolicies.applyValue(getRouteFiltersResult -> getRouteFiltersResult.datas()[0].rulesCount()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRouteFiltersResult> getRouteFiltersPlain(GetRouteFiltersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRouteFilters:getRouteFilters", TypeShape.of(GetRouteFiltersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid("<uuid_of_connection_routing_protocol_is_applied_to>")
     *             .uuid("<uuid_of_routing_protocol>")
     *             .build());
     * 
     *         ctx.export("id", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.id()));
     *         ctx.export("name", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.name()));
     *         ctx.export("type", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.type()));
     *         ctx.export("directIpv4", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export("directIpv6", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export("bgpIpv4CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export("bgpIpv4EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export("bgpIpv4Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export("bgpIpv6CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export("bgpIpv6EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export("bgpIpv6Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export("customerAsn", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoutingProtocolResult> getRoutingProtocol(GetRoutingProtocolArgs args) {
        return getRoutingProtocol(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid("<uuid_of_connection_routing_protocol_is_applied_to>")
     *             .uuid("<uuid_of_routing_protocol>")
     *             .build());
     * 
     *         ctx.export("id", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.id()));
     *         ctx.export("name", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.name()));
     *         ctx.export("type", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.type()));
     *         ctx.export("directIpv4", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export("directIpv6", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export("bgpIpv4CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export("bgpIpv4EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export("bgpIpv4Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export("bgpIpv6CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export("bgpIpv6EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export("bgpIpv6Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export("customerAsn", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoutingProtocolResult> getRoutingProtocolPlain(GetRoutingProtocolPlainArgs args) {
        return getRoutingProtocolPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid("<uuid_of_connection_routing_protocol_is_applied_to>")
     *             .uuid("<uuid_of_routing_protocol>")
     *             .build());
     * 
     *         ctx.export("id", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.id()));
     *         ctx.export("name", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.name()));
     *         ctx.export("type", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.type()));
     *         ctx.export("directIpv4", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export("directIpv6", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export("bgpIpv4CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export("bgpIpv4EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export("bgpIpv4Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export("bgpIpv6CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export("bgpIpv6EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export("bgpIpv6Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export("customerAsn", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoutingProtocolResult> getRoutingProtocol(GetRoutingProtocolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRoutingProtocol:getRoutingProtocol", TypeShape.of(GetRoutingProtocolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid("<uuid_of_connection_routing_protocol_is_applied_to>")
     *             .uuid("<uuid_of_routing_protocol>")
     *             .build());
     * 
     *         ctx.export("id", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.id()));
     *         ctx.export("name", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.name()));
     *         ctx.export("type", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.type()));
     *         ctx.export("directIpv4", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export("directIpv6", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export("bgpIpv4CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export("bgpIpv4EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export("bgpIpv4Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export("bgpIpv6CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export("bgpIpv6EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export("bgpIpv6Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export("customerAsn", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoutingProtocolResult> getRoutingProtocol(GetRoutingProtocolArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getRoutingProtocol:getRoutingProtocol", TypeShape.of(GetRoutingProtocolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID
     * 
     * API documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/connections/FCR-connect-azureQC.htm#ConfigureRoutingDetailsintheFabricPortal
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()
     *             .connectionUuid("<uuid_of_connection_routing_protocol_is_applied_to>")
     *             .uuid("<uuid_of_routing_protocol>")
     *             .build());
     * 
     *         ctx.export("id", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.id()));
     *         ctx.export("name", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.name()));
     *         ctx.export("type", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.type()));
     *         ctx.export("directIpv4", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv4().equinixIfaceIp()));
     *         ctx.export("directIpv6", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.directIpv6().equinixIfaceIp()));
     *         ctx.export("bgpIpv4CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().customerPeerIp()));
     *         ctx.export("bgpIpv4EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().equinixPeerIp()));
     *         ctx.export("bgpIpv4Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv4().enabled()));
     *         ctx.export("bgpIpv6CustomerPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().customerPeerIp()));
     *         ctx.export("bgpIpv6EquinixPeerIp", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().equinixPeerIp()));
     *         ctx.export("bgpIpv6Enabled", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.bgpIpv6().enabled()));
     *         ctx.export("customerAsn", routingProtocolDataName.applyValue(getRoutingProtocolResult -> getRoutingProtocolResult.customerAsn()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoutingProtocolResult> getRoutingProtocolPlain(GetRoutingProtocolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getRoutingProtocol:getRoutingProtocol", TypeShape.of(GetRoutingProtocolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid("<uuid_of_service_profile>")
     *             .build());
     * 
     *         ctx.export("id", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.id()));
     *         ctx.export("name", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.name()));
     *         ctx.export("type", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.type()));
     *         ctx.export("visibility", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.visibility()));
     *         ctx.export("orgName", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.account().organizationName()));
     *         ctx.export("accessPointTypeConfigsType", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export("allowRemoteConnections", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export("supportedBandwidth0", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export("supportedBandwidth1", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export("redundandyRequired", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export("allowOverSubscription", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfileResult> getServiceProfile(GetServiceProfileArgs args) {
        return getServiceProfile(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid("<uuid_of_service_profile>")
     *             .build());
     * 
     *         ctx.export("id", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.id()));
     *         ctx.export("name", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.name()));
     *         ctx.export("type", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.type()));
     *         ctx.export("visibility", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.visibility()));
     *         ctx.export("orgName", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.account().organizationName()));
     *         ctx.export("accessPointTypeConfigsType", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export("allowRemoteConnections", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export("supportedBandwidth0", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export("supportedBandwidth1", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export("redundandyRequired", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export("allowOverSubscription", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfileResult> getServiceProfilePlain(GetServiceProfilePlainArgs args) {
        return getServiceProfilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid("<uuid_of_service_profile>")
     *             .build());
     * 
     *         ctx.export("id", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.id()));
     *         ctx.export("name", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.name()));
     *         ctx.export("type", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.type()));
     *         ctx.export("visibility", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.visibility()));
     *         ctx.export("orgName", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.account().organizationName()));
     *         ctx.export("accessPointTypeConfigsType", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export("allowRemoteConnections", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export("supportedBandwidth0", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export("supportedBandwidth1", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export("redundandyRequired", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export("allowOverSubscription", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfileResult> getServiceProfile(GetServiceProfileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfile:getServiceProfile", TypeShape.of(GetServiceProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid("<uuid_of_service_profile>")
     *             .build());
     * 
     *         ctx.export("id", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.id()));
     *         ctx.export("name", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.name()));
     *         ctx.export("type", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.type()));
     *         ctx.export("visibility", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.visibility()));
     *         ctx.export("orgName", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.account().organizationName()));
     *         ctx.export("accessPointTypeConfigsType", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export("allowRemoteConnections", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export("supportedBandwidth0", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export("supportedBandwidth1", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export("redundandyRequired", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export("allowOverSubscription", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceProfileResult> getServiceProfile(GetServiceProfileArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfile:getServiceProfile", TypeShape.of(GetServiceProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()
     *             .uuid("<uuid_of_service_profile>")
     *             .build());
     * 
     *         ctx.export("id", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.id()));
     *         ctx.export("name", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.name()));
     *         ctx.export("type", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.type()));
     *         ctx.export("visibility", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.visibility()));
     *         ctx.export("orgName", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.account().organizationName()));
     *         ctx.export("accessPointTypeConfigsType", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].type()));
     *         ctx.export("allowRemoteConnections", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].allowRemoteConnections()));
     *         ctx.export("supportedBandwidth0", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[0]));
     *         ctx.export("supportedBandwidth1", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].supportedBandwidths()[1]));
     *         ctx.export("redundandyRequired", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].connectionRedundancyRequired()));
     *         ctx.export("allowOverSubscription", serviceProfileDataName.applyValue(getServiceProfileResult -> getServiceProfileResult.accessPointTypeConfigs()[0].apiConfig().allowOverSubscription()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceProfileResult> getServiceProfilePlain(GetServiceProfilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceProfile:getServiceProfile", TypeShape.of(GetServiceProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles(GetServiceProfilesArgs args) {
        return getServiceProfiles(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     */
    public static CompletableFuture<GetServiceProfilesResult> getServiceProfilesPlain(GetServiceProfilesPlainArgs args) {
        return getServiceProfilesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles(GetServiceProfilesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfiles:getServiceProfiles", TypeShape.of(GetServiceProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     */
    public static Output<GetServiceProfilesResult> getServiceProfiles(GetServiceProfilesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceProfiles:getServiceProfiles", TypeShape.of(GetServiceProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
     * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles
     * 
     */
    public static CompletableFuture<GetServiceProfilesResult> getServiceProfilesPlain(GetServiceProfilesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceProfiles:getServiceProfiles", TypeShape.of(GetServiceProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var service-token = FabricFunctions.getServiceToken(GetServiceTokenArgs.builder()
     *             .uuid("<uuid_of_service_token>")
     *             .build());
     * 
     *         ctx.export("id", service_token.id());
     *         ctx.export("type", service_token.type());
     *         ctx.export("expirationDateTime", service_token.expirationDateTime());
     *         ctx.export("supportedBandwidths", service_token.serviceTokenConnections()[0].supportedBandwidths());
     *         ctx.export("virtualDeviceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().type());
     *         ctx.export("virtualDeviceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().uuid());
     *         ctx.export("interfaceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().type());
     *         ctx.export("interfaceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args) {
        return getServiceToken(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var service-token = FabricFunctions.getServiceToken(GetServiceTokenArgs.builder()
     *             .uuid("<uuid_of_service_token>")
     *             .build());
     * 
     *         ctx.export("id", service_token.id());
     *         ctx.export("type", service_token.type());
     *         ctx.export("expirationDateTime", service_token.expirationDateTime());
     *         ctx.export("supportedBandwidths", service_token.serviceTokenConnections()[0].supportedBandwidths());
     *         ctx.export("virtualDeviceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().type());
     *         ctx.export("virtualDeviceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().uuid());
     *         ctx.export("interfaceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().type());
     *         ctx.export("interfaceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceTokenResult> getServiceTokenPlain(GetServiceTokenPlainArgs args) {
        return getServiceTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var service-token = FabricFunctions.getServiceToken(GetServiceTokenArgs.builder()
     *             .uuid("<uuid_of_service_token>")
     *             .build());
     * 
     *         ctx.export("id", service_token.id());
     *         ctx.export("type", service_token.type());
     *         ctx.export("expirationDateTime", service_token.expirationDateTime());
     *         ctx.export("supportedBandwidths", service_token.serviceTokenConnections()[0].supportedBandwidths());
     *         ctx.export("virtualDeviceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().type());
     *         ctx.export("virtualDeviceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().uuid());
     *         ctx.export("interfaceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().type());
     *         ctx.export("interfaceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var service-token = FabricFunctions.getServiceToken(GetServiceTokenArgs.builder()
     *             .uuid("<uuid_of_service_token>")
     *             .build());
     * 
     *         ctx.export("id", service_token.id());
     *         ctx.export("type", service_token.type());
     *         ctx.export("expirationDateTime", service_token.expirationDateTime());
     *         ctx.export("supportedBandwidths", service_token.serviceTokenConnections()[0].supportedBandwidths());
     *         ctx.export("virtualDeviceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().type());
     *         ctx.export("virtualDeviceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().uuid());
     *         ctx.export("interfaceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().type());
     *         ctx.export("interfaceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServiceTokenResult> getServiceToken(GetServiceTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetServiceTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var service-token = FabricFunctions.getServiceToken(GetServiceTokenArgs.builder()
     *             .uuid("<uuid_of_service_token>")
     *             .build());
     * 
     *         ctx.export("id", service_token.id());
     *         ctx.export("type", service_token.type());
     *         ctx.export("expirationDateTime", service_token.expirationDateTime());
     *         ctx.export("supportedBandwidths", service_token.serviceTokenConnections()[0].supportedBandwidths());
     *         ctx.export("virtualDeviceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().type());
     *         ctx.export("virtualDeviceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].virtualDevice().uuid());
     *         ctx.export("interfaceType", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().type());
     *         ctx.export("interfaceUuid", service_token.serviceTokenConnections()[0].zSides()[0].accessPointSelectors()[0].interface().id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServiceTokenResult> getServiceTokenPlain(GetServiceTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceToken:getServiceToken", TypeShape.of(GetServiceTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     */
    public static Output<GetServiceTokensResult> getServiceTokens(GetServiceTokensArgs args) {
        return getServiceTokens(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     */
    public static CompletableFuture<GetServiceTokensResult> getServiceTokensPlain(GetServiceTokensPlainArgs args) {
        return getServiceTokensPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     */
    public static Output<GetServiceTokensResult> getServiceTokens(GetServiceTokensArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceTokens:getServiceTokens", TypeShape.of(GetServiceTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     */
    public static Output<GetServiceTokensResult> getServiceTokens(GetServiceTokensArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getServiceTokens:getServiceTokens", TypeShape.of(GetServiceTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set
     * 
     * Additional documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
     * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
     * 
     */
    public static CompletableFuture<GetServiceTokensResult> getServiceTokensPlain(GetServiceTokensPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getServiceTokens:getServiceTokens", TypeShape.of(GetServiceTokensResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStream = FabricFunctions.getStream(GetStreamArgs.builder()
     *             .streamId("<uuid_of_stream>")
     *             .build());
     * 
     *         ctx.export("streamState", dataStream.applyValue(getStreamResult -> getStreamResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamResult> getStream(GetStreamArgs args) {
        return getStream(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStream = FabricFunctions.getStream(GetStreamArgs.builder()
     *             .streamId("<uuid_of_stream>")
     *             .build());
     * 
     *         ctx.export("streamState", dataStream.applyValue(getStreamResult -> getStreamResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamResult> getStreamPlain(GetStreamPlainArgs args) {
        return getStreamPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStream = FabricFunctions.getStream(GetStreamArgs.builder()
     *             .streamId("<uuid_of_stream>")
     *             .build());
     * 
     *         ctx.export("streamState", dataStream.applyValue(getStreamResult -> getStreamResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamResult> getStream(GetStreamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStream:getStream", TypeShape.of(GetStreamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStream = FabricFunctions.getStream(GetStreamArgs.builder()
     *             .streamId("<uuid_of_stream>")
     *             .build());
     * 
     *         ctx.export("streamState", dataStream.applyValue(getStreamResult -> getStreamResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamResult> getStream(GetStreamArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStream:getStream", TypeShape.of(GetStreamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStream = FabricFunctions.getStream(GetStreamArgs.builder()
     *             .streamId("<uuid_of_stream>")
     *             .build());
     * 
     *         ctx.export("streamState", dataStream.applyValue(getStreamResult -> getStreamResult.state()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamResult> getStreamPlain(GetStreamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStream:getStream", TypeShape.of(GetStreamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamAttachment(GetStreamAttachmentArgs.builder()
     *             .asset("<asset_group>")
     *             .assetId("<id_of_the_asset_being_attached>")
     *             .streamId("<id_of_the_stream_asset_is_being_attached_to>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentResult> getStreamAttachment(GetStreamAttachmentArgs args) {
        return getStreamAttachment(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamAttachment(GetStreamAttachmentArgs.builder()
     *             .asset("<asset_group>")
     *             .assetId("<id_of_the_asset_being_attached>")
     *             .streamId("<id_of_the_stream_asset_is_being_attached_to>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamAttachmentResult> getStreamAttachmentPlain(GetStreamAttachmentPlainArgs args) {
        return getStreamAttachmentPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamAttachment(GetStreamAttachmentArgs.builder()
     *             .asset("<asset_group>")
     *             .assetId("<id_of_the_asset_being_attached>")
     *             .streamId("<id_of_the_stream_asset_is_being_attached_to>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentResult> getStreamAttachment(GetStreamAttachmentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamAttachment:getStreamAttachment", TypeShape.of(GetStreamAttachmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamAttachment(GetStreamAttachmentArgs.builder()
     *             .asset("<asset_group>")
     *             .assetId("<id_of_the_asset_being_attached>")
     *             .streamId("<id_of_the_stream_asset_is_being_attached_to>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentResult> getStreamAttachment(GetStreamAttachmentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamAttachment:getStreamAttachment", TypeShape.of(GetStreamAttachmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamAttachment(GetStreamAttachmentArgs.builder()
     *             .asset("<asset_group>")
     *             .assetId("<id_of_the_asset_being_attached>")
     *             .streamId("<id_of_the_stream_asset_is_being_attached_to>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamAttachmentResult> getStreamAttachmentPlain(GetStreamAttachmentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStreamAttachment:getStreamAttachment", TypeShape.of(GetStreamAttachmentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamAttachments(GetStreamAttachmentsArgs.builder()
     *             .filters(GetStreamAttachmentsFilterArgs.builder()
     *                 .operator("=")
     *                 .property("<filter_property>")
     *                 .values("<list_of_values_to_filter>")
     *                 .build())
     *             .pagination(GetStreamAttachmentsPaginationArgs.builder()
     *                 .limit(100)
     *                 .offset(0)
     *                 .build())
     *             .sorts(GetStreamAttachmentsSortArgs.builder()
     *                 .direction("<DESC|ASC>")
     *                 .property("/uuid")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentsResult> getStreamAttachments(GetStreamAttachmentsArgs args) {
        return getStreamAttachments(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamAttachments(GetStreamAttachmentsArgs.builder()
     *             .filters(GetStreamAttachmentsFilterArgs.builder()
     *                 .operator("=")
     *                 .property("<filter_property>")
     *                 .values("<list_of_values_to_filter>")
     *                 .build())
     *             .pagination(GetStreamAttachmentsPaginationArgs.builder()
     *                 .limit(100)
     *                 .offset(0)
     *                 .build())
     *             .sorts(GetStreamAttachmentsSortArgs.builder()
     *                 .direction("<DESC|ASC>")
     *                 .property("/uuid")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamAttachmentsResult> getStreamAttachmentsPlain(GetStreamAttachmentsPlainArgs args) {
        return getStreamAttachmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamAttachments(GetStreamAttachmentsArgs.builder()
     *             .filters(GetStreamAttachmentsFilterArgs.builder()
     *                 .operator("=")
     *                 .property("<filter_property>")
     *                 .values("<list_of_values_to_filter>")
     *                 .build())
     *             .pagination(GetStreamAttachmentsPaginationArgs.builder()
     *                 .limit(100)
     *                 .offset(0)
     *                 .build())
     *             .sorts(GetStreamAttachmentsSortArgs.builder()
     *                 .direction("<DESC|ASC>")
     *                 .property("/uuid")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentsResult> getStreamAttachments(GetStreamAttachmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamAttachments:getStreamAttachments", TypeShape.of(GetStreamAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamAttachments(GetStreamAttachmentsArgs.builder()
     *             .filters(GetStreamAttachmentsFilterArgs.builder()
     *                 .operator("=")
     *                 .property("<filter_property>")
     *                 .values("<list_of_values_to_filter>")
     *                 .build())
     *             .pagination(GetStreamAttachmentsPaginationArgs.builder()
     *                 .limit(100)
     *                 .offset(0)
     *                 .build())
     *             .sorts(GetStreamAttachmentsSortArgs.builder()
     *                 .direction("<DESC|ASC>")
     *                 .property("/uuid")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamAttachmentsResult> getStreamAttachments(GetStreamAttachmentsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamAttachments:getStreamAttachments", TypeShape.of(GetStreamAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Attached Assets with filters and pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamAttachmentsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamAttachments(GetStreamAttachmentsArgs.builder()
     *             .filters(GetStreamAttachmentsFilterArgs.builder()
     *                 .operator("=")
     *                 .property("<filter_property>")
     *                 .values("<list_of_values_to_filter>")
     *                 .build())
     *             .pagination(GetStreamAttachmentsPaginationArgs.builder()
     *                 .limit(100)
     *                 .offset(0)
     *                 .build())
     *             .sorts(GetStreamAttachmentsSortArgs.builder()
     *                 .direction("<DESC|ASC>")
     *                 .property("/uuid")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamAttachmentsResult> getStreamAttachmentsPlain(GetStreamAttachmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStreamAttachments:getStreamAttachments", TypeShape.of(GetStreamAttachmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamSubscription(GetStreamSubscriptionArgs.builder()
     *             .streamId("<stream_id>")
     *             .subscriptionId("<subscription_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionResult> getStreamSubscription(GetStreamSubscriptionArgs args) {
        return getStreamSubscription(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamSubscription(GetStreamSubscriptionArgs.builder()
     *             .streamId("<stream_id>")
     *             .subscriptionId("<subscription_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamSubscriptionResult> getStreamSubscriptionPlain(GetStreamSubscriptionPlainArgs args) {
        return getStreamSubscriptionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamSubscription(GetStreamSubscriptionArgs.builder()
     *             .streamId("<stream_id>")
     *             .subscriptionId("<subscription_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionResult> getStreamSubscription(GetStreamSubscriptionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamSubscription:getStreamSubscription", TypeShape.of(GetStreamSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamSubscription(GetStreamSubscriptionArgs.builder()
     *             .streamId("<stream_id>")
     *             .subscriptionId("<subscription_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionResult> getStreamSubscription(GetStreamSubscriptionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamSubscription:getStreamSubscription", TypeShape.of(GetStreamSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byIds = FabricFunctions.getStreamSubscription(GetStreamSubscriptionArgs.builder()
     *             .streamId("<stream_id>")
     *             .subscriptionId("<subscription_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamSubscriptionResult> getStreamSubscriptionPlain(GetStreamSubscriptionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStreamSubscription:getStreamSubscription", TypeShape.of(GetStreamSubscriptionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamSubscriptions(GetStreamSubscriptionsArgs.builder()
     *             .pagination(GetStreamSubscriptionsPaginationArgs.builder()
     *                 .limit(10)
     *                 .offset(0)
     *                 .build())
     *             .streamId("<stream_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionsResult> getStreamSubscriptions(GetStreamSubscriptionsArgs args) {
        return getStreamSubscriptions(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamSubscriptions(GetStreamSubscriptionsArgs.builder()
     *             .pagination(GetStreamSubscriptionsPaginationArgs.builder()
     *                 .limit(10)
     *                 .offset(0)
     *                 .build())
     *             .streamId("<stream_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamSubscriptionsResult> getStreamSubscriptionsPlain(GetStreamSubscriptionsPlainArgs args) {
        return getStreamSubscriptionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamSubscriptions(GetStreamSubscriptionsArgs.builder()
     *             .pagination(GetStreamSubscriptionsPaginationArgs.builder()
     *                 .limit(10)
     *                 .offset(0)
     *                 .build())
     *             .streamId("<stream_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionsResult> getStreamSubscriptions(GetStreamSubscriptionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", TypeShape.of(GetStreamSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamSubscriptions(GetStreamSubscriptionsArgs.builder()
     *             .pagination(GetStreamSubscriptionsPaginationArgs.builder()
     *                 .limit(10)
     *                 .offset(0)
     *                 .build())
     *             .streamId("<stream_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamSubscriptionsResult> getStreamSubscriptions(GetStreamSubscriptionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", TypeShape.of(GetStreamSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscriptions with pagination
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamSubscriptionsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = FabricFunctions.getStreamSubscriptions(GetStreamSubscriptionsArgs.builder()
     *             .pagination(GetStreamSubscriptionsPaginationArgs.builder()
     *                 .limit(10)
     *                 .offset(0)
     *                 .build())
     *             .streamId("<stream_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamSubscriptionsResult> getStreamSubscriptionsPlain(GetStreamSubscriptionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStreamSubscriptions:getStreamSubscriptions", TypeShape.of(GetStreamSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Streams with pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStreams = FabricFunctions.getStreams(GetStreamsArgs.builder()
     *             .pagination(GetStreamsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("numberOfReturnedStreams", dataStreams.applyValue(getStreamsResult -> getStreamsResult.datas()).length());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args) {
        return getStreams(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Streams with pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStreams = FabricFunctions.getStreams(GetStreamsArgs.builder()
     *             .pagination(GetStreamsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("numberOfReturnedStreams", dataStreams.applyValue(getStreamsResult -> getStreamsResult.datas()).length());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamsResult> getStreamsPlain(GetStreamsPlainArgs args) {
        return getStreamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Streams with pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStreams = FabricFunctions.getStreams(GetStreamsArgs.builder()
     *             .pagination(GetStreamsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("numberOfReturnedStreams", dataStreams.applyValue(getStreamsResult -> getStreamsResult.datas()).length());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Streams with pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStreams = FabricFunctions.getStreams(GetStreamsArgs.builder()
     *             .pagination(GetStreamsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("numberOfReturnedStreams", dataStreams.applyValue(getStreamsResult -> getStreamsResult.datas()).length());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamsResult> getStreams(GetStreamsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("equinix:fabric/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Streams with pagination details
     * 
     * Additional Documentation:
     * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
     * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.equinix.fabric.FabricFunctions;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsArgs;
     * import com.pulumi.equinix.fabric.inputs.GetStreamsPaginationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataStreams = FabricFunctions.getStreams(GetStreamsArgs.builder()
     *             .pagination(GetStreamsPaginationArgs.builder()
     *                 .limit(2)
     *                 .offset(1)
     *                 .build())
     *             .build());
     * 
     *         ctx.export("numberOfReturnedStreams", dataStreams.applyValue(getStreamsResult -> getStreamsResult.datas()).length());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamsResult> getStreamsPlain(GetStreamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("equinix:fabric/getStreams:getStreams", TypeShape.of(GetStreamsResult.class), args, Utilities.withVersion(options));
    }
}
