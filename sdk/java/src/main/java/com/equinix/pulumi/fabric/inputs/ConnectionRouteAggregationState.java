// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.ConnectionRouteAggregationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionRouteAggregationState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionRouteAggregationState Empty = new ConnectionRouteAggregationState();

    /**
     * Status of the Route Aggregation Policy attachment lifecycle
     * 
     */
    @Import(name="attachmentStatus")
    private @Nullable Output<String> attachmentStatus;

    /**
     * @return Status of the Route Aggregation Policy attachment lifecycle
     * 
     */
    public Optional<Output<String>> attachmentStatus() {
        return Optional.ofNullable(this.attachmentStatus);
    }

    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * URI to the attached Route Aggregation Policy on the Connection
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return URI to the attached Route Aggregation Policy on the Connection
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * UUID of the Route Aggregation to apply this Rule to
     * 
     */
    @Import(name="routeAggregationId")
    private @Nullable Output<String> routeAggregationId;

    /**
     * @return UUID of the Route Aggregation to apply this Rule to
     * 
     */
    public Optional<Output<String>> routeAggregationId() {
        return Optional.ofNullable(this.routeAggregationId);
    }

    @Import(name="timeouts")
    private @Nullable Output<ConnectionRouteAggregationTimeoutsArgs> timeouts;

    public Optional<Output<ConnectionRouteAggregationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Route Aggregation Type. One of [&#34;BGP*IPv4*PREFIX_AGGREGATION&#34;]
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Route Aggregation Type. One of [&#34;BGP*IPv4*PREFIX_AGGREGATION&#34;]
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix Assigned ID for Route Aggregation Policy
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix Assigned ID for Route Aggregation Policy
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private ConnectionRouteAggregationState() {}

    private ConnectionRouteAggregationState(ConnectionRouteAggregationState $) {
        this.attachmentStatus = $.attachmentStatus;
        this.connectionId = $.connectionId;
        this.href = $.href;
        this.routeAggregationId = $.routeAggregationId;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionRouteAggregationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionRouteAggregationState $;

        public Builder() {
            $ = new ConnectionRouteAggregationState();
        }

        public Builder(ConnectionRouteAggregationState defaults) {
            $ = new ConnectionRouteAggregationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentStatus Status of the Route Aggregation Policy attachment lifecycle
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(@Nullable Output<String> attachmentStatus) {
            $.attachmentStatus = attachmentStatus;
            return this;
        }

        /**
         * @param attachmentStatus Status of the Route Aggregation Policy attachment lifecycle
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(String attachmentStatus) {
            return attachmentStatus(Output.of(attachmentStatus));
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param href URI to the attached Route Aggregation Policy on the Connection
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href URI to the attached Route Aggregation Policy on the Connection
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param routeAggregationId UUID of the Route Aggregation to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(@Nullable Output<String> routeAggregationId) {
            $.routeAggregationId = routeAggregationId;
            return this;
        }

        /**
         * @param routeAggregationId UUID of the Route Aggregation to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(String routeAggregationId) {
            return routeAggregationId(Output.of(routeAggregationId));
        }

        public Builder timeouts(@Nullable Output<ConnectionRouteAggregationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ConnectionRouteAggregationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Route Aggregation Type. One of [&#34;BGP*IPv4*PREFIX_AGGREGATION&#34;]
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Route Aggregation Type. One of [&#34;BGP*IPv4*PREFIX_AGGREGATION&#34;]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix Assigned ID for Route Aggregation Policy
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix Assigned ID for Route Aggregation Policy
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ConnectionRouteAggregationState build() {
            return $;
        }
    }

}
