// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.ConnectionRouteAggregationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionRouteAggregationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionRouteAggregationArgs Empty = new ConnectionRouteAggregationArgs();

    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * UUID of the Route Aggregation to apply this Rule to
     * 
     */
    @Import(name="routeAggregationId", required=true)
    private Output<String> routeAggregationId;

    /**
     * @return UUID of the Route Aggregation to apply this Rule to
     * 
     */
    public Output<String> routeAggregationId() {
        return this.routeAggregationId;
    }

    @Import(name="timeouts")
    private @Nullable Output<ConnectionRouteAggregationTimeoutsArgs> timeouts;

    public Optional<Output<ConnectionRouteAggregationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private ConnectionRouteAggregationArgs() {}

    private ConnectionRouteAggregationArgs(ConnectionRouteAggregationArgs $) {
        this.connectionId = $.connectionId;
        this.routeAggregationId = $.routeAggregationId;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionRouteAggregationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionRouteAggregationArgs $;

        public Builder() {
            $ = new ConnectionRouteAggregationArgs();
        }

        public Builder(ConnectionRouteAggregationArgs defaults) {
            $ = new ConnectionRouteAggregationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param routeAggregationId UUID of the Route Aggregation to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(Output<String> routeAggregationId) {
            $.routeAggregationId = routeAggregationId;
            return this;
        }

        /**
         * @param routeAggregationId UUID of the Route Aggregation to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(String routeAggregationId) {
            return routeAggregationId(Output.of(routeAggregationId));
        }

        public Builder timeouts(@Nullable Output<ConnectionRouteAggregationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(ConnectionRouteAggregationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public ConnectionRouteAggregationArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("ConnectionRouteAggregationArgs", "connectionId");
            }
            if ($.routeAggregationId == null) {
                throw new MissingRequiredPropertyException("ConnectionRouteAggregationArgs", "routeAggregationId");
            }
            return $;
        }
    }

}
