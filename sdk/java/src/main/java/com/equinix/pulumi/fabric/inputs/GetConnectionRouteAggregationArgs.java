// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetConnectionRouteAggregationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionRouteAggregationArgs Empty = new GetConnectionRouteAggregationArgs();

    /**
     * The uuid of the connection this data source should retrieve
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return The uuid of the connection this data source should retrieve
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * The uuid of the route aggregation this data source should retrieve
     * 
     */
    @Import(name="routeAggregationId", required=true)
    private Output<String> routeAggregationId;

    /**
     * @return The uuid of the route aggregation this data source should retrieve
     * 
     */
    public Output<String> routeAggregationId() {
        return this.routeAggregationId;
    }

    private GetConnectionRouteAggregationArgs() {}

    private GetConnectionRouteAggregationArgs(GetConnectionRouteAggregationArgs $) {
        this.connectionId = $.connectionId;
        this.routeAggregationId = $.routeAggregationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionRouteAggregationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionRouteAggregationArgs $;

        public Builder() {
            $ = new GetConnectionRouteAggregationArgs();
        }

        public Builder(GetConnectionRouteAggregationArgs defaults) {
            $ = new GetConnectionRouteAggregationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId The uuid of the connection this data source should retrieve
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId The uuid of the connection this data source should retrieve
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param routeAggregationId The uuid of the route aggregation this data source should retrieve
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(Output<String> routeAggregationId) {
            $.routeAggregationId = routeAggregationId;
            return this;
        }

        /**
         * @param routeAggregationId The uuid of the route aggregation this data source should retrieve
         * 
         * @return builder
         * 
         */
        public Builder routeAggregationId(String routeAggregationId) {
            return routeAggregationId(Output.of(routeAggregationId));
        }

        public GetConnectionRouteAggregationArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("GetConnectionRouteAggregationArgs", "connectionId");
            }
            if ($.routeAggregationId == null) {
                throw new MissingRequiredPropertyException("GetConnectionRouteAggregationArgs", "routeAggregationId");
            }
            return $;
        }
    }

}
