// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.PortArgs;
import com.equinix.pulumi.fabric.inputs.PortState;
import com.equinix.pulumi.fabric.outputs.PortAccount;
import com.equinix.pulumi.fabric.outputs.PortAdditionalInfo;
import com.equinix.pulumi.fabric.outputs.PortChangeLog;
import com.equinix.pulumi.fabric.outputs.PortDevice;
import com.equinix.pulumi.fabric.outputs.PortEncapsulation;
import com.equinix.pulumi.fabric.outputs.PortLocation;
import com.equinix.pulumi.fabric.outputs.PortNotification;
import com.equinix.pulumi.fabric.outputs.PortOrder;
import com.equinix.pulumi.fabric.outputs.PortPhysicalPort;
import com.equinix.pulumi.fabric.outputs.PortProject;
import com.equinix.pulumi.fabric.outputs.PortRedundancy;
import com.equinix.pulumi.fabric.outputs.PortSettings;
import com.equinix.pulumi.fabric.outputs.PortTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Port;
 * import com.pulumi.equinix.fabric.PortArgs;
 * import com.pulumi.equinix.fabric.inputs.PortAccountArgs;
 * import com.pulumi.equinix.fabric.inputs.PortAdditionalInfoArgs;
 * import com.pulumi.equinix.fabric.inputs.PortEncapsulationArgs;
 * import com.pulumi.equinix.fabric.inputs.PortLocationArgs;
 * import com.pulumi.equinix.fabric.inputs.PortNotificationArgs;
 * import com.pulumi.equinix.fabric.inputs.PortPhysicalPortArgs;
 * import com.pulumi.equinix.fabric.inputs.PortProjectArgs;
 * import com.pulumi.equinix.fabric.inputs.PortRedundancyArgs;
 * import com.pulumi.equinix.fabric.inputs.PortSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var order = new Port("order", PortArgs.builder()
 *             .account(PortAccountArgs.builder()
 *                 .account_number("<account_number>")
 *                 .build())
 *             .additionalInfos(PortAdditionalInfoArgs.builder()
 *                 .key("lagType")
 *                 .value("New")
 *                 .build())
 *             .connectivitySourceType("COLO")
 *             .demarcationPointIbx("TR2")
 *             .encapsulation(PortEncapsulationArgs.builder()
 *                 .tag_protocol_id("0x8100")
 *                 .type("DOT1Q")
 *                 .build())
 *             .lagEnabled(true)
 *             .location(PortLocationArgs.builder()
 *                 .metro_code("TR")
 *                 .build())
 *             .notifications(            
 *                 PortNotificationArgs.builder()
 *                     .registered_users("<username>")
 *                     .type("TECHNICAL")
 *                     .build(),
 *                 PortNotificationArgs.builder()
 *                     .registered_users("<username>")
 *                     .type("NOTIFICATION")
 *                     .build())
 *             .physicalPorts(PortPhysicalPortArgs.builder()
 *                 .demarcation_point(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .type("XF_PHYSICAL_PORT")
 *                 .build())
 *             .physicalPortsCount(1)
 *             .physicalPortsSpeed(1000)
 *             .physicalPortsType("1000BASE_LX")
 *             .project(PortProjectArgs.builder()
 *                 .project_id("<project_id>")
 *                 .build())
 *             .redundancy(PortRedundancyArgs.builder()
 *                 .priority("PRIMARY")
 *                 .build())
 *             .settings(PortSettingsArgs.builder()
 *                 .package_type("STANDARD")
 *                 .shared_port_type(false)
 *                 .build())
 *             .type("XF_PORT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="equinix:fabric/port:Port")
public class Port extends com.pulumi.resources.CustomResource {
    /**
     * Port order account details
     * 
     */
    @Export(name="account", refs={PortAccount.class}, tree="[0]")
    private Output<PortAccount> account;

    /**
     * @return Port order account details
     * 
     */
    public Output<PortAccount> account() {
        return this.account;
    }
    /**
     * List of key/value objects to provide additional context to the Port order
     * 
     */
    @Export(name="additionalInfos", refs={List.class,PortAdditionalInfo.class}, tree="[0,1]")
    private Output</* @Nullable */ List<PortAdditionalInfo>> additionalInfos;

    /**
     * @return List of key/value objects to provide additional context to the Port order
     * 
     */
    public Output<Optional<List<PortAdditionalInfo>>> additionalInfos() {
        return Codegen.optional(this.additionalInfos);
    }
    /**
     * Details of the last change on the port resource
     * 
     */
    @Export(name="changeLog", refs={PortChangeLog.class}, tree="[0]")
    private Output<PortChangeLog> changeLog;

    /**
     * @return Details of the last change on the port resource
     * 
     */
    public Output<PortChangeLog> changeLog() {
        return this.changeLog;
    }
    /**
     * Connection type that is used from the port after creation
     * 
     */
    @Export(name="connectivitySourceType", refs={String.class}, tree="[0]")
    private Output<String> connectivitySourceType;

    /**
     * @return Connection type that is used from the port after creation
     * 
     */
    public Output<String> connectivitySourceType() {
        return this.connectivitySourceType;
    }
    /**
     * IBX code where the port will be located
     * 
     */
    @Export(name="demarcationPointIbx", refs={String.class}, tree="[0]")
    private Output<String> demarcationPointIbx;

    /**
     * @return IBX code where the port will be located
     * 
     */
    public Output<String> demarcationPointIbx() {
        return this.demarcationPointIbx;
    }
    /**
     * Port device configuration
     * 
     */
    @Export(name="device", refs={PortDevice.class}, tree="[0]")
    private Output</* @Nullable */ PortDevice> device;

    /**
     * @return Port device configuration
     * 
     */
    public Output<Optional<PortDevice>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Port encapsulation settings
     * 
     */
    @Export(name="encapsulation", refs={PortEncapsulation.class}, tree="[0]")
    private Output<PortEncapsulation> encapsulation;

    /**
     * @return Port encapsulation settings
     * 
     */
    public Output<PortEncapsulation> encapsulation() {
        return this.encapsulation;
    }
    /**
     * Equinix assigned URI of the port resource
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Equinix assigned URI of the port resource
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    @Export(name="lagEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> lagEnabled;

    /**
     * @return Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    public Output<Boolean> lagEnabled() {
        return this.lagEnabled;
    }
    /**
     * Location details for the port order
     * 
     */
    @Export(name="location", refs={PortLocation.class}, tree="[0]")
    private Output<PortLocation> location;

    /**
     * @return Location details for the port order
     * 
     */
    public Output<PortLocation> location() {
        return this.location;
    }
    /**
     * Designated name of the port
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Designated name of the port
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of notification types and the registered users to receive those notification types
     * 
     */
    @Export(name="notifications", refs={List.class,PortNotification.class}, tree="[0,1]")
    private Output<List<PortNotification>> notifications;

    /**
     * @return List of notification types and the registered users to receive those notification types
     * 
     */
    public Output<List<PortNotification>> notifications() {
        return this.notifications;
    }
    /**
     * Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    @Export(name="order", refs={PortOrder.class}, tree="[0]")
    private Output<PortOrder> order;

    /**
     * @return Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    public Output<PortOrder> order() {
        return this.order;
    }
    /**
     * Physical ports that will implement this port order
     * 
     */
    @Export(name="physicalPorts", refs={List.class,PortPhysicalPort.class}, tree="[0,1]")
    private Output<List<PortPhysicalPort>> physicalPorts;

    /**
     * @return Physical ports that will implement this port order
     * 
     */
    public Output<List<PortPhysicalPort>> physicalPorts() {
        return this.physicalPorts;
    }
    /**
     * Number of physical ports in the Port Order
     * 
     */
    @Export(name="physicalPortsCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> physicalPortsCount;

    /**
     * @return Number of physical ports in the Port Order
     * 
     */
    public Output<Integer> physicalPortsCount() {
        return this.physicalPortsCount;
    }
    /**
     * Physical Ports Speed in Mbps
     * 
     */
    @Export(name="physicalPortsSpeed", refs={Integer.class}, tree="[0]")
    private Output<Integer> physicalPortsSpeed;

    /**
     * @return Physical Ports Speed in Mbps
     * 
     */
    public Output<Integer> physicalPortsSpeed() {
        return this.physicalPortsSpeed;
    }
    /**
     * Physical Ports Type
     * 
     */
    @Export(name="physicalPortsType", refs={String.class}, tree="[0]")
    private Output<String> physicalPortsType;

    /**
     * @return Physical Ports Type
     * 
     */
    public Output<String> physicalPortsType() {
        return this.physicalPortsType;
    }
    /**
     * Port order project details
     * 
     */
    @Export(name="project", refs={PortProject.class}, tree="[0]")
    private Output<PortProject> project;

    /**
     * @return Port order project details
     * 
     */
    public Output<PortProject> project() {
        return this.project;
    }
    /**
     * Port redundancy settings
     * 
     */
    @Export(name="redundancy", refs={PortRedundancy.class}, tree="[0]")
    private Output<PortRedundancy> redundancy;

    /**
     * @return Port redundancy settings
     * 
     */
    public Output<PortRedundancy> redundancy() {
        return this.redundancy;
    }
    /**
     * Port order configuration settings
     * 
     */
    @Export(name="settings", refs={PortSettings.class}, tree="[0]")
    private Output<PortSettings> settings;

    /**
     * @return Port order configuration settings
     * 
     */
    public Output<PortSettings> settings() {
        return this.settings;
    }
    /**
     * Value representing provisioning status for the port resource
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Value representing provisioning status for the port resource
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    @Export(name="timeouts", refs={PortTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ PortTimeouts> timeouts;

    public Output<Optional<PortTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Type of the port order request
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of the port order request
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix assigned unique identifier of the port resource
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix assigned unique identifier of the port resource
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Port(java.lang.String name) {
        this(name, PortArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Port(java.lang.String name, PortArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Port(java.lang.String name, PortArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/port:Port", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Port(java.lang.String name, Output<java.lang.String> id, @Nullable PortState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/port:Port", name, state, makeResourceOptions(options, id), false);
    }

    private static PortArgs makeArgs(PortArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PortArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/equinix")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Port get(java.lang.String name, Output<java.lang.String> id, @Nullable PortState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Port(name, id, state, options);
    }
}
