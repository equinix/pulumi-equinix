// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.fabric.inputs.StreamAttachmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamAttachmentArgs Empty = new StreamAttachmentArgs();

    /**
     * Equinix defined asset category. Matches the product name the asset is a part of
     * 
     */
    @Import(name="asset", required=true)
    private Output<String> asset;

    /**
     * @return Equinix defined asset category. Matches the product name the asset is a part of
     * 
     */
    public Output<String> asset() {
        return this.asset;
    }

    /**
     * Equinix defined UUID of the asset being attached to the stream
     * 
     */
    @Import(name="assetId", required=true)
    private Output<String> assetId;

    /**
     * @return Equinix defined UUID of the asset being attached to the stream
     * 
     */
    public Output<String> assetId() {
        return this.assetId;
    }

    /**
     * Boolean value indicating enablement of metrics for this asset stream attachment
     * 
     */
    @Import(name="metricsEnabled")
    private @Nullable Output<Boolean> metricsEnabled;

    /**
     * @return Boolean value indicating enablement of metrics for this asset stream attachment
     * 
     */
    public Optional<Output<Boolean>> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }

    /**
     * UUID of the stream that is the target of this asset attachment
     * 
     */
    @Import(name="streamId", required=true)
    private Output<String> streamId;

    /**
     * @return UUID of the stream that is the target of this asset attachment
     * 
     */
    public Output<String> streamId() {
        return this.streamId;
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamAttachmentTimeoutsArgs> timeouts;

    public Optional<Output<StreamAttachmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private StreamAttachmentArgs() {}

    private StreamAttachmentArgs(StreamAttachmentArgs $) {
        this.asset = $.asset;
        this.assetId = $.assetId;
        this.metricsEnabled = $.metricsEnabled;
        this.streamId = $.streamId;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamAttachmentArgs $;

        public Builder() {
            $ = new StreamAttachmentArgs();
        }

        public Builder(StreamAttachmentArgs defaults) {
            $ = new StreamAttachmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asset Equinix defined asset category. Matches the product name the asset is a part of
         * 
         * @return builder
         * 
         */
        public Builder asset(Output<String> asset) {
            $.asset = asset;
            return this;
        }

        /**
         * @param asset Equinix defined asset category. Matches the product name the asset is a part of
         * 
         * @return builder
         * 
         */
        public Builder asset(String asset) {
            return asset(Output.of(asset));
        }

        /**
         * @param assetId Equinix defined UUID of the asset being attached to the stream
         * 
         * @return builder
         * 
         */
        public Builder assetId(Output<String> assetId) {
            $.assetId = assetId;
            return this;
        }

        /**
         * @param assetId Equinix defined UUID of the asset being attached to the stream
         * 
         * @return builder
         * 
         */
        public Builder assetId(String assetId) {
            return assetId(Output.of(assetId));
        }

        /**
         * @param metricsEnabled Boolean value indicating enablement of metrics for this asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(@Nullable Output<Boolean> metricsEnabled) {
            $.metricsEnabled = metricsEnabled;
            return this;
        }

        /**
         * @param metricsEnabled Boolean value indicating enablement of metrics for this asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(Boolean metricsEnabled) {
            return metricsEnabled(Output.of(metricsEnabled));
        }

        /**
         * @param streamId UUID of the stream that is the target of this asset attachment
         * 
         * @return builder
         * 
         */
        public Builder streamId(Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId UUID of the stream that is the target of this asset attachment
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder timeouts(@Nullable Output<StreamAttachmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamAttachmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public StreamAttachmentArgs build() {
            if ($.asset == null) {
                throw new MissingRequiredPropertyException("StreamAttachmentArgs", "asset");
            }
            if ($.assetId == null) {
                throw new MissingRequiredPropertyException("StreamAttachmentArgs", "assetId");
            }
            if ($.streamId == null) {
                throw new MissingRequiredPropertyException("StreamAttachmentArgs", "streamId");
            }
            return $;
        }
    }

}
