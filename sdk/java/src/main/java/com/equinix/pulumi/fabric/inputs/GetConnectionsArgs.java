// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.GetConnectionsFilterArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsPaginationArgs;
import com.equinix.pulumi.fabric.inputs.GetConnectionsSortArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConnectionsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionsArgs Empty = new GetConnectionsArgs();

    /**
     * Filters for the Data Source Search Request
     * 
     */
    @Import(name="filters", required=true)
    private Output<List<GetConnectionsFilterArgs>> filters;

    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public Output<List<GetConnectionsFilterArgs>> filters() {
        return this.filters;
    }

    /**
     * Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
     * 
     */
    @Import(name="outerOperator", required=true)
    private Output<String> outerOperator;

    /**
     * @return Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
     * 
     */
    public Output<String> outerOperator() {
        return this.outerOperator;
    }

    /**
     * Pagination details for the Data Source Search Request
     * 
     */
    @Import(name="pagination")
    private @Nullable Output<GetConnectionsPaginationArgs> pagination;

    /**
     * @return Pagination details for the Data Source Search Request
     * 
     */
    public Optional<Output<GetConnectionsPaginationArgs>> pagination() {
        return Optional.ofNullable(this.pagination);
    }

    /**
     * Filters for the Data Source Search Request
     * 
     */
    @Import(name="sorts")
    private @Nullable Output<List<GetConnectionsSortArgs>> sorts;

    /**
     * @return Filters for the Data Source Search Request
     * 
     */
    public Optional<Output<List<GetConnectionsSortArgs>>> sorts() {
        return Optional.ofNullable(this.sorts);
    }

    private GetConnectionsArgs() {}

    private GetConnectionsArgs(GetConnectionsArgs $) {
        this.filters = $.filters;
        this.outerOperator = $.outerOperator;
        this.pagination = $.pagination;
        this.sorts = $.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionsArgs $;

        public Builder() {
            $ = new GetConnectionsArgs();
        }

        public Builder(GetConnectionsArgs defaults) {
            $ = new GetConnectionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder filters(Output<List<GetConnectionsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetConnectionsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder filters(GetConnectionsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param outerOperator Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
         * 
         * @return builder
         * 
         */
        public Builder outerOperator(Output<String> outerOperator) {
            $.outerOperator = outerOperator;
            return this;
        }

        /**
         * @param outerOperator Determines if the filter list will be grouped by AND or by OR. One of [AND, OR]
         * 
         * @return builder
         * 
         */
        public Builder outerOperator(String outerOperator) {
            return outerOperator(Output.of(outerOperator));
        }

        /**
         * @param pagination Pagination details for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder pagination(@Nullable Output<GetConnectionsPaginationArgs> pagination) {
            $.pagination = pagination;
            return this;
        }

        /**
         * @param pagination Pagination details for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder pagination(GetConnectionsPaginationArgs pagination) {
            return pagination(Output.of(pagination));
        }

        /**
         * @param sorts Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sorts(@Nullable Output<List<GetConnectionsSortArgs>> sorts) {
            $.sorts = sorts;
            return this;
        }

        /**
         * @param sorts Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sorts(List<GetConnectionsSortArgs> sorts) {
            return sorts(Output.of(sorts));
        }

        /**
         * @param sorts Filters for the Data Source Search Request
         * 
         * @return builder
         * 
         */
        public Builder sorts(GetConnectionsSortArgs... sorts) {
            return sorts(List.of(sorts));
        }

        public GetConnectionsArgs build() {
            if ($.filters == null) {
                throw new MissingRequiredPropertyException("GetConnectionsArgs", "filters");
            }
            if ($.outerOperator == null) {
                throw new MissingRequiredPropertyException("GetConnectionsArgs", "outerOperator");
            }
            return $;
        }
    }

}
