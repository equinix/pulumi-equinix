// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs Empty = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs();

    /**
     * Account Name
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return Account Name
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Port Bandwidth
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Port Bandwidth
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Customer virtual port Id
     * 
     */
    @Import(name="cvpId")
    private @Nullable Output<Integer> cvpId;

    /**
     * @return Customer virtual port Id
     * 
     */
    public Optional<Output<Integer>> cvpId() {
        return Optional.ofNullable(this.cvpId);
    }

    /**
     * Port Encapsulation
     * 
     */
    @Import(name="encapsulationProtocolType")
    private @Nullable Output<String> encapsulationProtocolType;

    /**
     * @return Port Encapsulation
     * 
     */
    public Optional<Output<String>> encapsulationProtocolType() {
        return Optional.ofNullable(this.encapsulationProtocolType);
    }

    /**
     * Unique Resource Identifier
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Unique Resource Identifier
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Port Location
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs>> locations;

    /**
     * @return Port Location
     * 
     */
    public Optional<Output<List<ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Port Name
     * 
     */
    @Import(name="portName")
    private @Nullable Output<String> portName;

    /**
     * @return Port Name
     * 
     */
    public Optional<Output<String>> portName() {
        return Optional.ofNullable(this.portName);
    }

    /**
     * Port Priority
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return Port Priority
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Type of Port
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of Port
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned Port identifier
     * 
     */
    @Import(name="uuid", required=true)
    private Output<String> uuid;

    /**
     * @return Equinix-assigned Port identifier
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    private ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs() {}

    private ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs(ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs $) {
        this.accountName = $.accountName;
        this.bandwidth = $.bandwidth;
        this.cvpId = $.cvpId;
        this.encapsulationProtocolType = $.encapsulationProtocolType;
        this.href = $.href;
        this.locations = $.locations;
        this.portName = $.portName;
        this.priority = $.priority;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs $;

        public Builder() {
            $ = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs();
        }

        public Builder(ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs defaults) {
            $ = new ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Account Name
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName Account Name
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param bandwidth Port Bandwidth
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Port Bandwidth
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param cvpId Customer virtual port Id
         * 
         * @return builder
         * 
         */
        public Builder cvpId(@Nullable Output<Integer> cvpId) {
            $.cvpId = cvpId;
            return this;
        }

        /**
         * @param cvpId Customer virtual port Id
         * 
         * @return builder
         * 
         */
        public Builder cvpId(Integer cvpId) {
            return cvpId(Output.of(cvpId));
        }

        /**
         * @param encapsulationProtocolType Port Encapsulation
         * 
         * @return builder
         * 
         */
        public Builder encapsulationProtocolType(@Nullable Output<String> encapsulationProtocolType) {
            $.encapsulationProtocolType = encapsulationProtocolType;
            return this;
        }

        /**
         * @param encapsulationProtocolType Port Encapsulation
         * 
         * @return builder
         * 
         */
        public Builder encapsulationProtocolType(String encapsulationProtocolType) {
            return encapsulationProtocolType(Output.of(encapsulationProtocolType));
        }

        /**
         * @param href Unique Resource Identifier
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Unique Resource Identifier
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param locations Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(List<ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param portName Port Name
         * 
         * @return builder
         * 
         */
        public Builder portName(@Nullable Output<String> portName) {
            $.portName = portName;
            return this;
        }

        /**
         * @param portName Port Name
         * 
         * @return builder
         * 
         */
        public Builder portName(String portName) {
            return portName(Output.of(portName));
        }

        /**
         * @param priority Port Priority
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Port Priority
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param type Type of Port
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of Port
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned Port identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned Port identifier
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs build() {
            if ($.uuid == null) {
                throw new MissingRequiredPropertyException("ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs", "uuid");
            }
            return $;
        }
    }

}
