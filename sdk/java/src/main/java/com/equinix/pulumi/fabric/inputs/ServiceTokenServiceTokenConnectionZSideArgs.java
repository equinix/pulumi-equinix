// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;


public final class ServiceTokenServiceTokenConnectionZSideArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTokenServiceTokenConnectionZSideArgs Empty = new ServiceTokenServiceTokenConnectionZSideArgs();

    /**
     * List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
     * 
     */
    @Import(name="accessPointSelectors", required=true)
    private Output<List<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs>> accessPointSelectors;

    /**
     * @return List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
     * 
     */
    public Output<List<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs>> accessPointSelectors() {
        return this.accessPointSelectors;
    }

    private ServiceTokenServiceTokenConnectionZSideArgs() {}

    private ServiceTokenServiceTokenConnectionZSideArgs(ServiceTokenServiceTokenConnectionZSideArgs $) {
        this.accessPointSelectors = $.accessPointSelectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTokenServiceTokenConnectionZSideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTokenServiceTokenConnectionZSideArgs $;

        public Builder() {
            $ = new ServiceTokenServiceTokenConnectionZSideArgs();
        }

        public Builder(ServiceTokenServiceTokenConnectionZSideArgs defaults) {
            $ = new ServiceTokenServiceTokenConnectionZSideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPointSelectors List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
         * 
         * @return builder
         * 
         */
        public Builder accessPointSelectors(Output<List<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs>> accessPointSelectors) {
            $.accessPointSelectors = accessPointSelectors;
            return this;
        }

        /**
         * @param accessPointSelectors List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
         * 
         * @return builder
         * 
         */
        public Builder accessPointSelectors(List<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs> accessPointSelectors) {
            return accessPointSelectors(Output.of(accessPointSelectors));
        }

        /**
         * @param accessPointSelectors List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
         * 
         * @return builder
         * 
         */
        public Builder accessPointSelectors(ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs... accessPointSelectors) {
            return accessPointSelectors(List.of(accessPointSelectors));
        }

        public ServiceTokenServiceTokenConnectionZSideArgs build() {
            if ($.accessPointSelectors == null) {
                throw new MissingRequiredPropertyException("ServiceTokenServiceTokenConnectionZSideArgs", "accessPointSelectors");
            }
            return $;
        }
    }

}
