// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumAccessPointTypeConfig;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumAccount;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumChangeLog;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumCustomField;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumMarketingInfo;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumMetro;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumNotification;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumPort;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumProject;
import com.equinix.pulumi.fabric.outputs.GetServiceProfilesDatumVirtualDevice;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceProfilesDatum {
    /**
     * @return Access point config information
     * 
     */
    private List<GetServiceProfilesDatumAccessPointTypeConfig> accessPointTypeConfigs;
    /**
     * @return Service Profile Owner Account Information
     * 
     */
    private List<GetServiceProfilesDatumAccount> accounts;
    /**
     * @return Array of contact emails
     * 
     */
    private List<String> allowedEmails;
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    private List<GetServiceProfilesDatumChangeLog> changeLogs;
    /**
     * @return Custom Fields
     * 
     */
    private List<GetServiceProfilesDatumCustomField> customFields;
    /**
     * @return User-provided service description
     * 
     */
    private String description;
    /**
     * @return Service Profile URI response attribute
     * 
     */
    private String href;
    /**
     * @return Marketing Info
     * 
     */
    private List<GetServiceProfilesDatumMarketingInfo> marketingInfos;
    /**
     * @return Access point config information
     * 
     */
    private List<GetServiceProfilesDatumMetro> metros;
    /**
     * @return Customer-assigned service profile name
     * 
     */
    private String name;
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    private List<GetServiceProfilesDatumNotification> notifications;
    /**
     * @return Ports
     * 
     */
    private List<GetServiceProfilesDatumPort> ports;
    /**
     * @return Project information
     * 
     */
    private List<GetServiceProfilesDatumProject> projects;
    /**
     * @return Self Profile indicating if the profile is created for customer&#39;s  self use
     * 
     */
    private Boolean selfProfile;
    /**
     * @return Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
     * 
     */
    private String state;
    /**
     * @return Tags attached to the connection
     * 
     */
    private List<String> tags;
    /**
     * @return Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
     * 
     */
    private String type;
    /**
     * @return Equinix assigned service profile identifier
     * 
     */
    private String uuid;
    /**
     * @return Flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    private String viewPoint;
    /**
     * @return Virtual Devices
     * 
     */
    private List<GetServiceProfilesDatumVirtualDevice> virtualDevices;
    /**
     * @return Service profile visibility - PUBLIC, PRIVATE
     * 
     */
    private String visibility;

    private GetServiceProfilesDatum() {}
    /**
     * @return Access point config information
     * 
     */
    public List<GetServiceProfilesDatumAccessPointTypeConfig> accessPointTypeConfigs() {
        return this.accessPointTypeConfigs;
    }
    /**
     * @return Service Profile Owner Account Information
     * 
     */
    public List<GetServiceProfilesDatumAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Array of contact emails
     * 
     */
    public List<String> allowedEmails() {
        return this.allowedEmails;
    }
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public List<GetServiceProfilesDatumChangeLog> changeLogs() {
        return this.changeLogs;
    }
    /**
     * @return Custom Fields
     * 
     */
    public List<GetServiceProfilesDatumCustomField> customFields() {
        return this.customFields;
    }
    /**
     * @return User-provided service description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Service Profile URI response attribute
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return Marketing Info
     * 
     */
    public List<GetServiceProfilesDatumMarketingInfo> marketingInfos() {
        return this.marketingInfos;
    }
    /**
     * @return Access point config information
     * 
     */
    public List<GetServiceProfilesDatumMetro> metros() {
        return this.metros;
    }
    /**
     * @return Customer-assigned service profile name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public List<GetServiceProfilesDatumNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Ports
     * 
     */
    public List<GetServiceProfilesDatumPort> ports() {
        return this.ports;
    }
    /**
     * @return Project information
     * 
     */
    public List<GetServiceProfilesDatumProject> projects() {
        return this.projects;
    }
    /**
     * @return Self Profile indicating if the profile is created for customer&#39;s  self use
     * 
     */
    public Boolean selfProfile() {
        return this.selfProfile;
    }
    /**
     * @return Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Tags attached to the connection
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix assigned service profile identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     * 
     */
    public String viewPoint() {
        return this.viewPoint;
    }
    /**
     * @return Virtual Devices
     * 
     */
    public List<GetServiceProfilesDatumVirtualDevice> virtualDevices() {
        return this.virtualDevices;
    }
    /**
     * @return Service profile visibility - PUBLIC, PRIVATE
     * 
     */
    public String visibility() {
        return this.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceProfilesDatum defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceProfilesDatumAccessPointTypeConfig> accessPointTypeConfigs;
        private List<GetServiceProfilesDatumAccount> accounts;
        private List<String> allowedEmails;
        private List<GetServiceProfilesDatumChangeLog> changeLogs;
        private List<GetServiceProfilesDatumCustomField> customFields;
        private String description;
        private String href;
        private List<GetServiceProfilesDatumMarketingInfo> marketingInfos;
        private List<GetServiceProfilesDatumMetro> metros;
        private String name;
        private List<GetServiceProfilesDatumNotification> notifications;
        private List<GetServiceProfilesDatumPort> ports;
        private List<GetServiceProfilesDatumProject> projects;
        private Boolean selfProfile;
        private String state;
        private List<String> tags;
        private String type;
        private String uuid;
        private String viewPoint;
        private List<GetServiceProfilesDatumVirtualDevice> virtualDevices;
        private String visibility;
        public Builder() {}
        public Builder(GetServiceProfilesDatum defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPointTypeConfigs = defaults.accessPointTypeConfigs;
    	      this.accounts = defaults.accounts;
    	      this.allowedEmails = defaults.allowedEmails;
    	      this.changeLogs = defaults.changeLogs;
    	      this.customFields = defaults.customFields;
    	      this.description = defaults.description;
    	      this.href = defaults.href;
    	      this.marketingInfos = defaults.marketingInfos;
    	      this.metros = defaults.metros;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.ports = defaults.ports;
    	      this.projects = defaults.projects;
    	      this.selfProfile = defaults.selfProfile;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.viewPoint = defaults.viewPoint;
    	      this.virtualDevices = defaults.virtualDevices;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder accessPointTypeConfigs(List<GetServiceProfilesDatumAccessPointTypeConfig> accessPointTypeConfigs) {
            if (accessPointTypeConfigs == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "accessPointTypeConfigs");
            }
            this.accessPointTypeConfigs = accessPointTypeConfigs;
            return this;
        }
        public Builder accessPointTypeConfigs(GetServiceProfilesDatumAccessPointTypeConfig... accessPointTypeConfigs) {
            return accessPointTypeConfigs(List.of(accessPointTypeConfigs));
        }
        @CustomType.Setter
        public Builder accounts(List<GetServiceProfilesDatumAccount> accounts) {
            if (accounts == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "accounts");
            }
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(GetServiceProfilesDatumAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder allowedEmails(List<String> allowedEmails) {
            if (allowedEmails == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "allowedEmails");
            }
            this.allowedEmails = allowedEmails;
            return this;
        }
        public Builder allowedEmails(String... allowedEmails) {
            return allowedEmails(List.of(allowedEmails));
        }
        @CustomType.Setter
        public Builder changeLogs(List<GetServiceProfilesDatumChangeLog> changeLogs) {
            if (changeLogs == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "changeLogs");
            }
            this.changeLogs = changeLogs;
            return this;
        }
        public Builder changeLogs(GetServiceProfilesDatumChangeLog... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }
        @CustomType.Setter
        public Builder customFields(List<GetServiceProfilesDatumCustomField> customFields) {
            if (customFields == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "customFields");
            }
            this.customFields = customFields;
            return this;
        }
        public Builder customFields(GetServiceProfilesDatumCustomField... customFields) {
            return customFields(List.of(customFields));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder marketingInfos(List<GetServiceProfilesDatumMarketingInfo> marketingInfos) {
            if (marketingInfos == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "marketingInfos");
            }
            this.marketingInfos = marketingInfos;
            return this;
        }
        public Builder marketingInfos(GetServiceProfilesDatumMarketingInfo... marketingInfos) {
            return marketingInfos(List.of(marketingInfos));
        }
        @CustomType.Setter
        public Builder metros(List<GetServiceProfilesDatumMetro> metros) {
            if (metros == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "metros");
            }
            this.metros = metros;
            return this;
        }
        public Builder metros(GetServiceProfilesDatumMetro... metros) {
            return metros(List.of(metros));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetServiceProfilesDatumNotification> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetServiceProfilesDatumNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder ports(List<GetServiceProfilesDatumPort> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(GetServiceProfilesDatumPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder projects(List<GetServiceProfilesDatumProject> projects) {
            if (projects == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "projects");
            }
            this.projects = projects;
            return this;
        }
        public Builder projects(GetServiceProfilesDatumProject... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder selfProfile(Boolean selfProfile) {
            if (selfProfile == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "selfProfile");
            }
            this.selfProfile = selfProfile;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder viewPoint(String viewPoint) {
            if (viewPoint == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "viewPoint");
            }
            this.viewPoint = viewPoint;
            return this;
        }
        @CustomType.Setter
        public Builder virtualDevices(List<GetServiceProfilesDatumVirtualDevice> virtualDevices) {
            if (virtualDevices == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "virtualDevices");
            }
            this.virtualDevices = virtualDevices;
            return this;
        }
        public Builder virtualDevices(GetServiceProfilesDatumVirtualDevice... virtualDevices) {
            return virtualDevices(List.of(virtualDevices));
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            if (visibility == null) {
              throw new MissingRequiredPropertyException("GetServiceProfilesDatum", "visibility");
            }
            this.visibility = visibility;
            return this;
        }
        public GetServiceProfilesDatum build() {
            final var _resultValue = new GetServiceProfilesDatum();
            _resultValue.accessPointTypeConfigs = accessPointTypeConfigs;
            _resultValue.accounts = accounts;
            _resultValue.allowedEmails = allowedEmails;
            _resultValue.changeLogs = changeLogs;
            _resultValue.customFields = customFields;
            _resultValue.description = description;
            _resultValue.href = href;
            _resultValue.marketingInfos = marketingInfos;
            _resultValue.metros = metros;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.ports = ports;
            _resultValue.projects = projects;
            _resultValue.selfProfile = selfProfile;
            _resultValue.state = state;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.viewPoint = viewPoint;
            _resultValue.virtualDevices = virtualDevices;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
