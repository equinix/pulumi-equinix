// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.equinix.pulumi.Utilities;
import com.equinix.pulumi.fabric.StreamArgs;
import com.equinix.pulumi.fabric.inputs.StreamState;
import com.equinix.pulumi.fabric.outputs.StreamChangeLog;
import com.equinix.pulumi.fabric.outputs.StreamProject;
import com.equinix.pulumi.fabric.outputs.StreamTimeouts;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream
 * 
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.equinix.fabric.Stream;
 * import com.pulumi.equinix.fabric.StreamArgs;
 * import com.pulumi.equinix.fabric.inputs.StreamProjectArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var newStream = new Stream("newStream", StreamArgs.builder()
 *             .type("TELEMETRY_STREAM")
 *             .description("<description_of_stream_resource>")
 *             .project(StreamProjectArgs.builder()
 *                 .project_id("<destination_project_id_for_stream")
 *                 .build())
 *             .build());
 * 
 *         ctx.export("streamState", newStream.state());
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="equinix:fabric/stream:Stream")
public class Stream extends com.pulumi.resources.CustomResource {
    /**
     * Count of the streaming assets attached to the stream resource
     * 
     */
    @Export(name="assetsCount", refs={Double.class}, tree="[0]")
    private Output<Double> assetsCount;

    /**
     * @return Count of the streaming assets attached to the stream resource
     * 
     */
    public Output<Double> assetsCount() {
        return this.assetsCount;
    }
    /**
     * Details of the last change on the stream resource
     * 
     */
    @Export(name="changeLog", refs={StreamChangeLog.class}, tree="[0]")
    private Output<StreamChangeLog> changeLog;

    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public Output<StreamChangeLog> changeLog() {
        return this.changeLog;
    }
    /**
     * Customer-provided description of the stream resource
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Customer-provided description of the stream resource
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    @Export(name="href", refs={String.class}, tree="[0]")
    private Output<String> href;

    /**
     * @return Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    public Output<String> href() {
        return this.href;
    }
    /**
     * Customer-provided name of the stream resource
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Customer-provided name of the stream resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Equinix Project attribute object
     * 
     */
    @Export(name="project", refs={StreamProject.class}, tree="[0]")
    private Output<StreamProject> project;

    /**
     * @return Equinix Project attribute object
     * 
     */
    public Output<StreamProject> project() {
        return this.project;
    }
    /**
     * Value representing provisioning status for the stream resource
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Count of the client subscriptions on the stream resource
     * 
     */
    @Export(name="streamSubscriptionsCount", refs={Double.class}, tree="[0]")
    private Output<Double> streamSubscriptionsCount;

    /**
     * @return Count of the client subscriptions on the stream resource
     * 
     */
    public Output<Double> streamSubscriptionsCount() {
        return this.streamSubscriptionsCount;
    }
    @Export(name="timeouts", refs={StreamTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ StreamTimeouts> timeouts;

    public Output<Optional<StreamTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * Equinix defined Streaming Type
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Equinix defined Streaming Type
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Equinix-assigned unique id for the stream resource
     * 
     */
    @Export(name="uuid", refs={String.class}, tree="[0]")
    private Output<String> uuid;

    /**
     * @return Equinix-assigned unique id for the stream resource
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Stream(java.lang.String name) {
        this(name, StreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Stream(java.lang.String name, StreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Stream(java.lang.String name, StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/stream:Stream", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Stream(java.lang.String name, Output<java.lang.String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("equinix:fabric/stream:Stream", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamArgs makeArgs(StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Stream get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Stream(name, id, state, options);
    }
}
