// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ConnectionRouteFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionRouteFilterArgs Empty = new ConnectionRouteFilterArgs();

    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     * 
     */
    @Import(name="connectionId", required=true)
    private Output<String> connectionId;

    /**
     * @return Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     * 
     */
    public Output<String> connectionId() {
        return this.connectionId;
    }

    /**
     * Direction of the filtering of the attached Route Filter Policy
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Direction of the filtering of the attached Route Filter Policy
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     * 
     */
    @Import(name="routeFilterId", required=true)
    private Output<String> routeFilterId;

    /**
     * @return Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     * 
     */
    public Output<String> routeFilterId() {
        return this.routeFilterId;
    }

    private ConnectionRouteFilterArgs() {}

    private ConnectionRouteFilterArgs(ConnectionRouteFilterArgs $) {
        this.connectionId = $.connectionId;
        this.direction = $.direction;
        this.routeFilterId = $.routeFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionRouteFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionRouteFilterArgs $;

        public Builder() {
            $ = new ConnectionRouteFilterArgs();
        }

        public Builder(ConnectionRouteFilterArgs defaults) {
            $ = new ConnectionRouteFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param direction Direction of the filtering of the attached Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the filtering of the attached Route Filter Policy
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param routeFilterId Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(Output<String> routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        /**
         * @param routeFilterId Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            return routeFilterId(Output.of(routeFilterId));
        }

        public ConnectionRouteFilterArgs build() {
            if ($.connectionId == null) {
                throw new MissingRequiredPropertyException("ConnectionRouteFilterArgs", "connectionId");
            }
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("ConnectionRouteFilterArgs", "direction");
            }
            if ($.routeFilterId == null) {
                throw new MissingRequiredPropertyException("ConnectionRouteFilterArgs", "routeFilterId");
            }
            return $;
        }
    }

}
