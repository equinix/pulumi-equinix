// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetRouteFilterRuleChange;
import com.equinix.pulumi.fabric.outputs.GetRouteFilterRuleChangeLog;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRouteFilterRuleResult {
    /**
     * @return Action that will be taken on IP Addresses matching the rule
     * 
     */
    private String action;
    private List<GetRouteFilterRuleChangeLog> changeLogs;
    /**
     * @return An object with the details of the previous change applied on the Route Filter
     * 
     */
    private List<GetRouteFilterRuleChange> changes;
    /**
     * @return Optional description to add to the Route Filter you will be creating
     * 
     */
    private String description;
    /**
     * @return Route filter rules URI
     * 
     */
    private String href;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the Route Filter
     * 
     */
    private String name;
    /**
     * @return IP Address Prefix to Filter on
     * 
     */
    private String prefix;
    /**
     * @return Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    private String prefixMatch;
    /**
     * @return UUID of the Route Filter Policy the rule is attached to
     * 
     */
    private String routeFilterId;
    /**
     * @return State of the Route Filter Rule in its lifecycle
     * 
     */
    private String state;
    /**
     * @return Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    private String type;
    /**
     * @return Equinix Assigned ID for Route Filter Rule to retrieve data for
     * 
     */
    private String uuid;

    private GetRouteFilterRuleResult() {}
    /**
     * @return Action that will be taken on IP Addresses matching the rule
     * 
     */
    public String action() {
        return this.action;
    }
    public List<GetRouteFilterRuleChangeLog> changeLogs() {
        return this.changeLogs;
    }
    /**
     * @return An object with the details of the previous change applied on the Route Filter
     * 
     */
    public List<GetRouteFilterRuleChange> changes() {
        return this.changes;
    }
    /**
     * @return Optional description to add to the Route Filter you will be creating
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Route filter rules URI
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the Route Filter
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return IP Address Prefix to Filter on
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    public String prefixMatch() {
        return this.prefixMatch;
    }
    /**
     * @return UUID of the Route Filter Policy the rule is attached to
     * 
     */
    public String routeFilterId() {
        return this.routeFilterId;
    }
    /**
     * @return State of the Route Filter Rule in its lifecycle
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix Assigned ID for Route Filter Rule to retrieve data for
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteFilterRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<GetRouteFilterRuleChangeLog> changeLogs;
        private List<GetRouteFilterRuleChange> changes;
        private String description;
        private String href;
        private String id;
        private String name;
        private String prefix;
        private String prefixMatch;
        private String routeFilterId;
        private String state;
        private String type;
        private String uuid;
        public Builder() {}
        public Builder(GetRouteFilterRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.changeLogs = defaults.changeLogs;
    	      this.changes = defaults.changes;
    	      this.description = defaults.description;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.prefix = defaults.prefix;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.routeFilterId = defaults.routeFilterId;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder changeLogs(List<GetRouteFilterRuleChangeLog> changeLogs) {
            if (changeLogs == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "changeLogs");
            }
            this.changeLogs = changeLogs;
            return this;
        }
        public Builder changeLogs(GetRouteFilterRuleChangeLog... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }
        @CustomType.Setter
        public Builder changes(List<GetRouteFilterRuleChange> changes) {
            if (changes == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "changes");
            }
            this.changes = changes;
            return this;
        }
        public Builder changes(GetRouteFilterRuleChange... changes) {
            return changes(List.of(changes));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder prefixMatch(String prefixMatch) {
            if (prefixMatch == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "prefixMatch");
            }
            this.prefixMatch = prefixMatch;
            return this;
        }
        @CustomType.Setter
        public Builder routeFilterId(String routeFilterId) {
            if (routeFilterId == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "routeFilterId");
            }
            this.routeFilterId = routeFilterId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetRouteFilterRuleResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetRouteFilterRuleResult build() {
            final var _resultValue = new GetRouteFilterRuleResult();
            _resultValue.action = action;
            _resultValue.changeLogs = changeLogs;
            _resultValue.changes = changes;
            _resultValue.description = description;
            _resultValue.href = href;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.prefix = prefix;
            _resultValue.prefixMatch = prefixMatch;
            _resultValue.routeFilterId = routeFilterId;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
