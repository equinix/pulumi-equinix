// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge;

import com.equinix.pulumi.equinix.enums.Metro;
import com.equinix.pulumi.equinix.networkedge.enums.FileType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class NetworkFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFileArgs Empty = new NetworkFileArgs();

    /**
     * Boolean value that determines device licensing mode, i.e.,
     * `bring your own license` or `subscription`.
     * 
     */
    @Import(name="byol", required=true)
    private Output<Boolean> byol;

    /**
     * @return Boolean value that determines device licensing mode, i.e.,
     * `bring your own license` or `subscription`.
     * 
     */
    public Output<Boolean> byol() {
        return this.byol;
    }

    /**
     * Uploaded file content, expected to be a UTF-8 encoded string.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return Uploaded file content, expected to be a UTF-8 encoded string.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * Device type code
     * 
     */
    @Import(name="deviceTypeCode", required=true)
    private Output<String> deviceTypeCode;

    /**
     * @return Device type code
     * 
     */
    public Output<String> deviceTypeCode() {
        return this.deviceTypeCode;
    }

    /**
     * File name.
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return File name.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * File upload location metro code. It should match the device location metro code.
     * 
     */
    @Import(name="metroCode", required=true)
    private Output<Either<String,Metro>> metroCode;

    /**
     * @return File upload location metro code. It should match the device location metro code.
     * 
     */
    public Output<Either<String,Metro>> metroCode() {
        return this.metroCode;
    }

    /**
     * File process type (LICENSE or CLOUD_INIT).
     * 
     */
    @Import(name="processType", required=true)
    private Output<Either<String,FileType>> processType;

    /**
     * @return File process type (LICENSE or CLOUD_INIT).
     * 
     */
    public Output<Either<String,FileType>> processType() {
        return this.processType;
    }

    /**
     * Boolean value that determines device management mode, i.e.,
     * `self-managed` or `Equinix-managed`.
     * 
     */
    @Import(name="selfManaged", required=true)
    private Output<Boolean> selfManaged;

    /**
     * @return Boolean value that determines device management mode, i.e.,
     * `self-managed` or `Equinix-managed`.
     * 
     */
    public Output<Boolean> selfManaged() {
        return this.selfManaged;
    }

    private NetworkFileArgs() {}

    private NetworkFileArgs(NetworkFileArgs $) {
        this.byol = $.byol;
        this.content = $.content;
        this.deviceTypeCode = $.deviceTypeCode;
        this.fileName = $.fileName;
        this.metroCode = $.metroCode;
        this.processType = $.processType;
        this.selfManaged = $.selfManaged;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFileArgs $;

        public Builder() {
            $ = new NetworkFileArgs();
        }

        public Builder(NetworkFileArgs defaults) {
            $ = new NetworkFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e.,
         * `bring your own license` or `subscription`.
         * 
         * @return builder
         * 
         */
        public Builder byol(Output<Boolean> byol) {
            $.byol = byol;
            return this;
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e.,
         * `bring your own license` or `subscription`.
         * 
         * @return builder
         * 
         */
        public Builder byol(Boolean byol) {
            return byol(Output.of(byol));
        }

        /**
         * @param content Uploaded file content, expected to be a UTF-8 encoded string.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Uploaded file content, expected to be a UTF-8 encoded string.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param deviceTypeCode Device type code
         * 
         * @return builder
         * 
         */
        public Builder deviceTypeCode(Output<String> deviceTypeCode) {
            $.deviceTypeCode = deviceTypeCode;
            return this;
        }

        /**
         * @param deviceTypeCode Device type code
         * 
         * @return builder
         * 
         */
        public Builder deviceTypeCode(String deviceTypeCode) {
            return deviceTypeCode(Output.of(deviceTypeCode));
        }

        /**
         * @param fileName File name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName File name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Output<Either<String,Metro>> metroCode) {
            $.metroCode = metroCode;
            return this;
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Either<String,Metro> metroCode) {
            return metroCode(Output.of(metroCode));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(String metroCode) {
            return metroCode(Either.ofLeft(metroCode));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Metro metroCode) {
            return metroCode(Either.ofRight(metroCode));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(Output<Either<String,FileType>> processType) {
            $.processType = processType;
            return this;
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(Either<String,FileType> processType) {
            return processType(Output.of(processType));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(String processType) {
            return processType(Either.ofLeft(processType));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(FileType processType) {
            return processType(Either.ofRight(processType));
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e.,
         * `self-managed` or `Equinix-managed`.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(Output<Boolean> selfManaged) {
            $.selfManaged = selfManaged;
            return this;
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e.,
         * `self-managed` or `Equinix-managed`.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(Boolean selfManaged) {
            return selfManaged(Output.of(selfManaged));
        }

        public NetworkFileArgs build() {
            $.byol = Objects.requireNonNull($.byol, "expected parameter 'byol' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.deviceTypeCode = Objects.requireNonNull($.deviceTypeCode, "expected parameter 'deviceTypeCode' to be non-null");
            $.fileName = Objects.requireNonNull($.fileName, "expected parameter 'fileName' to be non-null");
            $.metroCode = Objects.requireNonNull($.metroCode, "expected parameter 'metroCode' to be non-null");
            $.processType = Objects.requireNonNull($.processType, "expected parameter 'processType' to be non-null");
            $.selfManaged = Objects.requireNonNull($.selfManaged, "expected parameter 'selfManaged' to be non-null");
            return $;
        }
    }

}
