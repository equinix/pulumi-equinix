// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteFilterRuleArgs Empty = new RouteFilterRuleArgs();

    /**
     * Optional description to add to the Route Filter you will be creating
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description to add to the Route Filter you will be creating
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the Route Filter
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Route Filter
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * IP Address Prefix to Filter on
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    /**
     * @return IP Address Prefix to Filter on
     * 
     */
    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<String> prefixMatch;

    /**
     * @return Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
     * 
     */
    public Optional<Output<String>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    /**
     * UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    @Import(name="routeFilterId", required=true)
    private Output<String> routeFilterId;

    /**
     * @return UUID of the Route Filter Policy to apply this Rule to
     * 
     */
    public Output<String> routeFilterId() {
        return this.routeFilterId;
    }

    private RouteFilterRuleArgs() {}

    private RouteFilterRuleArgs(RouteFilterRuleArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.prefix = $.prefix;
        this.prefixMatch = $.prefixMatch;
        this.routeFilterId = $.routeFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteFilterRuleArgs $;

        public Builder() {
            $ = new RouteFilterRuleArgs();
        }

        public Builder(RouteFilterRuleArgs defaults) {
            $ = new RouteFilterRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional description to add to the Route Filter you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description to add to the Route Filter you will be creating
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Route Filter
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param prefix IP Address Prefix to Filter on
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix IP Address Prefix to Filter on
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param prefixMatch Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch Prefix matching operator. One of [ orlonger, exact ] Default: &#34;orlonger&#34;
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        /**
         * @param routeFilterId UUID of the Route Filter Policy to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(Output<String> routeFilterId) {
            $.routeFilterId = routeFilterId;
            return this;
        }

        /**
         * @param routeFilterId UUID of the Route Filter Policy to apply this Rule to
         * 
         * @return builder
         * 
         */
        public Builder routeFilterId(String routeFilterId) {
            return routeFilterId(Output.of(routeFilterId));
        }

        public RouteFilterRuleArgs build() {
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("RouteFilterRuleArgs", "prefix");
            }
            if ($.routeFilterId == null) {
                throw new MissingRequiredPropertyException("RouteFilterRuleArgs", "routeFilterId");
            }
            return $;
        }
    }

}
