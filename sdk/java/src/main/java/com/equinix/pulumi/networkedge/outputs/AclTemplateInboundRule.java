// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AclTemplateInboundRule {
    /**
     * @return Inbound rule description, up to 200 characters.
     * 
     */
    private @Nullable String description;
    /**
     * @return Inbound traffic destination ports. Allowed values are a comma separated
     * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    private String dstPort;
    /**
     * @return Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
     * 
     */
    private String protocol;
    private @Nullable Integer sequenceNumber;
    /**
     * @deprecated
     * Source Type will not be returned
     * 
     */
    @Deprecated /* Source Type will not be returned */
    private @Nullable String sourceType;
    /**
     * @return Inbound traffic source ports. Allowed values are a comma separated list
     * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    private String srcPort;
    /**
     * @return Inbound traffic source IP subnet in CIDR format.
     * 
     */
    private @Nullable String subnet;
    /**
     * @return Inbound traffic source IP subnets in CIDR format.
     * 
     * @deprecated
     * Use Subnet instead
     * 
     */
    @Deprecated /* Use Subnet instead */
    private @Nullable List<String> subnets;

    private AclTemplateInboundRule() {}
    /**
     * @return Inbound rule description, up to 200 characters.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Inbound traffic destination ports. Allowed values are a comma separated
     * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    public String dstPort() {
        return this.dstPort;
    }
    /**
     * @return Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    public Optional<Integer> sequenceNumber() {
        return Optional.ofNullable(this.sequenceNumber);
    }
    /**
     * @deprecated
     * Source Type will not be returned
     * 
     */
    @Deprecated /* Source Type will not be returned */
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return Inbound traffic source ports. Allowed values are a comma separated list
     * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
     * 
     */
    public String srcPort() {
        return this.srcPort;
    }
    /**
     * @return Inbound traffic source IP subnet in CIDR format.
     * 
     */
    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }
    /**
     * @return Inbound traffic source IP subnets in CIDR format.
     * 
     * @deprecated
     * Use Subnet instead
     * 
     */
    @Deprecated /* Use Subnet instead */
    public List<String> subnets() {
        return this.subnets == null ? List.of() : this.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AclTemplateInboundRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private String dstPort;
        private String protocol;
        private @Nullable Integer sequenceNumber;
        private @Nullable String sourceType;
        private String srcPort;
        private @Nullable String subnet;
        private @Nullable List<String> subnets;
        public Builder() {}
        public Builder(AclTemplateInboundRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.dstPort = defaults.dstPort;
    	      this.protocol = defaults.protocol;
    	      this.sequenceNumber = defaults.sequenceNumber;
    	      this.sourceType = defaults.sourceType;
    	      this.srcPort = defaults.srcPort;
    	      this.subnet = defaults.subnet;
    	      this.subnets = defaults.subnets;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dstPort(String dstPort) {
            this.dstPort = Objects.requireNonNull(dstPort);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder sequenceNumber(@Nullable Integer sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable String sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder srcPort(String srcPort) {
            this.srcPort = Objects.requireNonNull(srcPort);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(@Nullable String subnet) {
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(@Nullable List<String> subnets) {
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public AclTemplateInboundRule build() {
            final var _resultValue = new AclTemplateInboundRule();
            _resultValue.description = description;
            _resultValue.dstPort = dstPort;
            _resultValue.protocol = protocol;
            _resultValue.sequenceNumber = sequenceNumber;
            _resultValue.sourceType = sourceType;
            _resultValue.srcPort = srcPort;
            _resultValue.subnet = subnet;
            _resultValue.subnets = subnets;
            return _resultValue;
        }
    }
}
