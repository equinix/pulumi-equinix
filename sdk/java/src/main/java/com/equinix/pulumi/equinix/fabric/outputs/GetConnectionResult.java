// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.fabric.outputs;

import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionASide;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionAccount;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionAdditionalInfo;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionChangeLog;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionNotification;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionOperation;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionOrder;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionProject;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionRedundancy;
import com.equinix.pulumi.equinix.fabric.outputs.GetConnectionZSide;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionResult {
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    private List<GetConnectionASide> aSides;
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    private List<GetConnectionAccount> accounts;
    /**
     * @return Connection additional information
     * 
     */
    private List<GetConnectionAdditionalInfo> additionalInfos;
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    private List<GetConnectionChangeLog> changeLogs;
    /**
     * @return Customer-provided connection description
     * 
     */
    private String description;
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    private String direction;
    /**
     * @return Connection URI information
     * 
     */
    private String href;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Connection property derived from access point locations
     * 
     */
    private Boolean isRemote;
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    private String name;
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    private List<GetConnectionNotification> notifications;
    /**
     * @return Connection specific operational data
     * 
     */
    private List<GetConnectionOperation> operations;
    /**
     * @return Order related to this connection information
     * 
     */
    private List<GetConnectionOrder> orders;
    /**
     * @return Project information
     * 
     */
    private @Nullable List<GetConnectionProject> projects;
    /**
     * @return Redundancy Information
     * 
     */
    private List<GetConnectionRedundancy> redundancies;
    /**
     * @return Connection overall state
     * 
     */
    private String state;
    /**
     * @return Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    private @Nullable String uuid;
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    private List<GetConnectionZSide> zSides;

    private GetConnectionResult() {}
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    public List<GetConnectionASide> aSides() {
        return this.aSides;
    }
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    public List<GetConnectionAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Connection additional information
     * 
     */
    public List<GetConnectionAdditionalInfo> additionalInfos() {
        return this.additionalInfos;
    }
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public List<GetConnectionChangeLog> changeLogs() {
        return this.changeLogs;
    }
    /**
     * @return Customer-provided connection description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Connection URI information
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Connection property derived from access point locations
     * 
     */
    public Boolean isRemote() {
        return this.isRemote;
    }
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public List<GetConnectionNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Connection specific operational data
     * 
     */
    public List<GetConnectionOperation> operations() {
        return this.operations;
    }
    /**
     * @return Order related to this connection information
     * 
     */
    public List<GetConnectionOrder> orders() {
        return this.orders;
    }
    /**
     * @return Project information
     * 
     */
    public List<GetConnectionProject> projects() {
        return this.projects == null ? List.of() : this.projects;
    }
    /**
     * @return Redundancy Information
     * 
     */
    public List<GetConnectionRedundancy> redundancies() {
        return this.redundancies;
    }
    /**
     * @return Connection overall state
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    public List<GetConnectionZSide> zSides() {
        return this.zSides;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionASide> aSides;
        private List<GetConnectionAccount> accounts;
        private List<GetConnectionAdditionalInfo> additionalInfos;
        private Integer bandwidth;
        private List<GetConnectionChangeLog> changeLogs;
        private String description;
        private String direction;
        private String href;
        private String id;
        private Boolean isRemote;
        private String name;
        private List<GetConnectionNotification> notifications;
        private List<GetConnectionOperation> operations;
        private List<GetConnectionOrder> orders;
        private @Nullable List<GetConnectionProject> projects;
        private List<GetConnectionRedundancy> redundancies;
        private String state;
        private String type;
        private @Nullable String uuid;
        private List<GetConnectionZSide> zSides;
        public Builder() {}
        public Builder(GetConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aSides = defaults.aSides;
    	      this.accounts = defaults.accounts;
    	      this.additionalInfos = defaults.additionalInfos;
    	      this.bandwidth = defaults.bandwidth;
    	      this.changeLogs = defaults.changeLogs;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.isRemote = defaults.isRemote;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.operations = defaults.operations;
    	      this.orders = defaults.orders;
    	      this.projects = defaults.projects;
    	      this.redundancies = defaults.redundancies;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.zSides = defaults.zSides;
        }

        @CustomType.Setter
        public Builder aSides(List<GetConnectionASide> aSides) {
            this.aSides = Objects.requireNonNull(aSides);
            return this;
        }
        public Builder aSides(GetConnectionASide... aSides) {
            return aSides(List.of(aSides));
        }
        @CustomType.Setter
        public Builder accounts(List<GetConnectionAccount> accounts) {
            this.accounts = Objects.requireNonNull(accounts);
            return this;
        }
        public Builder accounts(GetConnectionAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder additionalInfos(List<GetConnectionAdditionalInfo> additionalInfos) {
            this.additionalInfos = Objects.requireNonNull(additionalInfos);
            return this;
        }
        public Builder additionalInfos(GetConnectionAdditionalInfo... additionalInfos) {
            return additionalInfos(List.of(additionalInfos));
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder changeLogs(List<GetConnectionChangeLog> changeLogs) {
            this.changeLogs = Objects.requireNonNull(changeLogs);
            return this;
        }
        public Builder changeLogs(GetConnectionChangeLog... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            this.href = Objects.requireNonNull(href);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isRemote(Boolean isRemote) {
            this.isRemote = Objects.requireNonNull(isRemote);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetConnectionNotification> notifications) {
            this.notifications = Objects.requireNonNull(notifications);
            return this;
        }
        public Builder notifications(GetConnectionNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder operations(List<GetConnectionOperation> operations) {
            this.operations = Objects.requireNonNull(operations);
            return this;
        }
        public Builder operations(GetConnectionOperation... operations) {
            return operations(List.of(operations));
        }
        @CustomType.Setter
        public Builder orders(List<GetConnectionOrder> orders) {
            this.orders = Objects.requireNonNull(orders);
            return this;
        }
        public Builder orders(GetConnectionOrder... orders) {
            return orders(List.of(orders));
        }
        @CustomType.Setter
        public Builder projects(@Nullable List<GetConnectionProject> projects) {
            this.projects = projects;
            return this;
        }
        public Builder projects(GetConnectionProject... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder redundancies(List<GetConnectionRedundancy> redundancies) {
            this.redundancies = Objects.requireNonNull(redundancies);
            return this;
        }
        public Builder redundancies(GetConnectionRedundancy... redundancies) {
            return redundancies(List.of(redundancies));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder zSides(List<GetConnectionZSide> zSides) {
            this.zSides = Objects.requireNonNull(zSides);
            return this;
        }
        public Builder zSides(GetConnectionZSide... zSides) {
            return zSides(List.of(zSides));
        }
        public GetConnectionResult build() {
            final var o = new GetConnectionResult();
            o.aSides = aSides;
            o.accounts = accounts;
            o.additionalInfos = additionalInfos;
            o.bandwidth = bandwidth;
            o.changeLogs = changeLogs;
            o.description = description;
            o.direction = direction;
            o.href = href;
            o.id = id;
            o.isRemote = isRemote;
            o.name = name;
            o.notifications = notifications;
            o.operations = operations;
            o.orders = orders;
            o.projects = projects;
            o.redundancies = redundancies;
            o.state = state;
            o.type = type;
            o.uuid = uuid;
            o.zSides = zSides;
            return o;
        }
    }
}
