// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.StreamAttachmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final StreamAttachmentState Empty = new StreamAttachmentState();

    /**
     * Equinix defined asset category. Matches the product name the asset is a part of
     * 
     */
    @Import(name="asset")
    private @Nullable Output<String> asset;

    /**
     * @return Equinix defined asset category. Matches the product name the asset is a part of
     * 
     */
    public Optional<Output<String>> asset() {
        return Optional.ofNullable(this.asset);
    }

    /**
     * Equinix defined UUID of the asset being attached to the stream
     * 
     */
    @Import(name="assetId")
    private @Nullable Output<String> assetId;

    /**
     * @return Equinix defined UUID of the asset being attached to the stream
     * 
     */
    public Optional<Output<String>> assetId() {
        return Optional.ofNullable(this.assetId);
    }

    /**
     * Value representing status for the stream attachment
     * 
     */
    @Import(name="attachmentStatus")
    private @Nullable Output<String> attachmentStatus;

    /**
     * @return Value representing status for the stream attachment
     * 
     */
    public Optional<Output<String>> attachmentStatus() {
        return Optional.ofNullable(this.attachmentStatus);
    }

    /**
     * Equinix auto generated URI to the stream attachment in Equinix Portal
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Equinix auto generated URI to the stream attachment in Equinix Portal
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Boolean value indicating enablement of metrics for this asset stream attachment
     * 
     */
    @Import(name="metricsEnabled")
    private @Nullable Output<Boolean> metricsEnabled;

    /**
     * @return Boolean value indicating enablement of metrics for this asset stream attachment
     * 
     */
    public Optional<Output<Boolean>> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }

    /**
     * UUID of the stream that is the target of this asset attachment
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    /**
     * @return UUID of the stream that is the target of this asset attachment
     * 
     */
    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    @Import(name="timeouts")
    private @Nullable Output<StreamAttachmentTimeoutsArgs> timeouts;

    public Optional<Output<StreamAttachmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Equinix defined type for the asset stream attachment
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Equinix defined type for the asset stream attachment
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix-assigned unique id for the stream attachment
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix-assigned unique id for the stream attachment
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private StreamAttachmentState() {}

    private StreamAttachmentState(StreamAttachmentState $) {
        this.asset = $.asset;
        this.assetId = $.assetId;
        this.attachmentStatus = $.attachmentStatus;
        this.href = $.href;
        this.metricsEnabled = $.metricsEnabled;
        this.streamId = $.streamId;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamAttachmentState $;

        public Builder() {
            $ = new StreamAttachmentState();
        }

        public Builder(StreamAttachmentState defaults) {
            $ = new StreamAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param asset Equinix defined asset category. Matches the product name the asset is a part of
         * 
         * @return builder
         * 
         */
        public Builder asset(@Nullable Output<String> asset) {
            $.asset = asset;
            return this;
        }

        /**
         * @param asset Equinix defined asset category. Matches the product name the asset is a part of
         * 
         * @return builder
         * 
         */
        public Builder asset(String asset) {
            return asset(Output.of(asset));
        }

        /**
         * @param assetId Equinix defined UUID of the asset being attached to the stream
         * 
         * @return builder
         * 
         */
        public Builder assetId(@Nullable Output<String> assetId) {
            $.assetId = assetId;
            return this;
        }

        /**
         * @param assetId Equinix defined UUID of the asset being attached to the stream
         * 
         * @return builder
         * 
         */
        public Builder assetId(String assetId) {
            return assetId(Output.of(assetId));
        }

        /**
         * @param attachmentStatus Value representing status for the stream attachment
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(@Nullable Output<String> attachmentStatus) {
            $.attachmentStatus = attachmentStatus;
            return this;
        }

        /**
         * @param attachmentStatus Value representing status for the stream attachment
         * 
         * @return builder
         * 
         */
        public Builder attachmentStatus(String attachmentStatus) {
            return attachmentStatus(Output.of(attachmentStatus));
        }

        /**
         * @param href Equinix auto generated URI to the stream attachment in Equinix Portal
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Equinix auto generated URI to the stream attachment in Equinix Portal
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param metricsEnabled Boolean value indicating enablement of metrics for this asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(@Nullable Output<Boolean> metricsEnabled) {
            $.metricsEnabled = metricsEnabled;
            return this;
        }

        /**
         * @param metricsEnabled Boolean value indicating enablement of metrics for this asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(Boolean metricsEnabled) {
            return metricsEnabled(Output.of(metricsEnabled));
        }

        /**
         * @param streamId UUID of the stream that is the target of this asset attachment
         * 
         * @return builder
         * 
         */
        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId UUID of the stream that is the target of this asset attachment
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public Builder timeouts(@Nullable Output<StreamAttachmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(StreamAttachmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Equinix defined type for the asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Equinix defined type for the asset stream attachment
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix-assigned unique id for the stream attachment
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix-assigned unique id for the stream attachment
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public StreamAttachmentState build() {
            return $;
        }
    }

}
