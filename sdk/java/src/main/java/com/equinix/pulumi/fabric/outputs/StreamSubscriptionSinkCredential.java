// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSubscriptionSinkCredential {
    /**
     * @return Passed as Authorization header value
     * 
     */
    private @Nullable String accessToken;
    /**
     * @return Passed as Authorization header value
     * 
     */
    private @Nullable String apiKey;
    /**
     * @return Passed as Authorization header value
     * 
     */
    private @Nullable String integrationKey;
    /**
     * @return Passed as Authorization header value
     * 
     */
    private @Nullable String password;
    /**
     * @return Type of the credential being passed
     * 
     */
    private String type;
    /**
     * @return Passed as Authorization header value
     * 
     */
    private @Nullable String username;

    private StreamSubscriptionSinkCredential() {}
    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }
    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<String> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }
    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Type of the credential being passed
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Passed as Authorization header value
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSubscriptionSinkCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable String apiKey;
        private @Nullable String integrationKey;
        private @Nullable String password;
        private String type;
        private @Nullable String username;
        public Builder() {}
        public Builder(StreamSubscriptionSinkCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.apiKey = defaults.apiKey;
    	      this.integrationKey = defaults.integrationKey;
    	      this.password = defaults.password;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {

            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder apiKey(@Nullable String apiKey) {

            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder integrationKey(@Nullable String integrationKey) {

            this.integrationKey = integrationKey;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("StreamSubscriptionSinkCredential", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public StreamSubscriptionSinkCredential build() {
            final var _resultValue = new StreamSubscriptionSinkCredential();
            _resultValue.accessToken = accessToken;
            _resultValue.apiKey = apiKey;
            _resultValue.integrationKey = integrationKey;
            _resultValue.password = password;
            _resultValue.type = type;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
