// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetServiceTokensDataAccount;
import com.equinix.pulumi.fabric.outputs.GetServiceTokensDataChangeLog;
import com.equinix.pulumi.fabric.outputs.GetServiceTokensDataNotification;
import com.equinix.pulumi.fabric.outputs.GetServiceTokensDataProject;
import com.equinix.pulumi.fabric.outputs.GetServiceTokensDataServiceTokenConnection;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTokensData {
    /**
     * @return Customer account information that is associated with this service token
     * 
     */
    private List<GetServiceTokensDataAccount> accounts;
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    private List<GetServiceTokensDataChangeLog> changeLogs;
    /**
     * @return Optional Description to the Service Token you will be creating
     * 
     */
    private String description;
    /**
     * @return Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    private String expirationDateTime;
    /**
     * @return An absolute URL that is the subject of the link&#39;s context.
     * 
     */
    private String href;
    /**
     * @return Information about token side; ASIDE, ZSIDE
     * 
     */
    private String issuerSide;
    /**
     * @return Name of the Service Token
     * 
     */
    private String name;
    /**
     * @return Preferences for notifications on Service Token configuration or status changes
     * 
     */
    private List<GetServiceTokensDataNotification> notifications;
    /**
     * @return Project information
     * 
     */
    private List<GetServiceTokensDataProject> projects;
    /**
     * @return Service Token Connection Type Information
     * 
     */
    private List<GetServiceTokensDataServiceTokenConnection> serviceTokenConnections;
    /**
     * @return Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     * 
     */
    private String state;
    /**
     * @return Service Token Type; VC_TOKEN,EPL_TOKEN
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned service token identifier
     * 
     */
    private String uuid;

    private GetServiceTokensData() {}
    /**
     * @return Customer account information that is associated with this service token
     * 
     */
    public List<GetServiceTokensDataAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public List<GetServiceTokensDataChangeLog> changeLogs() {
        return this.changeLogs;
    }
    /**
     * @return Optional Description to the Service Token you will be creating
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Expiration date and time of the service token; 2020-11-06T07:00:00Z
     * 
     */
    public String expirationDateTime() {
        return this.expirationDateTime;
    }
    /**
     * @return An absolute URL that is the subject of the link&#39;s context.
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return Information about token side; ASIDE, ZSIDE
     * 
     */
    public String issuerSide() {
        return this.issuerSide;
    }
    /**
     * @return Name of the Service Token
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferences for notifications on Service Token configuration or status changes
     * 
     */
    public List<GetServiceTokensDataNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Project information
     * 
     */
    public List<GetServiceTokensDataProject> projects() {
        return this.projects;
    }
    /**
     * @return Service Token Connection Type Information
     * 
     */
    public List<GetServiceTokensDataServiceTokenConnection> serviceTokenConnections() {
        return this.serviceTokenConnections;
    }
    /**
     * @return Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Service Token Type; VC_TOKEN,EPL_TOKEN
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned service token identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTokensData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceTokensDataAccount> accounts;
        private List<GetServiceTokensDataChangeLog> changeLogs;
        private String description;
        private String expirationDateTime;
        private String href;
        private String issuerSide;
        private String name;
        private List<GetServiceTokensDataNotification> notifications;
        private List<GetServiceTokensDataProject> projects;
        private List<GetServiceTokensDataServiceTokenConnection> serviceTokenConnections;
        private String state;
        private String type;
        private String uuid;
        public Builder() {}
        public Builder(GetServiceTokensData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accounts = defaults.accounts;
    	      this.changeLogs = defaults.changeLogs;
    	      this.description = defaults.description;
    	      this.expirationDateTime = defaults.expirationDateTime;
    	      this.href = defaults.href;
    	      this.issuerSide = defaults.issuerSide;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.projects = defaults.projects;
    	      this.serviceTokenConnections = defaults.serviceTokenConnections;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder accounts(List<GetServiceTokensDataAccount> accounts) {
            if (accounts == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "accounts");
            }
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(GetServiceTokensDataAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder changeLogs(List<GetServiceTokensDataChangeLog> changeLogs) {
            if (changeLogs == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "changeLogs");
            }
            this.changeLogs = changeLogs;
            return this;
        }
        public Builder changeLogs(GetServiceTokensDataChangeLog... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDateTime(String expirationDateTime) {
            if (expirationDateTime == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "expirationDateTime");
            }
            this.expirationDateTime = expirationDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder issuerSide(String issuerSide) {
            if (issuerSide == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "issuerSide");
            }
            this.issuerSide = issuerSide;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetServiceTokensDataNotification> notifications) {
            if (notifications == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "notifications");
            }
            this.notifications = notifications;
            return this;
        }
        public Builder notifications(GetServiceTokensDataNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder projects(List<GetServiceTokensDataProject> projects) {
            if (projects == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "projects");
            }
            this.projects = projects;
            return this;
        }
        public Builder projects(GetServiceTokensDataProject... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder serviceTokenConnections(List<GetServiceTokensDataServiceTokenConnection> serviceTokenConnections) {
            if (serviceTokenConnections == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "serviceTokenConnections");
            }
            this.serviceTokenConnections = serviceTokenConnections;
            return this;
        }
        public Builder serviceTokenConnections(GetServiceTokensDataServiceTokenConnection... serviceTokenConnections) {
            return serviceTokenConnections(List.of(serviceTokenConnections));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetServiceTokensData", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetServiceTokensData build() {
            final var _resultValue = new GetServiceTokensData();
            _resultValue.accounts = accounts;
            _resultValue.changeLogs = changeLogs;
            _resultValue.description = description;
            _resultValue.expirationDateTime = expirationDateTime;
            _resultValue.href = href;
            _resultValue.issuerSide = issuerSide;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.projects = projects;
            _resultValue.serviceTokenConnections = serviceTokenConnections;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
