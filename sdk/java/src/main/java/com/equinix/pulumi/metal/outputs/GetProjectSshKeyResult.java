// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectSshKeyResult {
    /**
     * @return The timestamp for when the SSH key was created.
     * 
     */
    private String created;
    /**
     * @return The fingerprint of the SSH key.
     * 
     */
    private String fingerprint;
    /**
     * @return The unique ID of the key.
     * 
     */
    private String id;
    /**
     * @return The name of the SSH key.
     * 
     */
    private String name;
    /**
     * @return The ID of parent project (same as project_id).
     * 
     */
    private String ownerId;
    /**
     * @return The ID of parent project.
     * 
     */
    private String projectId;
    /**
     * @return The text of the public key.
     * 
     */
    private String publicKey;
    private @Nullable String search;
    /**
     * @return The timestamp for the last time the SSH key was updated.
     * 
     */
    private String updated;

    private GetProjectSshKeyResult() {}
    /**
     * @return The timestamp for when the SSH key was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The fingerprint of the SSH key.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return The unique ID of the key.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the SSH key.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of parent project (same as project_id).
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return The ID of parent project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The text of the public key.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return The timestamp for the last time the SSH key was updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectSshKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String created;
        private String fingerprint;
        private String id;
        private String name;
        private String ownerId;
        private String projectId;
        private String publicKey;
        private @Nullable String search;
        private String updated;
        public Builder() {}
        public Builder(GetProjectSshKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.ownerId = defaults.ownerId;
    	      this.projectId = defaults.projectId;
    	      this.publicKey = defaults.publicKey;
    	      this.search = defaults.search;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(String ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {

            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetProjectSshKeyResult", "updated");
            }
            this.updated = updated;
            return this;
        }
        public GetProjectSshKeyResult build() {
            final var _resultValue = new GetProjectSshKeyResult();
            _resultValue.created = created;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.ownerId = ownerId;
            _resultValue.projectId = projectId;
            _resultValue.publicKey = publicKey;
            _resultValue.search = search;
            _resultValue.updated = updated;
            return _resultValue;
        }
    }
}
