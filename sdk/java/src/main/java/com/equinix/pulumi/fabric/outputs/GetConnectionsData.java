// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetConnectionsDataASide;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataAccount;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataChangeLog;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataNotification;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataOperation;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataOrder;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataProject;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataRedundancy;
import com.equinix.pulumi.fabric.outputs.GetConnectionsDataZSide;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetConnectionsData {
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    private List<GetConnectionsDataASide> aSides;
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    private List<GetConnectionsDataAccount> accounts;
    /**
     * @return Connection additional information
     * 
     */
    private List<Map<String,Object>> additionalInfos;
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    private List<GetConnectionsDataChangeLog> changeLogs;
    /**
     * @return Customer-provided connection description
     * 
     */
    private String description;
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    private String direction;
    /**
     * @return Connection URI information
     * 
     */
    private String href;
    /**
     * @return Connection property derived from access point locations
     * 
     */
    private Boolean isRemote;
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    private String name;
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    private List<GetConnectionsDataNotification> notifications;
    /**
     * @return Connection type-specific operational data
     * 
     */
    private List<GetConnectionsDataOperation> operations;
    /**
     * @return Order details
     * 
     */
    private List<GetConnectionsDataOrder> orders;
    /**
     * @return Project information
     * 
     */
    private List<GetConnectionsDataProject> projects;
    /**
     * @return Connection Redundancy Configuration
     * 
     */
    private List<GetConnectionsDataRedundancy> redundancies;
    /**
     * @return Connection overall state
     * 
     */
    private String state;
    /**
     * @return Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC, EC_VC
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    private String uuid;
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    private List<GetConnectionsDataZSide> zSides;

    private GetConnectionsData() {}
    /**
     * @return Requester or Customer side connection configuration object of the multi-segment connection
     * 
     */
    public List<GetConnectionsDataASide> aSides() {
        return this.aSides;
    }
    /**
     * @return Customer account information that is associated with this connection
     * 
     */
    public List<GetConnectionsDataAccount> accounts() {
        return this.accounts;
    }
    /**
     * @return Connection additional information
     * 
     */
    public List<Map<String,Object>> additionalInfos() {
        return this.additionalInfos;
    }
    /**
     * @return Connection bandwidth in Mbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Captures connection lifecycle change information
     * 
     */
    public List<GetConnectionsDataChangeLog> changeLogs() {
        return this.changeLogs;
    }
    /**
     * @return Customer-provided connection description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Connection directionality from the requester point of view
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Connection URI information
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return Connection property derived from access point locations
     * 
     */
    public Boolean isRemote() {
        return this.isRemote;
    }
    /**
     * @return Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Preferences for notifications on connection configuration or status changes
     * 
     */
    public List<GetConnectionsDataNotification> notifications() {
        return this.notifications;
    }
    /**
     * @return Connection type-specific operational data
     * 
     */
    public List<GetConnectionsDataOperation> operations() {
        return this.operations;
    }
    /**
     * @return Order details
     * 
     */
    public List<GetConnectionsDataOrder> orders() {
        return this.orders;
    }
    /**
     * @return Project information
     * 
     */
    public List<GetConnectionsDataProject> projects() {
        return this.projects;
    }
    /**
     * @return Connection Redundancy Configuration
     * 
     */
    public List<GetConnectionsDataRedundancy> redundancies() {
        return this.redundancies;
    }
    /**
     * @return Connection overall state
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC, EC_VC
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Destination or Provider side connection configuration object of the multi-segment connection
     * 
     */
    public List<GetConnectionsDataZSide> zSides() {
        return this.zSides;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionsData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetConnectionsDataASide> aSides;
        private List<GetConnectionsDataAccount> accounts;
        private List<Map<String,Object>> additionalInfos;
        private Integer bandwidth;
        private List<GetConnectionsDataChangeLog> changeLogs;
        private String description;
        private String direction;
        private String href;
        private Boolean isRemote;
        private String name;
        private List<GetConnectionsDataNotification> notifications;
        private List<GetConnectionsDataOperation> operations;
        private List<GetConnectionsDataOrder> orders;
        private List<GetConnectionsDataProject> projects;
        private List<GetConnectionsDataRedundancy> redundancies;
        private String state;
        private String type;
        private String uuid;
        private List<GetConnectionsDataZSide> zSides;
        public Builder() {}
        public Builder(GetConnectionsData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aSides = defaults.aSides;
    	      this.accounts = defaults.accounts;
    	      this.additionalInfos = defaults.additionalInfos;
    	      this.bandwidth = defaults.bandwidth;
    	      this.changeLogs = defaults.changeLogs;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.href = defaults.href;
    	      this.isRemote = defaults.isRemote;
    	      this.name = defaults.name;
    	      this.notifications = defaults.notifications;
    	      this.operations = defaults.operations;
    	      this.orders = defaults.orders;
    	      this.projects = defaults.projects;
    	      this.redundancies = defaults.redundancies;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.zSides = defaults.zSides;
        }

        @CustomType.Setter
        public Builder aSides(List<GetConnectionsDataASide> aSides) {
            this.aSides = Objects.requireNonNull(aSides);
            return this;
        }
        public Builder aSides(GetConnectionsDataASide... aSides) {
            return aSides(List.of(aSides));
        }
        @CustomType.Setter
        public Builder accounts(List<GetConnectionsDataAccount> accounts) {
            this.accounts = Objects.requireNonNull(accounts);
            return this;
        }
        public Builder accounts(GetConnectionsDataAccount... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder additionalInfos(List<Map<String,Object>> additionalInfos) {
            this.additionalInfos = Objects.requireNonNull(additionalInfos);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder changeLogs(List<GetConnectionsDataChangeLog> changeLogs) {
            this.changeLogs = Objects.requireNonNull(changeLogs);
            return this;
        }
        public Builder changeLogs(GetConnectionsDataChangeLog... changeLogs) {
            return changeLogs(List.of(changeLogs));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            this.href = Objects.requireNonNull(href);
            return this;
        }
        @CustomType.Setter
        public Builder isRemote(Boolean isRemote) {
            this.isRemote = Objects.requireNonNull(isRemote);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notifications(List<GetConnectionsDataNotification> notifications) {
            this.notifications = Objects.requireNonNull(notifications);
            return this;
        }
        public Builder notifications(GetConnectionsDataNotification... notifications) {
            return notifications(List.of(notifications));
        }
        @CustomType.Setter
        public Builder operations(List<GetConnectionsDataOperation> operations) {
            this.operations = Objects.requireNonNull(operations);
            return this;
        }
        public Builder operations(GetConnectionsDataOperation... operations) {
            return operations(List.of(operations));
        }
        @CustomType.Setter
        public Builder orders(List<GetConnectionsDataOrder> orders) {
            this.orders = Objects.requireNonNull(orders);
            return this;
        }
        public Builder orders(GetConnectionsDataOrder... orders) {
            return orders(List.of(orders));
        }
        @CustomType.Setter
        public Builder projects(List<GetConnectionsDataProject> projects) {
            this.projects = Objects.requireNonNull(projects);
            return this;
        }
        public Builder projects(GetConnectionsDataProject... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder redundancies(List<GetConnectionsDataRedundancy> redundancies) {
            this.redundancies = Objects.requireNonNull(redundancies);
            return this;
        }
        public Builder redundancies(GetConnectionsDataRedundancy... redundancies) {
            return redundancies(List.of(redundancies));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            this.uuid = Objects.requireNonNull(uuid);
            return this;
        }
        @CustomType.Setter
        public Builder zSides(List<GetConnectionsDataZSide> zSides) {
            this.zSides = Objects.requireNonNull(zSides);
            return this;
        }
        public Builder zSides(GetConnectionsDataZSide... zSides) {
            return zSides(List.of(zSides));
        }
        public GetConnectionsData build() {
            final var _resultValue = new GetConnectionsData();
            _resultValue.aSides = aSides;
            _resultValue.accounts = accounts;
            _resultValue.additionalInfos = additionalInfos;
            _resultValue.bandwidth = bandwidth;
            _resultValue.changeLogs = changeLogs;
            _resultValue.description = description;
            _resultValue.direction = direction;
            _resultValue.href = href;
            _resultValue.isRemote = isRemote;
            _resultValue.name = name;
            _resultValue.notifications = notifications;
            _resultValue.operations = operations;
            _resultValue.orders = orders;
            _resultValue.projects = projects;
            _resultValue.redundancies = redundancies;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.zSides = zSides;
            return _resultValue;
        }
    }
}
