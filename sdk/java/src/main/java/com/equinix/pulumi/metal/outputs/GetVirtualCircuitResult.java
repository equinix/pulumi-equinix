// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVirtualCircuitResult {
    /**
     * @return UUID of Connection where the VC is scoped to.
     * 
     */
    private String connectionId;
    /**
     * @return The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    private String customerIp;
    /**
     * @return Description for the Virtual Circuit resource.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The password that can be set for the VRF BGP peer
     * 
     */
    private String md5;
    /**
     * @return The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    private String metalIp;
    /**
     * @return Name of the virtual circuit resource.
     * 
     */
    private String name;
    private Integer nniVlan;
    private Integer nniVnid;
    /**
     * @return The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.
     * 
     */
    private Integer peerAsn;
    /**
     * @return UUID of the Connection Port where the VC is scoped to.
     * 
     */
    private String portId;
    /**
     * @return ID of project to which the VC belongs.
     * 
     */
    private String projectId;
    /**
     * @return Speed of the Virtual Circuit resource.
     * 
     */
    private String speed;
    /**
     * @return Status of the virtal circuit.
     * 
     */
    private String status;
    /**
     * @return A subnet from one of the IP
     * blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * * For a /31 block, it will only have two IP addresses, which will be used for
     *   the metal_ip and customer_ip.
     * * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    private String subnet;
    /**
     * @return Tags for the Virtual Circuit resource.
     * 
     */
    private List<String> tags;
    private String virtualCircuitId;
    private String vlanId;
    /**
     * @return , `nni_vlan`, `nni_nvid` - VLAN parameters, see the
     * [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).
     * 
     */
    private Integer vnid;
    /**
     * @return UUID of the VLAN to associate.
     * 
     */
    private String vrfId;

    private GetVirtualCircuitResult() {}
    /**
     * @return UUID of Connection where the VC is scoped to.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    public String customerIp() {
        return this.customerIp;
    }
    /**
     * @return Description for the Virtual Circuit resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The password that can be set for the VRF BGP peer
     * 
     */
    public String md5() {
        return this.md5;
    }
    /**
     * @return The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    public String metalIp() {
        return this.metalIp;
    }
    /**
     * @return Name of the virtual circuit resource.
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer nniVlan() {
        return this.nniVlan;
    }
    public Integer nniVnid() {
        return this.nniVnid;
    }
    /**
     * @return The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.
     * 
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }
    /**
     * @return UUID of the Connection Port where the VC is scoped to.
     * 
     */
    public String portId() {
        return this.portId;
    }
    /**
     * @return ID of project to which the VC belongs.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Speed of the Virtual Circuit resource.
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Status of the virtal circuit.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A subnet from one of the IP
     * blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * * For a /31 block, it will only have two IP addresses, which will be used for
     *   the metal_ip and customer_ip.
     * * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return Tags for the Virtual Circuit resource.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    public String virtualCircuitId() {
        return this.virtualCircuitId;
    }
    public String vlanId() {
        return this.vlanId;
    }
    /**
     * @return , `nni_vlan`, `nni_nvid` - VLAN parameters, see the
     * [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).
     * 
     */
    public Integer vnid() {
        return this.vnid;
    }
    /**
     * @return UUID of the VLAN to associate.
     * 
     */
    public String vrfId() {
        return this.vrfId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualCircuitResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private String customerIp;
        private String description;
        private String id;
        private String md5;
        private String metalIp;
        private String name;
        private Integer nniVlan;
        private Integer nniVnid;
        private Integer peerAsn;
        private String portId;
        private String projectId;
        private String speed;
        private String status;
        private String subnet;
        private List<String> tags;
        private String virtualCircuitId;
        private String vlanId;
        private Integer vnid;
        private String vrfId;
        public Builder() {}
        public Builder(GetVirtualCircuitResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.customerIp = defaults.customerIp;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.md5 = defaults.md5;
    	      this.metalIp = defaults.metalIp;
    	      this.name = defaults.name;
    	      this.nniVlan = defaults.nniVlan;
    	      this.nniVnid = defaults.nniVnid;
    	      this.peerAsn = defaults.peerAsn;
    	      this.portId = defaults.portId;
    	      this.projectId = defaults.projectId;
    	      this.speed = defaults.speed;
    	      this.status = defaults.status;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.virtualCircuitId = defaults.virtualCircuitId;
    	      this.vlanId = defaults.vlanId;
    	      this.vnid = defaults.vnid;
    	      this.vrfId = defaults.vrfId;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            this.connectionId = Objects.requireNonNull(connectionId);
            return this;
        }
        @CustomType.Setter
        public Builder customerIp(String customerIp) {
            this.customerIp = Objects.requireNonNull(customerIp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder md5(String md5) {
            this.md5 = Objects.requireNonNull(md5);
            return this;
        }
        @CustomType.Setter
        public Builder metalIp(String metalIp) {
            this.metalIp = Objects.requireNonNull(metalIp);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nniVlan(Integer nniVlan) {
            this.nniVlan = Objects.requireNonNull(nniVlan);
            return this;
        }
        @CustomType.Setter
        public Builder nniVnid(Integer nniVnid) {
            this.nniVnid = Objects.requireNonNull(nniVnid);
            return this;
        }
        @CustomType.Setter
        public Builder peerAsn(Integer peerAsn) {
            this.peerAsn = Objects.requireNonNull(peerAsn);
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            this.portId = Objects.requireNonNull(portId);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            this.speed = Objects.requireNonNull(speed);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder virtualCircuitId(String virtualCircuitId) {
            this.virtualCircuitId = Objects.requireNonNull(virtualCircuitId);
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(String vlanId) {
            this.vlanId = Objects.requireNonNull(vlanId);
            return this;
        }
        @CustomType.Setter
        public Builder vnid(Integer vnid) {
            this.vnid = Objects.requireNonNull(vnid);
            return this;
        }
        @CustomType.Setter
        public Builder vrfId(String vrfId) {
            this.vrfId = Objects.requireNonNull(vrfId);
            return this;
        }
        public GetVirtualCircuitResult build() {
            final var o = new GetVirtualCircuitResult();
            o.connectionId = connectionId;
            o.customerIp = customerIp;
            o.description = description;
            o.id = id;
            o.md5 = md5;
            o.metalIp = metalIp;
            o.name = name;
            o.nniVlan = nniVlan;
            o.nniVnid = nniVnid;
            o.peerAsn = peerAsn;
            o.portId = portId;
            o.projectId = projectId;
            o.speed = speed;
            o.status = status;
            o.subnet = subnet;
            o.tags = tags;
            o.virtualCircuitId = virtualCircuitId;
            o.vlanId = vlanId;
            o.vnid = vnid;
            o.vrfId = vrfId;
            return o;
        }
    }
}
