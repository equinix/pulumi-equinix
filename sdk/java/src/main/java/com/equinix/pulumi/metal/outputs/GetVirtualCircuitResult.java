// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualCircuitResult {
    /**
     * @return UUID of Connection where the VC is scoped to
     * 
     */
    private String connectionId;
    /**
     * @return The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    private String customerIp;
    /**
     * @return The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
     * 
     */
    private @Nullable String customerIpv6;
    /**
     * @return Description of the virtual circuit
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The password that can be set for the VRF BGP peer
     * 
     */
    private String md5;
    /**
     * @return The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    private String metalIp;
    /**
     * @return The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
     * 
     */
    private @Nullable String metalIpv6;
    /**
     * @return Name of the virtual circuit
     * 
     */
    private String name;
    /**
     * @return Nni VLAN parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    private Integer nniVlan;
    /**
     * @return Nni VLAN ID parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    private Integer nniVnid;
    /**
     * @return The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.
     * 
     */
    private Integer peerAsn;
    /**
     * @return UUID of the Connection Port where the VC is scoped to
     * 
     */
    private String portId;
    /**
     * @return ID of the projct to which the virtual circuit belongs
     * 
     */
    private String projectId;
    /**
     * @return Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
     * 
     */
    private String speed;
    /**
     * @return Status of the virtual circuit
     * 
     */
    private String status;
    /**
     * @return A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    private String subnet;
    /**
     * @return A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
     * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    private @Nullable String subnetIpv6;
    /**
     * @return Tags attached to the virtual circuit
     * 
     */
    private List<String> tags;
    /**
     * @return ID of the virtual circuit to lookup
     * 
     */
    private String virtualCircuitId;
    /**
     * @return UUID of the associated VLAN
     * 
     */
    private String vlanId;
    /**
     * @return VNID VLAN parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    private Integer vnid;
    /**
     * @return UUID of the associated VRF
     * 
     */
    private String vrfId;

    private GetVirtualCircuitResult() {}
    /**
     * @return UUID of Connection where the VC is scoped to
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.
     * 
     */
    public String customerIp() {
        return this.customerIp;
    }
    /**
     * @return The Customer IPv6 address which the CSR switch will peer with. Will default to the other usable IP in the IPv6 subnet.
     * 
     */
    public Optional<String> customerIpv6() {
        return Optional.ofNullable(this.customerIpv6);
    }
    /**
     * @return Description of the virtual circuit
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The password that can be set for the VRF BGP peer
     * 
     */
    public String md5() {
        return this.md5;
    }
    /**
     * @return The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.
     * 
     */
    public String metalIp() {
        return this.metalIp;
    }
    /**
     * @return The Metal IPv6 address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the IPv6 subnet.
     * 
     */
    public Optional<String> metalIpv6() {
        return Optional.ofNullable(this.metalIpv6);
    }
    /**
     * @return Name of the virtual circuit
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Nni VLAN parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    public Integer nniVlan() {
        return this.nniVlan;
    }
    /**
     * @return Nni VLAN ID parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    public Integer nniVnid() {
        return this.nniVnid;
    }
    /**
     * @return The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.
     * 
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }
    /**
     * @return UUID of the Connection Port where the VC is scoped to
     * 
     */
    public String portId() {
        return this.portId;
    }
    /**
     * @return ID of the projct to which the virtual circuit belongs
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Status of the virtual circuit
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.
     * 			 * For a /31 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return A subnet from one of the IPv6 blocks associated with the VRF that we will help create an IP reservation for. Can only be either a /126 or /127.
     * 			 * For a /127 block, it will only have two IP addresses, which will be used for the metal*ip and customer*ip.
     * 			 * For a /126 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.
     * 
     */
    public Optional<String> subnetIpv6() {
        return Optional.ofNullable(this.subnetIpv6);
    }
    /**
     * @return Tags attached to the virtual circuit
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return ID of the virtual circuit to lookup
     * 
     */
    public String virtualCircuitId() {
        return this.virtualCircuitId;
    }
    /**
     * @return UUID of the associated VLAN
     * 
     */
    public String vlanId() {
        return this.vlanId;
    }
    /**
     * @return VNID VLAN parameter, see https://deploy.equinix.com/developers/docs/metal/interconnections/introduction/
     * 
     */
    public Integer vnid() {
        return this.vnid;
    }
    /**
     * @return UUID of the associated VRF
     * 
     */
    public String vrfId() {
        return this.vrfId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualCircuitResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectionId;
        private String customerIp;
        private @Nullable String customerIpv6;
        private String description;
        private String id;
        private String md5;
        private String metalIp;
        private @Nullable String metalIpv6;
        private String name;
        private Integer nniVlan;
        private Integer nniVnid;
        private Integer peerAsn;
        private String portId;
        private String projectId;
        private String speed;
        private String status;
        private String subnet;
        private @Nullable String subnetIpv6;
        private List<String> tags;
        private String virtualCircuitId;
        private String vlanId;
        private Integer vnid;
        private String vrfId;
        public Builder() {}
        public Builder(GetVirtualCircuitResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionId = defaults.connectionId;
    	      this.customerIp = defaults.customerIp;
    	      this.customerIpv6 = defaults.customerIpv6;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.md5 = defaults.md5;
    	      this.metalIp = defaults.metalIp;
    	      this.metalIpv6 = defaults.metalIpv6;
    	      this.name = defaults.name;
    	      this.nniVlan = defaults.nniVlan;
    	      this.nniVnid = defaults.nniVnid;
    	      this.peerAsn = defaults.peerAsn;
    	      this.portId = defaults.portId;
    	      this.projectId = defaults.projectId;
    	      this.speed = defaults.speed;
    	      this.status = defaults.status;
    	      this.subnet = defaults.subnet;
    	      this.subnetIpv6 = defaults.subnetIpv6;
    	      this.tags = defaults.tags;
    	      this.virtualCircuitId = defaults.virtualCircuitId;
    	      this.vlanId = defaults.vlanId;
    	      this.vnid = defaults.vnid;
    	      this.vrfId = defaults.vrfId;
        }

        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder customerIp(String customerIp) {
            if (customerIp == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "customerIp");
            }
            this.customerIp = customerIp;
            return this;
        }
        @CustomType.Setter
        public Builder customerIpv6(@Nullable String customerIpv6) {

            this.customerIpv6 = customerIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder md5(String md5) {
            if (md5 == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "md5");
            }
            this.md5 = md5;
            return this;
        }
        @CustomType.Setter
        public Builder metalIp(String metalIp) {
            if (metalIp == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "metalIp");
            }
            this.metalIp = metalIp;
            return this;
        }
        @CustomType.Setter
        public Builder metalIpv6(@Nullable String metalIpv6) {

            this.metalIpv6 = metalIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nniVlan(Integer nniVlan) {
            if (nniVlan == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "nniVlan");
            }
            this.nniVlan = nniVlan;
            return this;
        }
        @CustomType.Setter
        public Builder nniVnid(Integer nniVnid) {
            if (nniVnid == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "nniVnid");
            }
            this.nniVnid = nniVnid;
            return this;
        }
        @CustomType.Setter
        public Builder peerAsn(Integer peerAsn) {
            if (peerAsn == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "peerAsn");
            }
            this.peerAsn = peerAsn;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIpv6(@Nullable String subnetIpv6) {

            this.subnetIpv6 = subnetIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder virtualCircuitId(String virtualCircuitId) {
            if (virtualCircuitId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "virtualCircuitId");
            }
            this.virtualCircuitId = virtualCircuitId;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(String vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vnid(Integer vnid) {
            if (vnid == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "vnid");
            }
            this.vnid = vnid;
            return this;
        }
        @CustomType.Setter
        public Builder vrfId(String vrfId) {
            if (vrfId == null) {
              throw new MissingRequiredPropertyException("GetVirtualCircuitResult", "vrfId");
            }
            this.vrfId = vrfId;
            return this;
        }
        public GetVirtualCircuitResult build() {
            final var _resultValue = new GetVirtualCircuitResult();
            _resultValue.connectionId = connectionId;
            _resultValue.customerIp = customerIp;
            _resultValue.customerIpv6 = customerIpv6;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.md5 = md5;
            _resultValue.metalIp = metalIp;
            _resultValue.metalIpv6 = metalIpv6;
            _resultValue.name = name;
            _resultValue.nniVlan = nniVlan;
            _resultValue.nniVnid = nniVnid;
            _resultValue.peerAsn = peerAsn;
            _resultValue.portId = portId;
            _resultValue.projectId = projectId;
            _resultValue.speed = speed;
            _resultValue.status = status;
            _resultValue.subnet = subnet;
            _resultValue.subnetIpv6 = subnetIpv6;
            _resultValue.tags = tags;
            _resultValue.virtualCircuitId = virtualCircuitId;
            _resultValue.vlanId = vlanId;
            _resultValue.vnid = vnid;
            _resultValue.vrfId = vrfId;
            return _resultValue;
        }
    }
}
