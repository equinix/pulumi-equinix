// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetRouteFiltersFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRouteFiltersFilterArgs Empty = new GetRouteFiltersFilterArgs();

    /**
     * Possible operators to use on the filter property. Can be one of the following: [ &#34;=&#34;, &#34;!=&#34;, &#34;[NOT] LIKE&#34;, &#34;[NOT] IN&#34;, &#34;ILIKE&#34; ]
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Possible operators to use on the filter property. Can be one of the following: [ &#34;=&#34;, &#34;!=&#34;, &#34;[NOT] LIKE&#34;, &#34;[NOT] IN&#34;, &#34;ILIKE&#34; ]
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * The API response property which you want to filter your request on. Can be one of the following: &#34;/type&#34;, &#34;/name&#34;, &#34;/project/projectId&#34;, &#34;/uuid&#34;, &#34;/state&#34;
     * 
     */
    @Import(name="property", required=true)
    private Output<String> property;

    /**
     * @return The API response property which you want to filter your request on. Can be one of the following: &#34;/type&#34;, &#34;/name&#34;, &#34;/project/projectId&#34;, &#34;/uuid&#34;, &#34;/state&#34;
     * 
     */
    public Output<String> property() {
        return this.property;
    }

    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return The values that you want to apply the property+operator combination to in order to filter your data search
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private GetRouteFiltersFilterArgs() {}

    private GetRouteFiltersFilterArgs(GetRouteFiltersFilterArgs $) {
        this.operator = $.operator;
        this.property = $.property;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteFiltersFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteFiltersFilterArgs $;

        public Builder() {
            $ = new GetRouteFiltersFilterArgs();
        }

        public Builder(GetRouteFiltersFilterArgs defaults) {
            $ = new GetRouteFiltersFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator Possible operators to use on the filter property. Can be one of the following: [ &#34;=&#34;, &#34;!=&#34;, &#34;[NOT] LIKE&#34;, &#34;[NOT] IN&#34;, &#34;ILIKE&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Possible operators to use on the filter property. Can be one of the following: [ &#34;=&#34;, &#34;!=&#34;, &#34;[NOT] LIKE&#34;, &#34;[NOT] IN&#34;, &#34;ILIKE&#34; ]
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param property The API response property which you want to filter your request on. Can be one of the following: &#34;/type&#34;, &#34;/name&#34;, &#34;/project/projectId&#34;, &#34;/uuid&#34;, &#34;/state&#34;
         * 
         * @return builder
         * 
         */
        public Builder property(Output<String> property) {
            $.property = property;
            return this;
        }

        /**
         * @param property The API response property which you want to filter your request on. Can be one of the following: &#34;/type&#34;, &#34;/name&#34;, &#34;/project/projectId&#34;, &#34;/uuid&#34;, &#34;/state&#34;
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            return property(Output.of(property));
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The values that you want to apply the property+operator combination to in order to filter your data search
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetRouteFiltersFilterArgs build() {
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("GetRouteFiltersFilterArgs", "operator");
            }
            if ($.property == null) {
                throw new MissingRequiredPropertyException("GetRouteFiltersFilterArgs", "property");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("GetRouteFiltersFilterArgs", "values");
            }
            return $;
        }
    }

}
