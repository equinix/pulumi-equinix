// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface;
import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol;
import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork;
import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort;
import com.equinix.pulumi.fabric.outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceTokenServiceTokenConnectionZSideAccessPointSelector {
    /**
     * @return Virtual Device Interface Configuration
     * 
     */
    private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface interface_;
    /**
     * @return Link protocol Configuration
     * 
     */
    private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol linkProtocol;
    /**
     * @return Network Configuration
     * 
     */
    private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork network;
    /**
     * @return Port Configuration
     * 
     */
    private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort port;
    /**
     * @return Type of Access point; COLO, VD, NETWORK
     * 
     */
    private @Nullable String type;
    /**
     * @return Virtual Device Configuration
     * 
     */
    private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice virtualDevice;

    private ServiceTokenServiceTokenConnectionZSideAccessPointSelector() {}
    /**
     * @return Virtual Device Interface Configuration
     * 
     */
    public Optional<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return Link protocol Configuration
     * 
     */
    public Optional<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol> linkProtocol() {
        return Optional.ofNullable(this.linkProtocol);
    }
    /**
     * @return Network Configuration
     * 
     */
    public Optional<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Port Configuration
     * 
     */
    public Optional<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Type of Access point; COLO, VD, NETWORK
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return Virtual Device Configuration
     * 
     */
    public Optional<ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice> virtualDevice() {
        return Optional.ofNullable(this.virtualDevice);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceTokenServiceTokenConnectionZSideAccessPointSelector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface interface_;
        private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol linkProtocol;
        private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork network;
        private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort port;
        private @Nullable String type;
        private @Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice virtualDevice;
        public Builder() {}
        public Builder(ServiceTokenServiceTokenConnectionZSideAccessPointSelector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interface_ = defaults.interface_;
    	      this.linkProtocol = defaults.linkProtocol;
    	      this.network = defaults.network;
    	      this.port = defaults.port;
    	      this.type = defaults.type;
    	      this.virtualDevice = defaults.virtualDevice;
        }

        @CustomType.Setter("interface")
        public Builder interface_(@Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder linkProtocol(@Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol linkProtocol) {

            this.linkProtocol = linkProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder virtualDevice(@Nullable ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice virtualDevice) {

            this.virtualDevice = virtualDevice;
            return this;
        }
        public ServiceTokenServiceTokenConnectionZSideAccessPointSelector build() {
            final var _resultValue = new ServiceTokenServiceTokenConnectionZSideAccessPointSelector();
            _resultValue.interface_ = interface_;
            _resultValue.linkProtocol = linkProtocol;
            _resultValue.network = network;
            _resultValue.port = port;
            _resultValue.type = type;
            _resultValue.virtualDevice = virtualDevice;
            return _resultValue;
        }
    }
}
