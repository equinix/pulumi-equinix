// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetServiceTokenServiceTokenConnectionASide;
import com.equinix.pulumi.fabric.outputs.GetServiceTokenServiceTokenConnectionZSide;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTokenServiceTokenConnection {
    /**
     * @return A-Side Connection link protocol,virtual device or network configuration
     * 
     */
    private List<GetServiceTokenServiceTokenConnectionASide> aSides;
    /**
     * @return Allow custom bandwidth value
     * 
     */
    private Boolean allowCustomBandwidth;
    /**
     * @return Authorization to connect remotely
     * 
     */
    private Boolean allowRemoteConnection;
    /**
     * @return Connection bandwidth limit in Mbps
     * 
     */
    private Integer bandwidthLimit;
    /**
     * @return List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
     * 
     */
    private List<Integer> supportedBandwidths;
    /**
     * @return Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    private String uuid;
    /**
     * @return Z-Side Connection link protocol,virtual device or network configuration
     * 
     */
    private List<GetServiceTokenServiceTokenConnectionZSide> zSides;

    private GetServiceTokenServiceTokenConnection() {}
    /**
     * @return A-Side Connection link protocol,virtual device or network configuration
     * 
     */
    public List<GetServiceTokenServiceTokenConnectionASide> aSides() {
        return this.aSides;
    }
    /**
     * @return Allow custom bandwidth value
     * 
     */
    public Boolean allowCustomBandwidth() {
        return this.allowCustomBandwidth;
    }
    /**
     * @return Authorization to connect remotely
     * 
     */
    public Boolean allowRemoteConnection() {
        return this.allowRemoteConnection;
    }
    /**
     * @return Connection bandwidth limit in Mbps
     * 
     */
    public Integer bandwidthLimit() {
        return this.bandwidthLimit;
    }
    /**
     * @return List of permitted bandwidths&#39;; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
     * 
     */
    public List<Integer> supportedBandwidths() {
        return this.supportedBandwidths;
    }
    /**
     * @return Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned connection identifier
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return Z-Side Connection link protocol,virtual device or network configuration
     * 
     */
    public List<GetServiceTokenServiceTokenConnectionZSide> zSides() {
        return this.zSides;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTokenServiceTokenConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceTokenServiceTokenConnectionASide> aSides;
        private Boolean allowCustomBandwidth;
        private Boolean allowRemoteConnection;
        private Integer bandwidthLimit;
        private List<Integer> supportedBandwidths;
        private String type;
        private String uuid;
        private List<GetServiceTokenServiceTokenConnectionZSide> zSides;
        public Builder() {}
        public Builder(GetServiceTokenServiceTokenConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aSides = defaults.aSides;
    	      this.allowCustomBandwidth = defaults.allowCustomBandwidth;
    	      this.allowRemoteConnection = defaults.allowRemoteConnection;
    	      this.bandwidthLimit = defaults.bandwidthLimit;
    	      this.supportedBandwidths = defaults.supportedBandwidths;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.zSides = defaults.zSides;
        }

        @CustomType.Setter
        public Builder aSides(List<GetServiceTokenServiceTokenConnectionASide> aSides) {
            if (aSides == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "aSides");
            }
            this.aSides = aSides;
            return this;
        }
        public Builder aSides(GetServiceTokenServiceTokenConnectionASide... aSides) {
            return aSides(List.of(aSides));
        }
        @CustomType.Setter
        public Builder allowCustomBandwidth(Boolean allowCustomBandwidth) {
            if (allowCustomBandwidth == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "allowCustomBandwidth");
            }
            this.allowCustomBandwidth = allowCustomBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder allowRemoteConnection(Boolean allowRemoteConnection) {
            if (allowRemoteConnection == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "allowRemoteConnection");
            }
            this.allowRemoteConnection = allowRemoteConnection;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthLimit(Integer bandwidthLimit) {
            if (bandwidthLimit == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "bandwidthLimit");
            }
            this.bandwidthLimit = bandwidthLimit;
            return this;
        }
        @CustomType.Setter
        public Builder supportedBandwidths(List<Integer> supportedBandwidths) {
            if (supportedBandwidths == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "supportedBandwidths");
            }
            this.supportedBandwidths = supportedBandwidths;
            return this;
        }
        public Builder supportedBandwidths(Integer... supportedBandwidths) {
            return supportedBandwidths(List.of(supportedBandwidths));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder zSides(List<GetServiceTokenServiceTokenConnectionZSide> zSides) {
            if (zSides == null) {
              throw new MissingRequiredPropertyException("GetServiceTokenServiceTokenConnection", "zSides");
            }
            this.zSides = zSides;
            return this;
        }
        public Builder zSides(GetServiceTokenServiceTokenConnectionZSide... zSides) {
            return zSides(List.of(zSides));
        }
        public GetServiceTokenServiceTokenConnection build() {
            final var _resultValue = new GetServiceTokenServiceTokenConnection();
            _resultValue.aSides = aSides;
            _resultValue.allowCustomBandwidth = allowCustomBandwidth;
            _resultValue.allowRemoteConnection = allowRemoteConnection;
            _resultValue.bandwidthLimit = bandwidthLimit;
            _resultValue.supportedBandwidths = supportedBandwidths;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.zSides = zSides;
            return _resultValue;
        }
    }
}
