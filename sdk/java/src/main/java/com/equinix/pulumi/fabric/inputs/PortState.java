// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.inputs.PortAccountArgs;
import com.equinix.pulumi.fabric.inputs.PortAdditionalInfoArgs;
import com.equinix.pulumi.fabric.inputs.PortChangeLogArgs;
import com.equinix.pulumi.fabric.inputs.PortDeviceArgs;
import com.equinix.pulumi.fabric.inputs.PortEncapsulationArgs;
import com.equinix.pulumi.fabric.inputs.PortLocationArgs;
import com.equinix.pulumi.fabric.inputs.PortNotificationArgs;
import com.equinix.pulumi.fabric.inputs.PortOrderArgs;
import com.equinix.pulumi.fabric.inputs.PortPhysicalPortArgs;
import com.equinix.pulumi.fabric.inputs.PortProjectArgs;
import com.equinix.pulumi.fabric.inputs.PortRedundancyArgs;
import com.equinix.pulumi.fabric.inputs.PortSettingsArgs;
import com.equinix.pulumi.fabric.inputs.PortTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortState extends com.pulumi.resources.ResourceArgs {

    public static final PortState Empty = new PortState();

    /**
     * Port order account details
     * 
     */
    @Import(name="account")
    private @Nullable Output<PortAccountArgs> account;

    /**
     * @return Port order account details
     * 
     */
    public Optional<Output<PortAccountArgs>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * List of key/value objects to provide additional context to the Port order
     * 
     */
    @Import(name="additionalInfos")
    private @Nullable Output<List<PortAdditionalInfoArgs>> additionalInfos;

    /**
     * @return List of key/value objects to provide additional context to the Port order
     * 
     */
    public Optional<Output<List<PortAdditionalInfoArgs>>> additionalInfos() {
        return Optional.ofNullable(this.additionalInfos);
    }

    /**
     * Details of the last change on the port resource
     * 
     */
    @Import(name="changeLog")
    private @Nullable Output<PortChangeLogArgs> changeLog;

    /**
     * @return Details of the last change on the port resource
     * 
     */
    public Optional<Output<PortChangeLogArgs>> changeLog() {
        return Optional.ofNullable(this.changeLog);
    }

    /**
     * Connection type that is used from the port after creation
     * 
     */
    @Import(name="connectivitySourceType")
    private @Nullable Output<String> connectivitySourceType;

    /**
     * @return Connection type that is used from the port after creation
     * 
     */
    public Optional<Output<String>> connectivitySourceType() {
        return Optional.ofNullable(this.connectivitySourceType);
    }

    /**
     * IBX code where the port will be located
     * 
     */
    @Import(name="demarcationPointIbx")
    private @Nullable Output<String> demarcationPointIbx;

    /**
     * @return IBX code where the port will be located
     * 
     */
    public Optional<Output<String>> demarcationPointIbx() {
        return Optional.ofNullable(this.demarcationPointIbx);
    }

    /**
     * Port device configuration
     * 
     */
    @Import(name="device")
    private @Nullable Output<PortDeviceArgs> device;

    /**
     * @return Port device configuration
     * 
     */
    public Optional<Output<PortDeviceArgs>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Port encapsulation settings
     * 
     */
    @Import(name="encapsulation")
    private @Nullable Output<PortEncapsulationArgs> encapsulation;

    /**
     * @return Port encapsulation settings
     * 
     */
    public Optional<Output<PortEncapsulationArgs>> encapsulation() {
        return Optional.ofNullable(this.encapsulation);
    }

    /**
     * Equinix assigned URI of the port resource
     * 
     */
    @Import(name="href")
    private @Nullable Output<String> href;

    /**
     * @return Equinix assigned URI of the port resource
     * 
     */
    public Optional<Output<String>> href() {
        return Optional.ofNullable(this.href);
    }

    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    @Import(name="lagEnabled")
    private @Nullable Output<Boolean> lagEnabled;

    /**
     * @return Boolean value to enable the created port with Link Aggregation Groups
     * 
     */
    public Optional<Output<Boolean>> lagEnabled() {
        return Optional.ofNullable(this.lagEnabled);
    }

    /**
     * Location details for the port order
     * 
     */
    @Import(name="location")
    private @Nullable Output<PortLocationArgs> location;

    /**
     * @return Location details for the port order
     * 
     */
    public Optional<Output<PortLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Designated name of the port
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Designated name of the port
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of notification types and the registered users to receive those notification types
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<PortNotificationArgs>> notifications;

    /**
     * @return List of notification types and the registered users to receive those notification types
     * 
     */
    public Optional<Output<List<PortNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    @Import(name="order")
    private @Nullable Output<PortOrderArgs> order;

    /**
     * @return Details of the Port Order such as purchaseOrder details and signature
     * 
     */
    public Optional<Output<PortOrderArgs>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * Physical ports that will implement this port order
     * 
     */
    @Import(name="physicalPorts")
    private @Nullable Output<List<PortPhysicalPortArgs>> physicalPorts;

    /**
     * @return Physical ports that will implement this port order
     * 
     */
    public Optional<Output<List<PortPhysicalPortArgs>>> physicalPorts() {
        return Optional.ofNullable(this.physicalPorts);
    }

    /**
     * Number of physical ports in the Port Order
     * 
     */
    @Import(name="physicalPortsCount")
    private @Nullable Output<Integer> physicalPortsCount;

    /**
     * @return Number of physical ports in the Port Order
     * 
     */
    public Optional<Output<Integer>> physicalPortsCount() {
        return Optional.ofNullable(this.physicalPortsCount);
    }

    /**
     * Physical Ports Speed in Mbps
     * 
     */
    @Import(name="physicalPortsSpeed")
    private @Nullable Output<Integer> physicalPortsSpeed;

    /**
     * @return Physical Ports Speed in Mbps
     * 
     */
    public Optional<Output<Integer>> physicalPortsSpeed() {
        return Optional.ofNullable(this.physicalPortsSpeed);
    }

    /**
     * Physical Ports Type
     * 
     */
    @Import(name="physicalPortsType")
    private @Nullable Output<String> physicalPortsType;

    /**
     * @return Physical Ports Type
     * 
     */
    public Optional<Output<String>> physicalPortsType() {
        return Optional.ofNullable(this.physicalPortsType);
    }

    /**
     * Port order project details
     * 
     */
    @Import(name="project")
    private @Nullable Output<PortProjectArgs> project;

    /**
     * @return Port order project details
     * 
     */
    public Optional<Output<PortProjectArgs>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Port redundancy settings
     * 
     */
    @Import(name="redundancy")
    private @Nullable Output<PortRedundancyArgs> redundancy;

    /**
     * @return Port redundancy settings
     * 
     */
    public Optional<Output<PortRedundancyArgs>> redundancy() {
        return Optional.ofNullable(this.redundancy);
    }

    /**
     * Port order configuration settings
     * 
     */
    @Import(name="settings")
    private @Nullable Output<PortSettingsArgs> settings;

    /**
     * @return Port order configuration settings
     * 
     */
    public Optional<Output<PortSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Value representing provisioning status for the port resource
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Value representing provisioning status for the port resource
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="timeouts")
    private @Nullable Output<PortTimeoutsArgs> timeouts;

    public Optional<Output<PortTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Type of the port order request
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the port order request
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Equinix assigned unique identifier of the port resource
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Equinix assigned unique identifier of the port resource
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private PortState() {}

    private PortState(PortState $) {
        this.account = $.account;
        this.additionalInfos = $.additionalInfos;
        this.changeLog = $.changeLog;
        this.connectivitySourceType = $.connectivitySourceType;
        this.demarcationPointIbx = $.demarcationPointIbx;
        this.device = $.device;
        this.encapsulation = $.encapsulation;
        this.href = $.href;
        this.lagEnabled = $.lagEnabled;
        this.location = $.location;
        this.name = $.name;
        this.notifications = $.notifications;
        this.order = $.order;
        this.physicalPorts = $.physicalPorts;
        this.physicalPortsCount = $.physicalPortsCount;
        this.physicalPortsSpeed = $.physicalPortsSpeed;
        this.physicalPortsType = $.physicalPortsType;
        this.project = $.project;
        this.redundancy = $.redundancy;
        this.settings = $.settings;
        this.state = $.state;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortState $;

        public Builder() {
            $ = new PortState();
        }

        public Builder(PortState defaults) {
            $ = new PortState(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Port order account details
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<PortAccountArgs> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Port order account details
         * 
         * @return builder
         * 
         */
        public Builder account(PortAccountArgs account) {
            return account(Output.of(account));
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(@Nullable Output<List<PortAdditionalInfoArgs>> additionalInfos) {
            $.additionalInfos = additionalInfos;
            return this;
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(List<PortAdditionalInfoArgs> additionalInfos) {
            return additionalInfos(Output.of(additionalInfos));
        }

        /**
         * @param additionalInfos List of key/value objects to provide additional context to the Port order
         * 
         * @return builder
         * 
         */
        public Builder additionalInfos(PortAdditionalInfoArgs... additionalInfos) {
            return additionalInfos(List.of(additionalInfos));
        }

        /**
         * @param changeLog Details of the last change on the port resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(@Nullable Output<PortChangeLogArgs> changeLog) {
            $.changeLog = changeLog;
            return this;
        }

        /**
         * @param changeLog Details of the last change on the port resource
         * 
         * @return builder
         * 
         */
        public Builder changeLog(PortChangeLogArgs changeLog) {
            return changeLog(Output.of(changeLog));
        }

        /**
         * @param connectivitySourceType Connection type that is used from the port after creation
         * 
         * @return builder
         * 
         */
        public Builder connectivitySourceType(@Nullable Output<String> connectivitySourceType) {
            $.connectivitySourceType = connectivitySourceType;
            return this;
        }

        /**
         * @param connectivitySourceType Connection type that is used from the port after creation
         * 
         * @return builder
         * 
         */
        public Builder connectivitySourceType(String connectivitySourceType) {
            return connectivitySourceType(Output.of(connectivitySourceType));
        }

        /**
         * @param demarcationPointIbx IBX code where the port will be located
         * 
         * @return builder
         * 
         */
        public Builder demarcationPointIbx(@Nullable Output<String> demarcationPointIbx) {
            $.demarcationPointIbx = demarcationPointIbx;
            return this;
        }

        /**
         * @param demarcationPointIbx IBX code where the port will be located
         * 
         * @return builder
         * 
         */
        public Builder demarcationPointIbx(String demarcationPointIbx) {
            return demarcationPointIbx(Output.of(demarcationPointIbx));
        }

        /**
         * @param device Port device configuration
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<PortDeviceArgs> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device Port device configuration
         * 
         * @return builder
         * 
         */
        public Builder device(PortDeviceArgs device) {
            return device(Output.of(device));
        }

        /**
         * @param encapsulation Port encapsulation settings
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(@Nullable Output<PortEncapsulationArgs> encapsulation) {
            $.encapsulation = encapsulation;
            return this;
        }

        /**
         * @param encapsulation Port encapsulation settings
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(PortEncapsulationArgs encapsulation) {
            return encapsulation(Output.of(encapsulation));
        }

        /**
         * @param href Equinix assigned URI of the port resource
         * 
         * @return builder
         * 
         */
        public Builder href(@Nullable Output<String> href) {
            $.href = href;
            return this;
        }

        /**
         * @param href Equinix assigned URI of the port resource
         * 
         * @return builder
         * 
         */
        public Builder href(String href) {
            return href(Output.of(href));
        }

        /**
         * @param lagEnabled Boolean value to enable the created port with Link Aggregation Groups
         * 
         * @return builder
         * 
         */
        public Builder lagEnabled(@Nullable Output<Boolean> lagEnabled) {
            $.lagEnabled = lagEnabled;
            return this;
        }

        /**
         * @param lagEnabled Boolean value to enable the created port with Link Aggregation Groups
         * 
         * @return builder
         * 
         */
        public Builder lagEnabled(Boolean lagEnabled) {
            return lagEnabled(Output.of(lagEnabled));
        }

        /**
         * @param location Location details for the port order
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<PortLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location details for the port order
         * 
         * @return builder
         * 
         */
        public Builder location(PortLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param name Designated name of the port
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Designated name of the port
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(@Nullable Output<List<PortNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(List<PortNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        /**
         * @param notifications List of notification types and the registered users to receive those notification types
         * 
         * @return builder
         * 
         */
        public Builder notifications(PortNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param order Details of the Port Order such as purchaseOrder details and signature
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<PortOrderArgs> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Details of the Port Order such as purchaseOrder details and signature
         * 
         * @return builder
         * 
         */
        public Builder order(PortOrderArgs order) {
            return order(Output.of(order));
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(@Nullable Output<List<PortPhysicalPortArgs>> physicalPorts) {
            $.physicalPorts = physicalPorts;
            return this;
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(List<PortPhysicalPortArgs> physicalPorts) {
            return physicalPorts(Output.of(physicalPorts));
        }

        /**
         * @param physicalPorts Physical ports that will implement this port order
         * 
         * @return builder
         * 
         */
        public Builder physicalPorts(PortPhysicalPortArgs... physicalPorts) {
            return physicalPorts(List.of(physicalPorts));
        }

        /**
         * @param physicalPortsCount Number of physical ports in the Port Order
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsCount(@Nullable Output<Integer> physicalPortsCount) {
            $.physicalPortsCount = physicalPortsCount;
            return this;
        }

        /**
         * @param physicalPortsCount Number of physical ports in the Port Order
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsCount(Integer physicalPortsCount) {
            return physicalPortsCount(Output.of(physicalPortsCount));
        }

        /**
         * @param physicalPortsSpeed Physical Ports Speed in Mbps
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsSpeed(@Nullable Output<Integer> physicalPortsSpeed) {
            $.physicalPortsSpeed = physicalPortsSpeed;
            return this;
        }

        /**
         * @param physicalPortsSpeed Physical Ports Speed in Mbps
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsSpeed(Integer physicalPortsSpeed) {
            return physicalPortsSpeed(Output.of(physicalPortsSpeed));
        }

        /**
         * @param physicalPortsType Physical Ports Type
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsType(@Nullable Output<String> physicalPortsType) {
            $.physicalPortsType = physicalPortsType;
            return this;
        }

        /**
         * @param physicalPortsType Physical Ports Type
         * 
         * @return builder
         * 
         */
        public Builder physicalPortsType(String physicalPortsType) {
            return physicalPortsType(Output.of(physicalPortsType));
        }

        /**
         * @param project Port order project details
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<PortProjectArgs> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Port order project details
         * 
         * @return builder
         * 
         */
        public Builder project(PortProjectArgs project) {
            return project(Output.of(project));
        }

        /**
         * @param redundancy Port redundancy settings
         * 
         * @return builder
         * 
         */
        public Builder redundancy(@Nullable Output<PortRedundancyArgs> redundancy) {
            $.redundancy = redundancy;
            return this;
        }

        /**
         * @param redundancy Port redundancy settings
         * 
         * @return builder
         * 
         */
        public Builder redundancy(PortRedundancyArgs redundancy) {
            return redundancy(Output.of(redundancy));
        }

        /**
         * @param settings Port order configuration settings
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<PortSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Port order configuration settings
         * 
         * @return builder
         * 
         */
        public Builder settings(PortSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param state Value representing provisioning status for the port resource
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Value representing provisioning status for the port resource
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder timeouts(@Nullable Output<PortTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(PortTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type Type of the port order request
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the port order request
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Equinix assigned unique identifier of the port resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Equinix assigned unique identifier of the port resource
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public PortState build() {
            return $;
        }
    }

}
