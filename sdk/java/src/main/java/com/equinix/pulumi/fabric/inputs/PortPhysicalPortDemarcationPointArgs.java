// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class PortPhysicalPortDemarcationPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortPhysicalPortDemarcationPointArgs Empty = new PortPhysicalPortDemarcationPointArgs();

    /**
     * Port cabinet unique space id
     * 
     */
    @Import(name="cabinetUniqueSpaceId", required=true)
    private Output<String> cabinetUniqueSpaceId;

    /**
     * @return Port cabinet unique space id
     * 
     */
    public Output<String> cabinetUniqueSpaceId() {
        return this.cabinetUniqueSpaceId;
    }

    /**
     * Port cage unique space id
     * 
     */
    @Import(name="cageUniqueSpaceId", required=true)
    private Output<String> cageUniqueSpaceId;

    /**
     * @return Port cage unique space id
     * 
     */
    public Output<String> cageUniqueSpaceId() {
        return this.cageUniqueSpaceId;
    }

    /**
     * Port connector type
     * 
     */
    @Import(name="connectorType", required=true)
    private Output<String> connectorType;

    /**
     * @return Port connector type
     * 
     */
    public Output<String> connectorType() {
        return this.connectorType;
    }

    /**
     * IBX Metro code for the physical port
     * 
     */
    @Import(name="ibx", required=true)
    private Output<String> ibx;

    /**
     * @return IBX Metro code for the physical port
     * 
     */
    public Output<String> ibx() {
        return this.ibx;
    }

    /**
     * Port patch panel
     * 
     */
    @Import(name="patchPanel", required=true)
    private Output<String> patchPanel;

    /**
     * @return Port patch panel
     * 
     */
    public Output<String> patchPanel() {
        return this.patchPanel;
    }

    private PortPhysicalPortDemarcationPointArgs() {}

    private PortPhysicalPortDemarcationPointArgs(PortPhysicalPortDemarcationPointArgs $) {
        this.cabinetUniqueSpaceId = $.cabinetUniqueSpaceId;
        this.cageUniqueSpaceId = $.cageUniqueSpaceId;
        this.connectorType = $.connectorType;
        this.ibx = $.ibx;
        this.patchPanel = $.patchPanel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortPhysicalPortDemarcationPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortPhysicalPortDemarcationPointArgs $;

        public Builder() {
            $ = new PortPhysicalPortDemarcationPointArgs();
        }

        public Builder(PortPhysicalPortDemarcationPointArgs defaults) {
            $ = new PortPhysicalPortDemarcationPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cabinetUniqueSpaceId Port cabinet unique space id
         * 
         * @return builder
         * 
         */
        public Builder cabinetUniqueSpaceId(Output<String> cabinetUniqueSpaceId) {
            $.cabinetUniqueSpaceId = cabinetUniqueSpaceId;
            return this;
        }

        /**
         * @param cabinetUniqueSpaceId Port cabinet unique space id
         * 
         * @return builder
         * 
         */
        public Builder cabinetUniqueSpaceId(String cabinetUniqueSpaceId) {
            return cabinetUniqueSpaceId(Output.of(cabinetUniqueSpaceId));
        }

        /**
         * @param cageUniqueSpaceId Port cage unique space id
         * 
         * @return builder
         * 
         */
        public Builder cageUniqueSpaceId(Output<String> cageUniqueSpaceId) {
            $.cageUniqueSpaceId = cageUniqueSpaceId;
            return this;
        }

        /**
         * @param cageUniqueSpaceId Port cage unique space id
         * 
         * @return builder
         * 
         */
        public Builder cageUniqueSpaceId(String cageUniqueSpaceId) {
            return cageUniqueSpaceId(Output.of(cageUniqueSpaceId));
        }

        /**
         * @param connectorType Port connector type
         * 
         * @return builder
         * 
         */
        public Builder connectorType(Output<String> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param connectorType Port connector type
         * 
         * @return builder
         * 
         */
        public Builder connectorType(String connectorType) {
            return connectorType(Output.of(connectorType));
        }

        /**
         * @param ibx IBX Metro code for the physical port
         * 
         * @return builder
         * 
         */
        public Builder ibx(Output<String> ibx) {
            $.ibx = ibx;
            return this;
        }

        /**
         * @param ibx IBX Metro code for the physical port
         * 
         * @return builder
         * 
         */
        public Builder ibx(String ibx) {
            return ibx(Output.of(ibx));
        }

        /**
         * @param patchPanel Port patch panel
         * 
         * @return builder
         * 
         */
        public Builder patchPanel(Output<String> patchPanel) {
            $.patchPanel = patchPanel;
            return this;
        }

        /**
         * @param patchPanel Port patch panel
         * 
         * @return builder
         * 
         */
        public Builder patchPanel(String patchPanel) {
            return patchPanel(Output.of(patchPanel));
        }

        public PortPhysicalPortDemarcationPointArgs build() {
            if ($.cabinetUniqueSpaceId == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPointArgs", "cabinetUniqueSpaceId");
            }
            if ($.cageUniqueSpaceId == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPointArgs", "cageUniqueSpaceId");
            }
            if ($.connectorType == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPointArgs", "connectorType");
            }
            if ($.ibx == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPointArgs", "ibx");
            }
            if ($.patchPanel == null) {
                throw new MissingRequiredPropertyException("PortPhysicalPortDemarcationPointArgs", "patchPanel");
            }
            return $;
        }
    }

}
