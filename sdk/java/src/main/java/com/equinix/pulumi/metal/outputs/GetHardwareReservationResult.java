// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHardwareReservationResult {
    /**
     * @return UUID of device occupying the reservation.
     * 
     */
    private String deviceId;
    /**
     * @return (**Deprecated**) Facility for the reservation. Use metro instead; read the facility to metro migration guide
     * 
     * @deprecated
     * Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
     * 
     */
    @Deprecated /* Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices */
    private String facility;
    /**
     * @return ID of the hardware reservation to look up.
     * 
     */
    private String id;
    /**
     * @return Plan type for the reservation.
     * 
     */
    private String plan;
    /**
     * @return UUID of project this reservation is scoped to.
     * 
     */
    private String projectId;
    /**
     * @return Flag indicating whether the reserved server is provisionable or not. Spare devices can&#39;t be provisioned unless they are activated first.
     * 
     */
    private Boolean provisionable;
    /**
     * @return Reservation short ID.
     * 
     */
    private String shortId;
    /**
     * @return Flag indicating whether the Hardware Reservation is a spare. Spare Hardware Reservations are used when a Hardware Reservations requires service from Metal Equinix.
     * 
     */
    private Boolean spare;
    /**
     * @return Switch short ID, can be used to determine if two devices are connected to the same switch.
     * 
     */
    private String switchUuid;

    private GetHardwareReservationResult() {}
    /**
     * @return UUID of device occupying the reservation.
     * 
     */
    public String deviceId() {
        return this.deviceId;
    }
    /**
     * @return (**Deprecated**) Facility for the reservation. Use metro instead; read the facility to metro migration guide
     * 
     * @deprecated
     * Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
     * 
     */
    @Deprecated /* Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices */
    public String facility() {
        return this.facility;
    }
    /**
     * @return ID of the hardware reservation to look up.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Plan type for the reservation.
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return UUID of project this reservation is scoped to.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Flag indicating whether the reserved server is provisionable or not. Spare devices can&#39;t be provisioned unless they are activated first.
     * 
     */
    public Boolean provisionable() {
        return this.provisionable;
    }
    /**
     * @return Reservation short ID.
     * 
     */
    public String shortId() {
        return this.shortId;
    }
    /**
     * @return Flag indicating whether the Hardware Reservation is a spare. Spare Hardware Reservations are used when a Hardware Reservations requires service from Metal Equinix.
     * 
     */
    public Boolean spare() {
        return this.spare;
    }
    /**
     * @return Switch short ID, can be used to determine if two devices are connected to the same switch.
     * 
     */
    public String switchUuid() {
        return this.switchUuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHardwareReservationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deviceId;
        private String facility;
        private String id;
        private String plan;
        private String projectId;
        private Boolean provisionable;
        private String shortId;
        private Boolean spare;
        private String switchUuid;
        public Builder() {}
        public Builder(GetHardwareReservationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceId = defaults.deviceId;
    	      this.facility = defaults.facility;
    	      this.id = defaults.id;
    	      this.plan = defaults.plan;
    	      this.projectId = defaults.projectId;
    	      this.provisionable = defaults.provisionable;
    	      this.shortId = defaults.shortId;
    	      this.spare = defaults.spare;
    	      this.switchUuid = defaults.switchUuid;
        }

        @CustomType.Setter
        public Builder deviceId(String deviceId) {
            this.deviceId = Objects.requireNonNull(deviceId);
            return this;
        }
        @CustomType.Setter
        public Builder facility(String facility) {
            this.facility = Objects.requireNonNull(facility);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            this.plan = Objects.requireNonNull(plan);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder provisionable(Boolean provisionable) {
            this.provisionable = Objects.requireNonNull(provisionable);
            return this;
        }
        @CustomType.Setter
        public Builder shortId(String shortId) {
            this.shortId = Objects.requireNonNull(shortId);
            return this;
        }
        @CustomType.Setter
        public Builder spare(Boolean spare) {
            this.spare = Objects.requireNonNull(spare);
            return this;
        }
        @CustomType.Setter
        public Builder switchUuid(String switchUuid) {
            this.switchUuid = Objects.requireNonNull(switchUuid);
            return this;
        }
        public GetHardwareReservationResult build() {
            final var _resultValue = new GetHardwareReservationResult();
            _resultValue.deviceId = deviceId;
            _resultValue.facility = facility;
            _resultValue.id = id;
            _resultValue.plan = plan;
            _resultValue.projectId = projectId;
            _resultValue.provisionable = provisionable;
            _resultValue.shortId = shortId;
            _resultValue.spare = spare;
            _resultValue.switchUuid = switchUuid;
            return _resultValue;
        }
    }
}
