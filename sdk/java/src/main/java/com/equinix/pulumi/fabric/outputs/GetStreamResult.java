// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.GetStreamChangeLog;
import com.equinix.pulumi.fabric.outputs.GetStreamProject;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamResult {
    /**
     * @return Count of the streaming assets attached to the stream resource
     * 
     */
    private Integer assetsCount;
    /**
     * @return Details of the last change on the stream resource
     * 
     */
    private GetStreamChangeLog changeLog;
    /**
     * @return Customer-provided description of the stream resource
     * 
     */
    private String description;
    /**
     * @return Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    private String href;
    /**
     * @return The unique identifier of the resource
     * 
     */
    private String id;
    /**
     * @return Customer-provided name of the stream resource
     * 
     */
    private String name;
    /**
     * @return Equinix Project attribute object
     * 
     */
    private GetStreamProject project;
    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    private String state;
    /**
     * @return The uuid of the stream this data source should retrieve
     * 
     */
    private String streamId;
    /**
     * @return Count of the client subscriptions on the stream resource
     * 
     */
    private Integer streamSubscriptionsCount;
    /**
     * @return Equinix defined Streaming Type
     * 
     */
    private String type;
    /**
     * @return Equinix-assigned unique id for the stream resource
     * 
     */
    private String uuid;

    private GetStreamResult() {}
    /**
     * @return Count of the streaming assets attached to the stream resource
     * 
     */
    public Integer assetsCount() {
        return this.assetsCount;
    }
    /**
     * @return Details of the last change on the stream resource
     * 
     */
    public GetStreamChangeLog changeLog() {
        return this.changeLog;
    }
    /**
     * @return Customer-provided description of the stream resource
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Equinix auto generated URI to the stream resource in Equinix Portal
     * 
     */
    public String href() {
        return this.href;
    }
    /**
     * @return The unique identifier of the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Customer-provided name of the stream resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Equinix Project attribute object
     * 
     */
    public GetStreamProject project() {
        return this.project;
    }
    /**
     * @return Value representing provisioning status for the stream resource
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The uuid of the stream this data source should retrieve
     * 
     */
    public String streamId() {
        return this.streamId;
    }
    /**
     * @return Count of the client subscriptions on the stream resource
     * 
     */
    public Integer streamSubscriptionsCount() {
        return this.streamSubscriptionsCount;
    }
    /**
     * @return Equinix defined Streaming Type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Equinix-assigned unique id for the stream resource
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer assetsCount;
        private GetStreamChangeLog changeLog;
        private String description;
        private String href;
        private String id;
        private String name;
        private GetStreamProject project;
        private String state;
        private String streamId;
        private Integer streamSubscriptionsCount;
        private String type;
        private String uuid;
        public Builder() {}
        public Builder(GetStreamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetsCount = defaults.assetsCount;
    	      this.changeLog = defaults.changeLog;
    	      this.description = defaults.description;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.streamId = defaults.streamId;
    	      this.streamSubscriptionsCount = defaults.streamSubscriptionsCount;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder assetsCount(Integer assetsCount) {
            if (assetsCount == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "assetsCount");
            }
            this.assetsCount = assetsCount;
            return this;
        }
        @CustomType.Setter
        public Builder changeLog(GetStreamChangeLog changeLog) {
            if (changeLog == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "changeLog");
            }
            this.changeLog = changeLog;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder href(String href) {
            if (href == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "href");
            }
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(GetStreamProject project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamId(String streamId) {
            if (streamId == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "streamId");
            }
            this.streamId = streamId;
            return this;
        }
        @CustomType.Setter
        public Builder streamSubscriptionsCount(Integer streamSubscriptionsCount) {
            if (streamSubscriptionsCount == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "streamSubscriptionsCount");
            }
            this.streamSubscriptionsCount = streamSubscriptionsCount;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetStreamResult build() {
            final var _resultValue = new GetStreamResult();
            _resultValue.assetsCount = assetsCount;
            _resultValue.changeLog = changeLog;
            _resultValue.description = description;
            _resultValue.href = href;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.state = state;
            _resultValue.streamId = streamId;
            _resultValue.streamSubscriptionsCount = streamSubscriptionsCount;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
