// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.equinix.pulumi.metal.outputs.GetFacilityCapacity;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetFacilityResult {
    private @Nullable List<GetFacilityCapacity> capacities;
    private String code;
    /**
     * @return The features of the facility.
     * 
     */
    private List<String> features;
    private @Nullable List<String> featuresRequireds;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The metro code the facility is part of.
     * 
     */
    private String metro;
    /**
     * @return The name of the facility.
     * 
     */
    private String name;

    private GetFacilityResult() {}
    public List<GetFacilityCapacity> capacities() {
        return this.capacities == null ? List.of() : this.capacities;
    }
    public String code() {
        return this.code;
    }
    /**
     * @return The features of the facility.
     * 
     */
    public List<String> features() {
        return this.features;
    }
    public List<String> featuresRequireds() {
        return this.featuresRequireds == null ? List.of() : this.featuresRequireds;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The metro code the facility is part of.
     * 
     */
    public String metro() {
        return this.metro;
    }
    /**
     * @return The name of the facility.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFacilityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetFacilityCapacity> capacities;
        private String code;
        private List<String> features;
        private @Nullable List<String> featuresRequireds;
        private String id;
        private String metro;
        private String name;
        public Builder() {}
        public Builder(GetFacilityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacities = defaults.capacities;
    	      this.code = defaults.code;
    	      this.features = defaults.features;
    	      this.featuresRequireds = defaults.featuresRequireds;
    	      this.id = defaults.id;
    	      this.metro = defaults.metro;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder capacities(@Nullable List<GetFacilityCapacity> capacities) {
            this.capacities = capacities;
            return this;
        }
        public Builder capacities(GetFacilityCapacity... capacities) {
            return capacities(List.of(capacities));
        }
        @CustomType.Setter
        public Builder code(String code) {
            this.code = Objects.requireNonNull(code);
            return this;
        }
        @CustomType.Setter
        public Builder features(List<String> features) {
            this.features = Objects.requireNonNull(features);
            return this;
        }
        public Builder features(String... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder featuresRequireds(@Nullable List<String> featuresRequireds) {
            this.featuresRequireds = featuresRequireds;
            return this;
        }
        public Builder featuresRequireds(String... featuresRequireds) {
            return featuresRequireds(List.of(featuresRequireds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder metro(String metro) {
            this.metro = Objects.requireNonNull(metro);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public GetFacilityResult build() {
            final var o = new GetFacilityResult();
            o.capacities = capacities;
            o.code = code;
            o.features = features;
            o.featuresRequireds = featuresRequireds;
            o.id = id;
            o.metro = metro;
            o.name = name;
            return o;
        }
    }
}
