// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDevicesFilter {
    /**
     * @return If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
     * 
     * All fields in the `devices` block defined below can be used as attribute for both `sort` and `filter` blocks.
     * 
     */
    private @Nullable Boolean all;
    /**
     * @return The attribute used to filter. Filter attributes are case-sensitive
     * 
     */
    private String attribute;
    /**
     * @return The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.
     * 
     */
    private @Nullable String matchBy;
    /**
     * @return The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
     * 
     */
    private List<String> values;

    private GetDevicesFilter() {}
    /**
     * @return If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
     * 
     * All fields in the `devices` block defined below can be used as attribute for both `sort` and `filter` blocks.
     * 
     */
    public Optional<Boolean> all() {
        return Optional.ofNullable(this.all);
    }
    /**
     * @return The attribute used to filter. Filter attributes are case-sensitive
     * 
     */
    public String attribute() {
        return this.attribute;
    }
    /**
     * @return The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.
     * 
     */
    public Optional<String> matchBy() {
        return Optional.ofNullable(this.matchBy);
    }
    /**
     * @return The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
     * 
     */
    public List<String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDevicesFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean all;
        private String attribute;
        private @Nullable String matchBy;
        private List<String> values;
        public Builder() {}
        public Builder(GetDevicesFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.all = defaults.all;
    	      this.attribute = defaults.attribute;
    	      this.matchBy = defaults.matchBy;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder all(@Nullable Boolean all) {
            this.all = all;
            return this;
        }
        @CustomType.Setter
        public Builder attribute(String attribute) {
            this.attribute = Objects.requireNonNull(attribute);
            return this;
        }
        @CustomType.Setter
        public Builder matchBy(@Nullable String matchBy) {
            this.matchBy = matchBy;
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            this.values = Objects.requireNonNull(values);
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public GetDevicesFilter build() {
            final var _resultValue = new GetDevicesFilter();
            _resultValue.all = all;
            _resultValue.attribute = attribute;
            _resultValue.matchBy = matchBy;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
