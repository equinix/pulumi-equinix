// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.outputs;

import com.equinix.pulumi.fabric.outputs.ConnectionASideAccessPoint;
import com.equinix.pulumi.fabric.outputs.ConnectionASideAdditionalInfo;
import com.equinix.pulumi.fabric.outputs.ConnectionASideServiceToken;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionASide {
    /**
     * @return Point of access details
     * 
     */
    private @Nullable ConnectionASideAccessPoint accessPoint;
    /**
     * @return Connection side additional information
     * 
     */
    private @Nullable List<ConnectionASideAdditionalInfo> additionalInfo;
    /**
     * @return For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     * 
     */
    private @Nullable ConnectionASideServiceToken serviceToken;

    private ConnectionASide() {}
    /**
     * @return Point of access details
     * 
     */
    public Optional<ConnectionASideAccessPoint> accessPoint() {
        return Optional.ofNullable(this.accessPoint);
    }
    /**
     * @return Connection side additional information
     * 
     */
    public List<ConnectionASideAdditionalInfo> additionalInfo() {
        return this.additionalInfo == null ? List.of() : this.additionalInfo;
    }
    /**
     * @return For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     * 
     */
    public Optional<ConnectionASideServiceToken> serviceToken() {
        return Optional.ofNullable(this.serviceToken);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionASide defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ConnectionASideAccessPoint accessPoint;
        private @Nullable List<ConnectionASideAdditionalInfo> additionalInfo;
        private @Nullable ConnectionASideServiceToken serviceToken;
        public Builder() {}
        public Builder(ConnectionASide defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPoint = defaults.accessPoint;
    	      this.additionalInfo = defaults.additionalInfo;
    	      this.serviceToken = defaults.serviceToken;
        }

        @CustomType.Setter
        public Builder accessPoint(@Nullable ConnectionASideAccessPoint accessPoint) {
            this.accessPoint = accessPoint;
            return this;
        }
        @CustomType.Setter
        public Builder additionalInfo(@Nullable List<ConnectionASideAdditionalInfo> additionalInfo) {
            this.additionalInfo = additionalInfo;
            return this;
        }
        public Builder additionalInfo(ConnectionASideAdditionalInfo... additionalInfo) {
            return additionalInfo(List.of(additionalInfo));
        }
        @CustomType.Setter
        public Builder serviceToken(@Nullable ConnectionASideServiceToken serviceToken) {
            this.serviceToken = serviceToken;
            return this;
        }
        public ConnectionASide build() {
            final var o = new ConnectionASide();
            o.accessPoint = accessPoint;
            o.additionalInfo = additionalInfo;
            o.serviceToken = serviceToken;
            return o;
        }
    }
}
