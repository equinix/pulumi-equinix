// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.equinix.networkedge.inputs;

import com.equinix.pulumi.equinix.enums.Metro;
import com.equinix.pulumi.equinix.networkedge.enums.FileType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFileState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFileState Empty = new NetworkFileState();

    /**
     * Boolean value that determines device licensing mode, i.e.,
     * `bring your own license` or `subscription`.
     * 
     */
    @Import(name="byol")
    private @Nullable Output<Boolean> byol;

    /**
     * @return Boolean value that determines device licensing mode, i.e.,
     * `bring your own license` or `subscription`.
     * 
     */
    public Optional<Output<Boolean>> byol() {
        return Optional.ofNullable(this.byol);
    }

    /**
     * Uploaded file content, expected to be a UTF-8 encoded string.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Uploaded file content, expected to be a UTF-8 encoded string.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Device type code
     * 
     */
    @Import(name="deviceTypeCode")
    private @Nullable Output<String> deviceTypeCode;

    /**
     * @return Device type code
     * 
     */
    public Optional<Output<String>> deviceTypeCode() {
        return Optional.ofNullable(this.deviceTypeCode);
    }

    /**
     * File name.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return File name.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * File upload location metro code. It should match the device location metro code.
     * 
     */
    @Import(name="metroCode")
    private @Nullable Output<Either<String,Metro>> metroCode;

    /**
     * @return File upload location metro code. It should match the device location metro code.
     * 
     */
    public Optional<Output<Either<String,Metro>>> metroCode() {
        return Optional.ofNullable(this.metroCode);
    }

    /**
     * File process type (LICENSE or CLOUD_INIT).
     * 
     */
    @Import(name="processType")
    private @Nullable Output<Either<String,FileType>> processType;

    /**
     * @return File process type (LICENSE or CLOUD_INIT).
     * 
     */
    public Optional<Output<Either<String,FileType>>> processType() {
        return Optional.ofNullable(this.processType);
    }

    /**
     * Boolean value that determines device management mode, i.e.,
     * `self-managed` or `Equinix-managed`.
     * 
     */
    @Import(name="selfManaged")
    private @Nullable Output<Boolean> selfManaged;

    /**
     * @return Boolean value that determines device management mode, i.e.,
     * `self-managed` or `Equinix-managed`.
     * 
     */
    public Optional<Output<Boolean>> selfManaged() {
        return Optional.ofNullable(this.selfManaged);
    }

    /**
     * File upload status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return File upload status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Unique identifier of file resource.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Unique identifier of file resource.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private NetworkFileState() {}

    private NetworkFileState(NetworkFileState $) {
        this.byol = $.byol;
        this.content = $.content;
        this.deviceTypeCode = $.deviceTypeCode;
        this.fileName = $.fileName;
        this.metroCode = $.metroCode;
        this.processType = $.processType;
        this.selfManaged = $.selfManaged;
        this.status = $.status;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFileState $;

        public Builder() {
            $ = new NetworkFileState();
        }

        public Builder(NetworkFileState defaults) {
            $ = new NetworkFileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e.,
         * `bring your own license` or `subscription`.
         * 
         * @return builder
         * 
         */
        public Builder byol(@Nullable Output<Boolean> byol) {
            $.byol = byol;
            return this;
        }

        /**
         * @param byol Boolean value that determines device licensing mode, i.e.,
         * `bring your own license` or `subscription`.
         * 
         * @return builder
         * 
         */
        public Builder byol(Boolean byol) {
            return byol(Output.of(byol));
        }

        /**
         * @param content Uploaded file content, expected to be a UTF-8 encoded string.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Uploaded file content, expected to be a UTF-8 encoded string.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param deviceTypeCode Device type code
         * 
         * @return builder
         * 
         */
        public Builder deviceTypeCode(@Nullable Output<String> deviceTypeCode) {
            $.deviceTypeCode = deviceTypeCode;
            return this;
        }

        /**
         * @param deviceTypeCode Device type code
         * 
         * @return builder
         * 
         */
        public Builder deviceTypeCode(String deviceTypeCode) {
            return deviceTypeCode(Output.of(deviceTypeCode));
        }

        /**
         * @param fileName File name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName File name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(@Nullable Output<Either<String,Metro>> metroCode) {
            $.metroCode = metroCode;
            return this;
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Either<String,Metro> metroCode) {
            return metroCode(Output.of(metroCode));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(String metroCode) {
            return metroCode(Either.ofLeft(metroCode));
        }

        /**
         * @param metroCode File upload location metro code. It should match the device location metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Metro metroCode) {
            return metroCode(Either.ofRight(metroCode));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(@Nullable Output<Either<String,FileType>> processType) {
            $.processType = processType;
            return this;
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(Either<String,FileType> processType) {
            return processType(Output.of(processType));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(String processType) {
            return processType(Either.ofLeft(processType));
        }

        /**
         * @param processType File process type (LICENSE or CLOUD_INIT).
         * 
         * @return builder
         * 
         */
        public Builder processType(FileType processType) {
            return processType(Either.ofRight(processType));
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e.,
         * `self-managed` or `Equinix-managed`.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(@Nullable Output<Boolean> selfManaged) {
            $.selfManaged = selfManaged;
            return this;
        }

        /**
         * @param selfManaged Boolean value that determines device management mode, i.e.,
         * `self-managed` or `Equinix-managed`.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(Boolean selfManaged) {
            return selfManaged(Output.of(selfManaged));
        }

        /**
         * @param status File upload status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status File upload status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param uuid Unique identifier of file resource.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Unique identifier of file resource.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public NetworkFileState build() {
            return $;
        }
    }

}
