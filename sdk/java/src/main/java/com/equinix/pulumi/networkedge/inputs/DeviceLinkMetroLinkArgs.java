// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DeviceLinkMetroLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceLinkMetroLinkArgs Empty = new DeviceLinkMetroLinkArgs();

    /**
     * billing account number to be used for connection charges
     * 
     */
    @Import(name="accountNumber", required=true)
    private Output<String> accountNumber;

    /**
     * @return billing account number to be used for connection charges
     * 
     */
    public Output<String> accountNumber() {
        return this.accountNumber;
    }

    /**
     * connection metro code.
     * 
     */
    @Import(name="metroCode", required=true)
    private Output<String> metroCode;

    /**
     * @return connection metro code.
     * 
     */
    public Output<String> metroCode() {
        return this.metroCode;
    }

    /**
     * connection throughput.
     * 
     */
    @Import(name="throughput", required=true)
    private Output<String> throughput;

    /**
     * @return connection throughput.
     * 
     */
    public Output<String> throughput() {
        return this.throughput;
    }

    /**
     * connection throughput unit (Mbps or Gbps).
     * 
     */
    @Import(name="throughputUnit", required=true)
    private Output<String> throughputUnit;

    /**
     * @return connection throughput unit (Mbps or Gbps).
     * 
     */
    public Output<String> throughputUnit() {
        return this.throughputUnit;
    }

    private DeviceLinkMetroLinkArgs() {}

    private DeviceLinkMetroLinkArgs(DeviceLinkMetroLinkArgs $) {
        this.accountNumber = $.accountNumber;
        this.metroCode = $.metroCode;
        this.throughput = $.throughput;
        this.throughputUnit = $.throughputUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceLinkMetroLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceLinkMetroLinkArgs $;

        public Builder() {
            $ = new DeviceLinkMetroLinkArgs();
        }

        public Builder(DeviceLinkMetroLinkArgs defaults) {
            $ = new DeviceLinkMetroLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountNumber billing account number to be used for connection charges
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(Output<String> accountNumber) {
            $.accountNumber = accountNumber;
            return this;
        }

        /**
         * @param accountNumber billing account number to be used for connection charges
         * 
         * @return builder
         * 
         */
        public Builder accountNumber(String accountNumber) {
            return accountNumber(Output.of(accountNumber));
        }

        /**
         * @param metroCode connection metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(Output<String> metroCode) {
            $.metroCode = metroCode;
            return this;
        }

        /**
         * @param metroCode connection metro code.
         * 
         * @return builder
         * 
         */
        public Builder metroCode(String metroCode) {
            return metroCode(Output.of(metroCode));
        }

        /**
         * @param throughput connection throughput.
         * 
         * @return builder
         * 
         */
        public Builder throughput(Output<String> throughput) {
            $.throughput = throughput;
            return this;
        }

        /**
         * @param throughput connection throughput.
         * 
         * @return builder
         * 
         */
        public Builder throughput(String throughput) {
            return throughput(Output.of(throughput));
        }

        /**
         * @param throughputUnit connection throughput unit (Mbps or Gbps).
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(Output<String> throughputUnit) {
            $.throughputUnit = throughputUnit;
            return this;
        }

        /**
         * @param throughputUnit connection throughput unit (Mbps or Gbps).
         * 
         * @return builder
         * 
         */
        public Builder throughputUnit(String throughputUnit) {
            return throughputUnit(Output.of(throughputUnit));
        }

        public DeviceLinkMetroLinkArgs build() {
            if ($.accountNumber == null) {
                throw new MissingRequiredPropertyException("DeviceLinkMetroLinkArgs", "accountNumber");
            }
            if ($.metroCode == null) {
                throw new MissingRequiredPropertyException("DeviceLinkMetroLinkArgs", "metroCode");
            }
            if ($.throughput == null) {
                throw new MissingRequiredPropertyException("DeviceLinkMetroLinkArgs", "throughput");
            }
            if ($.throughputUnit == null) {
                throw new MissingRequiredPropertyException("DeviceLinkMetroLinkArgs", "throughputUnit");
            }
            return $;
        }
    }

}
