// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterconnectionServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final InterconnectionServiceTokenArgs Empty = new InterconnectionServiceTokenArgs();

    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="maxAllowedSpeed")
    private @Nullable Output<String> maxAllowedSpeed;

    public Optional<Output<String>> maxAllowedSpeed() {
        return Optional.ofNullable(this.maxAllowedSpeed);
    }

    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Connection type - dedicated or shared.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Connection type - dedicated or shared.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private InterconnectionServiceTokenArgs() {}

    private InterconnectionServiceTokenArgs(InterconnectionServiceTokenArgs $) {
        this.expiresAt = $.expiresAt;
        this.id = $.id;
        this.maxAllowedSpeed = $.maxAllowedSpeed;
        this.role = $.role;
        this.state = $.state;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterconnectionServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterconnectionServiceTokenArgs $;

        public Builder() {
            $ = new InterconnectionServiceTokenArgs();
        }

        public Builder(InterconnectionServiceTokenArgs defaults) {
            $ = new InterconnectionServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder maxAllowedSpeed(@Nullable Output<String> maxAllowedSpeed) {
            $.maxAllowedSpeed = maxAllowedSpeed;
            return this;
        }

        public Builder maxAllowedSpeed(String maxAllowedSpeed) {
            return maxAllowedSpeed(Output.of(maxAllowedSpeed));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type Connection type - dedicated or shared.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Connection type - dedicated or shared.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InterconnectionServiceTokenArgs build() {
            return $;
        }
    }

}
