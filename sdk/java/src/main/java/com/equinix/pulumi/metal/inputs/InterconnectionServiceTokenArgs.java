// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class InterconnectionServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final InterconnectionServiceTokenArgs Empty = new InterconnectionServiceTokenArgs();

    @Import(name="expiresAt", required=true)
    private Output<String> expiresAt;

    public Output<String> expiresAt() {
        return this.expiresAt;
    }

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="maxAllowedSpeed", required=true)
    private Output<String> maxAllowedSpeed;

    public Output<String> maxAllowedSpeed() {
        return this.maxAllowedSpeed;
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    @Import(name="state", required=true)
    private Output<String> state;

    public Output<String> state() {
        return this.state;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private InterconnectionServiceTokenArgs() {}

    private InterconnectionServiceTokenArgs(InterconnectionServiceTokenArgs $) {
        this.expiresAt = $.expiresAt;
        this.id = $.id;
        this.maxAllowedSpeed = $.maxAllowedSpeed;
        this.role = $.role;
        this.state = $.state;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterconnectionServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterconnectionServiceTokenArgs $;

        public Builder() {
            $ = new InterconnectionServiceTokenArgs();
        }

        public Builder(InterconnectionServiceTokenArgs defaults) {
            $ = new InterconnectionServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder expiresAt(Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder maxAllowedSpeed(Output<String> maxAllowedSpeed) {
            $.maxAllowedSpeed = maxAllowedSpeed;
            return this;
        }

        public Builder maxAllowedSpeed(String maxAllowedSpeed) {
            return maxAllowedSpeed(Output.of(maxAllowedSpeed));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InterconnectionServiceTokenArgs build() {
            if ($.expiresAt == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "expiresAt");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "id");
            }
            if ($.maxAllowedSpeed == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "maxAllowedSpeed");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "role");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "state");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("InterconnectionServiceTokenArgs", "type");
            }
            return $;
        }
    }

}
