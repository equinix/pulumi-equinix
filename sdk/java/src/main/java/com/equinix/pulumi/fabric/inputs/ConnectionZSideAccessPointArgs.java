// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.fabric.inputs;

import com.equinix.pulumi.fabric.enums.AccessPointPeeringType;
import com.equinix.pulumi.fabric.enums.AccessPointType;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointAccountArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointGatewayArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointInterfaceArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointLinkProtocolArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointLocationArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointNetworkArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointPortArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointProfileArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointRouterArgs;
import com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointVirtualDeviceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionZSideAccessPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionZSideAccessPointArgs Empty = new ConnectionZSideAccessPointArgs();

    /**
     * Account
     * 
     */
    @Import(name="account")
    private @Nullable Output<ConnectionZSideAccessPointAccountArgs> account;

    /**
     * @return Account
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointAccountArgs>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    @Import(name="authenticationKey")
    private @Nullable Output<String> authenticationKey;

    /**
     * @return Authentication key for provider based connections or Metal-Fabric Integration connections
     * 
     */
    public Optional<Output<String>> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }

    /**
     * **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    @Import(name="gateway")
    private @Nullable Output<ConnectionZSideAccessPointGatewayArgs> gateway;

    /**
     * @return **Deprecated** `gateway` Use `router` attribute instead
     * 
     * @deprecated
     * use router attribute instead; gateway is no longer a part of the supported backend
     * 
     */
    @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
    public Optional<Output<ConnectionZSideAccessPointGatewayArgs>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * Virtual device interface
     * 
     */
    @Import(name="interface")
    private @Nullable Output<ConnectionZSideAccessPointInterfaceArgs> interface_;

    /**
     * @return Virtual device interface
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointInterfaceArgs>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * Connection link protocol
     * 
     */
    @Import(name="linkProtocol")
    private @Nullable Output<ConnectionZSideAccessPointLinkProtocolArgs> linkProtocol;

    /**
     * @return Connection link protocol
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointLinkProtocolArgs>> linkProtocol() {
        return Optional.ofNullable(this.linkProtocol);
    }

    /**
     * Access point location
     * 
     */
    @Import(name="location")
    private @Nullable Output<ConnectionZSideAccessPointLocationArgs> location;

    /**
     * @return Access point location
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * network access point information
     * 
     */
    @Import(name="network")
    private @Nullable Output<ConnectionZSideAccessPointNetworkArgs> network;

    /**
     * @return network access point information
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    @Import(name="peeringType")
    private @Nullable Output<Either<String,AccessPointPeeringType>> peeringType;

    /**
     * @return Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     * 
     */
    public Optional<Output<Either<String,AccessPointPeeringType>>> peeringType() {
        return Optional.ofNullable(this.peeringType);
    }

    /**
     * Port access point information
     * 
     */
    @Import(name="port")
    private @Nullable Output<ConnectionZSideAccessPointPortArgs> port;

    /**
     * @return Port access point information
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointPortArgs>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Service Profile
     * 
     */
    @Import(name="profile")
    private @Nullable Output<ConnectionZSideAccessPointProfileArgs> profile;

    /**
     * @return Service Profile
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointProfileArgs>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Provider assigned Connection Id
     * 
     */
    @Import(name="providerConnectionId")
    private @Nullable Output<String> providerConnectionId;

    /**
     * @return Provider assigned Connection Id
     * 
     */
    public Optional<Output<String>> providerConnectionId() {
        return Optional.ofNullable(this.providerConnectionId);
    }

    /**
     * Network role
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Network role
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Cloud Router access point information that replaces `gateway`
     * 
     */
    @Import(name="router")
    private @Nullable Output<ConnectionZSideAccessPointRouterArgs> router;

    /**
     * @return Cloud Router access point information that replaces `gateway`
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointRouterArgs>> router() {
        return Optional.ofNullable(this.router);
    }

    /**
     * Access point seller region
     * 
     */
    @Import(name="sellerRegion")
    private @Nullable Output<String> sellerRegion;

    /**
     * @return Access point seller region
     * 
     */
    public Optional<Output<String>> sellerRegion() {
        return Optional.ofNullable(this.sellerRegion);
    }

    /**
     * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,AccessPointType>> type;

    /**
     * @return Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
     * 
     */
    public Optional<Output<Either<String,AccessPointType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Virtual device
     * 
     */
    @Import(name="virtualDevice")
    private @Nullable Output<ConnectionZSideAccessPointVirtualDeviceArgs> virtualDevice;

    /**
     * @return Virtual device
     * 
     */
    public Optional<Output<ConnectionZSideAccessPointVirtualDeviceArgs>> virtualDevice() {
        return Optional.ofNullable(this.virtualDevice);
    }

    private ConnectionZSideAccessPointArgs() {}

    private ConnectionZSideAccessPointArgs(ConnectionZSideAccessPointArgs $) {
        this.account = $.account;
        this.authenticationKey = $.authenticationKey;
        this.gateway = $.gateway;
        this.interface_ = $.interface_;
        this.linkProtocol = $.linkProtocol;
        this.location = $.location;
        this.network = $.network;
        this.peeringType = $.peeringType;
        this.port = $.port;
        this.profile = $.profile;
        this.providerConnectionId = $.providerConnectionId;
        this.role = $.role;
        this.router = $.router;
        this.sellerRegion = $.sellerRegion;
        this.type = $.type;
        this.virtualDevice = $.virtualDevice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionZSideAccessPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionZSideAccessPointArgs $;

        public Builder() {
            $ = new ConnectionZSideAccessPointArgs();
        }

        public Builder(ConnectionZSideAccessPointArgs defaults) {
            $ = new ConnectionZSideAccessPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account Account
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<ConnectionZSideAccessPointAccountArgs> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account Account
         * 
         * @return builder
         * 
         */
        public Builder account(ConnectionZSideAccessPointAccountArgs account) {
            return account(Output.of(account));
        }

        /**
         * @param authenticationKey Authentication key for provider based connections or Metal-Fabric Integration connections
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(@Nullable Output<String> authenticationKey) {
            $.authenticationKey = authenticationKey;
            return this;
        }

        /**
         * @param authenticationKey Authentication key for provider based connections or Metal-Fabric Integration connections
         * 
         * @return builder
         * 
         */
        public Builder authenticationKey(String authenticationKey) {
            return authenticationKey(Output.of(authenticationKey));
        }

        /**
         * @param gateway **Deprecated** `gateway` Use `router` attribute instead
         * 
         * @return builder
         * 
         * @deprecated
         * use router attribute instead; gateway is no longer a part of the supported backend
         * 
         */
        @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
        public Builder gateway(@Nullable Output<ConnectionZSideAccessPointGatewayArgs> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway **Deprecated** `gateway` Use `router` attribute instead
         * 
         * @return builder
         * 
         * @deprecated
         * use router attribute instead; gateway is no longer a part of the supported backend
         * 
         */
        @Deprecated /* use router attribute instead; gateway is no longer a part of the supported backend */
        public Builder gateway(ConnectionZSideAccessPointGatewayArgs gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param interface_ Virtual device interface
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<ConnectionZSideAccessPointInterfaceArgs> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ Virtual device interface
         * 
         * @return builder
         * 
         */
        public Builder interface_(ConnectionZSideAccessPointInterfaceArgs interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param linkProtocol Connection link protocol
         * 
         * @return builder
         * 
         */
        public Builder linkProtocol(@Nullable Output<ConnectionZSideAccessPointLinkProtocolArgs> linkProtocol) {
            $.linkProtocol = linkProtocol;
            return this;
        }

        /**
         * @param linkProtocol Connection link protocol
         * 
         * @return builder
         * 
         */
        public Builder linkProtocol(ConnectionZSideAccessPointLinkProtocolArgs linkProtocol) {
            return linkProtocol(Output.of(linkProtocol));
        }

        /**
         * @param location Access point location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<ConnectionZSideAccessPointLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Access point location
         * 
         * @return builder
         * 
         */
        public Builder location(ConnectionZSideAccessPointLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param network network access point information
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<ConnectionZSideAccessPointNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network network access point information
         * 
         * @return builder
         * 
         */
        public Builder network(ConnectionZSideAccessPointNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param peeringType Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         * 
         * @return builder
         * 
         */
        public Builder peeringType(@Nullable Output<Either<String,AccessPointPeeringType>> peeringType) {
            $.peeringType = peeringType;
            return this;
        }

        /**
         * @param peeringType Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         * 
         * @return builder
         * 
         */
        public Builder peeringType(Either<String,AccessPointPeeringType> peeringType) {
            return peeringType(Output.of(peeringType));
        }

        /**
         * @param peeringType Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         * 
         * @return builder
         * 
         */
        public Builder peeringType(String peeringType) {
            return peeringType(Either.ofLeft(peeringType));
        }

        /**
         * @param peeringType Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         * 
         * @return builder
         * 
         */
        public Builder peeringType(AccessPointPeeringType peeringType) {
            return peeringType(Either.ofRight(peeringType));
        }

        /**
         * @param port Port access point information
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<ConnectionZSideAccessPointPortArgs> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port access point information
         * 
         * @return builder
         * 
         */
        public Builder port(ConnectionZSideAccessPointPortArgs port) {
            return port(Output.of(port));
        }

        /**
         * @param profile Service Profile
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<ConnectionZSideAccessPointProfileArgs> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Service Profile
         * 
         * @return builder
         * 
         */
        public Builder profile(ConnectionZSideAccessPointProfileArgs profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param providerConnectionId Provider assigned Connection Id
         * 
         * @return builder
         * 
         */
        public Builder providerConnectionId(@Nullable Output<String> providerConnectionId) {
            $.providerConnectionId = providerConnectionId;
            return this;
        }

        /**
         * @param providerConnectionId Provider assigned Connection Id
         * 
         * @return builder
         * 
         */
        public Builder providerConnectionId(String providerConnectionId) {
            return providerConnectionId(Output.of(providerConnectionId));
        }

        /**
         * @param role Network role
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Network role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param router Cloud Router access point information that replaces `gateway`
         * 
         * @return builder
         * 
         */
        public Builder router(@Nullable Output<ConnectionZSideAccessPointRouterArgs> router) {
            $.router = router;
            return this;
        }

        /**
         * @param router Cloud Router access point information that replaces `gateway`
         * 
         * @return builder
         * 
         */
        public Builder router(ConnectionZSideAccessPointRouterArgs router) {
            return router(Output.of(router));
        }

        /**
         * @param sellerRegion Access point seller region
         * 
         * @return builder
         * 
         */
        public Builder sellerRegion(@Nullable Output<String> sellerRegion) {
            $.sellerRegion = sellerRegion;
            return this;
        }

        /**
         * @param sellerRegion Access point seller region
         * 
         * @return builder
         * 
         */
        public Builder sellerRegion(String sellerRegion) {
            return sellerRegion(Output.of(sellerRegion));
        }

        /**
         * @param type Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,AccessPointType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,AccessPointType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         * 
         * @return builder
         * 
         */
        public Builder type(AccessPointType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param virtualDevice Virtual device
         * 
         * @return builder
         * 
         */
        public Builder virtualDevice(@Nullable Output<ConnectionZSideAccessPointVirtualDeviceArgs> virtualDevice) {
            $.virtualDevice = virtualDevice;
            return this;
        }

        /**
         * @param virtualDevice Virtual device
         * 
         * @return builder
         * 
         */
        public Builder virtualDevice(ConnectionZSideAccessPointVirtualDeviceArgs virtualDevice) {
            return virtualDevice(Output.of(virtualDevice));
        }

        public ConnectionZSideAccessPointArgs build() {
            return $;
        }
    }

}
