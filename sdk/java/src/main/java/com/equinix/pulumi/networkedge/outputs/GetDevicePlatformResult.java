// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.equinix.pulumi.networkedge.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDevicePlatformResult {
    private Integer coreCount;
    private String deviceType;
    private String flavor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> licenseOptions;
    private List<String> managementTypes;
    /**
     * @return The amount of memory provided by device platform.
     * 
     */
    private Integer memory;
    /**
     * @return Unit of memory provider by device platform.
     * 
     */
    private String memoryUnit;
    private List<String> packages;

    private GetDevicePlatformResult() {}
    public Integer coreCount() {
        return this.coreCount;
    }
    public String deviceType() {
        return this.deviceType;
    }
    public String flavor() {
        return this.flavor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> licenseOptions() {
        return this.licenseOptions;
    }
    public List<String> managementTypes() {
        return this.managementTypes;
    }
    /**
     * @return The amount of memory provided by device platform.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return Unit of memory provider by device platform.
     * 
     */
    public String memoryUnit() {
        return this.memoryUnit;
    }
    public List<String> packages() {
        return this.packages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDevicePlatformResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer coreCount;
        private String deviceType;
        private String flavor;
        private String id;
        private List<String> licenseOptions;
        private List<String> managementTypes;
        private Integer memory;
        private String memoryUnit;
        private List<String> packages;
        public Builder() {}
        public Builder(GetDevicePlatformResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coreCount = defaults.coreCount;
    	      this.deviceType = defaults.deviceType;
    	      this.flavor = defaults.flavor;
    	      this.id = defaults.id;
    	      this.licenseOptions = defaults.licenseOptions;
    	      this.managementTypes = defaults.managementTypes;
    	      this.memory = defaults.memory;
    	      this.memoryUnit = defaults.memoryUnit;
    	      this.packages = defaults.packages;
        }

        @CustomType.Setter
        public Builder coreCount(Integer coreCount) {
            if (coreCount == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "coreCount");
            }
            this.coreCount = coreCount;
            return this;
        }
        @CustomType.Setter
        public Builder deviceType(String deviceType) {
            if (deviceType == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "deviceType");
            }
            this.deviceType = deviceType;
            return this;
        }
        @CustomType.Setter
        public Builder flavor(String flavor) {
            if (flavor == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "flavor");
            }
            this.flavor = flavor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder licenseOptions(List<String> licenseOptions) {
            if (licenseOptions == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "licenseOptions");
            }
            this.licenseOptions = licenseOptions;
            return this;
        }
        public Builder licenseOptions(String... licenseOptions) {
            return licenseOptions(List.of(licenseOptions));
        }
        @CustomType.Setter
        public Builder managementTypes(List<String> managementTypes) {
            if (managementTypes == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "managementTypes");
            }
            this.managementTypes = managementTypes;
            return this;
        }
        public Builder managementTypes(String... managementTypes) {
            return managementTypes(List.of(managementTypes));
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryUnit(String memoryUnit) {
            if (memoryUnit == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "memoryUnit");
            }
            this.memoryUnit = memoryUnit;
            return this;
        }
        @CustomType.Setter
        public Builder packages(List<String> packages) {
            if (packages == null) {
              throw new MissingRequiredPropertyException("GetDevicePlatformResult", "packages");
            }
            this.packages = packages;
            return this;
        }
        public Builder packages(String... packages) {
            return packages(List.of(packages));
        }
        public GetDevicePlatformResult build() {
            final var _resultValue = new GetDevicePlatformResult();
            _resultValue.coreCount = coreCount;
            _resultValue.deviceType = deviceType;
            _resultValue.flavor = flavor;
            _resultValue.id = id;
            _resultValue.licenseOptions = licenseOptions;
            _resultValue.managementTypes = managementTypes;
            _resultValue.memory = memory;
            _resultValue.memoryUnit = memoryUnit;
            _resultValue.packages = packages;
            return _resultValue;
        }
    }
}
