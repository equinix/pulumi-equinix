// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinix.metal.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPortArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPortArgs Empty = new GetPortArgs();

    /**
     * Device UUID where to lookup the port.
     * 
     */
    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    /**
     * @return Device UUID where to lookup the port.
     * 
     */
    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * Name of the port to look up, i.e. `bond0`, `eth1`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the port to look up, i.e. `bond0`, `eth1`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the port to read, conflicts with `device_id`.
     * 
     */
    @Import(name="portId")
    private @Nullable Output<String> portId;

    /**
     * @return ID of the port to read, conflicts with `device_id`.
     * 
     */
    public Optional<Output<String>> portId() {
        return Optional.ofNullable(this.portId);
    }

    private GetPortArgs() {}

    private GetPortArgs(GetPortArgs $) {
        this.deviceId = $.deviceId;
        this.name = $.name;
        this.portId = $.portId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPortArgs $;

        public Builder() {
            $ = new GetPortArgs();
        }

        public Builder(GetPortArgs defaults) {
            $ = new GetPortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceId Device UUID where to lookup the port.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        /**
         * @param deviceId Device UUID where to lookup the port.
         * 
         * @return builder
         * 
         */
        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        /**
         * @param name Name of the port to look up, i.e. `bond0`, `eth1`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the port to look up, i.e. `bond0`, `eth1`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portId ID of the port to read, conflicts with `device_id`.
         * 
         * @return builder
         * 
         */
        public Builder portId(@Nullable Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId ID of the port to read, conflicts with `device_id`.
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        public GetPortArgs build() {
            return $;
        }
    }

}
