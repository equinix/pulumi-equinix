// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinix.metal;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PortArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortArgs Empty = new PortArgs();

    /**
     * Whether the port should be bonded.
     * 
     */
    @Import(name="bonded", required=true)
    private Output<Boolean> bonded;

    /**
     * @return Whether the port should be bonded.
     * 
     */
    public Output<Boolean> bonded() {
        return this.bonded;
    }

    /**
     * Whether to put the port to Layer 2 mode, valid only for bond ports.
     * 
     */
    @Import(name="layer2")
    private @Nullable Output<Boolean> layer2;

    /**
     * @return Whether to put the port to Layer 2 mode, valid only for bond ports.
     * 
     */
    public Optional<Output<Boolean>> layer2() {
        return Optional.ofNullable(this.layer2);
    }

    /**
     * UUID of a VLAN to assign as a native VLAN. It must be one of
     * attached VLANs (from `vlan_ids` parameter).
     * 
     */
    @Import(name="nativeVlanId")
    private @Nullable Output<String> nativeVlanId;

    /**
     * @return UUID of a VLAN to assign as a native VLAN. It must be one of
     * attached VLANs (from `vlan_ids` parameter).
     * 
     */
    public Optional<Output<String>> nativeVlanId() {
        return Optional.ofNullable(this.nativeVlanId);
    }

    /**
     * ID of the port to read.
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return ID of the port to read.
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
     * 
     */
    @Import(name="resetOnDelete")
    private @Nullable Output<Boolean> resetOnDelete;

    /**
     * @return Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
     * 
     */
    public Optional<Output<Boolean>> resetOnDelete() {
        return Optional.ofNullable(this.resetOnDelete);
    }

    /**
     * List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
     * ports.
     * 
     */
    @Import(name="vlanIds")
    private @Nullable Output<List<String>> vlanIds;

    /**
     * @return List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
     * ports.
     * 
     */
    public Optional<Output<List<String>>> vlanIds() {
        return Optional.ofNullable(this.vlanIds);
    }

    /**
     * List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
     * ports.
     * 
     */
    @Import(name="vxlanIds")
    private @Nullable Output<List<Integer>> vxlanIds;

    /**
     * @return List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
     * ports.
     * 
     */
    public Optional<Output<List<Integer>>> vxlanIds() {
        return Optional.ofNullable(this.vxlanIds);
    }

    private PortArgs() {}

    private PortArgs(PortArgs $) {
        this.bonded = $.bonded;
        this.layer2 = $.layer2;
        this.nativeVlanId = $.nativeVlanId;
        this.portId = $.portId;
        this.resetOnDelete = $.resetOnDelete;
        this.vlanIds = $.vlanIds;
        this.vxlanIds = $.vxlanIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortArgs $;

        public Builder() {
            $ = new PortArgs();
        }

        public Builder(PortArgs defaults) {
            $ = new PortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bonded Whether the port should be bonded.
         * 
         * @return builder
         * 
         */
        public Builder bonded(Output<Boolean> bonded) {
            $.bonded = bonded;
            return this;
        }

        /**
         * @param bonded Whether the port should be bonded.
         * 
         * @return builder
         * 
         */
        public Builder bonded(Boolean bonded) {
            return bonded(Output.of(bonded));
        }

        /**
         * @param layer2 Whether to put the port to Layer 2 mode, valid only for bond ports.
         * 
         * @return builder
         * 
         */
        public Builder layer2(@Nullable Output<Boolean> layer2) {
            $.layer2 = layer2;
            return this;
        }

        /**
         * @param layer2 Whether to put the port to Layer 2 mode, valid only for bond ports.
         * 
         * @return builder
         * 
         */
        public Builder layer2(Boolean layer2) {
            return layer2(Output.of(layer2));
        }

        /**
         * @param nativeVlanId UUID of a VLAN to assign as a native VLAN. It must be one of
         * attached VLANs (from `vlan_ids` parameter).
         * 
         * @return builder
         * 
         */
        public Builder nativeVlanId(@Nullable Output<String> nativeVlanId) {
            $.nativeVlanId = nativeVlanId;
            return this;
        }

        /**
         * @param nativeVlanId UUID of a VLAN to assign as a native VLAN. It must be one of
         * attached VLANs (from `vlan_ids` parameter).
         * 
         * @return builder
         * 
         */
        public Builder nativeVlanId(String nativeVlanId) {
            return nativeVlanId(Output.of(nativeVlanId));
        }

        /**
         * @param portId ID of the port to read.
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId ID of the port to read.
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param resetOnDelete Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
         * 
         * @return builder
         * 
         */
        public Builder resetOnDelete(@Nullable Output<Boolean> resetOnDelete) {
            $.resetOnDelete = resetOnDelete;
            return this;
        }

        /**
         * @param resetOnDelete Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.
         * 
         * @return builder
         * 
         */
        public Builder resetOnDelete(Boolean resetOnDelete) {
            return resetOnDelete(Output.of(resetOnDelete));
        }

        /**
         * @param vlanIds List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(@Nullable Output<List<String>> vlanIds) {
            $.vlanIds = vlanIds;
            return this;
        }

        /**
         * @param vlanIds List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(List<String> vlanIds) {
            return vlanIds(Output.of(vlanIds));
        }

        /**
         * @param vlanIds List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(String... vlanIds) {
            return vlanIds(List.of(vlanIds));
        }

        /**
         * @param vxlanIds List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vxlanIds(@Nullable Output<List<Integer>> vxlanIds) {
            $.vxlanIds = vxlanIds;
            return this;
        }

        /**
         * @param vxlanIds List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vxlanIds(List<Integer> vxlanIds) {
            return vxlanIds(Output.of(vxlanIds));
        }

        /**
         * @param vxlanIds List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid
         * ports.
         * 
         * @return builder
         * 
         */
        public Builder vxlanIds(Integer... vxlanIds) {
            return vxlanIds(List.of(vxlanIds));
        }

        public PortArgs build() {
            $.bonded = Objects.requireNonNull($.bonded, "expected parameter 'bonded' to be non-null");
            $.portId = Objects.requireNonNull($.portId, "expected parameter 'portId' to be non-null");
            return $;
        }
    }

}
