// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinix.fabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.equinix.fabric.inputs.ServiceProfilePortLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceProfilePortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceProfilePortArgs Empty = new ServiceProfilePortArgs();

    /**
     * Cross Connect Id
     * 
     */
    @Import(name="crossConnectId")
    private @Nullable Output<String> crossConnectId;

    /**
     * @return Cross Connect Id
     * 
     */
    public Optional<Output<String>> crossConnectId() {
        return Optional.ofNullable(this.crossConnectId);
    }

    /**
     * Colo/Port Location
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<ServiceProfilePortLocationArgs>> locations;

    /**
     * @return Colo/Port Location
     * 
     */
    public Optional<Output<List<ServiceProfilePortLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Seller Region
     * 
     */
    @Import(name="sellerRegion")
    private @Nullable Output<String> sellerRegion;

    /**
     * @return Seller Region
     * 
     */
    public Optional<Output<String>> sellerRegion() {
        return Optional.ofNullable(this.sellerRegion);
    }

    /**
     * Seller Region details
     * 
     */
    @Import(name="sellerRegionDescription")
    private @Nullable Output<String> sellerRegionDescription;

    /**
     * @return Seller Region details
     * 
     */
    public Optional<Output<String>> sellerRegionDescription() {
        return Optional.ofNullable(this.sellerRegionDescription);
    }

    /**
     * Colo/Port Type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Colo/Port Type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Colo/Port Uuid
     * 
     */
    @Import(name="uuid", required=true)
    private Output<String> uuid;

    /**
     * @return Colo/Port Uuid
     * 
     */
    public Output<String> uuid() {
        return this.uuid;
    }

    private ServiceProfilePortArgs() {}

    private ServiceProfilePortArgs(ServiceProfilePortArgs $) {
        this.crossConnectId = $.crossConnectId;
        this.locations = $.locations;
        this.sellerRegion = $.sellerRegion;
        this.sellerRegionDescription = $.sellerRegionDescription;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceProfilePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceProfilePortArgs $;

        public Builder() {
            $ = new ServiceProfilePortArgs();
        }

        public Builder(ServiceProfilePortArgs defaults) {
            $ = new ServiceProfilePortArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param crossConnectId Cross Connect Id
         * 
         * @return builder
         * 
         */
        public Builder crossConnectId(@Nullable Output<String> crossConnectId) {
            $.crossConnectId = crossConnectId;
            return this;
        }

        /**
         * @param crossConnectId Cross Connect Id
         * 
         * @return builder
         * 
         */
        public Builder crossConnectId(String crossConnectId) {
            return crossConnectId(Output.of(crossConnectId));
        }

        /**
         * @param locations Colo/Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<ServiceProfilePortLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations Colo/Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(List<ServiceProfilePortLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations Colo/Port Location
         * 
         * @return builder
         * 
         */
        public Builder locations(ServiceProfilePortLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param sellerRegion Seller Region
         * 
         * @return builder
         * 
         */
        public Builder sellerRegion(@Nullable Output<String> sellerRegion) {
            $.sellerRegion = sellerRegion;
            return this;
        }

        /**
         * @param sellerRegion Seller Region
         * 
         * @return builder
         * 
         */
        public Builder sellerRegion(String sellerRegion) {
            return sellerRegion(Output.of(sellerRegion));
        }

        /**
         * @param sellerRegionDescription Seller Region details
         * 
         * @return builder
         * 
         */
        public Builder sellerRegionDescription(@Nullable Output<String> sellerRegionDescription) {
            $.sellerRegionDescription = sellerRegionDescription;
            return this;
        }

        /**
         * @param sellerRegionDescription Seller Region details
         * 
         * @return builder
         * 
         */
        public Builder sellerRegionDescription(String sellerRegionDescription) {
            return sellerRegionDescription(Output.of(sellerRegionDescription));
        }

        /**
         * @param type Colo/Port Type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Colo/Port Type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uuid Colo/Port Uuid
         * 
         * @return builder
         * 
         */
        public Builder uuid(Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Colo/Port Uuid
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public ServiceProfilePortArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.uuid = Objects.requireNonNull($.uuid, "expected parameter 'uuid' to be non-null");
            return $;
        }
    }

}
