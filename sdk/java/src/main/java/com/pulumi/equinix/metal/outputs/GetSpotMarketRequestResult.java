// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.equinix.metal.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSpotMarketRequestResult {
    /**
     * @return List of IDs of devices spawned by the referenced Spot Market Request.
     * 
     */
    private List<String> deviceIds;
    /**
     * @return Maximum number devices to be created.
     * 
     */
    private Integer devicesMax;
    /**
     * @return Miniumum number devices to be created.
     * 
     */
    private Integer devicesMin;
    /**
     * @return Date and time When the spot market request will be ended.
     * 
     */
    private String endAt;
    /**
     * @return Facility IDs where devices should be created.
     * 
     */
    private List<String> facilities;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Maximum price user is willing to pay per hour per device.
     * 
     */
    private Double maxBidPrice;
    /**
     * @return Metro where devices should be created.
     * 
     */
    private String metro;
    /**
     * @return The device plan slug.
     * 
     */
    private String plan;
    /**
     * @return Project ID.
     * 
     */
    private String projectId;
    private String requestId;

    private GetSpotMarketRequestResult() {}
    /**
     * @return List of IDs of devices spawned by the referenced Spot Market Request.
     * 
     */
    public List<String> deviceIds() {
        return this.deviceIds;
    }
    /**
     * @return Maximum number devices to be created.
     * 
     */
    public Integer devicesMax() {
        return this.devicesMax;
    }
    /**
     * @return Miniumum number devices to be created.
     * 
     */
    public Integer devicesMin() {
        return this.devicesMin;
    }
    /**
     * @return Date and time When the spot market request will be ended.
     * 
     */
    public String endAt() {
        return this.endAt;
    }
    /**
     * @return Facility IDs where devices should be created.
     * 
     */
    public List<String> facilities() {
        return this.facilities;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Maximum price user is willing to pay per hour per device.
     * 
     */
    public Double maxBidPrice() {
        return this.maxBidPrice;
    }
    /**
     * @return Metro where devices should be created.
     * 
     */
    public String metro() {
        return this.metro;
    }
    /**
     * @return The device plan slug.
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return Project ID.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    public String requestId() {
        return this.requestId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSpotMarketRequestResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> deviceIds;
        private Integer devicesMax;
        private Integer devicesMin;
        private String endAt;
        private List<String> facilities;
        private String id;
        private Double maxBidPrice;
        private String metro;
        private String plan;
        private String projectId;
        private String requestId;
        public Builder() {}
        public Builder(GetSpotMarketRequestResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceIds = defaults.deviceIds;
    	      this.devicesMax = defaults.devicesMax;
    	      this.devicesMin = defaults.devicesMin;
    	      this.endAt = defaults.endAt;
    	      this.facilities = defaults.facilities;
    	      this.id = defaults.id;
    	      this.maxBidPrice = defaults.maxBidPrice;
    	      this.metro = defaults.metro;
    	      this.plan = defaults.plan;
    	      this.projectId = defaults.projectId;
    	      this.requestId = defaults.requestId;
        }

        @CustomType.Setter
        public Builder deviceIds(List<String> deviceIds) {
            this.deviceIds = Objects.requireNonNull(deviceIds);
            return this;
        }
        public Builder deviceIds(String... deviceIds) {
            return deviceIds(List.of(deviceIds));
        }
        @CustomType.Setter
        public Builder devicesMax(Integer devicesMax) {
            this.devicesMax = Objects.requireNonNull(devicesMax);
            return this;
        }
        @CustomType.Setter
        public Builder devicesMin(Integer devicesMin) {
            this.devicesMin = Objects.requireNonNull(devicesMin);
            return this;
        }
        @CustomType.Setter
        public Builder endAt(String endAt) {
            this.endAt = Objects.requireNonNull(endAt);
            return this;
        }
        @CustomType.Setter
        public Builder facilities(List<String> facilities) {
            this.facilities = Objects.requireNonNull(facilities);
            return this;
        }
        public Builder facilities(String... facilities) {
            return facilities(List.of(facilities));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder maxBidPrice(Double maxBidPrice) {
            this.maxBidPrice = Objects.requireNonNull(maxBidPrice);
            return this;
        }
        @CustomType.Setter
        public Builder metro(String metro) {
            this.metro = Objects.requireNonNull(metro);
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            this.plan = Objects.requireNonNull(plan);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        public GetSpotMarketRequestResult build() {
            final var o = new GetSpotMarketRequestResult();
            o.deviceIds = deviceIds;
            o.devicesMax = devicesMax;
            o.devicesMin = devicesMin;
            o.endAt = endAt;
            o.facilities = facilities;
            o.id = id;
            o.maxBidPrice = maxBidPrice;
            o.metro = metro;
            o.plan = plan;
            o.projectId = projectId;
            o.requestId = requestId;
            return o;
        }
    }
}
