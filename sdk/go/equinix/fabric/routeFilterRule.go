// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Rule
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rfRule, err := fabric.NewRouteFilterRule(ctx, "rf_rule", &fabric.RouteFilterRuleArgs{
//				RouteFilterId: pulumi.String("<route_filter_policy_id>"),
//				Name:          pulumi.String("Route Filter Rule Name"),
//				Prefix:        pulumi.String("192.168.0.0/24"),
//				PrefixMatch:   pulumi.String("exact"),
//				Description:   pulumi.String("Route Filter Rule for X Purpose"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("routeFilterRuleId", rfRule.ID())
//			ctx.Export("routeFilterId", rfRule.RouteFilterId)
//			ctx.Export("routeFilterRulePrefix", rfRule.Prefix)
//			ctx.Export("routeFilterRulePrefixMatch", rfRule.PrefixMatch)
//			return nil
//		})
//	}
//
// ```
type RouteFilterRule struct {
	pulumi.CustomResourceState

	// Action that will be taken on IP Addresses matching the rule
	Action     pulumi.StringOutput                 `pulumi:"action"`
	ChangeLogs RouteFilterRuleChangeLogArrayOutput `pulumi:"changeLogs"`
	// An object with the details of the previous change applied on the Route Filter
	Changes RouteFilterRuleChangeArrayOutput `pulumi:"changes"`
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringOutput `pulumi:"description"`
	// Route filter rules URI
	Href pulumi.StringOutput `pulumi:"href"`
	// Name of the Route Filter
	Name pulumi.StringOutput `pulumi:"name"`
	// IP Address Prefix to Filter on
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
	PrefixMatch pulumi.StringOutput `pulumi:"prefixMatch"`
	// UUID of the Route Filter Policy to apply this Rule to
	RouteFilterId pulumi.StringOutput `pulumi:"routeFilterId"`
	// State of the Route Filter Rule in its lifecycle
	State pulumi.StringOutput `pulumi:"state"`
	// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix Assigned ID for Route Filter Rule
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewRouteFilterRule registers a new resource with the given unique name, arguments, and options.
func NewRouteFilterRule(ctx *pulumi.Context,
	name string, args *RouteFilterRuleArgs, opts ...pulumi.ResourceOption) (*RouteFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	if args.RouteFilterId == nil {
		return nil, errors.New("invalid value for required argument 'RouteFilterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteFilterRule
	err := ctx.RegisterResource("equinix:fabric/routeFilterRule:RouteFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteFilterRule gets an existing RouteFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteFilterRuleState, opts ...pulumi.ResourceOption) (*RouteFilterRule, error) {
	var resource RouteFilterRule
	err := ctx.ReadResource("equinix:fabric/routeFilterRule:RouteFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteFilterRule resources.
type routeFilterRuleState struct {
	// Action that will be taken on IP Addresses matching the rule
	Action     *string                    `pulumi:"action"`
	ChangeLogs []RouteFilterRuleChangeLog `pulumi:"changeLogs"`
	// An object with the details of the previous change applied on the Route Filter
	Changes []RouteFilterRuleChange `pulumi:"changes"`
	// Optional description to add to the Route Filter you will be creating
	Description *string `pulumi:"description"`
	// Route filter rules URI
	Href *string `pulumi:"href"`
	// Name of the Route Filter
	Name *string `pulumi:"name"`
	// IP Address Prefix to Filter on
	Prefix *string `pulumi:"prefix"`
	// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
	PrefixMatch *string `pulumi:"prefixMatch"`
	// UUID of the Route Filter Policy to apply this Rule to
	RouteFilterId *string `pulumi:"routeFilterId"`
	// State of the Route Filter Rule in its lifecycle
	State *string `pulumi:"state"`
	// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
	Type *string `pulumi:"type"`
	// Equinix Assigned ID for Route Filter Rule
	Uuid *string `pulumi:"uuid"`
}

type RouteFilterRuleState struct {
	// Action that will be taken on IP Addresses matching the rule
	Action     pulumi.StringPtrInput
	ChangeLogs RouteFilterRuleChangeLogArrayInput
	// An object with the details of the previous change applied on the Route Filter
	Changes RouteFilterRuleChangeArrayInput
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringPtrInput
	// Route filter rules URI
	Href pulumi.StringPtrInput
	// Name of the Route Filter
	Name pulumi.StringPtrInput
	// IP Address Prefix to Filter on
	Prefix pulumi.StringPtrInput
	// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
	PrefixMatch pulumi.StringPtrInput
	// UUID of the Route Filter Policy to apply this Rule to
	RouteFilterId pulumi.StringPtrInput
	// State of the Route Filter Rule in its lifecycle
	State pulumi.StringPtrInput
	// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
	Type pulumi.StringPtrInput
	// Equinix Assigned ID for Route Filter Rule
	Uuid pulumi.StringPtrInput
}

func (RouteFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterRuleState)(nil)).Elem()
}

type routeFilterRuleArgs struct {
	// Optional description to add to the Route Filter you will be creating
	Description *string `pulumi:"description"`
	// Name of the Route Filter
	Name *string `pulumi:"name"`
	// IP Address Prefix to Filter on
	Prefix string `pulumi:"prefix"`
	// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
	PrefixMatch *string `pulumi:"prefixMatch"`
	// UUID of the Route Filter Policy to apply this Rule to
	RouteFilterId string `pulumi:"routeFilterId"`
}

// The set of arguments for constructing a RouteFilterRule resource.
type RouteFilterRuleArgs struct {
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringPtrInput
	// Name of the Route Filter
	Name pulumi.StringPtrInput
	// IP Address Prefix to Filter on
	Prefix pulumi.StringInput
	// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
	PrefixMatch pulumi.StringPtrInput
	// UUID of the Route Filter Policy to apply this Rule to
	RouteFilterId pulumi.StringInput
}

func (RouteFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterRuleArgs)(nil)).Elem()
}

type RouteFilterRuleInput interface {
	pulumi.Input

	ToRouteFilterRuleOutput() RouteFilterRuleOutput
	ToRouteFilterRuleOutputWithContext(ctx context.Context) RouteFilterRuleOutput
}

func (*RouteFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilterRule)(nil)).Elem()
}

func (i *RouteFilterRule) ToRouteFilterRuleOutput() RouteFilterRuleOutput {
	return i.ToRouteFilterRuleOutputWithContext(context.Background())
}

func (i *RouteFilterRule) ToRouteFilterRuleOutputWithContext(ctx context.Context) RouteFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterRuleOutput)
}

// RouteFilterRuleArrayInput is an input type that accepts RouteFilterRuleArray and RouteFilterRuleArrayOutput values.
// You can construct a concrete instance of `RouteFilterRuleArrayInput` via:
//
//	RouteFilterRuleArray{ RouteFilterRuleArgs{...} }
type RouteFilterRuleArrayInput interface {
	pulumi.Input

	ToRouteFilterRuleArrayOutput() RouteFilterRuleArrayOutput
	ToRouteFilterRuleArrayOutputWithContext(context.Context) RouteFilterRuleArrayOutput
}

type RouteFilterRuleArray []RouteFilterRuleInput

func (RouteFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteFilterRule)(nil)).Elem()
}

func (i RouteFilterRuleArray) ToRouteFilterRuleArrayOutput() RouteFilterRuleArrayOutput {
	return i.ToRouteFilterRuleArrayOutputWithContext(context.Background())
}

func (i RouteFilterRuleArray) ToRouteFilterRuleArrayOutputWithContext(ctx context.Context) RouteFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterRuleArrayOutput)
}

// RouteFilterRuleMapInput is an input type that accepts RouteFilterRuleMap and RouteFilterRuleMapOutput values.
// You can construct a concrete instance of `RouteFilterRuleMapInput` via:
//
//	RouteFilterRuleMap{ "key": RouteFilterRuleArgs{...} }
type RouteFilterRuleMapInput interface {
	pulumi.Input

	ToRouteFilterRuleMapOutput() RouteFilterRuleMapOutput
	ToRouteFilterRuleMapOutputWithContext(context.Context) RouteFilterRuleMapOutput
}

type RouteFilterRuleMap map[string]RouteFilterRuleInput

func (RouteFilterRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteFilterRule)(nil)).Elem()
}

func (i RouteFilterRuleMap) ToRouteFilterRuleMapOutput() RouteFilterRuleMapOutput {
	return i.ToRouteFilterRuleMapOutputWithContext(context.Background())
}

func (i RouteFilterRuleMap) ToRouteFilterRuleMapOutputWithContext(ctx context.Context) RouteFilterRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterRuleMapOutput)
}

type RouteFilterRuleOutput struct{ *pulumi.OutputState }

func (RouteFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilterRule)(nil)).Elem()
}

func (o RouteFilterRuleOutput) ToRouteFilterRuleOutput() RouteFilterRuleOutput {
	return o
}

func (o RouteFilterRuleOutput) ToRouteFilterRuleOutputWithContext(ctx context.Context) RouteFilterRuleOutput {
	return o
}

// Action that will be taken on IP Addresses matching the rule
func (o RouteFilterRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o RouteFilterRuleOutput) ChangeLogs() RouteFilterRuleChangeLogArrayOutput {
	return o.ApplyT(func(v *RouteFilterRule) RouteFilterRuleChangeLogArrayOutput { return v.ChangeLogs }).(RouteFilterRuleChangeLogArrayOutput)
}

// An object with the details of the previous change applied on the Route Filter
func (o RouteFilterRuleOutput) Changes() RouteFilterRuleChangeArrayOutput {
	return o.ApplyT(func(v *RouteFilterRule) RouteFilterRuleChangeArrayOutput { return v.Changes }).(RouteFilterRuleChangeArrayOutput)
}

// Optional description to add to the Route Filter you will be creating
func (o RouteFilterRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Route filter rules URI
func (o RouteFilterRuleOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Name of the Route Filter
func (o RouteFilterRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IP Address Prefix to Filter on
func (o RouteFilterRuleOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
func (o RouteFilterRuleOutput) PrefixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.PrefixMatch }).(pulumi.StringOutput)
}

// UUID of the Route Filter Policy to apply this Rule to
func (o RouteFilterRuleOutput) RouteFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.RouteFilterId }).(pulumi.StringOutput)
}

// State of the Route Filter Rule in its lifecycle
func (o RouteFilterRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
func (o RouteFilterRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Filter Rule
func (o RouteFilterRuleOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilterRule) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type RouteFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (RouteFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteFilterRule)(nil)).Elem()
}

func (o RouteFilterRuleArrayOutput) ToRouteFilterRuleArrayOutput() RouteFilterRuleArrayOutput {
	return o
}

func (o RouteFilterRuleArrayOutput) ToRouteFilterRuleArrayOutputWithContext(ctx context.Context) RouteFilterRuleArrayOutput {
	return o
}

func (o RouteFilterRuleArrayOutput) Index(i pulumi.IntInput) RouteFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteFilterRule {
		return vs[0].([]*RouteFilterRule)[vs[1].(int)]
	}).(RouteFilterRuleOutput)
}

type RouteFilterRuleMapOutput struct{ *pulumi.OutputState }

func (RouteFilterRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteFilterRule)(nil)).Elem()
}

func (o RouteFilterRuleMapOutput) ToRouteFilterRuleMapOutput() RouteFilterRuleMapOutput {
	return o
}

func (o RouteFilterRuleMapOutput) ToRouteFilterRuleMapOutputWithContext(ctx context.Context) RouteFilterRuleMapOutput {
	return o
}

func (o RouteFilterRuleMapOutput) MapIndex(k pulumi.StringInput) RouteFilterRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteFilterRule {
		return vs[0].(map[string]*RouteFilterRule)[vs[1].(string)]
	}).(RouteFilterRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterRuleInput)(nil)).Elem(), &RouteFilterRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterRuleArrayInput)(nil)).Elem(), RouteFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterRuleMapInput)(nil)).Elem(), RouteFilterRuleMap{})
	pulumi.RegisterOutputType(RouteFilterRuleOutput{})
	pulumi.RegisterOutputType(RouteFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(RouteFilterRuleMapOutput{})
}
