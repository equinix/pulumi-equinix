// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Subscriptions
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
//
// ## Example Usage
type StreamSubscription struct {
	pulumi.CustomResourceState

	// Details of the last change on the stream resource
	ChangeLog StreamSubscriptionChangeLogOutput `pulumi:"changeLog"`
	// Customer-provided stream subscription description
	Description pulumi.StringOutput `pulumi:"description"`
	// Stream subscription enabled status
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Lists of events to be included/excluded on the stream subscription
	EventSelector StreamSubscriptionEventSelectorOutput `pulumi:"eventSelector"`
	// Equinix assigned URI of the stream subscription resource
	Href pulumi.StringOutput `pulumi:"href"`
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector StreamSubscriptionMetricSelectorOutput `pulumi:"metricSelector"`
	// Customer-provided stream subscription name
	Name pulumi.StringOutput `pulumi:"name"`
	// The details of the subscriber to the Equinix Stream
	Sink StreamSubscriptionSinkOutput `pulumi:"sink"`
	// Value representing provisioning status for the stream resource
	State pulumi.StringOutput `pulumi:"state"`
	// The uuid of the stream that is the target of the stream subscription
	StreamId pulumi.StringOutput                 `pulumi:"streamId"`
	Timeouts StreamSubscriptionTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of the stream subscription request
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix assigned unique identifier of the stream subscription resource
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewStreamSubscription registers a new resource with the given unique name, arguments, and options.
func NewStreamSubscription(ctx *pulumi.Context,
	name string, args *StreamSubscriptionArgs, opts ...pulumi.ResourceOption) (*StreamSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Sink == nil {
		return nil, errors.New("invalid value for required argument 'Sink'")
	}
	if args.StreamId == nil {
		return nil, errors.New("invalid value for required argument 'StreamId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamSubscription
	err := ctx.RegisterResource("equinix:fabric/streamSubscription:StreamSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamSubscription gets an existing StreamSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamSubscriptionState, opts ...pulumi.ResourceOption) (*StreamSubscription, error) {
	var resource StreamSubscription
	err := ctx.ReadResource("equinix:fabric/streamSubscription:StreamSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamSubscription resources.
type streamSubscriptionState struct {
	// Details of the last change on the stream resource
	ChangeLog *StreamSubscriptionChangeLog `pulumi:"changeLog"`
	// Customer-provided stream subscription description
	Description *string `pulumi:"description"`
	// Stream subscription enabled status
	Enabled *bool `pulumi:"enabled"`
	// Lists of events to be included/excluded on the stream subscription
	EventSelector *StreamSubscriptionEventSelector `pulumi:"eventSelector"`
	// Equinix assigned URI of the stream subscription resource
	Href *string `pulumi:"href"`
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector *StreamSubscriptionMetricSelector `pulumi:"metricSelector"`
	// Customer-provided stream subscription name
	Name *string `pulumi:"name"`
	// The details of the subscriber to the Equinix Stream
	Sink *StreamSubscriptionSink `pulumi:"sink"`
	// Value representing provisioning status for the stream resource
	State *string `pulumi:"state"`
	// The uuid of the stream that is the target of the stream subscription
	StreamId *string                     `pulumi:"streamId"`
	Timeouts *StreamSubscriptionTimeouts `pulumi:"timeouts"`
	// Type of the stream subscription request
	Type *string `pulumi:"type"`
	// Equinix assigned unique identifier of the stream subscription resource
	Uuid *string `pulumi:"uuid"`
}

type StreamSubscriptionState struct {
	// Details of the last change on the stream resource
	ChangeLog StreamSubscriptionChangeLogPtrInput
	// Customer-provided stream subscription description
	Description pulumi.StringPtrInput
	// Stream subscription enabled status
	Enabled pulumi.BoolPtrInput
	// Lists of events to be included/excluded on the stream subscription
	EventSelector StreamSubscriptionEventSelectorPtrInput
	// Equinix assigned URI of the stream subscription resource
	Href pulumi.StringPtrInput
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector StreamSubscriptionMetricSelectorPtrInput
	// Customer-provided stream subscription name
	Name pulumi.StringPtrInput
	// The details of the subscriber to the Equinix Stream
	Sink StreamSubscriptionSinkPtrInput
	// Value representing provisioning status for the stream resource
	State pulumi.StringPtrInput
	// The uuid of the stream that is the target of the stream subscription
	StreamId pulumi.StringPtrInput
	Timeouts StreamSubscriptionTimeoutsPtrInput
	// Type of the stream subscription request
	Type pulumi.StringPtrInput
	// Equinix assigned unique identifier of the stream subscription resource
	Uuid pulumi.StringPtrInput
}

func (StreamSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamSubscriptionState)(nil)).Elem()
}

type streamSubscriptionArgs struct {
	// Customer-provided stream subscription description
	Description string `pulumi:"description"`
	// Stream subscription enabled status
	Enabled bool `pulumi:"enabled"`
	// Lists of events to be included/excluded on the stream subscription
	EventSelector *StreamSubscriptionEventSelector `pulumi:"eventSelector"`
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector *StreamSubscriptionMetricSelector `pulumi:"metricSelector"`
	// Customer-provided stream subscription name
	Name *string `pulumi:"name"`
	// The details of the subscriber to the Equinix Stream
	Sink StreamSubscriptionSink `pulumi:"sink"`
	// The uuid of the stream that is the target of the stream subscription
	StreamId string                      `pulumi:"streamId"`
	Timeouts *StreamSubscriptionTimeouts `pulumi:"timeouts"`
	// Type of the stream subscription request
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a StreamSubscription resource.
type StreamSubscriptionArgs struct {
	// Customer-provided stream subscription description
	Description pulumi.StringInput
	// Stream subscription enabled status
	Enabled pulumi.BoolInput
	// Lists of events to be included/excluded on the stream subscription
	EventSelector StreamSubscriptionEventSelectorPtrInput
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector StreamSubscriptionMetricSelectorPtrInput
	// Customer-provided stream subscription name
	Name pulumi.StringPtrInput
	// The details of the subscriber to the Equinix Stream
	Sink StreamSubscriptionSinkInput
	// The uuid of the stream that is the target of the stream subscription
	StreamId pulumi.StringInput
	Timeouts StreamSubscriptionTimeoutsPtrInput
	// Type of the stream subscription request
	Type pulumi.StringInput
}

func (StreamSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamSubscriptionArgs)(nil)).Elem()
}

type StreamSubscriptionInput interface {
	pulumi.Input

	ToStreamSubscriptionOutput() StreamSubscriptionOutput
	ToStreamSubscriptionOutputWithContext(ctx context.Context) StreamSubscriptionOutput
}

func (*StreamSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSubscription)(nil)).Elem()
}

func (i *StreamSubscription) ToStreamSubscriptionOutput() StreamSubscriptionOutput {
	return i.ToStreamSubscriptionOutputWithContext(context.Background())
}

func (i *StreamSubscription) ToStreamSubscriptionOutputWithContext(ctx context.Context) StreamSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubscriptionOutput)
}

// StreamSubscriptionArrayInput is an input type that accepts StreamSubscriptionArray and StreamSubscriptionArrayOutput values.
// You can construct a concrete instance of `StreamSubscriptionArrayInput` via:
//
//	StreamSubscriptionArray{ StreamSubscriptionArgs{...} }
type StreamSubscriptionArrayInput interface {
	pulumi.Input

	ToStreamSubscriptionArrayOutput() StreamSubscriptionArrayOutput
	ToStreamSubscriptionArrayOutputWithContext(context.Context) StreamSubscriptionArrayOutput
}

type StreamSubscriptionArray []StreamSubscriptionInput

func (StreamSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamSubscription)(nil)).Elem()
}

func (i StreamSubscriptionArray) ToStreamSubscriptionArrayOutput() StreamSubscriptionArrayOutput {
	return i.ToStreamSubscriptionArrayOutputWithContext(context.Background())
}

func (i StreamSubscriptionArray) ToStreamSubscriptionArrayOutputWithContext(ctx context.Context) StreamSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubscriptionArrayOutput)
}

// StreamSubscriptionMapInput is an input type that accepts StreamSubscriptionMap and StreamSubscriptionMapOutput values.
// You can construct a concrete instance of `StreamSubscriptionMapInput` via:
//
//	StreamSubscriptionMap{ "key": StreamSubscriptionArgs{...} }
type StreamSubscriptionMapInput interface {
	pulumi.Input

	ToStreamSubscriptionMapOutput() StreamSubscriptionMapOutput
	ToStreamSubscriptionMapOutputWithContext(context.Context) StreamSubscriptionMapOutput
}

type StreamSubscriptionMap map[string]StreamSubscriptionInput

func (StreamSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamSubscription)(nil)).Elem()
}

func (i StreamSubscriptionMap) ToStreamSubscriptionMapOutput() StreamSubscriptionMapOutput {
	return i.ToStreamSubscriptionMapOutputWithContext(context.Background())
}

func (i StreamSubscriptionMap) ToStreamSubscriptionMapOutputWithContext(ctx context.Context) StreamSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubscriptionMapOutput)
}

type StreamSubscriptionOutput struct{ *pulumi.OutputState }

func (StreamSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSubscription)(nil)).Elem()
}

func (o StreamSubscriptionOutput) ToStreamSubscriptionOutput() StreamSubscriptionOutput {
	return o
}

func (o StreamSubscriptionOutput) ToStreamSubscriptionOutputWithContext(ctx context.Context) StreamSubscriptionOutput {
	return o
}

// Details of the last change on the stream resource
func (o StreamSubscriptionOutput) ChangeLog() StreamSubscriptionChangeLogOutput {
	return o.ApplyT(func(v *StreamSubscription) StreamSubscriptionChangeLogOutput { return v.ChangeLog }).(StreamSubscriptionChangeLogOutput)
}

// Customer-provided stream subscription description
func (o StreamSubscriptionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Stream subscription enabled status
func (o StreamSubscriptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Lists of events to be included/excluded on the stream subscription
func (o StreamSubscriptionOutput) EventSelector() StreamSubscriptionEventSelectorOutput {
	return o.ApplyT(func(v *StreamSubscription) StreamSubscriptionEventSelectorOutput { return v.EventSelector }).(StreamSubscriptionEventSelectorOutput)
}

// Equinix assigned URI of the stream subscription resource
func (o StreamSubscriptionOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Lists of metrics to be included/excluded on the stream subscription
func (o StreamSubscriptionOutput) MetricSelector() StreamSubscriptionMetricSelectorOutput {
	return o.ApplyT(func(v *StreamSubscription) StreamSubscriptionMetricSelectorOutput { return v.MetricSelector }).(StreamSubscriptionMetricSelectorOutput)
}

// Customer-provided stream subscription name
func (o StreamSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The details of the subscriber to the Equinix Stream
func (o StreamSubscriptionOutput) Sink() StreamSubscriptionSinkOutput {
	return o.ApplyT(func(v *StreamSubscription) StreamSubscriptionSinkOutput { return v.Sink }).(StreamSubscriptionSinkOutput)
}

// Value representing provisioning status for the stream resource
func (o StreamSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The uuid of the stream that is the target of the stream subscription
func (o StreamSubscriptionOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o StreamSubscriptionOutput) Timeouts() StreamSubscriptionTimeoutsPtrOutput {
	return o.ApplyT(func(v *StreamSubscription) StreamSubscriptionTimeoutsPtrOutput { return v.Timeouts }).(StreamSubscriptionTimeoutsPtrOutput)
}

// Type of the stream subscription request
func (o StreamSubscriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix assigned unique identifier of the stream subscription resource
func (o StreamSubscriptionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSubscription) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type StreamSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (StreamSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamSubscription)(nil)).Elem()
}

func (o StreamSubscriptionArrayOutput) ToStreamSubscriptionArrayOutput() StreamSubscriptionArrayOutput {
	return o
}

func (o StreamSubscriptionArrayOutput) ToStreamSubscriptionArrayOutputWithContext(ctx context.Context) StreamSubscriptionArrayOutput {
	return o
}

func (o StreamSubscriptionArrayOutput) Index(i pulumi.IntInput) StreamSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamSubscription {
		return vs[0].([]*StreamSubscription)[vs[1].(int)]
	}).(StreamSubscriptionOutput)
}

type StreamSubscriptionMapOutput struct{ *pulumi.OutputState }

func (StreamSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamSubscription)(nil)).Elem()
}

func (o StreamSubscriptionMapOutput) ToStreamSubscriptionMapOutput() StreamSubscriptionMapOutput {
	return o
}

func (o StreamSubscriptionMapOutput) ToStreamSubscriptionMapOutputWithContext(ctx context.Context) StreamSubscriptionMapOutput {
	return o
}

func (o StreamSubscriptionMapOutput) MapIndex(k pulumi.StringInput) StreamSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamSubscription {
		return vs[0].(map[string]*StreamSubscription)[vs[1].(string)]
	}).(StreamSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSubscriptionInput)(nil)).Elem(), &StreamSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSubscriptionArrayInput)(nil)).Elem(), StreamSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSubscriptionMapInput)(nil)).Elem(), StreamSubscriptionMap{})
	pulumi.RegisterOutputType(StreamSubscriptionOutput{})
	pulumi.RegisterOutputType(StreamSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(StreamSubscriptionMapOutput{})
}
