// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			policyAttachment, err := fabric.NewConnectionRouteAggregation(ctx, "policyAttachment", &fabric.ConnectionRouteAggregationArgs{
//				RouteAggregationId: pulumi.String("<route_aggregation_id>"),
//				ConnectionId:       pulumi.String("<connection_id>"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("connectionRouteAggregationId", policyAttachment.ID())
//			ctx.Export("connectionRouteAggregationConnectionId", policyAttachment.ConnectionId)
//			ctx.Export("connectionRouteAggregationType", policyAttachment.Type)
//			ctx.Export("connectionRouteAggregationAttachmentStatus", policyAttachment.AttachmentStatus)
//			return nil
//		})
//	}
//
// ```
type ConnectionRouteAggregation struct {
	pulumi.CustomResourceState

	// Status of the Route Aggregation Policy attachment lifecycle
	AttachmentStatus pulumi.StringOutput `pulumi:"attachmentStatus"`
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// URI to the attached Route Aggregation Policy on the Connection
	Href pulumi.StringOutput `pulumi:"href"`
	// UUID of the Route Aggregation to apply this Rule to
	RouteAggregationId pulumi.StringOutput                         `pulumi:"routeAggregationId"`
	Timeouts           ConnectionRouteAggregationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix Assigned ID for Route Aggregation Policy
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewConnectionRouteAggregation registers a new resource with the given unique name, arguments, and options.
func NewConnectionRouteAggregation(ctx *pulumi.Context,
	name string, args *ConnectionRouteAggregationArgs, opts ...pulumi.ResourceOption) (*ConnectionRouteAggregation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.RouteAggregationId == nil {
		return nil, errors.New("invalid value for required argument 'RouteAggregationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionRouteAggregation
	err := ctx.RegisterResource("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionRouteAggregation gets an existing ConnectionRouteAggregation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionRouteAggregation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionRouteAggregationState, opts ...pulumi.ResourceOption) (*ConnectionRouteAggregation, error) {
	var resource ConnectionRouteAggregation
	err := ctx.ReadResource("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionRouteAggregation resources.
type connectionRouteAggregationState struct {
	// Status of the Route Aggregation Policy attachment lifecycle
	AttachmentStatus *string `pulumi:"attachmentStatus"`
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
	ConnectionId *string `pulumi:"connectionId"`
	// URI to the attached Route Aggregation Policy on the Connection
	Href *string `pulumi:"href"`
	// UUID of the Route Aggregation to apply this Rule to
	RouteAggregationId *string                             `pulumi:"routeAggregationId"`
	Timeouts           *ConnectionRouteAggregationTimeouts `pulumi:"timeouts"`
	// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
	Type *string `pulumi:"type"`
	// Equinix Assigned ID for Route Aggregation Policy
	Uuid *string `pulumi:"uuid"`
}

type ConnectionRouteAggregationState struct {
	// Status of the Route Aggregation Policy attachment lifecycle
	AttachmentStatus pulumi.StringPtrInput
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
	ConnectionId pulumi.StringPtrInput
	// URI to the attached Route Aggregation Policy on the Connection
	Href pulumi.StringPtrInput
	// UUID of the Route Aggregation to apply this Rule to
	RouteAggregationId pulumi.StringPtrInput
	Timeouts           ConnectionRouteAggregationTimeoutsPtrInput
	// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
	Type pulumi.StringPtrInput
	// Equinix Assigned ID for Route Aggregation Policy
	Uuid pulumi.StringPtrInput
}

func (ConnectionRouteAggregationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionRouteAggregationState)(nil)).Elem()
}

type connectionRouteAggregationArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
	ConnectionId string `pulumi:"connectionId"`
	// UUID of the Route Aggregation to apply this Rule to
	RouteAggregationId string                              `pulumi:"routeAggregationId"`
	Timeouts           *ConnectionRouteAggregationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a ConnectionRouteAggregation resource.
type ConnectionRouteAggregationArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
	ConnectionId pulumi.StringInput
	// UUID of the Route Aggregation to apply this Rule to
	RouteAggregationId pulumi.StringInput
	Timeouts           ConnectionRouteAggregationTimeoutsPtrInput
}

func (ConnectionRouteAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionRouteAggregationArgs)(nil)).Elem()
}

type ConnectionRouteAggregationInput interface {
	pulumi.Input

	ToConnectionRouteAggregationOutput() ConnectionRouteAggregationOutput
	ToConnectionRouteAggregationOutputWithContext(ctx context.Context) ConnectionRouteAggregationOutput
}

func (*ConnectionRouteAggregation) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRouteAggregation)(nil)).Elem()
}

func (i *ConnectionRouteAggregation) ToConnectionRouteAggregationOutput() ConnectionRouteAggregationOutput {
	return i.ToConnectionRouteAggregationOutputWithContext(context.Background())
}

func (i *ConnectionRouteAggregation) ToConnectionRouteAggregationOutputWithContext(ctx context.Context) ConnectionRouteAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteAggregationOutput)
}

// ConnectionRouteAggregationArrayInput is an input type that accepts ConnectionRouteAggregationArray and ConnectionRouteAggregationArrayOutput values.
// You can construct a concrete instance of `ConnectionRouteAggregationArrayInput` via:
//
//	ConnectionRouteAggregationArray{ ConnectionRouteAggregationArgs{...} }
type ConnectionRouteAggregationArrayInput interface {
	pulumi.Input

	ToConnectionRouteAggregationArrayOutput() ConnectionRouteAggregationArrayOutput
	ToConnectionRouteAggregationArrayOutputWithContext(context.Context) ConnectionRouteAggregationArrayOutput
}

type ConnectionRouteAggregationArray []ConnectionRouteAggregationInput

func (ConnectionRouteAggregationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionRouteAggregation)(nil)).Elem()
}

func (i ConnectionRouteAggregationArray) ToConnectionRouteAggregationArrayOutput() ConnectionRouteAggregationArrayOutput {
	return i.ToConnectionRouteAggregationArrayOutputWithContext(context.Background())
}

func (i ConnectionRouteAggregationArray) ToConnectionRouteAggregationArrayOutputWithContext(ctx context.Context) ConnectionRouteAggregationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteAggregationArrayOutput)
}

// ConnectionRouteAggregationMapInput is an input type that accepts ConnectionRouteAggregationMap and ConnectionRouteAggregationMapOutput values.
// You can construct a concrete instance of `ConnectionRouteAggregationMapInput` via:
//
//	ConnectionRouteAggregationMap{ "key": ConnectionRouteAggregationArgs{...} }
type ConnectionRouteAggregationMapInput interface {
	pulumi.Input

	ToConnectionRouteAggregationMapOutput() ConnectionRouteAggregationMapOutput
	ToConnectionRouteAggregationMapOutputWithContext(context.Context) ConnectionRouteAggregationMapOutput
}

type ConnectionRouteAggregationMap map[string]ConnectionRouteAggregationInput

func (ConnectionRouteAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionRouteAggregation)(nil)).Elem()
}

func (i ConnectionRouteAggregationMap) ToConnectionRouteAggregationMapOutput() ConnectionRouteAggregationMapOutput {
	return i.ToConnectionRouteAggregationMapOutputWithContext(context.Background())
}

func (i ConnectionRouteAggregationMap) ToConnectionRouteAggregationMapOutputWithContext(ctx context.Context) ConnectionRouteAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteAggregationMapOutput)
}

type ConnectionRouteAggregationOutput struct{ *pulumi.OutputState }

func (ConnectionRouteAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRouteAggregation)(nil)).Elem()
}

func (o ConnectionRouteAggregationOutput) ToConnectionRouteAggregationOutput() ConnectionRouteAggregationOutput {
	return o
}

func (o ConnectionRouteAggregationOutput) ToConnectionRouteAggregationOutputWithContext(ctx context.Context) ConnectionRouteAggregationOutput {
	return o
}

// Status of the Route Aggregation Policy attachment lifecycle
func (o ConnectionRouteAggregationOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
func (o ConnectionRouteAggregationOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// URI to the attached Route Aggregation Policy on the Connection
func (o ConnectionRouteAggregationOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// UUID of the Route Aggregation to apply this Rule to
func (o ConnectionRouteAggregationOutput) RouteAggregationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.RouteAggregationId }).(pulumi.StringOutput)
}

func (o ConnectionRouteAggregationOutput) Timeouts() ConnectionRouteAggregationTimeoutsPtrOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) ConnectionRouteAggregationTimeoutsPtrOutput { return v.Timeouts }).(ConnectionRouteAggregationTimeoutsPtrOutput)
}

// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
func (o ConnectionRouteAggregationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Aggregation Policy
func (o ConnectionRouteAggregationOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteAggregation) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ConnectionRouteAggregationArrayOutput struct{ *pulumi.OutputState }

func (ConnectionRouteAggregationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionRouteAggregation)(nil)).Elem()
}

func (o ConnectionRouteAggregationArrayOutput) ToConnectionRouteAggregationArrayOutput() ConnectionRouteAggregationArrayOutput {
	return o
}

func (o ConnectionRouteAggregationArrayOutput) ToConnectionRouteAggregationArrayOutputWithContext(ctx context.Context) ConnectionRouteAggregationArrayOutput {
	return o
}

func (o ConnectionRouteAggregationArrayOutput) Index(i pulumi.IntInput) ConnectionRouteAggregationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionRouteAggregation {
		return vs[0].([]*ConnectionRouteAggregation)[vs[1].(int)]
	}).(ConnectionRouteAggregationOutput)
}

type ConnectionRouteAggregationMapOutput struct{ *pulumi.OutputState }

func (ConnectionRouteAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionRouteAggregation)(nil)).Elem()
}

func (o ConnectionRouteAggregationMapOutput) ToConnectionRouteAggregationMapOutput() ConnectionRouteAggregationMapOutput {
	return o
}

func (o ConnectionRouteAggregationMapOutput) ToConnectionRouteAggregationMapOutputWithContext(ctx context.Context) ConnectionRouteAggregationMapOutput {
	return o
}

func (o ConnectionRouteAggregationMapOutput) MapIndex(k pulumi.StringInput) ConnectionRouteAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionRouteAggregation {
		return vs[0].(map[string]*ConnectionRouteAggregation)[vs[1].(string)]
	}).(ConnectionRouteAggregationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteAggregationInput)(nil)).Elem(), &ConnectionRouteAggregation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteAggregationArrayInput)(nil)).Elem(), ConnectionRouteAggregationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteAggregationMapInput)(nil)).Elem(), ConnectionRouteAggregationMap{})
	pulumi.RegisterOutputType(ConnectionRouteAggregationOutput{})
	pulumi.RegisterOutputType(ConnectionRouteAggregationArrayOutput{})
	pulumi.RegisterOutputType(ConnectionRouteAggregationMapOutput{})
}
