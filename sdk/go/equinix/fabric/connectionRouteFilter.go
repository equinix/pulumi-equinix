// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows attachment of Route Filter Polices to Fabric Connections
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			policyAttachment, err := fabric.NewConnectionRouteFilter(ctx, "policyAttachment", &fabric.ConnectionRouteFilterArgs{
//				ConnectionId:  pulumi.String("<connection_uuid>"),
//				RouteFilterId: pulumi.String("<route_filter_policy_uuid>"),
//				Direction:     pulumi.String("INBOUND"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("connectionRouteFilterId", policyAttachment.ID())
//			ctx.Export("connectionRouteFilterConnectionId", policyAttachment.ConnectionId)
//			ctx.Export("connectionRouteFilterDirection", policyAttachment.Direction)
//			ctx.Export("connectionRouteFilterType", policyAttachment.Type)
//			ctx.Export("connectionRouteFilterAttachmentStatus", policyAttachment.AttachmentStatus)
//			return nil
//		})
//	}
//
// ```
type ConnectionRouteFilter struct {
	pulumi.CustomResourceState

	// Status of the Route Filter Policy attachment lifecycle
	AttachmentStatus pulumi.StringOutput `pulumi:"attachmentStatus"`
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Direction of the filtering of the attached Route Filter Policy
	Direction pulumi.StringOutput `pulumi:"direction"`
	// URI to the attached Route Filter Policy on the Connection
	Href pulumi.StringOutput `pulumi:"href"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId pulumi.StringOutput `pulumi:"routeFilterId"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix Assigned ID for Route Filter Policy
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewConnectionRouteFilter registers a new resource with the given unique name, arguments, and options.
func NewConnectionRouteFilter(ctx *pulumi.Context,
	name string, args *ConnectionRouteFilterArgs, opts ...pulumi.ResourceOption) (*ConnectionRouteFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.RouteFilterId == nil {
		return nil, errors.New("invalid value for required argument 'RouteFilterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionRouteFilter
	err := ctx.RegisterResource("equinix:fabric/connectionRouteFilter:ConnectionRouteFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionRouteFilter gets an existing ConnectionRouteFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionRouteFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionRouteFilterState, opts ...pulumi.ResourceOption) (*ConnectionRouteFilter, error) {
	var resource ConnectionRouteFilter
	err := ctx.ReadResource("equinix:fabric/connectionRouteFilter:ConnectionRouteFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionRouteFilter resources.
type connectionRouteFilterState struct {
	// Status of the Route Filter Policy attachment lifecycle
	AttachmentStatus *string `pulumi:"attachmentStatus"`
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId *string `pulumi:"connectionId"`
	// Direction of the filtering of the attached Route Filter Policy
	Direction *string `pulumi:"direction"`
	// URI to the attached Route Filter Policy on the Connection
	Href *string `pulumi:"href"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId *string `pulumi:"routeFilterId"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type *string `pulumi:"type"`
	// Equinix Assigned ID for Route Filter Policy
	Uuid *string `pulumi:"uuid"`
}

type ConnectionRouteFilterState struct {
	// Status of the Route Filter Policy attachment lifecycle
	AttachmentStatus pulumi.StringPtrInput
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId pulumi.StringPtrInput
	// Direction of the filtering of the attached Route Filter Policy
	Direction pulumi.StringPtrInput
	// URI to the attached Route Filter Policy on the Connection
	Href pulumi.StringPtrInput
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId pulumi.StringPtrInput
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type pulumi.StringPtrInput
	// Equinix Assigned ID for Route Filter Policy
	Uuid pulumi.StringPtrInput
}

func (ConnectionRouteFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionRouteFilterState)(nil)).Elem()
}

type connectionRouteFilterArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId string `pulumi:"connectionId"`
	// Direction of the filtering of the attached Route Filter Policy
	Direction string `pulumi:"direction"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId string `pulumi:"routeFilterId"`
}

// The set of arguments for constructing a ConnectionRouteFilter resource.
type ConnectionRouteFilterArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId pulumi.StringInput
	// Direction of the filtering of the attached Route Filter Policy
	Direction pulumi.StringInput
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId pulumi.StringInput
}

func (ConnectionRouteFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionRouteFilterArgs)(nil)).Elem()
}

type ConnectionRouteFilterInput interface {
	pulumi.Input

	ToConnectionRouteFilterOutput() ConnectionRouteFilterOutput
	ToConnectionRouteFilterOutputWithContext(ctx context.Context) ConnectionRouteFilterOutput
}

func (*ConnectionRouteFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRouteFilter)(nil)).Elem()
}

func (i *ConnectionRouteFilter) ToConnectionRouteFilterOutput() ConnectionRouteFilterOutput {
	return i.ToConnectionRouteFilterOutputWithContext(context.Background())
}

func (i *ConnectionRouteFilter) ToConnectionRouteFilterOutputWithContext(ctx context.Context) ConnectionRouteFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteFilterOutput)
}

// ConnectionRouteFilterArrayInput is an input type that accepts ConnectionRouteFilterArray and ConnectionRouteFilterArrayOutput values.
// You can construct a concrete instance of `ConnectionRouteFilterArrayInput` via:
//
//	ConnectionRouteFilterArray{ ConnectionRouteFilterArgs{...} }
type ConnectionRouteFilterArrayInput interface {
	pulumi.Input

	ToConnectionRouteFilterArrayOutput() ConnectionRouteFilterArrayOutput
	ToConnectionRouteFilterArrayOutputWithContext(context.Context) ConnectionRouteFilterArrayOutput
}

type ConnectionRouteFilterArray []ConnectionRouteFilterInput

func (ConnectionRouteFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionRouteFilter)(nil)).Elem()
}

func (i ConnectionRouteFilterArray) ToConnectionRouteFilterArrayOutput() ConnectionRouteFilterArrayOutput {
	return i.ToConnectionRouteFilterArrayOutputWithContext(context.Background())
}

func (i ConnectionRouteFilterArray) ToConnectionRouteFilterArrayOutputWithContext(ctx context.Context) ConnectionRouteFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteFilterArrayOutput)
}

// ConnectionRouteFilterMapInput is an input type that accepts ConnectionRouteFilterMap and ConnectionRouteFilterMapOutput values.
// You can construct a concrete instance of `ConnectionRouteFilterMapInput` via:
//
//	ConnectionRouteFilterMap{ "key": ConnectionRouteFilterArgs{...} }
type ConnectionRouteFilterMapInput interface {
	pulumi.Input

	ToConnectionRouteFilterMapOutput() ConnectionRouteFilterMapOutput
	ToConnectionRouteFilterMapOutputWithContext(context.Context) ConnectionRouteFilterMapOutput
}

type ConnectionRouteFilterMap map[string]ConnectionRouteFilterInput

func (ConnectionRouteFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionRouteFilter)(nil)).Elem()
}

func (i ConnectionRouteFilterMap) ToConnectionRouteFilterMapOutput() ConnectionRouteFilterMapOutput {
	return i.ToConnectionRouteFilterMapOutputWithContext(context.Background())
}

func (i ConnectionRouteFilterMap) ToConnectionRouteFilterMapOutputWithContext(ctx context.Context) ConnectionRouteFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRouteFilterMapOutput)
}

type ConnectionRouteFilterOutput struct{ *pulumi.OutputState }

func (ConnectionRouteFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRouteFilter)(nil)).Elem()
}

func (o ConnectionRouteFilterOutput) ToConnectionRouteFilterOutput() ConnectionRouteFilterOutput {
	return o
}

func (o ConnectionRouteFilterOutput) ToConnectionRouteFilterOutputWithContext(ctx context.Context) ConnectionRouteFilterOutput {
	return o
}

// Status of the Route Filter Policy attachment lifecycle
func (o ConnectionRouteFilterOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
func (o ConnectionRouteFilterOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Direction of the filtering of the attached Route Filter Policy
func (o ConnectionRouteFilterOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// URI to the attached Route Filter Policy on the Connection
func (o ConnectionRouteFilterOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
func (o ConnectionRouteFilterOutput) RouteFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.RouteFilterId }).(pulumi.StringOutput)
}

// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
func (o ConnectionRouteFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Filter Policy
func (o ConnectionRouteFilterOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionRouteFilter) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ConnectionRouteFilterArrayOutput struct{ *pulumi.OutputState }

func (ConnectionRouteFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionRouteFilter)(nil)).Elem()
}

func (o ConnectionRouteFilterArrayOutput) ToConnectionRouteFilterArrayOutput() ConnectionRouteFilterArrayOutput {
	return o
}

func (o ConnectionRouteFilterArrayOutput) ToConnectionRouteFilterArrayOutputWithContext(ctx context.Context) ConnectionRouteFilterArrayOutput {
	return o
}

func (o ConnectionRouteFilterArrayOutput) Index(i pulumi.IntInput) ConnectionRouteFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionRouteFilter {
		return vs[0].([]*ConnectionRouteFilter)[vs[1].(int)]
	}).(ConnectionRouteFilterOutput)
}

type ConnectionRouteFilterMapOutput struct{ *pulumi.OutputState }

func (ConnectionRouteFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionRouteFilter)(nil)).Elem()
}

func (o ConnectionRouteFilterMapOutput) ToConnectionRouteFilterMapOutput() ConnectionRouteFilterMapOutput {
	return o
}

func (o ConnectionRouteFilterMapOutput) ToConnectionRouteFilterMapOutputWithContext(ctx context.Context) ConnectionRouteFilterMapOutput {
	return o
}

func (o ConnectionRouteFilterMapOutput) MapIndex(k pulumi.StringInput) ConnectionRouteFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionRouteFilter {
		return vs[0].(map[string]*ConnectionRouteFilter)[vs[1].(string)]
	}).(ConnectionRouteFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteFilterInput)(nil)).Elem(), &ConnectionRouteFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteFilterArrayInput)(nil)).Elem(), ConnectionRouteFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRouteFilterMapInput)(nil)).Elem(), ConnectionRouteFilterMap{})
	pulumi.RegisterOutputType(ConnectionRouteFilterOutput{})
	pulumi.RegisterOutputType(ConnectionRouteFilterArrayOutput{})
	pulumi.RegisterOutputType(ConnectionRouteFilterMapOutput{})
}
