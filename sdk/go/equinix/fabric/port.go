// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Port struct {
	pulumi.CustomResourceState

	// Port order account details
	Account PortAccountOutput `pulumi:"account"`
	// List of key/value objects to provide additional context to the Port order
	AdditionalInfos PortAdditionalInfoArrayOutput `pulumi:"additionalInfos"`
	// Details of the last change on the port resource
	ChangeLog PortChangeLogOutput `pulumi:"changeLog"`
	// Connection type that is used from the port after creation
	ConnectivitySourceType pulumi.StringOutput `pulumi:"connectivitySourceType"`
	// IBX code where the port will be located
	DemarcationPointIbx pulumi.StringOutput `pulumi:"demarcationPointIbx"`
	// Port device configuration
	Device PortDevicePtrOutput `pulumi:"device"`
	// Port encapsulation settings
	Encapsulation PortEncapsulationOutput `pulumi:"encapsulation"`
	// Equinix assigned URI of the port resource
	Href pulumi.StringOutput `pulumi:"href"`
	// Boolean value to enable the created port with Link Aggregation Groups
	LagEnabled pulumi.BoolOutput `pulumi:"lagEnabled"`
	// Location details for the port order
	Location PortLocationOutput `pulumi:"location"`
	// Designated name of the port
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification types and the registered users to receive those notification types
	Notifications PortNotificationArrayOutput `pulumi:"notifications"`
	// Details of the Port Order such as purchaseOrder details and signature
	Order PortOrderOutput `pulumi:"order"`
	// Physical ports that will implement this port order
	PhysicalPorts PortPhysicalPortArrayOutput `pulumi:"physicalPorts"`
	// Number of physical ports in the Port Order
	PhysicalPortsCount pulumi.IntOutput `pulumi:"physicalPortsCount"`
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed pulumi.IntOutput `pulumi:"physicalPortsSpeed"`
	// Physical Ports Type
	PhysicalPortsType pulumi.StringOutput `pulumi:"physicalPortsType"`
	// Port order project details
	Project PortProjectOutput `pulumi:"project"`
	// Port redundancy settings
	Redundancy PortRedundancyOutput `pulumi:"redundancy"`
	// Port order configuration settings
	Settings PortSettingsOutput `pulumi:"settings"`
	// Value representing provisioning status for the port resource
	State    pulumi.StringOutput   `pulumi:"state"`
	Timeouts PortTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of the port order request
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix assigned unique identifier of the port resource
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewPort registers a new resource with the given unique name, arguments, and options.
func NewPort(ctx *pulumi.Context,
	name string, args *PortArgs, opts ...pulumi.ResourceOption) (*Port, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.ConnectivitySourceType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectivitySourceType'")
	}
	if args.DemarcationPointIbx == nil {
		return nil, errors.New("invalid value for required argument 'DemarcationPointIbx'")
	}
	if args.Encapsulation == nil {
		return nil, errors.New("invalid value for required argument 'Encapsulation'")
	}
	if args.LagEnabled == nil {
		return nil, errors.New("invalid value for required argument 'LagEnabled'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.PhysicalPorts == nil {
		return nil, errors.New("invalid value for required argument 'PhysicalPorts'")
	}
	if args.PhysicalPortsCount == nil {
		return nil, errors.New("invalid value for required argument 'PhysicalPortsCount'")
	}
	if args.PhysicalPortsSpeed == nil {
		return nil, errors.New("invalid value for required argument 'PhysicalPortsSpeed'")
	}
	if args.PhysicalPortsType == nil {
		return nil, errors.New("invalid value for required argument 'PhysicalPortsType'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Redundancy == nil {
		return nil, errors.New("invalid value for required argument 'Redundancy'")
	}
	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Port
	err := ctx.RegisterResource("equinix:fabric/port:Port", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPort gets an existing Port resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortState, opts ...pulumi.ResourceOption) (*Port, error) {
	var resource Port
	err := ctx.ReadResource("equinix:fabric/port:Port", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Port resources.
type portState struct {
	// Port order account details
	Account *PortAccount `pulumi:"account"`
	// List of key/value objects to provide additional context to the Port order
	AdditionalInfos []PortAdditionalInfo `pulumi:"additionalInfos"`
	// Details of the last change on the port resource
	ChangeLog *PortChangeLog `pulumi:"changeLog"`
	// Connection type that is used from the port after creation
	ConnectivitySourceType *string `pulumi:"connectivitySourceType"`
	// IBX code where the port will be located
	DemarcationPointIbx *string `pulumi:"demarcationPointIbx"`
	// Port device configuration
	Device *PortDevice `pulumi:"device"`
	// Port encapsulation settings
	Encapsulation *PortEncapsulation `pulumi:"encapsulation"`
	// Equinix assigned URI of the port resource
	Href *string `pulumi:"href"`
	// Boolean value to enable the created port with Link Aggregation Groups
	LagEnabled *bool `pulumi:"lagEnabled"`
	// Location details for the port order
	Location *PortLocation `pulumi:"location"`
	// Designated name of the port
	Name *string `pulumi:"name"`
	// List of notification types and the registered users to receive those notification types
	Notifications []PortNotification `pulumi:"notifications"`
	// Details of the Port Order such as purchaseOrder details and signature
	Order *PortOrder `pulumi:"order"`
	// Physical ports that will implement this port order
	PhysicalPorts []PortPhysicalPort `pulumi:"physicalPorts"`
	// Number of physical ports in the Port Order
	PhysicalPortsCount *int `pulumi:"physicalPortsCount"`
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed *int `pulumi:"physicalPortsSpeed"`
	// Physical Ports Type
	PhysicalPortsType *string `pulumi:"physicalPortsType"`
	// Port order project details
	Project *PortProject `pulumi:"project"`
	// Port redundancy settings
	Redundancy *PortRedundancy `pulumi:"redundancy"`
	// Port order configuration settings
	Settings *PortSettings `pulumi:"settings"`
	// Value representing provisioning status for the port resource
	State    *string       `pulumi:"state"`
	Timeouts *PortTimeouts `pulumi:"timeouts"`
	// Type of the port order request
	Type *string `pulumi:"type"`
	// Equinix assigned unique identifier of the port resource
	Uuid *string `pulumi:"uuid"`
}

type PortState struct {
	// Port order account details
	Account PortAccountPtrInput
	// List of key/value objects to provide additional context to the Port order
	AdditionalInfos PortAdditionalInfoArrayInput
	// Details of the last change on the port resource
	ChangeLog PortChangeLogPtrInput
	// Connection type that is used from the port after creation
	ConnectivitySourceType pulumi.StringPtrInput
	// IBX code where the port will be located
	DemarcationPointIbx pulumi.StringPtrInput
	// Port device configuration
	Device PortDevicePtrInput
	// Port encapsulation settings
	Encapsulation PortEncapsulationPtrInput
	// Equinix assigned URI of the port resource
	Href pulumi.StringPtrInput
	// Boolean value to enable the created port with Link Aggregation Groups
	LagEnabled pulumi.BoolPtrInput
	// Location details for the port order
	Location PortLocationPtrInput
	// Designated name of the port
	Name pulumi.StringPtrInput
	// List of notification types and the registered users to receive those notification types
	Notifications PortNotificationArrayInput
	// Details of the Port Order such as purchaseOrder details and signature
	Order PortOrderPtrInput
	// Physical ports that will implement this port order
	PhysicalPorts PortPhysicalPortArrayInput
	// Number of physical ports in the Port Order
	PhysicalPortsCount pulumi.IntPtrInput
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed pulumi.IntPtrInput
	// Physical Ports Type
	PhysicalPortsType pulumi.StringPtrInput
	// Port order project details
	Project PortProjectPtrInput
	// Port redundancy settings
	Redundancy PortRedundancyPtrInput
	// Port order configuration settings
	Settings PortSettingsPtrInput
	// Value representing provisioning status for the port resource
	State    pulumi.StringPtrInput
	Timeouts PortTimeoutsPtrInput
	// Type of the port order request
	Type pulumi.StringPtrInput
	// Equinix assigned unique identifier of the port resource
	Uuid pulumi.StringPtrInput
}

func (PortState) ElementType() reflect.Type {
	return reflect.TypeOf((*portState)(nil)).Elem()
}

type portArgs struct {
	// Port order account details
	Account PortAccount `pulumi:"account"`
	// List of key/value objects to provide additional context to the Port order
	AdditionalInfos []PortAdditionalInfo `pulumi:"additionalInfos"`
	// Connection type that is used from the port after creation
	ConnectivitySourceType string `pulumi:"connectivitySourceType"`
	// IBX code where the port will be located
	DemarcationPointIbx string `pulumi:"demarcationPointIbx"`
	// Port device configuration
	Device *PortDevice `pulumi:"device"`
	// Port encapsulation settings
	Encapsulation PortEncapsulation `pulumi:"encapsulation"`
	// Boolean value to enable the created port with Link Aggregation Groups
	LagEnabled bool `pulumi:"lagEnabled"`
	// Location details for the port order
	Location PortLocation `pulumi:"location"`
	// Designated name of the port
	Name *string `pulumi:"name"`
	// List of notification types and the registered users to receive those notification types
	Notifications []PortNotification `pulumi:"notifications"`
	// Details of the Port Order such as purchaseOrder details and signature
	Order *PortOrder `pulumi:"order"`
	// Physical ports that will implement this port order
	PhysicalPorts []PortPhysicalPort `pulumi:"physicalPorts"`
	// Number of physical ports in the Port Order
	PhysicalPortsCount int `pulumi:"physicalPortsCount"`
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed int `pulumi:"physicalPortsSpeed"`
	// Physical Ports Type
	PhysicalPortsType string `pulumi:"physicalPortsType"`
	// Port order project details
	Project PortProject `pulumi:"project"`
	// Port redundancy settings
	Redundancy PortRedundancy `pulumi:"redundancy"`
	// Port order configuration settings
	Settings PortSettings  `pulumi:"settings"`
	Timeouts *PortTimeouts `pulumi:"timeouts"`
	// Type of the port order request
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Port resource.
type PortArgs struct {
	// Port order account details
	Account PortAccountInput
	// List of key/value objects to provide additional context to the Port order
	AdditionalInfos PortAdditionalInfoArrayInput
	// Connection type that is used from the port after creation
	ConnectivitySourceType pulumi.StringInput
	// IBX code where the port will be located
	DemarcationPointIbx pulumi.StringInput
	// Port device configuration
	Device PortDevicePtrInput
	// Port encapsulation settings
	Encapsulation PortEncapsulationInput
	// Boolean value to enable the created port with Link Aggregation Groups
	LagEnabled pulumi.BoolInput
	// Location details for the port order
	Location PortLocationInput
	// Designated name of the port
	Name pulumi.StringPtrInput
	// List of notification types and the registered users to receive those notification types
	Notifications PortNotificationArrayInput
	// Details of the Port Order such as purchaseOrder details and signature
	Order PortOrderPtrInput
	// Physical ports that will implement this port order
	PhysicalPorts PortPhysicalPortArrayInput
	// Number of physical ports in the Port Order
	PhysicalPortsCount pulumi.IntInput
	// Physical Ports Speed in Mbps
	PhysicalPortsSpeed pulumi.IntInput
	// Physical Ports Type
	PhysicalPortsType pulumi.StringInput
	// Port order project details
	Project PortProjectInput
	// Port redundancy settings
	Redundancy PortRedundancyInput
	// Port order configuration settings
	Settings PortSettingsInput
	Timeouts PortTimeoutsPtrInput
	// Type of the port order request
	Type pulumi.StringInput
}

func (PortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portArgs)(nil)).Elem()
}

type PortInput interface {
	pulumi.Input

	ToPortOutput() PortOutput
	ToPortOutputWithContext(ctx context.Context) PortOutput
}

func (*Port) ElementType() reflect.Type {
	return reflect.TypeOf((**Port)(nil)).Elem()
}

func (i *Port) ToPortOutput() PortOutput {
	return i.ToPortOutputWithContext(context.Background())
}

func (i *Port) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortOutput)
}

// PortArrayInput is an input type that accepts PortArray and PortArrayOutput values.
// You can construct a concrete instance of `PortArrayInput` via:
//
//	PortArray{ PortArgs{...} }
type PortArrayInput interface {
	pulumi.Input

	ToPortArrayOutput() PortArrayOutput
	ToPortArrayOutputWithContext(context.Context) PortArrayOutput
}

type PortArray []PortInput

func (PortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Port)(nil)).Elem()
}

func (i PortArray) ToPortArrayOutput() PortArrayOutput {
	return i.ToPortArrayOutputWithContext(context.Background())
}

func (i PortArray) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortArrayOutput)
}

// PortMapInput is an input type that accepts PortMap and PortMapOutput values.
// You can construct a concrete instance of `PortMapInput` via:
//
//	PortMap{ "key": PortArgs{...} }
type PortMapInput interface {
	pulumi.Input

	ToPortMapOutput() PortMapOutput
	ToPortMapOutputWithContext(context.Context) PortMapOutput
}

type PortMap map[string]PortInput

func (PortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Port)(nil)).Elem()
}

func (i PortMap) ToPortMapOutput() PortMapOutput {
	return i.ToPortMapOutputWithContext(context.Background())
}

func (i PortMap) ToPortMapOutputWithContext(ctx context.Context) PortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMapOutput)
}

type PortOutput struct{ *pulumi.OutputState }

func (PortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Port)(nil)).Elem()
}

func (o PortOutput) ToPortOutput() PortOutput {
	return o
}

func (o PortOutput) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return o
}

// Port order account details
func (o PortOutput) Account() PortAccountOutput {
	return o.ApplyT(func(v *Port) PortAccountOutput { return v.Account }).(PortAccountOutput)
}

// List of key/value objects to provide additional context to the Port order
func (o PortOutput) AdditionalInfos() PortAdditionalInfoArrayOutput {
	return o.ApplyT(func(v *Port) PortAdditionalInfoArrayOutput { return v.AdditionalInfos }).(PortAdditionalInfoArrayOutput)
}

// Details of the last change on the port resource
func (o PortOutput) ChangeLog() PortChangeLogOutput {
	return o.ApplyT(func(v *Port) PortChangeLogOutput { return v.ChangeLog }).(PortChangeLogOutput)
}

// Connection type that is used from the port after creation
func (o PortOutput) ConnectivitySourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.ConnectivitySourceType }).(pulumi.StringOutput)
}

// IBX code where the port will be located
func (o PortOutput) DemarcationPointIbx() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.DemarcationPointIbx }).(pulumi.StringOutput)
}

// Port device configuration
func (o PortOutput) Device() PortDevicePtrOutput {
	return o.ApplyT(func(v *Port) PortDevicePtrOutput { return v.Device }).(PortDevicePtrOutput)
}

// Port encapsulation settings
func (o PortOutput) Encapsulation() PortEncapsulationOutput {
	return o.ApplyT(func(v *Port) PortEncapsulationOutput { return v.Encapsulation }).(PortEncapsulationOutput)
}

// Equinix assigned URI of the port resource
func (o PortOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Boolean value to enable the created port with Link Aggregation Groups
func (o PortOutput) LagEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Port) pulumi.BoolOutput { return v.LagEnabled }).(pulumi.BoolOutput)
}

// Location details for the port order
func (o PortOutput) Location() PortLocationOutput {
	return o.ApplyT(func(v *Port) PortLocationOutput { return v.Location }).(PortLocationOutput)
}

// Designated name of the port
func (o PortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of notification types and the registered users to receive those notification types
func (o PortOutput) Notifications() PortNotificationArrayOutput {
	return o.ApplyT(func(v *Port) PortNotificationArrayOutput { return v.Notifications }).(PortNotificationArrayOutput)
}

// Details of the Port Order such as purchaseOrder details and signature
func (o PortOutput) Order() PortOrderOutput {
	return o.ApplyT(func(v *Port) PortOrderOutput { return v.Order }).(PortOrderOutput)
}

// Physical ports that will implement this port order
func (o PortOutput) PhysicalPorts() PortPhysicalPortArrayOutput {
	return o.ApplyT(func(v *Port) PortPhysicalPortArrayOutput { return v.PhysicalPorts }).(PortPhysicalPortArrayOutput)
}

// Number of physical ports in the Port Order
func (o PortOutput) PhysicalPortsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Port) pulumi.IntOutput { return v.PhysicalPortsCount }).(pulumi.IntOutput)
}

// Physical Ports Speed in Mbps
func (o PortOutput) PhysicalPortsSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v *Port) pulumi.IntOutput { return v.PhysicalPortsSpeed }).(pulumi.IntOutput)
}

// Physical Ports Type
func (o PortOutput) PhysicalPortsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.PhysicalPortsType }).(pulumi.StringOutput)
}

// Port order project details
func (o PortOutput) Project() PortProjectOutput {
	return o.ApplyT(func(v *Port) PortProjectOutput { return v.Project }).(PortProjectOutput)
}

// Port redundancy settings
func (o PortOutput) Redundancy() PortRedundancyOutput {
	return o.ApplyT(func(v *Port) PortRedundancyOutput { return v.Redundancy }).(PortRedundancyOutput)
}

// Port order configuration settings
func (o PortOutput) Settings() PortSettingsOutput {
	return o.ApplyT(func(v *Port) PortSettingsOutput { return v.Settings }).(PortSettingsOutput)
}

// Value representing provisioning status for the port resource
func (o PortOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o PortOutput) Timeouts() PortTimeoutsPtrOutput {
	return o.ApplyT(func(v *Port) PortTimeoutsPtrOutput { return v.Timeouts }).(PortTimeoutsPtrOutput)
}

// Type of the port order request
func (o PortOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix assigned unique identifier of the port resource
func (o PortOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Port) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type PortArrayOutput struct{ *pulumi.OutputState }

func (PortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Port)(nil)).Elem()
}

func (o PortArrayOutput) ToPortArrayOutput() PortArrayOutput {
	return o
}

func (o PortArrayOutput) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return o
}

func (o PortArrayOutput) Index(i pulumi.IntInput) PortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Port {
		return vs[0].([]*Port)[vs[1].(int)]
	}).(PortOutput)
}

type PortMapOutput struct{ *pulumi.OutputState }

func (PortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Port)(nil)).Elem()
}

func (o PortMapOutput) ToPortMapOutput() PortMapOutput {
	return o
}

func (o PortMapOutput) ToPortMapOutputWithContext(ctx context.Context) PortMapOutput {
	return o
}

func (o PortMapOutput) MapIndex(k pulumi.StringInput) PortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Port {
		return vs[0].(map[string]*Port)[vs[1].(string)]
	}).(PortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortInput)(nil)).Elem(), &Port{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortArrayInput)(nil)).Elem(), PortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortMapInput)(nil)).Elem(), PortMap{})
	pulumi.RegisterOutputType(PortOutput{})
	pulumi.RegisterOutputType(PortArrayOutput{})
	pulumi.RegisterOutputType(PortMapOutput{})
}
