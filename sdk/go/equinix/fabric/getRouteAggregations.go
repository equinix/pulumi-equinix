// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			raPolicy, err := fabric.GetRouteAggregations(ctx, &fabric.GetRouteAggregationsArgs{
//				Filter: fabric.GetRouteAggregationsFilter{
//					Property: "/project/projectId",
//					Operator: "=",
//					Values: []string{
//						"<route_aggregation_project_id>",
//					},
//				},
//				Pagination: fabric.GetRouteAggregationsPagination{
//					Limit:  2,
//					Offset: 1,
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("firstRouteAggregationName", raPolicy.Datas[0].Name)
//			ctx.Export("firstRouteAggregationDescription", raPolicy.Datas[0].Description)
//			ctx.Export("firstRouteAggregationConnectionsCount", raPolicy.Datas[0].ConnectionsCount)
//			ctx.Export("firstRouteAggregationRulesCount", raPolicy.Datas[0].RulesCount)
//			return nil
//		})
//	}
//
// ```
func GetRouteAggregations(ctx *pulumi.Context, args *GetRouteAggregationsArgs, opts ...pulumi.InvokeOption) (*GetRouteAggregationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRouteAggregationsResult
	err := ctx.Invoke("equinix:fabric/getRouteAggregations:getRouteAggregations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteAggregations.
type GetRouteAggregationsArgs struct {
	// Filters for the Data Source Search Request
	Filter GetRouteAggregationsFilter `pulumi:"filter"`
	// Pagination details for the returned route aggregations list
	Pagination *GetRouteAggregationsPagination `pulumi:"pagination"`
	// Filters for the Data Source Search Request
	Sort *GetRouteAggregationsSort `pulumi:"sort"`
}

// A collection of values returned by getRouteAggregations.
type GetRouteAggregationsResult struct {
	// Returned list of route aggregation objects
	Datas []GetRouteAggregationsData `pulumi:"datas"`
	// Filters for the Data Source Search Request
	Filter GetRouteAggregationsFilter `pulumi:"filter"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// Pagination details for the returned route aggregations list
	Pagination *GetRouteAggregationsPagination `pulumi:"pagination"`
	// Filters for the Data Source Search Request
	Sort *GetRouteAggregationsSort `pulumi:"sort"`
}

func GetRouteAggregationsOutput(ctx *pulumi.Context, args GetRouteAggregationsOutputArgs, opts ...pulumi.InvokeOption) GetRouteAggregationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRouteAggregationsResultOutput, error) {
			args := v.(GetRouteAggregationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getRouteAggregations:getRouteAggregations", args, GetRouteAggregationsResultOutput{}, options).(GetRouteAggregationsResultOutput), nil
		}).(GetRouteAggregationsResultOutput)
}

// A collection of arguments for invoking getRouteAggregations.
type GetRouteAggregationsOutputArgs struct {
	// Filters for the Data Source Search Request
	Filter GetRouteAggregationsFilterInput `pulumi:"filter"`
	// Pagination details for the returned route aggregations list
	Pagination GetRouteAggregationsPaginationPtrInput `pulumi:"pagination"`
	// Filters for the Data Source Search Request
	Sort GetRouteAggregationsSortPtrInput `pulumi:"sort"`
}

func (GetRouteAggregationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteAggregationsArgs)(nil)).Elem()
}

// A collection of values returned by getRouteAggregations.
type GetRouteAggregationsResultOutput struct{ *pulumi.OutputState }

func (GetRouteAggregationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteAggregationsResult)(nil)).Elem()
}

func (o GetRouteAggregationsResultOutput) ToGetRouteAggregationsResultOutput() GetRouteAggregationsResultOutput {
	return o
}

func (o GetRouteAggregationsResultOutput) ToGetRouteAggregationsResultOutputWithContext(ctx context.Context) GetRouteAggregationsResultOutput {
	return o
}

// Returned list of route aggregation objects
func (o GetRouteAggregationsResultOutput) Datas() GetRouteAggregationsDataArrayOutput {
	return o.ApplyT(func(v GetRouteAggregationsResult) []GetRouteAggregationsData { return v.Datas }).(GetRouteAggregationsDataArrayOutput)
}

// Filters for the Data Source Search Request
func (o GetRouteAggregationsResultOutput) Filter() GetRouteAggregationsFilterOutput {
	return o.ApplyT(func(v GetRouteAggregationsResult) GetRouteAggregationsFilter { return v.Filter }).(GetRouteAggregationsFilterOutput)
}

// The unique identifier of the resource
func (o GetRouteAggregationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteAggregationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Pagination details for the returned route aggregations list
func (o GetRouteAggregationsResultOutput) Pagination() GetRouteAggregationsPaginationPtrOutput {
	return o.ApplyT(func(v GetRouteAggregationsResult) *GetRouteAggregationsPagination { return v.Pagination }).(GetRouteAggregationsPaginationPtrOutput)
}

// Filters for the Data Source Search Request
func (o GetRouteAggregationsResultOutput) Sort() GetRouteAggregationsSortPtrOutput {
	return o.ApplyT(func(v GetRouteAggregationsResult) *GetRouteAggregationsSort { return v.Sort }).(GetRouteAggregationsSortPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRouteAggregationsResultOutput{})
}
