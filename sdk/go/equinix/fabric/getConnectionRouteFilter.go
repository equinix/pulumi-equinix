// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			attachedPolicy, err := fabric.LookupConnectionRouteFilter(ctx, &fabric.LookupConnectionRouteFilterArgs{
//				ConnectionId:  "<connection_uuid>",
//				RouteFilterId: "<route_filter_uuid>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("connectionRouteFilterId", attachedPolicy.Id)
//			ctx.Export("connectionRouteFilterConnectionId", attachedPolicy.ConnectionId)
//			ctx.Export("connectionRouteFilterDirection", attachedPolicy.Direction)
//			ctx.Export("connectionRouteFilterType", attachedPolicy.Type)
//			ctx.Export("connectionRouteFilterAttachmentStatus", attachedPolicy.AttachmentStatus)
//			return nil
//		})
//	}
//
// ```
func LookupConnectionRouteFilter(ctx *pulumi.Context, args *LookupConnectionRouteFilterArgs, opts ...pulumi.InvokeOption) (*LookupConnectionRouteFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionRouteFilterResult
	err := ctx.Invoke("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionRouteFilter.
type LookupConnectionRouteFilterArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId string `pulumi:"connectionId"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId string `pulumi:"routeFilterId"`
}

// A collection of values returned by getConnectionRouteFilter.
type LookupConnectionRouteFilterResult struct {
	// Status of the Route Filter Policy attachment lifecycle
	AttachmentStatus string `pulumi:"attachmentStatus"`
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId string `pulumi:"connectionId"`
	// Direction of the filtering of the attached Route Filter Policy
	Direction string `pulumi:"direction"`
	// URI to the attached Route Filter Policy on the Connection
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId string `pulumi:"routeFilterId"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type string `pulumi:"type"`
	// Equinix Assigned ID for Route Filter Policy
	Uuid string `pulumi:"uuid"`
}

func LookupConnectionRouteFilterOutput(ctx *pulumi.Context, args LookupConnectionRouteFilterOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionRouteFilterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionRouteFilterResultOutput, error) {
			args := v.(LookupConnectionRouteFilterArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupConnectionRouteFilterResult
			secret, err := ctx.InvokePackageRaw("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", args, &rv, "", opts...)
			if err != nil {
				return LookupConnectionRouteFilterResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupConnectionRouteFilterResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupConnectionRouteFilterResultOutput), nil
			}
			return output, nil
		}).(LookupConnectionRouteFilterResultOutput)
}

// A collection of arguments for invoking getConnectionRouteFilter.
type LookupConnectionRouteFilterOutputArgs struct {
	// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
	RouteFilterId pulumi.StringInput `pulumi:"routeFilterId"`
}

func (LookupConnectionRouteFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionRouteFilterArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionRouteFilter.
type LookupConnectionRouteFilterResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionRouteFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionRouteFilterResult)(nil)).Elem()
}

func (o LookupConnectionRouteFilterResultOutput) ToLookupConnectionRouteFilterResultOutput() LookupConnectionRouteFilterResultOutput {
	return o
}

func (o LookupConnectionRouteFilterResultOutput) ToLookupConnectionRouteFilterResultOutputWithContext(ctx context.Context) LookupConnectionRouteFilterResultOutput {
	return o
}

// Status of the Route Filter Policy attachment lifecycle
func (o LookupConnectionRouteFilterResultOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
func (o LookupConnectionRouteFilterResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Direction of the filtering of the attached Route Filter Policy
func (o LookupConnectionRouteFilterResultOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.Direction }).(pulumi.StringOutput)
}

// URI to the attached Route Filter Policy on the Connection
func (o LookupConnectionRouteFilterResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionRouteFilterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
func (o LookupConnectionRouteFilterResultOutput) RouteFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.RouteFilterId }).(pulumi.StringOutput)
}

// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
func (o LookupConnectionRouteFilterResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Filter Policy
func (o LookupConnectionRouteFilterResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteFilterResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionRouteFilterResultOutput{})
}
