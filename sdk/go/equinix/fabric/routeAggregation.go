// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Aggregation
//
// Additional Documentation:
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fabric.NewRouteAggregation(ctx, "new-ra", &fabric.RouteAggregationArgs{
//				Type:        pulumi.String("BGP_IPv4_PREFIX_AGGREGATION"),
//				Name:        pulumi.String("new-ra"),
//				Description: pulumi.String("Test aggregation"),
//				Project: &fabric.RouteAggregationProjectArgs{
//					ProjectId: pulumi.String("776847000642406"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RouteAggregation struct {
	pulumi.CustomResourceState

	// Current state of latest Route Aggregation change
	Change RouteAggregationChangeOutput `pulumi:"change"`
	// Details of the last change on the route aggregation resource
	ChangeLog RouteAggregationChangeLogOutput `pulumi:"changeLog"`
	// Number of Connections attached to route aggregation
	ConnectionsCount pulumi.IntOutput `pulumi:"connectionsCount"`
	// Customer-provided route aggregation description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Equinix auto generated URI to the route aggregation resource
	Href pulumi.StringOutput `pulumi:"href"`
	// Customer provided name of the route aggregation
	Name pulumi.StringOutput `pulumi:"name"`
	// Equinix Project attribute object
	Project RouteAggregationProjectOutput `pulumi:"project"`
	// Number of Rules attached to route aggregation
	RulesCount pulumi.IntOutput `pulumi:"rulesCount"`
	// Value representing provisioning status for the route aggregation resource
	State    pulumi.StringOutput               `pulumi:"state"`
	Timeouts RouteAggregationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix-assigned unique id for the route aggregation resource
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewRouteAggregation registers a new resource with the given unique name, arguments, and options.
func NewRouteAggregation(ctx *pulumi.Context,
	name string, args *RouteAggregationArgs, opts ...pulumi.ResourceOption) (*RouteAggregation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteAggregation
	err := ctx.RegisterResource("equinix:fabric/routeAggregation:RouteAggregation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteAggregation gets an existing RouteAggregation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteAggregation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteAggregationState, opts ...pulumi.ResourceOption) (*RouteAggregation, error) {
	var resource RouteAggregation
	err := ctx.ReadResource("equinix:fabric/routeAggregation:RouteAggregation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteAggregation resources.
type routeAggregationState struct {
	// Current state of latest Route Aggregation change
	Change *RouteAggregationChange `pulumi:"change"`
	// Details of the last change on the route aggregation resource
	ChangeLog *RouteAggregationChangeLog `pulumi:"changeLog"`
	// Number of Connections attached to route aggregation
	ConnectionsCount *int `pulumi:"connectionsCount"`
	// Customer-provided route aggregation description
	Description *string `pulumi:"description"`
	// Equinix auto generated URI to the route aggregation resource
	Href *string `pulumi:"href"`
	// Customer provided name of the route aggregation
	Name *string `pulumi:"name"`
	// Equinix Project attribute object
	Project *RouteAggregationProject `pulumi:"project"`
	// Number of Rules attached to route aggregation
	RulesCount *int `pulumi:"rulesCount"`
	// Value representing provisioning status for the route aggregation resource
	State    *string                   `pulumi:"state"`
	Timeouts *RouteAggregationTimeouts `pulumi:"timeouts"`
	// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
	Type *string `pulumi:"type"`
	// Equinix-assigned unique id for the route aggregation resource
	Uuid *string `pulumi:"uuid"`
}

type RouteAggregationState struct {
	// Current state of latest Route Aggregation change
	Change RouteAggregationChangePtrInput
	// Details of the last change on the route aggregation resource
	ChangeLog RouteAggregationChangeLogPtrInput
	// Number of Connections attached to route aggregation
	ConnectionsCount pulumi.IntPtrInput
	// Customer-provided route aggregation description
	Description pulumi.StringPtrInput
	// Equinix auto generated URI to the route aggregation resource
	Href pulumi.StringPtrInput
	// Customer provided name of the route aggregation
	Name pulumi.StringPtrInput
	// Equinix Project attribute object
	Project RouteAggregationProjectPtrInput
	// Number of Rules attached to route aggregation
	RulesCount pulumi.IntPtrInput
	// Value representing provisioning status for the route aggregation resource
	State    pulumi.StringPtrInput
	Timeouts RouteAggregationTimeoutsPtrInput
	// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
	Type pulumi.StringPtrInput
	// Equinix-assigned unique id for the route aggregation resource
	Uuid pulumi.StringPtrInput
}

func (RouteAggregationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeAggregationState)(nil)).Elem()
}

type routeAggregationArgs struct {
	// Customer-provided route aggregation description
	Description *string `pulumi:"description"`
	// Customer provided name of the route aggregation
	Name *string `pulumi:"name"`
	// Equinix Project attribute object
	Project  RouteAggregationProject   `pulumi:"project"`
	Timeouts *RouteAggregationTimeouts `pulumi:"timeouts"`
	// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RouteAggregation resource.
type RouteAggregationArgs struct {
	// Customer-provided route aggregation description
	Description pulumi.StringPtrInput
	// Customer provided name of the route aggregation
	Name pulumi.StringPtrInput
	// Equinix Project attribute object
	Project  RouteAggregationProjectInput
	Timeouts RouteAggregationTimeoutsPtrInput
	// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
	Type pulumi.StringInput
}

func (RouteAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeAggregationArgs)(nil)).Elem()
}

type RouteAggregationInput interface {
	pulumi.Input

	ToRouteAggregationOutput() RouteAggregationOutput
	ToRouteAggregationOutputWithContext(ctx context.Context) RouteAggregationOutput
}

func (*RouteAggregation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteAggregation)(nil)).Elem()
}

func (i *RouteAggregation) ToRouteAggregationOutput() RouteAggregationOutput {
	return i.ToRouteAggregationOutputWithContext(context.Background())
}

func (i *RouteAggregation) ToRouteAggregationOutputWithContext(ctx context.Context) RouteAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteAggregationOutput)
}

// RouteAggregationArrayInput is an input type that accepts RouteAggregationArray and RouteAggregationArrayOutput values.
// You can construct a concrete instance of `RouteAggregationArrayInput` via:
//
//	RouteAggregationArray{ RouteAggregationArgs{...} }
type RouteAggregationArrayInput interface {
	pulumi.Input

	ToRouteAggregationArrayOutput() RouteAggregationArrayOutput
	ToRouteAggregationArrayOutputWithContext(context.Context) RouteAggregationArrayOutput
}

type RouteAggregationArray []RouteAggregationInput

func (RouteAggregationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteAggregation)(nil)).Elem()
}

func (i RouteAggregationArray) ToRouteAggregationArrayOutput() RouteAggregationArrayOutput {
	return i.ToRouteAggregationArrayOutputWithContext(context.Background())
}

func (i RouteAggregationArray) ToRouteAggregationArrayOutputWithContext(ctx context.Context) RouteAggregationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteAggregationArrayOutput)
}

// RouteAggregationMapInput is an input type that accepts RouteAggregationMap and RouteAggregationMapOutput values.
// You can construct a concrete instance of `RouteAggregationMapInput` via:
//
//	RouteAggregationMap{ "key": RouteAggregationArgs{...} }
type RouteAggregationMapInput interface {
	pulumi.Input

	ToRouteAggregationMapOutput() RouteAggregationMapOutput
	ToRouteAggregationMapOutputWithContext(context.Context) RouteAggregationMapOutput
}

type RouteAggregationMap map[string]RouteAggregationInput

func (RouteAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteAggregation)(nil)).Elem()
}

func (i RouteAggregationMap) ToRouteAggregationMapOutput() RouteAggregationMapOutput {
	return i.ToRouteAggregationMapOutputWithContext(context.Background())
}

func (i RouteAggregationMap) ToRouteAggregationMapOutputWithContext(ctx context.Context) RouteAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteAggregationMapOutput)
}

type RouteAggregationOutput struct{ *pulumi.OutputState }

func (RouteAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteAggregation)(nil)).Elem()
}

func (o RouteAggregationOutput) ToRouteAggregationOutput() RouteAggregationOutput {
	return o
}

func (o RouteAggregationOutput) ToRouteAggregationOutputWithContext(ctx context.Context) RouteAggregationOutput {
	return o
}

// Current state of latest Route Aggregation change
func (o RouteAggregationOutput) Change() RouteAggregationChangeOutput {
	return o.ApplyT(func(v *RouteAggregation) RouteAggregationChangeOutput { return v.Change }).(RouteAggregationChangeOutput)
}

// Details of the last change on the route aggregation resource
func (o RouteAggregationOutput) ChangeLog() RouteAggregationChangeLogOutput {
	return o.ApplyT(func(v *RouteAggregation) RouteAggregationChangeLogOutput { return v.ChangeLog }).(RouteAggregationChangeLogOutput)
}

// Number of Connections attached to route aggregation
func (o RouteAggregationOutput) ConnectionsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.IntOutput { return v.ConnectionsCount }).(pulumi.IntOutput)
}

// Customer-provided route aggregation description
func (o RouteAggregationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Equinix auto generated URI to the route aggregation resource
func (o RouteAggregationOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Customer provided name of the route aggregation
func (o RouteAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Equinix Project attribute object
func (o RouteAggregationOutput) Project() RouteAggregationProjectOutput {
	return o.ApplyT(func(v *RouteAggregation) RouteAggregationProjectOutput { return v.Project }).(RouteAggregationProjectOutput)
}

// Number of Rules attached to route aggregation
func (o RouteAggregationOutput) RulesCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.IntOutput { return v.RulesCount }).(pulumi.IntOutput)
}

// Value representing provisioning status for the route aggregation resource
func (o RouteAggregationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o RouteAggregationOutput) Timeouts() RouteAggregationTimeoutsPtrOutput {
	return o.ApplyT(func(v *RouteAggregation) RouteAggregationTimeoutsPtrOutput { return v.Timeouts }).(RouteAggregationTimeoutsPtrOutput)
}

// Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
func (o RouteAggregationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned unique id for the route aggregation resource
func (o RouteAggregationOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteAggregation) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type RouteAggregationArrayOutput struct{ *pulumi.OutputState }

func (RouteAggregationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteAggregation)(nil)).Elem()
}

func (o RouteAggregationArrayOutput) ToRouteAggregationArrayOutput() RouteAggregationArrayOutput {
	return o
}

func (o RouteAggregationArrayOutput) ToRouteAggregationArrayOutputWithContext(ctx context.Context) RouteAggregationArrayOutput {
	return o
}

func (o RouteAggregationArrayOutput) Index(i pulumi.IntInput) RouteAggregationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteAggregation {
		return vs[0].([]*RouteAggregation)[vs[1].(int)]
	}).(RouteAggregationOutput)
}

type RouteAggregationMapOutput struct{ *pulumi.OutputState }

func (RouteAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteAggregation)(nil)).Elem()
}

func (o RouteAggregationMapOutput) ToRouteAggregationMapOutput() RouteAggregationMapOutput {
	return o
}

func (o RouteAggregationMapOutput) ToRouteAggregationMapOutputWithContext(ctx context.Context) RouteAggregationMapOutput {
	return o
}

func (o RouteAggregationMapOutput) MapIndex(k pulumi.StringInput) RouteAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteAggregation {
		return vs[0].(map[string]*RouteAggregation)[vs[1].(string)]
	}).(RouteAggregationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteAggregationInput)(nil)).Elem(), &RouteAggregation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteAggregationArrayInput)(nil)).Elem(), RouteAggregationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteAggregationMapInput)(nil)).Elem(), RouteAggregationMap{})
	pulumi.RegisterOutputType(RouteAggregationOutput{})
	pulumi.RegisterOutputType(RouteAggregationArrayOutput{})
	pulumi.RegisterOutputType(RouteAggregationMapOutput{})
}
