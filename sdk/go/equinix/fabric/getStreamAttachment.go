// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fabric.LookupStreamAttachment(ctx, &fabric.LookupStreamAttachmentArgs{
//				AssetId:  "<id_of_the_asset_being_attached>",
//				Asset:    "<asset_group>",
//				StreamId: "<id_of_the_stream_asset_is_being_attached_to>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamAttachment(ctx *pulumi.Context, args *LookupStreamAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupStreamAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamAttachmentResult
	err := ctx.Invoke("equinix:fabric/getStreamAttachment:getStreamAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamAttachment.
type LookupStreamAttachmentArgs struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset string `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId string `pulumi:"assetId"`
	// The uuid of the stream this data source should retrieve
	StreamId string `pulumi:"streamId"`
}

// A collection of values returned by getStreamAttachment.
type LookupStreamAttachmentResult struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset string `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId string `pulumi:"assetId"`
	// Value representing status for the stream attachment
	AttachmentStatus string `pulumi:"attachmentStatus"`
	// Equinix auto generated URI to the stream attachment in Equinix Portal
	Href string `pulumi:"href"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled bool `pulumi:"metricsEnabled"`
	// The uuid of the stream this data source should retrieve
	StreamId string `pulumi:"streamId"`
	// Equinix defined type for the asset stream attachment
	Type string `pulumi:"type"`
	// Equinix-assigned unique id for the stream attachment
	Uuid string `pulumi:"uuid"`
}

func LookupStreamAttachmentOutput(ctx *pulumi.Context, args LookupStreamAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupStreamAttachmentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamAttachmentResultOutput, error) {
			args := v.(LookupStreamAttachmentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getStreamAttachment:getStreamAttachment", args, LookupStreamAttachmentResultOutput{}, options).(LookupStreamAttachmentResultOutput), nil
		}).(LookupStreamAttachmentResultOutput)
}

// A collection of arguments for invoking getStreamAttachment.
type LookupStreamAttachmentOutputArgs struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset pulumi.StringInput `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId pulumi.StringInput `pulumi:"assetId"`
	// The uuid of the stream this data source should retrieve
	StreamId pulumi.StringInput `pulumi:"streamId"`
}

func (LookupStreamAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAttachmentArgs)(nil)).Elem()
}

// A collection of values returned by getStreamAttachment.
type LookupStreamAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupStreamAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAttachmentResult)(nil)).Elem()
}

func (o LookupStreamAttachmentResultOutput) ToLookupStreamAttachmentResultOutput() LookupStreamAttachmentResultOutput {
	return o
}

func (o LookupStreamAttachmentResultOutput) ToLookupStreamAttachmentResultOutputWithContext(ctx context.Context) LookupStreamAttachmentResultOutput {
	return o
}

// Equinix defined asset category. Matches the product name the asset is a part of
func (o LookupStreamAttachmentResultOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.Asset }).(pulumi.StringOutput)
}

// Equinix defined UUID of the asset being attached to the stream
func (o LookupStreamAttachmentResultOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.AssetId }).(pulumi.StringOutput)
}

// Value representing status for the stream attachment
func (o LookupStreamAttachmentResultOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// Equinix auto generated URI to the stream attachment in Equinix Portal
func (o LookupStreamAttachmentResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.Href }).(pulumi.StringOutput)
}

// The unique identifier of the resource
func (o LookupStreamAttachmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Boolean value indicating enablement of metrics for this asset stream attachment
func (o LookupStreamAttachmentResultOutput) MetricsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) bool { return v.MetricsEnabled }).(pulumi.BoolOutput)
}

// The uuid of the stream this data source should retrieve
func (o LookupStreamAttachmentResultOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.StreamId }).(pulumi.StringOutput)
}

// Equinix defined type for the asset stream attachment
func (o LookupStreamAttachmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned unique id for the stream attachment
func (o LookupStreamAttachmentResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAttachmentResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamAttachmentResultOutput{})
}
