// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AccessPointLinkProtocolType string

const (
	AccessPointLinkProtocolTypeUntagged    = AccessPointLinkProtocolType("UNTAGGED")
	AccessPointLinkProtocolTypeDot1q       = AccessPointLinkProtocolType("DOT1Q")
	AccessPointLinkProtocolTypeQinQ        = AccessPointLinkProtocolType("QINQ")
	AccessPointLinkProtocolType_EVPN_VXLAN = AccessPointLinkProtocolType("EVPN_VXLAN")
)

func (AccessPointLinkProtocolType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointLinkProtocolType)(nil)).Elem()
}

func (e AccessPointLinkProtocolType) ToAccessPointLinkProtocolTypeOutput() AccessPointLinkProtocolTypeOutput {
	return pulumi.ToOutput(e).(AccessPointLinkProtocolTypeOutput)
}

func (e AccessPointLinkProtocolType) ToAccessPointLinkProtocolTypeOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessPointLinkProtocolTypeOutput)
}

func (e AccessPointLinkProtocolType) ToAccessPointLinkProtocolTypePtrOutput() AccessPointLinkProtocolTypePtrOutput {
	return e.ToAccessPointLinkProtocolTypePtrOutputWithContext(context.Background())
}

func (e AccessPointLinkProtocolType) ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypePtrOutput {
	return AccessPointLinkProtocolType(e).ToAccessPointLinkProtocolTypeOutputWithContext(ctx).ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx)
}

func (e AccessPointLinkProtocolType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointLinkProtocolType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointLinkProtocolType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessPointLinkProtocolType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessPointLinkProtocolTypeOutput struct{ *pulumi.OutputState }

func (AccessPointLinkProtocolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointLinkProtocolType)(nil)).Elem()
}

func (o AccessPointLinkProtocolTypeOutput) ToAccessPointLinkProtocolTypeOutput() AccessPointLinkProtocolTypeOutput {
	return o
}

func (o AccessPointLinkProtocolTypeOutput) ToAccessPointLinkProtocolTypeOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypeOutput {
	return o
}

func (o AccessPointLinkProtocolTypeOutput) ToAccessPointLinkProtocolTypePtrOutput() AccessPointLinkProtocolTypePtrOutput {
	return o.ToAccessPointLinkProtocolTypePtrOutputWithContext(context.Background())
}

func (o AccessPointLinkProtocolTypeOutput) ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointLinkProtocolType) *AccessPointLinkProtocolType {
		return &v
	}).(AccessPointLinkProtocolTypePtrOutput)
}

func (o AccessPointLinkProtocolTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointLinkProtocolType] {
	return pulumix.Output[AccessPointLinkProtocolType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointLinkProtocolTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessPointLinkProtocolTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointLinkProtocolType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessPointLinkProtocolTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointLinkProtocolTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointLinkProtocolType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessPointLinkProtocolTypePtrOutput struct{ *pulumi.OutputState }

func (AccessPointLinkProtocolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointLinkProtocolType)(nil)).Elem()
}

func (o AccessPointLinkProtocolTypePtrOutput) ToAccessPointLinkProtocolTypePtrOutput() AccessPointLinkProtocolTypePtrOutput {
	return o
}

func (o AccessPointLinkProtocolTypePtrOutput) ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypePtrOutput {
	return o
}

func (o AccessPointLinkProtocolTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessPointLinkProtocolType] {
	return pulumix.Output[*AccessPointLinkProtocolType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointLinkProtocolTypePtrOutput) Elem() AccessPointLinkProtocolTypeOutput {
	return o.ApplyT(func(v *AccessPointLinkProtocolType) AccessPointLinkProtocolType {
		if v != nil {
			return *v
		}
		var ret AccessPointLinkProtocolType
		return ret
	}).(AccessPointLinkProtocolTypeOutput)
}

func (o AccessPointLinkProtocolTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointLinkProtocolTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessPointLinkProtocolType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessPointLinkProtocolTypeInput is an input type that accepts AccessPointLinkProtocolTypeArgs and AccessPointLinkProtocolTypeOutput values.
// You can construct a concrete instance of `AccessPointLinkProtocolTypeInput` via:
//
//	AccessPointLinkProtocolTypeArgs{...}
type AccessPointLinkProtocolTypeInput interface {
	pulumi.Input

	ToAccessPointLinkProtocolTypeOutput() AccessPointLinkProtocolTypeOutput
	ToAccessPointLinkProtocolTypeOutputWithContext(context.Context) AccessPointLinkProtocolTypeOutput
}

var accessPointLinkProtocolTypePtrType = reflect.TypeOf((**AccessPointLinkProtocolType)(nil)).Elem()

type AccessPointLinkProtocolTypePtrInput interface {
	pulumi.Input

	ToAccessPointLinkProtocolTypePtrOutput() AccessPointLinkProtocolTypePtrOutput
	ToAccessPointLinkProtocolTypePtrOutputWithContext(context.Context) AccessPointLinkProtocolTypePtrOutput
}

type accessPointLinkProtocolTypePtr string

func AccessPointLinkProtocolTypePtr(v string) AccessPointLinkProtocolTypePtrInput {
	return (*accessPointLinkProtocolTypePtr)(&v)
}

func (*accessPointLinkProtocolTypePtr) ElementType() reflect.Type {
	return accessPointLinkProtocolTypePtrType
}

func (in *accessPointLinkProtocolTypePtr) ToAccessPointLinkProtocolTypePtrOutput() AccessPointLinkProtocolTypePtrOutput {
	return pulumi.ToOutput(in).(AccessPointLinkProtocolTypePtrOutput)
}

func (in *accessPointLinkProtocolTypePtr) ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx context.Context) AccessPointLinkProtocolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessPointLinkProtocolTypePtrOutput)
}

func (in *accessPointLinkProtocolTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccessPointLinkProtocolType] {
	return pulumix.Output[*AccessPointLinkProtocolType]{
		OutputState: in.ToAccessPointLinkProtocolTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AccessPointPeeringType string

const (
	AccessPointPeeringTypePrivate   = AccessPointPeeringType("PRIVATE")
	AccessPointPeeringTypeMicrosoft = AccessPointPeeringType("MICROSOFT")
	AccessPointPeeringTypePublic    = AccessPointPeeringType("PUBLIC")
)

func (AccessPointPeeringType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPeeringType)(nil)).Elem()
}

func (e AccessPointPeeringType) ToAccessPointPeeringTypeOutput() AccessPointPeeringTypeOutput {
	return pulumi.ToOutput(e).(AccessPointPeeringTypeOutput)
}

func (e AccessPointPeeringType) ToAccessPointPeeringTypeOutputWithContext(ctx context.Context) AccessPointPeeringTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessPointPeeringTypeOutput)
}

func (e AccessPointPeeringType) ToAccessPointPeeringTypePtrOutput() AccessPointPeeringTypePtrOutput {
	return e.ToAccessPointPeeringTypePtrOutputWithContext(context.Background())
}

func (e AccessPointPeeringType) ToAccessPointPeeringTypePtrOutputWithContext(ctx context.Context) AccessPointPeeringTypePtrOutput {
	return AccessPointPeeringType(e).ToAccessPointPeeringTypeOutputWithContext(ctx).ToAccessPointPeeringTypePtrOutputWithContext(ctx)
}

func (e AccessPointPeeringType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointPeeringType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointPeeringType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessPointPeeringType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessPointPeeringTypeOutput struct{ *pulumi.OutputState }

func (AccessPointPeeringTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPeeringType)(nil)).Elem()
}

func (o AccessPointPeeringTypeOutput) ToAccessPointPeeringTypeOutput() AccessPointPeeringTypeOutput {
	return o
}

func (o AccessPointPeeringTypeOutput) ToAccessPointPeeringTypeOutputWithContext(ctx context.Context) AccessPointPeeringTypeOutput {
	return o
}

func (o AccessPointPeeringTypeOutput) ToAccessPointPeeringTypePtrOutput() AccessPointPeeringTypePtrOutput {
	return o.ToAccessPointPeeringTypePtrOutputWithContext(context.Background())
}

func (o AccessPointPeeringTypeOutput) ToAccessPointPeeringTypePtrOutputWithContext(ctx context.Context) AccessPointPeeringTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointPeeringType) *AccessPointPeeringType {
		return &v
	}).(AccessPointPeeringTypePtrOutput)
}

func (o AccessPointPeeringTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointPeeringType] {
	return pulumix.Output[AccessPointPeeringType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointPeeringTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessPointPeeringTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointPeeringType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessPointPeeringTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointPeeringTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointPeeringType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessPointPeeringTypePtrOutput struct{ *pulumi.OutputState }

func (AccessPointPeeringTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPeeringType)(nil)).Elem()
}

func (o AccessPointPeeringTypePtrOutput) ToAccessPointPeeringTypePtrOutput() AccessPointPeeringTypePtrOutput {
	return o
}

func (o AccessPointPeeringTypePtrOutput) ToAccessPointPeeringTypePtrOutputWithContext(ctx context.Context) AccessPointPeeringTypePtrOutput {
	return o
}

func (o AccessPointPeeringTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessPointPeeringType] {
	return pulumix.Output[*AccessPointPeeringType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointPeeringTypePtrOutput) Elem() AccessPointPeeringTypeOutput {
	return o.ApplyT(func(v *AccessPointPeeringType) AccessPointPeeringType {
		if v != nil {
			return *v
		}
		var ret AccessPointPeeringType
		return ret
	}).(AccessPointPeeringTypeOutput)
}

func (o AccessPointPeeringTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointPeeringTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessPointPeeringType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessPointPeeringTypeInput is an input type that accepts AccessPointPeeringTypeArgs and AccessPointPeeringTypeOutput values.
// You can construct a concrete instance of `AccessPointPeeringTypeInput` via:
//
//	AccessPointPeeringTypeArgs{...}
type AccessPointPeeringTypeInput interface {
	pulumi.Input

	ToAccessPointPeeringTypeOutput() AccessPointPeeringTypeOutput
	ToAccessPointPeeringTypeOutputWithContext(context.Context) AccessPointPeeringTypeOutput
}

var accessPointPeeringTypePtrType = reflect.TypeOf((**AccessPointPeeringType)(nil)).Elem()

type AccessPointPeeringTypePtrInput interface {
	pulumi.Input

	ToAccessPointPeeringTypePtrOutput() AccessPointPeeringTypePtrOutput
	ToAccessPointPeeringTypePtrOutputWithContext(context.Context) AccessPointPeeringTypePtrOutput
}

type accessPointPeeringTypePtr string

func AccessPointPeeringTypePtr(v string) AccessPointPeeringTypePtrInput {
	return (*accessPointPeeringTypePtr)(&v)
}

func (*accessPointPeeringTypePtr) ElementType() reflect.Type {
	return accessPointPeeringTypePtrType
}

func (in *accessPointPeeringTypePtr) ToAccessPointPeeringTypePtrOutput() AccessPointPeeringTypePtrOutput {
	return pulumi.ToOutput(in).(AccessPointPeeringTypePtrOutput)
}

func (in *accessPointPeeringTypePtr) ToAccessPointPeeringTypePtrOutputWithContext(ctx context.Context) AccessPointPeeringTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessPointPeeringTypePtrOutput)
}

func (in *accessPointPeeringTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccessPointPeeringType] {
	return pulumix.Output[*AccessPointPeeringType]{
		OutputState: in.ToAccessPointPeeringTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AccessPointType string

const (
	// Colocation
	AccessPointTypeColo = AccessPointType("COLO")
	// Virtual Device
	AccessPointTypeVD = AccessPointType("VD")
	// Service Profile
	AccessPointTypeSP = AccessPointType("SP")
	// Internet Gateway
	AccessPointTypeIGW = AccessPointType("IGW")
	// Subnet
	AccessPointTypeSubnet = AccessPointType("SUBNET")
	// Gateway
	AccessPointTypeGW = AccessPointType("GW")
	// Network
	AccessPointTypeNetwork = AccessPointType("NETWORK")
)

func (AccessPointType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointType)(nil)).Elem()
}

func (e AccessPointType) ToAccessPointTypeOutput() AccessPointTypeOutput {
	return pulumi.ToOutput(e).(AccessPointTypeOutput)
}

func (e AccessPointType) ToAccessPointTypeOutputWithContext(ctx context.Context) AccessPointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessPointTypeOutput)
}

func (e AccessPointType) ToAccessPointTypePtrOutput() AccessPointTypePtrOutput {
	return e.ToAccessPointTypePtrOutputWithContext(context.Background())
}

func (e AccessPointType) ToAccessPointTypePtrOutputWithContext(ctx context.Context) AccessPointTypePtrOutput {
	return AccessPointType(e).ToAccessPointTypeOutputWithContext(ctx).ToAccessPointTypePtrOutputWithContext(ctx)
}

func (e AccessPointType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPointType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessPointType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessPointTypeOutput struct{ *pulumi.OutputState }

func (AccessPointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointType)(nil)).Elem()
}

func (o AccessPointTypeOutput) ToAccessPointTypeOutput() AccessPointTypeOutput {
	return o
}

func (o AccessPointTypeOutput) ToAccessPointTypeOutputWithContext(ctx context.Context) AccessPointTypeOutput {
	return o
}

func (o AccessPointTypeOutput) ToAccessPointTypePtrOutput() AccessPointTypePtrOutput {
	return o.ToAccessPointTypePtrOutputWithContext(context.Background())
}

func (o AccessPointTypeOutput) ToAccessPointTypePtrOutputWithContext(ctx context.Context) AccessPointTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointType) *AccessPointType {
		return &v
	}).(AccessPointTypePtrOutput)
}

func (o AccessPointTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPointType] {
	return pulumix.Output[AccessPointType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessPointTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessPointTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPointType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessPointTypePtrOutput struct{ *pulumi.OutputState }

func (AccessPointTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointType)(nil)).Elem()
}

func (o AccessPointTypePtrOutput) ToAccessPointTypePtrOutput() AccessPointTypePtrOutput {
	return o
}

func (o AccessPointTypePtrOutput) ToAccessPointTypePtrOutputWithContext(ctx context.Context) AccessPointTypePtrOutput {
	return o
}

func (o AccessPointTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessPointType] {
	return pulumix.Output[*AccessPointType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPointTypePtrOutput) Elem() AccessPointTypeOutput {
	return o.ApplyT(func(v *AccessPointType) AccessPointType {
		if v != nil {
			return *v
		}
		var ret AccessPointType
		return ret
	}).(AccessPointTypeOutput)
}

func (o AccessPointTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPointTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessPointType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessPointTypeInput is an input type that accepts AccessPointTypeArgs and AccessPointTypeOutput values.
// You can construct a concrete instance of `AccessPointTypeInput` via:
//
//	AccessPointTypeArgs{...}
type AccessPointTypeInput interface {
	pulumi.Input

	ToAccessPointTypeOutput() AccessPointTypeOutput
	ToAccessPointTypeOutputWithContext(context.Context) AccessPointTypeOutput
}

var accessPointTypePtrType = reflect.TypeOf((**AccessPointType)(nil)).Elem()

type AccessPointTypePtrInput interface {
	pulumi.Input

	ToAccessPointTypePtrOutput() AccessPointTypePtrOutput
	ToAccessPointTypePtrOutputWithContext(context.Context) AccessPointTypePtrOutput
}

type accessPointTypePtr string

func AccessPointTypePtr(v string) AccessPointTypePtrInput {
	return (*accessPointTypePtr)(&v)
}

func (*accessPointTypePtr) ElementType() reflect.Type {
	return accessPointTypePtrType
}

func (in *accessPointTypePtr) ToAccessPointTypePtrOutput() AccessPointTypePtrOutput {
	return pulumi.ToOutput(in).(AccessPointTypePtrOutput)
}

func (in *accessPointTypePtr) ToAccessPointTypePtrOutputWithContext(ctx context.Context) AccessPointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessPointTypePtrOutput)
}

func (in *accessPointTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccessPointType] {
	return pulumix.Output[*AccessPointType]{
		OutputState: in.ToAccessPointTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ConnectionType string

const (
	// Virtual Gateway
	ConnectionTypeVG = ConnectionType("VG_VC")
	// Ethernet Virtual Private Line
	ConnectionTypeEVPL = ConnectionType("EVPL_VC")
	// Ethernet Private Line
	ConnectionTypeEPL = ConnectionType("EPL_VC")
	// Fabric Gateway virtual connection
	ConnectionTypeGW = ConnectionType("GW_VC")
	// E-access, layer 2 connection between a QINQ port and an EPL port.
	ConnectionTypeAccessEPL = ConnectionType("ACCESS_EPL_VC")
)

func (ConnectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionType)(nil)).Elem()
}

func (e ConnectionType) ToConnectionTypeOutput() ConnectionTypeOutput {
	return pulumi.ToOutput(e).(ConnectionTypeOutput)
}

func (e ConnectionType) ToConnectionTypeOutputWithContext(ctx context.Context) ConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectionTypeOutput)
}

func (e ConnectionType) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return e.ToConnectionTypePtrOutputWithContext(context.Background())
}

func (e ConnectionType) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return ConnectionType(e).ToConnectionTypeOutputWithContext(ctx).ToConnectionTypePtrOutputWithContext(ctx)
}

func (e ConnectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectionTypeOutput struct{ *pulumi.OutputState }

func (ConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionType)(nil)).Elem()
}

func (o ConnectionTypeOutput) ToConnectionTypeOutput() ConnectionTypeOutput {
	return o
}

func (o ConnectionTypeOutput) ToConnectionTypeOutputWithContext(ctx context.Context) ConnectionTypeOutput {
	return o
}

func (o ConnectionTypeOutput) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return o.ToConnectionTypePtrOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionType) *ConnectionType {
		return &v
	}).(ConnectionTypePtrOutput)
}

func (o ConnectionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionType] {
	return pulumix.Output[ConnectionType]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectionTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionType)(nil)).Elem()
}

func (o ConnectionTypePtrOutput) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return o
}

func (o ConnectionTypePtrOutput) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return o
}

func (o ConnectionTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectionType] {
	return pulumix.Output[*ConnectionType]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionTypePtrOutput) Elem() ConnectionTypeOutput {
	return o.ApplyT(func(v *ConnectionType) ConnectionType {
		if v != nil {
			return *v
		}
		var ret ConnectionType
		return ret
	}).(ConnectionTypeOutput)
}

func (o ConnectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectionTypeInput is an input type that accepts ConnectionTypeArgs and ConnectionTypeOutput values.
// You can construct a concrete instance of `ConnectionTypeInput` via:
//
//	ConnectionTypeArgs{...}
type ConnectionTypeInput interface {
	pulumi.Input

	ToConnectionTypeOutput() ConnectionTypeOutput
	ToConnectionTypeOutputWithContext(context.Context) ConnectionTypeOutput
}

var connectionTypePtrType = reflect.TypeOf((**ConnectionType)(nil)).Elem()

type ConnectionTypePtrInput interface {
	pulumi.Input

	ToConnectionTypePtrOutput() ConnectionTypePtrOutput
	ToConnectionTypePtrOutputWithContext(context.Context) ConnectionTypePtrOutput
}

type connectionTypePtr string

func ConnectionTypePtr(v string) ConnectionTypePtrInput {
	return (*connectionTypePtr)(&v)
}

func (*connectionTypePtr) ElementType() reflect.Type {
	return connectionTypePtrType
}

func (in *connectionTypePtr) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return pulumi.ToOutput(in).(ConnectionTypePtrOutput)
}

func (in *connectionTypePtr) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectionTypePtrOutput)
}

func (in *connectionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ConnectionType] {
	return pulumix.Output[*ConnectionType]{
		OutputState: in.ToConnectionTypePtrOutputWithContext(ctx).OutputState,
	}
}

type NotificationsType string

const (
	NotificationsTypeAll                = NotificationsType("ALL")
	NotificationsTypeConnectionApproval = NotificationsType("CONNECTION_APPROVAL")
	NotificationsTypeSalesNotifications = NotificationsType("SALES_REP_NOTIFICATIONS")
	NotificationsTypeNotifications      = NotificationsType("NOTIFICATIONS")
)

func (NotificationsType) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationsType)(nil)).Elem()
}

func (e NotificationsType) ToNotificationsTypeOutput() NotificationsTypeOutput {
	return pulumi.ToOutput(e).(NotificationsTypeOutput)
}

func (e NotificationsType) ToNotificationsTypeOutputWithContext(ctx context.Context) NotificationsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NotificationsTypeOutput)
}

func (e NotificationsType) ToNotificationsTypePtrOutput() NotificationsTypePtrOutput {
	return e.ToNotificationsTypePtrOutputWithContext(context.Background())
}

func (e NotificationsType) ToNotificationsTypePtrOutputWithContext(ctx context.Context) NotificationsTypePtrOutput {
	return NotificationsType(e).ToNotificationsTypeOutputWithContext(ctx).ToNotificationsTypePtrOutputWithContext(ctx)
}

func (e NotificationsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NotificationsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NotificationsTypeOutput struct{ *pulumi.OutputState }

func (NotificationsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationsType)(nil)).Elem()
}

func (o NotificationsTypeOutput) ToNotificationsTypeOutput() NotificationsTypeOutput {
	return o
}

func (o NotificationsTypeOutput) ToNotificationsTypeOutputWithContext(ctx context.Context) NotificationsTypeOutput {
	return o
}

func (o NotificationsTypeOutput) ToNotificationsTypePtrOutput() NotificationsTypePtrOutput {
	return o.ToNotificationsTypePtrOutputWithContext(context.Background())
}

func (o NotificationsTypeOutput) ToNotificationsTypePtrOutputWithContext(ctx context.Context) NotificationsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationsType) *NotificationsType {
		return &v
	}).(NotificationsTypePtrOutput)
}

func (o NotificationsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationsType] {
	return pulumix.Output[NotificationsType]{
		OutputState: o.OutputState,
	}
}

func (o NotificationsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NotificationsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NotificationsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NotificationsTypePtrOutput struct{ *pulumi.OutputState }

func (NotificationsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationsType)(nil)).Elem()
}

func (o NotificationsTypePtrOutput) ToNotificationsTypePtrOutput() NotificationsTypePtrOutput {
	return o
}

func (o NotificationsTypePtrOutput) ToNotificationsTypePtrOutputWithContext(ctx context.Context) NotificationsTypePtrOutput {
	return o
}

func (o NotificationsTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NotificationsType] {
	return pulumix.Output[*NotificationsType]{
		OutputState: o.OutputState,
	}
}

func (o NotificationsTypePtrOutput) Elem() NotificationsTypeOutput {
	return o.ApplyT(func(v *NotificationsType) NotificationsType {
		if v != nil {
			return *v
		}
		var ret NotificationsType
		return ret
	}).(NotificationsTypeOutput)
}

func (o NotificationsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NotificationsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NotificationsTypeInput is an input type that accepts NotificationsTypeArgs and NotificationsTypeOutput values.
// You can construct a concrete instance of `NotificationsTypeInput` via:
//
//	NotificationsTypeArgs{...}
type NotificationsTypeInput interface {
	pulumi.Input

	ToNotificationsTypeOutput() NotificationsTypeOutput
	ToNotificationsTypeOutputWithContext(context.Context) NotificationsTypeOutput
}

var notificationsTypePtrType = reflect.TypeOf((**NotificationsType)(nil)).Elem()

type NotificationsTypePtrInput interface {
	pulumi.Input

	ToNotificationsTypePtrOutput() NotificationsTypePtrOutput
	ToNotificationsTypePtrOutputWithContext(context.Context) NotificationsTypePtrOutput
}

type notificationsTypePtr string

func NotificationsTypePtr(v string) NotificationsTypePtrInput {
	return (*notificationsTypePtr)(&v)
}

func (*notificationsTypePtr) ElementType() reflect.Type {
	return notificationsTypePtrType
}

func (in *notificationsTypePtr) ToNotificationsTypePtrOutput() NotificationsTypePtrOutput {
	return pulumi.ToOutput(in).(NotificationsTypePtrOutput)
}

func (in *notificationsTypePtr) ToNotificationsTypePtrOutputWithContext(ctx context.Context) NotificationsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NotificationsTypePtrOutput)
}

func (in *notificationsTypePtr) ToOutput(ctx context.Context) pulumix.Output[*NotificationsType] {
	return pulumix.Output[*NotificationsType]{
		OutputState: in.ToNotificationsTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ProfileAccessPointType string

const (
	// Colocation
	ProfileAccessPointTypeColo = ProfileAccessPointType("COLO")
	// Virtual Device
	ProfileAccessPointTypeVD = ProfileAccessPointType("VD")
)

func (ProfileAccessPointType) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileAccessPointType)(nil)).Elem()
}

func (e ProfileAccessPointType) ToProfileAccessPointTypeOutput() ProfileAccessPointTypeOutput {
	return pulumi.ToOutput(e).(ProfileAccessPointTypeOutput)
}

func (e ProfileAccessPointType) ToProfileAccessPointTypeOutputWithContext(ctx context.Context) ProfileAccessPointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProfileAccessPointTypeOutput)
}

func (e ProfileAccessPointType) ToProfileAccessPointTypePtrOutput() ProfileAccessPointTypePtrOutput {
	return e.ToProfileAccessPointTypePtrOutputWithContext(context.Background())
}

func (e ProfileAccessPointType) ToProfileAccessPointTypePtrOutputWithContext(ctx context.Context) ProfileAccessPointTypePtrOutput {
	return ProfileAccessPointType(e).ToProfileAccessPointTypeOutputWithContext(ctx).ToProfileAccessPointTypePtrOutputWithContext(ctx)
}

func (e ProfileAccessPointType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileAccessPointType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileAccessPointType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProfileAccessPointType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProfileAccessPointTypeOutput struct{ *pulumi.OutputState }

func (ProfileAccessPointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileAccessPointType)(nil)).Elem()
}

func (o ProfileAccessPointTypeOutput) ToProfileAccessPointTypeOutput() ProfileAccessPointTypeOutput {
	return o
}

func (o ProfileAccessPointTypeOutput) ToProfileAccessPointTypeOutputWithContext(ctx context.Context) ProfileAccessPointTypeOutput {
	return o
}

func (o ProfileAccessPointTypeOutput) ToProfileAccessPointTypePtrOutput() ProfileAccessPointTypePtrOutput {
	return o.ToProfileAccessPointTypePtrOutputWithContext(context.Background())
}

func (o ProfileAccessPointTypeOutput) ToProfileAccessPointTypePtrOutputWithContext(ctx context.Context) ProfileAccessPointTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileAccessPointType) *ProfileAccessPointType {
		return &v
	}).(ProfileAccessPointTypePtrOutput)
}

func (o ProfileAccessPointTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileAccessPointType] {
	return pulumix.Output[ProfileAccessPointType]{
		OutputState: o.OutputState,
	}
}

func (o ProfileAccessPointTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProfileAccessPointTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileAccessPointType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProfileAccessPointTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileAccessPointTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileAccessPointType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProfileAccessPointTypePtrOutput struct{ *pulumi.OutputState }

func (ProfileAccessPointTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileAccessPointType)(nil)).Elem()
}

func (o ProfileAccessPointTypePtrOutput) ToProfileAccessPointTypePtrOutput() ProfileAccessPointTypePtrOutput {
	return o
}

func (o ProfileAccessPointTypePtrOutput) ToProfileAccessPointTypePtrOutputWithContext(ctx context.Context) ProfileAccessPointTypePtrOutput {
	return o
}

func (o ProfileAccessPointTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileAccessPointType] {
	return pulumix.Output[*ProfileAccessPointType]{
		OutputState: o.OutputState,
	}
}

func (o ProfileAccessPointTypePtrOutput) Elem() ProfileAccessPointTypeOutput {
	return o.ApplyT(func(v *ProfileAccessPointType) ProfileAccessPointType {
		if v != nil {
			return *v
		}
		var ret ProfileAccessPointType
		return ret
	}).(ProfileAccessPointTypeOutput)
}

func (o ProfileAccessPointTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileAccessPointTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProfileAccessPointType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProfileAccessPointTypeInput is an input type that accepts ProfileAccessPointTypeArgs and ProfileAccessPointTypeOutput values.
// You can construct a concrete instance of `ProfileAccessPointTypeInput` via:
//
//	ProfileAccessPointTypeArgs{...}
type ProfileAccessPointTypeInput interface {
	pulumi.Input

	ToProfileAccessPointTypeOutput() ProfileAccessPointTypeOutput
	ToProfileAccessPointTypeOutputWithContext(context.Context) ProfileAccessPointTypeOutput
}

var profileAccessPointTypePtrType = reflect.TypeOf((**ProfileAccessPointType)(nil)).Elem()

type ProfileAccessPointTypePtrInput interface {
	pulumi.Input

	ToProfileAccessPointTypePtrOutput() ProfileAccessPointTypePtrOutput
	ToProfileAccessPointTypePtrOutputWithContext(context.Context) ProfileAccessPointTypePtrOutput
}

type profileAccessPointTypePtr string

func ProfileAccessPointTypePtr(v string) ProfileAccessPointTypePtrInput {
	return (*profileAccessPointTypePtr)(&v)
}

func (*profileAccessPointTypePtr) ElementType() reflect.Type {
	return profileAccessPointTypePtrType
}

func (in *profileAccessPointTypePtr) ToProfileAccessPointTypePtrOutput() ProfileAccessPointTypePtrOutput {
	return pulumi.ToOutput(in).(ProfileAccessPointTypePtrOutput)
}

func (in *profileAccessPointTypePtr) ToProfileAccessPointTypePtrOutputWithContext(ctx context.Context) ProfileAccessPointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProfileAccessPointTypePtrOutput)
}

func (in *profileAccessPointTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ProfileAccessPointType] {
	return pulumix.Output[*ProfileAccessPointType]{
		OutputState: in.ToProfileAccessPointTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ProfileState string

const (
	ProfileStateActive          = ProfileState("ACTIVE")
	ProfileStatePendingApproval = ProfileState("PENDING_APPROVAL")
	ProfileStateDeleted         = ProfileState("DELETED")
	ProfileStateRejected        = ProfileState("REJECTED")
)

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileState)(nil)).Elem()
}

func (e ProfileState) ToProfileStateOutput() ProfileStateOutput {
	return pulumi.ToOutput(e).(ProfileStateOutput)
}

func (e ProfileState) ToProfileStateOutputWithContext(ctx context.Context) ProfileStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProfileStateOutput)
}

func (e ProfileState) ToProfileStatePtrOutput() ProfileStatePtrOutput {
	return e.ToProfileStatePtrOutputWithContext(context.Background())
}

func (e ProfileState) ToProfileStatePtrOutputWithContext(ctx context.Context) ProfileStatePtrOutput {
	return ProfileState(e).ToProfileStateOutputWithContext(ctx).ToProfileStatePtrOutputWithContext(ctx)
}

func (e ProfileState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProfileState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProfileStateOutput struct{ *pulumi.OutputState }

func (ProfileStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileState)(nil)).Elem()
}

func (o ProfileStateOutput) ToProfileStateOutput() ProfileStateOutput {
	return o
}

func (o ProfileStateOutput) ToProfileStateOutputWithContext(ctx context.Context) ProfileStateOutput {
	return o
}

func (o ProfileStateOutput) ToProfileStatePtrOutput() ProfileStatePtrOutput {
	return o.ToProfileStatePtrOutputWithContext(context.Background())
}

func (o ProfileStateOutput) ToProfileStatePtrOutputWithContext(ctx context.Context) ProfileStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileState) *ProfileState {
		return &v
	}).(ProfileStatePtrOutput)
}

func (o ProfileStateOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileState] {
	return pulumix.Output[ProfileState]{
		OutputState: o.OutputState,
	}
}

func (o ProfileStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProfileStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProfileStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProfileStatePtrOutput struct{ *pulumi.OutputState }

func (ProfileStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileState)(nil)).Elem()
}

func (o ProfileStatePtrOutput) ToProfileStatePtrOutput() ProfileStatePtrOutput {
	return o
}

func (o ProfileStatePtrOutput) ToProfileStatePtrOutputWithContext(ctx context.Context) ProfileStatePtrOutput {
	return o
}

func (o ProfileStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileState] {
	return pulumix.Output[*ProfileState]{
		OutputState: o.OutputState,
	}
}

func (o ProfileStatePtrOutput) Elem() ProfileStateOutput {
	return o.ApplyT(func(v *ProfileState) ProfileState {
		if v != nil {
			return *v
		}
		var ret ProfileState
		return ret
	}).(ProfileStateOutput)
}

func (o ProfileStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProfileState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProfileStateInput is an input type that accepts ProfileStateArgs and ProfileStateOutput values.
// You can construct a concrete instance of `ProfileStateInput` via:
//
//	ProfileStateArgs{...}
type ProfileStateInput interface {
	pulumi.Input

	ToProfileStateOutput() ProfileStateOutput
	ToProfileStateOutputWithContext(context.Context) ProfileStateOutput
}

var profileStatePtrType = reflect.TypeOf((**ProfileState)(nil)).Elem()

type ProfileStatePtrInput interface {
	pulumi.Input

	ToProfileStatePtrOutput() ProfileStatePtrOutput
	ToProfileStatePtrOutputWithContext(context.Context) ProfileStatePtrOutput
}

type profileStatePtr string

func ProfileStatePtr(v string) ProfileStatePtrInput {
	return (*profileStatePtr)(&v)
}

func (*profileStatePtr) ElementType() reflect.Type {
	return profileStatePtrType
}

func (in *profileStatePtr) ToProfileStatePtrOutput() ProfileStatePtrOutput {
	return pulumi.ToOutput(in).(ProfileStatePtrOutput)
}

func (in *profileStatePtr) ToProfileStatePtrOutputWithContext(ctx context.Context) ProfileStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProfileStatePtrOutput)
}

func (in *profileStatePtr) ToOutput(ctx context.Context) pulumix.Output[*ProfileState] {
	return pulumix.Output[*ProfileState]{
		OutputState: in.ToProfileStatePtrOutputWithContext(ctx).OutputState,
	}
}

type ProfileType string

const (
	ProfileTypeL2Profile = ProfileType("L2_PROFILE")
	ProfileTypeL3Profile = ProfileType("L3_PROFILE")
)

func (ProfileType) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (e ProfileType) ToProfileTypeOutput() ProfileTypeOutput {
	return pulumi.ToOutput(e).(ProfileTypeOutput)
}

func (e ProfileType) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProfileTypeOutput)
}

func (e ProfileType) ToProfileTypePtrOutput() ProfileTypePtrOutput {
	return e.ToProfileTypePtrOutputWithContext(context.Background())
}

func (e ProfileType) ToProfileTypePtrOutputWithContext(ctx context.Context) ProfileTypePtrOutput {
	return ProfileType(e).ToProfileTypeOutputWithContext(ctx).ToProfileTypePtrOutputWithContext(ctx)
}

func (e ProfileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProfileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProfileTypeOutput struct{ *pulumi.OutputState }

func (ProfileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (o ProfileTypeOutput) ToProfileTypeOutput() ProfileTypeOutput {
	return o
}

func (o ProfileTypeOutput) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return o
}

func (o ProfileTypeOutput) ToProfileTypePtrOutput() ProfileTypePtrOutput {
	return o.ToProfileTypePtrOutputWithContext(context.Background())
}

func (o ProfileTypeOutput) ToProfileTypePtrOutputWithContext(ctx context.Context) ProfileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileType) *ProfileType {
		return &v
	}).(ProfileTypePtrOutput)
}

func (o ProfileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileType] {
	return pulumix.Output[ProfileType]{
		OutputState: o.OutputState,
	}
}

func (o ProfileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProfileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProfileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProfileTypePtrOutput struct{ *pulumi.OutputState }

func (ProfileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileType)(nil)).Elem()
}

func (o ProfileTypePtrOutput) ToProfileTypePtrOutput() ProfileTypePtrOutput {
	return o
}

func (o ProfileTypePtrOutput) ToProfileTypePtrOutputWithContext(ctx context.Context) ProfileTypePtrOutput {
	return o
}

func (o ProfileTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileType] {
	return pulumix.Output[*ProfileType]{
		OutputState: o.OutputState,
	}
}

func (o ProfileTypePtrOutput) Elem() ProfileTypeOutput {
	return o.ApplyT(func(v *ProfileType) ProfileType {
		if v != nil {
			return *v
		}
		var ret ProfileType
		return ret
	}).(ProfileTypeOutput)
}

func (o ProfileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProfileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProfileTypeInput is an input type that accepts ProfileTypeArgs and ProfileTypeOutput values.
// You can construct a concrete instance of `ProfileTypeInput` via:
//
//	ProfileTypeArgs{...}
type ProfileTypeInput interface {
	pulumi.Input

	ToProfileTypeOutput() ProfileTypeOutput
	ToProfileTypeOutputWithContext(context.Context) ProfileTypeOutput
}

var profileTypePtrType = reflect.TypeOf((**ProfileType)(nil)).Elem()

type ProfileTypePtrInput interface {
	pulumi.Input

	ToProfileTypePtrOutput() ProfileTypePtrOutput
	ToProfileTypePtrOutputWithContext(context.Context) ProfileTypePtrOutput
}

type profileTypePtr string

func ProfileTypePtr(v string) ProfileTypePtrInput {
	return (*profileTypePtr)(&v)
}

func (*profileTypePtr) ElementType() reflect.Type {
	return profileTypePtrType
}

func (in *profileTypePtr) ToProfileTypePtrOutput() ProfileTypePtrOutput {
	return pulumi.ToOutput(in).(ProfileTypePtrOutput)
}

func (in *profileTypePtr) ToProfileTypePtrOutputWithContext(ctx context.Context) ProfileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProfileTypePtrOutput)
}

func (in *profileTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ProfileType] {
	return pulumix.Output[*ProfileType]{
		OutputState: in.ToProfileTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ProfileVisibility string

const (
	ProfileVisibilityPublic  = ProfileVisibility("PUBLIC")
	ProfileVisibilityPrivate = ProfileVisibility("PRIVATE")
)

func (ProfileVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileVisibility)(nil)).Elem()
}

func (e ProfileVisibility) ToProfileVisibilityOutput() ProfileVisibilityOutput {
	return pulumi.ToOutput(e).(ProfileVisibilityOutput)
}

func (e ProfileVisibility) ToProfileVisibilityOutputWithContext(ctx context.Context) ProfileVisibilityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProfileVisibilityOutput)
}

func (e ProfileVisibility) ToProfileVisibilityPtrOutput() ProfileVisibilityPtrOutput {
	return e.ToProfileVisibilityPtrOutputWithContext(context.Background())
}

func (e ProfileVisibility) ToProfileVisibilityPtrOutputWithContext(ctx context.Context) ProfileVisibilityPtrOutput {
	return ProfileVisibility(e).ToProfileVisibilityOutputWithContext(ctx).ToProfileVisibilityPtrOutputWithContext(ctx)
}

func (e ProfileVisibility) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileVisibility) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileVisibility) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProfileVisibility) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProfileVisibilityOutput struct{ *pulumi.OutputState }

func (ProfileVisibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileVisibility)(nil)).Elem()
}

func (o ProfileVisibilityOutput) ToProfileVisibilityOutput() ProfileVisibilityOutput {
	return o
}

func (o ProfileVisibilityOutput) ToProfileVisibilityOutputWithContext(ctx context.Context) ProfileVisibilityOutput {
	return o
}

func (o ProfileVisibilityOutput) ToProfileVisibilityPtrOutput() ProfileVisibilityPtrOutput {
	return o.ToProfileVisibilityPtrOutputWithContext(context.Background())
}

func (o ProfileVisibilityOutput) ToProfileVisibilityPtrOutputWithContext(ctx context.Context) ProfileVisibilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileVisibility) *ProfileVisibility {
		return &v
	}).(ProfileVisibilityPtrOutput)
}

func (o ProfileVisibilityOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileVisibility] {
	return pulumix.Output[ProfileVisibility]{
		OutputState: o.OutputState,
	}
}

func (o ProfileVisibilityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProfileVisibilityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileVisibility) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProfileVisibilityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileVisibilityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileVisibility) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProfileVisibilityPtrOutput struct{ *pulumi.OutputState }

func (ProfileVisibilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileVisibility)(nil)).Elem()
}

func (o ProfileVisibilityPtrOutput) ToProfileVisibilityPtrOutput() ProfileVisibilityPtrOutput {
	return o
}

func (o ProfileVisibilityPtrOutput) ToProfileVisibilityPtrOutputWithContext(ctx context.Context) ProfileVisibilityPtrOutput {
	return o
}

func (o ProfileVisibilityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileVisibility] {
	return pulumix.Output[*ProfileVisibility]{
		OutputState: o.OutputState,
	}
}

func (o ProfileVisibilityPtrOutput) Elem() ProfileVisibilityOutput {
	return o.ApplyT(func(v *ProfileVisibility) ProfileVisibility {
		if v != nil {
			return *v
		}
		var ret ProfileVisibility
		return ret
	}).(ProfileVisibilityOutput)
}

func (o ProfileVisibilityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileVisibilityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProfileVisibility) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProfileVisibilityInput is an input type that accepts ProfileVisibilityArgs and ProfileVisibilityOutput values.
// You can construct a concrete instance of `ProfileVisibilityInput` via:
//
//	ProfileVisibilityArgs{...}
type ProfileVisibilityInput interface {
	pulumi.Input

	ToProfileVisibilityOutput() ProfileVisibilityOutput
	ToProfileVisibilityOutputWithContext(context.Context) ProfileVisibilityOutput
}

var profileVisibilityPtrType = reflect.TypeOf((**ProfileVisibility)(nil)).Elem()

type ProfileVisibilityPtrInput interface {
	pulumi.Input

	ToProfileVisibilityPtrOutput() ProfileVisibilityPtrOutput
	ToProfileVisibilityPtrOutputWithContext(context.Context) ProfileVisibilityPtrOutput
}

type profileVisibilityPtr string

func ProfileVisibilityPtr(v string) ProfileVisibilityPtrInput {
	return (*profileVisibilityPtr)(&v)
}

func (*profileVisibilityPtr) ElementType() reflect.Type {
	return profileVisibilityPtrType
}

func (in *profileVisibilityPtr) ToProfileVisibilityPtrOutput() ProfileVisibilityPtrOutput {
	return pulumi.ToOutput(in).(ProfileVisibilityPtrOutput)
}

func (in *profileVisibilityPtr) ToProfileVisibilityPtrOutputWithContext(ctx context.Context) ProfileVisibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProfileVisibilityPtrOutput)
}

func (in *profileVisibilityPtr) ToOutput(ctx context.Context) pulumix.Output[*ProfileVisibility] {
	return pulumix.Output[*ProfileVisibility]{
		OutputState: in.ToProfileVisibilityPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceTokenType string

const (
	ServiceTokenTypeVCToken = ServiceTokenType("VC_TOKEN")
)

func (ServiceTokenType) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenType)(nil)).Elem()
}

func (e ServiceTokenType) ToServiceTokenTypeOutput() ServiceTokenTypeOutput {
	return pulumi.ToOutput(e).(ServiceTokenTypeOutput)
}

func (e ServiceTokenType) ToServiceTokenTypeOutputWithContext(ctx context.Context) ServiceTokenTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceTokenTypeOutput)
}

func (e ServiceTokenType) ToServiceTokenTypePtrOutput() ServiceTokenTypePtrOutput {
	return e.ToServiceTokenTypePtrOutputWithContext(context.Background())
}

func (e ServiceTokenType) ToServiceTokenTypePtrOutputWithContext(ctx context.Context) ServiceTokenTypePtrOutput {
	return ServiceTokenType(e).ToServiceTokenTypeOutputWithContext(ctx).ToServiceTokenTypePtrOutputWithContext(ctx)
}

func (e ServiceTokenType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceTokenType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceTokenType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceTokenType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceTokenTypeOutput struct{ *pulumi.OutputState }

func (ServiceTokenTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTokenType)(nil)).Elem()
}

func (o ServiceTokenTypeOutput) ToServiceTokenTypeOutput() ServiceTokenTypeOutput {
	return o
}

func (o ServiceTokenTypeOutput) ToServiceTokenTypeOutputWithContext(ctx context.Context) ServiceTokenTypeOutput {
	return o
}

func (o ServiceTokenTypeOutput) ToServiceTokenTypePtrOutput() ServiceTokenTypePtrOutput {
	return o.ToServiceTokenTypePtrOutputWithContext(context.Background())
}

func (o ServiceTokenTypeOutput) ToServiceTokenTypePtrOutputWithContext(ctx context.Context) ServiceTokenTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTokenType) *ServiceTokenType {
		return &v
	}).(ServiceTokenTypePtrOutput)
}

func (o ServiceTokenTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTokenType] {
	return pulumix.Output[ServiceTokenType]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTokenTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceTokenTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceTokenType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceTokenTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTokenTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceTokenType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceTokenTypePtrOutput struct{ *pulumi.OutputState }

func (ServiceTokenTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTokenType)(nil)).Elem()
}

func (o ServiceTokenTypePtrOutput) ToServiceTokenTypePtrOutput() ServiceTokenTypePtrOutput {
	return o
}

func (o ServiceTokenTypePtrOutput) ToServiceTokenTypePtrOutputWithContext(ctx context.Context) ServiceTokenTypePtrOutput {
	return o
}

func (o ServiceTokenTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceTokenType] {
	return pulumix.Output[*ServiceTokenType]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTokenTypePtrOutput) Elem() ServiceTokenTypeOutput {
	return o.ApplyT(func(v *ServiceTokenType) ServiceTokenType {
		if v != nil {
			return *v
		}
		var ret ServiceTokenType
		return ret
	}).(ServiceTokenTypeOutput)
}

func (o ServiceTokenTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTokenTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceTokenType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceTokenTypeInput is an input type that accepts ServiceTokenTypeArgs and ServiceTokenTypeOutput values.
// You can construct a concrete instance of `ServiceTokenTypeInput` via:
//
//	ServiceTokenTypeArgs{...}
type ServiceTokenTypeInput interface {
	pulumi.Input

	ToServiceTokenTypeOutput() ServiceTokenTypeOutput
	ToServiceTokenTypeOutputWithContext(context.Context) ServiceTokenTypeOutput
}

var serviceTokenTypePtrType = reflect.TypeOf((**ServiceTokenType)(nil)).Elem()

type ServiceTokenTypePtrInput interface {
	pulumi.Input

	ToServiceTokenTypePtrOutput() ServiceTokenTypePtrOutput
	ToServiceTokenTypePtrOutputWithContext(context.Context) ServiceTokenTypePtrOutput
}

type serviceTokenTypePtr string

func ServiceTokenTypePtr(v string) ServiceTokenTypePtrInput {
	return (*serviceTokenTypePtr)(&v)
}

func (*serviceTokenTypePtr) ElementType() reflect.Type {
	return serviceTokenTypePtrType
}

func (in *serviceTokenTypePtr) ToServiceTokenTypePtrOutput() ServiceTokenTypePtrOutput {
	return pulumi.ToOutput(in).(ServiceTokenTypePtrOutput)
}

func (in *serviceTokenTypePtr) ToServiceTokenTypePtrOutputWithContext(ctx context.Context) ServiceTokenTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceTokenTypePtrOutput)
}

func (in *serviceTokenTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ServiceTokenType] {
	return pulumix.Output[*ServiceTokenType]{
		OutputState: in.ToServiceTokenTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointLinkProtocolTypeInput)(nil)).Elem(), AccessPointLinkProtocolType("UNTAGGED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointLinkProtocolTypePtrInput)(nil)).Elem(), AccessPointLinkProtocolType("UNTAGGED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPeeringTypeInput)(nil)).Elem(), AccessPointPeeringType("PRIVATE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPeeringTypePtrInput)(nil)).Elem(), AccessPointPeeringType("PRIVATE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointTypeInput)(nil)).Elem(), AccessPointType("COLO"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointTypePtrInput)(nil)).Elem(), AccessPointType("COLO"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionTypeInput)(nil)).Elem(), ConnectionType("VG_VC"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionTypePtrInput)(nil)).Elem(), ConnectionType("VG_VC"))
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationsTypeInput)(nil)).Elem(), NotificationsType("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationsTypePtrInput)(nil)).Elem(), NotificationsType("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileAccessPointTypeInput)(nil)).Elem(), ProfileAccessPointType("COLO"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileAccessPointTypePtrInput)(nil)).Elem(), ProfileAccessPointType("COLO"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileStateInput)(nil)).Elem(), ProfileState("ACTIVE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileStatePtrInput)(nil)).Elem(), ProfileState("ACTIVE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTypeInput)(nil)).Elem(), ProfileType("L2_PROFILE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTypePtrInput)(nil)).Elem(), ProfileType("L2_PROFILE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileVisibilityInput)(nil)).Elem(), ProfileVisibility("PUBLIC"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileVisibilityPtrInput)(nil)).Elem(), ProfileVisibility("PUBLIC"))
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenTypeInput)(nil)).Elem(), ServiceTokenType("VC_TOKEN"))
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTokenTypePtrInput)(nil)).Elem(), ServiceTokenType("VC_TOKEN"))
	pulumi.RegisterOutputType(AccessPointLinkProtocolTypeOutput{})
	pulumi.RegisterOutputType(AccessPointLinkProtocolTypePtrOutput{})
	pulumi.RegisterOutputType(AccessPointPeeringTypeOutput{})
	pulumi.RegisterOutputType(AccessPointPeeringTypePtrOutput{})
	pulumi.RegisterOutputType(AccessPointTypeOutput{})
	pulumi.RegisterOutputType(AccessPointTypePtrOutput{})
	pulumi.RegisterOutputType(ConnectionTypeOutput{})
	pulumi.RegisterOutputType(ConnectionTypePtrOutput{})
	pulumi.RegisterOutputType(NotificationsTypeOutput{})
	pulumi.RegisterOutputType(NotificationsTypePtrOutput{})
	pulumi.RegisterOutputType(ProfileAccessPointTypeOutput{})
	pulumi.RegisterOutputType(ProfileAccessPointTypePtrOutput{})
	pulumi.RegisterOutputType(ProfileStateOutput{})
	pulumi.RegisterOutputType(ProfileStatePtrOutput{})
	pulumi.RegisterOutputType(ProfileTypeOutput{})
	pulumi.RegisterOutputType(ProfileTypePtrOutput{})
	pulumi.RegisterOutputType(ProfileVisibilityOutput{})
	pulumi.RegisterOutputType(ProfileVisibilityPtrOutput{})
	pulumi.RegisterOutputType(ServiceTokenTypeOutput{})
	pulumi.RegisterOutputType(ServiceTokenTypePtrOutput{})
}
