// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID
//
// Additional documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
// * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			service_token, err := fabric.LookupServiceToken(ctx, &fabric.LookupServiceTokenArgs{
//				Uuid: "<uuid_of_service_token>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", service_token.Id)
//			ctx.Export("type", service_token.Type)
//			ctx.Export("expirationDateTime", service_token.ExpirationDateTime)
//			ctx.Export("supportedBandwidths", service_token.ServiceTokenConnections[0].SupportedBandwidths)
//			ctx.Export("virtualDeviceType", service_token.ServiceTokenConnections[0].ZSides[0].AccessPointSelectors[0].VirtualDevice.Type)
//			ctx.Export("virtualDeviceUuid", service_token.ServiceTokenConnections[0].ZSides[0].AccessPointSelectors[0].VirtualDevice.Uuid)
//			ctx.Export("interfaceType", service_token.ServiceTokenConnections[0].ZSides[0].AccessPointSelectors[0].Interface.Type)
//			ctx.Export("interfaceUuid", service_token.ServiceTokenConnections[0].ZSides[0].AccessPointSelectors[0].Interface.Id)
//			return nil
//		})
//	}
//
// ```
func LookupServiceToken(ctx *pulumi.Context, args *LookupServiceTokenArgs, opts ...pulumi.InvokeOption) (*LookupServiceTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceTokenResult
	err := ctx.Invoke("equinix:fabric/getServiceToken:getServiceToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceToken.
type LookupServiceTokenArgs struct {
	// Equinix-assigned service token identifier
	Uuid string `pulumi:"uuid"`
}

// A collection of values returned by getServiceToken.
type LookupServiceTokenResult struct {
	// Customer account information that is associated with this service token
	Accounts []GetServiceTokenAccount `pulumi:"accounts"`
	// Captures connection lifecycle change information
	ChangeLogs []GetServiceTokenChangeLog `pulumi:"changeLogs"`
	// Optional Description to the Service Token you will be creating
	Description string `pulumi:"description"`
	// Expiration date and time of the service token; 2020-11-06T07:00:00Z
	ExpirationDateTime string `pulumi:"expirationDateTime"`
	// An absolute URL that is the subject of the link's context.
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Information about token side; ASIDE, ZSIDE
	IssuerSide string `pulumi:"issuerSide"`
	// Name of the Service Token
	Name string `pulumi:"name"`
	// Preferences for notifications on Service Token configuration or status changes
	Notifications []GetServiceTokenNotification `pulumi:"notifications"`
	// Project information
	Projects []GetServiceTokenProject `pulumi:"projects"`
	// Service Token Connection Type Information
	ServiceTokenConnections []GetServiceTokenServiceTokenConnection `pulumi:"serviceTokenConnections"`
	// Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
	State string `pulumi:"state"`
	// Service Token Type; VC*TOKEN,EPL*TOKEN
	Type string `pulumi:"type"`
	// Equinix-assigned service token identifier
	Uuid string `pulumi:"uuid"`
}

func LookupServiceTokenOutput(ctx *pulumi.Context, args LookupServiceTokenOutputArgs, opts ...pulumi.InvokeOption) LookupServiceTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceTokenResultOutput, error) {
			args := v.(LookupServiceTokenArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupServiceTokenResult
			secret, err := ctx.InvokePackageRaw("equinix:fabric/getServiceToken:getServiceToken", args, &rv, "", opts...)
			if err != nil {
				return LookupServiceTokenResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupServiceTokenResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupServiceTokenResultOutput), nil
			}
			return output, nil
		}).(LookupServiceTokenResultOutput)
}

// A collection of arguments for invoking getServiceToken.
type LookupServiceTokenOutputArgs struct {
	// Equinix-assigned service token identifier
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (LookupServiceTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceTokenArgs)(nil)).Elem()
}

// A collection of values returned by getServiceToken.
type LookupServiceTokenResultOutput struct{ *pulumi.OutputState }

func (LookupServiceTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceTokenResult)(nil)).Elem()
}

func (o LookupServiceTokenResultOutput) ToLookupServiceTokenResultOutput() LookupServiceTokenResultOutput {
	return o
}

func (o LookupServiceTokenResultOutput) ToLookupServiceTokenResultOutputWithContext(ctx context.Context) LookupServiceTokenResultOutput {
	return o
}

// Customer account information that is associated with this service token
func (o LookupServiceTokenResultOutput) Accounts() GetServiceTokenAccountArrayOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) []GetServiceTokenAccount { return v.Accounts }).(GetServiceTokenAccountArrayOutput)
}

// Captures connection lifecycle change information
func (o LookupServiceTokenResultOutput) ChangeLogs() GetServiceTokenChangeLogArrayOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) []GetServiceTokenChangeLog { return v.ChangeLogs }).(GetServiceTokenChangeLogArrayOutput)
}

// Optional Description to the Service Token you will be creating
func (o LookupServiceTokenResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Description }).(pulumi.StringOutput)
}

// Expiration date and time of the service token; 2020-11-06T07:00:00Z
func (o LookupServiceTokenResultOutput) ExpirationDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.ExpirationDateTime }).(pulumi.StringOutput)
}

// An absolute URL that is the subject of the link's context.
func (o LookupServiceTokenResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

// Information about token side; ASIDE, ZSIDE
func (o LookupServiceTokenResultOutput) IssuerSide() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.IssuerSide }).(pulumi.StringOutput)
}

// Name of the Service Token
func (o LookupServiceTokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Name }).(pulumi.StringOutput)
}

// Preferences for notifications on Service Token configuration or status changes
func (o LookupServiceTokenResultOutput) Notifications() GetServiceTokenNotificationArrayOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) []GetServiceTokenNotification { return v.Notifications }).(GetServiceTokenNotificationArrayOutput)
}

// Project information
func (o LookupServiceTokenResultOutput) Projects() GetServiceTokenProjectArrayOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) []GetServiceTokenProject { return v.Projects }).(GetServiceTokenProjectArrayOutput)
}

// Service Token Connection Type Information
func (o LookupServiceTokenResultOutput) ServiceTokenConnections() GetServiceTokenServiceTokenConnectionArrayOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) []GetServiceTokenServiceTokenConnection {
		return v.ServiceTokenConnections
	}).(GetServiceTokenServiceTokenConnectionArrayOutput)
}

// Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
func (o LookupServiceTokenResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.State }).(pulumi.StringOutput)
}

// Service Token Type; VC*TOKEN,EPL*TOKEN
func (o LookupServiceTokenResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned service token identifier
func (o LookupServiceTokenResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceTokenResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceTokenResultOutput{})
}
