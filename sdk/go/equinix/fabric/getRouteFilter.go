// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rfPolicy, err := fabric.LookupRouteFilter(ctx, &fabric.LookupRouteFilterArgs{
//				Uuid: "<uuid_of_route_filter",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", rfPolicy.Id)
//			ctx.Export("type", rfPolicy.Type)
//			ctx.Export("state", rfPolicy.State)
//			ctx.Export("notMatchedRulesAction", rfPolicy.NotMatchedRuleAction)
//			ctx.Export("connectionsCount", rfPolicy.ConnectionsCount)
//			ctx.Export("rulesCount", rfPolicy.RulesCount)
//			return nil
//		})
//	}
//
// ```
func LookupRouteFilter(ctx *pulumi.Context, args *LookupRouteFilterArgs, opts ...pulumi.InvokeOption) (*LookupRouteFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteFilterResult
	err := ctx.Invoke("equinix:fabric/getRouteFilter:getRouteFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteFilter.
type LookupRouteFilterArgs struct {
	// Equinix Assigned ID for Route Filter
	Uuid string `pulumi:"uuid"`
}

// A collection of values returned by getRouteFilter.
type LookupRouteFilterResult struct {
	ChangeLogs []GetRouteFilterChangeLog `pulumi:"changeLogs"`
	// An object with the details of the previous change applied on the Route Filter
	Changes []GetRouteFilterChange `pulumi:"changes"`
	// The number of Fabric Connections that this Route Filter is attached to
	ConnectionsCount int `pulumi:"connectionsCount"`
	// Optional description to add to the Route Filter you will be creating
	Description string `pulumi:"description"`
	// Route filter URI
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the Route Filter
	Name string `pulumi:"name"`
	// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
	NotMatchedRuleAction string `pulumi:"notMatchedRuleAction"`
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Projects []GetRouteFilterProject `pulumi:"projects"`
	// The number of Route Filter Rules attached to this Route Filter
	RulesCount int `pulumi:"rulesCount"`
	// State of the Route Filter in its lifecycle
	State string `pulumi:"state"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type string `pulumi:"type"`
	// Equinix Assigned ID for Route Filter
	Uuid string `pulumi:"uuid"`
}

func LookupRouteFilterOutput(ctx *pulumi.Context, args LookupRouteFilterOutputArgs, opts ...pulumi.InvokeOption) LookupRouteFilterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteFilterResultOutput, error) {
			args := v.(LookupRouteFilterArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRouteFilterResult
			secret, err := ctx.InvokePackageRaw("equinix:fabric/getRouteFilter:getRouteFilter", args, &rv, "", opts...)
			if err != nil {
				return LookupRouteFilterResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRouteFilterResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRouteFilterResultOutput), nil
			}
			return output, nil
		}).(LookupRouteFilterResultOutput)
}

// A collection of arguments for invoking getRouteFilter.
type LookupRouteFilterOutputArgs struct {
	// Equinix Assigned ID for Route Filter
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (LookupRouteFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteFilterArgs)(nil)).Elem()
}

// A collection of values returned by getRouteFilter.
type LookupRouteFilterResultOutput struct{ *pulumi.OutputState }

func (LookupRouteFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteFilterResult)(nil)).Elem()
}

func (o LookupRouteFilterResultOutput) ToLookupRouteFilterResultOutput() LookupRouteFilterResultOutput {
	return o
}

func (o LookupRouteFilterResultOutput) ToLookupRouteFilterResultOutputWithContext(ctx context.Context) LookupRouteFilterResultOutput {
	return o
}

func (o LookupRouteFilterResultOutput) ChangeLogs() GetRouteFilterChangeLogArrayOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) []GetRouteFilterChangeLog { return v.ChangeLogs }).(GetRouteFilterChangeLogArrayOutput)
}

// An object with the details of the previous change applied on the Route Filter
func (o LookupRouteFilterResultOutput) Changes() GetRouteFilterChangeArrayOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) []GetRouteFilterChange { return v.Changes }).(GetRouteFilterChangeArrayOutput)
}

// The number of Fabric Connections that this Route Filter is attached to
func (o LookupRouteFilterResultOutput) ConnectionsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) int { return v.ConnectionsCount }).(pulumi.IntOutput)
}

// Optional description to add to the Route Filter you will be creating
func (o LookupRouteFilterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Description }).(pulumi.StringOutput)
}

// Route filter URI
func (o LookupRouteFilterResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRouteFilterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the Route Filter
func (o LookupRouteFilterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
func (o LookupRouteFilterResultOutput) NotMatchedRuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.NotMatchedRuleAction }).(pulumi.StringOutput)
}

// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
func (o LookupRouteFilterResultOutput) Projects() GetRouteFilterProjectArrayOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) []GetRouteFilterProject { return v.Projects }).(GetRouteFilterProjectArrayOutput)
}

// The number of Route Filter Rules attached to this Route Filter
func (o LookupRouteFilterResultOutput) RulesCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) int { return v.RulesCount }).(pulumi.IntOutput)
}

// State of the Route Filter in its lifecycle
func (o LookupRouteFilterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.State }).(pulumi.StringOutput)
}

// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
func (o LookupRouteFilterResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Filter
func (o LookupRouteFilterResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteFilterResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteFilterResultOutput{})
}
