// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules'
// }
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			newStreamAlertRule, err := fabric.NewStreamAlertRule(ctx, "new_stream_alert_rule", &fabric.StreamAlertRuleArgs{
//				StreamId:          pulumi.String("<stream_id>"),
//				Name:              pulumi.String("<name>"),
//				Type:              pulumi.String("METRIC_ALERT"),
//				Description:       pulumi.String("<description>"),
//				Enabled:           pulumi.Bool(true),
//				Operand:           pulumi.String("ABOVE"),
//				WindowSize:        pulumi.String("<window_size>"),
//				WarningThreshold:  pulumi.String("<warning_threshold>"),
//				CriticalThreshold: pulumi.String("<critical_threshold>"),
//				MetricName:        pulumi.String("equinix.fabric.connection.bandwidth_tx.usage"),
//				ResourceSelector: &fabric.StreamAlertRuleResourceSelectorArgs{
//					Includes: pulumi.StringArray{
//						pulumi.String("*/connections/<connection_id>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("streamAlertRuleType", newStreamAlertRule.Type)
//			ctx.Export("streamAlertRuleId", newStreamAlertRule.Uuid)
//			ctx.Export("streamAlertRuleStreamId", newStreamAlertRule.StreamId)
//			ctx.Export("streamAlertRuleState", newStreamAlertRule.State)
//			return nil
//		})
//	}
//
// ```
type StreamAlertRule struct {
	pulumi.CustomResourceState

	// Details of the last change on the stream resource
	ChangeLog StreamAlertRuleChangeLogOutput `pulumi:"changeLog"`
	// Stream alert rule metric critical threshold
	CriticalThreshold pulumi.StringOutput `pulumi:"criticalThreshold"`
	// Customer-provided stream alert rule description
	Description pulumi.StringOutput `pulumi:"description"`
	// Stream alert rule enabled status
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Equinix assigned URI of the stream alert rule
	Href pulumi.StringOutput `pulumi:"href"`
	// Stream alert rule metric name
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// Customer-provided stream alert rule name
	Name pulumi.StringOutput `pulumi:"name"`
	// Stream alert rule metric operand
	Operand pulumi.StringOutput `pulumi:"operand"`
	// Resource selector for the stream alert rule
	ResourceSelector StreamAlertRuleResourceSelectorOutput `pulumi:"resourceSelector"`
	// Value representing provisioning status for the stream alert rule
	State pulumi.StringOutput `pulumi:"state"`
	// The stream UUID that contains this alert rule
	StreamId pulumi.StringOutput              `pulumi:"streamId"`
	Timeouts StreamAlertRuleTimeoutsPtrOutput `pulumi:"timeouts"`
	// Type of the stream alert rule
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix assigned unique identifier for the stream alert rule
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Stream alert rule metric warning threshold
	WarningThreshold pulumi.StringOutput `pulumi:"warningThreshold"`
	// Stream alert rule metric window size
	WindowSize pulumi.StringOutput `pulumi:"windowSize"`
}

// NewStreamAlertRule registers a new resource with the given unique name, arguments, and options.
func NewStreamAlertRule(ctx *pulumi.Context,
	name string, args *StreamAlertRuleArgs, opts ...pulumi.ResourceOption) (*StreamAlertRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CriticalThreshold == nil {
		return nil, errors.New("invalid value for required argument 'CriticalThreshold'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.Operand == nil {
		return nil, errors.New("invalid value for required argument 'Operand'")
	}
	if args.StreamId == nil {
		return nil, errors.New("invalid value for required argument 'StreamId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.WarningThreshold == nil {
		return nil, errors.New("invalid value for required argument 'WarningThreshold'")
	}
	if args.WindowSize == nil {
		return nil, errors.New("invalid value for required argument 'WindowSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamAlertRule
	err := ctx.RegisterResource("equinix:fabric/streamAlertRule:StreamAlertRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamAlertRule gets an existing StreamAlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamAlertRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamAlertRuleState, opts ...pulumi.ResourceOption) (*StreamAlertRule, error) {
	var resource StreamAlertRule
	err := ctx.ReadResource("equinix:fabric/streamAlertRule:StreamAlertRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamAlertRule resources.
type streamAlertRuleState struct {
	// Details of the last change on the stream resource
	ChangeLog *StreamAlertRuleChangeLog `pulumi:"changeLog"`
	// Stream alert rule metric critical threshold
	CriticalThreshold *string `pulumi:"criticalThreshold"`
	// Customer-provided stream alert rule description
	Description *string `pulumi:"description"`
	// Stream alert rule enabled status
	Enabled *bool `pulumi:"enabled"`
	// Equinix assigned URI of the stream alert rule
	Href *string `pulumi:"href"`
	// Stream alert rule metric name
	MetricName *string `pulumi:"metricName"`
	// Customer-provided stream alert rule name
	Name *string `pulumi:"name"`
	// Stream alert rule metric operand
	Operand *string `pulumi:"operand"`
	// Resource selector for the stream alert rule
	ResourceSelector *StreamAlertRuleResourceSelector `pulumi:"resourceSelector"`
	// Value representing provisioning status for the stream alert rule
	State *string `pulumi:"state"`
	// The stream UUID that contains this alert rule
	StreamId *string                  `pulumi:"streamId"`
	Timeouts *StreamAlertRuleTimeouts `pulumi:"timeouts"`
	// Type of the stream alert rule
	Type *string `pulumi:"type"`
	// Equinix assigned unique identifier for the stream alert rule
	Uuid *string `pulumi:"uuid"`
	// Stream alert rule metric warning threshold
	WarningThreshold *string `pulumi:"warningThreshold"`
	// Stream alert rule metric window size
	WindowSize *string `pulumi:"windowSize"`
}

type StreamAlertRuleState struct {
	// Details of the last change on the stream resource
	ChangeLog StreamAlertRuleChangeLogPtrInput
	// Stream alert rule metric critical threshold
	CriticalThreshold pulumi.StringPtrInput
	// Customer-provided stream alert rule description
	Description pulumi.StringPtrInput
	// Stream alert rule enabled status
	Enabled pulumi.BoolPtrInput
	// Equinix assigned URI of the stream alert rule
	Href pulumi.StringPtrInput
	// Stream alert rule metric name
	MetricName pulumi.StringPtrInput
	// Customer-provided stream alert rule name
	Name pulumi.StringPtrInput
	// Stream alert rule metric operand
	Operand pulumi.StringPtrInput
	// Resource selector for the stream alert rule
	ResourceSelector StreamAlertRuleResourceSelectorPtrInput
	// Value representing provisioning status for the stream alert rule
	State pulumi.StringPtrInput
	// The stream UUID that contains this alert rule
	StreamId pulumi.StringPtrInput
	Timeouts StreamAlertRuleTimeoutsPtrInput
	// Type of the stream alert rule
	Type pulumi.StringPtrInput
	// Equinix assigned unique identifier for the stream alert rule
	Uuid pulumi.StringPtrInput
	// Stream alert rule metric warning threshold
	WarningThreshold pulumi.StringPtrInput
	// Stream alert rule metric window size
	WindowSize pulumi.StringPtrInput
}

func (StreamAlertRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAlertRuleState)(nil)).Elem()
}

type streamAlertRuleArgs struct {
	// Stream alert rule metric critical threshold
	CriticalThreshold string `pulumi:"criticalThreshold"`
	// Customer-provided stream alert rule description
	Description string `pulumi:"description"`
	// Stream alert rule enabled status
	Enabled *bool `pulumi:"enabled"`
	// Stream alert rule metric name
	MetricName string `pulumi:"metricName"`
	// Customer-provided stream alert rule name
	Name *string `pulumi:"name"`
	// Stream alert rule metric operand
	Operand string `pulumi:"operand"`
	// Resource selector for the stream alert rule
	ResourceSelector *StreamAlertRuleResourceSelector `pulumi:"resourceSelector"`
	// The stream UUID that contains this alert rule
	StreamId string                   `pulumi:"streamId"`
	Timeouts *StreamAlertRuleTimeouts `pulumi:"timeouts"`
	// Type of the stream alert rule
	Type string `pulumi:"type"`
	// Stream alert rule metric warning threshold
	WarningThreshold string `pulumi:"warningThreshold"`
	// Stream alert rule metric window size
	WindowSize string `pulumi:"windowSize"`
}

// The set of arguments for constructing a StreamAlertRule resource.
type StreamAlertRuleArgs struct {
	// Stream alert rule metric critical threshold
	CriticalThreshold pulumi.StringInput
	// Customer-provided stream alert rule description
	Description pulumi.StringInput
	// Stream alert rule enabled status
	Enabled pulumi.BoolPtrInput
	// Stream alert rule metric name
	MetricName pulumi.StringInput
	// Customer-provided stream alert rule name
	Name pulumi.StringPtrInput
	// Stream alert rule metric operand
	Operand pulumi.StringInput
	// Resource selector for the stream alert rule
	ResourceSelector StreamAlertRuleResourceSelectorPtrInput
	// The stream UUID that contains this alert rule
	StreamId pulumi.StringInput
	Timeouts StreamAlertRuleTimeoutsPtrInput
	// Type of the stream alert rule
	Type pulumi.StringInput
	// Stream alert rule metric warning threshold
	WarningThreshold pulumi.StringInput
	// Stream alert rule metric window size
	WindowSize pulumi.StringInput
}

func (StreamAlertRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAlertRuleArgs)(nil)).Elem()
}

type StreamAlertRuleInput interface {
	pulumi.Input

	ToStreamAlertRuleOutput() StreamAlertRuleOutput
	ToStreamAlertRuleOutputWithContext(ctx context.Context) StreamAlertRuleOutput
}

func (*StreamAlertRule) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAlertRule)(nil)).Elem()
}

func (i *StreamAlertRule) ToStreamAlertRuleOutput() StreamAlertRuleOutput {
	return i.ToStreamAlertRuleOutputWithContext(context.Background())
}

func (i *StreamAlertRule) ToStreamAlertRuleOutputWithContext(ctx context.Context) StreamAlertRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAlertRuleOutput)
}

// StreamAlertRuleArrayInput is an input type that accepts StreamAlertRuleArray and StreamAlertRuleArrayOutput values.
// You can construct a concrete instance of `StreamAlertRuleArrayInput` via:
//
//	StreamAlertRuleArray{ StreamAlertRuleArgs{...} }
type StreamAlertRuleArrayInput interface {
	pulumi.Input

	ToStreamAlertRuleArrayOutput() StreamAlertRuleArrayOutput
	ToStreamAlertRuleArrayOutputWithContext(context.Context) StreamAlertRuleArrayOutput
}

type StreamAlertRuleArray []StreamAlertRuleInput

func (StreamAlertRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAlertRule)(nil)).Elem()
}

func (i StreamAlertRuleArray) ToStreamAlertRuleArrayOutput() StreamAlertRuleArrayOutput {
	return i.ToStreamAlertRuleArrayOutputWithContext(context.Background())
}

func (i StreamAlertRuleArray) ToStreamAlertRuleArrayOutputWithContext(ctx context.Context) StreamAlertRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAlertRuleArrayOutput)
}

// StreamAlertRuleMapInput is an input type that accepts StreamAlertRuleMap and StreamAlertRuleMapOutput values.
// You can construct a concrete instance of `StreamAlertRuleMapInput` via:
//
//	StreamAlertRuleMap{ "key": StreamAlertRuleArgs{...} }
type StreamAlertRuleMapInput interface {
	pulumi.Input

	ToStreamAlertRuleMapOutput() StreamAlertRuleMapOutput
	ToStreamAlertRuleMapOutputWithContext(context.Context) StreamAlertRuleMapOutput
}

type StreamAlertRuleMap map[string]StreamAlertRuleInput

func (StreamAlertRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAlertRule)(nil)).Elem()
}

func (i StreamAlertRuleMap) ToStreamAlertRuleMapOutput() StreamAlertRuleMapOutput {
	return i.ToStreamAlertRuleMapOutputWithContext(context.Background())
}

func (i StreamAlertRuleMap) ToStreamAlertRuleMapOutputWithContext(ctx context.Context) StreamAlertRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAlertRuleMapOutput)
}

type StreamAlertRuleOutput struct{ *pulumi.OutputState }

func (StreamAlertRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAlertRule)(nil)).Elem()
}

func (o StreamAlertRuleOutput) ToStreamAlertRuleOutput() StreamAlertRuleOutput {
	return o
}

func (o StreamAlertRuleOutput) ToStreamAlertRuleOutputWithContext(ctx context.Context) StreamAlertRuleOutput {
	return o
}

// Details of the last change on the stream resource
func (o StreamAlertRuleOutput) ChangeLog() StreamAlertRuleChangeLogOutput {
	return o.ApplyT(func(v *StreamAlertRule) StreamAlertRuleChangeLogOutput { return v.ChangeLog }).(StreamAlertRuleChangeLogOutput)
}

// Stream alert rule metric critical threshold
func (o StreamAlertRuleOutput) CriticalThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.CriticalThreshold }).(pulumi.StringOutput)
}

// Customer-provided stream alert rule description
func (o StreamAlertRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Stream alert rule enabled status
func (o StreamAlertRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Equinix assigned URI of the stream alert rule
func (o StreamAlertRuleOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Stream alert rule metric name
func (o StreamAlertRuleOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// Customer-provided stream alert rule name
func (o StreamAlertRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Stream alert rule metric operand
func (o StreamAlertRuleOutput) Operand() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Operand }).(pulumi.StringOutput)
}

// Resource selector for the stream alert rule
func (o StreamAlertRuleOutput) ResourceSelector() StreamAlertRuleResourceSelectorOutput {
	return o.ApplyT(func(v *StreamAlertRule) StreamAlertRuleResourceSelectorOutput { return v.ResourceSelector }).(StreamAlertRuleResourceSelectorOutput)
}

// Value representing provisioning status for the stream alert rule
func (o StreamAlertRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The stream UUID that contains this alert rule
func (o StreamAlertRuleOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o StreamAlertRuleOutput) Timeouts() StreamAlertRuleTimeoutsPtrOutput {
	return o.ApplyT(func(v *StreamAlertRule) StreamAlertRuleTimeoutsPtrOutput { return v.Timeouts }).(StreamAlertRuleTimeoutsPtrOutput)
}

// Type of the stream alert rule
func (o StreamAlertRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix assigned unique identifier for the stream alert rule
func (o StreamAlertRuleOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Stream alert rule metric warning threshold
func (o StreamAlertRuleOutput) WarningThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.WarningThreshold }).(pulumi.StringOutput)
}

// Stream alert rule metric window size
func (o StreamAlertRuleOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAlertRule) pulumi.StringOutput { return v.WindowSize }).(pulumi.StringOutput)
}

type StreamAlertRuleArrayOutput struct{ *pulumi.OutputState }

func (StreamAlertRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAlertRule)(nil)).Elem()
}

func (o StreamAlertRuleArrayOutput) ToStreamAlertRuleArrayOutput() StreamAlertRuleArrayOutput {
	return o
}

func (o StreamAlertRuleArrayOutput) ToStreamAlertRuleArrayOutputWithContext(ctx context.Context) StreamAlertRuleArrayOutput {
	return o
}

func (o StreamAlertRuleArrayOutput) Index(i pulumi.IntInput) StreamAlertRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamAlertRule {
		return vs[0].([]*StreamAlertRule)[vs[1].(int)]
	}).(StreamAlertRuleOutput)
}

type StreamAlertRuleMapOutput struct{ *pulumi.OutputState }

func (StreamAlertRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAlertRule)(nil)).Elem()
}

func (o StreamAlertRuleMapOutput) ToStreamAlertRuleMapOutput() StreamAlertRuleMapOutput {
	return o
}

func (o StreamAlertRuleMapOutput) ToStreamAlertRuleMapOutputWithContext(ctx context.Context) StreamAlertRuleMapOutput {
	return o
}

func (o StreamAlertRuleMapOutput) MapIndex(k pulumi.StringInput) StreamAlertRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamAlertRule {
		return vs[0].(map[string]*StreamAlertRule)[vs[1].(string)]
	}).(StreamAlertRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAlertRuleInput)(nil)).Elem(), &StreamAlertRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAlertRuleArrayInput)(nil)).Elem(), StreamAlertRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAlertRuleMapInput)(nil)).Elem(), StreamAlertRuleMap{})
	pulumi.RegisterOutputType(StreamAlertRuleOutput{})
	pulumi.RegisterOutputType(StreamAlertRuleArrayOutput{})
	pulumi.RegisterOutputType(StreamAlertRuleMapOutput{})
}
