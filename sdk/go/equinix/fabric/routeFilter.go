// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Policy
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
type RouteFilter struct {
	pulumi.CustomResourceState

	ChangeLogs RouteFilterChangeLogArrayOutput `pulumi:"changeLogs"`
	// An object with the details of the previous change applied on the Route Filter
	Changes RouteFilterChangeArrayOutput `pulumi:"changes"`
	// The number of Fabric Connections that this Route Filter is attached to
	ConnectionsCount pulumi.IntOutput `pulumi:"connectionsCount"`
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringOutput `pulumi:"description"`
	// Route filter URI
	Href pulumi.StringOutput `pulumi:"href"`
	// Name of the Route Filter
	Name pulumi.StringOutput `pulumi:"name"`
	// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
	NotMatchedRuleAction pulumi.StringOutput `pulumi:"notMatchedRuleAction"`
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Project RouteFilterProjectOutput `pulumi:"project"`
	// The number of Route Filter Rules attached to this Route Filter
	RulesCount pulumi.IntOutput `pulumi:"rulesCount"`
	// State of the Route Filter in its lifecycle
	State pulumi.StringOutput `pulumi:"state"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix Assigned ID for Route Filter
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewRouteFilter registers a new resource with the given unique name, arguments, and options.
func NewRouteFilter(ctx *pulumi.Context,
	name string, args *RouteFilterArgs, opts ...pulumi.ResourceOption) (*RouteFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteFilter
	err := ctx.RegisterResource("equinix:fabric/routeFilter:RouteFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteFilter gets an existing RouteFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteFilterState, opts ...pulumi.ResourceOption) (*RouteFilter, error) {
	var resource RouteFilter
	err := ctx.ReadResource("equinix:fabric/routeFilter:RouteFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteFilter resources.
type routeFilterState struct {
	ChangeLogs []RouteFilterChangeLog `pulumi:"changeLogs"`
	// An object with the details of the previous change applied on the Route Filter
	Changes []RouteFilterChange `pulumi:"changes"`
	// The number of Fabric Connections that this Route Filter is attached to
	ConnectionsCount *int `pulumi:"connectionsCount"`
	// Optional description to add to the Route Filter you will be creating
	Description *string `pulumi:"description"`
	// Route filter URI
	Href *string `pulumi:"href"`
	// Name of the Route Filter
	Name *string `pulumi:"name"`
	// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
	NotMatchedRuleAction *string `pulumi:"notMatchedRuleAction"`
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Project *RouteFilterProject `pulumi:"project"`
	// The number of Route Filter Rules attached to this Route Filter
	RulesCount *int `pulumi:"rulesCount"`
	// State of the Route Filter in its lifecycle
	State *string `pulumi:"state"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type *string `pulumi:"type"`
	// Equinix Assigned ID for Route Filter
	Uuid *string `pulumi:"uuid"`
}

type RouteFilterState struct {
	ChangeLogs RouteFilterChangeLogArrayInput
	// An object with the details of the previous change applied on the Route Filter
	Changes RouteFilterChangeArrayInput
	// The number of Fabric Connections that this Route Filter is attached to
	ConnectionsCount pulumi.IntPtrInput
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringPtrInput
	// Route filter URI
	Href pulumi.StringPtrInput
	// Name of the Route Filter
	Name pulumi.StringPtrInput
	// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
	NotMatchedRuleAction pulumi.StringPtrInput
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Project RouteFilterProjectPtrInput
	// The number of Route Filter Rules attached to this Route Filter
	RulesCount pulumi.IntPtrInput
	// State of the Route Filter in its lifecycle
	State pulumi.StringPtrInput
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type pulumi.StringPtrInput
	// Equinix Assigned ID for Route Filter
	Uuid pulumi.StringPtrInput
}

func (RouteFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterState)(nil)).Elem()
}

type routeFilterArgs struct {
	// Optional description to add to the Route Filter you will be creating
	Description *string `pulumi:"description"`
	// Name of the Route Filter
	Name *string `pulumi:"name"`
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Project RouteFilterProject `pulumi:"project"`
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RouteFilter resource.
type RouteFilterArgs struct {
	// Optional description to add to the Route Filter you will be creating
	Description pulumi.StringPtrInput
	// Name of the Route Filter
	Name pulumi.StringPtrInput
	// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
	Project RouteFilterProjectInput
	// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
	Type pulumi.StringInput
}

func (RouteFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterArgs)(nil)).Elem()
}

type RouteFilterInput interface {
	pulumi.Input

	ToRouteFilterOutput() RouteFilterOutput
	ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput
}

func (*RouteFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilter)(nil)).Elem()
}

func (i *RouteFilter) ToRouteFilterOutput() RouteFilterOutput {
	return i.ToRouteFilterOutputWithContext(context.Background())
}

func (i *RouteFilter) ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterOutput)
}

// RouteFilterArrayInput is an input type that accepts RouteFilterArray and RouteFilterArrayOutput values.
// You can construct a concrete instance of `RouteFilterArrayInput` via:
//
//	RouteFilterArray{ RouteFilterArgs{...} }
type RouteFilterArrayInput interface {
	pulumi.Input

	ToRouteFilterArrayOutput() RouteFilterArrayOutput
	ToRouteFilterArrayOutputWithContext(context.Context) RouteFilterArrayOutput
}

type RouteFilterArray []RouteFilterInput

func (RouteFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteFilter)(nil)).Elem()
}

func (i RouteFilterArray) ToRouteFilterArrayOutput() RouteFilterArrayOutput {
	return i.ToRouteFilterArrayOutputWithContext(context.Background())
}

func (i RouteFilterArray) ToRouteFilterArrayOutputWithContext(ctx context.Context) RouteFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterArrayOutput)
}

// RouteFilterMapInput is an input type that accepts RouteFilterMap and RouteFilterMapOutput values.
// You can construct a concrete instance of `RouteFilterMapInput` via:
//
//	RouteFilterMap{ "key": RouteFilterArgs{...} }
type RouteFilterMapInput interface {
	pulumi.Input

	ToRouteFilterMapOutput() RouteFilterMapOutput
	ToRouteFilterMapOutputWithContext(context.Context) RouteFilterMapOutput
}

type RouteFilterMap map[string]RouteFilterInput

func (RouteFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteFilter)(nil)).Elem()
}

func (i RouteFilterMap) ToRouteFilterMapOutput() RouteFilterMapOutput {
	return i.ToRouteFilterMapOutputWithContext(context.Background())
}

func (i RouteFilterMap) ToRouteFilterMapOutputWithContext(ctx context.Context) RouteFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterMapOutput)
}

type RouteFilterOutput struct{ *pulumi.OutputState }

func (RouteFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilter)(nil)).Elem()
}

func (o RouteFilterOutput) ToRouteFilterOutput() RouteFilterOutput {
	return o
}

func (o RouteFilterOutput) ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput {
	return o
}

func (o RouteFilterOutput) ChangeLogs() RouteFilterChangeLogArrayOutput {
	return o.ApplyT(func(v *RouteFilter) RouteFilterChangeLogArrayOutput { return v.ChangeLogs }).(RouteFilterChangeLogArrayOutput)
}

// An object with the details of the previous change applied on the Route Filter
func (o RouteFilterOutput) Changes() RouteFilterChangeArrayOutput {
	return o.ApplyT(func(v *RouteFilter) RouteFilterChangeArrayOutput { return v.Changes }).(RouteFilterChangeArrayOutput)
}

// The number of Fabric Connections that this Route Filter is attached to
func (o RouteFilterOutput) ConnectionsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.IntOutput { return v.ConnectionsCount }).(pulumi.IntOutput)
}

// Optional description to add to the Route Filter you will be creating
func (o RouteFilterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Route filter URI
func (o RouteFilterOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Name of the Route Filter
func (o RouteFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The action that will be taken on ip ranges that don't match the rules present within the Route Filter
func (o RouteFilterOutput) NotMatchedRuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.NotMatchedRuleAction }).(pulumi.StringOutput)
}

// The Project object that contains projectId and href that is related to the Fabric Project containing connections the Route Filter can be attached to
func (o RouteFilterOutput) Project() RouteFilterProjectOutput {
	return o.ApplyT(func(v *RouteFilter) RouteFilterProjectOutput { return v.Project }).(RouteFilterProjectOutput)
}

// The number of Route Filter Rules attached to this Route Filter
func (o RouteFilterOutput) RulesCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.IntOutput { return v.RulesCount }).(pulumi.IntOutput)
}

// State of the Route Filter in its lifecycle
func (o RouteFilterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
func (o RouteFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Filter
func (o RouteFilterOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type RouteFilterArrayOutput struct{ *pulumi.OutputState }

func (RouteFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteFilter)(nil)).Elem()
}

func (o RouteFilterArrayOutput) ToRouteFilterArrayOutput() RouteFilterArrayOutput {
	return o
}

func (o RouteFilterArrayOutput) ToRouteFilterArrayOutputWithContext(ctx context.Context) RouteFilterArrayOutput {
	return o
}

func (o RouteFilterArrayOutput) Index(i pulumi.IntInput) RouteFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteFilter {
		return vs[0].([]*RouteFilter)[vs[1].(int)]
	}).(RouteFilterOutput)
}

type RouteFilterMapOutput struct{ *pulumi.OutputState }

func (RouteFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteFilter)(nil)).Elem()
}

func (o RouteFilterMapOutput) ToRouteFilterMapOutput() RouteFilterMapOutput {
	return o
}

func (o RouteFilterMapOutput) ToRouteFilterMapOutputWithContext(ctx context.Context) RouteFilterMapOutput {
	return o
}

func (o RouteFilterMapOutput) MapIndex(k pulumi.StringInput) RouteFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteFilter {
		return vs[0].(map[string]*RouteFilter)[vs[1].(string)]
	}).(RouteFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterInput)(nil)).Elem(), &RouteFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterArrayInput)(nil)).Elem(), RouteFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteFilterMapInput)(nil)).Elem(), RouteFilterMap{})
	pulumi.RegisterOutputType(RouteFilterOutput{})
	pulumi.RegisterOutputType(RouteFilterArrayOutput{})
	pulumi.RegisterOutputType(RouteFilterMapOutput{})
}
