// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Connection struct {
	pulumi.CustomResourceState

	// Requester or Customer side connection configuration object of the multi-segment connection
	ASides ConnectionASideArrayOutput `pulumi:"aSides"`
	// Customer account information that is associated with this connection
	Accounts ConnectionAccountArrayOutput `pulumi:"accounts"`
	// Connection additional information
	AdditionalInfos ConnectionAdditionalInfoArrayOutput `pulumi:"additionalInfos"`
	// Connection bandwidth in Mbps
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// Captures connection lifecycle change information
	ChangeLogs ConnectionChangeLogArrayOutput `pulumi:"changeLogs"`
	// Connection directionality from the requester point of view
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Connection URI information
	Href pulumi.StringOutput `pulumi:"href"`
	// Connection property derived from access point locations
	IsRemote pulumi.BoolOutput `pulumi:"isRemote"`
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name pulumi.StringOutput `pulumi:"name"`
	// Preferences for notifications on connection configuration or status changes
	Notifications ConnectionNotificationArrayOutput `pulumi:"notifications"`
	// Connection type-specific operational data
	Operations ConnectionOperationArrayOutput `pulumi:"operations"`
	// Order related to this connection information
	Orders ConnectionOrderArrayOutput `pulumi:"orders"`
	// Project information
	Projects ConnectionProjectArrayOutput `pulumi:"projects"`
	// Redundancy Information
	Redundancies ConnectionRedundancyArrayOutput `pulumi:"redundancies"`
	// Connection overall state
	State pulumi.StringOutput `pulumi:"state"`
	// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
	Type pulumi.StringOutput `pulumi:"type"`
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSides ConnectionZSideArrayOutput `pulumi:"zSides"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ASides == nil {
		return nil, errors.New("invalid value for required argument 'ASides'")
	}
	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZSides == nil {
		return nil, errors.New("invalid value for required argument 'ZSides'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("equinix:fabric/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("equinix:fabric/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// Requester or Customer side connection configuration object of the multi-segment connection
	ASides []ConnectionASide `pulumi:"aSides"`
	// Customer account information that is associated with this connection
	Accounts []ConnectionAccount `pulumi:"accounts"`
	// Connection additional information
	AdditionalInfos []ConnectionAdditionalInfo `pulumi:"additionalInfos"`
	// Connection bandwidth in Mbps
	Bandwidth *int `pulumi:"bandwidth"`
	// Captures connection lifecycle change information
	ChangeLogs []ConnectionChangeLog `pulumi:"changeLogs"`
	// Connection directionality from the requester point of view
	Direction *string `pulumi:"direction"`
	// Connection URI information
	Href *string `pulumi:"href"`
	// Connection property derived from access point locations
	IsRemote *bool `pulumi:"isRemote"`
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name *string `pulumi:"name"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []ConnectionNotification `pulumi:"notifications"`
	// Connection type-specific operational data
	Operations []ConnectionOperation `pulumi:"operations"`
	// Order related to this connection information
	Orders []ConnectionOrder `pulumi:"orders"`
	// Project information
	Projects []ConnectionProject `pulumi:"projects"`
	// Redundancy Information
	Redundancies []ConnectionRedundancy `pulumi:"redundancies"`
	// Connection overall state
	State *string `pulumi:"state"`
	// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
	Type *string `pulumi:"type"`
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSides []ConnectionZSide `pulumi:"zSides"`
}

type ConnectionState struct {
	// Requester or Customer side connection configuration object of the multi-segment connection
	ASides ConnectionASideArrayInput
	// Customer account information that is associated with this connection
	Accounts ConnectionAccountArrayInput
	// Connection additional information
	AdditionalInfos ConnectionAdditionalInfoArrayInput
	// Connection bandwidth in Mbps
	Bandwidth pulumi.IntPtrInput
	// Captures connection lifecycle change information
	ChangeLogs ConnectionChangeLogArrayInput
	// Connection directionality from the requester point of view
	Direction pulumi.StringPtrInput
	// Connection URI information
	Href pulumi.StringPtrInput
	// Connection property derived from access point locations
	IsRemote pulumi.BoolPtrInput
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name pulumi.StringPtrInput
	// Preferences for notifications on connection configuration or status changes
	Notifications ConnectionNotificationArrayInput
	// Connection type-specific operational data
	Operations ConnectionOperationArrayInput
	// Order related to this connection information
	Orders ConnectionOrderArrayInput
	// Project information
	Projects ConnectionProjectArrayInput
	// Redundancy Information
	Redundancies ConnectionRedundancyArrayInput
	// Connection overall state
	State pulumi.StringPtrInput
	// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
	Type pulumi.StringPtrInput
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSides ConnectionZSideArrayInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Requester or Customer side connection configuration object of the multi-segment connection
	ASides []ConnectionASide `pulumi:"aSides"`
	// Connection additional information
	AdditionalInfos []ConnectionAdditionalInfo `pulumi:"additionalInfos"`
	// Connection bandwidth in Mbps
	Bandwidth int `pulumi:"bandwidth"`
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name *string `pulumi:"name"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []ConnectionNotification `pulumi:"notifications"`
	// Order related to this connection information
	Orders []ConnectionOrder `pulumi:"orders"`
	// Project information
	Projects []ConnectionProject `pulumi:"projects"`
	// Redundancy Information
	Redundancies []ConnectionRedundancy `pulumi:"redundancies"`
	// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
	Type string `pulumi:"type"`
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSides []ConnectionZSide `pulumi:"zSides"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Requester or Customer side connection configuration object of the multi-segment connection
	ASides ConnectionASideArrayInput
	// Connection additional information
	AdditionalInfos ConnectionAdditionalInfoArrayInput
	// Connection bandwidth in Mbps
	Bandwidth pulumi.IntInput
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name pulumi.StringPtrInput
	// Preferences for notifications on connection configuration or status changes
	Notifications ConnectionNotificationArrayInput
	// Order related to this connection information
	Orders ConnectionOrderArrayInput
	// Project information
	Projects ConnectionProjectArrayInput
	// Redundancy Information
	Redundancies ConnectionRedundancyArrayInput
	// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
	Type pulumi.StringInput
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSides ConnectionZSideArrayInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// Requester or Customer side connection configuration object of the multi-segment connection
func (o ConnectionOutput) ASides() ConnectionASideArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionASideArrayOutput { return v.ASides }).(ConnectionASideArrayOutput)
}

// Customer account information that is associated with this connection
func (o ConnectionOutput) Accounts() ConnectionAccountArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionAccountArrayOutput { return v.Accounts }).(ConnectionAccountArrayOutput)
}

// Connection additional information
func (o ConnectionOutput) AdditionalInfos() ConnectionAdditionalInfoArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionAdditionalInfoArrayOutput { return v.AdditionalInfos }).(ConnectionAdditionalInfoArrayOutput)
}

// Connection bandwidth in Mbps
func (o ConnectionOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// Captures connection lifecycle change information
func (o ConnectionOutput) ChangeLogs() ConnectionChangeLogArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionChangeLogArrayOutput { return v.ChangeLogs }).(ConnectionChangeLogArrayOutput)
}

// Connection directionality from the requester point of view
func (o ConnectionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Connection URI information
func (o ConnectionOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Connection property derived from access point locations
func (o ConnectionOutput) IsRemote() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.IsRemote }).(pulumi.BoolOutput)
}

// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Preferences for notifications on connection configuration or status changes
func (o ConnectionOutput) Notifications() ConnectionNotificationArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionNotificationArrayOutput { return v.Notifications }).(ConnectionNotificationArrayOutput)
}

// Connection type-specific operational data
func (o ConnectionOutput) Operations() ConnectionOperationArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionOperationArrayOutput { return v.Operations }).(ConnectionOperationArrayOutput)
}

// Order related to this connection information
func (o ConnectionOutput) Orders() ConnectionOrderArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionOrderArrayOutput { return v.Orders }).(ConnectionOrderArrayOutput)
}

// Project information
func (o ConnectionOutput) Projects() ConnectionProjectArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionProjectArrayOutput { return v.Projects }).(ConnectionProjectArrayOutput)
}

// Redundancy Information
func (o ConnectionOutput) Redundancies() ConnectionRedundancyArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionRedundancyArrayOutput { return v.Redundancies }).(ConnectionRedundancyArrayOutput)
}

// Connection overall state
func (o ConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
func (o ConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Destination or Provider side connection configuration object of the multi-segment connection
func (o ConnectionOutput) ZSides() ConnectionZSideArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionZSideArrayOutput { return v.ZSides }).(ConnectionZSideArrayOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
