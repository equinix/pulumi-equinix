// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dataStream, err := fabric.LookupStream(ctx, &fabric.LookupStreamArgs{
//				StreamId: "<uuid_of_stream>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("streamState", dataStream.State)
//			return nil
//		})
//	}
//
// ```
func LookupStream(ctx *pulumi.Context, args *LookupStreamArgs, opts ...pulumi.InvokeOption) (*LookupStreamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamResult
	err := ctx.Invoke("equinix:fabric/getStream:getStream", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStream.
type LookupStreamArgs struct {
	// The uuid of the stream this data source should retrieve
	StreamId string `pulumi:"streamId"`
}

// A collection of values returned by getStream.
type LookupStreamResult struct {
	// Count of the streaming assets attached to the stream resource
	AssetsCount float64 `pulumi:"assetsCount"`
	// Details of the last change on the stream resource
	ChangeLog GetStreamChangeLog `pulumi:"changeLog"`
	// Customer-provided description of the stream resource
	Description string `pulumi:"description"`
	// Equinix auto generated URI to the stream resource in Equinix Portal
	Href string `pulumi:"href"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// Customer-provided name of the stream resource
	Name string `pulumi:"name"`
	// Equinix Project attribute object
	Project GetStreamProject `pulumi:"project"`
	// Value representing provisioning status for the stream resource
	State string `pulumi:"state"`
	// The uuid of the stream this data source should retrieve
	StreamId string `pulumi:"streamId"`
	// Count of the client subscriptions on the stream resource
	StreamSubscriptionsCount float64 `pulumi:"streamSubscriptionsCount"`
	// Equinix defined Streaming Type
	Type string `pulumi:"type"`
	// Equinix-assigned unique id for the stream resource
	Uuid string `pulumi:"uuid"`
}

func LookupStreamOutput(ctx *pulumi.Context, args LookupStreamOutputArgs, opts ...pulumi.InvokeOption) LookupStreamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStreamResultOutput, error) {
			args := v.(LookupStreamArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupStreamResult
			secret, err := ctx.InvokePackageRaw("equinix:fabric/getStream:getStream", args, &rv, "", opts...)
			if err != nil {
				return LookupStreamResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupStreamResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupStreamResultOutput), nil
			}
			return output, nil
		}).(LookupStreamResultOutput)
}

// A collection of arguments for invoking getStream.
type LookupStreamOutputArgs struct {
	// The uuid of the stream this data source should retrieve
	StreamId pulumi.StringInput `pulumi:"streamId"`
}

func (LookupStreamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamArgs)(nil)).Elem()
}

// A collection of values returned by getStream.
type LookupStreamResultOutput struct{ *pulumi.OutputState }

func (LookupStreamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamResult)(nil)).Elem()
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutput() LookupStreamResultOutput {
	return o
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutputWithContext(ctx context.Context) LookupStreamResultOutput {
	return o
}

// Count of the streaming assets attached to the stream resource
func (o LookupStreamResultOutput) AssetsCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamResult) float64 { return v.AssetsCount }).(pulumi.Float64Output)
}

// Details of the last change on the stream resource
func (o LookupStreamResultOutput) ChangeLog() GetStreamChangeLogOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamChangeLog { return v.ChangeLog }).(GetStreamChangeLogOutput)
}

// Customer-provided description of the stream resource
func (o LookupStreamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Description }).(pulumi.StringOutput)
}

// Equinix auto generated URI to the stream resource in Equinix Portal
func (o LookupStreamResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Href }).(pulumi.StringOutput)
}

// The unique identifier of the resource
func (o LookupStreamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Id }).(pulumi.StringOutput)
}

// Customer-provided name of the stream resource
func (o LookupStreamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Name }).(pulumi.StringOutput)
}

// Equinix Project attribute object
func (o LookupStreamResultOutput) Project() GetStreamProjectOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamProject { return v.Project }).(GetStreamProjectOutput)
}

// Value representing provisioning status for the stream resource
func (o LookupStreamResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.State }).(pulumi.StringOutput)
}

// The uuid of the stream this data source should retrieve
func (o LookupStreamResultOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.StreamId }).(pulumi.StringOutput)
}

// Count of the client subscriptions on the stream resource
func (o LookupStreamResultOutput) StreamSubscriptionsCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamResult) float64 { return v.StreamSubscriptionsCount }).(pulumi.Float64Output)
}

// Equinix defined Streaming Type
func (o LookupStreamResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned unique id for the stream resource
func (o LookupStreamResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamResultOutput{})
}
