// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID
//
// Additional documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-connections-implement.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#connections
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("equinix:fabric/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// Equinix-assigned connection identifier
	Uuid string `pulumi:"uuid"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	// Requester or Customer side connection configuration object of the multi-segment connection
	ASide GetConnectionASide `pulumi:"aSide"`
	// Customer account information that is associated with this connection
	Account GetConnectionAccount `pulumi:"account"`
	// Connection additional information
	AdditionalInfo []map[string]string `pulumi:"additionalInfo"`
	// Connection bandwidth in Mbps
	Bandwidth int `pulumi:"bandwidth"`
	// Captures connection lifecycle change information
	ChangeLog GetConnectionChangeLog `pulumi:"changeLog"`
	// Customer-provided connection description
	Description string `pulumi:"description"`
	// Connection directionality from the requester point of view
	Direction string `pulumi:"direction"`
	// Connection URI information
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Connection property derived from access point locations
	IsRemote bool `pulumi:"isRemote"`
	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	Name string `pulumi:"name"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []GetConnectionNotification `pulumi:"notifications"`
	// Connection type-specific operational data
	Operation GetConnectionOperation `pulumi:"operation"`
	// Order details
	Order GetConnectionOrder `pulumi:"order"`
	// Project information
	Project GetConnectionProject `pulumi:"project"`
	// Connection Redundancy Configuration
	Redundancy GetConnectionRedundancy `pulumi:"redundancy"`
	// Connection overall state
	State string `pulumi:"state"`
	// Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, IA*VC, EC_VC
	Type string `pulumi:"type"`
	// Equinix-assigned connection identifier
	Uuid string `pulumi:"uuid"`
	// Destination or Provider side connection configuration object of the multi-segment connection
	ZSide GetConnectionZSide `pulumi:"zSide"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectionResultOutput, error) {
			args := v.(LookupConnectionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getConnection:getConnection", args, LookupConnectionResultOutput{}, options).(LookupConnectionResultOutput), nil
		}).(LookupConnectionResultOutput)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// Equinix-assigned connection identifier
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (LookupConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getConnection.
type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutput() LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutputWithContext(ctx context.Context) LookupConnectionResultOutput {
	return o
}

// Requester or Customer side connection configuration object of the multi-segment connection
func (o LookupConnectionResultOutput) ASide() GetConnectionASideOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionASide { return v.ASide }).(GetConnectionASideOutput)
}

// Customer account information that is associated with this connection
func (o LookupConnectionResultOutput) Account() GetConnectionAccountOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionAccount { return v.Account }).(GetConnectionAccountOutput)
}

// Connection additional information
func (o LookupConnectionResultOutput) AdditionalInfo() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []map[string]string { return v.AdditionalInfo }).(pulumi.StringMapArrayOutput)
}

// Connection bandwidth in Mbps
func (o LookupConnectionResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupConnectionResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// Captures connection lifecycle change information
func (o LookupConnectionResultOutput) ChangeLog() GetConnectionChangeLogOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionChangeLog { return v.ChangeLog }).(GetConnectionChangeLogOutput)
}

// Customer-provided connection description
func (o LookupConnectionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Connection directionality from the requester point of view
func (o LookupConnectionResultOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Direction }).(pulumi.StringOutput)
}

// Connection URI information
func (o LookupConnectionResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Connection property derived from access point locations
func (o LookupConnectionResultOutput) IsRemote() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConnectionResult) bool { return v.IsRemote }).(pulumi.BoolOutput)
}

// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
func (o LookupConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Preferences for notifications on connection configuration or status changes
func (o LookupConnectionResultOutput) Notifications() GetConnectionNotificationArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []GetConnectionNotification { return v.Notifications }).(GetConnectionNotificationArrayOutput)
}

// Connection type-specific operational data
func (o LookupConnectionResultOutput) Operation() GetConnectionOperationOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionOperation { return v.Operation }).(GetConnectionOperationOutput)
}

// Order details
func (o LookupConnectionResultOutput) Order() GetConnectionOrderOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionOrder { return v.Order }).(GetConnectionOrderOutput)
}

// Project information
func (o LookupConnectionResultOutput) Project() GetConnectionProjectOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionProject { return v.Project }).(GetConnectionProjectOutput)
}

// Connection Redundancy Configuration
func (o LookupConnectionResultOutput) Redundancy() GetConnectionRedundancyOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionRedundancy { return v.Redundancy }).(GetConnectionRedundancyOutput)
}

// Connection overall state
func (o LookupConnectionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.State }).(pulumi.StringOutput)
}

// Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, IA*VC, EC_VC
func (o LookupConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned connection identifier
func (o LookupConnectionResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Uuid }).(pulumi.StringOutput)
}

// Destination or Provider side connection configuration object of the multi-segment connection
func (o LookupConnectionResultOutput) ZSide() GetConnectionZSideOutput {
	return o.ApplyT(func(v LookupConnectionResult) GetConnectionZSide { return v.ZSide }).(GetConnectionZSideOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionResultOutput{})
}
