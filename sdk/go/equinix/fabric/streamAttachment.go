// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Attachments
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fabric.NewStreamAttachment(ctx, "asset", &fabric.StreamAttachmentArgs{
//				AssetId:  pulumi.String("<id_of_the_asset_being_attached>"),
//				Asset:    pulumi.String("<asset_group>"),
//				StreamId: pulumi.String("<id_of_the_stream_asset_is_being_attached_to>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StreamAttachment struct {
	pulumi.CustomResourceState

	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset pulumi.StringOutput `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId pulumi.StringOutput `pulumi:"assetId"`
	// Value representing status for the stream attachment
	AttachmentStatus pulumi.StringOutput `pulumi:"attachmentStatus"`
	// Equinix auto generated URI to the stream attachment in Equinix Portal
	Href pulumi.StringOutput `pulumi:"href"`
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled pulumi.BoolOutput `pulumi:"metricsEnabled"`
	// UUID of the stream that is the target of this asset attachment
	StreamId pulumi.StringOutput               `pulumi:"streamId"`
	Timeouts StreamAttachmentTimeoutsPtrOutput `pulumi:"timeouts"`
	// Equinix defined type for the asset stream attachment
	Type pulumi.StringOutput `pulumi:"type"`
	// Equinix-assigned unique id for the stream attachment
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewStreamAttachment registers a new resource with the given unique name, arguments, and options.
func NewStreamAttachment(ctx *pulumi.Context,
	name string, args *StreamAttachmentArgs, opts ...pulumi.ResourceOption) (*StreamAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asset == nil {
		return nil, errors.New("invalid value for required argument 'Asset'")
	}
	if args.AssetId == nil {
		return nil, errors.New("invalid value for required argument 'AssetId'")
	}
	if args.StreamId == nil {
		return nil, errors.New("invalid value for required argument 'StreamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamAttachment
	err := ctx.RegisterResource("equinix:fabric/streamAttachment:StreamAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamAttachment gets an existing StreamAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamAttachmentState, opts ...pulumi.ResourceOption) (*StreamAttachment, error) {
	var resource StreamAttachment
	err := ctx.ReadResource("equinix:fabric/streamAttachment:StreamAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamAttachment resources.
type streamAttachmentState struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset *string `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId *string `pulumi:"assetId"`
	// Value representing status for the stream attachment
	AttachmentStatus *string `pulumi:"attachmentStatus"`
	// Equinix auto generated URI to the stream attachment in Equinix Portal
	Href *string `pulumi:"href"`
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
	// UUID of the stream that is the target of this asset attachment
	StreamId *string                   `pulumi:"streamId"`
	Timeouts *StreamAttachmentTimeouts `pulumi:"timeouts"`
	// Equinix defined type for the asset stream attachment
	Type *string `pulumi:"type"`
	// Equinix-assigned unique id for the stream attachment
	Uuid *string `pulumi:"uuid"`
}

type StreamAttachmentState struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset pulumi.StringPtrInput
	// Equinix defined UUID of the asset being attached to the stream
	AssetId pulumi.StringPtrInput
	// Value representing status for the stream attachment
	AttachmentStatus pulumi.StringPtrInput
	// Equinix auto generated URI to the stream attachment in Equinix Portal
	Href pulumi.StringPtrInput
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled pulumi.BoolPtrInput
	// UUID of the stream that is the target of this asset attachment
	StreamId pulumi.StringPtrInput
	Timeouts StreamAttachmentTimeoutsPtrInput
	// Equinix defined type for the asset stream attachment
	Type pulumi.StringPtrInput
	// Equinix-assigned unique id for the stream attachment
	Uuid pulumi.StringPtrInput
}

func (StreamAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAttachmentState)(nil)).Elem()
}

type streamAttachmentArgs struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset string `pulumi:"asset"`
	// Equinix defined UUID of the asset being attached to the stream
	AssetId string `pulumi:"assetId"`
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
	// UUID of the stream that is the target of this asset attachment
	StreamId string                    `pulumi:"streamId"`
	Timeouts *StreamAttachmentTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a StreamAttachment resource.
type StreamAttachmentArgs struct {
	// Equinix defined asset category. Matches the product name the asset is a part of
	Asset pulumi.StringInput
	// Equinix defined UUID of the asset being attached to the stream
	AssetId pulumi.StringInput
	// Boolean value indicating enablement of metrics for this asset stream attachment
	MetricsEnabled pulumi.BoolPtrInput
	// UUID of the stream that is the target of this asset attachment
	StreamId pulumi.StringInput
	Timeouts StreamAttachmentTimeoutsPtrInput
}

func (StreamAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAttachmentArgs)(nil)).Elem()
}

type StreamAttachmentInput interface {
	pulumi.Input

	ToStreamAttachmentOutput() StreamAttachmentOutput
	ToStreamAttachmentOutputWithContext(ctx context.Context) StreamAttachmentOutput
}

func (*StreamAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAttachment)(nil)).Elem()
}

func (i *StreamAttachment) ToStreamAttachmentOutput() StreamAttachmentOutput {
	return i.ToStreamAttachmentOutputWithContext(context.Background())
}

func (i *StreamAttachment) ToStreamAttachmentOutputWithContext(ctx context.Context) StreamAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAttachmentOutput)
}

// StreamAttachmentArrayInput is an input type that accepts StreamAttachmentArray and StreamAttachmentArrayOutput values.
// You can construct a concrete instance of `StreamAttachmentArrayInput` via:
//
//	StreamAttachmentArray{ StreamAttachmentArgs{...} }
type StreamAttachmentArrayInput interface {
	pulumi.Input

	ToStreamAttachmentArrayOutput() StreamAttachmentArrayOutput
	ToStreamAttachmentArrayOutputWithContext(context.Context) StreamAttachmentArrayOutput
}

type StreamAttachmentArray []StreamAttachmentInput

func (StreamAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAttachment)(nil)).Elem()
}

func (i StreamAttachmentArray) ToStreamAttachmentArrayOutput() StreamAttachmentArrayOutput {
	return i.ToStreamAttachmentArrayOutputWithContext(context.Background())
}

func (i StreamAttachmentArray) ToStreamAttachmentArrayOutputWithContext(ctx context.Context) StreamAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAttachmentArrayOutput)
}

// StreamAttachmentMapInput is an input type that accepts StreamAttachmentMap and StreamAttachmentMapOutput values.
// You can construct a concrete instance of `StreamAttachmentMapInput` via:
//
//	StreamAttachmentMap{ "key": StreamAttachmentArgs{...} }
type StreamAttachmentMapInput interface {
	pulumi.Input

	ToStreamAttachmentMapOutput() StreamAttachmentMapOutput
	ToStreamAttachmentMapOutputWithContext(context.Context) StreamAttachmentMapOutput
}

type StreamAttachmentMap map[string]StreamAttachmentInput

func (StreamAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAttachment)(nil)).Elem()
}

func (i StreamAttachmentMap) ToStreamAttachmentMapOutput() StreamAttachmentMapOutput {
	return i.ToStreamAttachmentMapOutputWithContext(context.Background())
}

func (i StreamAttachmentMap) ToStreamAttachmentMapOutputWithContext(ctx context.Context) StreamAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAttachmentMapOutput)
}

type StreamAttachmentOutput struct{ *pulumi.OutputState }

func (StreamAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAttachment)(nil)).Elem()
}

func (o StreamAttachmentOutput) ToStreamAttachmentOutput() StreamAttachmentOutput {
	return o
}

func (o StreamAttachmentOutput) ToStreamAttachmentOutputWithContext(ctx context.Context) StreamAttachmentOutput {
	return o
}

// Equinix defined asset category. Matches the product name the asset is a part of
func (o StreamAttachmentOutput) Asset() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.Asset }).(pulumi.StringOutput)
}

// Equinix defined UUID of the asset being attached to the stream
func (o StreamAttachmentOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.AssetId }).(pulumi.StringOutput)
}

// Value representing status for the stream attachment
func (o StreamAttachmentOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// Equinix auto generated URI to the stream attachment in Equinix Portal
func (o StreamAttachmentOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// Boolean value indicating enablement of metrics for this asset stream attachment
func (o StreamAttachmentOutput) MetricsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.BoolOutput { return v.MetricsEnabled }).(pulumi.BoolOutput)
}

// UUID of the stream that is the target of this asset attachment
func (o StreamAttachmentOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o StreamAttachmentOutput) Timeouts() StreamAttachmentTimeoutsPtrOutput {
	return o.ApplyT(func(v *StreamAttachment) StreamAttachmentTimeoutsPtrOutput { return v.Timeouts }).(StreamAttachmentTimeoutsPtrOutput)
}

// Equinix defined type for the asset stream attachment
func (o StreamAttachmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Equinix-assigned unique id for the stream attachment
func (o StreamAttachmentOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAttachment) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type StreamAttachmentArrayOutput struct{ *pulumi.OutputState }

func (StreamAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAttachment)(nil)).Elem()
}

func (o StreamAttachmentArrayOutput) ToStreamAttachmentArrayOutput() StreamAttachmentArrayOutput {
	return o
}

func (o StreamAttachmentArrayOutput) ToStreamAttachmentArrayOutputWithContext(ctx context.Context) StreamAttachmentArrayOutput {
	return o
}

func (o StreamAttachmentArrayOutput) Index(i pulumi.IntInput) StreamAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamAttachment {
		return vs[0].([]*StreamAttachment)[vs[1].(int)]
	}).(StreamAttachmentOutput)
}

type StreamAttachmentMapOutput struct{ *pulumi.OutputState }

func (StreamAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAttachment)(nil)).Elem()
}

func (o StreamAttachmentMapOutput) ToStreamAttachmentMapOutput() StreamAttachmentMapOutput {
	return o
}

func (o StreamAttachmentMapOutput) ToStreamAttachmentMapOutputWithContext(ctx context.Context) StreamAttachmentMapOutput {
	return o
}

func (o StreamAttachmentMapOutput) MapIndex(k pulumi.StringInput) StreamAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamAttachment {
		return vs[0].(map[string]*StreamAttachment)[vs[1].(string)]
	}).(StreamAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAttachmentInput)(nil)).Elem(), &StreamAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAttachmentArrayInput)(nil)).Elem(), StreamAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAttachmentMapInput)(nil)).Elem(), StreamAttachmentMap{})
	pulumi.RegisterOutputType(StreamAttachmentOutput{})
	pulumi.RegisterOutputType(StreamAttachmentArrayOutput{})
	pulumi.RegisterOutputType(StreamAttachmentMapOutput{})
}
