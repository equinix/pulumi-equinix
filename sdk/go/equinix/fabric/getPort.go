// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch port by uuid
//
// Additional documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-ports-implement.htm
// * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#ports
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			portDataName, err := fabric.LookupPort(ctx, &fabric.LookupPortArgs{
//				Uuid: "<uuid_of_port>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", portDataName.Id)
//			ctx.Export("name", portDataName.Name)
//			ctx.Export("state", portDataName.State)
//			ctx.Export("accountName", portDataName.Account.AccountName)
//			ctx.Export("type", portDataName.Type)
//			ctx.Export("bandwidth", portDataName.Bandwidth)
//			ctx.Export("usedBandwidth", portDataName.UsedBandwidth)
//			ctx.Export("encapsulationType", portDataName.Encapsulation.Type)
//			ctx.Export("ibx", portDataName.Location.Ibx)
//			ctx.Export("metroCode", portDataName.Location.MetroCode)
//			ctx.Export("metroName", portDataName.Location.MetroName)
//			ctx.Export("region", portDataName.Location.Region)
//			ctx.Export("deviceRedundancyEnabled", portDataName.Device.Redundancies[0].Enabled)
//			ctx.Export("deviceRedundancyPriority", portDataName.Device.Redundancies[0].Priority)
//			return nil
//		})
//	}
//
// ```
func LookupPort(ctx *pulumi.Context, args *LookupPortArgs, opts ...pulumi.InvokeOption) (*LookupPortResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPortResult
	err := ctx.Invoke("equinix:fabric/getPort:getPort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPort.
type LookupPortArgs struct {
	// Equinix-assigned port identifier
	Uuid string `pulumi:"uuid"`
}

// A collection of values returned by getPort.
type LookupPortResult struct {
	// Customer account information that is associated with this port
	Account GetPortAccount `pulumi:"account"`
	// Port available bandwidth in Mbps
	AvailableBandwidth int `pulumi:"availableBandwidth"`
	// Port bandwidth in Mbps
	Bandwidth int `pulumi:"bandwidth"`
	// Captures port lifecycle change information
	ChangeLog GetPortChangeLog `pulumi:"changeLog"`
	// Port description
	Description string `pulumi:"description"`
	// Port device
	Device GetPortDevice `pulumi:"device"`
	// Port encapsulation protocol
	Encapsulation GetPortEncapsulation `pulumi:"encapsulation"`
	// Port URI information
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Port Lag
	LagEnabled bool `pulumi:"lagEnabled"`
	// Port location information
	Location GetPortLocation `pulumi:"location"`
	// Port name
	Name string `pulumi:"name"`
	// Port specific operational data
	Operation GetPortOperation `pulumi:"operation"`
	// Port redundancy information
	Redundancy GetPortRedundancy `pulumi:"redundancy"`
	// Port service type
	ServiceType string `pulumi:"serviceType"`
	// Port state
	State string `pulumi:"state"`
	// Port type
	Type string `pulumi:"type"`
	// Port used bandwidth in Mbps
	UsedBandwidth int `pulumi:"usedBandwidth"`
	// Equinix-assigned port identifier
	Uuid string `pulumi:"uuid"`
}

func LookupPortOutput(ctx *pulumi.Context, args LookupPortOutputArgs, opts ...pulumi.InvokeOption) LookupPortResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPortResultOutput, error) {
			args := v.(LookupPortArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getPort:getPort", args, LookupPortResultOutput{}, options).(LookupPortResultOutput), nil
		}).(LookupPortResultOutput)
}

// A collection of arguments for invoking getPort.
type LookupPortOutputArgs struct {
	// Equinix-assigned port identifier
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (LookupPortOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortArgs)(nil)).Elem()
}

// A collection of values returned by getPort.
type LookupPortResultOutput struct{ *pulumi.OutputState }

func (LookupPortResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortResult)(nil)).Elem()
}

func (o LookupPortResultOutput) ToLookupPortResultOutput() LookupPortResultOutput {
	return o
}

func (o LookupPortResultOutput) ToLookupPortResultOutputWithContext(ctx context.Context) LookupPortResultOutput {
	return o
}

// Customer account information that is associated with this port
func (o LookupPortResultOutput) Account() GetPortAccountOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortAccount { return v.Account }).(GetPortAccountOutput)
}

// Port available bandwidth in Mbps
func (o LookupPortResultOutput) AvailableBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPortResult) int { return v.AvailableBandwidth }).(pulumi.IntOutput)
}

// Port bandwidth in Mbps
func (o LookupPortResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPortResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// Captures port lifecycle change information
func (o LookupPortResultOutput) ChangeLog() GetPortChangeLogOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortChangeLog { return v.ChangeLog }).(GetPortChangeLogOutput)
}

// Port description
func (o LookupPortResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Description }).(pulumi.StringOutput)
}

// Port device
func (o LookupPortResultOutput) Device() GetPortDeviceOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortDevice { return v.Device }).(GetPortDeviceOutput)
}

// Port encapsulation protocol
func (o LookupPortResultOutput) Encapsulation() GetPortEncapsulationOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortEncapsulation { return v.Encapsulation }).(GetPortEncapsulationOutput)
}

// Port URI information
func (o LookupPortResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPortResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Id }).(pulumi.StringOutput)
}

// Port Lag
func (o LookupPortResultOutput) LagEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPortResult) bool { return v.LagEnabled }).(pulumi.BoolOutput)
}

// Port location information
func (o LookupPortResultOutput) Location() GetPortLocationOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortLocation { return v.Location }).(GetPortLocationOutput)
}

// Port name
func (o LookupPortResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Name }).(pulumi.StringOutput)
}

// Port specific operational data
func (o LookupPortResultOutput) Operation() GetPortOperationOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortOperation { return v.Operation }).(GetPortOperationOutput)
}

// Port redundancy information
func (o LookupPortResultOutput) Redundancy() GetPortRedundancyOutput {
	return o.ApplyT(func(v LookupPortResult) GetPortRedundancy { return v.Redundancy }).(GetPortRedundancyOutput)
}

// Port service type
func (o LookupPortResultOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.ServiceType }).(pulumi.StringOutput)
}

// Port state
func (o LookupPortResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.State }).(pulumi.StringOutput)
}

// Port type
func (o LookupPortResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Type }).(pulumi.StringOutput)
}

// Port used bandwidth in Mbps
func (o LookupPortResultOutput) UsedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPortResult) int { return v.UsedBandwidth }).(pulumi.IntOutput)
}

// Equinix-assigned port identifier
func (o LookupPortResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPortResultOutput{})
}
