// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupStreamAlertRule(ctx *pulumi.Context, args *LookupStreamAlertRuleArgs, opts ...pulumi.InvokeOption) (*LookupStreamAlertRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamAlertRuleResult
	err := ctx.Invoke("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamAlertRule.
type LookupStreamAlertRuleArgs struct {
	// The uuid of the stream alert rule
	AlertRuleId string `pulumi:"alertRuleId"`
	// Detection method for stream alert rule
	DetectionMethod *GetStreamAlertRuleDetectionMethod `pulumi:"detectionMethod"`
	// Metric selector for the stream alert rule
	MetricSelector *GetStreamAlertRuleMetricSelector `pulumi:"metricSelector"`
	// The uuid of the stream that is the target of the stream alert rule
	StreamId string `pulumi:"streamId"`
}

// A collection of values returned by getStreamAlertRule.
type LookupStreamAlertRuleResult struct {
	// The uuid of the stream alert rule
	AlertRuleId string `pulumi:"alertRuleId"`
	// Details of the last change on the stream resource
	ChangeLog GetStreamAlertRuleChangeLog `pulumi:"changeLog"`
	// Customer-provided stream alert rule description
	Description string `pulumi:"description"`
	// Detection method for stream alert rule
	DetectionMethod GetStreamAlertRuleDetectionMethod `pulumi:"detectionMethod"`
	// Stream subscription enabled status
	Enabled bool `pulumi:"enabled"`
	// Equinix assigned URI of the stream alert rule resource
	Href string `pulumi:"href"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// Metric selector for the stream alert rule
	MetricSelector GetStreamAlertRuleMetricSelector `pulumi:"metricSelector"`
	// Customer-provided stream alert rule name
	Name string `pulumi:"name"`
	// Lists of metrics to be included/excluded on the stream alert rule
	ResourceSelector GetStreamAlertRuleResourceSelector `pulumi:"resourceSelector"`
	// Value representing provisioning status for the stream resource
	State string `pulumi:"state"`
	// The uuid of the stream that is the target of the stream alert rule
	StreamId string `pulumi:"streamId"`
	// Type of the stream alert rule
	Type string `pulumi:"type"`
	// Equinix assigned unique identifier of the stream subscription resource
	Uuid string `pulumi:"uuid"`
}

func LookupStreamAlertRuleOutput(ctx *pulumi.Context, args LookupStreamAlertRuleOutputArgs, opts ...pulumi.InvokeOption) LookupStreamAlertRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamAlertRuleResultOutput, error) {
			args := v.(LookupStreamAlertRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getStreamAlertRule:getStreamAlertRule", args, LookupStreamAlertRuleResultOutput{}, options).(LookupStreamAlertRuleResultOutput), nil
		}).(LookupStreamAlertRuleResultOutput)
}

// A collection of arguments for invoking getStreamAlertRule.
type LookupStreamAlertRuleOutputArgs struct {
	// The uuid of the stream alert rule
	AlertRuleId pulumi.StringInput `pulumi:"alertRuleId"`
	// Detection method for stream alert rule
	DetectionMethod GetStreamAlertRuleDetectionMethodPtrInput `pulumi:"detectionMethod"`
	// Metric selector for the stream alert rule
	MetricSelector GetStreamAlertRuleMetricSelectorPtrInput `pulumi:"metricSelector"`
	// The uuid of the stream that is the target of the stream alert rule
	StreamId pulumi.StringInput `pulumi:"streamId"`
}

func (LookupStreamAlertRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAlertRuleArgs)(nil)).Elem()
}

// A collection of values returned by getStreamAlertRule.
type LookupStreamAlertRuleResultOutput struct{ *pulumi.OutputState }

func (LookupStreamAlertRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAlertRuleResult)(nil)).Elem()
}

func (o LookupStreamAlertRuleResultOutput) ToLookupStreamAlertRuleResultOutput() LookupStreamAlertRuleResultOutput {
	return o
}

func (o LookupStreamAlertRuleResultOutput) ToLookupStreamAlertRuleResultOutputWithContext(ctx context.Context) LookupStreamAlertRuleResultOutput {
	return o
}

// The uuid of the stream alert rule
func (o LookupStreamAlertRuleResultOutput) AlertRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.AlertRuleId }).(pulumi.StringOutput)
}

// Details of the last change on the stream resource
func (o LookupStreamAlertRuleResultOutput) ChangeLog() GetStreamAlertRuleChangeLogOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) GetStreamAlertRuleChangeLog { return v.ChangeLog }).(GetStreamAlertRuleChangeLogOutput)
}

// Customer-provided stream alert rule description
func (o LookupStreamAlertRuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Detection method for stream alert rule
func (o LookupStreamAlertRuleResultOutput) DetectionMethod() GetStreamAlertRuleDetectionMethodOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) GetStreamAlertRuleDetectionMethod { return v.DetectionMethod }).(GetStreamAlertRuleDetectionMethodOutput)
}

// Stream subscription enabled status
func (o LookupStreamAlertRuleResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Equinix assigned URI of the stream alert rule resource
func (o LookupStreamAlertRuleResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Href }).(pulumi.StringOutput)
}

// The unique identifier of the resource
func (o LookupStreamAlertRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Metric selector for the stream alert rule
func (o LookupStreamAlertRuleResultOutput) MetricSelector() GetStreamAlertRuleMetricSelectorOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) GetStreamAlertRuleMetricSelector { return v.MetricSelector }).(GetStreamAlertRuleMetricSelectorOutput)
}

// Customer-provided stream alert rule name
func (o LookupStreamAlertRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Lists of metrics to be included/excluded on the stream alert rule
func (o LookupStreamAlertRuleResultOutput) ResourceSelector() GetStreamAlertRuleResourceSelectorOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) GetStreamAlertRuleResourceSelector { return v.ResourceSelector }).(GetStreamAlertRuleResourceSelectorOutput)
}

// Value representing provisioning status for the stream resource
func (o LookupStreamAlertRuleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.State }).(pulumi.StringOutput)
}

// The uuid of the stream that is the target of the stream alert rule
func (o LookupStreamAlertRuleResultOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.StreamId }).(pulumi.StringOutput)
}

// Type of the stream alert rule
func (o LookupStreamAlertRuleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix assigned unique identifier of the stream subscription resource
func (o LookupStreamAlertRuleResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAlertRuleResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamAlertRuleResultOutput{})
}
