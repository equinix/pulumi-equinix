// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
// Additional Documentation:
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			attachedPolicy, err := fabric.LookupConnectionRouteAggregation(ctx, &fabric.LookupConnectionRouteAggregationArgs{
//				RouteAggregationId: "<route_aggregation_id>",
//				ConnectionId:       "<connection_id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("connectionRouteAggregationId", attachedPolicy.Id)
//			ctx.Export("connectionRouteAggregationConnectionId", attachedPolicy.ConnectionId)
//			ctx.Export("connectionRouteAggregationType", attachedPolicy.Type)
//			ctx.Export("connectionRouteAggregationAttachmentStatus", attachedPolicy.AttachmentStatus)
//			return nil
//		})
//	}
//
// ```
func LookupConnectionRouteAggregation(ctx *pulumi.Context, args *LookupConnectionRouteAggregationArgs, opts ...pulumi.InvokeOption) (*LookupConnectionRouteAggregationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionRouteAggregationResult
	err := ctx.Invoke("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionRouteAggregation.
type LookupConnectionRouteAggregationArgs struct {
	// The uuid of the connection this data source should retrieve
	ConnectionId string `pulumi:"connectionId"`
	// The uuid of the route aggregation this data source should retrieve
	RouteAggregationId string `pulumi:"routeAggregationId"`
}

// A collection of values returned by getConnectionRouteAggregation.
type LookupConnectionRouteAggregationResult struct {
	// Status of the Route Aggregation Policy attachment lifecycle
	AttachmentStatus string `pulumi:"attachmentStatus"`
	// The uuid of the connection this data source should retrieve
	ConnectionId string `pulumi:"connectionId"`
	// URI to the attached Route Aggregation Policy on the Connection
	Href string `pulumi:"href"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// The uuid of the route aggregation this data source should retrieve
	RouteAggregationId string `pulumi:"routeAggregationId"`
	// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
	Type string `pulumi:"type"`
	// Equinix Assigned ID for Route Aggregation Policy
	Uuid string `pulumi:"uuid"`
}

func LookupConnectionRouteAggregationOutput(ctx *pulumi.Context, args LookupConnectionRouteAggregationOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionRouteAggregationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectionRouteAggregationResultOutput, error) {
			args := v.(LookupConnectionRouteAggregationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", args, LookupConnectionRouteAggregationResultOutput{}, options).(LookupConnectionRouteAggregationResultOutput), nil
		}).(LookupConnectionRouteAggregationResultOutput)
}

// A collection of arguments for invoking getConnectionRouteAggregation.
type LookupConnectionRouteAggregationOutputArgs struct {
	// The uuid of the connection this data source should retrieve
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The uuid of the route aggregation this data source should retrieve
	RouteAggregationId pulumi.StringInput `pulumi:"routeAggregationId"`
}

func (LookupConnectionRouteAggregationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionRouteAggregationArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionRouteAggregation.
type LookupConnectionRouteAggregationResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionRouteAggregationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionRouteAggregationResult)(nil)).Elem()
}

func (o LookupConnectionRouteAggregationResultOutput) ToLookupConnectionRouteAggregationResultOutput() LookupConnectionRouteAggregationResultOutput {
	return o
}

func (o LookupConnectionRouteAggregationResultOutput) ToLookupConnectionRouteAggregationResultOutputWithContext(ctx context.Context) LookupConnectionRouteAggregationResultOutput {
	return o
}

// Status of the Route Aggregation Policy attachment lifecycle
func (o LookupConnectionRouteAggregationResultOutput) AttachmentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.AttachmentStatus }).(pulumi.StringOutput)
}

// The uuid of the connection this data source should retrieve
func (o LookupConnectionRouteAggregationResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// URI to the attached Route Aggregation Policy on the Connection
func (o LookupConnectionRouteAggregationResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.Href }).(pulumi.StringOutput)
}

// The unique identifier of the resource
func (o LookupConnectionRouteAggregationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The uuid of the route aggregation this data source should retrieve
func (o LookupConnectionRouteAggregationResultOutput) RouteAggregationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.RouteAggregationId }).(pulumi.StringOutput)
}

// Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
func (o LookupConnectionRouteAggregationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix Assigned ID for Route Aggregation Policy
func (o LookupConnectionRouteAggregationResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionRouteAggregationResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionRouteAggregationResultOutput{})
}
