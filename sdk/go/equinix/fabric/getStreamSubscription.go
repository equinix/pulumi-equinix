// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id
//
// Additional Documentation:
// * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
// * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fabric.LookupStreamSubscription(ctx, &fabric.LookupStreamSubscriptionArgs{
//				StreamId:       "<stream_id>",
//				SubscriptionId: "<subscription_id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamSubscription(ctx *pulumi.Context, args *LookupStreamSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupStreamSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamSubscriptionResult
	err := ctx.Invoke("equinix:fabric/getStreamSubscription:getStreamSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamSubscription.
type LookupStreamSubscriptionArgs struct {
	// The uuid of the stream that is the target of the stream subscription
	StreamId string `pulumi:"streamId"`
	// The uuid of the stream subscription
	SubscriptionId string `pulumi:"subscriptionId"`
}

// A collection of values returned by getStreamSubscription.
type LookupStreamSubscriptionResult struct {
	// Details of the last change on the stream resource
	ChangeLog GetStreamSubscriptionChangeLog `pulumi:"changeLog"`
	// Customer-provided stream subscription description
	Description string `pulumi:"description"`
	// Stream subscription enabled status
	Enabled bool `pulumi:"enabled"`
	// Lists of events to be included/excluded on the stream subscription
	EventSelector GetStreamSubscriptionEventSelector `pulumi:"eventSelector"`
	// Equinix assigned URI of the stream subscription resource
	Href string `pulumi:"href"`
	// The unique identifier of the resource
	Id string `pulumi:"id"`
	// Lists of metrics to be included/excluded on the stream subscription
	MetricSelector GetStreamSubscriptionMetricSelector `pulumi:"metricSelector"`
	// Customer-provided stream subscription name
	Name string `pulumi:"name"`
	// The details of the subscriber to the Equinix Stream
	Sink GetStreamSubscriptionSink `pulumi:"sink"`
	// Value representing provisioning status for the stream resource
	State string `pulumi:"state"`
	// The uuid of the stream that is the target of the stream subscription
	StreamId string `pulumi:"streamId"`
	// The uuid of the stream subscription
	SubscriptionId string `pulumi:"subscriptionId"`
	// Type of the stream subscription request
	Type string `pulumi:"type"`
	// Equinix assigned unique identifier of the stream subscription resource
	Uuid string `pulumi:"uuid"`
}

func LookupStreamSubscriptionOutput(ctx *pulumi.Context, args LookupStreamSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupStreamSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamSubscriptionResultOutput, error) {
			args := v.(LookupStreamSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("equinix:fabric/getStreamSubscription:getStreamSubscription", args, LookupStreamSubscriptionResultOutput{}, options).(LookupStreamSubscriptionResultOutput), nil
		}).(LookupStreamSubscriptionResultOutput)
}

// A collection of arguments for invoking getStreamSubscription.
type LookupStreamSubscriptionOutputArgs struct {
	// The uuid of the stream that is the target of the stream subscription
	StreamId pulumi.StringInput `pulumi:"streamId"`
	// The uuid of the stream subscription
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (LookupStreamSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getStreamSubscription.
type LookupStreamSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupStreamSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamSubscriptionResult)(nil)).Elem()
}

func (o LookupStreamSubscriptionResultOutput) ToLookupStreamSubscriptionResultOutput() LookupStreamSubscriptionResultOutput {
	return o
}

func (o LookupStreamSubscriptionResultOutput) ToLookupStreamSubscriptionResultOutputWithContext(ctx context.Context) LookupStreamSubscriptionResultOutput {
	return o
}

// Details of the last change on the stream resource
func (o LookupStreamSubscriptionResultOutput) ChangeLog() GetStreamSubscriptionChangeLogOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) GetStreamSubscriptionChangeLog { return v.ChangeLog }).(GetStreamSubscriptionChangeLogOutput)
}

// Customer-provided stream subscription description
func (o LookupStreamSubscriptionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Stream subscription enabled status
func (o LookupStreamSubscriptionResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Lists of events to be included/excluded on the stream subscription
func (o LookupStreamSubscriptionResultOutput) EventSelector() GetStreamSubscriptionEventSelectorOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) GetStreamSubscriptionEventSelector { return v.EventSelector }).(GetStreamSubscriptionEventSelectorOutput)
}

// Equinix assigned URI of the stream subscription resource
func (o LookupStreamSubscriptionResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Href }).(pulumi.StringOutput)
}

// The unique identifier of the resource
func (o LookupStreamSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Lists of metrics to be included/excluded on the stream subscription
func (o LookupStreamSubscriptionResultOutput) MetricSelector() GetStreamSubscriptionMetricSelectorOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) GetStreamSubscriptionMetricSelector { return v.MetricSelector }).(GetStreamSubscriptionMetricSelectorOutput)
}

// Customer-provided stream subscription name
func (o LookupStreamSubscriptionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The details of the subscriber to the Equinix Stream
func (o LookupStreamSubscriptionResultOutput) Sink() GetStreamSubscriptionSinkOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) GetStreamSubscriptionSink { return v.Sink }).(GetStreamSubscriptionSinkOutput)
}

// Value representing provisioning status for the stream resource
func (o LookupStreamSubscriptionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.State }).(pulumi.StringOutput)
}

// The uuid of the stream that is the target of the stream subscription
func (o LookupStreamSubscriptionResultOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.StreamId }).(pulumi.StringOutput)
}

// The uuid of the stream subscription
func (o LookupStreamSubscriptionResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Type of the stream subscription request
func (o LookupStreamSubscriptionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Type }).(pulumi.StringOutput)
}

// Equinix assigned unique identifier of the stream subscription resource
func (o LookupStreamSubscriptionResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSubscriptionResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamSubscriptionResultOutput{})
}
