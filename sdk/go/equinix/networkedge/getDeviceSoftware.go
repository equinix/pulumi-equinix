// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get Equinix Network Edge device software details for a given device type. For further details, check supported [Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkedge.GetDeviceSoftware(ctx, &networkedge.GetDeviceSoftwareArgs{
//				DeviceType: "CSR1000V",
//				MostRecent: pulumi.BoolRef(true),
//				Packages: []string{
//					"IPBASE",
//				},
//				VersionRegex: pulumi.StringRef("^16.09.+"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDeviceSoftware(ctx *pulumi.Context, args *GetDeviceSoftwareArgs, opts ...pulumi.InvokeOption) (*GetDeviceSoftwareResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeviceSoftwareResult
	err := ctx.Invoke("equinix:networkedge/getDeviceSoftware:getDeviceSoftware", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeviceSoftware.
type GetDeviceSoftwareArgs struct {
	// Code of a device type.
	DeviceType string `pulumi:"deviceType"`
	// Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
	MostRecent *bool `pulumi:"mostRecent"`
	// Limits returned versions to those that are supported by given software package codes.
	Packages []string `pulumi:"packages"`
	// Boolean value to limit query results to stable versions only.
	Stable *bool `pulumi:"stable"`
	// A regex string to apply on returned versions and filter search results.
	VersionRegex *string `pulumi:"versionRegex"`
}

// A collection of values returned by getDeviceSoftware.
type GetDeviceSoftwareResult struct {
	// Version release date.
	Date       string `pulumi:"date"`
	DeviceType string `pulumi:"deviceType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Software image name.
	ImageName  string   `pulumi:"imageName"`
	MostRecent *bool    `pulumi:"mostRecent"`
	Packages   []string `pulumi:"packages"`
	// Link to version release notes.
	ReleaseNotesLink string `pulumi:"releaseNotesLink"`
	Stable           bool   `pulumi:"stable"`
	// Version status.
	Status string `pulumi:"status"`
	// Version number.
	Version      string  `pulumi:"version"`
	VersionRegex *string `pulumi:"versionRegex"`
}

func GetDeviceSoftwareOutput(ctx *pulumi.Context, args GetDeviceSoftwareOutputArgs, opts ...pulumi.InvokeOption) GetDeviceSoftwareResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeviceSoftwareResultOutput, error) {
			args := v.(GetDeviceSoftwareArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetDeviceSoftwareResult
			secret, err := ctx.InvokePackageRaw("equinix:networkedge/getDeviceSoftware:getDeviceSoftware", args, &rv, "", opts...)
			if err != nil {
				return GetDeviceSoftwareResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetDeviceSoftwareResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetDeviceSoftwareResultOutput), nil
			}
			return output, nil
		}).(GetDeviceSoftwareResultOutput)
}

// A collection of arguments for invoking getDeviceSoftware.
type GetDeviceSoftwareOutputArgs struct {
	// Code of a device type.
	DeviceType pulumi.StringInput `pulumi:"deviceType"`
	// Boolean value to indicate that most recent version should be used *(in case when more than one result is returned)*.
	MostRecent pulumi.BoolPtrInput `pulumi:"mostRecent"`
	// Limits returned versions to those that are supported by given software package codes.
	Packages pulumi.StringArrayInput `pulumi:"packages"`
	// Boolean value to limit query results to stable versions only.
	Stable pulumi.BoolPtrInput `pulumi:"stable"`
	// A regex string to apply on returned versions and filter search results.
	VersionRegex pulumi.StringPtrInput `pulumi:"versionRegex"`
}

func (GetDeviceSoftwareOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSoftwareArgs)(nil)).Elem()
}

// A collection of values returned by getDeviceSoftware.
type GetDeviceSoftwareResultOutput struct{ *pulumi.OutputState }

func (GetDeviceSoftwareResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSoftwareResult)(nil)).Elem()
}

func (o GetDeviceSoftwareResultOutput) ToGetDeviceSoftwareResultOutput() GetDeviceSoftwareResultOutput {
	return o
}

func (o GetDeviceSoftwareResultOutput) ToGetDeviceSoftwareResultOutputWithContext(ctx context.Context) GetDeviceSoftwareResultOutput {
	return o
}

// Version release date.
func (o GetDeviceSoftwareResultOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.Date }).(pulumi.StringOutput)
}

func (o GetDeviceSoftwareResultOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.DeviceType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDeviceSoftwareResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.Id }).(pulumi.StringOutput)
}

// Software image name.
func (o GetDeviceSoftwareResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.ImageName }).(pulumi.StringOutput)
}

func (o GetDeviceSoftwareResultOutput) MostRecent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) *bool { return v.MostRecent }).(pulumi.BoolPtrOutput)
}

func (o GetDeviceSoftwareResultOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) []string { return v.Packages }).(pulumi.StringArrayOutput)
}

// Link to version release notes.
func (o GetDeviceSoftwareResultOutput) ReleaseNotesLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.ReleaseNotesLink }).(pulumi.StringOutput)
}

func (o GetDeviceSoftwareResultOutput) Stable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) bool { return v.Stable }).(pulumi.BoolOutput)
}

// Version status.
func (o GetDeviceSoftwareResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.Status }).(pulumi.StringOutput)
}

// Version number.
func (o GetDeviceSoftwareResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) string { return v.Version }).(pulumi.StringOutput)
}

func (o GetDeviceSoftwareResultOutput) VersionRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeviceSoftwareResult) *string { return v.VersionRegex }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeviceSoftwareResultOutput{})
}
