// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AclProtocolType string

const (
	AclProtocolTypeIP  = AclProtocolType("IP")
	AclProtocolTypeTCP = AclProtocolType("TCP")
	AclProtocolTypeUDP = AclProtocolType("UDP")
)

func (AclProtocolType) ElementType() reflect.Type {
	return reflect.TypeOf((*AclProtocolType)(nil)).Elem()
}

func (e AclProtocolType) ToAclProtocolTypeOutput() AclProtocolTypeOutput {
	return pulumi.ToOutput(e).(AclProtocolTypeOutput)
}

func (e AclProtocolType) ToAclProtocolTypeOutputWithContext(ctx context.Context) AclProtocolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AclProtocolTypeOutput)
}

func (e AclProtocolType) ToAclProtocolTypePtrOutput() AclProtocolTypePtrOutput {
	return e.ToAclProtocolTypePtrOutputWithContext(context.Background())
}

func (e AclProtocolType) ToAclProtocolTypePtrOutputWithContext(ctx context.Context) AclProtocolTypePtrOutput {
	return AclProtocolType(e).ToAclProtocolTypeOutputWithContext(ctx).ToAclProtocolTypePtrOutputWithContext(ctx)
}

func (e AclProtocolType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AclProtocolType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AclProtocolType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AclProtocolType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AclProtocolTypeOutput struct{ *pulumi.OutputState }

func (AclProtocolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclProtocolType)(nil)).Elem()
}

func (o AclProtocolTypeOutput) ToAclProtocolTypeOutput() AclProtocolTypeOutput {
	return o
}

func (o AclProtocolTypeOutput) ToAclProtocolTypeOutputWithContext(ctx context.Context) AclProtocolTypeOutput {
	return o
}

func (o AclProtocolTypeOutput) ToAclProtocolTypePtrOutput() AclProtocolTypePtrOutput {
	return o.ToAclProtocolTypePtrOutputWithContext(context.Background())
}

func (o AclProtocolTypeOutput) ToAclProtocolTypePtrOutputWithContext(ctx context.Context) AclProtocolTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclProtocolType) *AclProtocolType {
		return &v
	}).(AclProtocolTypePtrOutput)
}

func (o AclProtocolTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AclProtocolTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AclProtocolType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AclProtocolTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AclProtocolTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AclProtocolType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AclProtocolTypePtrOutput struct{ *pulumi.OutputState }

func (AclProtocolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclProtocolType)(nil)).Elem()
}

func (o AclProtocolTypePtrOutput) ToAclProtocolTypePtrOutput() AclProtocolTypePtrOutput {
	return o
}

func (o AclProtocolTypePtrOutput) ToAclProtocolTypePtrOutputWithContext(ctx context.Context) AclProtocolTypePtrOutput {
	return o
}

func (o AclProtocolTypePtrOutput) Elem() AclProtocolTypeOutput {
	return o.ApplyT(func(v *AclProtocolType) AclProtocolType {
		if v != nil {
			return *v
		}
		var ret AclProtocolType
		return ret
	}).(AclProtocolTypeOutput)
}

func (o AclProtocolTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AclProtocolTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AclProtocolType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AclProtocolTypeInput is an input type that accepts AclProtocolTypeArgs and AclProtocolTypeOutput values.
// You can construct a concrete instance of `AclProtocolTypeInput` via:
//
//	AclProtocolTypeArgs{...}
type AclProtocolTypeInput interface {
	pulumi.Input

	ToAclProtocolTypeOutput() AclProtocolTypeOutput
	ToAclProtocolTypeOutputWithContext(context.Context) AclProtocolTypeOutput
}

var aclProtocolTypePtrType = reflect.TypeOf((**AclProtocolType)(nil)).Elem()

type AclProtocolTypePtrInput interface {
	pulumi.Input

	ToAclProtocolTypePtrOutput() AclProtocolTypePtrOutput
	ToAclProtocolTypePtrOutputWithContext(context.Context) AclProtocolTypePtrOutput
}

type aclProtocolTypePtr string

func AclProtocolTypePtr(v string) AclProtocolTypePtrInput {
	return (*aclProtocolTypePtr)(&v)
}

func (*aclProtocolTypePtr) ElementType() reflect.Type {
	return aclProtocolTypePtrType
}

func (in *aclProtocolTypePtr) ToAclProtocolTypePtrOutput() AclProtocolTypePtrOutput {
	return pulumi.ToOutput(in).(AclProtocolTypePtrOutput)
}

func (in *aclProtocolTypePtr) ToAclProtocolTypePtrOutputWithContext(ctx context.Context) AclProtocolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AclProtocolTypePtrOutput)
}

type ThroughputUnit string

const (
	ThroughputUnitMbps = ThroughputUnit("Mbps")
	ThroughputUnitGbps = ThroughputUnit("Gbps")
)

func (ThroughputUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*ThroughputUnit)(nil)).Elem()
}

func (e ThroughputUnit) ToThroughputUnitOutput() ThroughputUnitOutput {
	return pulumi.ToOutput(e).(ThroughputUnitOutput)
}

func (e ThroughputUnit) ToThroughputUnitOutputWithContext(ctx context.Context) ThroughputUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThroughputUnitOutput)
}

func (e ThroughputUnit) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return e.ToThroughputUnitPtrOutputWithContext(context.Background())
}

func (e ThroughputUnit) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return ThroughputUnit(e).ToThroughputUnitOutputWithContext(ctx).ToThroughputUnitPtrOutputWithContext(ctx)
}

func (e ThroughputUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThroughputUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThroughputUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThroughputUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThroughputUnitOutput struct{ *pulumi.OutputState }

func (ThroughputUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThroughputUnit)(nil)).Elem()
}

func (o ThroughputUnitOutput) ToThroughputUnitOutput() ThroughputUnitOutput {
	return o
}

func (o ThroughputUnitOutput) ToThroughputUnitOutputWithContext(ctx context.Context) ThroughputUnitOutput {
	return o
}

func (o ThroughputUnitOutput) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return o.ToThroughputUnitPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThroughputUnit) *ThroughputUnit {
		return &v
	}).(ThroughputUnitPtrOutput)
}

func (o ThroughputUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThroughputUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThroughputUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThroughputUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThroughputUnitPtrOutput struct{ *pulumi.OutputState }

func (ThroughputUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThroughputUnit)(nil)).Elem()
}

func (o ThroughputUnitPtrOutput) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return o
}

func (o ThroughputUnitPtrOutput) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return o
}

func (o ThroughputUnitPtrOutput) Elem() ThroughputUnitOutput {
	return o.ApplyT(func(v *ThroughputUnit) ThroughputUnit {
		if v != nil {
			return *v
		}
		var ret ThroughputUnit
		return ret
	}).(ThroughputUnitOutput)
}

func (o ThroughputUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThroughputUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThroughputUnitInput is an input type that accepts ThroughputUnitArgs and ThroughputUnitOutput values.
// You can construct a concrete instance of `ThroughputUnitInput` via:
//
//	ThroughputUnitArgs{...}
type ThroughputUnitInput interface {
	pulumi.Input

	ToThroughputUnitOutput() ThroughputUnitOutput
	ToThroughputUnitOutputWithContext(context.Context) ThroughputUnitOutput
}

var throughputUnitPtrType = reflect.TypeOf((**ThroughputUnit)(nil)).Elem()

type ThroughputUnitPtrInput interface {
	pulumi.Input

	ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput
	ToThroughputUnitPtrOutputWithContext(context.Context) ThroughputUnitPtrOutput
}

type throughputUnitPtr string

func ThroughputUnitPtr(v string) ThroughputUnitPtrInput {
	return (*throughputUnitPtr)(&v)
}

func (*throughputUnitPtr) ElementType() reflect.Type {
	return throughputUnitPtrType
}

func (in *throughputUnitPtr) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return pulumi.ToOutput(in).(ThroughputUnitPtrOutput)
}

func (in *throughputUnitPtr) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThroughputUnitPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclProtocolTypeInput)(nil)).Elem(), AclProtocolType("IP"))
	pulumi.RegisterInputType(reflect.TypeOf((*AclProtocolTypePtrInput)(nil)).Elem(), AclProtocolType("IP"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThroughputUnitInput)(nil)).Elem(), ThroughputUnit("Mbps"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThroughputUnitPtrInput)(nil)).Elem(), ThroughputUnit("Mbps"))
	pulumi.RegisterOutputType(AclProtocolTypeOutput{})
	pulumi.RegisterOutputType(AclProtocolTypePtrOutput{})
	pulumi.RegisterOutputType(ThroughputUnitOutput{})
	pulumi.RegisterOutputType(ThroughputUnitPtrOutput{})
}
