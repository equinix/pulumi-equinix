// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AclRuleProtocolType string

const (
	AclRuleProtocolTypeIP  = AclRuleProtocolType("IP")
	AclRuleProtocolTypeTCP = AclRuleProtocolType("TCP")
	AclRuleProtocolTypeUDP = AclRuleProtocolType("UDP")
)

func (AclRuleProtocolType) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRuleProtocolType)(nil)).Elem()
}

func (e AclRuleProtocolType) ToAclRuleProtocolTypeOutput() AclRuleProtocolTypeOutput {
	return pulumi.ToOutput(e).(AclRuleProtocolTypeOutput)
}

func (e AclRuleProtocolType) ToAclRuleProtocolTypeOutputWithContext(ctx context.Context) AclRuleProtocolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AclRuleProtocolTypeOutput)
}

func (e AclRuleProtocolType) ToAclRuleProtocolTypePtrOutput() AclRuleProtocolTypePtrOutput {
	return e.ToAclRuleProtocolTypePtrOutputWithContext(context.Background())
}

func (e AclRuleProtocolType) ToAclRuleProtocolTypePtrOutputWithContext(ctx context.Context) AclRuleProtocolTypePtrOutput {
	return AclRuleProtocolType(e).ToAclRuleProtocolTypeOutputWithContext(ctx).ToAclRuleProtocolTypePtrOutputWithContext(ctx)
}

func (e AclRuleProtocolType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AclRuleProtocolType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AclRuleProtocolType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AclRuleProtocolType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AclRuleProtocolTypeOutput struct{ *pulumi.OutputState }

func (AclRuleProtocolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclRuleProtocolType)(nil)).Elem()
}

func (o AclRuleProtocolTypeOutput) ToAclRuleProtocolTypeOutput() AclRuleProtocolTypeOutput {
	return o
}

func (o AclRuleProtocolTypeOutput) ToAclRuleProtocolTypeOutputWithContext(ctx context.Context) AclRuleProtocolTypeOutput {
	return o
}

func (o AclRuleProtocolTypeOutput) ToAclRuleProtocolTypePtrOutput() AclRuleProtocolTypePtrOutput {
	return o.ToAclRuleProtocolTypePtrOutputWithContext(context.Background())
}

func (o AclRuleProtocolTypeOutput) ToAclRuleProtocolTypePtrOutputWithContext(ctx context.Context) AclRuleProtocolTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclRuleProtocolType) *AclRuleProtocolType {
		return &v
	}).(AclRuleProtocolTypePtrOutput)
}

func (o AclRuleProtocolTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AclRuleProtocolType] {
	return pulumix.Output[AclRuleProtocolType]{
		OutputState: o.OutputState,
	}
}

func (o AclRuleProtocolTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AclRuleProtocolTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AclRuleProtocolType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AclRuleProtocolTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AclRuleProtocolTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AclRuleProtocolType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AclRuleProtocolTypePtrOutput struct{ *pulumi.OutputState }

func (AclRuleProtocolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRuleProtocolType)(nil)).Elem()
}

func (o AclRuleProtocolTypePtrOutput) ToAclRuleProtocolTypePtrOutput() AclRuleProtocolTypePtrOutput {
	return o
}

func (o AclRuleProtocolTypePtrOutput) ToAclRuleProtocolTypePtrOutputWithContext(ctx context.Context) AclRuleProtocolTypePtrOutput {
	return o
}

func (o AclRuleProtocolTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AclRuleProtocolType] {
	return pulumix.Output[*AclRuleProtocolType]{
		OutputState: o.OutputState,
	}
}

func (o AclRuleProtocolTypePtrOutput) Elem() AclRuleProtocolTypeOutput {
	return o.ApplyT(func(v *AclRuleProtocolType) AclRuleProtocolType {
		if v != nil {
			return *v
		}
		var ret AclRuleProtocolType
		return ret
	}).(AclRuleProtocolTypeOutput)
}

func (o AclRuleProtocolTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AclRuleProtocolTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AclRuleProtocolType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AclRuleProtocolTypeInput is an input type that accepts AclRuleProtocolTypeArgs and AclRuleProtocolTypeOutput values.
// You can construct a concrete instance of `AclRuleProtocolTypeInput` via:
//
//	AclRuleProtocolTypeArgs{...}
type AclRuleProtocolTypeInput interface {
	pulumi.Input

	ToAclRuleProtocolTypeOutput() AclRuleProtocolTypeOutput
	ToAclRuleProtocolTypeOutputWithContext(context.Context) AclRuleProtocolTypeOutput
}

var aclRuleProtocolTypePtrType = reflect.TypeOf((**AclRuleProtocolType)(nil)).Elem()

type AclRuleProtocolTypePtrInput interface {
	pulumi.Input

	ToAclRuleProtocolTypePtrOutput() AclRuleProtocolTypePtrOutput
	ToAclRuleProtocolTypePtrOutputWithContext(context.Context) AclRuleProtocolTypePtrOutput
}

type aclRuleProtocolTypePtr string

func AclRuleProtocolTypePtr(v string) AclRuleProtocolTypePtrInput {
	return (*aclRuleProtocolTypePtr)(&v)
}

func (*aclRuleProtocolTypePtr) ElementType() reflect.Type {
	return aclRuleProtocolTypePtrType
}

func (in *aclRuleProtocolTypePtr) ToAclRuleProtocolTypePtrOutput() AclRuleProtocolTypePtrOutput {
	return pulumi.ToOutput(in).(AclRuleProtocolTypePtrOutput)
}

func (in *aclRuleProtocolTypePtr) ToAclRuleProtocolTypePtrOutputWithContext(ctx context.Context) AclRuleProtocolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AclRuleProtocolTypePtrOutput)
}

func (in *aclRuleProtocolTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AclRuleProtocolType] {
	return pulumix.Output[*AclRuleProtocolType]{
		OutputState: in.ToAclRuleProtocolTypePtrOutputWithContext(ctx).OutputState,
	}
}

type FileType string

const (
	FileTypeLicense   = FileType("LICENSE")
	FileTypeCloudInit = FileType("CLOUD_INIT")
)

func (FileType) ElementType() reflect.Type {
	return reflect.TypeOf((*FileType)(nil)).Elem()
}

func (e FileType) ToFileTypeOutput() FileTypeOutput {
	return pulumi.ToOutput(e).(FileTypeOutput)
}

func (e FileType) ToFileTypeOutputWithContext(ctx context.Context) FileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FileTypeOutput)
}

func (e FileType) ToFileTypePtrOutput() FileTypePtrOutput {
	return e.ToFileTypePtrOutputWithContext(context.Background())
}

func (e FileType) ToFileTypePtrOutputWithContext(ctx context.Context) FileTypePtrOutput {
	return FileType(e).ToFileTypeOutputWithContext(ctx).ToFileTypePtrOutputWithContext(ctx)
}

func (e FileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FileTypeOutput struct{ *pulumi.OutputState }

func (FileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileType)(nil)).Elem()
}

func (o FileTypeOutput) ToFileTypeOutput() FileTypeOutput {
	return o
}

func (o FileTypeOutput) ToFileTypeOutputWithContext(ctx context.Context) FileTypeOutput {
	return o
}

func (o FileTypeOutput) ToFileTypePtrOutput() FileTypePtrOutput {
	return o.ToFileTypePtrOutputWithContext(context.Background())
}

func (o FileTypeOutput) ToFileTypePtrOutputWithContext(ctx context.Context) FileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileType) *FileType {
		return &v
	}).(FileTypePtrOutput)
}

func (o FileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FileType] {
	return pulumix.Output[FileType]{
		OutputState: o.OutputState,
	}
}

func (o FileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FileTypePtrOutput struct{ *pulumi.OutputState }

func (FileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileType)(nil)).Elem()
}

func (o FileTypePtrOutput) ToFileTypePtrOutput() FileTypePtrOutput {
	return o
}

func (o FileTypePtrOutput) ToFileTypePtrOutputWithContext(ctx context.Context) FileTypePtrOutput {
	return o
}

func (o FileTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileType] {
	return pulumix.Output[*FileType]{
		OutputState: o.OutputState,
	}
}

func (o FileTypePtrOutput) Elem() FileTypeOutput {
	return o.ApplyT(func(v *FileType) FileType {
		if v != nil {
			return *v
		}
		var ret FileType
		return ret
	}).(FileTypeOutput)
}

func (o FileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FileTypeInput is an input type that accepts FileTypeArgs and FileTypeOutput values.
// You can construct a concrete instance of `FileTypeInput` via:
//
//	FileTypeArgs{...}
type FileTypeInput interface {
	pulumi.Input

	ToFileTypeOutput() FileTypeOutput
	ToFileTypeOutputWithContext(context.Context) FileTypeOutput
}

var fileTypePtrType = reflect.TypeOf((**FileType)(nil)).Elem()

type FileTypePtrInput interface {
	pulumi.Input

	ToFileTypePtrOutput() FileTypePtrOutput
	ToFileTypePtrOutputWithContext(context.Context) FileTypePtrOutput
}

type fileTypePtr string

func FileTypePtr(v string) FileTypePtrInput {
	return (*fileTypePtr)(&v)
}

func (*fileTypePtr) ElementType() reflect.Type {
	return fileTypePtrType
}

func (in *fileTypePtr) ToFileTypePtrOutput() FileTypePtrOutput {
	return pulumi.ToOutput(in).(FileTypePtrOutput)
}

func (in *fileTypePtr) ToFileTypePtrOutputWithContext(ctx context.Context) FileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FileTypePtrOutput)
}

func (in *fileTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FileType] {
	return pulumix.Output[*FileType]{
		OutputState: in.ToFileTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ThroughputUnit string

const (
	ThroughputUnitMbps = ThroughputUnit("Mbps")
	ThroughputUnitGbps = ThroughputUnit("Gbps")
)

func (ThroughputUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*ThroughputUnit)(nil)).Elem()
}

func (e ThroughputUnit) ToThroughputUnitOutput() ThroughputUnitOutput {
	return pulumi.ToOutput(e).(ThroughputUnitOutput)
}

func (e ThroughputUnit) ToThroughputUnitOutputWithContext(ctx context.Context) ThroughputUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThroughputUnitOutput)
}

func (e ThroughputUnit) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return e.ToThroughputUnitPtrOutputWithContext(context.Background())
}

func (e ThroughputUnit) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return ThroughputUnit(e).ToThroughputUnitOutputWithContext(ctx).ToThroughputUnitPtrOutputWithContext(ctx)
}

func (e ThroughputUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThroughputUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThroughputUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThroughputUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThroughputUnitOutput struct{ *pulumi.OutputState }

func (ThroughputUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThroughputUnit)(nil)).Elem()
}

func (o ThroughputUnitOutput) ToThroughputUnitOutput() ThroughputUnitOutput {
	return o
}

func (o ThroughputUnitOutput) ToThroughputUnitOutputWithContext(ctx context.Context) ThroughputUnitOutput {
	return o
}

func (o ThroughputUnitOutput) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return o.ToThroughputUnitPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThroughputUnit) *ThroughputUnit {
		return &v
	}).(ThroughputUnitPtrOutput)
}

func (o ThroughputUnitOutput) ToOutput(ctx context.Context) pulumix.Output[ThroughputUnit] {
	return pulumix.Output[ThroughputUnit]{
		OutputState: o.OutputState,
	}
}

func (o ThroughputUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThroughputUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThroughputUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThroughputUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThroughputUnitPtrOutput struct{ *pulumi.OutputState }

func (ThroughputUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThroughputUnit)(nil)).Elem()
}

func (o ThroughputUnitPtrOutput) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return o
}

func (o ThroughputUnitPtrOutput) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return o
}

func (o ThroughputUnitPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ThroughputUnit] {
	return pulumix.Output[*ThroughputUnit]{
		OutputState: o.OutputState,
	}
}

func (o ThroughputUnitPtrOutput) Elem() ThroughputUnitOutput {
	return o.ApplyT(func(v *ThroughputUnit) ThroughputUnit {
		if v != nil {
			return *v
		}
		var ret ThroughputUnit
		return ret
	}).(ThroughputUnitOutput)
}

func (o ThroughputUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThroughputUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThroughputUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThroughputUnitInput is an input type that accepts ThroughputUnitArgs and ThroughputUnitOutput values.
// You can construct a concrete instance of `ThroughputUnitInput` via:
//
//	ThroughputUnitArgs{...}
type ThroughputUnitInput interface {
	pulumi.Input

	ToThroughputUnitOutput() ThroughputUnitOutput
	ToThroughputUnitOutputWithContext(context.Context) ThroughputUnitOutput
}

var throughputUnitPtrType = reflect.TypeOf((**ThroughputUnit)(nil)).Elem()

type ThroughputUnitPtrInput interface {
	pulumi.Input

	ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput
	ToThroughputUnitPtrOutputWithContext(context.Context) ThroughputUnitPtrOutput
}

type throughputUnitPtr string

func ThroughputUnitPtr(v string) ThroughputUnitPtrInput {
	return (*throughputUnitPtr)(&v)
}

func (*throughputUnitPtr) ElementType() reflect.Type {
	return throughputUnitPtrType
}

func (in *throughputUnitPtr) ToThroughputUnitPtrOutput() ThroughputUnitPtrOutput {
	return pulumi.ToOutput(in).(ThroughputUnitPtrOutput)
}

func (in *throughputUnitPtr) ToThroughputUnitPtrOutputWithContext(ctx context.Context) ThroughputUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThroughputUnitPtrOutput)
}

func (in *throughputUnitPtr) ToOutput(ctx context.Context) pulumix.Output[*ThroughputUnit] {
	return pulumix.Output[*ThroughputUnit]{
		OutputState: in.ToThroughputUnitPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleProtocolTypeInput)(nil)).Elem(), AclRuleProtocolType("IP"))
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleProtocolTypePtrInput)(nil)).Elem(), AclRuleProtocolType("IP"))
	pulumi.RegisterInputType(reflect.TypeOf((*FileTypeInput)(nil)).Elem(), FileType("LICENSE"))
	pulumi.RegisterInputType(reflect.TypeOf((*FileTypePtrInput)(nil)).Elem(), FileType("LICENSE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThroughputUnitInput)(nil)).Elem(), ThroughputUnit("Mbps"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThroughputUnitPtrInput)(nil)).Elem(), ThroughputUnit("Mbps"))
	pulumi.RegisterOutputType(AclRuleProtocolTypeOutput{})
	pulumi.RegisterOutputType(AclRuleProtocolTypePtrOutput{})
	pulumi.RegisterOutputType(FileTypeOutput{})
	pulumi.RegisterOutputType(FileTypePtrOutput{})
	pulumi.RegisterOutputType(ThroughputUnitOutput{})
	pulumi.RegisterOutputType(ThroughputUnitPtrOutput{})
}
