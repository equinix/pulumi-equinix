// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get Equinix Network Edge device details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkedge.LookupDevice(ctx, &networkedge.LookupDeviceArgs{
//				Uuid: pulumi.StringRef("f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.LookupDevice(ctx, &networkedge.LookupDeviceArgs{
//				Name: pulumi.StringRef("Arcus-Gateway-A1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDevice(ctx *pulumi.Context, args *LookupDeviceArgs, opts ...pulumi.InvokeOption) (*LookupDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeviceResult
	err := ctx.Invoke("equinix:networkedge/getDevice:getDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevice.
type LookupDeviceArgs struct {
	// Name of an existing Equinix Network Edge device
	Name *string `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid *string `pulumi:"uuid"`
	// Device states to be considered valid when searching for a device by name
	//
	// NOTE: Exactly one of either `uuid` or `name` must be specified.
	ValidStatusList *string `pulumi:"validStatusList"`
}

// A collection of values returned by getDevice.
type LookupDeviceResult struct {
	AccountNumber string `pulumi:"accountNumber"`
	// Unique identifier of applied ACL template
	AclTemplateId       string `pulumi:"aclTemplateId"`
	AdditionalBandwidth int    `pulumi:"additionalBandwidth"`
	// Autonomous system number
	Asn            int                      `pulumi:"asn"`
	Byol           bool                     `pulumi:"byol"`
	ClusterDetails []GetDeviceClusterDetail `pulumi:"clusterDetails"`
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT)
	Connectivity string `pulumi:"connectivity"`
	CoreCount    int    `pulumi:"coreCount"`
	// diverse device uuid
	DiverseDeviceId string `pulumi:"diverseDeviceId"`
	// Name of the device with diverse device UUID
	DiverseDeviceName string `pulumi:"diverseDeviceName"`
	Hostname          string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name
	Ibx string `pulumi:"ibx"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	InterfaceCount int    `pulumi:"interfaceCount"`
	// List of device interfaces
	// * `interface.#.id` - interface identifier
	// * `interface.#.name` - interface name
	// * `interface.#.status` - interface status (AVAILABLE, RESERVED, ASSIGNED)
	// * `interface.#.operational_status` - interface operational status (up or down)
	// * `interface.#.mac_address` - interface MAC address
	// * `interface.#.ip_address` - interface IP address
	// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
	// * `interface.#.type` - interface type
	Interfaces  []GetDeviceInterface `pulumi:"interfaces"`
	LicenseFile string               `pulumi:"licenseFile"`
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	// Device license registration status
	// * APPLYING_LICENSE
	// * REGISTERED
	// * APPLIED
	// * WAITING_FOR_CLUSTER_SETUP
	// * REGISTRATION_FAILED
	// * NA
	LicenseStatus       string   `pulumi:"licenseStatus"`
	LicenseToken        string   `pulumi:"licenseToken"`
	MetroCode           string   `pulumi:"metroCode"`
	MgmtAclTemplateUuid string   `pulumi:"mgmtAclTemplateUuid"`
	Name                string   `pulumi:"name"`
	Notifications       []string `pulumi:"notifications"`
	OrderReference      string   `pulumi:"orderReference"`
	PackageCode         string   `pulumi:"packageCode"`
	ProjectId           string   `pulumi:"projectId"`
	PurchaseOrderNumber string   `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either primary or secondary
	RedundancyType string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices
	RedundantId string `pulumi:"redundantId"`
	// Device location region
	Region           string                     `pulumi:"region"`
	SecondaryDevices []GetDeviceSecondaryDevice `pulumi:"secondaryDevices"`
	SelfManaged      bool                       `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device
	SshIpAddress string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device
	SshIpFqdn string            `pulumi:"sshIpFqdn"`
	SshKeys   []GetDeviceSshKey `pulumi:"sshKeys"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status         string `pulumi:"status"`
	TermLength     int    `pulumi:"termLength"`
	Throughput     int    `pulumi:"throughput"`
	ThroughputUnit string `pulumi:"throughputUnit"`
	// Throughput Tier (applicable for C8000V, C8000V-SDWAN devices)
	Tier     int    `pulumi:"tier"`
	TypeCode string `pulumi:"typeCode"`
	// Device unique identifier
	Uuid string `pulumi:"uuid"`
	// Comma separated list of device states (from see `status` for full list) to be considered valid. Default is 'PROVISIONED'. Case insensitive.
	ValidStatusList     *string           `pulumi:"validStatusList"`
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	Version             string            `pulumi:"version"`
	WanInterfaceId      string            `pulumi:"wanInterfaceId"`
	// Device location zone code
	ZoneCode string `pulumi:"zoneCode"`
}

func LookupDeviceOutput(ctx *pulumi.Context, args LookupDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDeviceResultOutput, error) {
			args := v.(LookupDeviceArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDeviceResult
			secret, err := ctx.InvokePackageRaw("equinix:networkedge/getDevice:getDevice", args, &rv, "", opts...)
			if err != nil {
				return LookupDeviceResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDeviceResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDeviceResultOutput), nil
			}
			return output, nil
		}).(LookupDeviceResultOutput)
}

// A collection of arguments for invoking getDevice.
type LookupDeviceOutputArgs struct {
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// Device states to be considered valid when searching for a device by name
	//
	// NOTE: Exactly one of either `uuid` or `name` must be specified.
	ValidStatusList pulumi.StringPtrInput `pulumi:"validStatusList"`
}

func (LookupDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getDevice.
type LookupDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeviceResult)(nil)).Elem()
}

func (o LookupDeviceResultOutput) ToLookupDeviceResultOutput() LookupDeviceResultOutput {
	return o
}

func (o LookupDeviceResultOutput) ToLookupDeviceResultOutputWithContext(ctx context.Context) LookupDeviceResultOutput {
	return o
}

func (o LookupDeviceResultOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// Unique identifier of applied ACL template
func (o LookupDeviceResultOutput) AclTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.AclTemplateId }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// Autonomous system number
func (o LookupDeviceResultOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.Asn }).(pulumi.IntOutput)
}

func (o LookupDeviceResultOutput) Byol() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.Byol }).(pulumi.BoolOutput)
}

func (o LookupDeviceResultOutput) ClusterDetails() GetDeviceClusterDetailArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []GetDeviceClusterDetail { return v.ClusterDetails }).(GetDeviceClusterDetailArrayOutput)
}

// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT)
func (o LookupDeviceResultOutput) Connectivity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Connectivity }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.CoreCount }).(pulumi.IntOutput)
}

// diverse device uuid
func (o LookupDeviceResultOutput) DiverseDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.DiverseDeviceId }).(pulumi.StringOutput)
}

// Name of the device with diverse device UUID
func (o LookupDeviceResultOutput) DiverseDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.DiverseDeviceName }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name
func (o LookupDeviceResultOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Ibx }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) InterfaceCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.InterfaceCount }).(pulumi.IntOutput)
}

// List of device interfaces
// * `interface.#.id` - interface identifier
// * `interface.#.name` - interface name
// * `interface.#.status` - interface status (AVAILABLE, RESERVED, ASSIGNED)
// * `interface.#.operational_status` - interface operational status (up or down)
// * `interface.#.mac_address` - interface MAC address
// * `interface.#.ip_address` - interface IP address
// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
// * `interface.#.type` - interface type
func (o LookupDeviceResultOutput) Interfaces() GetDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []GetDeviceInterface { return v.Interfaces }).(GetDeviceInterfaceArrayOutput)
}

func (o LookupDeviceResultOutput) LicenseFile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.LicenseFile }).(pulumi.StringOutput)
}

// Unique identifier of applied license file
func (o LookupDeviceResultOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status
// * APPLYING_LICENSE
// * REGISTERED
// * APPLIED
// * WAITING_FOR_CLUSTER_SETUP
// * REGISTRATION_FAILED
// * NA
func (o LookupDeviceResultOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.LicenseStatus }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.LicenseToken }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.MetroCode }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) MgmtAclTemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.MgmtAclTemplateUuid }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

func (o LookupDeviceResultOutput) OrderReference() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.OrderReference }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) PackageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.PackageCode }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) PurchaseOrderNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.PurchaseOrderNumber }).(pulumi.StringOutput)
}

// Device redundancy type applicable for HA devices, either primary or secondary
func (o LookupDeviceResultOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices
func (o LookupDeviceResultOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region
func (o LookupDeviceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) SecondaryDevices() GetDeviceSecondaryDeviceArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []GetDeviceSecondaryDevice { return v.SecondaryDevices }).(GetDeviceSecondaryDeviceArrayOutput)
}

func (o LookupDeviceResultOutput) SelfManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeviceResult) bool { return v.SelfManaged }).(pulumi.BoolOutput)
}

// IP address of SSH enabled interface on the device
func (o LookupDeviceResultOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device
func (o LookupDeviceResultOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.SshIpFqdn }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) SshKeys() GetDeviceSshKeyArrayOutput {
	return o.ApplyT(func(v LookupDeviceResult) []GetDeviceSshKey { return v.SshKeys }).(GetDeviceSshKeyArrayOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
// * RESOURCE_UPGRADE_IN_PROGRESS
// * RESOURCE_UPGRADE_FAILED
func (o LookupDeviceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) TermLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.TermLength }).(pulumi.IntOutput)
}

func (o LookupDeviceResultOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.Throughput }).(pulumi.IntOutput)
}

func (o LookupDeviceResultOutput) ThroughputUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.ThroughputUnit }).(pulumi.StringOutput)
}

// Throughput Tier (applicable for C8000V, C8000V-SDWAN devices)
func (o LookupDeviceResultOutput) Tier() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeviceResult) int { return v.Tier }).(pulumi.IntOutput)
}

func (o LookupDeviceResultOutput) TypeCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.TypeCode }).(pulumi.StringOutput)
}

// Device unique identifier
func (o LookupDeviceResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Uuid }).(pulumi.StringOutput)
}

// Comma separated list of device states (from see `status` for full list) to be considered valid. Default is 'PROVISIONED'. Case insensitive.
func (o LookupDeviceResultOutput) ValidStatusList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeviceResult) *string { return v.ValidStatusList }).(pulumi.StringPtrOutput)
}

func (o LookupDeviceResultOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDeviceResult) map[string]string { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

func (o LookupDeviceResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.Version }).(pulumi.StringOutput)
}

func (o LookupDeviceResultOutput) WanInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.WanInterfaceId }).(pulumi.StringOutput)
}

// Device location zone code
func (o LookupDeviceResultOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeviceResult) string { return v.ZoneCode }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeviceResultOutput{})
}
