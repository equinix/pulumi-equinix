// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `networkedge.Device` allows creation and management of Equinix Network Edge virtual
// network devices.
//
// Network Edge virtual network devices can be created in two modes:
//
//   - **managed** - (default) Where Equinix manages connectivity and services in the device and
//     customer gets limited access to the device.
//   - **self-configured** - Where customer provisions and manages own services in the device with less
//     restricted access. Some device types are offered only in this mode.
//
// In addition to management modes, there are two software license modes available:
//
//   - **subscription** - Where Equinix provides software license, including end-to-end support, and
//     bills for the service respectively.
//   - **BYOL** - [bring your own license] Where customer brings his own, already procured device
//     software license. There are no charges associated with such license. It is the only licensing mode
//     for `self-configured` devices.
//
// ## Import
//
// # This resource can be imported using an existing ID
//
// ```sh
//
//	$ pulumi import equinix:networkedge/device:Device example {existing_id}
//
// ```
//
//	The `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported.
type Device struct {
	pulumi.CustomResourceState

	// Billing account number for a device.
	AccountNumber pulumi.StringOutput `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrOutput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntOutput `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntOutput `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrOutput `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrOutput `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrOutput `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount pulumi.IntOutput `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringOutput `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntOutput `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces DeviceInterfaceArrayOutput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrOutput `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringOutput `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringOutput `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing
	// mode.
	LicenseToken pulumi.StringPtrOutput `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode pulumi.StringOutput `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrOutput `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrOutput `pulumi:"orderReference"`
	// Device software package code.
	PackageCode pulumi.StringOutput `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrOutput `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringOutput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringOutput `pulumi:"redundantId"`
	// Device location region.
	Region pulumi.StringOutput `pulumi:"region"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrOutput `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrOutput `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringOutput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringOutput `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrOutput `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Device term length.
	TermLength pulumi.IntOutput `pulumi:"termLength"`
	// Device license throughput.
	Throughput pulumi.IntPtrOutput `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrOutput `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode pulumi.StringOutput `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
	//   on a device (max one key).  See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapOutput `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version pulumi.StringOutput `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrOutput `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode pulumi.StringOutput `pulumi:"zoneCode"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountNumber == nil {
		return nil, errors.New("invalid value for required argument 'AccountNumber'")
	}
	if args.CoreCount == nil {
		return nil, errors.New("invalid value for required argument 'CoreCount'")
	}
	if args.MetroCode == nil {
		return nil, errors.New("invalid value for required argument 'MetroCode'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.PackageCode == nil {
		return nil, errors.New("invalid value for required argument 'PackageCode'")
	}
	if args.TermLength == nil {
		return nil, errors.New("invalid value for required argument 'TermLength'")
	}
	if args.TypeCode == nil {
		return nil, errors.New("invalid value for required argument 'TypeCode'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("equinix:networkedge/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("equinix:networkedge/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// Billing account number for a device.
	AccountNumber *string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn *int `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId *string `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails *DeviceClusterDetails `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount *int `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx *string `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces []DeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus *string `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing
	// mode.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode *string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode *string `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId *string `pulumi:"redundantId"`
	// Device location region.
	Region *string `pulumi:"region"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice *DeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix-managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress *string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn *string `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *DeviceSshKey `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// Device term length.
	TermLength *int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode *string `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
	//   on a device (max one key).  See SSH Key below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version *string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode *string `pulumi:"zoneCode"`
}

type DeviceState struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringPtrInput
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrInput
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrInput
	// Number of CPU cores used by device.
	CoreCount pulumi.IntPtrInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces DeviceInterfaceArrayInput
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringPtrInput
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringPtrInput
	// License Token applicable for some device types in BYOL licensing
	// mode.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringPtrInput
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringPtrInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringPtrInput
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringPtrInput
	// Device location region.
	Region pulumi.StringPtrInput
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringPtrInput
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrInput
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput
	// Device term length.
	TermLength pulumi.IntPtrInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Device type code.
	TypeCode pulumi.StringPtrInput
	// Device unique identifier.
	Uuid pulumi.StringPtrInput
	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
	//   on a device (max one key).  See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringPtrInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
	// Device location zone code.
	ZoneCode pulumi.StringPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// Billing account number for a device.
	AccountNumber string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId *string `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails *DeviceClusterDetails `pulumi:"clusterDetails"`
	// Number of CPU cores used by device.
	CoreCount int `pulumi:"coreCount"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License Token applicable for some device types in BYOL licensing
	// mode.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status
	// notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode string `pulumi:"packageCode"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice *DeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix-managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *DeviceSshKey `pulumi:"sshKey"`
	// Device term length.
	TermLength int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Device type code.
	TypeCode string `pulumi:"typeCode"`
	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
	//   on a device (max one key).  See SSH Key below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringInput
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e.,
	// `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrInput
	// An object that has the cluster details. See
	// Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrInput
	// Number of CPU cores used by device.
	CoreCount pulumi.IntInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringPtrInput
	// License Token applicable for some device types in BYOL licensing
	// mode.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringInput
	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status
	// notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e.,
	// `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrInput
	// Device term length.
	TermLength pulumi.IntInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Device type code.
	TypeCode pulumi.StringInput
	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
	//   on a device (max one key).  See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

// Billing account number for a device.
func (o DeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.AccountNumber }).(pulumi.StringOutput)
}

// Identifier of a WAN interface ACL template that will be applied on the device.
func (o DeviceOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AclTemplateId }).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, that will be
// allocated to the device (in addition to default 15Mbps).
func (o DeviceOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o DeviceOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.Asn }).(pulumi.IntOutput)
}

// Boolean value that determines device licensing mode, i.e.,
// `bring your own license` or `subscription` (default).
func (o DeviceOutput) Byol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.Byol }).(pulumi.BoolPtrOutput)
}

// Identifier of a cloud init file that will be applied on the device.
func (o DeviceOutput) CloudInitFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.CloudInitFileId }).(pulumi.StringPtrOutput)
}

// An object that has the cluster details. See
// Cluster Details below for more details.
func (o DeviceOutput) ClusterDetails() DeviceClusterDetailsPtrOutput {
	return o.ApplyT(func(v *Device) DeviceClusterDetailsPtrOutput { return v.ClusterDetails }).(DeviceClusterDetailsPtrOutput)
}

// Number of CPU cores used by device.
func (o DeviceOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.CoreCount }).(pulumi.IntOutput)
}

// Device hostname prefix.
func (o DeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name.
func (o DeviceOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Ibx }).(pulumi.StringOutput)
}

// Number of network interfaces on a device. If not specified,
// default number for a given device type will be used.
func (o DeviceOutput) InterfaceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.InterfaceCount }).(pulumi.IntOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o DeviceOutput) Interfaces() DeviceInterfaceArrayOutput {
	return o.ApplyT(func(v *Device) DeviceInterfaceArrayOutput { return v.Interfaces }).(DeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// device. Applicable for some device types in BYOL licensing mode.
func (o DeviceOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.LicenseFile }).(pulumi.StringPtrOutput)
}

// Identifier of a license file that will be applied on the device.
func (o DeviceOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o DeviceOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LicenseStatus }).(pulumi.StringOutput)
}

// License Token applicable for some device types in BYOL licensing
// mode.
func (o DeviceOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device location metro code.
func (o DeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.MetroCode }).(pulumi.StringOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on the device.
func (o DeviceOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.MgmtAclTemplateUuid }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive device status
// notifications.
func (o DeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Name/number used to identify device order on the invoice.
func (o DeviceOutput) OrderReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.OrderReference }).(pulumi.StringPtrOutput)
}

// Device software package code.
func (o DeviceOutput) PackageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.PackageCode }).(pulumi.StringOutput)
}

// Purchase order number associated with a device order.
func (o DeviceOutput) PurchaseOrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.PurchaseOrderNumber }).(pulumi.StringPtrOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o DeviceOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o DeviceOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region.
func (o DeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Definition of secondary device for redundant
// device configurations. See Secondary Device below for more details.
func (o DeviceOutput) SecondaryDevice() DeviceSecondaryDevicePtrOutput {
	return o.ApplyT(func(v *Device) DeviceSecondaryDevicePtrOutput { return v.SecondaryDevice }).(DeviceSecondaryDevicePtrOutput)
}

// Boolean value that determines device management mode, i.e.,
// `self-managed` or `Equinix-managed` (default).
func (o DeviceOutput) SelfManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.SelfManaged }).(pulumi.BoolPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o DeviceOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device.
func (o DeviceOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.SshIpFqdn }).(pulumi.StringOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o DeviceOutput) SshKey() DeviceSshKeyPtrOutput {
	return o.ApplyT(func(v *Device) DeviceSshKeyPtrOutput { return v.SshKey }).(DeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Device term length.
func (o DeviceOutput) TermLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.TermLength }).(pulumi.IntOutput)
}

// Device license throughput.
func (o DeviceOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.Throughput }).(pulumi.IntPtrOutput)
}

// License throughput unit. One of `Mbps` or `Gbps`.
func (o DeviceOutput) ThroughputUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.ThroughputUnit }).(pulumi.StringPtrOutput)
}

// Device type code.
func (o DeviceOutput) TypeCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.TypeCode }).(pulumi.StringOutput)
}

// Device unique identifier.
func (o DeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Map of vendor specific configuration parameters for a device
// (controller1, activationKey, managementType, siteId, systemIpAddress)
//   - `ssh-key` - (Optional) Definition of SSH key that will be provisioned
//     on a device (max one key).  See SSH Key below for more details.
func (o DeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Device) pulumi.StringMapOutput { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

// Device software software version.
func (o DeviceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// device interface id picked for WAN
func (o DeviceOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.WanInterfaceId }).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o DeviceOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ZoneCode }).(pulumi.StringOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
