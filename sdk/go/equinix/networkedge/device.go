// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"errors"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource `networkedge.Device` allows creation and management of Equinix Network Edge virtual network devices.
//
// Network Edge virtual network devices can be created in two modes:
//
// * **managed** - (default) Where Equinix manages connectivity and services in the device and customer gets limited access to the device.
// * **self-configured** - Where customer provisions and manages own services in the device with less restricted access. Some device types are offered only in this mode.
//
// In addition to management modes, there are two software license modes available:
//
// * **subscription** - Where Equinix provides software license, including end-to-end support, and bills for the service respectively.
// * **BYOL** - [bring your own license] Where customer brings his own, already procured device software license. There are no charges associated with such license. It is the only licensing mode for `self-configured` devices.
//
// ## Example Usage
// ### example 1
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dc := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("DC"),
//			}, nil)
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "csr1000vHa", &networkedge.DeviceArgs{
//				Name:           pulumi.String("tf-csr1000v-p"),
//				Throughput:     pulumi.Int(500),
//				ThroughputUnit: pulumi.String(networkedge.ThroughputUnitMbps),
//				MetroCode: pulumi.String(dc.ApplyT(func(dc networkedge.GetAccountResult) (*string, error) {
//					return &dc.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("CSR1000V"),
//				SelfManaged:  pulumi.Bool(false),
//				Connectivity: pulumi.String("INTERNET-ACCESS"),
//				Byol:         pulumi.Bool(false),
//				PackageCode:  pulumi.String("SEC"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				Hostname:   pulumi.String("csr1000v-p"),
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(dc.ApplyT(func(dc networkedge.GetAccountResult) (*string, error) {
//					return &dc.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:   pulumi.String("16.09.05"),
//				CoreCount: pulumi.Int(2),
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("tf-csr1000v-s"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					Hostname: pulumi.String("csr1000v-s"),
//					Notifications: pulumi.StringArray{
//						pulumi.String("john@equinix.com"),
//						pulumi.String("marry@equinix.com"),
//					},
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 2
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "panwCluster", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-panw"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("PA-VM"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("VM100"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("10.1.3"),
//				InterfaceCount: pulumi.Int(10),
//				CoreCount:      pulumi.Int(2),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//				AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
//				ClusterDetails: &networkedge.DeviceClusterDetailsArgs{
//					ClusterName: pulumi.String("tf-panw-cluster"),
//					Node0: &networkedge.DeviceClusterDetailsNode0Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode0VendorConfigurationArgs{
//							Hostname: pulumi.String("panw-node0"),
//						},
//						LicenseToken: pulumi.String("licenseToken"),
//					},
//					Node1: &networkedge.DeviceClusterDetailsNode1Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode1VendorConfigurationArgs{
//							Hostname: pulumi.String("panw-node1"),
//						},
//						LicenseToken: pulumi.String("licenseToken"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 3
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix"
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			filepath := "cloudInitFileFolder/TF-AVX-cloud-init-file.txt"
//			if param := cfg.Get("filepath"); param != "" {
//				filepath = param
//			}
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			aviatrixCloudinitFile, err := networkedge.NewNetworkFile(ctx, "aviatrixCloudinitFile", &networkedge.NetworkFileArgs{
//				FileName: pulumi.String("TF-AVX-cloud-init-file.txt"),
//				Content: pulumi.String(std.FileOutput(ctx, std.FileOutputArgs{
//					Input: pulumi.String(filepath),
//				}, nil).ApplyT(func(invoke std.FileResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput).ApplyT(func(x *string) equinix.Metro { return equinix.Metro(*x) }).(equinix.MetroOutput),
//				DeviceTypeCode: pulumi.String("AVIATRIX_EDGE_10"),
//				ProcessType:    pulumi.String(networkedge.FileTypeCloudInit),
//				SelfManaged:    pulumi.Bool(true),
//				Byol:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.NewDevice(ctx, "aviatrixSingle", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-aviatrix"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("AVIATRIX_EDGE_10"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:         pulumi.String("6.9"),
//				CoreCount:       pulumi.Int(2),
//				CloudInitFileId: aviatrixCloudinitFile.Uuid,
//				AclTemplateId:   pulumi.String("c06150ea-b604-4ad1-832a-d63936e9b938"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 4
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				Name:      pulumi.String("account-name"),
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "c8kvSingle", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-c8kv"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("C8000V"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("network-essentials"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@equinix.com"),
//				},
//				Hostname: pulumi.String("C8KV"),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("17.06.01a"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(12),
//				LicenseToken:        pulumi.String("valid-license-token"),
//				AdditionalBandwidth: pulumi.Int(5),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test-username"),
//					KeyName:  pulumi.String("valid-key-name"),
//				},
//				AclTemplateId: pulumi.String("3e548c02-9164-4197-aa23-05b1f644883c"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 5
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				Name:      pulumi.String("account-name"),
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "vsrxSingle", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-c8kv-sdwan"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("VSRX"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@equinix.com"),
//				},
//				Hostname: pulumi.String("VSRX"),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("23.2R1.13"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(12),
//				AdditionalBandwidth: pulumi.Int(5),
//				ProjectId:           pulumi.String("a86d7112-d740-4758-9c9c-31e66373746b"),
//				DiverseDeviceId:     pulumi.String("ed7891bd-15b4-4f72-ac56-d96cfdacddcc"),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test-username"),
//					KeyName:  pulumi.String("valid-key-name"),
//				},
//				AclTemplateId: pulumi.String("3e548c02-9164-4197-aa23-05b1f644883c"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 6
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				Name:      pulumi.String("account-name"),
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			testPublicKey, err := networkedge.NewSshKey(ctx, "testPublicKey", &networkedge.SshKeyArgs{
//				Name:      pulumi.String("key-name"),
//				PublicKey: pulumi.String("ssh-dss key-value"),
//				Type:      pulumi.String("DSA"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.NewDevice(ctx, "aristaHa", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-arista-p"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("ARISTA-ROUTER"),
//				SelfManaged:  pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				Byol:         pulumi.Bool(true),
//				PackageCode:  pulumi.String("CloudEOS"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@equinix.com"),
//				},
//				Hostname: pulumi.String("arista-p"),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("4.29.0"),
//				CoreCount:           pulumi.Int(4),
//				TermLength:          pulumi.Int(12),
//				AdditionalBandwidth: pulumi.Int(5),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test-username"),
//					KeyName:  testPublicKey.Name,
//				},
//				AclTemplateId: pulumi.String("c637a17b-7a6a-4486-924b-30e6c36904b0"),
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("tf-arista-s"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					Hostname: pulumi.String("arista-s"),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					AclTemplateId: pulumi.String("fee5e2c0-6198-4ce6-9cbd-bbe6c1dbe138"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 7
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				Name:      pulumi.String("account-name"),
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			testPublicKey, err := networkedge.NewSshKey(ctx, "testPublicKey", &networkedge.SshKeyArgs{
//				Name:      pulumi.String("key-name"),
//				PublicKey: pulumi.String("ssh-dss key-value"),
//				Type:      pulumi.String("DSA"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.NewDevice(ctx, "bluecatBddsHa", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-bluecat-bdds-p"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("BLUECAT"),
//				SelfManaged:  pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				Byol:         pulumi.Bool(true),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@equinix.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:    pulumi.String("9.6.0"),
//				CoreCount:  pulumi.Int(2),
//				TermLength: pulumi.Int(12),
//				VendorConfiguration: pulumi.StringMap{
//					"hostname":        pulumi.String("test"),
//					"privateAddress":  pulumi.String("x.x.x.x"),
//					"privateCidrMask": pulumi.String("24"),
//					"privateGateway":  pulumi.String("x.x.x.x"),
//					"licenseKey":      pulumi.String("xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"),
//					"licenseId":       pulumi.String("xxxxxxxxxxxxxxx"),
//				},
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test-username"),
//					KeyName:  testPublicKey.Name,
//				},
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("tf-bluecat-bdds-s"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					VendorConfiguration: pulumi.StringMap{
//						"hostname":        pulumi.String("test"),
//						"privateAddress":  pulumi.String("x.x.x.x"),
//						"privateCidrMask": pulumi.String("24"),
//						"privateGateway":  pulumi.String("x.x.x.x"),
//						"licenseKey":      pulumi.String("xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"),
//						"licenseId":       pulumi.String("xxxxxxxxxxxxxxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 8
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix"
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				Name:      pulumi.String("account-name"),
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			bluecatEdgeServicePointCloudinitPrimaryFile, err := networkedge.NewNetworkFile(ctx, "bluecatEdgeServicePointCloudinitPrimaryFile", &networkedge.NetworkFileArgs{
//				FileName: pulumi.String("TF-BLUECAT-ESP-cloud-init-file.txt"),
//				Content: pulumi.String(std.FileOutput(ctx, std.FileOutputArgs{
//					Input: pulumi.Any(filepath),
//				}, nil).ApplyT(func(invoke std.FileResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput).ApplyT(func(x *string) equinix.Metro { return equinix.Metro(*x) }).(equinix.MetroOutput),
//				DeviceTypeCode: pulumi.String("BLUECAT-EDGE-SERVICE-POINT"),
//				ProcessType:    pulumi.String(networkedge.FileTypeCloudInit),
//				SelfManaged:    pulumi.Bool(true),
//				Byol:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			bluecatEdgeServicePointCloudinitSecondaryFile, err := networkedge.NewNetworkFile(ctx, "bluecatEdgeServicePointCloudinitSecondaryFile", &networkedge.NetworkFileArgs{
//				FileName: pulumi.String("TF-BLUECAT-ESP-cloud-init-file.txt"),
//				Content: pulumi.String(std.FileOutput(ctx, std.FileOutputArgs{
//					Input: pulumi.Any(filepath),
//				}, nil).ApplyT(func(invoke std.FileResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput).ApplyT(func(x *string) equinix.Metro { return equinix.Metro(*x) }).(equinix.MetroOutput),
//				DeviceTypeCode: pulumi.String("BLUECAT-EDGE-SERVICE-POINT"),
//				ProcessType:    pulumi.String(networkedge.FileTypeCloudInit),
//				SelfManaged:    pulumi.Bool(true),
//				Byol:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.NewDevice(ctx, "bluecatEdgeServicePointHa", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-bluecat-edge-service-point-p"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("BLUECAT-EDGE-SERVICE-POINT"),
//				SelfManaged:  pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				Byol:         pulumi.Bool(true),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@equinix.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				CloudInitFileId: bluecatEdgeServicePointCloudinitPrimaryFile.Uuid,
//				Version:         pulumi.String("4.6.3"),
//				CoreCount:       pulumi.Int(4),
//				TermLength:      pulumi.Int(12),
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("tf-bluecat-edge-service-point-s"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					CloudInitFileId: bluecatEdgeServicePointCloudinitSecondaryFile.Uuid,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example 9
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "panwCluster", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-panw"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("PA-VM"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("VM100"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("11.1.3"),
//				InterfaceCount: pulumi.Int(10),
//				CoreCount:      pulumi.Int(2),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//				AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
//				ClusterDetails: &networkedge.DeviceClusterDetailsArgs{
//					ClusterName: pulumi.String("tf-panw-cluster"),
//					Node0: &networkedge.DeviceClusterDetailsNode0Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode0VendorConfigurationArgs{
//							Hostname:          pulumi.String("panw-node0"),
//							PanoramaIpAddress: pulumi.String("x.x.x.x"),
//							PanoramaAuthKey:   pulumi.String("xxxxxxxxxxx"),
//						},
//						LicenseToken: pulumi.String("licenseToken"),
//					},
//					Node1: &networkedge.DeviceClusterDetailsNode1Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode1VendorConfigurationArgs{
//							Hostname:          pulumi.String("panw-node1"),
//							PanoramaIpAddress: pulumi.String("x.x.x.x"),
//							PanoramaAuthKey:   pulumi.String("xxxxxxxxxxx"),
//						},
//						LicenseToken: pulumi.String("licenseToken"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example Aviatrix Transit Edge
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix"
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			filepath := "cloudInitFileFolder/TF-AVX-cloud-init-file.txt"
//			if param := cfg.Get("filepath"); param != "" {
//				filepath = param
//			}
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			aviatrixCloudinitFile, err := networkedge.NewNetworkFile(ctx, "aviatrixCloudinitFile", &networkedge.NetworkFileArgs{
//				FileName: pulumi.String("TF-AVX-cloud-init-file.txt"),
//				Content: pulumi.String(std.FileOutput(ctx, std.FileOutputArgs{
//					Input: pulumi.String(filepath),
//				}, nil).ApplyT(func(invoke std.FileResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput)),
//				MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput).ApplyT(func(x *string) equinix.Metro { return equinix.Metro(*x) }).(equinix.MetroOutput),
//				DeviceTypeCode: pulumi.String("AVIATRIX_TRANSIT_EDGE"),
//				ProcessType:    pulumi.String(networkedge.FileTypeCloudInit),
//				SelfManaged:    pulumi.Bool(true),
//				Byol:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkedge.NewDevice(ctx, "aviatrix-transit-edge-single", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-aviatrix"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("AVIATRIX_TRANSIT_EDGE"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:         pulumi.String("7.2.a"),
//				CoreCount:       pulumi.Int(2),
//				CloudInitFileId: aviatrixCloudinitFile.Uuid,
//				AclTemplateId:   pulumi.String("c06150ea-b604-4ad1-832a-d63936e9b938"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example aruba edgeconnect ha device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "ARUBA-EDGECONNECT-AM", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_Aruba_Edge_Connect"),
//				ProjectId: pulumi.String("XXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("EDGECONNECT-SDWAN"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("EC-V"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("9.4.2.3"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(1),
//				AdditionalBandwidth: pulumi.Int(50),
//				InterfaceCount:      pulumi.Int(32),
//				AclTemplateId:       pulumi.String("XXXXXXX"),
//				VendorConfiguration: pulumi.StringMap{
//					"accountKey":   pulumi.String("xxxxx"),
//					"accountName":  pulumi.String("xxxx"),
//					"applianceTag": pulumi.String("tests"),
//					"hostname":     pulumi.String("test"),
//				},
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("TF_CHECKPOINT"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					AclTemplateId: pulumi.String("XXXXXXX"),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					VendorConfiguration: pulumi.StringMap{
//						"accountKey":   pulumi.String("xxxxx"),
//						"accountName":  pulumi.String("xxxx"),
//						"applianceTag": pulumi.String("test"),
//						"hostname":     pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example c8000v byol without default password
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "c8000v-byol-withtout-default-password", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-c8000v-byol"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:                pulumi.String("C8000V"),
//				SelfManaged:             pulumi.Bool(true),
//				Byol:                    pulumi.Bool(true),
//				GenerateDefaultPassword: pulumi.Bool(false),
//				PackageCode:             pulumi.String("VM100"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("17.11.01a"),
//				InterfaceCount: pulumi.Int(10),
//				CoreCount:      pulumi.Int(2),
//				Tier:           pulumi.Int(1),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//				AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example c8000v byol with bandwidth throughput
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "c8000v-byol-throughput", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-c8000v-byol"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("C8000V"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("VM100"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("17.11.01a"),
//				InterfaceCount: pulumi.Int(10),
//				CoreCount:      pulumi.Int(2),
//				Throughput:     pulumi.Int(100),
//				ThroughputUnit: pulumi.String(networkedge.ThroughputUnitMbps),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//				AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example c8000v byol with bandwidth tier
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "c8000v-byol-tier", &networkedge.DeviceArgs{
//				Name: pulumi.String("tf-c8000v-byol"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("C8000V"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("VM100"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("17.11.01a"),
//				InterfaceCount: pulumi.Int(10),
//				CoreCount:      pulumi.Int(2),
//				Tier:           pulumi.Int(1),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//				AclTemplateId: pulumi.String("0bff6e05-f0e7-44cd-804a-25b92b835f8b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example checkpoint single device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "CHECKPOINT-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_CHECKPOINT"),
//				ProjectId: pulumi.String("XXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("CGUARD"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("R81.20"),
//				Hostname:            pulumi.String("test"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(1),
//				AdditionalBandwidth: pulumi.Int(5),
//				AclTemplateId:       pulumi.String("XXXXXXX"),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("XXXXX"),
//					KeyName:  pulumi.String("XXXXXX"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example cisco ftd cluster znpd
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "cisco-FTD-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_Cisco_NGFW_CLUSTER_ZNPD"),
//				ProjectId: pulumi.String("XXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("Cisco_NGFW"),
//				SelfManaged:  pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				Byol:         pulumi.Bool(true),
//				PackageCode:  pulumi.String("FTDv10"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("7.0.4-55"),
//				Hostname:       pulumi.String("test"),
//				CoreCount:      pulumi.Int(4),
//				TermLength:     pulumi.Int(1),
//				InterfaceCount: pulumi.Int(10),
//				ClusterDetails: &networkedge.DeviceClusterDetailsArgs{
//					ClusterName: pulumi.String("tf-ftd-cluster"),
//					Node0: &networkedge.DeviceClusterDetailsNode0Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode0VendorConfigurationArgs{
//							Hostname:       pulumi.String("test"),
//							ActivationKey:  pulumi.String("XXXXX"),
//							Controller1:    pulumi.String("X.X.X.X"),
//							ManagementType: pulumi.String("FMC"),
//						},
//					},
//					Node1: &networkedge.DeviceClusterDetailsNode1Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode1VendorConfigurationArgs{
//							Hostname:       pulumi.String("test"),
//							ManagementType: pulumi.String("FMC"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example f5xc single
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "f5xc-single", &networkedge.DeviceArgs{
//				Name:      pulumi.String("tf-f5xc"),
//				ProjectId: pulumi.String("XXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("F5XC"),
//				SelfManaged:  pulumi.Bool(true),
//				Byol:         pulumi.Bool(true),
//				Connectivity: pulumi.String("INTERNET-ACCESS"),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(1),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				AclTemplateId:  pulumi.String("xxxx"),
//				Version:        pulumi.String("9.2025.17"),
//				InterfaceCount: pulumi.Int(8),
//				CoreCount:      pulumi.Int(8),
//				VendorConfiguration: pulumi.StringMap{
//					"token":    pulumi.String("XXXXXXXXXX"),
//					"hostname": pulumi.String("XXXX"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example fortigate sdwan single device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "FTNT-SDWAN-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_FTNT-SDWAN"),
//				ProjectId: pulumi.String("XXXXXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("FG-SDWAN"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("VM02"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("7.0.14"),
//				Hostname:            pulumi.String("test"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(1),
//				AdditionalBandwidth: pulumi.Int(50),
//				AclTemplateId:       pulumi.String("XXXXXXXX"),
//				VendorConfiguration: pulumi.StringMap{
//					"adminPassword": pulumi.String("XXXXX"),
//					"controller1":   pulumi.String("X.X.X.X"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example infoblox cluster device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "INFOBLOX-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_INFOBLOX"),
//				ProjectId: pulumi.String("XXXXXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("INFOBLOX-GRID-MEMBER"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:      pulumi.String("9.0.5"),
//				Connectivity: pulumi.String("PRIVATE"),
//				CoreCount:    pulumi.Int(8),
//				TermLength:   pulumi.Int(1),
//				ClusterDetails: &networkedge.DeviceClusterDetailsArgs{
//					ClusterName: pulumi.String("tf-infoblox-cluster"),
//					Node0: &networkedge.DeviceClusterDetailsNode0Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode0VendorConfigurationArgs{
//							AdminPassword: pulumi.String("xxxxxxx"),
//							IpAddress:     pulumi.String("X.X.X.X"),
//							SubnetMaskIp:  pulumi.String("X.X.X.X"),
//							GatewayIp:     pulumi.String("X.X.X.X"),
//						},
//					},
//					Node1: &networkedge.DeviceClusterDetailsNode1Args{
//						VendorConfiguration: &networkedge.DeviceClusterDetailsNode1VendorConfigurationArgs{
//							AdminPassword: pulumi.String("xxxxxxx"),
//							IpAddress:     pulumi.String("X.X.X.X"),
//							SubnetMaskIp:  pulumi.String("X.X.X.X"),
//							GatewayIp:     pulumi.String("X.X.X.X"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example infoblox ha device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "INFOBLOX-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_INFOBLOX"),
//				ProjectId: pulumi.String("XXXXXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("INFOBLOX-GRID-MEMBER"),
//				SelfManaged:  pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				Byol:         pulumi.Bool(true),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:    pulumi.String("9.0.5"),
//				CoreCount:  pulumi.Int(8),
//				TermLength: pulumi.Int(1),
//				VendorConfiguration: pulumi.StringMap{
//					"adminPassword": pulumi.String("X.X.X.X"),
//					"ipAddress":     pulumi.String("X.X.X.X"),
//					"subnetMaskIp":  pulumi.String("X.X.X.X"),
//					"gatewayIp":     pulumi.String("X.X.X.X"),
//				},
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("TF_INFOBLOX-Sec"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					VendorConfiguration: pulumi.StringMap{
//						"adminPassword": pulumi.String("X.X.X.X"),
//						"ipAddress":     pulumi.String("X.X.X.X"),
//						"subnetMaskIp":  pulumi.String("X.X.X.X"),
//						"gatewayIp":     pulumi.String("X.X.X.X"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example infoblox single device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "INFOBLOX-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_INFOBLOX"),
//				ProjectId: pulumi.String("XXXXXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("INFOBLOX-GRID-MEMBER"),
//				SelfManaged:  pulumi.Bool(true),
//				Byol:         pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:    pulumi.String("9.0.5"),
//				CoreCount:  pulumi.Int(8),
//				TermLength: pulumi.Int(1),
//				VendorConfiguration: pulumi.StringMap{
//					"adminPassword": pulumi.String("xxxxxx"),
//					"ipAddress":     pulumi.String("X.X.X.X"),
//					"subnetMaskIp":  pulumi.String("X.X.X.X"),
//					"gatewayIp":     pulumi.String("X.X.X.X"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example versa sdwan ha device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "FTNT-SDWAN-SV", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_VERSA-SDWAN"),
//				ProjectId: pulumi.String("XXXXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("VERSA_SDWAN"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(true),
//				PackageCode: pulumi.String("FLEX_VNF_2"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("21.2.3"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(1),
//				AdditionalBandwidth: pulumi.Int(50),
//				AclTemplateId:       pulumi.String("XXXXXXXXX"),
//				VendorConfiguration: pulumi.StringMap{
//					"controller1":  pulumi.String("X.X.X.X"),
//					"controller2":  pulumi.String("X.X.X.X"),
//					"localId":      pulumi.String("test@test.com"),
//					"remoteId":     pulumi.String("test@test.com"),
//					"serialNumber": pulumi.String("4"),
//				},
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("Praveena_TF_VERSA"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					AclTemplateId: pulumi.String("XXXXXXXX"),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//					VendorConfiguration: pulumi.StringMap{
//						"controller1":  pulumi.String("X.X.X.X"),
//						"controller2":  pulumi.String("X.X.X.X"),
//						"localId":      pulumi.String("test@test.com"),
//						"remoteId":     pulumi.String("test@test.com"),
//						"serialNumber": pulumi.String("4"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example vyos router ha device
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "VYOS-AM", &networkedge.DeviceArgs{
//				Name:      pulumi.String("TF_VYOS"),
//				ProjectId: pulumi.String("XXXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:    pulumi.String("VYOS-ROUTER"),
//				SelfManaged: pulumi.Bool(true),
//				Byol:        pulumi.Bool(false),
//				PackageCode: pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("test@eq.com"),
//				},
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:             pulumi.String("1.4.1-2501"),
//				Hostname:            pulumi.String("test"),
//				CoreCount:           pulumi.Int(2),
//				TermLength:          pulumi.Int(1),
//				AdditionalBandwidth: pulumi.Int(50),
//				AclTemplateId:       pulumi.String("XXXXXXXX"),
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("xxxxxxxx"),
//				},
//				SecondaryDevice: &networkedge.DeviceSecondaryDeviceArgs{
//					Name: pulumi.String("TF_CHECKPOINT"),
//					MetroCode: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.MetroCode, nil
//					}).(pulumi.StringPtrOutput),
//					AccountNumber: sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//						return &sv.Number, nil
//					}).(pulumi.StringPtrOutput),
//					Hostname:      pulumi.String("test"),
//					AclTemplateId: pulumi.String("XXXXXXXXXXX"),
//					Notifications: pulumi.StringArray{
//						pulumi.String("test@eq.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example zscaler appc
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "zscaler-appc-single", &networkedge.DeviceArgs{
//				Name:      pulumi.String("tf-zscaler-appc"),
//				ProjectId: pulumi.String("XXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("ZSCALER-APPC"),
//				SelfManaged:  pulumi.Bool(true),
//				Byol:         pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("23.395.1"),
//				InterfaceCount: pulumi.Int(1),
//				CoreCount:      pulumi.Int(4),
//				VendorConfiguration: pulumi.StringMap{
//					"provisioningKey": pulumi.String("XXXXXXXXXX"),
//					"hostname":        pulumi.String("XXXX"),
//				},
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### example zscaler pse
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sv := networkedge.GetAccountOutput(ctx, networkedge.GetAccountOutputArgs{
//				MetroCode: pulumi.String("SV"),
//			}, nil)
//			_, err := networkedge.NewDevice(ctx, "zscaler-pse-single", &networkedge.DeviceArgs{
//				Name:      pulumi.String("tf-zscaler-pse"),
//				ProjectId: pulumi.String("XXXXXX"),
//				MetroCode: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.MetroCode, nil
//				}).(pulumi.StringPtrOutput)),
//				TypeCode:     pulumi.String("ZSCALER-PSE"),
//				SelfManaged:  pulumi.Bool(true),
//				Byol:         pulumi.Bool(true),
//				Connectivity: pulumi.String("PRIVATE"),
//				PackageCode:  pulumi.String("STD"),
//				Notifications: pulumi.StringArray{
//					pulumi.String("john@equinix.com"),
//					pulumi.String("marry@equinix.com"),
//					pulumi.String("fred@equinix.com"),
//				},
//				TermLength: pulumi.Int(12),
//				AccountNumber: pulumi.String(sv.ApplyT(func(sv networkedge.GetAccountResult) (*string, error) {
//					return &sv.Number, nil
//				}).(pulumi.StringPtrOutput)),
//				Version:        pulumi.String("23.395.1"),
//				InterfaceCount: pulumi.Int(1),
//				CoreCount:      pulumi.Int(4),
//				VendorConfiguration: pulumi.StringMap{
//					"provisioningKey": pulumi.String("XXXXXXXXXX"),
//					"hostname":        pulumi.String("XXXX"),
//				},
//				SshKey: &networkedge.DeviceSshKeyArgs{
//					Username: pulumi.String("test"),
//					KeyName:  pulumi.String("test-key"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using an existing ID:
//
// ```sh
// $ pulumi import equinix:networkedge/device:Device example {existing_id}
// ```
//
// The `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported.
type Device struct {
	pulumi.CustomResourceState

	// Billing account number for a device.
	AccountNumber pulumi.StringOutput `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrOutput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntOutput `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntOutput `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrOutput `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrOutput `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrOutput `pulumi:"clusterDetails"`
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
	Connectivity pulumi.StringPtrOutput `pulumi:"connectivity"`
	// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
	CoreCount pulumi.IntOutput `pulumi:"coreCount"`
	// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseDeviceId pulumi.StringOutput `pulumi:"diverseDeviceId"`
	// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
	DiverseDeviceName pulumi.StringOutput `pulumi:"diverseDeviceName"`
	// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
	// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
	GenerateDefaultPassword pulumi.BoolPtrOutput `pulumi:"generateDefaultPassword"`
	// Device hostname prefix.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringOutput `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
	InterfaceCount pulumi.IntOutput `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below for more details.
	Interfaces DeviceInterfaceArrayOutput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrOutput `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringOutput `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringOutput `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing mode.
	LicenseToken pulumi.StringPtrOutput `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode pulumi.StringOutput `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrOutput `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of email addresses that will receive device status notifications.
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrOutput `pulumi:"orderReference"`
	// Device software package code.
	PackageCode pulumi.StringOutput `pulumi:"packageCode"`
	// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrOutput `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either primary or secondary.
	RedundancyType pulumi.StringOutput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringOutput `pulumi:"redundantId"`
	// Device location region.
	Region pulumi.StringOutput `pulumi:"region"`
	// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrOutput `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrOutput `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringOutput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringOutput `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrOutput `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Device term length.
	TermLength pulumi.IntOutput `pulumi:"termLength"`
	// Device license throughput.
	Throughput pulumi.IntPtrOutput `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrOutput `pulumi:"throughputUnit"`
	// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
	Tier pulumi.IntOutput `pulumi:"tier"`
	// Device type code.
	TypeCode pulumi.StringOutput `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapOutput `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version pulumi.StringOutput `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrOutput `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode pulumi.StringOutput `pulumi:"zoneCode"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountNumber == nil {
		return nil, errors.New("invalid value for required argument 'AccountNumber'")
	}
	if args.CoreCount == nil {
		return nil, errors.New("invalid value for required argument 'CoreCount'")
	}
	if args.MetroCode == nil {
		return nil, errors.New("invalid value for required argument 'MetroCode'")
	}
	if args.Notifications == nil {
		return nil, errors.New("invalid value for required argument 'Notifications'")
	}
	if args.PackageCode == nil {
		return nil, errors.New("invalid value for required argument 'PackageCode'")
	}
	if args.TermLength == nil {
		return nil, errors.New("invalid value for required argument 'TermLength'")
	}
	if args.TypeCode == nil {
		return nil, errors.New("invalid value for required argument 'TypeCode'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("equinix:networkedge/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("equinix:networkedge/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// Billing account number for a device.
	AccountNumber *string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn *int `pulumi:"asn"`
	// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId *string `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See Cluster Details below for more details.
	ClusterDetails *DeviceClusterDetails `pulumi:"clusterDetails"`
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
	Connectivity *string `pulumi:"connectivity"`
	// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
	CoreCount *int `pulumi:"coreCount"`
	// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseDeviceId *string `pulumi:"diverseDeviceId"`
	// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
	DiverseDeviceName *string `pulumi:"diverseDeviceName"`
	// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
	// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
	GenerateDefaultPassword *bool `pulumi:"generateDefaultPassword"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx *string `pulumi:"ibx"`
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// List of device interfaces. See Interface Attribute below for more details.
	Interfaces []DeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus *string `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing mode.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode *string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode *string `pulumi:"packageCode"`
	// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
	ProjectId *string `pulumi:"projectId"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Device redundancy type applicable for HA devices, either primary or secondary.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId *string `pulumi:"redundantId"`
	// Device location region.
	Region *string `pulumi:"region"`
	// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
	SecondaryDevice *DeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress *string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn *string `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *DeviceSshKey `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// Device term length.
	TermLength *int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
	Tier *int `pulumi:"tier"`
	// Device type code.
	TypeCode *string `pulumi:"typeCode"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version *string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode *string `pulumi:"zoneCode"`
}

type DeviceState struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringPtrInput
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrInput
	// An object that has the cluster details. See Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrInput
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
	Connectivity pulumi.StringPtrInput
	// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
	CoreCount pulumi.IntPtrInput
	// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseDeviceId pulumi.StringPtrInput
	// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
	DiverseDeviceName pulumi.StringPtrInput
	// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
	// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
	GenerateDefaultPassword pulumi.BoolPtrInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// List of device interfaces. See Interface Attribute below for more details.
	Interfaces DeviceInterfaceArrayInput
	// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringPtrInput
	// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringPtrInput
	// License Token applicable for some device types in BYOL licensing mode.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringPtrInput
	// Identifier of an MGMT interface ACL template that will be applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringPtrInput
	// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
	ProjectId pulumi.StringPtrInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Device redundancy type applicable for HA devices, either primary or secondary.
	RedundancyType pulumi.StringPtrInput
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringPtrInput
	// Device location region.
	Region pulumi.StringPtrInput
	// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringPtrInput
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrInput
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput
	// Device term length.
	TermLength pulumi.IntPtrInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
	Tier pulumi.IntPtrInput
	// Device type code.
	TypeCode pulumi.StringPtrInput
	// Device unique identifier.
	Uuid pulumi.StringPtrInput
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringPtrInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
	// Device location zone code.
	ZoneCode pulumi.StringPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// Billing account number for a device.
	AccountNumber string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
	Byol *bool `pulumi:"byol"`
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId *string `pulumi:"cloudInitFileId"`
	// An object that has the cluster details. See Cluster Details below for more details.
	ClusterDetails *DeviceClusterDetails `pulumi:"clusterDetails"`
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
	Connectivity *string `pulumi:"connectivity"`
	// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
	CoreCount int `pulumi:"coreCount"`
	// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseDeviceId *string `pulumi:"diverseDeviceId"`
	// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
	// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
	GenerateDefaultPassword *bool `pulumi:"generateDefaultPassword"`
	// Device hostname prefix.
	Hostname *string `pulumi:"hostname"`
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
	InterfaceCount *int `pulumi:"interfaceCount"`
	// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on the device.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License Token applicable for some device types in BYOL licensing mode.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device location metro code.
	MetroCode string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be applied on the device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Device name.
	Name *string `pulumi:"name"`
	// List of email addresses that will receive device status notifications.
	Notifications []string `pulumi:"notifications"`
	// Name/number used to identify device order on the invoice.
	OrderReference *string `pulumi:"orderReference"`
	// Device software package code.
	PackageCode string `pulumi:"packageCode"`
	// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
	ProjectId *string `pulumi:"projectId"`
	// Purchase order number associated with a device order.
	PurchaseOrderNumber *string `pulumi:"purchaseOrderNumber"`
	// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
	SecondaryDevice *DeviceSecondaryDevice `pulumi:"secondaryDevice"`
	// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
	SelfManaged *bool `pulumi:"selfManaged"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *DeviceSshKey `pulumi:"sshKey"`
	// Device term length.
	TermLength int `pulumi:"termLength"`
	// Device license throughput.
	Throughput *int `pulumi:"throughput"`
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit *string `pulumi:"throughputUnit"`
	// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
	Tier *int `pulumi:"tier"`
	// Device type code.
	TypeCode string `pulumi:"typeCode"`
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// Device software software version.
	Version string `pulumi:"version"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// Billing account number for a device.
	AccountNumber pulumi.StringInput
	// Identifier of a WAN interface ACL template that will be applied on the device.
	AclTemplateId pulumi.StringPtrInput
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
	AdditionalBandwidth pulumi.IntPtrInput
	// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
	Byol pulumi.BoolPtrInput
	// Identifier of a cloud init file that will be applied on the device.
	CloudInitFileId pulumi.StringPtrInput
	// An object that has the cluster details. See Cluster Details below for more details.
	ClusterDetails DeviceClusterDetailsPtrInput
	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
	Connectivity pulumi.StringPtrInput
	// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
	CoreCount pulumi.IntInput
	// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
	DiverseDeviceId pulumi.StringPtrInput
	// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
	// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
	GenerateDefaultPassword pulumi.BoolPtrInput
	// Device hostname prefix.
	Hostname pulumi.StringPtrInput
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
	InterfaceCount pulumi.IntPtrInput
	// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput
	// Identifier of a license file that will be applied on the device.
	LicenseFileId pulumi.StringPtrInput
	// License Token applicable for some device types in BYOL licensing mode.
	LicenseToken pulumi.StringPtrInput
	// Device location metro code.
	MetroCode pulumi.StringInput
	// Identifier of an MGMT interface ACL template that will be applied on the device.
	MgmtAclTemplateUuid pulumi.StringPtrInput
	// Device name.
	Name pulumi.StringPtrInput
	// List of email addresses that will receive device status notifications.
	Notifications pulumi.StringArrayInput
	// Name/number used to identify device order on the invoice.
	OrderReference pulumi.StringPtrInput
	// Device software package code.
	PackageCode pulumi.StringInput
	// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
	ProjectId pulumi.StringPtrInput
	// Purchase order number associated with a device order.
	PurchaseOrderNumber pulumi.StringPtrInput
	// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
	SecondaryDevice DeviceSecondaryDevicePtrInput
	// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
	SelfManaged pulumi.BoolPtrInput
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSshKeyPtrInput
	// Device term length.
	TermLength pulumi.IntInput
	// Device license throughput.
	Throughput pulumi.IntPtrInput
	// License throughput unit. One of `Mbps` or `Gbps`.
	ThroughputUnit pulumi.StringPtrInput
	// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
	Tier pulumi.IntPtrInput
	// Device type code.
	TypeCode pulumi.StringInput
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
	// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
	VendorConfiguration pulumi.StringMapInput
	// Device software software version.
	Version pulumi.StringInput
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

// Billing account number for a device.
func (o DeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.AccountNumber }).(pulumi.StringOutput)
}

// Identifier of a WAN interface ACL template that will be applied on the device.
func (o DeviceOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AclTemplateId }).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, that will be allocated to the device (in addition to default 15Mbps).
func (o DeviceOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o DeviceOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.Asn }).(pulumi.IntOutput)
}

// Boolean value that determines device licensing mode, i.e., `bring your own license` or `subscription` (default).
func (o DeviceOutput) Byol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.Byol }).(pulumi.BoolPtrOutput)
}

// Identifier of a cloud init file that will be applied on the device.
func (o DeviceOutput) CloudInitFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.CloudInitFileId }).(pulumi.StringPtrOutput)
}

// An object that has the cluster details. See Cluster Details below for more details.
func (o DeviceOutput) ClusterDetails() DeviceClusterDetailsPtrOutput {
	return o.ApplyT(func(v *Device) DeviceClusterDetailsPtrOutput { return v.ClusterDetails }).(DeviceClusterDetailsPtrOutput)
}

// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT). If not specified, default will be INTERNET-ACCESS
func (o DeviceOutput) Connectivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Connectivity }).(pulumi.StringPtrOutput)
}

// Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)
func (o DeviceOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.CoreCount }).(pulumi.IntOutput)
}

// Unique ID of an existing device. Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual device. This field is only meaningful for single devices.
func (o DeviceOutput) DiverseDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.DiverseDeviceId }).(pulumi.StringOutput)
}

// Name of the device with diverse device UUID. This field is returned in device details if the device is created by passing diverse_device_id.
func (o DeviceOutput) DiverseDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.DiverseDeviceName }).(pulumi.StringOutput)
}

// Boolean value that determines to create device with or without default password. Use this field to let Equinix know if you want your new device to be create with default admin password.
// This field is only meaningful for C8000V Autonomous(single/ha) and Fortinet Firewall devices(single/ha/cluster). If not specified, by default device is created with admin password.
func (o DeviceOutput) GenerateDefaultPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.GenerateDefaultPassword }).(pulumi.BoolPtrOutput)
}

// Device hostname prefix.
func (o DeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name.
func (o DeviceOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Ibx }).(pulumi.StringOutput)
}

// Number of network interfaces on a device. If not specified, default number for a given device type will be used.
func (o DeviceOutput) InterfaceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.InterfaceCount }).(pulumi.IntOutput)
}

// List of device interfaces. See Interface Attribute below for more details.
func (o DeviceOutput) Interfaces() DeviceInterfaceArrayOutput {
	return o.ApplyT(func(v *Device) DeviceInterfaceArrayOutput { return v.Interfaces }).(DeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a device. Applicable for some device types in BYOL licensing mode.
func (o DeviceOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.LicenseFile }).(pulumi.StringPtrOutput)
}

// Identifier of a license file that will be applied on the device.
func (o DeviceOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o DeviceOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LicenseStatus }).(pulumi.StringOutput)
}

// License Token applicable for some device types in BYOL licensing mode.
func (o DeviceOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device location metro code.
func (o DeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.MetroCode }).(pulumi.StringOutput)
}

// Identifier of an MGMT interface ACL template that will be applied on the device.
func (o DeviceOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.MgmtAclTemplateUuid }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive device status notifications.
func (o DeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Name/number used to identify device order on the invoice.
func (o DeviceOutput) OrderReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.OrderReference }).(pulumi.StringPtrOutput)
}

// Device software package code.
func (o DeviceOutput) PackageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.PackageCode }).(pulumi.StringOutput)
}

// Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
func (o DeviceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Purchase order number associated with a device order.
func (o DeviceOutput) PurchaseOrderNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.PurchaseOrderNumber }).(pulumi.StringPtrOutput)
}

// Device redundancy type applicable for HA devices, either primary or secondary.
func (o DeviceOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o DeviceOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region.
func (o DeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Definition of secondary device for redundant device configurations. See Secondary Device below for more details.
func (o DeviceOutput) SecondaryDevice() DeviceSecondaryDevicePtrOutput {
	return o.ApplyT(func(v *Device) DeviceSecondaryDevicePtrOutput { return v.SecondaryDevice }).(DeviceSecondaryDevicePtrOutput)
}

// Boolean value that determines device management mode, i.e., `self-managed` or `Equinix-managed` (default).
func (o DeviceOutput) SelfManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.SelfManaged }).(pulumi.BoolPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o DeviceOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device.
func (o DeviceOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.SshIpFqdn }).(pulumi.StringOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o DeviceOutput) SshKey() DeviceSshKeyPtrOutput {
	return o.ApplyT(func(v *Device) DeviceSshKeyPtrOutput { return v.SshKey }).(DeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Device term length.
func (o DeviceOutput) TermLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.TermLength }).(pulumi.IntOutput)
}

// Device license throughput.
func (o DeviceOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.Throughput }).(pulumi.IntPtrOutput)
}

// License throughput unit. One of `Mbps` or `Gbps`.
func (o DeviceOutput) ThroughputUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.ThroughputUnit }).(pulumi.StringPtrOutput)
}

// Select bandwidth tier for your own license, i.e., `0` or `1` or `2` or `3`. Tiers applicable only for C8000V Autonomous or C8000V SDWAN (controller) device types. If not provided, tier is defaulted to '2'.
func (o DeviceOutput) Tier() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.Tier }).(pulumi.IntOutput)
}

// Device type code.
func (o DeviceOutput) TypeCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.TypeCode }).(pulumi.StringOutput)
}

// Device unique identifier.
func (o DeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress, privateAddress, privateCidrMask, privateGateway, licenseKey, licenseId, panoramaAuthKey, panoramaIpAddress, provisioningKey, ipAddress(applicable for infoblox only), subnetMaskIp(applicable for infoblox only), gatewayIp(applicable for infoblox only))
// * `ssh-key` - (Optional) Definition of SSH key that will be provisioned on a device (max one key). See SSH Key below for more details.
func (o DeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Device) pulumi.StringMapOutput { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

// Device software software version.
func (o DeviceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// device interface id picked for WAN
func (o DeviceOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.WanInterfaceId }).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o DeviceOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ZoneCode }).(pulumi.StringOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
