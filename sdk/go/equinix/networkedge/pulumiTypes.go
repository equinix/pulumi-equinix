// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AclTemplateDeviceDetail struct {
	// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
	// `PROVISIONED`.
	AclStatus *string `pulumi:"aclStatus"`
	// ACL template name.
	Name *string `pulumi:"name"`
	// Device uuid.
	Uuid *string `pulumi:"uuid"`
}

// AclTemplateDeviceDetailInput is an input type that accepts AclTemplateDeviceDetailArgs and AclTemplateDeviceDetailOutput values.
// You can construct a concrete instance of `AclTemplateDeviceDetailInput` via:
//
//	AclTemplateDeviceDetailArgs{...}
type AclTemplateDeviceDetailInput interface {
	pulumi.Input

	ToAclTemplateDeviceDetailOutput() AclTemplateDeviceDetailOutput
	ToAclTemplateDeviceDetailOutputWithContext(context.Context) AclTemplateDeviceDetailOutput
}

type AclTemplateDeviceDetailArgs struct {
	// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
	// `PROVISIONED`.
	AclStatus pulumi.StringPtrInput `pulumi:"aclStatus"`
	// ACL template name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device uuid.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
}

func (AclTemplateDeviceDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTemplateDeviceDetail)(nil)).Elem()
}

func (i AclTemplateDeviceDetailArgs) ToAclTemplateDeviceDetailOutput() AclTemplateDeviceDetailOutput {
	return i.ToAclTemplateDeviceDetailOutputWithContext(context.Background())
}

func (i AclTemplateDeviceDetailArgs) ToAclTemplateDeviceDetailOutputWithContext(ctx context.Context) AclTemplateDeviceDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTemplateDeviceDetailOutput)
}

// AclTemplateDeviceDetailArrayInput is an input type that accepts AclTemplateDeviceDetailArray and AclTemplateDeviceDetailArrayOutput values.
// You can construct a concrete instance of `AclTemplateDeviceDetailArrayInput` via:
//
//	AclTemplateDeviceDetailArray{ AclTemplateDeviceDetailArgs{...} }
type AclTemplateDeviceDetailArrayInput interface {
	pulumi.Input

	ToAclTemplateDeviceDetailArrayOutput() AclTemplateDeviceDetailArrayOutput
	ToAclTemplateDeviceDetailArrayOutputWithContext(context.Context) AclTemplateDeviceDetailArrayOutput
}

type AclTemplateDeviceDetailArray []AclTemplateDeviceDetailInput

func (AclTemplateDeviceDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTemplateDeviceDetail)(nil)).Elem()
}

func (i AclTemplateDeviceDetailArray) ToAclTemplateDeviceDetailArrayOutput() AclTemplateDeviceDetailArrayOutput {
	return i.ToAclTemplateDeviceDetailArrayOutputWithContext(context.Background())
}

func (i AclTemplateDeviceDetailArray) ToAclTemplateDeviceDetailArrayOutputWithContext(ctx context.Context) AclTemplateDeviceDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTemplateDeviceDetailArrayOutput)
}

type AclTemplateDeviceDetailOutput struct{ *pulumi.OutputState }

func (AclTemplateDeviceDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTemplateDeviceDetail)(nil)).Elem()
}

func (o AclTemplateDeviceDetailOutput) ToAclTemplateDeviceDetailOutput() AclTemplateDeviceDetailOutput {
	return o
}

func (o AclTemplateDeviceDetailOutput) ToAclTemplateDeviceDetailOutputWithContext(ctx context.Context) AclTemplateDeviceDetailOutput {
	return o
}

// Device ACL provisioning status where template was applied. One of `PROVISIONING`,
// `PROVISIONED`.
func (o AclTemplateDeviceDetailOutput) AclStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateDeviceDetail) *string { return v.AclStatus }).(pulumi.StringPtrOutput)
}

// ACL template name.
func (o AclTemplateDeviceDetailOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateDeviceDetail) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device uuid.
func (o AclTemplateDeviceDetailOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateDeviceDetail) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type AclTemplateDeviceDetailArrayOutput struct{ *pulumi.OutputState }

func (AclTemplateDeviceDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTemplateDeviceDetail)(nil)).Elem()
}

func (o AclTemplateDeviceDetailArrayOutput) ToAclTemplateDeviceDetailArrayOutput() AclTemplateDeviceDetailArrayOutput {
	return o
}

func (o AclTemplateDeviceDetailArrayOutput) ToAclTemplateDeviceDetailArrayOutputWithContext(ctx context.Context) AclTemplateDeviceDetailArrayOutput {
	return o
}

func (o AclTemplateDeviceDetailArrayOutput) Index(i pulumi.IntInput) AclTemplateDeviceDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclTemplateDeviceDetail {
		return vs[0].([]AclTemplateDeviceDetail)[vs[1].(int)]
	}).(AclTemplateDeviceDetailOutput)
}

type AclTemplateInboundRule struct {
	// Inbound rule description, up to 200 characters.
	Description *string `pulumi:"description"`
	// Inbound traffic destination ports. Allowed values are a comma separated
	// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	DstPort string `pulumi:"dstPort"`
	// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
	Protocol string `pulumi:"protocol"`
	// Inbound rule sequence number
	SequenceNumber *int `pulumi:"sequenceNumber"`
	// Type of traffic source used in a given inbound rule
	//
	// Deprecated: Source Type will not be returned
	SourceType *string `pulumi:"sourceType"`
	// Inbound traffic source ports. Allowed values are a comma separated list
	// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	SrcPort string `pulumi:"srcPort"`
	// Inbound traffic source IP subnet in CIDR format.
	Subnet *string `pulumi:"subnet"`
	// Inbound traffic source IP subnets in CIDR format.
	//
	// Deprecated: Use Subnet instead
	Subnets []string `pulumi:"subnets"`
}

// AclTemplateInboundRuleInput is an input type that accepts AclTemplateInboundRuleArgs and AclTemplateInboundRuleOutput values.
// You can construct a concrete instance of `AclTemplateInboundRuleInput` via:
//
//	AclTemplateInboundRuleArgs{...}
type AclTemplateInboundRuleInput interface {
	pulumi.Input

	ToAclTemplateInboundRuleOutput() AclTemplateInboundRuleOutput
	ToAclTemplateInboundRuleOutputWithContext(context.Context) AclTemplateInboundRuleOutput
}

type AclTemplateInboundRuleArgs struct {
	// Inbound rule description, up to 200 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Inbound traffic destination ports. Allowed values are a comma separated
	// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	DstPort pulumi.StringInput `pulumi:"dstPort"`
	// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Inbound rule sequence number
	SequenceNumber pulumi.IntPtrInput `pulumi:"sequenceNumber"`
	// Type of traffic source used in a given inbound rule
	//
	// Deprecated: Source Type will not be returned
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// Inbound traffic source ports. Allowed values are a comma separated list
	// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
	SrcPort pulumi.StringInput `pulumi:"srcPort"`
	// Inbound traffic source IP subnet in CIDR format.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// Inbound traffic source IP subnets in CIDR format.
	//
	// Deprecated: Use Subnet instead
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (AclTemplateInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTemplateInboundRule)(nil)).Elem()
}

func (i AclTemplateInboundRuleArgs) ToAclTemplateInboundRuleOutput() AclTemplateInboundRuleOutput {
	return i.ToAclTemplateInboundRuleOutputWithContext(context.Background())
}

func (i AclTemplateInboundRuleArgs) ToAclTemplateInboundRuleOutputWithContext(ctx context.Context) AclTemplateInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTemplateInboundRuleOutput)
}

// AclTemplateInboundRuleArrayInput is an input type that accepts AclTemplateInboundRuleArray and AclTemplateInboundRuleArrayOutput values.
// You can construct a concrete instance of `AclTemplateInboundRuleArrayInput` via:
//
//	AclTemplateInboundRuleArray{ AclTemplateInboundRuleArgs{...} }
type AclTemplateInboundRuleArrayInput interface {
	pulumi.Input

	ToAclTemplateInboundRuleArrayOutput() AclTemplateInboundRuleArrayOutput
	ToAclTemplateInboundRuleArrayOutputWithContext(context.Context) AclTemplateInboundRuleArrayOutput
}

type AclTemplateInboundRuleArray []AclTemplateInboundRuleInput

func (AclTemplateInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTemplateInboundRule)(nil)).Elem()
}

func (i AclTemplateInboundRuleArray) ToAclTemplateInboundRuleArrayOutput() AclTemplateInboundRuleArrayOutput {
	return i.ToAclTemplateInboundRuleArrayOutputWithContext(context.Background())
}

func (i AclTemplateInboundRuleArray) ToAclTemplateInboundRuleArrayOutputWithContext(ctx context.Context) AclTemplateInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTemplateInboundRuleArrayOutput)
}

type AclTemplateInboundRuleOutput struct{ *pulumi.OutputState }

func (AclTemplateInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTemplateInboundRule)(nil)).Elem()
}

func (o AclTemplateInboundRuleOutput) ToAclTemplateInboundRuleOutput() AclTemplateInboundRuleOutput {
	return o
}

func (o AclTemplateInboundRuleOutput) ToAclTemplateInboundRuleOutputWithContext(ctx context.Context) AclTemplateInboundRuleOutput {
	return o
}

// Inbound rule description, up to 200 characters.
func (o AclTemplateInboundRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Inbound traffic destination ports. Allowed values are a comma separated
// list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
func (o AclTemplateInboundRuleOutput) DstPort() pulumi.StringOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) string { return v.DstPort }).(pulumi.StringOutput)
}

// Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
func (o AclTemplateInboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

// Inbound rule sequence number
func (o AclTemplateInboundRuleOutput) SequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) *int { return v.SequenceNumber }).(pulumi.IntPtrOutput)
}

// Type of traffic source used in a given inbound rule
//
// Deprecated: Source Type will not be returned
func (o AclTemplateInboundRuleOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// Inbound traffic source ports. Allowed values are a comma separated list
// of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
func (o AclTemplateInboundRuleOutput) SrcPort() pulumi.StringOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) string { return v.SrcPort }).(pulumi.StringOutput)
}

// Inbound traffic source IP subnet in CIDR format.
func (o AclTemplateInboundRuleOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// Inbound traffic source IP subnets in CIDR format.
//
// Deprecated: Use Subnet instead
func (o AclTemplateInboundRuleOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclTemplateInboundRule) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type AclTemplateInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (AclTemplateInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTemplateInboundRule)(nil)).Elem()
}

func (o AclTemplateInboundRuleArrayOutput) ToAclTemplateInboundRuleArrayOutput() AclTemplateInboundRuleArrayOutput {
	return o
}

func (o AclTemplateInboundRuleArrayOutput) ToAclTemplateInboundRuleArrayOutputWithContext(ctx context.Context) AclTemplateInboundRuleArrayOutput {
	return o
}

func (o AclTemplateInboundRuleArrayOutput) Index(i pulumi.IntInput) AclTemplateInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclTemplateInboundRule {
		return vs[0].([]AclTemplateInboundRule)[vs[1].(int)]
	}).(AclTemplateInboundRuleOutput)
}

type DeviceClusterDetails struct {
	// The ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName string `pulumi:"clusterName"`
	// An object that has `node0` configuration.
	// See Cluster Details - Nodes below for more details.
	Node0 DeviceClusterDetailsNode0 `pulumi:"node0"`
	// An object that has `node1` configuration.
	// See Cluster Details - Nodes below for more details.
	Node1 DeviceClusterDetailsNode1 `pulumi:"node1"`
	// The number of nodes in the cluster.
	NumOfNodes *int `pulumi:"numOfNodes"`
}

// DeviceClusterDetailsInput is an input type that accepts DeviceClusterDetailsArgs and DeviceClusterDetailsOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsInput` via:
//
//	DeviceClusterDetailsArgs{...}
type DeviceClusterDetailsInput interface {
	pulumi.Input

	ToDeviceClusterDetailsOutput() DeviceClusterDetailsOutput
	ToDeviceClusterDetailsOutputWithContext(context.Context) DeviceClusterDetailsOutput
}

type DeviceClusterDetailsArgs struct {
	// The ID of the cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// An object that has `node0` configuration.
	// See Cluster Details - Nodes below for more details.
	Node0 DeviceClusterDetailsNode0Input `pulumi:"node0"`
	// An object that has `node1` configuration.
	// See Cluster Details - Nodes below for more details.
	Node1 DeviceClusterDetailsNode1Input `pulumi:"node1"`
	// The number of nodes in the cluster.
	NumOfNodes pulumi.IntPtrInput `pulumi:"numOfNodes"`
}

func (DeviceClusterDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetails)(nil)).Elem()
}

func (i DeviceClusterDetailsArgs) ToDeviceClusterDetailsOutput() DeviceClusterDetailsOutput {
	return i.ToDeviceClusterDetailsOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsArgs) ToDeviceClusterDetailsOutputWithContext(ctx context.Context) DeviceClusterDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsOutput)
}

func (i DeviceClusterDetailsArgs) ToDeviceClusterDetailsPtrOutput() DeviceClusterDetailsPtrOutput {
	return i.ToDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsArgs) ToDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsOutput).ToDeviceClusterDetailsPtrOutputWithContext(ctx)
}

// DeviceClusterDetailsPtrInput is an input type that accepts DeviceClusterDetailsArgs, DeviceClusterDetailsPtr and DeviceClusterDetailsPtrOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsPtrInput` via:
//
//	        DeviceClusterDetailsArgs{...}
//
//	or:
//
//	        nil
type DeviceClusterDetailsPtrInput interface {
	pulumi.Input

	ToDeviceClusterDetailsPtrOutput() DeviceClusterDetailsPtrOutput
	ToDeviceClusterDetailsPtrOutputWithContext(context.Context) DeviceClusterDetailsPtrOutput
}

type deviceClusterDetailsPtrType DeviceClusterDetailsArgs

func DeviceClusterDetailsPtr(v *DeviceClusterDetailsArgs) DeviceClusterDetailsPtrInput {
	return (*deviceClusterDetailsPtrType)(v)
}

func (*deviceClusterDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetails)(nil)).Elem()
}

func (i *deviceClusterDetailsPtrType) ToDeviceClusterDetailsPtrOutput() DeviceClusterDetailsPtrOutput {
	return i.ToDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (i *deviceClusterDetailsPtrType) ToDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsPtrOutput)
}

type DeviceClusterDetailsOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetails)(nil)).Elem()
}

func (o DeviceClusterDetailsOutput) ToDeviceClusterDetailsOutput() DeviceClusterDetailsOutput {
	return o
}

func (o DeviceClusterDetailsOutput) ToDeviceClusterDetailsOutputWithContext(ctx context.Context) DeviceClusterDetailsOutput {
	return o
}

func (o DeviceClusterDetailsOutput) ToDeviceClusterDetailsPtrOutput() DeviceClusterDetailsPtrOutput {
	return o.ToDeviceClusterDetailsPtrOutputWithContext(context.Background())
}

func (o DeviceClusterDetailsOutput) ToDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceClusterDetails) *DeviceClusterDetails {
		return &v
	}).(DeviceClusterDetailsPtrOutput)
}

// The ID of the cluster.
func (o DeviceClusterDetailsOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetails) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The name of the cluster device
func (o DeviceClusterDetailsOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceClusterDetails) string { return v.ClusterName }).(pulumi.StringOutput)
}

// An object that has `node0` configuration.
// See Cluster Details - Nodes below for more details.
func (o DeviceClusterDetailsOutput) Node0() DeviceClusterDetailsNode0Output {
	return o.ApplyT(func(v DeviceClusterDetails) DeviceClusterDetailsNode0 { return v.Node0 }).(DeviceClusterDetailsNode0Output)
}

// An object that has `node1` configuration.
// See Cluster Details - Nodes below for more details.
func (o DeviceClusterDetailsOutput) Node1() DeviceClusterDetailsNode1Output {
	return o.ApplyT(func(v DeviceClusterDetails) DeviceClusterDetailsNode1 { return v.Node1 }).(DeviceClusterDetailsNode1Output)
}

// The number of nodes in the cluster.
func (o DeviceClusterDetailsOutput) NumOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetails) *int { return v.NumOfNodes }).(pulumi.IntPtrOutput)
}

type DeviceClusterDetailsPtrOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetails)(nil)).Elem()
}

func (o DeviceClusterDetailsPtrOutput) ToDeviceClusterDetailsPtrOutput() DeviceClusterDetailsPtrOutput {
	return o
}

func (o DeviceClusterDetailsPtrOutput) ToDeviceClusterDetailsPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsPtrOutput {
	return o
}

func (o DeviceClusterDetailsPtrOutput) Elem() DeviceClusterDetailsOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) DeviceClusterDetails {
		if v != nil {
			return *v
		}
		var ret DeviceClusterDetails
		return ret
	}).(DeviceClusterDetailsOutput)
}

// The ID of the cluster.
func (o DeviceClusterDetailsPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster device
func (o DeviceClusterDetailsPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// An object that has `node0` configuration.
// See Cluster Details - Nodes below for more details.
func (o DeviceClusterDetailsPtrOutput) Node0() DeviceClusterDetailsNode0PtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) *DeviceClusterDetailsNode0 {
		if v == nil {
			return nil
		}
		return &v.Node0
	}).(DeviceClusterDetailsNode0PtrOutput)
}

// An object that has `node1` configuration.
// See Cluster Details - Nodes below for more details.
func (o DeviceClusterDetailsPtrOutput) Node1() DeviceClusterDetailsNode1PtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) *DeviceClusterDetailsNode1 {
		if v == nil {
			return nil
		}
		return &v.Node1
	}).(DeviceClusterDetailsNode1PtrOutput)
}

// The number of nodes in the cluster.
func (o DeviceClusterDetailsPtrOutput) NumOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetails) *int {
		if v == nil {
			return nil
		}
		return v.NumOfNodes
	}).(pulumi.IntPtrOutput)
}

type DeviceClusterDetailsNode0 struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device name.
	Name *string `pulumi:"name"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration *DeviceClusterDetailsNode0VendorConfiguration `pulumi:"vendorConfiguration"`
}

// DeviceClusterDetailsNode0Input is an input type that accepts DeviceClusterDetailsNode0Args and DeviceClusterDetailsNode0Output values.
// You can construct a concrete instance of `DeviceClusterDetailsNode0Input` via:
//
//	DeviceClusterDetailsNode0Args{...}
type DeviceClusterDetailsNode0Input interface {
	pulumi.Input

	ToDeviceClusterDetailsNode0Output() DeviceClusterDetailsNode0Output
	ToDeviceClusterDetailsNode0OutputWithContext(context.Context) DeviceClusterDetailsNode0Output
}

type DeviceClusterDetailsNode0Args struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration DeviceClusterDetailsNode0VendorConfigurationPtrInput `pulumi:"vendorConfiguration"`
}

func (DeviceClusterDetailsNode0Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode0)(nil)).Elem()
}

func (i DeviceClusterDetailsNode0Args) ToDeviceClusterDetailsNode0Output() DeviceClusterDetailsNode0Output {
	return i.ToDeviceClusterDetailsNode0OutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode0Args) ToDeviceClusterDetailsNode0OutputWithContext(ctx context.Context) DeviceClusterDetailsNode0Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0Output)
}

func (i DeviceClusterDetailsNode0Args) ToDeviceClusterDetailsNode0PtrOutput() DeviceClusterDetailsNode0PtrOutput {
	return i.ToDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode0Args) ToDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0Output).ToDeviceClusterDetailsNode0PtrOutputWithContext(ctx)
}

// DeviceClusterDetailsNode0PtrInput is an input type that accepts DeviceClusterDetailsNode0Args, DeviceClusterDetailsNode0Ptr and DeviceClusterDetailsNode0PtrOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode0PtrInput` via:
//
//	        DeviceClusterDetailsNode0Args{...}
//
//	or:
//
//	        nil
type DeviceClusterDetailsNode0PtrInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode0PtrOutput() DeviceClusterDetailsNode0PtrOutput
	ToDeviceClusterDetailsNode0PtrOutputWithContext(context.Context) DeviceClusterDetailsNode0PtrOutput
}

type deviceClusterDetailsNode0PtrType DeviceClusterDetailsNode0Args

func DeviceClusterDetailsNode0Ptr(v *DeviceClusterDetailsNode0Args) DeviceClusterDetailsNode0PtrInput {
	return (*deviceClusterDetailsNode0PtrType)(v)
}

func (*deviceClusterDetailsNode0PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode0)(nil)).Elem()
}

func (i *deviceClusterDetailsNode0PtrType) ToDeviceClusterDetailsNode0PtrOutput() DeviceClusterDetailsNode0PtrOutput {
	return i.ToDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (i *deviceClusterDetailsNode0PtrType) ToDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0PtrOutput)
}

type DeviceClusterDetailsNode0Output struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode0Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode0)(nil)).Elem()
}

func (o DeviceClusterDetailsNode0Output) ToDeviceClusterDetailsNode0Output() DeviceClusterDetailsNode0Output {
	return o
}

func (o DeviceClusterDetailsNode0Output) ToDeviceClusterDetailsNode0OutputWithContext(ctx context.Context) DeviceClusterDetailsNode0Output {
	return o
}

func (o DeviceClusterDetailsNode0Output) ToDeviceClusterDetailsNode0PtrOutput() DeviceClusterDetailsNode0PtrOutput {
	return o.ToDeviceClusterDetailsNode0PtrOutputWithContext(context.Background())
}

func (o DeviceClusterDetailsNode0Output) ToDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceClusterDetailsNode0) *DeviceClusterDetailsNode0 {
		return &v
	}).(DeviceClusterDetailsNode0PtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o DeviceClusterDetailsNode0Output) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o DeviceClusterDetailsNode0Output) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceClusterDetailsNode0Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceClusterDetailsNode0Output) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o DeviceClusterDetailsNode0Output) VendorConfiguration() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0) *DeviceClusterDetailsNode0VendorConfiguration {
		return v.VendorConfiguration
	}).(DeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode0PtrOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode0PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode0)(nil)).Elem()
}

func (o DeviceClusterDetailsNode0PtrOutput) ToDeviceClusterDetailsNode0PtrOutput() DeviceClusterDetailsNode0PtrOutput {
	return o
}

func (o DeviceClusterDetailsNode0PtrOutput) ToDeviceClusterDetailsNode0PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0PtrOutput {
	return o
}

func (o DeviceClusterDetailsNode0PtrOutput) Elem() DeviceClusterDetailsNode0Output {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) DeviceClusterDetailsNode0 {
		if v != nil {
			return *v
		}
		var ret DeviceClusterDetailsNode0
		return ret
	}).(DeviceClusterDetailsNode0Output)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o DeviceClusterDetailsNode0PtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o DeviceClusterDetailsNode0PtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceClusterDetailsNode0PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceClusterDetailsNode0PtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o DeviceClusterDetailsNode0PtrOutput) VendorConfiguration() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0) *DeviceClusterDetailsNode0VendorConfiguration {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(DeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode0VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey *string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword *string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 *string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn *string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname *string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword *string `pulumi:"rootPassword"`
}

// DeviceClusterDetailsNode0VendorConfigurationInput is an input type that accepts DeviceClusterDetailsNode0VendorConfigurationArgs and DeviceClusterDetailsNode0VendorConfigurationOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode0VendorConfigurationInput` via:
//
//	DeviceClusterDetailsNode0VendorConfigurationArgs{...}
type DeviceClusterDetailsNode0VendorConfigurationInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode0VendorConfigurationOutput() DeviceClusterDetailsNode0VendorConfigurationOutput
	ToDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(context.Context) DeviceClusterDetailsNode0VendorConfigurationOutput
}

type DeviceClusterDetailsNode0VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey pulumi.StringPtrInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 pulumi.StringPtrInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn pulumi.StringPtrInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
}

func (DeviceClusterDetailsNode0VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (i DeviceClusterDetailsNode0VendorConfigurationArgs) ToDeviceClusterDetailsNode0VendorConfigurationOutput() DeviceClusterDetailsNode0VendorConfigurationOutput {
	return i.ToDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode0VendorConfigurationArgs) ToDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0VendorConfigurationOutput)
}

func (i DeviceClusterDetailsNode0VendorConfigurationArgs) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutput() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return i.ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode0VendorConfigurationArgs) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0VendorConfigurationOutput).ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx)
}

// DeviceClusterDetailsNode0VendorConfigurationPtrInput is an input type that accepts DeviceClusterDetailsNode0VendorConfigurationArgs, DeviceClusterDetailsNode0VendorConfigurationPtr and DeviceClusterDetailsNode0VendorConfigurationPtrOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode0VendorConfigurationPtrInput` via:
//
//	        DeviceClusterDetailsNode0VendorConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeviceClusterDetailsNode0VendorConfigurationPtrInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode0VendorConfigurationPtrOutput() DeviceClusterDetailsNode0VendorConfigurationPtrOutput
	ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Context) DeviceClusterDetailsNode0VendorConfigurationPtrOutput
}

type deviceClusterDetailsNode0VendorConfigurationPtrType DeviceClusterDetailsNode0VendorConfigurationArgs

func DeviceClusterDetailsNode0VendorConfigurationPtr(v *DeviceClusterDetailsNode0VendorConfigurationArgs) DeviceClusterDetailsNode0VendorConfigurationPtrInput {
	return (*deviceClusterDetailsNode0VendorConfigurationPtrType)(v)
}

func (*deviceClusterDetailsNode0VendorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (i *deviceClusterDetailsNode0VendorConfigurationPtrType) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutput() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return i.ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i *deviceClusterDetailsNode0VendorConfigurationPtrType) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode0VendorConfigurationOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode0VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ToDeviceClusterDetailsNode0VendorConfigurationOutput() DeviceClusterDetailsNode0VendorConfigurationOutput {
	return o
}

func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ToDeviceClusterDetailsNode0VendorConfigurationOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationOutput {
	return o
}

func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutput() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(context.Background())
}

func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceClusterDetailsNode0VendorConfiguration) *DeviceClusterDetailsNode0VendorConfiguration {
		return &v
	}).(DeviceClusterDetailsNode0VendorConfigurationPtrOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.ActivationKey }).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.Controller1 }).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.ControllerFqdn }).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o DeviceClusterDetailsNode0VendorConfigurationOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode0VendorConfiguration) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

type DeviceClusterDetailsNode0VendorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode0VendorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode0VendorConfiguration)(nil)).Elem()
}

func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutput() DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o
}

func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) ToDeviceClusterDetailsNode0VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode0VendorConfigurationPtrOutput {
	return o
}

func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) Elem() DeviceClusterDetailsNode0VendorConfigurationOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) DeviceClusterDetailsNode0VendorConfiguration {
		if v != nil {
			return *v
		}
		var ret DeviceClusterDetailsNode0VendorConfiguration
		return ret
	}).(DeviceClusterDetailsNode0VendorConfigurationOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActivationKey
	}).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Controller1
	}).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ControllerFqdn
	}).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o DeviceClusterDetailsNode0VendorConfigurationPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode0VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

type DeviceClusterDetailsNode1 struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken *string `pulumi:"licenseToken"`
	// Device name.
	Name *string `pulumi:"name"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration *DeviceClusterDetailsNode1VendorConfiguration `pulumi:"vendorConfiguration"`
}

// DeviceClusterDetailsNode1Input is an input type that accepts DeviceClusterDetailsNode1Args and DeviceClusterDetailsNode1Output values.
// You can construct a concrete instance of `DeviceClusterDetailsNode1Input` via:
//
//	DeviceClusterDetailsNode1Args{...}
type DeviceClusterDetailsNode1Input interface {
	pulumi.Input

	ToDeviceClusterDetailsNode1Output() DeviceClusterDetailsNode1Output
	ToDeviceClusterDetailsNode1OutputWithContext(context.Context) DeviceClusterDetailsNode1Output
}

type DeviceClusterDetailsNode1Args struct {
	// License file id. This is necessary for Fortinet and Juniper clusters.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	VendorConfiguration DeviceClusterDetailsNode1VendorConfigurationPtrInput `pulumi:"vendorConfiguration"`
}

func (DeviceClusterDetailsNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode1)(nil)).Elem()
}

func (i DeviceClusterDetailsNode1Args) ToDeviceClusterDetailsNode1Output() DeviceClusterDetailsNode1Output {
	return i.ToDeviceClusterDetailsNode1OutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode1Args) ToDeviceClusterDetailsNode1OutputWithContext(ctx context.Context) DeviceClusterDetailsNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1Output)
}

func (i DeviceClusterDetailsNode1Args) ToDeviceClusterDetailsNode1PtrOutput() DeviceClusterDetailsNode1PtrOutput {
	return i.ToDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode1Args) ToDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1Output).ToDeviceClusterDetailsNode1PtrOutputWithContext(ctx)
}

// DeviceClusterDetailsNode1PtrInput is an input type that accepts DeviceClusterDetailsNode1Args, DeviceClusterDetailsNode1Ptr and DeviceClusterDetailsNode1PtrOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode1PtrInput` via:
//
//	        DeviceClusterDetailsNode1Args{...}
//
//	or:
//
//	        nil
type DeviceClusterDetailsNode1PtrInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode1PtrOutput() DeviceClusterDetailsNode1PtrOutput
	ToDeviceClusterDetailsNode1PtrOutputWithContext(context.Context) DeviceClusterDetailsNode1PtrOutput
}

type deviceClusterDetailsNode1PtrType DeviceClusterDetailsNode1Args

func DeviceClusterDetailsNode1Ptr(v *DeviceClusterDetailsNode1Args) DeviceClusterDetailsNode1PtrInput {
	return (*deviceClusterDetailsNode1PtrType)(v)
}

func (*deviceClusterDetailsNode1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode1)(nil)).Elem()
}

func (i *deviceClusterDetailsNode1PtrType) ToDeviceClusterDetailsNode1PtrOutput() DeviceClusterDetailsNode1PtrOutput {
	return i.ToDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (i *deviceClusterDetailsNode1PtrType) ToDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1PtrOutput)
}

type DeviceClusterDetailsNode1Output struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode1)(nil)).Elem()
}

func (o DeviceClusterDetailsNode1Output) ToDeviceClusterDetailsNode1Output() DeviceClusterDetailsNode1Output {
	return o
}

func (o DeviceClusterDetailsNode1Output) ToDeviceClusterDetailsNode1OutputWithContext(ctx context.Context) DeviceClusterDetailsNode1Output {
	return o
}

func (o DeviceClusterDetailsNode1Output) ToDeviceClusterDetailsNode1PtrOutput() DeviceClusterDetailsNode1PtrOutput {
	return o.ToDeviceClusterDetailsNode1PtrOutputWithContext(context.Background())
}

func (o DeviceClusterDetailsNode1Output) ToDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceClusterDetailsNode1) *DeviceClusterDetailsNode1 {
		return &v
	}).(DeviceClusterDetailsNode1PtrOutput)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o DeviceClusterDetailsNode1Output) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o DeviceClusterDetailsNode1Output) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceClusterDetailsNode1Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceClusterDetailsNode1Output) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o DeviceClusterDetailsNode1Output) VendorConfiguration() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1) *DeviceClusterDetailsNode1VendorConfiguration {
		return v.VendorConfiguration
	}).(DeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode1PtrOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode1)(nil)).Elem()
}

func (o DeviceClusterDetailsNode1PtrOutput) ToDeviceClusterDetailsNode1PtrOutput() DeviceClusterDetailsNode1PtrOutput {
	return o
}

func (o DeviceClusterDetailsNode1PtrOutput) ToDeviceClusterDetailsNode1PtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1PtrOutput {
	return o
}

func (o DeviceClusterDetailsNode1PtrOutput) Elem() DeviceClusterDetailsNode1Output {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) DeviceClusterDetailsNode1 {
		if v != nil {
			return *v
		}
		var ret DeviceClusterDetailsNode1
		return ret
	}).(DeviceClusterDetailsNode1Output)
}

// License file id. This is necessary for Fortinet and Juniper clusters.
func (o DeviceClusterDetailsNode1PtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// License token. This is necessary for Palo Alto clusters.
func (o DeviceClusterDetailsNode1PtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceClusterDetailsNode1PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceClusterDetailsNode1PtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// An object that has fields relevant to the vendor of the
// cluster device. See Cluster Details - Nodes - Vendor Configuration
// below for more details.
func (o DeviceClusterDetailsNode1PtrOutput) VendorConfiguration() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1) *DeviceClusterDetailsNode1VendorConfiguration {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(DeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode1VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey *string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword *string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 *string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn *string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname *string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword *string `pulumi:"rootPassword"`
}

// DeviceClusterDetailsNode1VendorConfigurationInput is an input type that accepts DeviceClusterDetailsNode1VendorConfigurationArgs and DeviceClusterDetailsNode1VendorConfigurationOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode1VendorConfigurationInput` via:
//
//	DeviceClusterDetailsNode1VendorConfigurationArgs{...}
type DeviceClusterDetailsNode1VendorConfigurationInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode1VendorConfigurationOutput() DeviceClusterDetailsNode1VendorConfigurationOutput
	ToDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(context.Context) DeviceClusterDetailsNode1VendorConfigurationOutput
}

type DeviceClusterDetailsNode1VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters.
	ActivationKey pulumi.StringPtrInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	Controller1 pulumi.StringPtrInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters.
	ControllerFqdn pulumi.StringPtrInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
}

func (DeviceClusterDetailsNode1VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (i DeviceClusterDetailsNode1VendorConfigurationArgs) ToDeviceClusterDetailsNode1VendorConfigurationOutput() DeviceClusterDetailsNode1VendorConfigurationOutput {
	return i.ToDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode1VendorConfigurationArgs) ToDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1VendorConfigurationOutput)
}

func (i DeviceClusterDetailsNode1VendorConfigurationArgs) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutput() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return i.ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i DeviceClusterDetailsNode1VendorConfigurationArgs) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1VendorConfigurationOutput).ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx)
}

// DeviceClusterDetailsNode1VendorConfigurationPtrInput is an input type that accepts DeviceClusterDetailsNode1VendorConfigurationArgs, DeviceClusterDetailsNode1VendorConfigurationPtr and DeviceClusterDetailsNode1VendorConfigurationPtrOutput values.
// You can construct a concrete instance of `DeviceClusterDetailsNode1VendorConfigurationPtrInput` via:
//
//	        DeviceClusterDetailsNode1VendorConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeviceClusterDetailsNode1VendorConfigurationPtrInput interface {
	pulumi.Input

	ToDeviceClusterDetailsNode1VendorConfigurationPtrOutput() DeviceClusterDetailsNode1VendorConfigurationPtrOutput
	ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Context) DeviceClusterDetailsNode1VendorConfigurationPtrOutput
}

type deviceClusterDetailsNode1VendorConfigurationPtrType DeviceClusterDetailsNode1VendorConfigurationArgs

func DeviceClusterDetailsNode1VendorConfigurationPtr(v *DeviceClusterDetailsNode1VendorConfigurationArgs) DeviceClusterDetailsNode1VendorConfigurationPtrInput {
	return (*deviceClusterDetailsNode1VendorConfigurationPtrType)(v)
}

func (*deviceClusterDetailsNode1VendorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (i *deviceClusterDetailsNode1VendorConfigurationPtrType) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutput() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return i.ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (i *deviceClusterDetailsNode1VendorConfigurationPtrType) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

type DeviceClusterDetailsNode1VendorConfigurationOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode1VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ToDeviceClusterDetailsNode1VendorConfigurationOutput() DeviceClusterDetailsNode1VendorConfigurationOutput {
	return o
}

func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ToDeviceClusterDetailsNode1VendorConfigurationOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationOutput {
	return o
}

func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutput() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(context.Background())
}

func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceClusterDetailsNode1VendorConfiguration) *DeviceClusterDetailsNode1VendorConfiguration {
		return &v
	}).(DeviceClusterDetailsNode1VendorConfigurationPtrOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.ActivationKey }).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.Controller1 }).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.ControllerFqdn }).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o DeviceClusterDetailsNode1VendorConfigurationOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceClusterDetailsNode1VendorConfiguration) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

type DeviceClusterDetailsNode1VendorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeviceClusterDetailsNode1VendorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceClusterDetailsNode1VendorConfiguration)(nil)).Elem()
}

func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutput() DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o
}

func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) ToDeviceClusterDetailsNode1VendorConfigurationPtrOutputWithContext(ctx context.Context) DeviceClusterDetailsNode1VendorConfigurationPtrOutput {
	return o
}

func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) Elem() DeviceClusterDetailsNode1VendorConfigurationOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) DeviceClusterDetailsNode1VendorConfiguration {
		if v != nil {
			return *v
		}
		var ret DeviceClusterDetailsNode1VendorConfiguration
		return ret
	}).(DeviceClusterDetailsNode1VendorConfigurationOutput)
}

// Activation key. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActivationKey
	}).(pulumi.StringPtrOutput)
}

// The administrative password of the device. You can use it to log in
// to the console. This field is not available for all device types.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) Controller1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Controller1
	}).(pulumi.StringPtrOutput)
}

// Controller fqdn. This is required for Velocloud clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) ControllerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ControllerFqdn
	}).(pulumi.StringPtrOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The CLI password of the device. This field is relevant only for the
// Velocloud SDWAN cluster.
func (o DeviceClusterDetailsNode1VendorConfigurationPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceClusterDetailsNode1VendorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

type DeviceInterface struct {
	// interface management type (Equinix Managed or empty).
	AssignedType *string `pulumi:"assignedType"`
	// interface identifier.
	Id *int `pulumi:"id"`
	// interface IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// Device name.
	Name *string `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus *string `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// interface type.
	Type *string `pulumi:"type"`
}

// DeviceInterfaceInput is an input type that accepts DeviceInterfaceArgs and DeviceInterfaceOutput values.
// You can construct a concrete instance of `DeviceInterfaceInput` via:
//
//	DeviceInterfaceArgs{...}
type DeviceInterfaceInput interface {
	pulumi.Input

	ToDeviceInterfaceOutput() DeviceInterfaceOutput
	ToDeviceInterfaceOutputWithContext(context.Context) DeviceInterfaceOutput
}

type DeviceInterfaceArgs struct {
	// interface management type (Equinix Managed or empty).
	AssignedType pulumi.StringPtrInput `pulumi:"assignedType"`
	// interface identifier.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// interface IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus pulumi.StringPtrInput `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// interface type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceInterface)(nil)).Elem()
}

func (i DeviceInterfaceArgs) ToDeviceInterfaceOutput() DeviceInterfaceOutput {
	return i.ToDeviceInterfaceOutputWithContext(context.Background())
}

func (i DeviceInterfaceArgs) ToDeviceInterfaceOutputWithContext(ctx context.Context) DeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceInterfaceOutput)
}

// DeviceInterfaceArrayInput is an input type that accepts DeviceInterfaceArray and DeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `DeviceInterfaceArrayInput` via:
//
//	DeviceInterfaceArray{ DeviceInterfaceArgs{...} }
type DeviceInterfaceArrayInput interface {
	pulumi.Input

	ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput
	ToDeviceInterfaceArrayOutputWithContext(context.Context) DeviceInterfaceArrayOutput
}

type DeviceInterfaceArray []DeviceInterfaceInput

func (DeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceInterface)(nil)).Elem()
}

func (i DeviceInterfaceArray) ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput {
	return i.ToDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i DeviceInterfaceArray) ToDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceInterfaceArrayOutput)
}

type DeviceInterfaceOutput struct{ *pulumi.OutputState }

func (DeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceInterface)(nil)).Elem()
}

func (o DeviceInterfaceOutput) ToDeviceInterfaceOutput() DeviceInterfaceOutput {
	return o
}

func (o DeviceInterfaceOutput) ToDeviceInterfaceOutputWithContext(ctx context.Context) DeviceInterfaceOutput {
	return o
}

// interface management type (Equinix Managed or empty).
func (o DeviceInterfaceOutput) AssignedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.AssignedType }).(pulumi.StringPtrOutput)
}

// interface identifier.
func (o DeviceInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// interface IP address.
func (o DeviceInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// interface MAC address.
func (o DeviceInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// interface operational status. One of `up`, `down`.
func (o DeviceInterfaceOutput) OperationalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.OperationalStatus }).(pulumi.StringPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceInterfaceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// interface type.
func (o DeviceInterfaceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceInterface) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (DeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceInterface)(nil)).Elem()
}

func (o DeviceInterfaceArrayOutput) ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput {
	return o
}

func (o DeviceInterfaceArrayOutput) ToDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceInterfaceArrayOutput {
	return o
}

func (o DeviceInterfaceArrayOutput) Index(i pulumi.IntInput) DeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceInterface {
		return vs[0].([]DeviceInterface)[vs[1].(int)]
	}).(DeviceInterfaceOutput)
}

type DeviceLinkDevice struct {
	// Device ASN number. Not required for self configured devices.
	Asn *int `pulumi:"asn"`
	// Device identifier.
	Id string `pulumi:"id"`
	// Device network interface identifier to use for device link
	// connection.
	InterfaceId *int `pulumi:"interfaceId"`
	// IP address from device link subnet that was assigned to the device
	IpAddress *string `pulumi:"ipAddress"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status *string `pulumi:"status"`
}

// DeviceLinkDeviceInput is an input type that accepts DeviceLinkDeviceArgs and DeviceLinkDeviceOutput values.
// You can construct a concrete instance of `DeviceLinkDeviceInput` via:
//
//	DeviceLinkDeviceArgs{...}
type DeviceLinkDeviceInput interface {
	pulumi.Input

	ToDeviceLinkDeviceOutput() DeviceLinkDeviceOutput
	ToDeviceLinkDeviceOutputWithContext(context.Context) DeviceLinkDeviceOutput
}

type DeviceLinkDeviceArgs struct {
	// Device ASN number. Not required for self configured devices.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// Device identifier.
	Id pulumi.StringInput `pulumi:"id"`
	// Device network interface identifier to use for device link
	// connection.
	InterfaceId pulumi.IntPtrInput `pulumi:"interfaceId"`
	// IP address from device link subnet that was assigned to the device
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// device link provisioning status on a given device. One of `PROVISIONING`,
	// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (DeviceLinkDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkDevice)(nil)).Elem()
}

func (i DeviceLinkDeviceArgs) ToDeviceLinkDeviceOutput() DeviceLinkDeviceOutput {
	return i.ToDeviceLinkDeviceOutputWithContext(context.Background())
}

func (i DeviceLinkDeviceArgs) ToDeviceLinkDeviceOutputWithContext(ctx context.Context) DeviceLinkDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkDeviceOutput)
}

// DeviceLinkDeviceArrayInput is an input type that accepts DeviceLinkDeviceArray and DeviceLinkDeviceArrayOutput values.
// You can construct a concrete instance of `DeviceLinkDeviceArrayInput` via:
//
//	DeviceLinkDeviceArray{ DeviceLinkDeviceArgs{...} }
type DeviceLinkDeviceArrayInput interface {
	pulumi.Input

	ToDeviceLinkDeviceArrayOutput() DeviceLinkDeviceArrayOutput
	ToDeviceLinkDeviceArrayOutputWithContext(context.Context) DeviceLinkDeviceArrayOutput
}

type DeviceLinkDeviceArray []DeviceLinkDeviceInput

func (DeviceLinkDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkDevice)(nil)).Elem()
}

func (i DeviceLinkDeviceArray) ToDeviceLinkDeviceArrayOutput() DeviceLinkDeviceArrayOutput {
	return i.ToDeviceLinkDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceLinkDeviceArray) ToDeviceLinkDeviceArrayOutputWithContext(ctx context.Context) DeviceLinkDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkDeviceArrayOutput)
}

type DeviceLinkDeviceOutput struct{ *pulumi.OutputState }

func (DeviceLinkDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkDevice)(nil)).Elem()
}

func (o DeviceLinkDeviceOutput) ToDeviceLinkDeviceOutput() DeviceLinkDeviceOutput {
	return o
}

func (o DeviceLinkDeviceOutput) ToDeviceLinkDeviceOutputWithContext(ctx context.Context) DeviceLinkDeviceOutput {
	return o
}

// Device ASN number. Not required for self configured devices.
func (o DeviceLinkDeviceOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceLinkDevice) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// Device identifier.
func (o DeviceLinkDeviceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkDevice) string { return v.Id }).(pulumi.StringOutput)
}

// Device network interface identifier to use for device link
// connection.
func (o DeviceLinkDeviceOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceLinkDevice) *int { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

// IP address from device link subnet that was assigned to the device
func (o DeviceLinkDeviceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLinkDevice) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// device link provisioning status on a given device. One of `PROVISIONING`,
// `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
func (o DeviceLinkDeviceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLinkDevice) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type DeviceLinkDeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceLinkDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkDevice)(nil)).Elem()
}

func (o DeviceLinkDeviceArrayOutput) ToDeviceLinkDeviceArrayOutput() DeviceLinkDeviceArrayOutput {
	return o
}

func (o DeviceLinkDeviceArrayOutput) ToDeviceLinkDeviceArrayOutputWithContext(ctx context.Context) DeviceLinkDeviceArrayOutput {
	return o
}

func (o DeviceLinkDeviceArrayOutput) Index(i pulumi.IntInput) DeviceLinkDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceLinkDevice {
		return vs[0].([]DeviceLinkDevice)[vs[1].(int)]
	}).(DeviceLinkDeviceOutput)
}

type DeviceLinkLink struct {
	// billing account number to be used for
	// connection charges
	AccountNumber string `pulumi:"accountNumber"`
	// connection destination metro code.
	DstMetroCode string `pulumi:"dstMetroCode"`
	// connection destination zone code is not required.
	//
	// Deprecated: DestinationZoneCode is not required
	DstZoneCode *string `pulumi:"dstZoneCode"`
	// connection source metro code.
	SrcMetroCode string `pulumi:"srcMetroCode"`
	// connection source zone code is not required.
	//
	// Deprecated: SourceZoneCode is not required
	SrcZoneCode *string `pulumi:"srcZoneCode"`
	// connection throughput.
	Throughput string `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit string `pulumi:"throughputUnit"`
}

// DeviceLinkLinkInput is an input type that accepts DeviceLinkLinkArgs and DeviceLinkLinkOutput values.
// You can construct a concrete instance of `DeviceLinkLinkInput` via:
//
//	DeviceLinkLinkArgs{...}
type DeviceLinkLinkInput interface {
	pulumi.Input

	ToDeviceLinkLinkOutput() DeviceLinkLinkOutput
	ToDeviceLinkLinkOutputWithContext(context.Context) DeviceLinkLinkOutput
}

type DeviceLinkLinkArgs struct {
	// billing account number to be used for
	// connection charges
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// connection destination metro code.
	DstMetroCode pulumi.StringInput `pulumi:"dstMetroCode"`
	// connection destination zone code is not required.
	//
	// Deprecated: DestinationZoneCode is not required
	DstZoneCode pulumi.StringPtrInput `pulumi:"dstZoneCode"`
	// connection source metro code.
	SrcMetroCode pulumi.StringInput `pulumi:"srcMetroCode"`
	// connection source zone code is not required.
	//
	// Deprecated: SourceZoneCode is not required
	SrcZoneCode pulumi.StringPtrInput `pulumi:"srcZoneCode"`
	// connection throughput.
	Throughput pulumi.StringInput `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit pulumi.StringInput `pulumi:"throughputUnit"`
}

func (DeviceLinkLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkLink)(nil)).Elem()
}

func (i DeviceLinkLinkArgs) ToDeviceLinkLinkOutput() DeviceLinkLinkOutput {
	return i.ToDeviceLinkLinkOutputWithContext(context.Background())
}

func (i DeviceLinkLinkArgs) ToDeviceLinkLinkOutputWithContext(ctx context.Context) DeviceLinkLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkLinkOutput)
}

// DeviceLinkLinkArrayInput is an input type that accepts DeviceLinkLinkArray and DeviceLinkLinkArrayOutput values.
// You can construct a concrete instance of `DeviceLinkLinkArrayInput` via:
//
//	DeviceLinkLinkArray{ DeviceLinkLinkArgs{...} }
type DeviceLinkLinkArrayInput interface {
	pulumi.Input

	ToDeviceLinkLinkArrayOutput() DeviceLinkLinkArrayOutput
	ToDeviceLinkLinkArrayOutputWithContext(context.Context) DeviceLinkLinkArrayOutput
}

type DeviceLinkLinkArray []DeviceLinkLinkInput

func (DeviceLinkLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkLink)(nil)).Elem()
}

func (i DeviceLinkLinkArray) ToDeviceLinkLinkArrayOutput() DeviceLinkLinkArrayOutput {
	return i.ToDeviceLinkLinkArrayOutputWithContext(context.Background())
}

func (i DeviceLinkLinkArray) ToDeviceLinkLinkArrayOutputWithContext(ctx context.Context) DeviceLinkLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkLinkArrayOutput)
}

type DeviceLinkLinkOutput struct{ *pulumi.OutputState }

func (DeviceLinkLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkLink)(nil)).Elem()
}

func (o DeviceLinkLinkOutput) ToDeviceLinkLinkOutput() DeviceLinkLinkOutput {
	return o
}

func (o DeviceLinkLinkOutput) ToDeviceLinkLinkOutputWithContext(ctx context.Context) DeviceLinkLinkOutput {
	return o
}

// billing account number to be used for
// connection charges
func (o DeviceLinkLinkOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkLink) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// connection destination metro code.
func (o DeviceLinkLinkOutput) DstMetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkLink) string { return v.DstMetroCode }).(pulumi.StringOutput)
}

// connection destination zone code is not required.
//
// Deprecated: DestinationZoneCode is not required
func (o DeviceLinkLinkOutput) DstZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLinkLink) *string { return v.DstZoneCode }).(pulumi.StringPtrOutput)
}

// connection source metro code.
func (o DeviceLinkLinkOutput) SrcMetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkLink) string { return v.SrcMetroCode }).(pulumi.StringOutput)
}

// connection source zone code is not required.
//
// Deprecated: SourceZoneCode is not required
func (o DeviceLinkLinkOutput) SrcZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLinkLink) *string { return v.SrcZoneCode }).(pulumi.StringPtrOutput)
}

// connection throughput.
func (o DeviceLinkLinkOutput) Throughput() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkLink) string { return v.Throughput }).(pulumi.StringOutput)
}

// connection throughput unit (Mbps or Gbps).
func (o DeviceLinkLinkOutput) ThroughputUnit() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkLink) string { return v.ThroughputUnit }).(pulumi.StringOutput)
}

type DeviceLinkLinkArrayOutput struct{ *pulumi.OutputState }

func (DeviceLinkLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkLink)(nil)).Elem()
}

func (o DeviceLinkLinkArrayOutput) ToDeviceLinkLinkArrayOutput() DeviceLinkLinkArrayOutput {
	return o
}

func (o DeviceLinkLinkArrayOutput) ToDeviceLinkLinkArrayOutputWithContext(ctx context.Context) DeviceLinkLinkArrayOutput {
	return o
}

func (o DeviceLinkLinkArrayOutput) Index(i pulumi.IntInput) DeviceLinkLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceLinkLink {
		return vs[0].([]DeviceLinkLink)[vs[1].(int)]
	}).(DeviceLinkLinkOutput)
}

type DeviceLinkMetroLink struct {
	// billing account number to be used for
	// connection charges
	AccountNumber string `pulumi:"accountNumber"`
	// connection metro code.
	MetroCode string `pulumi:"metroCode"`
	// connection throughput.
	Throughput string `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit string `pulumi:"throughputUnit"`
}

// DeviceLinkMetroLinkInput is an input type that accepts DeviceLinkMetroLinkArgs and DeviceLinkMetroLinkOutput values.
// You can construct a concrete instance of `DeviceLinkMetroLinkInput` via:
//
//	DeviceLinkMetroLinkArgs{...}
type DeviceLinkMetroLinkInput interface {
	pulumi.Input

	ToDeviceLinkMetroLinkOutput() DeviceLinkMetroLinkOutput
	ToDeviceLinkMetroLinkOutputWithContext(context.Context) DeviceLinkMetroLinkOutput
}

type DeviceLinkMetroLinkArgs struct {
	// billing account number to be used for
	// connection charges
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// connection metro code.
	MetroCode pulumi.StringInput `pulumi:"metroCode"`
	// connection throughput.
	Throughput pulumi.StringInput `pulumi:"throughput"`
	// connection throughput unit (Mbps or Gbps).
	ThroughputUnit pulumi.StringInput `pulumi:"throughputUnit"`
}

func (DeviceLinkMetroLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkMetroLink)(nil)).Elem()
}

func (i DeviceLinkMetroLinkArgs) ToDeviceLinkMetroLinkOutput() DeviceLinkMetroLinkOutput {
	return i.ToDeviceLinkMetroLinkOutputWithContext(context.Background())
}

func (i DeviceLinkMetroLinkArgs) ToDeviceLinkMetroLinkOutputWithContext(ctx context.Context) DeviceLinkMetroLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkMetroLinkOutput)
}

// DeviceLinkMetroLinkArrayInput is an input type that accepts DeviceLinkMetroLinkArray and DeviceLinkMetroLinkArrayOutput values.
// You can construct a concrete instance of `DeviceLinkMetroLinkArrayInput` via:
//
//	DeviceLinkMetroLinkArray{ DeviceLinkMetroLinkArgs{...} }
type DeviceLinkMetroLinkArrayInput interface {
	pulumi.Input

	ToDeviceLinkMetroLinkArrayOutput() DeviceLinkMetroLinkArrayOutput
	ToDeviceLinkMetroLinkArrayOutputWithContext(context.Context) DeviceLinkMetroLinkArrayOutput
}

type DeviceLinkMetroLinkArray []DeviceLinkMetroLinkInput

func (DeviceLinkMetroLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkMetroLink)(nil)).Elem()
}

func (i DeviceLinkMetroLinkArray) ToDeviceLinkMetroLinkArrayOutput() DeviceLinkMetroLinkArrayOutput {
	return i.ToDeviceLinkMetroLinkArrayOutputWithContext(context.Background())
}

func (i DeviceLinkMetroLinkArray) ToDeviceLinkMetroLinkArrayOutputWithContext(ctx context.Context) DeviceLinkMetroLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLinkMetroLinkArrayOutput)
}

type DeviceLinkMetroLinkOutput struct{ *pulumi.OutputState }

func (DeviceLinkMetroLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLinkMetroLink)(nil)).Elem()
}

func (o DeviceLinkMetroLinkOutput) ToDeviceLinkMetroLinkOutput() DeviceLinkMetroLinkOutput {
	return o
}

func (o DeviceLinkMetroLinkOutput) ToDeviceLinkMetroLinkOutputWithContext(ctx context.Context) DeviceLinkMetroLinkOutput {
	return o
}

// billing account number to be used for
// connection charges
func (o DeviceLinkMetroLinkOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkMetroLink) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// connection metro code.
func (o DeviceLinkMetroLinkOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkMetroLink) string { return v.MetroCode }).(pulumi.StringOutput)
}

// connection throughput.
func (o DeviceLinkMetroLinkOutput) Throughput() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkMetroLink) string { return v.Throughput }).(pulumi.StringOutput)
}

// connection throughput unit (Mbps or Gbps).
func (o DeviceLinkMetroLinkOutput) ThroughputUnit() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceLinkMetroLink) string { return v.ThroughputUnit }).(pulumi.StringOutput)
}

type DeviceLinkMetroLinkArrayOutput struct{ *pulumi.OutputState }

func (DeviceLinkMetroLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceLinkMetroLink)(nil)).Elem()
}

func (o DeviceLinkMetroLinkArrayOutput) ToDeviceLinkMetroLinkArrayOutput() DeviceLinkMetroLinkArrayOutput {
	return o
}

func (o DeviceLinkMetroLinkArrayOutput) ToDeviceLinkMetroLinkArrayOutputWithContext(ctx context.Context) DeviceLinkMetroLinkArrayOutput {
	return o
}

func (o DeviceLinkMetroLinkArrayOutput) Index(i pulumi.IntInput) DeviceLinkMetroLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceLinkMetroLink {
		return vs[0].([]DeviceLinkMetroLink)[vs[1].(int)]
	}).(DeviceLinkMetroLinkOutput)
}

type DeviceSecondaryDevice struct {
	// Billing account number for secondary device.
	AccountNumber string `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied
	// on a secondary device.
	AclTemplateId *string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, for a secondary
	// device.
	AdditionalBandwidth *int `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn *int `pulumi:"asn"`
	// Identifier of a cloud init file that will be applied on a secondary device.
	CloudInitFileId *string `pulumi:"cloudInitFileId"`
	// Secondary device hostname.
	Hostname *string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx *string `pulumi:"ibx"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces []DeviceSecondaryDeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// secondary device. Applicable for some device types in BYOL licensing mode.
	LicenseFile *string `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on a secondary device.
	LicenseFileId *string `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus *string `pulumi:"licenseStatus"`
	// License Token can be provided for some device types o the device.
	LicenseToken *string `pulumi:"licenseToken"`
	// Metro location of a secondary device.
	MetroCode string `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on a secondary device.
	// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
	//   device.
	MgmtAclTemplateUuid *string `pulumi:"mgmtAclTemplateUuid"`
	// Secondary device name.
	Name string `pulumi:"name"`
	// List of email addresses that will receive notifications about
	// secondary device.
	Notifications []string `pulumi:"notifications"`
	// Unique Identifier for the project resource where the device is scoped to.If you
	// leave it out, the device will be created under the default project id of your organization.
	ProjectId *string `pulumi:"projectId"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType *string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId *string `pulumi:"redundantId"`
	// Device location region.
	Region *string `pulumi:"region"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress *string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn *string `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey *DeviceSecondaryDeviceSshKey `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// Device unique identifier.
	Uuid *string `pulumi:"uuid"`
	// Key/Value pairs of vendor specific configuration parameters
	// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
	// `systemIpAddress`.
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// device interface id picked for WAN
	WanInterfaceId *string `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode *string `pulumi:"zoneCode"`
}

// DeviceSecondaryDeviceInput is an input type that accepts DeviceSecondaryDeviceArgs and DeviceSecondaryDeviceOutput values.
// You can construct a concrete instance of `DeviceSecondaryDeviceInput` via:
//
//	DeviceSecondaryDeviceArgs{...}
type DeviceSecondaryDeviceInput interface {
	pulumi.Input

	ToDeviceSecondaryDeviceOutput() DeviceSecondaryDeviceOutput
	ToDeviceSecondaryDeviceOutputWithContext(context.Context) DeviceSecondaryDeviceOutput
}

type DeviceSecondaryDeviceArgs struct {
	// Billing account number for secondary device.
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// Identifier of a WAN interface ACL template that will be applied
	// on a secondary device.
	AclTemplateId pulumi.StringPtrInput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, for a secondary
	// device.
	AdditionalBandwidth pulumi.IntPtrInput `pulumi:"additionalBandwidth"`
	// (Autonomous System Number) Unique identifier for a network on the internet.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// Identifier of a cloud init file that will be applied on a secondary device.
	CloudInitFileId pulumi.StringPtrInput `pulumi:"cloudInitFileId"`
	// Secondary device hostname.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name.
	Ibx pulumi.StringPtrInput `pulumi:"ibx"`
	// List of device interfaces. See Interface Attribute below
	// for more details.
	Interfaces DeviceSecondaryDeviceInterfaceArrayInput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a
	// secondary device. Applicable for some device types in BYOL licensing mode.
	LicenseFile pulumi.StringPtrInput `pulumi:"licenseFile"`
	// Identifier of a license file that will be applied on a secondary device.
	LicenseFileId pulumi.StringPtrInput `pulumi:"licenseFileId"`
	// Device license registration status. Possible values are `APPLYING_LICENSE`,
	// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
	LicenseStatus pulumi.StringPtrInput `pulumi:"licenseStatus"`
	// License Token can be provided for some device types o the device.
	LicenseToken pulumi.StringPtrInput `pulumi:"licenseToken"`
	// Metro location of a secondary device.
	MetroCode pulumi.StringInput `pulumi:"metroCode"`
	// Identifier of an MGMT interface ACL template that will be
	// applied on a secondary device.
	// * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
	//   device.
	MgmtAclTemplateUuid pulumi.StringPtrInput `pulumi:"mgmtAclTemplateUuid"`
	// Secondary device name.
	Name pulumi.StringInput `pulumi:"name"`
	// List of email addresses that will receive notifications about
	// secondary device.
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// Unique Identifier for the project resource where the device is scoped to.If you
	// leave it out, the device will be created under the default project id of your organization.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	RedundancyType pulumi.StringPtrInput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices.
	RedundantId pulumi.StringPtrInput `pulumi:"redundantId"`
	// Device location region.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// IP address of SSH enabled interface on the device.
	SshIpAddress pulumi.StringPtrInput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device.
	SshIpFqdn pulumi.StringPtrInput `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKey DeviceSecondaryDeviceSshKeyPtrInput `pulumi:"sshKey"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Device unique identifier.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// Key/Value pairs of vendor specific configuration parameters
	// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
	// `systemIpAddress`.
	VendorConfiguration pulumi.StringMapInput `pulumi:"vendorConfiguration"`
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringPtrInput `pulumi:"wanInterfaceId"`
	// Device location zone code.
	ZoneCode pulumi.StringPtrInput `pulumi:"zoneCode"`
}

func (DeviceSecondaryDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDevice)(nil)).Elem()
}

func (i DeviceSecondaryDeviceArgs) ToDeviceSecondaryDeviceOutput() DeviceSecondaryDeviceOutput {
	return i.ToDeviceSecondaryDeviceOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceArgs) ToDeviceSecondaryDeviceOutputWithContext(ctx context.Context) DeviceSecondaryDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceOutput)
}

func (i DeviceSecondaryDeviceArgs) ToDeviceSecondaryDevicePtrOutput() DeviceSecondaryDevicePtrOutput {
	return i.ToDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceArgs) ToDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) DeviceSecondaryDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceOutput).ToDeviceSecondaryDevicePtrOutputWithContext(ctx)
}

// DeviceSecondaryDevicePtrInput is an input type that accepts DeviceSecondaryDeviceArgs, DeviceSecondaryDevicePtr and DeviceSecondaryDevicePtrOutput values.
// You can construct a concrete instance of `DeviceSecondaryDevicePtrInput` via:
//
//	        DeviceSecondaryDeviceArgs{...}
//
//	or:
//
//	        nil
type DeviceSecondaryDevicePtrInput interface {
	pulumi.Input

	ToDeviceSecondaryDevicePtrOutput() DeviceSecondaryDevicePtrOutput
	ToDeviceSecondaryDevicePtrOutputWithContext(context.Context) DeviceSecondaryDevicePtrOutput
}

type deviceSecondaryDevicePtrType DeviceSecondaryDeviceArgs

func DeviceSecondaryDevicePtr(v *DeviceSecondaryDeviceArgs) DeviceSecondaryDevicePtrInput {
	return (*deviceSecondaryDevicePtrType)(v)
}

func (*deviceSecondaryDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSecondaryDevice)(nil)).Elem()
}

func (i *deviceSecondaryDevicePtrType) ToDeviceSecondaryDevicePtrOutput() DeviceSecondaryDevicePtrOutput {
	return i.ToDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (i *deviceSecondaryDevicePtrType) ToDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) DeviceSecondaryDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDevicePtrOutput)
}

type DeviceSecondaryDeviceOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDevice)(nil)).Elem()
}

func (o DeviceSecondaryDeviceOutput) ToDeviceSecondaryDeviceOutput() DeviceSecondaryDeviceOutput {
	return o
}

func (o DeviceSecondaryDeviceOutput) ToDeviceSecondaryDeviceOutputWithContext(ctx context.Context) DeviceSecondaryDeviceOutput {
	return o
}

func (o DeviceSecondaryDeviceOutput) ToDeviceSecondaryDevicePtrOutput() DeviceSecondaryDevicePtrOutput {
	return o.ToDeviceSecondaryDevicePtrOutputWithContext(context.Background())
}

func (o DeviceSecondaryDeviceOutput) ToDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) DeviceSecondaryDevicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceSecondaryDevice) *DeviceSecondaryDevice {
		return &v
	}).(DeviceSecondaryDevicePtrOutput)
}

// Billing account number for secondary device.
func (o DeviceSecondaryDeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// Identifier of a WAN interface ACL template that will be applied
// on a secondary device.
func (o DeviceSecondaryDeviceOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.AclTemplateId }).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, for a secondary
// device.
func (o DeviceSecondaryDeviceOutput) AdditionalBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *int { return v.AdditionalBandwidth }).(pulumi.IntPtrOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o DeviceSecondaryDeviceOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// Identifier of a cloud init file that will be applied on a secondary device.
func (o DeviceSecondaryDeviceOutput) CloudInitFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.CloudInitFileId }).(pulumi.StringPtrOutput)
}

// Secondary device hostname.
func (o DeviceSecondaryDeviceOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Device location Equinix Business Exchange name.
func (o DeviceSecondaryDeviceOutput) Ibx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.Ibx }).(pulumi.StringPtrOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o DeviceSecondaryDeviceOutput) Interfaces() DeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) []DeviceSecondaryDeviceInterface { return v.Interfaces }).(DeviceSecondaryDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// secondary device. Applicable for some device types in BYOL licensing mode.
func (o DeviceSecondaryDeviceOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.LicenseFile }).(pulumi.StringPtrOutput)
}

// Identifier of a license file that will be applied on a secondary device.
func (o DeviceSecondaryDeviceOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.LicenseFileId }).(pulumi.StringPtrOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o DeviceSecondaryDeviceOutput) LicenseStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.LicenseStatus }).(pulumi.StringPtrOutput)
}

// License Token can be provided for some device types o the device.
func (o DeviceSecondaryDeviceOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.LicenseToken }).(pulumi.StringPtrOutput)
}

// Metro location of a secondary device.
func (o DeviceSecondaryDeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) string { return v.MetroCode }).(pulumi.StringOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on a secondary device.
//   - `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
//     device.
func (o DeviceSecondaryDeviceOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.MgmtAclTemplateUuid }).(pulumi.StringPtrOutput)
}

// Secondary device name.
func (o DeviceSecondaryDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) string { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive notifications about
// secondary device.
func (o DeviceSecondaryDeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// Unique Identifier for the project resource where the device is scoped to.If you
// leave it out, the device will be created under the default project id of your organization.
func (o DeviceSecondaryDeviceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o DeviceSecondaryDeviceOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.RedundancyType }).(pulumi.StringPtrOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o DeviceSecondaryDeviceOutput) RedundantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.RedundantId }).(pulumi.StringPtrOutput)
}

// Device location region.
func (o DeviceSecondaryDeviceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o DeviceSecondaryDeviceOutput) SshIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.SshIpAddress }).(pulumi.StringPtrOutput)
}

// FQDN of SSH enabled interface on the device.
func (o DeviceSecondaryDeviceOutput) SshIpFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.SshIpFqdn }).(pulumi.StringPtrOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o DeviceSecondaryDeviceOutput) SshKey() DeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *DeviceSecondaryDeviceSshKey { return v.SshKey }).(DeviceSecondaryDeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceSecondaryDeviceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceSecondaryDeviceOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// Key/Value pairs of vendor specific configuration parameters
// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
// `systemIpAddress`.
func (o DeviceSecondaryDeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) map[string]string { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

// device interface id picked for WAN
func (o DeviceSecondaryDeviceOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.WanInterfaceId }).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o DeviceSecondaryDeviceOutput) ZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDevice) *string { return v.ZoneCode }).(pulumi.StringPtrOutput)
}

type DeviceSecondaryDevicePtrOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSecondaryDevice)(nil)).Elem()
}

func (o DeviceSecondaryDevicePtrOutput) ToDeviceSecondaryDevicePtrOutput() DeviceSecondaryDevicePtrOutput {
	return o
}

func (o DeviceSecondaryDevicePtrOutput) ToDeviceSecondaryDevicePtrOutputWithContext(ctx context.Context) DeviceSecondaryDevicePtrOutput {
	return o
}

func (o DeviceSecondaryDevicePtrOutput) Elem() DeviceSecondaryDeviceOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) DeviceSecondaryDevice {
		if v != nil {
			return *v
		}
		var ret DeviceSecondaryDevice
		return ret
	}).(DeviceSecondaryDeviceOutput)
}

// Billing account number for secondary device.
func (o DeviceSecondaryDevicePtrOutput) AccountNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.AccountNumber
	}).(pulumi.StringPtrOutput)
}

// Identifier of a WAN interface ACL template that will be applied
// on a secondary device.
func (o DeviceSecondaryDevicePtrOutput) AclTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.AclTemplateId
	}).(pulumi.StringPtrOutput)
}

// Additional Internet bandwidth, in Mbps, for a secondary
// device.
func (o DeviceSecondaryDevicePtrOutput) AdditionalBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalBandwidth
	}).(pulumi.IntPtrOutput)
}

// (Autonomous System Number) Unique identifier for a network on the internet.
func (o DeviceSecondaryDevicePtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *int {
		if v == nil {
			return nil
		}
		return v.Asn
	}).(pulumi.IntPtrOutput)
}

// Identifier of a cloud init file that will be applied on a secondary device.
func (o DeviceSecondaryDevicePtrOutput) CloudInitFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.CloudInitFileId
	}).(pulumi.StringPtrOutput)
}

// Secondary device hostname.
func (o DeviceSecondaryDevicePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Device location Equinix Business Exchange name.
func (o DeviceSecondaryDevicePtrOutput) Ibx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Ibx
	}).(pulumi.StringPtrOutput)
}

// List of device interfaces. See Interface Attribute below
// for more details.
func (o DeviceSecondaryDevicePtrOutput) Interfaces() DeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) []DeviceSecondaryDeviceInterface {
		if v == nil {
			return nil
		}
		return v.Interfaces
	}).(DeviceSecondaryDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a
// secondary device. Applicable for some device types in BYOL licensing mode.
func (o DeviceSecondaryDevicePtrOutput) LicenseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFile
	}).(pulumi.StringPtrOutput)
}

// Identifier of a license file that will be applied on a secondary device.
func (o DeviceSecondaryDevicePtrOutput) LicenseFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseFileId
	}).(pulumi.StringPtrOutput)
}

// Device license registration status. Possible values are `APPLYING_LICENSE`,
// `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
func (o DeviceSecondaryDevicePtrOutput) LicenseStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseStatus
	}).(pulumi.StringPtrOutput)
}

// License Token can be provided for some device types o the device.
func (o DeviceSecondaryDevicePtrOutput) LicenseToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.LicenseToken
	}).(pulumi.StringPtrOutput)
}

// Metro location of a secondary device.
func (o DeviceSecondaryDevicePtrOutput) MetroCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.MetroCode
	}).(pulumi.StringPtrOutput)
}

// Identifier of an MGMT interface ACL template that will be
// applied on a secondary device.
//   - `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
//     device.
func (o DeviceSecondaryDevicePtrOutput) MgmtAclTemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.MgmtAclTemplateUuid
	}).(pulumi.StringPtrOutput)
}

// Secondary device name.
func (o DeviceSecondaryDevicePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// List of email addresses that will receive notifications about
// secondary device.
func (o DeviceSecondaryDevicePtrOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) []string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringArrayOutput)
}

// Unique Identifier for the project resource where the device is scoped to.If you
// leave it out, the device will be created under the default project id of your organization.
func (o DeviceSecondaryDevicePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary.
func (o DeviceSecondaryDevicePtrOutput) RedundancyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.RedundancyType
	}).(pulumi.StringPtrOutput)
}

// Unique identifier for a redundant device applicable for HA devices.
func (o DeviceSecondaryDevicePtrOutput) RedundantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.RedundantId
	}).(pulumi.StringPtrOutput)
}

// Device location region.
func (o DeviceSecondaryDevicePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// IP address of SSH enabled interface on the device.
func (o DeviceSecondaryDevicePtrOutput) SshIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.SshIpAddress
	}).(pulumi.StringPtrOutput)
}

// FQDN of SSH enabled interface on the device.
func (o DeviceSecondaryDevicePtrOutput) SshIpFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.SshIpFqdn
	}).(pulumi.StringPtrOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o DeviceSecondaryDevicePtrOutput) SshKey() DeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *DeviceSecondaryDeviceSshKey {
		if v == nil {
			return nil
		}
		return v.SshKey
	}).(DeviceSecondaryDeviceSshKeyPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceSecondaryDevicePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Device unique identifier.
func (o DeviceSecondaryDevicePtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// Key/Value pairs of vendor specific configuration parameters
// for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
// `systemIpAddress`.
func (o DeviceSecondaryDevicePtrOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) map[string]string {
		if v == nil {
			return nil
		}
		return v.VendorConfiguration
	}).(pulumi.StringMapOutput)
}

// device interface id picked for WAN
func (o DeviceSecondaryDevicePtrOutput) WanInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.WanInterfaceId
	}).(pulumi.StringPtrOutput)
}

// Device location zone code.
func (o DeviceSecondaryDevicePtrOutput) ZoneCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDevice) *string {
		if v == nil {
			return nil
		}
		return v.ZoneCode
	}).(pulumi.StringPtrOutput)
}

type DeviceSecondaryDeviceInterface struct {
	// interface management type (Equinix Managed or empty).
	AssignedType *string `pulumi:"assignedType"`
	// interface identifier.
	Id *int `pulumi:"id"`
	// interface IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// Device name.
	Name *string `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus *string `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status *string `pulumi:"status"`
	// interface type.
	Type *string `pulumi:"type"`
}

// DeviceSecondaryDeviceInterfaceInput is an input type that accepts DeviceSecondaryDeviceInterfaceArgs and DeviceSecondaryDeviceInterfaceOutput values.
// You can construct a concrete instance of `DeviceSecondaryDeviceInterfaceInput` via:
//
//	DeviceSecondaryDeviceInterfaceArgs{...}
type DeviceSecondaryDeviceInterfaceInput interface {
	pulumi.Input

	ToDeviceSecondaryDeviceInterfaceOutput() DeviceSecondaryDeviceInterfaceOutput
	ToDeviceSecondaryDeviceInterfaceOutputWithContext(context.Context) DeviceSecondaryDeviceInterfaceOutput
}

type DeviceSecondaryDeviceInterfaceArgs struct {
	// interface management type (Equinix Managed or empty).
	AssignedType pulumi.StringPtrInput `pulumi:"assignedType"`
	// interface identifier.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// interface IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// interface MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// Device name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// interface operational status. One of `up`, `down`.
	OperationalStatus pulumi.StringPtrInput `pulumi:"operationalStatus"`
	// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// interface type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeviceSecondaryDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i DeviceSecondaryDeviceInterfaceArgs) ToDeviceSecondaryDeviceInterfaceOutput() DeviceSecondaryDeviceInterfaceOutput {
	return i.ToDeviceSecondaryDeviceInterfaceOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceInterfaceArgs) ToDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) DeviceSecondaryDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceInterfaceOutput)
}

// DeviceSecondaryDeviceInterfaceArrayInput is an input type that accepts DeviceSecondaryDeviceInterfaceArray and DeviceSecondaryDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `DeviceSecondaryDeviceInterfaceArrayInput` via:
//
//	DeviceSecondaryDeviceInterfaceArray{ DeviceSecondaryDeviceInterfaceArgs{...} }
type DeviceSecondaryDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToDeviceSecondaryDeviceInterfaceArrayOutput() DeviceSecondaryDeviceInterfaceArrayOutput
	ToDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Context) DeviceSecondaryDeviceInterfaceArrayOutput
}

type DeviceSecondaryDeviceInterfaceArray []DeviceSecondaryDeviceInterfaceInput

func (DeviceSecondaryDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i DeviceSecondaryDeviceInterfaceArray) ToDeviceSecondaryDeviceInterfaceArrayOutput() DeviceSecondaryDeviceInterfaceArrayOutput {
	return i.ToDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceInterfaceArray) ToDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceSecondaryDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceInterfaceArrayOutput)
}

type DeviceSecondaryDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o DeviceSecondaryDeviceInterfaceOutput) ToDeviceSecondaryDeviceInterfaceOutput() DeviceSecondaryDeviceInterfaceOutput {
	return o
}

func (o DeviceSecondaryDeviceInterfaceOutput) ToDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) DeviceSecondaryDeviceInterfaceOutput {
	return o
}

// interface management type (Equinix Managed or empty).
func (o DeviceSecondaryDeviceInterfaceOutput) AssignedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.AssignedType }).(pulumi.StringPtrOutput)
}

// interface identifier.
func (o DeviceSecondaryDeviceInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// interface IP address.
func (o DeviceSecondaryDeviceInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// interface MAC address.
func (o DeviceSecondaryDeviceInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// Device name.
func (o DeviceSecondaryDeviceInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// interface operational status. One of `up`, `down`.
func (o DeviceSecondaryDeviceInterfaceOutput) OperationalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.OperationalStatus }).(pulumi.StringPtrOutput)
}

// interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
func (o DeviceSecondaryDeviceInterfaceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// interface type.
func (o DeviceSecondaryDeviceInterfaceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceInterface) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeviceSecondaryDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o DeviceSecondaryDeviceInterfaceArrayOutput) ToDeviceSecondaryDeviceInterfaceArrayOutput() DeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o DeviceSecondaryDeviceInterfaceArrayOutput) ToDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o DeviceSecondaryDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) DeviceSecondaryDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceSecondaryDeviceInterface {
		return vs[0].([]DeviceSecondaryDeviceInterface)[vs[1].(int)]
	}).(DeviceSecondaryDeviceInterfaceOutput)
}

type DeviceSecondaryDeviceSshKey struct {
	// Reference by name to previously provisioned public SSH key
	KeyName string `pulumi:"keyName"`
	// username associated with given key.
	Username string `pulumi:"username"`
}

// DeviceSecondaryDeviceSshKeyInput is an input type that accepts DeviceSecondaryDeviceSshKeyArgs and DeviceSecondaryDeviceSshKeyOutput values.
// You can construct a concrete instance of `DeviceSecondaryDeviceSshKeyInput` via:
//
//	DeviceSecondaryDeviceSshKeyArgs{...}
type DeviceSecondaryDeviceSshKeyInput interface {
	pulumi.Input

	ToDeviceSecondaryDeviceSshKeyOutput() DeviceSecondaryDeviceSshKeyOutput
	ToDeviceSecondaryDeviceSshKeyOutputWithContext(context.Context) DeviceSecondaryDeviceSshKeyOutput
}

type DeviceSecondaryDeviceSshKeyArgs struct {
	// Reference by name to previously provisioned public SSH key
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// username associated with given key.
	Username pulumi.StringInput `pulumi:"username"`
}

func (DeviceSecondaryDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i DeviceSecondaryDeviceSshKeyArgs) ToDeviceSecondaryDeviceSshKeyOutput() DeviceSecondaryDeviceSshKeyOutput {
	return i.ToDeviceSecondaryDeviceSshKeyOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceSshKeyArgs) ToDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceSshKeyOutput)
}

func (i DeviceSecondaryDeviceSshKeyArgs) ToDeviceSecondaryDeviceSshKeyPtrOutput() DeviceSecondaryDeviceSshKeyPtrOutput {
	return i.ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i DeviceSecondaryDeviceSshKeyArgs) ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceSshKeyOutput).ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx)
}

// DeviceSecondaryDeviceSshKeyPtrInput is an input type that accepts DeviceSecondaryDeviceSshKeyArgs, DeviceSecondaryDeviceSshKeyPtr and DeviceSecondaryDeviceSshKeyPtrOutput values.
// You can construct a concrete instance of `DeviceSecondaryDeviceSshKeyPtrInput` via:
//
//	        DeviceSecondaryDeviceSshKeyArgs{...}
//
//	or:
//
//	        nil
type DeviceSecondaryDeviceSshKeyPtrInput interface {
	pulumi.Input

	ToDeviceSecondaryDeviceSshKeyPtrOutput() DeviceSecondaryDeviceSshKeyPtrOutput
	ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Context) DeviceSecondaryDeviceSshKeyPtrOutput
}

type deviceSecondaryDeviceSshKeyPtrType DeviceSecondaryDeviceSshKeyArgs

func DeviceSecondaryDeviceSshKeyPtr(v *DeviceSecondaryDeviceSshKeyArgs) DeviceSecondaryDeviceSshKeyPtrInput {
	return (*deviceSecondaryDeviceSshKeyPtrType)(v)
}

func (*deviceSecondaryDeviceSshKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i *deviceSecondaryDeviceSshKeyPtrType) ToDeviceSecondaryDeviceSshKeyPtrOutput() DeviceSecondaryDeviceSshKeyPtrOutput {
	return i.ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i *deviceSecondaryDeviceSshKeyPtrType) ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSecondaryDeviceSshKeyPtrOutput)
}

type DeviceSecondaryDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o DeviceSecondaryDeviceSshKeyOutput) ToDeviceSecondaryDeviceSshKeyOutput() DeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o DeviceSecondaryDeviceSshKeyOutput) ToDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o DeviceSecondaryDeviceSshKeyOutput) ToDeviceSecondaryDeviceSshKeyPtrOutput() DeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (o DeviceSecondaryDeviceSshKeyOutput) ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceSecondaryDeviceSshKey) *DeviceSecondaryDeviceSshKey {
		return &v
	}).(DeviceSecondaryDeviceSshKeyPtrOutput)
}

// Reference by name to previously provisioned public SSH key
func (o DeviceSecondaryDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// username associated with given key.
func (o DeviceSecondaryDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSecondaryDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type DeviceSecondaryDeviceSshKeyPtrOutput struct{ *pulumi.OutputState }

func (DeviceSecondaryDeviceSshKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o DeviceSecondaryDeviceSshKeyPtrOutput) ToDeviceSecondaryDeviceSshKeyPtrOutput() DeviceSecondaryDeviceSshKeyPtrOutput {
	return o
}

func (o DeviceSecondaryDeviceSshKeyPtrOutput) ToDeviceSecondaryDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSecondaryDeviceSshKeyPtrOutput {
	return o
}

func (o DeviceSecondaryDeviceSshKeyPtrOutput) Elem() DeviceSecondaryDeviceSshKeyOutput {
	return o.ApplyT(func(v *DeviceSecondaryDeviceSshKey) DeviceSecondaryDeviceSshKey {
		if v != nil {
			return *v
		}
		var ret DeviceSecondaryDeviceSshKey
		return ret
	}).(DeviceSecondaryDeviceSshKeyOutput)
}

// Reference by name to previously provisioned public SSH key
func (o DeviceSecondaryDeviceSshKeyPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// username associated with given key.
func (o DeviceSecondaryDeviceSshKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSecondaryDeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type DeviceSshKey struct {
	// Reference by name to previously provisioned public SSH key
	KeyName string `pulumi:"keyName"`
	// username associated with given key.
	Username string `pulumi:"username"`
}

// DeviceSshKeyInput is an input type that accepts DeviceSshKeyArgs and DeviceSshKeyOutput values.
// You can construct a concrete instance of `DeviceSshKeyInput` via:
//
//	DeviceSshKeyArgs{...}
type DeviceSshKeyInput interface {
	pulumi.Input

	ToDeviceSshKeyOutput() DeviceSshKeyOutput
	ToDeviceSshKeyOutputWithContext(context.Context) DeviceSshKeyOutput
}

type DeviceSshKeyArgs struct {
	// Reference by name to previously provisioned public SSH key
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// username associated with given key.
	Username pulumi.StringInput `pulumi:"username"`
}

func (DeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSshKey)(nil)).Elem()
}

func (i DeviceSshKeyArgs) ToDeviceSshKeyOutput() DeviceSshKeyOutput {
	return i.ToDeviceSshKeyOutputWithContext(context.Background())
}

func (i DeviceSshKeyArgs) ToDeviceSshKeyOutputWithContext(ctx context.Context) DeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSshKeyOutput)
}

func (i DeviceSshKeyArgs) ToDeviceSshKeyPtrOutput() DeviceSshKeyPtrOutput {
	return i.ToDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i DeviceSshKeyArgs) ToDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSshKeyOutput).ToDeviceSshKeyPtrOutputWithContext(ctx)
}

// DeviceSshKeyPtrInput is an input type that accepts DeviceSshKeyArgs, DeviceSshKeyPtr and DeviceSshKeyPtrOutput values.
// You can construct a concrete instance of `DeviceSshKeyPtrInput` via:
//
//	        DeviceSshKeyArgs{...}
//
//	or:
//
//	        nil
type DeviceSshKeyPtrInput interface {
	pulumi.Input

	ToDeviceSshKeyPtrOutput() DeviceSshKeyPtrOutput
	ToDeviceSshKeyPtrOutputWithContext(context.Context) DeviceSshKeyPtrOutput
}

type deviceSshKeyPtrType DeviceSshKeyArgs

func DeviceSshKeyPtr(v *DeviceSshKeyArgs) DeviceSshKeyPtrInput {
	return (*deviceSshKeyPtrType)(v)
}

func (*deviceSshKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSshKey)(nil)).Elem()
}

func (i *deviceSshKeyPtrType) ToDeviceSshKeyPtrOutput() DeviceSshKeyPtrOutput {
	return i.ToDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (i *deviceSshKeyPtrType) ToDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSshKeyPtrOutput)
}

type DeviceSshKeyOutput struct{ *pulumi.OutputState }

func (DeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceSshKey)(nil)).Elem()
}

func (o DeviceSshKeyOutput) ToDeviceSshKeyOutput() DeviceSshKeyOutput {
	return o
}

func (o DeviceSshKeyOutput) ToDeviceSshKeyOutputWithContext(ctx context.Context) DeviceSshKeyOutput {
	return o
}

func (o DeviceSshKeyOutput) ToDeviceSshKeyPtrOutput() DeviceSshKeyPtrOutput {
	return o.ToDeviceSshKeyPtrOutputWithContext(context.Background())
}

func (o DeviceSshKeyOutput) ToDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSshKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceSshKey) *DeviceSshKey {
		return &v
	}).(DeviceSshKeyPtrOutput)
}

// Reference by name to previously provisioned public SSH key
func (o DeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// username associated with given key.
func (o DeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type DeviceSshKeyPtrOutput struct{ *pulumi.OutputState }

func (DeviceSshKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSshKey)(nil)).Elem()
}

func (o DeviceSshKeyPtrOutput) ToDeviceSshKeyPtrOutput() DeviceSshKeyPtrOutput {
	return o
}

func (o DeviceSshKeyPtrOutput) ToDeviceSshKeyPtrOutputWithContext(ctx context.Context) DeviceSshKeyPtrOutput {
	return o
}

func (o DeviceSshKeyPtrOutput) Elem() DeviceSshKeyOutput {
	return o.ApplyT(func(v *DeviceSshKey) DeviceSshKey {
		if v != nil {
			return *v
		}
		var ret DeviceSshKey
		return ret
	}).(DeviceSshKeyOutput)
}

// Reference by name to previously provisioned public SSH key
func (o DeviceSshKeyPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// username associated with given key.
func (o DeviceSshKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSshKey) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type GetDeviceClusterDetail struct {
	// The id of the cluster
	ClusterId string `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName string `pulumi:"clusterName"`
	// An object that has node0 details
	Node0s []GetDeviceClusterDetailNode0 `pulumi:"node0s"`
	// An object that has node1 details
	Node1s []GetDeviceClusterDetailNode1 `pulumi:"node1s"`
	// The number of nodes in the cluster
	NumOfNodes int `pulumi:"numOfNodes"`
}

// GetDeviceClusterDetailInput is an input type that accepts GetDeviceClusterDetailArgs and GetDeviceClusterDetailOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailInput` via:
//
//	GetDeviceClusterDetailArgs{...}
type GetDeviceClusterDetailInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailOutput() GetDeviceClusterDetailOutput
	ToGetDeviceClusterDetailOutputWithContext(context.Context) GetDeviceClusterDetailOutput
}

type GetDeviceClusterDetailArgs struct {
	// The id of the cluster
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the cluster device
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// An object that has node0 details
	Node0s GetDeviceClusterDetailNode0ArrayInput `pulumi:"node0s"`
	// An object that has node1 details
	Node1s GetDeviceClusterDetailNode1ArrayInput `pulumi:"node1s"`
	// The number of nodes in the cluster
	NumOfNodes pulumi.IntInput `pulumi:"numOfNodes"`
}

func (GetDeviceClusterDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetail)(nil)).Elem()
}

func (i GetDeviceClusterDetailArgs) ToGetDeviceClusterDetailOutput() GetDeviceClusterDetailOutput {
	return i.ToGetDeviceClusterDetailOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailArgs) ToGetDeviceClusterDetailOutputWithContext(ctx context.Context) GetDeviceClusterDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailOutput)
}

// GetDeviceClusterDetailArrayInput is an input type that accepts GetDeviceClusterDetailArray and GetDeviceClusterDetailArrayOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailArrayInput` via:
//
//	GetDeviceClusterDetailArray{ GetDeviceClusterDetailArgs{...} }
type GetDeviceClusterDetailArrayInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailArrayOutput() GetDeviceClusterDetailArrayOutput
	ToGetDeviceClusterDetailArrayOutputWithContext(context.Context) GetDeviceClusterDetailArrayOutput
}

type GetDeviceClusterDetailArray []GetDeviceClusterDetailInput

func (GetDeviceClusterDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetail)(nil)).Elem()
}

func (i GetDeviceClusterDetailArray) ToGetDeviceClusterDetailArrayOutput() GetDeviceClusterDetailArrayOutput {
	return i.ToGetDeviceClusterDetailArrayOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailArray) ToGetDeviceClusterDetailArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailArrayOutput)
}

type GetDeviceClusterDetailOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetail)(nil)).Elem()
}

func (o GetDeviceClusterDetailOutput) ToGetDeviceClusterDetailOutput() GetDeviceClusterDetailOutput {
	return o
}

func (o GetDeviceClusterDetailOutput) ToGetDeviceClusterDetailOutputWithContext(ctx context.Context) GetDeviceClusterDetailOutput {
	return o
}

// The id of the cluster
func (o GetDeviceClusterDetailOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetail) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the cluster device
func (o GetDeviceClusterDetailOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetail) string { return v.ClusterName }).(pulumi.StringOutput)
}

// An object that has node0 details
func (o GetDeviceClusterDetailOutput) Node0s() GetDeviceClusterDetailNode0ArrayOutput {
	return o.ApplyT(func(v GetDeviceClusterDetail) []GetDeviceClusterDetailNode0 { return v.Node0s }).(GetDeviceClusterDetailNode0ArrayOutput)
}

// An object that has node1 details
func (o GetDeviceClusterDetailOutput) Node1s() GetDeviceClusterDetailNode1ArrayOutput {
	return o.ApplyT(func(v GetDeviceClusterDetail) []GetDeviceClusterDetailNode1 { return v.Node1s }).(GetDeviceClusterDetailNode1ArrayOutput)
}

// The number of nodes in the cluster
func (o GetDeviceClusterDetailOutput) NumOfNodes() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceClusterDetail) int { return v.NumOfNodes }).(pulumi.IntOutput)
}

type GetDeviceClusterDetailArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetail)(nil)).Elem()
}

func (o GetDeviceClusterDetailArrayOutput) ToGetDeviceClusterDetailArrayOutput() GetDeviceClusterDetailArrayOutput {
	return o
}

func (o GetDeviceClusterDetailArrayOutput) ToGetDeviceClusterDetailArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailArrayOutput {
	return o
}

func (o GetDeviceClusterDetailArrayOutput) Index(i pulumi.IntInput) GetDeviceClusterDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceClusterDetail {
		return vs[0].([]GetDeviceClusterDetail)[vs[1].(int)]
	}).(GetDeviceClusterDetailOutput)
}

type GetDeviceClusterDetailNode0 struct {
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters
	LicenseToken string `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the cluster device
	VendorConfigurations []GetDeviceClusterDetailNode0VendorConfiguration `pulumi:"vendorConfigurations"`
}

// GetDeviceClusterDetailNode0Input is an input type that accepts GetDeviceClusterDetailNode0Args and GetDeviceClusterDetailNode0Output values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode0Input` via:
//
//	GetDeviceClusterDetailNode0Args{...}
type GetDeviceClusterDetailNode0Input interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode0Output() GetDeviceClusterDetailNode0Output
	ToGetDeviceClusterDetailNode0OutputWithContext(context.Context) GetDeviceClusterDetailNode0Output
}

type GetDeviceClusterDetailNode0Args struct {
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters
	LicenseToken pulumi.StringInput `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid pulumi.StringInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the cluster device
	VendorConfigurations GetDeviceClusterDetailNode0VendorConfigurationArrayInput `pulumi:"vendorConfigurations"`
}

func (GetDeviceClusterDetailNode0Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode0)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode0Args) ToGetDeviceClusterDetailNode0Output() GetDeviceClusterDetailNode0Output {
	return i.ToGetDeviceClusterDetailNode0OutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode0Args) ToGetDeviceClusterDetailNode0OutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode0Output)
}

// GetDeviceClusterDetailNode0ArrayInput is an input type that accepts GetDeviceClusterDetailNode0Array and GetDeviceClusterDetailNode0ArrayOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode0ArrayInput` via:
//
//	GetDeviceClusterDetailNode0Array{ GetDeviceClusterDetailNode0Args{...} }
type GetDeviceClusterDetailNode0ArrayInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode0ArrayOutput() GetDeviceClusterDetailNode0ArrayOutput
	ToGetDeviceClusterDetailNode0ArrayOutputWithContext(context.Context) GetDeviceClusterDetailNode0ArrayOutput
}

type GetDeviceClusterDetailNode0Array []GetDeviceClusterDetailNode0Input

func (GetDeviceClusterDetailNode0Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode0)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode0Array) ToGetDeviceClusterDetailNode0ArrayOutput() GetDeviceClusterDetailNode0ArrayOutput {
	return i.ToGetDeviceClusterDetailNode0ArrayOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode0Array) ToGetDeviceClusterDetailNode0ArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode0ArrayOutput)
}

type GetDeviceClusterDetailNode0Output struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode0Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode0)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode0Output) ToGetDeviceClusterDetailNode0Output() GetDeviceClusterDetailNode0Output {
	return o
}

func (o GetDeviceClusterDetailNode0Output) ToGetDeviceClusterDetailNode0OutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0Output {
	return o
}

// Unique identifier of applied license file
func (o GetDeviceClusterDetailNode0Output) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

// License token. This is necessary for Palo Alto clusters
func (o GetDeviceClusterDetailNode0Output) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0) string { return v.LicenseToken }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetDeviceClusterDetailNode0Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetDeviceClusterDetailNode0Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0) string { return v.Uuid }).(pulumi.StringOutput)
}

// An object that has fields relevant to the vendor of the cluster device
func (o GetDeviceClusterDetailNode0Output) VendorConfigurations() GetDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0) []GetDeviceClusterDetailNode0VendorConfiguration {
		return v.VendorConfigurations
	}).(GetDeviceClusterDetailNode0VendorConfigurationArrayOutput)
}

type GetDeviceClusterDetailNode0ArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode0ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode0)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode0ArrayOutput) ToGetDeviceClusterDetailNode0ArrayOutput() GetDeviceClusterDetailNode0ArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode0ArrayOutput) ToGetDeviceClusterDetailNode0ArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0ArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode0ArrayOutput) Index(i pulumi.IntInput) GetDeviceClusterDetailNode0Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceClusterDetailNode0 {
		return vs[0].([]GetDeviceClusterDetailNode0)[vs[1].(int)]
	}).(GetDeviceClusterDetailNode0Output)
}

type GetDeviceClusterDetailNode0VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters
	ActivationKey string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	AdminPassword string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	Controller1 string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters
	ControllerFqdn string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	Hostname string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	RootPassword string `pulumi:"rootPassword"`
}

// GetDeviceClusterDetailNode0VendorConfigurationInput is an input type that accepts GetDeviceClusterDetailNode0VendorConfigurationArgs and GetDeviceClusterDetailNode0VendorConfigurationOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode0VendorConfigurationInput` via:
//
//	GetDeviceClusterDetailNode0VendorConfigurationArgs{...}
type GetDeviceClusterDetailNode0VendorConfigurationInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode0VendorConfigurationOutput() GetDeviceClusterDetailNode0VendorConfigurationOutput
	ToGetDeviceClusterDetailNode0VendorConfigurationOutputWithContext(context.Context) GetDeviceClusterDetailNode0VendorConfigurationOutput
}

type GetDeviceClusterDetailNode0VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters
	ActivationKey pulumi.StringInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	AdminPassword pulumi.StringInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	Controller1 pulumi.StringInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters
	ControllerFqdn pulumi.StringInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	RootPassword pulumi.StringInput `pulumi:"rootPassword"`
}

func (GetDeviceClusterDetailNode0VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode0VendorConfigurationArgs) ToGetDeviceClusterDetailNode0VendorConfigurationOutput() GetDeviceClusterDetailNode0VendorConfigurationOutput {
	return i.ToGetDeviceClusterDetailNode0VendorConfigurationOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode0VendorConfigurationArgs) ToGetDeviceClusterDetailNode0VendorConfigurationOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode0VendorConfigurationOutput)
}

// GetDeviceClusterDetailNode0VendorConfigurationArrayInput is an input type that accepts GetDeviceClusterDetailNode0VendorConfigurationArray and GetDeviceClusterDetailNode0VendorConfigurationArrayOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode0VendorConfigurationArrayInput` via:
//
//	GetDeviceClusterDetailNode0VendorConfigurationArray{ GetDeviceClusterDetailNode0VendorConfigurationArgs{...} }
type GetDeviceClusterDetailNode0VendorConfigurationArrayInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetDeviceClusterDetailNode0VendorConfigurationArrayOutput
	ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(context.Context) GetDeviceClusterDetailNode0VendorConfigurationArrayOutput
}

type GetDeviceClusterDetailNode0VendorConfigurationArray []GetDeviceClusterDetailNode0VendorConfigurationInput

func (GetDeviceClusterDetailNode0VendorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode0VendorConfigurationArray) ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return i.ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode0VendorConfigurationArray) ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode0VendorConfigurationArrayOutput)
}

type GetDeviceClusterDetailNode0VendorConfigurationOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode0VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) ToGetDeviceClusterDetailNode0VendorConfigurationOutput() GetDeviceClusterDetailNode0VendorConfigurationOutput {
	return o
}

func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) ToGetDeviceClusterDetailNode0VendorConfigurationOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0VendorConfigurationOutput {
	return o
}

// Activation key. This is required for Velocloud clusters
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.ActivationKey }).(pulumi.StringOutput)
}

// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.AdminPassword }).(pulumi.StringOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) Controller1() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.Controller1 }).(pulumi.StringOutput)
}

// Controller fqdn. This is required for Velocloud clusters
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) ControllerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.ControllerFqdn }).(pulumi.StringOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.Hostname }).(pulumi.StringOutput)
}

// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
func (o GetDeviceClusterDetailNode0VendorConfigurationOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode0VendorConfiguration) string { return v.RootPassword }).(pulumi.StringOutput)
}

type GetDeviceClusterDetailNode0VendorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode0VendorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode0VendorConfiguration)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode0VendorConfigurationArrayOutput) ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutput() GetDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode0VendorConfigurationArrayOutput) ToGetDeviceClusterDetailNode0VendorConfigurationArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode0VendorConfigurationArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode0VendorConfigurationArrayOutput) Index(i pulumi.IntInput) GetDeviceClusterDetailNode0VendorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceClusterDetailNode0VendorConfiguration {
		return vs[0].([]GetDeviceClusterDetailNode0VendorConfiguration)[vs[1].(int)]
	}).(GetDeviceClusterDetailNode0VendorConfigurationOutput)
}

type GetDeviceClusterDetailNode1 struct {
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters
	LicenseToken string `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid string `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the cluster device
	VendorConfigurations []GetDeviceClusterDetailNode1VendorConfiguration `pulumi:"vendorConfigurations"`
}

// GetDeviceClusterDetailNode1Input is an input type that accepts GetDeviceClusterDetailNode1Args and GetDeviceClusterDetailNode1Output values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode1Input` via:
//
//	GetDeviceClusterDetailNode1Args{...}
type GetDeviceClusterDetailNode1Input interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode1Output() GetDeviceClusterDetailNode1Output
	ToGetDeviceClusterDetailNode1OutputWithContext(context.Context) GetDeviceClusterDetailNode1Output
}

type GetDeviceClusterDetailNode1Args struct {
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	// License token. This is necessary for Palo Alto clusters
	LicenseToken pulumi.StringInput `pulumi:"licenseToken"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// UUID of an existing Equinix Network Edge device
	Uuid pulumi.StringInput `pulumi:"uuid"`
	// An object that has fields relevant to the vendor of the cluster device
	VendorConfigurations GetDeviceClusterDetailNode1VendorConfigurationArrayInput `pulumi:"vendorConfigurations"`
}

func (GetDeviceClusterDetailNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode1)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode1Args) ToGetDeviceClusterDetailNode1Output() GetDeviceClusterDetailNode1Output {
	return i.ToGetDeviceClusterDetailNode1OutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode1Args) ToGetDeviceClusterDetailNode1OutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode1Output)
}

// GetDeviceClusterDetailNode1ArrayInput is an input type that accepts GetDeviceClusterDetailNode1Array and GetDeviceClusterDetailNode1ArrayOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode1ArrayInput` via:
//
//	GetDeviceClusterDetailNode1Array{ GetDeviceClusterDetailNode1Args{...} }
type GetDeviceClusterDetailNode1ArrayInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode1ArrayOutput() GetDeviceClusterDetailNode1ArrayOutput
	ToGetDeviceClusterDetailNode1ArrayOutputWithContext(context.Context) GetDeviceClusterDetailNode1ArrayOutput
}

type GetDeviceClusterDetailNode1Array []GetDeviceClusterDetailNode1Input

func (GetDeviceClusterDetailNode1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode1)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode1Array) ToGetDeviceClusterDetailNode1ArrayOutput() GetDeviceClusterDetailNode1ArrayOutput {
	return i.ToGetDeviceClusterDetailNode1ArrayOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode1Array) ToGetDeviceClusterDetailNode1ArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode1ArrayOutput)
}

type GetDeviceClusterDetailNode1Output struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode1)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode1Output) ToGetDeviceClusterDetailNode1Output() GetDeviceClusterDetailNode1Output {
	return o
}

func (o GetDeviceClusterDetailNode1Output) ToGetDeviceClusterDetailNode1OutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1Output {
	return o
}

// Unique identifier of applied license file
func (o GetDeviceClusterDetailNode1Output) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

// License token. This is necessary for Palo Alto clusters
func (o GetDeviceClusterDetailNode1Output) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1) string { return v.LicenseToken }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetDeviceClusterDetailNode1Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1) string { return v.Name }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetDeviceClusterDetailNode1Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1) string { return v.Uuid }).(pulumi.StringOutput)
}

// An object that has fields relevant to the vendor of the cluster device
func (o GetDeviceClusterDetailNode1Output) VendorConfigurations() GetDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1) []GetDeviceClusterDetailNode1VendorConfiguration {
		return v.VendorConfigurations
	}).(GetDeviceClusterDetailNode1VendorConfigurationArrayOutput)
}

type GetDeviceClusterDetailNode1ArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode1)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode1ArrayOutput) ToGetDeviceClusterDetailNode1ArrayOutput() GetDeviceClusterDetailNode1ArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode1ArrayOutput) ToGetDeviceClusterDetailNode1ArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1ArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode1ArrayOutput) Index(i pulumi.IntInput) GetDeviceClusterDetailNode1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceClusterDetailNode1 {
		return vs[0].([]GetDeviceClusterDetailNode1)[vs[1].(int)]
	}).(GetDeviceClusterDetailNode1Output)
}

type GetDeviceClusterDetailNode1VendorConfiguration struct {
	// Activation key. This is required for Velocloud clusters
	ActivationKey string `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	AdminPassword string `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	Controller1 string `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters
	ControllerFqdn string `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	Hostname string `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	RootPassword string `pulumi:"rootPassword"`
}

// GetDeviceClusterDetailNode1VendorConfigurationInput is an input type that accepts GetDeviceClusterDetailNode1VendorConfigurationArgs and GetDeviceClusterDetailNode1VendorConfigurationOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode1VendorConfigurationInput` via:
//
//	GetDeviceClusterDetailNode1VendorConfigurationArgs{...}
type GetDeviceClusterDetailNode1VendorConfigurationInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode1VendorConfigurationOutput() GetDeviceClusterDetailNode1VendorConfigurationOutput
	ToGetDeviceClusterDetailNode1VendorConfigurationOutputWithContext(context.Context) GetDeviceClusterDetailNode1VendorConfigurationOutput
}

type GetDeviceClusterDetailNode1VendorConfigurationArgs struct {
	// Activation key. This is required for Velocloud clusters
	ActivationKey pulumi.StringInput `pulumi:"activationKey"`
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	AdminPassword pulumi.StringInput `pulumi:"adminPassword"`
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	Controller1 pulumi.StringInput `pulumi:"controller1"`
	// Controller fqdn. This is required for Velocloud clusters
	ControllerFqdn pulumi.StringInput `pulumi:"controllerFqdn"`
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	RootPassword pulumi.StringInput `pulumi:"rootPassword"`
}

func (GetDeviceClusterDetailNode1VendorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode1VendorConfigurationArgs) ToGetDeviceClusterDetailNode1VendorConfigurationOutput() GetDeviceClusterDetailNode1VendorConfigurationOutput {
	return i.ToGetDeviceClusterDetailNode1VendorConfigurationOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode1VendorConfigurationArgs) ToGetDeviceClusterDetailNode1VendorConfigurationOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1VendorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode1VendorConfigurationOutput)
}

// GetDeviceClusterDetailNode1VendorConfigurationArrayInput is an input type that accepts GetDeviceClusterDetailNode1VendorConfigurationArray and GetDeviceClusterDetailNode1VendorConfigurationArrayOutput values.
// You can construct a concrete instance of `GetDeviceClusterDetailNode1VendorConfigurationArrayInput` via:
//
//	GetDeviceClusterDetailNode1VendorConfigurationArray{ GetDeviceClusterDetailNode1VendorConfigurationArgs{...} }
type GetDeviceClusterDetailNode1VendorConfigurationArrayInput interface {
	pulumi.Input

	ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetDeviceClusterDetailNode1VendorConfigurationArrayOutput
	ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(context.Context) GetDeviceClusterDetailNode1VendorConfigurationArrayOutput
}

type GetDeviceClusterDetailNode1VendorConfigurationArray []GetDeviceClusterDetailNode1VendorConfigurationInput

func (GetDeviceClusterDetailNode1VendorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (i GetDeviceClusterDetailNode1VendorConfigurationArray) ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return i.ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(context.Background())
}

func (i GetDeviceClusterDetailNode1VendorConfigurationArray) ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceClusterDetailNode1VendorConfigurationArrayOutput)
}

type GetDeviceClusterDetailNode1VendorConfigurationOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode1VendorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) ToGetDeviceClusterDetailNode1VendorConfigurationOutput() GetDeviceClusterDetailNode1VendorConfigurationOutput {
	return o
}

func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) ToGetDeviceClusterDetailNode1VendorConfigurationOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1VendorConfigurationOutput {
	return o
}

// Activation key. This is required for Velocloud clusters
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.ActivationKey }).(pulumi.StringOutput)
}

// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.AdminPassword }).(pulumi.StringOutput)
}

// System IP Address. Mandatory for the Fortinet SDWAN cluster device
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) Controller1() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.Controller1 }).(pulumi.StringOutput)
}

// Controller fqdn. This is required for Velocloud clusters
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) ControllerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.ControllerFqdn }).(pulumi.StringOutput)
}

// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.Hostname }).(pulumi.StringOutput)
}

// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
func (o GetDeviceClusterDetailNode1VendorConfigurationOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceClusterDetailNode1VendorConfiguration) string { return v.RootPassword }).(pulumi.StringOutput)
}

type GetDeviceClusterDetailNode1VendorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceClusterDetailNode1VendorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceClusterDetailNode1VendorConfiguration)(nil)).Elem()
}

func (o GetDeviceClusterDetailNode1VendorConfigurationArrayOutput) ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutput() GetDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode1VendorConfigurationArrayOutput) ToGetDeviceClusterDetailNode1VendorConfigurationArrayOutputWithContext(ctx context.Context) GetDeviceClusterDetailNode1VendorConfigurationArrayOutput {
	return o
}

func (o GetDeviceClusterDetailNode1VendorConfigurationArrayOutput) Index(i pulumi.IntInput) GetDeviceClusterDetailNode1VendorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceClusterDetailNode1VendorConfiguration {
		return vs[0].([]GetDeviceClusterDetailNode1VendorConfiguration)[vs[1].(int)]
	}).(GetDeviceClusterDetailNode1VendorConfigurationOutput)
}

type GetDeviceInterface struct {
	// Interface management type (Equinix Managed or empty)
	AssignedType string `pulumi:"assignedType"`
	// Interface identifier
	Id int `pulumi:"id"`
	// interface IP address
	IpAddress string `pulumi:"ipAddress"`
	// Interface MAC addres
	MacAddress string `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// Interface operational status (up or down)
	OperationalStatus string `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status string `pulumi:"status"`
	// Interface type
	Type string `pulumi:"type"`
}

// GetDeviceInterfaceInput is an input type that accepts GetDeviceInterfaceArgs and GetDeviceInterfaceOutput values.
// You can construct a concrete instance of `GetDeviceInterfaceInput` via:
//
//	GetDeviceInterfaceArgs{...}
type GetDeviceInterfaceInput interface {
	pulumi.Input

	ToGetDeviceInterfaceOutput() GetDeviceInterfaceOutput
	ToGetDeviceInterfaceOutputWithContext(context.Context) GetDeviceInterfaceOutput
}

type GetDeviceInterfaceArgs struct {
	// Interface management type (Equinix Managed or empty)
	AssignedType pulumi.StringInput `pulumi:"assignedType"`
	// Interface identifier
	Id pulumi.IntInput `pulumi:"id"`
	// interface IP address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Interface MAC addres
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// Interface operational status (up or down)
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status pulumi.StringInput `pulumi:"status"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInterface)(nil)).Elem()
}

func (i GetDeviceInterfaceArgs) ToGetDeviceInterfaceOutput() GetDeviceInterfaceOutput {
	return i.ToGetDeviceInterfaceOutputWithContext(context.Background())
}

func (i GetDeviceInterfaceArgs) ToGetDeviceInterfaceOutputWithContext(ctx context.Context) GetDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInterfaceOutput)
}

// GetDeviceInterfaceArrayInput is an input type that accepts GetDeviceInterfaceArray and GetDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `GetDeviceInterfaceArrayInput` via:
//
//	GetDeviceInterfaceArray{ GetDeviceInterfaceArgs{...} }
type GetDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToGetDeviceInterfaceArrayOutput() GetDeviceInterfaceArrayOutput
	ToGetDeviceInterfaceArrayOutputWithContext(context.Context) GetDeviceInterfaceArrayOutput
}

type GetDeviceInterfaceArray []GetDeviceInterfaceInput

func (GetDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInterface)(nil)).Elem()
}

func (i GetDeviceInterfaceArray) ToGetDeviceInterfaceArrayOutput() GetDeviceInterfaceArrayOutput {
	return i.ToGetDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i GetDeviceInterfaceArray) ToGetDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceInterfaceArrayOutput)
}

type GetDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (GetDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceInterface)(nil)).Elem()
}

func (o GetDeviceInterfaceOutput) ToGetDeviceInterfaceOutput() GetDeviceInterfaceOutput {
	return o
}

func (o GetDeviceInterfaceOutput) ToGetDeviceInterfaceOutputWithContext(ctx context.Context) GetDeviceInterfaceOutput {
	return o
}

// Interface management type (Equinix Managed or empty)
func (o GetDeviceInterfaceOutput) AssignedType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.AssignedType }).(pulumi.StringOutput)
}

// Interface identifier
func (o GetDeviceInterfaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceInterface) int { return v.Id }).(pulumi.IntOutput)
}

// interface IP address
func (o GetDeviceInterfaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Interface MAC addres
func (o GetDeviceInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetDeviceInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.Name }).(pulumi.StringOutput)
}

// Interface operational status (up or down)
func (o GetDeviceInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
// * RESOURCE_UPGRADE_IN_PROGRESS
// * RESOURCE_UPGRADE_FAILED
func (o GetDeviceInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.Status }).(pulumi.StringOutput)
}

// Interface type
func (o GetDeviceInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceInterface)(nil)).Elem()
}

func (o GetDeviceInterfaceArrayOutput) ToGetDeviceInterfaceArrayOutput() GetDeviceInterfaceArrayOutput {
	return o
}

func (o GetDeviceInterfaceArrayOutput) ToGetDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceInterfaceArrayOutput {
	return o
}

func (o GetDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) GetDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceInterface {
		return vs[0].([]GetDeviceInterface)[vs[1].(int)]
	}).(GetDeviceInterfaceOutput)
}

type GetDeviceSecondaryDevice struct {
	// Device billing account number
	AccountNumber string `pulumi:"accountNumber"`
	// Unique identifier of applied ACL template
	AclTemplateId string `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device
	AdditionalBandwidth int `pulumi:"additionalBandwidth"`
	// Autonomous system number
	Asn int `pulumi:"asn"`
	// Unique identifier of applied cloud init file
	CloudInitFileId string `pulumi:"cloudInitFileId"`
	// Device hostname prefix
	Hostname string `pulumi:"hostname"`
	// Device location Equinix Business Exchange name
	Ibx string `pulumi:"ibx"`
	// List of device interfaces
	// * `interface.#.id` - interface identifier
	// * `interface.#.name` - interface name
	// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
	// * `interface.#.operational_status` - interface operational status (up or down)
	// * `interface.#.mac_address` - interface MAC address
	// * `interface.#.ip_address` - interface IP address
	// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
	// * `interface.#.type` - interface type
	Interfaces []GetDeviceSecondaryDeviceInterface `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
	LicenseFile string `pulumi:"licenseFile"`
	// Unique identifier of applied license file
	LicenseFileId string `pulumi:"licenseFileId"`
	// Device license registration status
	// * APPLYING_LICENSE
	// * REGISTERED
	// * APPLIED
	// * WAITING_FOR_CLUSTER_SETUP
	// * REGISTRATION_FAILED
	// * NA
	LicenseStatus string `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing mode
	LicenseToken string `pulumi:"licenseToken"`
	// Device location metro code
	MetroCode string `pulumi:"metroCode"`
	// Unique identifier of applied MGMT ACL template
	MgmtAclTemplateUuid string `pulumi:"mgmtAclTemplateUuid"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// List of email addresses that will receive device status notifications
	Notifications []string `pulumi:"notifications"`
	// The unique identifier of Project Resource to which device is scoped to
	ProjectId string `pulumi:"projectId"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary
	RedundancyType string `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices
	RedundantId string `pulumi:"redundantId"`
	// Device location region
	Region string `pulumi:"region"`
	// IP address of SSH enabled interface on the device
	SshIpAddress string `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device
	SshIpFqdn string `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKeys []GetDeviceSecondaryDeviceSshKey `pulumi:"sshKeys"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status string `pulumi:"status"`
	// UUID of an existing Equinix Network Edge device
	Uuid string `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
	VendorConfiguration map[string]string `pulumi:"vendorConfiguration"`
	// device interface id picked for WAN
	WanInterfaceId string `pulumi:"wanInterfaceId"`
	// Device location zone code
	ZoneCode string `pulumi:"zoneCode"`
}

// GetDeviceSecondaryDeviceInput is an input type that accepts GetDeviceSecondaryDeviceArgs and GetDeviceSecondaryDeviceOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceInput` via:
//
//	GetDeviceSecondaryDeviceArgs{...}
type GetDeviceSecondaryDeviceInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceOutput() GetDeviceSecondaryDeviceOutput
	ToGetDeviceSecondaryDeviceOutputWithContext(context.Context) GetDeviceSecondaryDeviceOutput
}

type GetDeviceSecondaryDeviceArgs struct {
	// Device billing account number
	AccountNumber pulumi.StringInput `pulumi:"accountNumber"`
	// Unique identifier of applied ACL template
	AclTemplateId pulumi.StringInput `pulumi:"aclTemplateId"`
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device
	AdditionalBandwidth pulumi.IntInput `pulumi:"additionalBandwidth"`
	// Autonomous system number
	Asn pulumi.IntInput `pulumi:"asn"`
	// Unique identifier of applied cloud init file
	CloudInitFileId pulumi.StringInput `pulumi:"cloudInitFileId"`
	// Device hostname prefix
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Device location Equinix Business Exchange name
	Ibx pulumi.StringInput `pulumi:"ibx"`
	// List of device interfaces
	// * `interface.#.id` - interface identifier
	// * `interface.#.name` - interface name
	// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
	// * `interface.#.operational_status` - interface operational status (up or down)
	// * `interface.#.mac_address` - interface MAC address
	// * `interface.#.ip_address` - interface IP address
	// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
	// * `interface.#.type` - interface type
	Interfaces GetDeviceSecondaryDeviceInterfaceArrayInput `pulumi:"interfaces"`
	// Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
	LicenseFile pulumi.StringInput `pulumi:"licenseFile"`
	// Unique identifier of applied license file
	LicenseFileId pulumi.StringInput `pulumi:"licenseFileId"`
	// Device license registration status
	// * APPLYING_LICENSE
	// * REGISTERED
	// * APPLIED
	// * WAITING_FOR_CLUSTER_SETUP
	// * REGISTRATION_FAILED
	// * NA
	LicenseStatus pulumi.StringInput `pulumi:"licenseStatus"`
	// License Token applicable for some device types in BYOL licensing mode
	LicenseToken pulumi.StringInput `pulumi:"licenseToken"`
	// Device location metro code
	MetroCode pulumi.StringInput `pulumi:"metroCode"`
	// Unique identifier of applied MGMT ACL template
	MgmtAclTemplateUuid pulumi.StringInput `pulumi:"mgmtAclTemplateUuid"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// List of email addresses that will receive device status notifications
	Notifications pulumi.StringArrayInput `pulumi:"notifications"`
	// The unique identifier of Project Resource to which device is scoped to
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Device redundancy type applicable for HA devices, either
	// primary or secondary
	RedundancyType pulumi.StringInput `pulumi:"redundancyType"`
	// Unique identifier for a redundant device applicable for HA devices
	RedundantId pulumi.StringInput `pulumi:"redundantId"`
	// Device location region
	Region pulumi.StringInput `pulumi:"region"`
	// IP address of SSH enabled interface on the device
	SshIpAddress pulumi.StringInput `pulumi:"sshIpAddress"`
	// FQDN of SSH enabled interface on the device
	SshIpFqdn pulumi.StringInput `pulumi:"sshIpFqdn"`
	// Definition of SSH key that will be provisioned on a device
	SshKeys GetDeviceSecondaryDeviceSshKeyArrayInput `pulumi:"sshKeys"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status pulumi.StringInput `pulumi:"status"`
	// UUID of an existing Equinix Network Edge device
	Uuid pulumi.StringInput `pulumi:"uuid"`
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
	VendorConfiguration pulumi.StringMapInput `pulumi:"vendorConfiguration"`
	// device interface id picked for WAN
	WanInterfaceId pulumi.StringInput `pulumi:"wanInterfaceId"`
	// Device location zone code
	ZoneCode pulumi.StringInput `pulumi:"zoneCode"`
}

func (GetDeviceSecondaryDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDevice)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceArgs) ToGetDeviceSecondaryDeviceOutput() GetDeviceSecondaryDeviceOutput {
	return i.ToGetDeviceSecondaryDeviceOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceArgs) ToGetDeviceSecondaryDeviceOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceOutput)
}

// GetDeviceSecondaryDeviceArrayInput is an input type that accepts GetDeviceSecondaryDeviceArray and GetDeviceSecondaryDeviceArrayOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceArrayInput` via:
//
//	GetDeviceSecondaryDeviceArray{ GetDeviceSecondaryDeviceArgs{...} }
type GetDeviceSecondaryDeviceArrayInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceArrayOutput() GetDeviceSecondaryDeviceArrayOutput
	ToGetDeviceSecondaryDeviceArrayOutputWithContext(context.Context) GetDeviceSecondaryDeviceArrayOutput
}

type GetDeviceSecondaryDeviceArray []GetDeviceSecondaryDeviceInput

func (GetDeviceSecondaryDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDevice)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceArray) ToGetDeviceSecondaryDeviceArrayOutput() GetDeviceSecondaryDeviceArrayOutput {
	return i.ToGetDeviceSecondaryDeviceArrayOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceArray) ToGetDeviceSecondaryDeviceArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceArrayOutput)
}

type GetDeviceSecondaryDeviceOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDevice)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceOutput) ToGetDeviceSecondaryDeviceOutput() GetDeviceSecondaryDeviceOutput {
	return o
}

func (o GetDeviceSecondaryDeviceOutput) ToGetDeviceSecondaryDeviceOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceOutput {
	return o
}

// Device billing account number
func (o GetDeviceSecondaryDeviceOutput) AccountNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.AccountNumber }).(pulumi.StringOutput)
}

// Unique identifier of applied ACL template
func (o GetDeviceSecondaryDeviceOutput) AclTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.AclTemplateId }).(pulumi.StringOutput)
}

// Additional Internet bandwidth, in Mbps, that will be allocated to the device
func (o GetDeviceSecondaryDeviceOutput) AdditionalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) int { return v.AdditionalBandwidth }).(pulumi.IntOutput)
}

// Autonomous system number
func (o GetDeviceSecondaryDeviceOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) int { return v.Asn }).(pulumi.IntOutput)
}

// Unique identifier of applied cloud init file
func (o GetDeviceSecondaryDeviceOutput) CloudInitFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.CloudInitFileId }).(pulumi.StringOutput)
}

// Device hostname prefix
func (o GetDeviceSecondaryDeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Hostname }).(pulumi.StringOutput)
}

// Device location Equinix Business Exchange name
func (o GetDeviceSecondaryDeviceOutput) Ibx() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Ibx }).(pulumi.StringOutput)
}

// List of device interfaces
// * `interface.#.id` - interface identifier
// * `interface.#.name` - interface name
// * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
// * `interface.#.operational_status` - interface operational status (up or down)
// * `interface.#.mac_address` - interface MAC address
// * `interface.#.ip_address` - interface IP address
// * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
// * `interface.#.type` - interface type
func (o GetDeviceSecondaryDeviceOutput) Interfaces() GetDeviceSecondaryDeviceInterfaceArrayOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) []GetDeviceSecondaryDeviceInterface { return v.Interfaces }).(GetDeviceSecondaryDeviceInterfaceArrayOutput)
}

// Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
func (o GetDeviceSecondaryDeviceOutput) LicenseFile() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.LicenseFile }).(pulumi.StringOutput)
}

// Unique identifier of applied license file
func (o GetDeviceSecondaryDeviceOutput) LicenseFileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.LicenseFileId }).(pulumi.StringOutput)
}

// Device license registration status
// * APPLYING_LICENSE
// * REGISTERED
// * APPLIED
// * WAITING_FOR_CLUSTER_SETUP
// * REGISTRATION_FAILED
// * NA
func (o GetDeviceSecondaryDeviceOutput) LicenseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.LicenseStatus }).(pulumi.StringOutput)
}

// License Token applicable for some device types in BYOL licensing mode
func (o GetDeviceSecondaryDeviceOutput) LicenseToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.LicenseToken }).(pulumi.StringOutput)
}

// Device location metro code
func (o GetDeviceSecondaryDeviceOutput) MetroCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.MetroCode }).(pulumi.StringOutput)
}

// Unique identifier of applied MGMT ACL template
func (o GetDeviceSecondaryDeviceOutput) MgmtAclTemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.MgmtAclTemplateUuid }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetDeviceSecondaryDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Name }).(pulumi.StringOutput)
}

// List of email addresses that will receive device status notifications
func (o GetDeviceSecondaryDeviceOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) []string { return v.Notifications }).(pulumi.StringArrayOutput)
}

// The unique identifier of Project Resource to which device is scoped to
func (o GetDeviceSecondaryDeviceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Device redundancy type applicable for HA devices, either
// primary or secondary
func (o GetDeviceSecondaryDeviceOutput) RedundancyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.RedundancyType }).(pulumi.StringOutput)
}

// Unique identifier for a redundant device applicable for HA devices
func (o GetDeviceSecondaryDeviceOutput) RedundantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.RedundantId }).(pulumi.StringOutput)
}

// Device location region
func (o GetDeviceSecondaryDeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Region }).(pulumi.StringOutput)
}

// IP address of SSH enabled interface on the device
func (o GetDeviceSecondaryDeviceOutput) SshIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.SshIpAddress }).(pulumi.StringOutput)
}

// FQDN of SSH enabled interface on the device
func (o GetDeviceSecondaryDeviceOutput) SshIpFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.SshIpFqdn }).(pulumi.StringOutput)
}

// Definition of SSH key that will be provisioned on a device
func (o GetDeviceSecondaryDeviceOutput) SshKeys() GetDeviceSecondaryDeviceSshKeyArrayOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) []GetDeviceSecondaryDeviceSshKey { return v.SshKeys }).(GetDeviceSecondaryDeviceSshKeyArrayOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
// * RESOURCE_UPGRADE_IN_PROGRESS
// * RESOURCE_UPGRADE_FAILED
func (o GetDeviceSecondaryDeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Status }).(pulumi.StringOutput)
}

// UUID of an existing Equinix Network Edge device
func (o GetDeviceSecondaryDeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.Uuid }).(pulumi.StringOutput)
}

// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
func (o GetDeviceSecondaryDeviceOutput) VendorConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) map[string]string { return v.VendorConfiguration }).(pulumi.StringMapOutput)
}

// device interface id picked for WAN
func (o GetDeviceSecondaryDeviceOutput) WanInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.WanInterfaceId }).(pulumi.StringOutput)
}

// Device location zone code
func (o GetDeviceSecondaryDeviceOutput) ZoneCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDevice) string { return v.ZoneCode }).(pulumi.StringOutput)
}

type GetDeviceSecondaryDeviceArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDevice)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceArrayOutput) ToGetDeviceSecondaryDeviceArrayOutput() GetDeviceSecondaryDeviceArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceArrayOutput) ToGetDeviceSecondaryDeviceArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceArrayOutput) Index(i pulumi.IntInput) GetDeviceSecondaryDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceSecondaryDevice {
		return vs[0].([]GetDeviceSecondaryDevice)[vs[1].(int)]
	}).(GetDeviceSecondaryDeviceOutput)
}

type GetDeviceSecondaryDeviceInterface struct {
	// Interface management type (Equinix Managed or empty)
	AssignedType string `pulumi:"assignedType"`
	// Interface identifier
	Id int `pulumi:"id"`
	// interface IP address
	IpAddress string `pulumi:"ipAddress"`
	// Interface MAC addres
	MacAddress string `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name string `pulumi:"name"`
	// Interface operational status (up or down)
	OperationalStatus string `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status string `pulumi:"status"`
	// Interface type
	Type string `pulumi:"type"`
}

// GetDeviceSecondaryDeviceInterfaceInput is an input type that accepts GetDeviceSecondaryDeviceInterfaceArgs and GetDeviceSecondaryDeviceInterfaceOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceInterfaceInput` via:
//
//	GetDeviceSecondaryDeviceInterfaceArgs{...}
type GetDeviceSecondaryDeviceInterfaceInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceInterfaceOutput() GetDeviceSecondaryDeviceInterfaceOutput
	ToGetDeviceSecondaryDeviceInterfaceOutputWithContext(context.Context) GetDeviceSecondaryDeviceInterfaceOutput
}

type GetDeviceSecondaryDeviceInterfaceArgs struct {
	// Interface management type (Equinix Managed or empty)
	AssignedType pulumi.StringInput `pulumi:"assignedType"`
	// Interface identifier
	Id pulumi.IntInput `pulumi:"id"`
	// interface IP address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Interface MAC addres
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// Name of an existing Equinix Network Edge device
	Name pulumi.StringInput `pulumi:"name"`
	// Interface operational status (up or down)
	OperationalStatus pulumi.StringInput `pulumi:"operationalStatus"`
	// Device provisioning status
	// * INITIALIZING
	// * PROVISIONING
	// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
	// * WAITING_FOR_PRIMARY
	// * WAITING_FOR_SECONDARY
	// * WAITING_FOR_REPLICA_CLUSTER_NODES
	// * CLUSTER_SETUP_IN_PROGRESS
	// * FAILED
	// * DEPROVISIONING
	// * DEPROVISIONED
	// * RESOURCE_UPGRADE_IN_PROGRESS
	// * RESOURCE_UPGRADE_FAILED
	Status pulumi.StringInput `pulumi:"status"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDeviceSecondaryDeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceInterfaceArgs) ToGetDeviceSecondaryDeviceInterfaceOutput() GetDeviceSecondaryDeviceInterfaceOutput {
	return i.ToGetDeviceSecondaryDeviceInterfaceOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceInterfaceArgs) ToGetDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceInterfaceOutput)
}

// GetDeviceSecondaryDeviceInterfaceArrayInput is an input type that accepts GetDeviceSecondaryDeviceInterfaceArray and GetDeviceSecondaryDeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceInterfaceArrayInput` via:
//
//	GetDeviceSecondaryDeviceInterfaceArray{ GetDeviceSecondaryDeviceInterfaceArgs{...} }
type GetDeviceSecondaryDeviceInterfaceArrayInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceInterfaceArrayOutput() GetDeviceSecondaryDeviceInterfaceArrayOutput
	ToGetDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Context) GetDeviceSecondaryDeviceInterfaceArrayOutput
}

type GetDeviceSecondaryDeviceInterfaceArray []GetDeviceSecondaryDeviceInterfaceInput

func (GetDeviceSecondaryDeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceInterfaceArray) ToGetDeviceSecondaryDeviceInterfaceArrayOutput() GetDeviceSecondaryDeviceInterfaceArrayOutput {
	return i.ToGetDeviceSecondaryDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceInterfaceArray) ToGetDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceInterfaceArrayOutput)
}

type GetDeviceSecondaryDeviceInterfaceOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceInterfaceOutput) ToGetDeviceSecondaryDeviceInterfaceOutput() GetDeviceSecondaryDeviceInterfaceOutput {
	return o
}

func (o GetDeviceSecondaryDeviceInterfaceOutput) ToGetDeviceSecondaryDeviceInterfaceOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceInterfaceOutput {
	return o
}

// Interface management type (Equinix Managed or empty)
func (o GetDeviceSecondaryDeviceInterfaceOutput) AssignedType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.AssignedType }).(pulumi.StringOutput)
}

// Interface identifier
func (o GetDeviceSecondaryDeviceInterfaceOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) int { return v.Id }).(pulumi.IntOutput)
}

// interface IP address
func (o GetDeviceSecondaryDeviceInterfaceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Interface MAC addres
func (o GetDeviceSecondaryDeviceInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// Name of an existing Equinix Network Edge device
func (o GetDeviceSecondaryDeviceInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.Name }).(pulumi.StringOutput)
}

// Interface operational status (up or down)
func (o GetDeviceSecondaryDeviceInterfaceOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.OperationalStatus }).(pulumi.StringOutput)
}

// Device provisioning status
// * INITIALIZING
// * PROVISIONING
// * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `validStateList`**)
// * WAITING_FOR_PRIMARY
// * WAITING_FOR_SECONDARY
// * WAITING_FOR_REPLICA_CLUSTER_NODES
// * CLUSTER_SETUP_IN_PROGRESS
// * FAILED
// * DEPROVISIONING
// * DEPROVISIONED
// * RESOURCE_UPGRADE_IN_PROGRESS
// * RESOURCE_UPGRADE_FAILED
func (o GetDeviceSecondaryDeviceInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.Status }).(pulumi.StringOutput)
}

// Interface type
func (o GetDeviceSecondaryDeviceInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceInterface) string { return v.Type }).(pulumi.StringOutput)
}

type GetDeviceSecondaryDeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDeviceInterface)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceInterfaceArrayOutput) ToGetDeviceSecondaryDeviceInterfaceArrayOutput() GetDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceInterfaceArrayOutput) ToGetDeviceSecondaryDeviceInterfaceArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceInterfaceArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceInterfaceArrayOutput) Index(i pulumi.IntInput) GetDeviceSecondaryDeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceSecondaryDeviceInterface {
		return vs[0].([]GetDeviceSecondaryDeviceInterface)[vs[1].(int)]
	}).(GetDeviceSecondaryDeviceInterfaceOutput)
}

type GetDeviceSecondaryDeviceSshKey struct {
	// Reference by name to previously provisioned public SSH key
	KeyName string `pulumi:"keyName"`
	// Username associated with given key
	Username string `pulumi:"username"`
}

// GetDeviceSecondaryDeviceSshKeyInput is an input type that accepts GetDeviceSecondaryDeviceSshKeyArgs and GetDeviceSecondaryDeviceSshKeyOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceSshKeyInput` via:
//
//	GetDeviceSecondaryDeviceSshKeyArgs{...}
type GetDeviceSecondaryDeviceSshKeyInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceSshKeyOutput() GetDeviceSecondaryDeviceSshKeyOutput
	ToGetDeviceSecondaryDeviceSshKeyOutputWithContext(context.Context) GetDeviceSecondaryDeviceSshKeyOutput
}

type GetDeviceSecondaryDeviceSshKeyArgs struct {
	// Reference by name to previously provisioned public SSH key
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// Username associated with given key
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetDeviceSecondaryDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceSshKeyArgs) ToGetDeviceSecondaryDeviceSshKeyOutput() GetDeviceSecondaryDeviceSshKeyOutput {
	return i.ToGetDeviceSecondaryDeviceSshKeyOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceSshKeyArgs) ToGetDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceSshKeyOutput)
}

// GetDeviceSecondaryDeviceSshKeyArrayInput is an input type that accepts GetDeviceSecondaryDeviceSshKeyArray and GetDeviceSecondaryDeviceSshKeyArrayOutput values.
// You can construct a concrete instance of `GetDeviceSecondaryDeviceSshKeyArrayInput` via:
//
//	GetDeviceSecondaryDeviceSshKeyArray{ GetDeviceSecondaryDeviceSshKeyArgs{...} }
type GetDeviceSecondaryDeviceSshKeyArrayInput interface {
	pulumi.Input

	ToGetDeviceSecondaryDeviceSshKeyArrayOutput() GetDeviceSecondaryDeviceSshKeyArrayOutput
	ToGetDeviceSecondaryDeviceSshKeyArrayOutputWithContext(context.Context) GetDeviceSecondaryDeviceSshKeyArrayOutput
}

type GetDeviceSecondaryDeviceSshKeyArray []GetDeviceSecondaryDeviceSshKeyInput

func (GetDeviceSecondaryDeviceSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (i GetDeviceSecondaryDeviceSshKeyArray) ToGetDeviceSecondaryDeviceSshKeyArrayOutput() GetDeviceSecondaryDeviceSshKeyArrayOutput {
	return i.ToGetDeviceSecondaryDeviceSshKeyArrayOutputWithContext(context.Background())
}

func (i GetDeviceSecondaryDeviceSshKeyArray) ToGetDeviceSecondaryDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSecondaryDeviceSshKeyArrayOutput)
}

type GetDeviceSecondaryDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceSshKeyOutput) ToGetDeviceSecondaryDeviceSshKeyOutput() GetDeviceSecondaryDeviceSshKeyOutput {
	return o
}

func (o GetDeviceSecondaryDeviceSshKeyOutput) ToGetDeviceSecondaryDeviceSshKeyOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceSshKeyOutput {
	return o
}

// Reference by name to previously provisioned public SSH key
func (o GetDeviceSecondaryDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// Username associated with given key
func (o GetDeviceSecondaryDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSecondaryDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type GetDeviceSecondaryDeviceSshKeyArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceSecondaryDeviceSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSecondaryDeviceSshKey)(nil)).Elem()
}

func (o GetDeviceSecondaryDeviceSshKeyArrayOutput) ToGetDeviceSecondaryDeviceSshKeyArrayOutput() GetDeviceSecondaryDeviceSshKeyArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceSshKeyArrayOutput) ToGetDeviceSecondaryDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetDeviceSecondaryDeviceSshKeyArrayOutput {
	return o
}

func (o GetDeviceSecondaryDeviceSshKeyArrayOutput) Index(i pulumi.IntInput) GetDeviceSecondaryDeviceSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceSecondaryDeviceSshKey {
		return vs[0].([]GetDeviceSecondaryDeviceSshKey)[vs[1].(int)]
	}).(GetDeviceSecondaryDeviceSshKeyOutput)
}

type GetDeviceSshKey struct {
	// Reference by name to previously provisioned public SSH key
	KeyName string `pulumi:"keyName"`
	// Username associated with given key
	Username string `pulumi:"username"`
}

// GetDeviceSshKeyInput is an input type that accepts GetDeviceSshKeyArgs and GetDeviceSshKeyOutput values.
// You can construct a concrete instance of `GetDeviceSshKeyInput` via:
//
//	GetDeviceSshKeyArgs{...}
type GetDeviceSshKeyInput interface {
	pulumi.Input

	ToGetDeviceSshKeyOutput() GetDeviceSshKeyOutput
	ToGetDeviceSshKeyOutputWithContext(context.Context) GetDeviceSshKeyOutput
}

type GetDeviceSshKeyArgs struct {
	// Reference by name to previously provisioned public SSH key
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// Username associated with given key
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetDeviceSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSshKey)(nil)).Elem()
}

func (i GetDeviceSshKeyArgs) ToGetDeviceSshKeyOutput() GetDeviceSshKeyOutput {
	return i.ToGetDeviceSshKeyOutputWithContext(context.Background())
}

func (i GetDeviceSshKeyArgs) ToGetDeviceSshKeyOutputWithContext(ctx context.Context) GetDeviceSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSshKeyOutput)
}

// GetDeviceSshKeyArrayInput is an input type that accepts GetDeviceSshKeyArray and GetDeviceSshKeyArrayOutput values.
// You can construct a concrete instance of `GetDeviceSshKeyArrayInput` via:
//
//	GetDeviceSshKeyArray{ GetDeviceSshKeyArgs{...} }
type GetDeviceSshKeyArrayInput interface {
	pulumi.Input

	ToGetDeviceSshKeyArrayOutput() GetDeviceSshKeyArrayOutput
	ToGetDeviceSshKeyArrayOutputWithContext(context.Context) GetDeviceSshKeyArrayOutput
}

type GetDeviceSshKeyArray []GetDeviceSshKeyInput

func (GetDeviceSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSshKey)(nil)).Elem()
}

func (i GetDeviceSshKeyArray) ToGetDeviceSshKeyArrayOutput() GetDeviceSshKeyArrayOutput {
	return i.ToGetDeviceSshKeyArrayOutputWithContext(context.Background())
}

func (i GetDeviceSshKeyArray) ToGetDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetDeviceSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceSshKeyArrayOutput)
}

type GetDeviceSshKeyOutput struct{ *pulumi.OutputState }

func (GetDeviceSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceSshKey)(nil)).Elem()
}

func (o GetDeviceSshKeyOutput) ToGetDeviceSshKeyOutput() GetDeviceSshKeyOutput {
	return o
}

func (o GetDeviceSshKeyOutput) ToGetDeviceSshKeyOutputWithContext(ctx context.Context) GetDeviceSshKeyOutput {
	return o
}

// Reference by name to previously provisioned public SSH key
func (o GetDeviceSshKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSshKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// Username associated with given key
func (o GetDeviceSshKeyOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceSshKey) string { return v.Username }).(pulumi.StringOutput)
}

type GetDeviceSshKeyArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceSshKey)(nil)).Elem()
}

func (o GetDeviceSshKeyArrayOutput) ToGetDeviceSshKeyArrayOutput() GetDeviceSshKeyArrayOutput {
	return o
}

func (o GetDeviceSshKeyArrayOutput) ToGetDeviceSshKeyArrayOutputWithContext(ctx context.Context) GetDeviceSshKeyArrayOutput {
	return o
}

func (o GetDeviceSshKeyArrayOutput) Index(i pulumi.IntInput) GetDeviceSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceSshKey {
		return vs[0].([]GetDeviceSshKey)[vs[1].(int)]
	}).(GetDeviceSshKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclTemplateDeviceDetailInput)(nil)).Elem(), AclTemplateDeviceDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTemplateDeviceDetailArrayInput)(nil)).Elem(), AclTemplateDeviceDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTemplateInboundRuleInput)(nil)).Elem(), AclTemplateInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTemplateInboundRuleArrayInput)(nil)).Elem(), AclTemplateInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsInput)(nil)).Elem(), DeviceClusterDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsPtrInput)(nil)).Elem(), DeviceClusterDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode0Input)(nil)).Elem(), DeviceClusterDetailsNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode0PtrInput)(nil)).Elem(), DeviceClusterDetailsNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode0VendorConfigurationInput)(nil)).Elem(), DeviceClusterDetailsNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode0VendorConfigurationPtrInput)(nil)).Elem(), DeviceClusterDetailsNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode1Input)(nil)).Elem(), DeviceClusterDetailsNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode1PtrInput)(nil)).Elem(), DeviceClusterDetailsNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode1VendorConfigurationInput)(nil)).Elem(), DeviceClusterDetailsNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceClusterDetailsNode1VendorConfigurationPtrInput)(nil)).Elem(), DeviceClusterDetailsNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInterfaceInput)(nil)).Elem(), DeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInterfaceArrayInput)(nil)).Elem(), DeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkDeviceInput)(nil)).Elem(), DeviceLinkDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkDeviceArrayInput)(nil)).Elem(), DeviceLinkDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkLinkInput)(nil)).Elem(), DeviceLinkLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkLinkArrayInput)(nil)).Elem(), DeviceLinkLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkMetroLinkInput)(nil)).Elem(), DeviceLinkMetroLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLinkMetroLinkArrayInput)(nil)).Elem(), DeviceLinkMetroLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDeviceInput)(nil)).Elem(), DeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDevicePtrInput)(nil)).Elem(), DeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDeviceInterfaceInput)(nil)).Elem(), DeviceSecondaryDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDeviceInterfaceArrayInput)(nil)).Elem(), DeviceSecondaryDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDeviceSshKeyInput)(nil)).Elem(), DeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSecondaryDeviceSshKeyPtrInput)(nil)).Elem(), DeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSshKeyInput)(nil)).Elem(), DeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSshKeyPtrInput)(nil)).Elem(), DeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailInput)(nil)).Elem(), GetDeviceClusterDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailArrayInput)(nil)).Elem(), GetDeviceClusterDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode0Input)(nil)).Elem(), GetDeviceClusterDetailNode0Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode0ArrayInput)(nil)).Elem(), GetDeviceClusterDetailNode0Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode0VendorConfigurationInput)(nil)).Elem(), GetDeviceClusterDetailNode0VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode0VendorConfigurationArrayInput)(nil)).Elem(), GetDeviceClusterDetailNode0VendorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode1Input)(nil)).Elem(), GetDeviceClusterDetailNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode1ArrayInput)(nil)).Elem(), GetDeviceClusterDetailNode1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode1VendorConfigurationInput)(nil)).Elem(), GetDeviceClusterDetailNode1VendorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceClusterDetailNode1VendorConfigurationArrayInput)(nil)).Elem(), GetDeviceClusterDetailNode1VendorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInterfaceInput)(nil)).Elem(), GetDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceInterfaceArrayInput)(nil)).Elem(), GetDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceInput)(nil)).Elem(), GetDeviceSecondaryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceArrayInput)(nil)).Elem(), GetDeviceSecondaryDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceInterfaceInput)(nil)).Elem(), GetDeviceSecondaryDeviceInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceInterfaceArrayInput)(nil)).Elem(), GetDeviceSecondaryDeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceSshKeyInput)(nil)).Elem(), GetDeviceSecondaryDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSecondaryDeviceSshKeyArrayInput)(nil)).Elem(), GetDeviceSecondaryDeviceSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSshKeyInput)(nil)).Elem(), GetDeviceSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceSshKeyArrayInput)(nil)).Elem(), GetDeviceSshKeyArray{})
	pulumi.RegisterOutputType(AclTemplateDeviceDetailOutput{})
	pulumi.RegisterOutputType(AclTemplateDeviceDetailArrayOutput{})
	pulumi.RegisterOutputType(AclTemplateInboundRuleOutput{})
	pulumi.RegisterOutputType(AclTemplateInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsPtrOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode0Output{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode0PtrOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode0VendorConfigurationOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode0VendorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode1Output{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode1PtrOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode1VendorConfigurationOutput{})
	pulumi.RegisterOutputType(DeviceClusterDetailsNode1VendorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeviceInterfaceOutput{})
	pulumi.RegisterOutputType(DeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(DeviceLinkDeviceOutput{})
	pulumi.RegisterOutputType(DeviceLinkDeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceLinkLinkOutput{})
	pulumi.RegisterOutputType(DeviceLinkLinkArrayOutput{})
	pulumi.RegisterOutputType(DeviceLinkMetroLinkOutput{})
	pulumi.RegisterOutputType(DeviceLinkMetroLinkArrayOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDeviceOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDevicePtrOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(DeviceSecondaryDeviceSshKeyPtrOutput{})
	pulumi.RegisterOutputType(DeviceSshKeyOutput{})
	pulumi.RegisterOutputType(DeviceSshKeyPtrOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode0Output{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode0ArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode0VendorConfigurationOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode0VendorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode1Output{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode1ArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode1VendorConfigurationOutput{})
	pulumi.RegisterOutputType(GetDeviceClusterDetailNode1VendorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(GetDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceInterfaceOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(GetDeviceSecondaryDeviceSshKeyArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceSshKeyOutput{})
	pulumi.RegisterOutputType(GetDeviceSshKeyArrayOutput{})
}
