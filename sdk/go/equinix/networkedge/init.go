// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkedge

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "equinix:networkedge/aclTemplate:AclTemplate":
		r = &AclTemplate{}
	case "equinix:networkedge/bgp:Bgp":
		r = &Bgp{}
	case "equinix:networkedge/device:Device":
		r = &Device{}
	case "equinix:networkedge/deviceLink:DeviceLink":
		r = &DeviceLink{}
	case "equinix:networkedge/networkFile:NetworkFile":
		r = &NetworkFile{}
	case "equinix:networkedge/sshKey:SshKey":
		r = &SshKey{}
	case "equinix:networkedge/sshUser:SshUser":
		r = &SshUser{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/aclTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/bgp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/device",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/deviceLink",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/networkFile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"equinix",
		"networkedge/sshUser",
		&module{version},
	)
}
