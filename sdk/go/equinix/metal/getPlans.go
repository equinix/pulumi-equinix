// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metal

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := metal.GetPlans(ctx, &metal.GetPlansArgs{
//				Sorts: []metal.GetPlansSort{
//					{
//						Attribute: "pricing_hour",
//						Direction: pulumi.StringRef("asc"),
//					},
//				},
//				Filters: []metal.GetPlansFilter{
//					{
//						Attribute: "pricing_hour",
//						Values: []string{
//							"2.5",
//						},
//						MatchBy: pulumi.StringRef("less_than"),
//					},
//					{
//						Attribute: "available_in_metros",
//						Values: []string{
//							"da",
//							"sv",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("plans", example.Plans)
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := metal.GetPlans(ctx, &metal.GetPlansArgs{
//				Filters: []metal.GetPlansFilter{
//					{
//						Attribute: "class",
//						Values: []string{
//							"large",
//						},
//						MatchBy: pulumi.StringRef("substring"),
//					},
//					{
//						Attribute: "deployment_types",
//						Values: []string{
//							"spot_market",
//						},
//					},
//					{
//						Attribute: "available_in_metros",
//						Values: []string{
//							"da",
//							"sv",
//						},
//						All: pulumi.BoolRef(true),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("plans", example.Plans)
//			return nil
//		})
//	}
//
// ```
//
// ### Ignoring Changes to Plans/Metro
//
// Preserve deployed device plan, facility and metro when creating a new execution plan.
//
// As described in the `data-resource-behavior` feature as shown in the example below.
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			examplePlans, err := metal.GetPlans(ctx, &metal.GetPlansArgs{
//				Sorts: []metal.GetPlansSort{
//					{
//						Attribute: "pricing_hour",
//						Direction: pulumi.StringRef("asc"),
//					},
//				},
//				Filters: []metal.GetPlansFilter{
//					{
//						Attribute: "name",
//						Values: []string{
//							"c3.small.x86",
//							"c3.medium.x86",
//							"m3.large.x86",
//						},
//					},
//					{
//						Attribute: "available_in_metros",
//						Values: []string{
//							"sv",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// This equinix_metal_device will use the first returned plan and the first metro in which that plan is available
//			// It will ignore future changes on plan and metro
//			_, err = metal.NewDevice(ctx, "exampleDevice", &metal.DeviceArgs{
//				Hostname:        pulumi.String("example"),
//				Plan:            examplePlans.Plans[0].Name.ApplyT(func(x *string) metal.Plan { return metal.Plan(*x) }).(metal.PlanOutput),
//				Metro:           pulumi.String(examplePlans.Plans[0].AvailableInMetros[0]),
//				OperatingSystem: pulumi.String(metal.OperatingSystem_Ubuntu20_04),
//				BillingCycle:    pulumi.String(metal.BillingCycleHourly),
//				ProjectId:       pulumi.Any(_var.Project_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// If your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			ignorePlansMetrosChanges := false
//			if param := cfg.GetBool("ignorePlansMetrosChanges"); param {
//				ignorePlansMetrosChanges = param
//			}
//			_, err := metal.GetPlans(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			// required device arguments
//			_, err = metal.NewDevice(ctx, "exampleDevice", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPlans(ctx *pulumi.Context, args *GetPlansArgs, opts ...pulumi.InvokeOption) (*GetPlansResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPlansResult
	err := ctx.Invoke("equinix:metal/getPlans:getPlans", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlans.
type GetPlansArgs struct {
	// One or more attribute/values pairs to filter off of
	Filters []GetPlansFilter `pulumi:"filters"`
	// One or more attribute/direction pairs on which to sort results. If multiple sorts are provided, they will be applied in order
	Sorts []GetPlansSort `pulumi:"sorts"`
}

// A collection of values returned by getPlans.
type GetPlansResult struct {
	Filters []GetPlansFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id    string         `pulumi:"id"`
	Plans []GetPlansPlan `pulumi:"plans"`
	Sorts []GetPlansSort `pulumi:"sorts"`
}

func GetPlansOutput(ctx *pulumi.Context, args GetPlansOutputArgs, opts ...pulumi.InvokeOption) GetPlansResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPlansResult, error) {
			args := v.(GetPlansArgs)
			r, err := GetPlans(ctx, &args, opts...)
			var s GetPlansResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPlansResultOutput)
}

// A collection of arguments for invoking getPlans.
type GetPlansOutputArgs struct {
	// One or more attribute/values pairs to filter off of
	Filters GetPlansFilterArrayInput `pulumi:"filters"`
	// One or more attribute/direction pairs on which to sort results. If multiple sorts are provided, they will be applied in order
	Sorts GetPlansSortArrayInput `pulumi:"sorts"`
}

func (GetPlansOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlansArgs)(nil)).Elem()
}

// A collection of values returned by getPlans.
type GetPlansResultOutput struct{ *pulumi.OutputState }

func (GetPlansResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlansResult)(nil)).Elem()
}

func (o GetPlansResultOutput) ToGetPlansResultOutput() GetPlansResultOutput {
	return o
}

func (o GetPlansResultOutput) ToGetPlansResultOutputWithContext(ctx context.Context) GetPlansResultOutput {
	return o
}

func (o GetPlansResultOutput) Filters() GetPlansFilterArrayOutput {
	return o.ApplyT(func(v GetPlansResult) []GetPlansFilter { return v.Filters }).(GetPlansFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPlansResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlansResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPlansResultOutput) Plans() GetPlansPlanArrayOutput {
	return o.ApplyT(func(v GetPlansResult) []GetPlansPlan { return v.Plans }).(GetPlansPlanArrayOutput)
}

func (o GetPlansResultOutput) Sorts() GetPlansSortArrayOutput {
	return o.ApplyT(func(v GetPlansResult) []GetPlansSort { return v.Sorts }).(GetPlansSortArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPlansResultOutput{})
}
