// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
//
// > Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := metal.LookupConnection(ctx, &metal.LookupConnectionArgs{
//				ConnectionId: "4347e805-eb46-4699-9eb9-5c116e6a017d",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("equinix:metal/getConnection:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnection.
type LookupConnectionArgs struct {
	// ID of the connection resource.
	ConnectionId string `pulumi:"connectionId"`
}

// A collection of values returned by getConnection.
type LookupConnectionResult struct {
	ConnectionId string `pulumi:"connectionId"`
	// Description of the connection resource.
	Description string `pulumi:"description"`
	// Slug of a facility to which the connection belongs.
	Facility string `pulumi:"facility"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Slug of a metro to which the connection belongs.
	Metro string `pulumi:"metro"`
	// Mode for connections in IBX facilities with the dedicated type - standard or tunnel.
	Mode string `pulumi:"mode"`
	// Port name.
	Name string `pulumi:"name"`
	// ID of the organization where the connection is scoped to.
	OrganizationId string `pulumi:"organizationId"`
	// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
	Ports []GetConnectionPort `pulumi:"ports"`
	// ID of project to which the connection belongs.
	ProjectId string `pulumi:"projectId"`
	// Connection redundancy, reduntant or primary.
	Redundancy string `pulumi:"redundancy"`
	// Type of service token, aSide or z_side. One available in shared connection.
	ServiceTokenType string `pulumi:"serviceTokenType"`
	// List of connection service tokens with attributes
	ServiceTokens []GetConnectionServiceToken `pulumi:"serviceTokens"`
	// Port speed in bits per second.
	Speed string `pulumi:"speed"`
	// Port status.
	Status string `pulumi:"status"`
	// String list of tags.
	Tags []string `pulumi:"tags"`
	// (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
	//
	// Deprecated: If your organization already has connection service tokens enabled, use `service_tokens` instead
	Token string `pulumi:"token"`
	// Token type, `aSide` or `zSide`.
	Type string `pulumi:"type"`
	// Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.
	Vlans []int `pulumi:"vlans"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionResult, error) {
			args := v.(LookupConnectionArgs)
			r, err := LookupConnection(ctx, &args, opts...)
			var s LookupConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectionResultOutput)
}

// A collection of arguments for invoking getConnection.
type LookupConnectionOutputArgs struct {
	// ID of the connection resource.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
}

func (LookupConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getConnection.
type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutput() LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutputWithContext(ctx context.Context) LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Description of the connection resource.
func (o LookupConnectionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Slug of a facility to which the connection belongs.
func (o LookupConnectionResultOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Facility }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Slug of a metro to which the connection belongs.
func (o LookupConnectionResultOutput) Metro() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Metro }).(pulumi.StringOutput)
}

// Mode for connections in IBX facilities with the dedicated type - standard or tunnel.
func (o LookupConnectionResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Port name.
func (o LookupConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization where the connection is scoped to.
func (o LookupConnectionResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
func (o LookupConnectionResultOutput) Ports() GetConnectionPortArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []GetConnectionPort { return v.Ports }).(GetConnectionPortArrayOutput)
}

// ID of project to which the connection belongs.
func (o LookupConnectionResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Connection redundancy, reduntant or primary.
func (o LookupConnectionResultOutput) Redundancy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Redundancy }).(pulumi.StringOutput)
}

// Type of service token, aSide or z_side. One available in shared connection.
func (o LookupConnectionResultOutput) ServiceTokenType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.ServiceTokenType }).(pulumi.StringOutput)
}

// List of connection service tokens with attributes
func (o LookupConnectionResultOutput) ServiceTokens() GetConnectionServiceTokenArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []GetConnectionServiceToken { return v.ServiceTokens }).(GetConnectionServiceTokenArrayOutput)
}

// Port speed in bits per second.
func (o LookupConnectionResultOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Speed }).(pulumi.StringOutput)
}

// Port status.
func (o LookupConnectionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Status }).(pulumi.StringOutput)
}

// String list of tags.
func (o LookupConnectionResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
//
// Deprecated: If your organization already has connection service tokens enabled, use `service_tokens` instead
func (o LookupConnectionResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Token }).(pulumi.StringOutput)
}

// Token type, `aSide` or `zSide`.
func (o LookupConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

// Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.
func (o LookupConnectionResultOutput) Vlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupConnectionResult) []int { return v.Vlans }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionResultOutput{})
}
