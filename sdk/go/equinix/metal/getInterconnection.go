// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metal

import (
	"context"
	"reflect"

	"github.com/equinix/pulumi-equinix/sdk/go/equinix/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)
//
// > Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := metal.LookupInterconnection(ctx, &metal.LookupInterconnectionArgs{
//				ConnectionId: "4347e805-eb46-4699-9eb9-5c116e6a017d",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterconnection(ctx *pulumi.Context, args *LookupInterconnectionArgs, opts ...pulumi.InvokeOption) (*LookupInterconnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterconnectionResult
	err := ctx.Invoke("equinix:metal/getInterconnection:getInterconnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterconnection.
type LookupInterconnectionArgs struct {
	// ID of the connection resource.
	ConnectionId string `pulumi:"connectionId"`
}

// A collection of values returned by getInterconnection.
type LookupInterconnectionResult struct {
	// Fabric Authorization Code to configure the NIMF connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard).
	AuthorizationCode string `pulumi:"authorizationCode"`
	ConnectionId      string `pulumi:"connectionId"`
	// The preferred email used for communication and notifications about the Equinix Fabric interconnection.
	ContactEmail string `pulumi:"contactEmail"`
	// Description of the connection resource.
	Description string `pulumi:"description"`
	// (**Deprecated**) Slug of a facility to which the connection belongs. Use metro instead; read the facility to metro migration guide
	//
	// Deprecated: Use metro instead of facility. For more information, read the migration guide.
	Facility string `pulumi:"facility"`
	// Port UUID.
	Id string `pulumi:"id"`
	// Slug of a metro to which the connection belongs.
	Metro string `pulumi:"metro"`
	// Mode for connections in IBX facilities with the dedicated type - standard or tunnel.
	Mode string `pulumi:"mode"`
	// Port name.
	Name string `pulumi:"name"`
	// ID of the organization where the connection is scoped to.
	OrganizationId string `pulumi:"organizationId"`
	// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
	Ports []GetInterconnectionPort `pulumi:"ports"`
	// ID of project to which the connection belongs.
	ProjectId string `pulumi:"projectId"`
	// Connection redundancy, reduntant or primary.
	Redundancy string `pulumi:"redundancy"`
	// Type of service token, aSide or z_side. One available in shared connection.
	ServiceTokenType string `pulumi:"serviceTokenType"`
	// List of connection service tokens with attributes
	ServiceTokens []GetInterconnectionServiceToken `pulumi:"serviceTokens"`
	// Port speed in bits per second.
	Speed string `pulumi:"speed"`
	// Port status.
	Status string `pulumi:"status"`
	// String list of tags.
	Tags []string `pulumi:"tags"`
	// (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
	//
	// Deprecated: If your organization already has connection service tokens enabled, use `serviceTokens` instead
	Token string `pulumi:"token"`
	// Token type, `aSide` or `zSide`.
	Type string `pulumi:"type"`
	// Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.
	Vlans []int    `pulumi:"vlans"`
	Vrfs  []string `pulumi:"vrfs"`
}

func LookupInterconnectionOutput(ctx *pulumi.Context, args LookupInterconnectionOutputArgs, opts ...pulumi.InvokeOption) LookupInterconnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterconnectionResult, error) {
			args := v.(LookupInterconnectionArgs)
			r, err := LookupInterconnection(ctx, &args, opts...)
			var s LookupInterconnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterconnectionResultOutput)
}

// A collection of arguments for invoking getInterconnection.
type LookupInterconnectionOutputArgs struct {
	// ID of the connection resource.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
}

func (LookupInterconnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterconnectionArgs)(nil)).Elem()
}

// A collection of values returned by getInterconnection.
type LookupInterconnectionResultOutput struct{ *pulumi.OutputState }

func (LookupInterconnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterconnectionResult)(nil)).Elem()
}

func (o LookupInterconnectionResultOutput) ToLookupInterconnectionResultOutput() LookupInterconnectionResultOutput {
	return o
}

func (o LookupInterconnectionResultOutput) ToLookupInterconnectionResultOutputWithContext(ctx context.Context) LookupInterconnectionResultOutput {
	return o
}

// Fabric Authorization Code to configure the NIMF connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard).
func (o LookupInterconnectionResultOutput) AuthorizationCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.AuthorizationCode }).(pulumi.StringOutput)
}

func (o LookupInterconnectionResultOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The preferred email used for communication and notifications about the Equinix Fabric interconnection.
func (o LookupInterconnectionResultOutput) ContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.ContactEmail }).(pulumi.StringOutput)
}

// Description of the connection resource.
func (o LookupInterconnectionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Description }).(pulumi.StringOutput)
}

// (**Deprecated**) Slug of a facility to which the connection belongs. Use metro instead; read the facility to metro migration guide
//
// Deprecated: Use metro instead of facility. For more information, read the migration guide.
func (o LookupInterconnectionResultOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Facility }).(pulumi.StringOutput)
}

// Port UUID.
func (o LookupInterconnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Slug of a metro to which the connection belongs.
func (o LookupInterconnectionResultOutput) Metro() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Metro }).(pulumi.StringOutput)
}

// Mode for connections in IBX facilities with the dedicated type - standard or tunnel.
func (o LookupInterconnectionResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Port name.
func (o LookupInterconnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization where the connection is scoped to.
func (o LookupInterconnectionResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
func (o LookupInterconnectionResultOutput) Ports() GetInterconnectionPortArrayOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) []GetInterconnectionPort { return v.Ports }).(GetInterconnectionPortArrayOutput)
}

// ID of project to which the connection belongs.
func (o LookupInterconnectionResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Connection redundancy, reduntant or primary.
func (o LookupInterconnectionResultOutput) Redundancy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Redundancy }).(pulumi.StringOutput)
}

// Type of service token, aSide or z_side. One available in shared connection.
func (o LookupInterconnectionResultOutput) ServiceTokenType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.ServiceTokenType }).(pulumi.StringOutput)
}

// List of connection service tokens with attributes
func (o LookupInterconnectionResultOutput) ServiceTokens() GetInterconnectionServiceTokenArrayOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) []GetInterconnectionServiceToken { return v.ServiceTokens }).(GetInterconnectionServiceTokenArrayOutput)
}

// Port speed in bits per second.
func (o LookupInterconnectionResultOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Speed }).(pulumi.StringOutput)
}

// Port status.
func (o LookupInterconnectionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Status }).(pulumi.StringOutput)
}

// String list of tags.
func (o LookupInterconnectionResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
//
// Deprecated: If your organization already has connection service tokens enabled, use `serviceTokens` instead
func (o LookupInterconnectionResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Token }).(pulumi.StringOutput)
}

// Token type, `aSide` or `zSide`.
func (o LookupInterconnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

// Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.
func (o LookupInterconnectionResultOutput) Vlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) []int { return v.Vlans }).(pulumi.IntArrayOutput)
}

func (o LookupInterconnectionResultOutput) Vrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInterconnectionResult) []string { return v.Vrfs }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterconnectionResultOutput{})
}
