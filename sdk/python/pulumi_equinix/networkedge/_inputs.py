# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AclTemplateDeviceDetailArgs',
    'AclTemplateInboundRuleArgs',
    'DeviceClusterDetailsArgs',
    'DeviceClusterDetailsNode0Args',
    'DeviceClusterDetailsNode0VendorConfigurationArgs',
    'DeviceClusterDetailsNode1Args',
    'DeviceClusterDetailsNode1VendorConfigurationArgs',
    'DeviceInterfaceArgs',
    'DeviceLinkDeviceArgs',
    'DeviceLinkLinkArgs',
    'DeviceSecondaryDeviceArgs',
    'DeviceSecondaryDeviceInterfaceArgs',
    'DeviceSecondaryDeviceSshKeyArgs',
    'DeviceSshKeyArgs',
]

@pulumi.input_type
class AclTemplateDeviceDetailArgs:
    def __init__(__self__, *,
                 acl_status: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] acl_status: Device ACL provisioning status where template was applied. One of `PROVISIONING`,
               `PROVISIONED`.
        :param pulumi.Input[str] name: ACL template name.
        :param pulumi.Input[str] uuid: Device uuid.
        """
        AclTemplateDeviceDetailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acl_status=acl_status,
            name=name,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acl_status: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             uuid: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if acl_status is None and 'aclStatus' in kwargs:
            acl_status = kwargs['aclStatus']

        if acl_status is not None:
            _setter("acl_status", acl_status)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="aclStatus")
    def acl_status(self) -> Optional[pulumi.Input[str]]:
        """
        Device ACL provisioning status where template was applied. One of `PROVISIONING`,
        `PROVISIONED`.
        """
        return pulumi.get(self, "acl_status")

    @acl_status.setter
    def acl_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        ACL template name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Device uuid.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class AclTemplateInboundRuleArgs:
    def __init__(__self__, *,
                 dst_port: pulumi.Input[str],
                 protocol: pulumi.Input[Union[str, 'AclRuleProtocolType']],
                 src_port: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 sequence_number: Optional[pulumi.Input[int]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] dst_port: Inbound traffic destination ports. Allowed values are a comma separated
               list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param pulumi.Input[Union[str, 'AclRuleProtocolType']] protocol: Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        :param pulumi.Input[str] src_port: Inbound traffic source ports. Allowed values are a comma separated list
               of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param pulumi.Input[str] description: Inbound rule description, up to 200 characters.
        :param pulumi.Input[str] subnet: Inbound traffic source IP subnet in CIDR format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Inbound traffic source IP subnets in CIDR format.
        """
        AclTemplateInboundRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dst_port=dst_port,
            protocol=protocol,
            src_port=src_port,
            description=description,
            sequence_number=sequence_number,
            source_type=source_type,
            subnet=subnet,
            subnets=subnets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dst_port: Optional[pulumi.Input[str]] = None,
             protocol: Optional[pulumi.Input[Union[str, 'AclRuleProtocolType']]] = None,
             src_port: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             sequence_number: Optional[pulumi.Input[int]] = None,
             source_type: Optional[pulumi.Input[str]] = None,
             subnet: Optional[pulumi.Input[str]] = None,
             subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if dst_port is None and 'dstPort' in kwargs:
            dst_port = kwargs['dstPort']
        if dst_port is None:
            raise TypeError("Missing 'dst_port' argument")
        if protocol is None:
            raise TypeError("Missing 'protocol' argument")
        if src_port is None and 'srcPort' in kwargs:
            src_port = kwargs['srcPort']
        if src_port is None:
            raise TypeError("Missing 'src_port' argument")
        if sequence_number is None and 'sequenceNumber' in kwargs:
            sequence_number = kwargs['sequenceNumber']
        if source_type is None and 'sourceType' in kwargs:
            source_type = kwargs['sourceType']

        _setter("dst_port", dst_port)
        _setter("protocol", protocol)
        _setter("src_port", src_port)
        if description is not None:
            _setter("description", description)
        if sequence_number is not None:
            _setter("sequence_number", sequence_number)
        if source_type is not None:
            warnings.warn("""Source Type will not be returned""", DeprecationWarning)
            pulumi.log.warn("""source_type is deprecated: Source Type will not be returned""")
        if source_type is not None:
            _setter("source_type", source_type)
        if subnet is not None:
            _setter("subnet", subnet)
        if subnets is not None:
            warnings.warn("""Use Subnet instead""", DeprecationWarning)
            pulumi.log.warn("""subnets is deprecated: Use Subnet instead""")
        if subnets is not None:
            _setter("subnets", subnets)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Input[str]:
        """
        Inbound traffic destination ports. Allowed values are a comma separated
        list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[Union[str, 'AclRuleProtocolType']]:
        """
        Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[Union[str, 'AclRuleProtocolType']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> pulumi.Input[str]:
        """
        Inbound traffic source ports. Allowed values are a comma separated list
        of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound rule description, up to 200 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Source Type will not be returned""", DeprecationWarning)
        pulumi.log.warn("""source_type is deprecated: Source Type will not be returned""")

        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound traffic source IP subnet in CIDR format.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Inbound traffic source IP subnets in CIDR format.
        """
        warnings.warn("""Use Subnet instead""", DeprecationWarning)
        pulumi.log.warn("""subnets is deprecated: Use Subnet instead""")

        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class DeviceClusterDetailsArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 node0: pulumi.Input['DeviceClusterDetailsNode0Args'],
                 node1: pulumi.Input['DeviceClusterDetailsNode1Args'],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 num_of_nodes: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] cluster_name: The name of the cluster device
        :param pulumi.Input['DeviceClusterDetailsNode0Args'] node0: An object that has `node0` configuration.
               See Cluster Details - Nodes below for more details.
        :param pulumi.Input['DeviceClusterDetailsNode1Args'] node1: An object that has `node1` configuration.
               See Cluster Details - Nodes below for more details.
        :param pulumi.Input[str] cluster_id: The ID of the cluster.
        :param pulumi.Input[int] num_of_nodes: The number of nodes in the cluster.
        """
        DeviceClusterDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_name=cluster_name,
            node0=node0,
            node1=node1,
            cluster_id=cluster_id,
            num_of_nodes=num_of_nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_name: Optional[pulumi.Input[str]] = None,
             node0: Optional[pulumi.Input['DeviceClusterDetailsNode0Args']] = None,
             node1: Optional[pulumi.Input['DeviceClusterDetailsNode1Args']] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             num_of_nodes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if cluster_name is None and 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if cluster_name is None:
            raise TypeError("Missing 'cluster_name' argument")
        if node0 is None:
            raise TypeError("Missing 'node0' argument")
        if node1 is None:
            raise TypeError("Missing 'node1' argument")
        if cluster_id is None and 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if num_of_nodes is None and 'numOfNodes' in kwargs:
            num_of_nodes = kwargs['numOfNodes']

        _setter("cluster_name", cluster_name)
        _setter("node0", node0)
        _setter("node1", node1)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if num_of_nodes is not None:
            _setter("num_of_nodes", num_of_nodes)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of the cluster device
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def node0(self) -> pulumi.Input['DeviceClusterDetailsNode0Args']:
        """
        An object that has `node0` configuration.
        See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node0")

    @node0.setter
    def node0(self, value: pulumi.Input['DeviceClusterDetailsNode0Args']):
        pulumi.set(self, "node0", value)

    @property
    @pulumi.getter
    def node1(self) -> pulumi.Input['DeviceClusterDetailsNode1Args']:
        """
        An object that has `node1` configuration.
        See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node1")

    @node1.setter
    def node1(self, value: pulumi.Input['DeviceClusterDetailsNode1Args']):
        pulumi.set(self, "node1", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="numOfNodes")
    def num_of_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in the cluster.
        """
        return pulumi.get(self, "num_of_nodes")

    @num_of_nodes.setter
    def num_of_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_of_nodes", value)


@pulumi.input_type
class DeviceClusterDetailsNode0Args:
    def __init__(__self__, *,
                 license_file_id: Optional[pulumi.Input[str]] = None,
                 license_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vendor_configuration: Optional[pulumi.Input['DeviceClusterDetailsNode0VendorConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] license_file_id: Identifier of a license file that will be applied on the device.
        :param pulumi.Input[str] license_token: License Token applicable for some device types in BYOL licensing
               mode.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] uuid: Device unique identifier.
        :param pulumi.Input['DeviceClusterDetailsNode0VendorConfigurationArgs'] vendor_configuration: Map of vendor specific configuration parameters for a device
               (controller1, activationKey, managementType, siteId, systemIpAddress)
               * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
               on a device (max one key).  See SSH Key below for more details.
        """
        DeviceClusterDetailsNode0Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[pulumi.Input[str]] = None,
             license_token: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             uuid: Optional[pulumi.Input[str]] = None,
             vendor_configuration: Optional[pulumi.Input['DeviceClusterDetailsNode0VendorConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']

        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_token is not None:
            _setter("license_token", license_token)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a license file that will be applied on the device.
        """
        return pulumi.get(self, "license_file_id")

    @license_file_id.setter
    def license_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_file_id", value)

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[pulumi.Input[str]]:
        """
        License Token applicable for some device types in BYOL licensing
        mode.
        """
        return pulumi.get(self, "license_token")

    @license_token.setter
    def license_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_token", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional[pulumi.Input['DeviceClusterDetailsNode0VendorConfigurationArgs']]:
        """
        Map of vendor specific configuration parameters for a device
        (controller1, activationKey, managementType, siteId, systemIpAddress)
        * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
        on a device (max one key).  See SSH Key below for more details.
        """
        return pulumi.get(self, "vendor_configuration")

    @vendor_configuration.setter
    def vendor_configuration(self, value: Optional[pulumi.Input['DeviceClusterDetailsNode0VendorConfigurationArgs']]):
        pulumi.set(self, "vendor_configuration", value)


@pulumi.input_type
class DeviceClusterDetailsNode0VendorConfigurationArgs:
    def __init__(__self__, *,
                 activation_key: Optional[pulumi.Input[str]] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 controller1: Optional[pulumi.Input[str]] = None,
                 controller_fqdn: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] activation_key: Activation key. This is required for Velocloud clusters.
        :param pulumi.Input[str] admin_password: The administrative password of the device. You can use it to log in
               to the console. This field is not available for all device types.
        :param pulumi.Input[str] controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param pulumi.Input[str] controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param pulumi.Input[str] hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param pulumi.Input[str] root_password: The CLI password of the device. This field is relevant only for the
               Velocloud SDWAN cluster.
        """
        DeviceClusterDetailsNode0VendorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[pulumi.Input[str]] = None,
             admin_password: Optional[pulumi.Input[str]] = None,
             controller1: Optional[pulumi.Input[str]] = None,
             controller_fqdn: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             root_password: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']

        if activation_key is not None:
            _setter("activation_key", activation_key)
        if admin_password is not None:
            _setter("admin_password", admin_password)
        if controller1 is not None:
            _setter("controller1", controller1)
        if controller_fqdn is not None:
            _setter("controller_fqdn", controller_fqdn)
        if hostname is not None:
            _setter("hostname", hostname)
        if root_password is not None:
            _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[pulumi.Input[str]]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @activation_key.setter
    def activation_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activation_key", value)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative password of the device. You can use it to log in
        to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter
    def controller1(self) -> Optional[pulumi.Input[str]]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @controller1.setter
    def controller1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller1", value)

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @controller_fqdn.setter
    def controller_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_fqdn", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        The CLI password of the device. This field is relevant only for the
        Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)


@pulumi.input_type
class DeviceClusterDetailsNode1Args:
    def __init__(__self__, *,
                 license_file_id: Optional[pulumi.Input[str]] = None,
                 license_token: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vendor_configuration: Optional[pulumi.Input['DeviceClusterDetailsNode1VendorConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] license_file_id: Identifier of a license file that will be applied on the device.
        :param pulumi.Input[str] license_token: License Token applicable for some device types in BYOL licensing
               mode.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] uuid: Device unique identifier.
        :param pulumi.Input['DeviceClusterDetailsNode1VendorConfigurationArgs'] vendor_configuration: Map of vendor specific configuration parameters for a device
               (controller1, activationKey, managementType, siteId, systemIpAddress)
               * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
               on a device (max one key).  See SSH Key below for more details.
        """
        DeviceClusterDetailsNode1Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[pulumi.Input[str]] = None,
             license_token: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             uuid: Optional[pulumi.Input[str]] = None,
             vendor_configuration: Optional[pulumi.Input['DeviceClusterDetailsNode1VendorConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']

        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_token is not None:
            _setter("license_token", license_token)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a license file that will be applied on the device.
        """
        return pulumi.get(self, "license_file_id")

    @license_file_id.setter
    def license_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_file_id", value)

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[pulumi.Input[str]]:
        """
        License Token applicable for some device types in BYOL licensing
        mode.
        """
        return pulumi.get(self, "license_token")

    @license_token.setter
    def license_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_token", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional[pulumi.Input['DeviceClusterDetailsNode1VendorConfigurationArgs']]:
        """
        Map of vendor specific configuration parameters for a device
        (controller1, activationKey, managementType, siteId, systemIpAddress)
        * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
        on a device (max one key).  See SSH Key below for more details.
        """
        return pulumi.get(self, "vendor_configuration")

    @vendor_configuration.setter
    def vendor_configuration(self, value: Optional[pulumi.Input['DeviceClusterDetailsNode1VendorConfigurationArgs']]):
        pulumi.set(self, "vendor_configuration", value)


@pulumi.input_type
class DeviceClusterDetailsNode1VendorConfigurationArgs:
    def __init__(__self__, *,
                 activation_key: Optional[pulumi.Input[str]] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 controller1: Optional[pulumi.Input[str]] = None,
                 controller_fqdn: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] activation_key: Activation key. This is required for Velocloud clusters.
        :param pulumi.Input[str] admin_password: The administrative password of the device. You can use it to log in
               to the console. This field is not available for all device types.
        :param pulumi.Input[str] controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param pulumi.Input[str] controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param pulumi.Input[str] hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param pulumi.Input[str] root_password: The CLI password of the device. This field is relevant only for the
               Velocloud SDWAN cluster.
        """
        DeviceClusterDetailsNode1VendorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[pulumi.Input[str]] = None,
             admin_password: Optional[pulumi.Input[str]] = None,
             controller1: Optional[pulumi.Input[str]] = None,
             controller_fqdn: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             root_password: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']

        if activation_key is not None:
            _setter("activation_key", activation_key)
        if admin_password is not None:
            _setter("admin_password", admin_password)
        if controller1 is not None:
            _setter("controller1", controller1)
        if controller_fqdn is not None:
            _setter("controller_fqdn", controller_fqdn)
        if hostname is not None:
            _setter("hostname", hostname)
        if root_password is not None:
            _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[pulumi.Input[str]]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @activation_key.setter
    def activation_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activation_key", value)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        The administrative password of the device. You can use it to log in
        to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter
    def controller1(self) -> Optional[pulumi.Input[str]]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @controller1.setter
    def controller1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller1", value)

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @controller_fqdn.setter
    def controller_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_fqdn", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        The CLI password of the device. This field is relevant only for the
        Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)


@pulumi.input_type
class DeviceInterfaceArgs:
    def __init__(__self__, *,
                 assigned_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operational_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] assigned_type: interface management type (Equinix Managed or empty).
        :param pulumi.Input[int] id: interface identifier.
        :param pulumi.Input[str] ip_address: interface IP address.
        :param pulumi.Input[str] mac_address: interface MAC address.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] operational_status: interface operational status. One of `up`, `down`.
        :param pulumi.Input[str] status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param pulumi.Input[str] type: interface type.
        """
        DeviceInterfaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[int]] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             mac_address: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             operational_status: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']

        if assigned_type is not None:
            _setter("assigned_type", assigned_type)
        if id is not None:
            _setter("id", id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if name is not None:
            _setter("name", name)
        if operational_status is not None:
            _setter("operational_status", operational_status)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[pulumi.Input[str]]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @assigned_type.setter
    def assigned_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[pulumi.Input[str]]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @operational_status.setter
    def operational_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operational_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        interface type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceLinkDeviceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 asn: Optional[pulumi.Input[int]] = None,
                 interface_id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Device identifier.
        :param pulumi.Input[int] asn: Device ASN number. Not required for self configured devices.
        :param pulumi.Input[int] interface_id: Device network interface identifier to use for device link
               connection.
        :param pulumi.Input[str] ip_address: IP address from device link subnet that was assigned to the device
        :param pulumi.Input[str] status: device link provisioning status on a given device. One of `PROVISIONING`,
               `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        DeviceLinkDeviceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            asn=asn,
            interface_id=interface_id,
            ip_address=ip_address,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[pulumi.Input[str]] = None,
             asn: Optional[pulumi.Input[int]] = None,
             interface_id: Optional[pulumi.Input[int]] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if interface_id is None and 'interfaceId' in kwargs:
            interface_id = kwargs['interfaceId']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']

        _setter("id", id)
        if asn is not None:
            _setter("asn", asn)
        if interface_id is not None:
            _setter("interface_id", interface_id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Device identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[int]]:
        """
        Device ASN number. Not required for self configured devices.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Device network interface identifier to use for device link
        connection.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address from device link subnet that was assigned to the device
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        device link provisioning status on a given device. One of `PROVISIONING`,
        `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DeviceLinkLinkArgs:
    def __init__(__self__, *,
                 account_number: pulumi.Input[str],
                 dst_metro_code: pulumi.Input[str],
                 src_metro_code: pulumi.Input[str],
                 throughput: pulumi.Input[str],
                 throughput_unit: pulumi.Input[str],
                 dst_zone_code: Optional[pulumi.Input[str]] = None,
                 src_zone_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_number: billing account number to be used for
               connection charges
        :param pulumi.Input[str] dst_metro_code: connection destination metro code.
        :param pulumi.Input[str] src_metro_code: connection source metro code.
        :param pulumi.Input[str] throughput: connection throughput.
        :param pulumi.Input[str] throughput_unit: connection throughput unit (Mbps or Gbps).
        :param pulumi.Input[str] dst_zone_code: connection destination zone code is not required.
        :param pulumi.Input[str] src_zone_code: connection source zone code is not required.
        """
        DeviceLinkLinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
            dst_metro_code=dst_metro_code,
            src_metro_code=src_metro_code,
            throughput=throughput,
            throughput_unit=throughput_unit,
            dst_zone_code=dst_zone_code,
            src_zone_code=src_zone_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[pulumi.Input[str]] = None,
             dst_metro_code: Optional[pulumi.Input[str]] = None,
             src_metro_code: Optional[pulumi.Input[str]] = None,
             throughput: Optional[pulumi.Input[str]] = None,
             throughput_unit: Optional[pulumi.Input[str]] = None,
             dst_zone_code: Optional[pulumi.Input[str]] = None,
             src_zone_code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if dst_metro_code is None and 'dstMetroCode' in kwargs:
            dst_metro_code = kwargs['dstMetroCode']
        if dst_metro_code is None:
            raise TypeError("Missing 'dst_metro_code' argument")
        if src_metro_code is None and 'srcMetroCode' in kwargs:
            src_metro_code = kwargs['srcMetroCode']
        if src_metro_code is None:
            raise TypeError("Missing 'src_metro_code' argument")
        if throughput is None:
            raise TypeError("Missing 'throughput' argument")
        if throughput_unit is None and 'throughputUnit' in kwargs:
            throughput_unit = kwargs['throughputUnit']
        if throughput_unit is None:
            raise TypeError("Missing 'throughput_unit' argument")
        if dst_zone_code is None and 'dstZoneCode' in kwargs:
            dst_zone_code = kwargs['dstZoneCode']
        if src_zone_code is None and 'srcZoneCode' in kwargs:
            src_zone_code = kwargs['srcZoneCode']

        _setter("account_number", account_number)
        _setter("dst_metro_code", dst_metro_code)
        _setter("src_metro_code", src_metro_code)
        _setter("throughput", throughput)
        _setter("throughput_unit", throughput_unit)
        if dst_zone_code is not None:
            warnings.warn("""DestinationZoneCode is not required""", DeprecationWarning)
            pulumi.log.warn("""dst_zone_code is deprecated: DestinationZoneCode is not required""")
        if dst_zone_code is not None:
            _setter("dst_zone_code", dst_zone_code)
        if src_zone_code is not None:
            warnings.warn("""SourceZoneCode is not required""", DeprecationWarning)
            pulumi.log.warn("""src_zone_code is deprecated: SourceZoneCode is not required""")
        if src_zone_code is not None:
            _setter("src_zone_code", src_zone_code)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> pulumi.Input[str]:
        """
        billing account number to be used for
        connection charges
        """
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="dstMetroCode")
    def dst_metro_code(self) -> pulumi.Input[str]:
        """
        connection destination metro code.
        """
        return pulumi.get(self, "dst_metro_code")

    @dst_metro_code.setter
    def dst_metro_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_metro_code", value)

    @property
    @pulumi.getter(name="srcMetroCode")
    def src_metro_code(self) -> pulumi.Input[str]:
        """
        connection source metro code.
        """
        return pulumi.get(self, "src_metro_code")

    @src_metro_code.setter
    def src_metro_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_metro_code", value)

    @property
    @pulumi.getter
    def throughput(self) -> pulumi.Input[str]:
        """
        connection throughput.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: pulumi.Input[str]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter(name="throughputUnit")
    def throughput_unit(self) -> pulumi.Input[str]:
        """
        connection throughput unit (Mbps or Gbps).
        """
        return pulumi.get(self, "throughput_unit")

    @throughput_unit.setter
    def throughput_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "throughput_unit", value)

    @property
    @pulumi.getter(name="dstZoneCode")
    def dst_zone_code(self) -> Optional[pulumi.Input[str]]:
        """
        connection destination zone code is not required.
        """
        warnings.warn("""DestinationZoneCode is not required""", DeprecationWarning)
        pulumi.log.warn("""dst_zone_code is deprecated: DestinationZoneCode is not required""")

        return pulumi.get(self, "dst_zone_code")

    @dst_zone_code.setter
    def dst_zone_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_zone_code", value)

    @property
    @pulumi.getter(name="srcZoneCode")
    def src_zone_code(self) -> Optional[pulumi.Input[str]]:
        """
        connection source zone code is not required.
        """
        warnings.warn("""SourceZoneCode is not required""", DeprecationWarning)
        pulumi.log.warn("""src_zone_code is deprecated: SourceZoneCode is not required""")

        return pulumi.get(self, "src_zone_code")

    @src_zone_code.setter
    def src_zone_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_zone_code", value)


@pulumi.input_type
class DeviceSecondaryDeviceArgs:
    def __init__(__self__, *,
                 account_number: pulumi.Input[str],
                 metro_code: pulumi.Input[str],
                 name: pulumi.Input[str],
                 notifications: pulumi.Input[Sequence[pulumi.Input[str]]],
                 acl_template_id: Optional[pulumi.Input[str]] = None,
                 additional_bandwidth: Optional[pulumi.Input[int]] = None,
                 asn: Optional[pulumi.Input[int]] = None,
                 cloud_init_file_id: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ibx: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceSecondaryDeviceInterfaceArgs']]]] = None,
                 license_file: Optional[pulumi.Input[str]] = None,
                 license_file_id: Optional[pulumi.Input[str]] = None,
                 license_status: Optional[pulumi.Input[str]] = None,
                 license_token: Optional[pulumi.Input[str]] = None,
                 mgmt_acl_template_uuid: Optional[pulumi.Input[str]] = None,
                 redundancy_type: Optional[pulumi.Input[str]] = None,
                 redundant_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 ssh_ip_address: Optional[pulumi.Input[str]] = None,
                 ssh_ip_fqdn: Optional[pulumi.Input[str]] = None,
                 ssh_key: Optional[pulumi.Input['DeviceSecondaryDeviceSshKeyArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vendor_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 wan_interface_id: Optional[pulumi.Input[str]] = None,
                 zone_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_number: Billing account number for secondary device.
        :param pulumi.Input[str] metro_code: Metro location of a secondary device.
        :param pulumi.Input[str] name: Secondary device name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: List of email addresses that will receive notifications about
               secondary device.
        :param pulumi.Input[str] acl_template_id: Identifier of a WAN interface ACL template that will be applied
               on a secondary device.
        :param pulumi.Input[int] additional_bandwidth: Additional Internet bandwidth, in Mbps, for a secondary
               device.
        :param pulumi.Input[int] asn: (Autonomous System Number) Unique identifier for a network on the internet.
        :param pulumi.Input[str] cloud_init_file_id: Identifier of a cloud init file that will be applied on a secondary device.
        :param pulumi.Input[str] hostname: Secondary device hostname.
        :param pulumi.Input[str] ibx: Device location Equinix Business Exchange name.
        :param pulumi.Input[Sequence[pulumi.Input['DeviceSecondaryDeviceInterfaceArgs']]] interfaces: List of device interfaces. See Interface Attribute below
               for more details.
        :param pulumi.Input[str] license_file: Path to the license file that will be uploaded and applied on a
               secondary device. Applicable for some device types in BYOL licensing mode.
        :param pulumi.Input[str] license_file_id: Identifier of a license file that will be applied on a secondary device.
        :param pulumi.Input[str] license_status: Device license registration status. Possible values are `APPLYING_LICENSE`,
               `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        :param pulumi.Input[str] license_token: License Token can be provided for some device types o the device.
        :param pulumi.Input[str] mgmt_acl_template_uuid: Identifier of an MGMT interface ACL template that will be
               applied on a secondary device.
               * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
               device.
        :param pulumi.Input[str] redundancy_type: Device redundancy type applicable for HA devices, either
               primary or secondary.
        :param pulumi.Input[str] redundant_id: Unique identifier for a redundant device applicable for HA devices.
        :param pulumi.Input[str] region: Device location region.
        :param pulumi.Input[str] ssh_ip_address: IP address of SSH enabled interface on the device.
        :param pulumi.Input[str] ssh_ip_fqdn: FQDN of SSH enabled interface on the device.
        :param pulumi.Input[str] status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param pulumi.Input[str] uuid: Device unique identifier.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vendor_configuration: Key/Value pairs of vendor specific configuration parameters
               for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
               `systemIpAddress`.
        :param pulumi.Input[str] zone_code: Device location zone code.
        """
        DeviceSecondaryDeviceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
            metro_code=metro_code,
            name=name,
            notifications=notifications,
            acl_template_id=acl_template_id,
            additional_bandwidth=additional_bandwidth,
            asn=asn,
            cloud_init_file_id=cloud_init_file_id,
            hostname=hostname,
            ibx=ibx,
            interfaces=interfaces,
            license_file=license_file,
            license_file_id=license_file_id,
            license_status=license_status,
            license_token=license_token,
            mgmt_acl_template_uuid=mgmt_acl_template_uuid,
            redundancy_type=redundancy_type,
            redundant_id=redundant_id,
            region=region,
            ssh_ip_address=ssh_ip_address,
            ssh_ip_fqdn=ssh_ip_fqdn,
            ssh_key=ssh_key,
            status=status,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
            wan_interface_id=wan_interface_id,
            zone_code=zone_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[pulumi.Input[str]] = None,
             metro_code: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             acl_template_id: Optional[pulumi.Input[str]] = None,
             additional_bandwidth: Optional[pulumi.Input[int]] = None,
             asn: Optional[pulumi.Input[int]] = None,
             cloud_init_file_id: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             ibx: Optional[pulumi.Input[str]] = None,
             interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceSecondaryDeviceInterfaceArgs']]]] = None,
             license_file: Optional[pulumi.Input[str]] = None,
             license_file_id: Optional[pulumi.Input[str]] = None,
             license_status: Optional[pulumi.Input[str]] = None,
             license_token: Optional[pulumi.Input[str]] = None,
             mgmt_acl_template_uuid: Optional[pulumi.Input[str]] = None,
             redundancy_type: Optional[pulumi.Input[str]] = None,
             redundant_id: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             ssh_ip_address: Optional[pulumi.Input[str]] = None,
             ssh_ip_fqdn: Optional[pulumi.Input[str]] = None,
             ssh_key: Optional[pulumi.Input['DeviceSecondaryDeviceSshKeyArgs']] = None,
             status: Optional[pulumi.Input[str]] = None,
             uuid: Optional[pulumi.Input[str]] = None,
             vendor_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             wan_interface_id: Optional[pulumi.Input[str]] = None,
             zone_code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if notifications is None:
            raise TypeError("Missing 'notifications' argument")
        if acl_template_id is None and 'aclTemplateId' in kwargs:
            acl_template_id = kwargs['aclTemplateId']
        if additional_bandwidth is None and 'additionalBandwidth' in kwargs:
            additional_bandwidth = kwargs['additionalBandwidth']
        if cloud_init_file_id is None and 'cloudInitFileId' in kwargs:
            cloud_init_file_id = kwargs['cloudInitFileId']
        if license_file is None and 'licenseFile' in kwargs:
            license_file = kwargs['licenseFile']
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_status is None and 'licenseStatus' in kwargs:
            license_status = kwargs['licenseStatus']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if mgmt_acl_template_uuid is None and 'mgmtAclTemplateUuid' in kwargs:
            mgmt_acl_template_uuid = kwargs['mgmtAclTemplateUuid']
        if redundancy_type is None and 'redundancyType' in kwargs:
            redundancy_type = kwargs['redundancyType']
        if redundant_id is None and 'redundantId' in kwargs:
            redundant_id = kwargs['redundantId']
        if ssh_ip_address is None and 'sshIpAddress' in kwargs:
            ssh_ip_address = kwargs['sshIpAddress']
        if ssh_ip_fqdn is None and 'sshIpFqdn' in kwargs:
            ssh_ip_fqdn = kwargs['sshIpFqdn']
        if ssh_key is None and 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']
        if wan_interface_id is None and 'wanInterfaceId' in kwargs:
            wan_interface_id = kwargs['wanInterfaceId']
        if zone_code is None and 'zoneCode' in kwargs:
            zone_code = kwargs['zoneCode']

        _setter("account_number", account_number)
        _setter("metro_code", metro_code)
        _setter("name", name)
        _setter("notifications", notifications)
        if acl_template_id is not None:
            _setter("acl_template_id", acl_template_id)
        if additional_bandwidth is not None:
            _setter("additional_bandwidth", additional_bandwidth)
        if asn is not None:
            _setter("asn", asn)
        if cloud_init_file_id is not None:
            _setter("cloud_init_file_id", cloud_init_file_id)
        if hostname is not None:
            _setter("hostname", hostname)
        if ibx is not None:
            _setter("ibx", ibx)
        if interfaces is not None:
            _setter("interfaces", interfaces)
        if license_file is not None:
            _setter("license_file", license_file)
        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_status is not None:
            _setter("license_status", license_status)
        if license_token is not None:
            _setter("license_token", license_token)
        if mgmt_acl_template_uuid is not None:
            _setter("mgmt_acl_template_uuid", mgmt_acl_template_uuid)
        if redundancy_type is not None:
            _setter("redundancy_type", redundancy_type)
        if redundant_id is not None:
            _setter("redundant_id", redundant_id)
        if region is not None:
            _setter("region", region)
        if ssh_ip_address is not None:
            _setter("ssh_ip_address", ssh_ip_address)
        if ssh_ip_fqdn is not None:
            _setter("ssh_ip_fqdn", ssh_ip_fqdn)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if status is not None:
            _setter("status", status)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)
        if wan_interface_id is not None:
            _setter("wan_interface_id", wan_interface_id)
        if zone_code is not None:
            _setter("zone_code", zone_code)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> pulumi.Input[str]:
        """
        Billing account number for secondary device.
        """
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> pulumi.Input[str]:
        """
        Metro location of a secondary device.
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Secondary device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of email addresses that will receive notifications about
        secondary device.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="aclTemplateId")
    def acl_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a WAN interface ACL template that will be applied
        on a secondary device.
        """
        return pulumi.get(self, "acl_template_id")

    @acl_template_id.setter
    def acl_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_template_id", value)

    @property
    @pulumi.getter(name="additionalBandwidth")
    def additional_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Additional Internet bandwidth, in Mbps, for a secondary
        device.
        """
        return pulumi.get(self, "additional_bandwidth")

    @additional_bandwidth.setter
    def additional_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_bandwidth", value)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[int]]:
        """
        (Autonomous System Number) Unique identifier for a network on the internet.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="cloudInitFileId")
    def cloud_init_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a cloud init file that will be applied on a secondary device.
        """
        return pulumi.get(self, "cloud_init_file_id")

    @cloud_init_file_id.setter
    def cloud_init_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_init_file_id", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary device hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        Device location Equinix Business Exchange name.
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceSecondaryDeviceInterfaceArgs']]]]:
        """
        List of device interfaces. See Interface Attribute below
        for more details.
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceSecondaryDeviceInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter(name="licenseFile")
    def license_file(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the license file that will be uploaded and applied on a
        secondary device. Applicable for some device types in BYOL licensing mode.
        """
        return pulumi.get(self, "license_file")

    @license_file.setter
    def license_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_file", value)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a license file that will be applied on a secondary device.
        """
        return pulumi.get(self, "license_file_id")

    @license_file_id.setter
    def license_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_file_id", value)

    @property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> Optional[pulumi.Input[str]]:
        """
        Device license registration status. Possible values are `APPLYING_LICENSE`,
        `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        """
        return pulumi.get(self, "license_status")

    @license_status.setter
    def license_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_status", value)

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[pulumi.Input[str]]:
        """
        License Token can be provided for some device types o the device.
        """
        return pulumi.get(self, "license_token")

    @license_token.setter
    def license_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_token", value)

    @property
    @pulumi.getter(name="mgmtAclTemplateUuid")
    def mgmt_acl_template_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of an MGMT interface ACL template that will be
        applied on a secondary device.
        * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
        device.
        """
        return pulumi.get(self, "mgmt_acl_template_uuid")

    @mgmt_acl_template_uuid.setter
    def mgmt_acl_template_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mgmt_acl_template_uuid", value)

    @property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Device redundancy type applicable for HA devices, either
        primary or secondary.
        """
        return pulumi.get(self, "redundancy_type")

    @redundancy_type.setter
    def redundancy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundancy_type", value)

    @property
    @pulumi.getter(name="redundantId")
    def redundant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for a redundant device applicable for HA devices.
        """
        return pulumi.get(self, "redundant_id")

    @redundant_id.setter
    def redundant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Device location region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sshIpAddress")
    def ssh_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_address")

    @ssh_ip_address.setter
    def ssh_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_ip_address", value)

    @property
    @pulumi.getter(name="sshIpFqdn")
    def ssh_ip_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_fqdn")

    @ssh_ip_fqdn.setter
    def ssh_ip_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_ip_fqdn", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input['DeviceSecondaryDeviceSshKeyArgs']]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input['DeviceSecondaryDeviceSshKeyArgs']]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key/Value pairs of vendor specific configuration parameters
        for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
        `systemIpAddress`.
        """
        return pulumi.get(self, "vendor_configuration")

    @vendor_configuration.setter
    def vendor_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vendor_configuration", value)

    @property
    @pulumi.getter(name="wanInterfaceId")
    def wan_interface_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wan_interface_id")

    @wan_interface_id.setter
    def wan_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_interface_id", value)

    @property
    @pulumi.getter(name="zoneCode")
    def zone_code(self) -> Optional[pulumi.Input[str]]:
        """
        Device location zone code.
        """
        return pulumi.get(self, "zone_code")

    @zone_code.setter
    def zone_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_code", value)


@pulumi.input_type
class DeviceSecondaryDeviceInterfaceArgs:
    def __init__(__self__, *,
                 assigned_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operational_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] assigned_type: interface management type (Equinix Managed or empty).
        :param pulumi.Input[int] id: interface identifier.
        :param pulumi.Input[str] ip_address: interface IP address.
        :param pulumi.Input[str] mac_address: interface MAC address.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] operational_status: interface operational status. One of `up`, `down`.
        :param pulumi.Input[str] status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param pulumi.Input[str] type: interface type.
        """
        DeviceSecondaryDeviceInterfaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[int]] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             mac_address: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             operational_status: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']

        if assigned_type is not None:
            _setter("assigned_type", assigned_type)
        if id is not None:
            _setter("id", id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if name is not None:
            _setter("name", name)
        if operational_status is not None:
            _setter("operational_status", operational_status)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[pulumi.Input[str]]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @assigned_type.setter
    def assigned_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[pulumi.Input[str]]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @operational_status.setter
    def operational_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operational_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        interface type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceSecondaryDeviceSshKeyArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] username: username associated with given key.
        """
        DeviceSecondaryDeviceSshKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DeviceSshKeyArgs:
    def __init__(__self__, *,
                 key_name: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] username: username associated with given key.
        """
        DeviceSshKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


