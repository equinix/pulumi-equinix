# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AclTemplateDeviceDetail',
    'AclTemplateInboundRule',
    'DeviceClusterDetails',
    'DeviceClusterDetailsNode0',
    'DeviceClusterDetailsNode0VendorConfiguration',
    'DeviceClusterDetailsNode1',
    'DeviceClusterDetailsNode1VendorConfiguration',
    'DeviceInterface',
    'DeviceLinkDevice',
    'DeviceLinkLink',
    'DeviceLinkMetroLink',
    'DeviceSecondaryDevice',
    'DeviceSecondaryDeviceInterface',
    'DeviceSecondaryDeviceSshKey',
    'DeviceSshKey',
    'GetDeviceClusterDetailResult',
    'GetDeviceClusterDetailNode0Result',
    'GetDeviceClusterDetailNode0VendorConfigurationResult',
    'GetDeviceClusterDetailNode1Result',
    'GetDeviceClusterDetailNode1VendorConfigurationResult',
    'GetDeviceInterfaceResult',
    'GetDeviceSecondaryDeviceResult',
    'GetDeviceSecondaryDeviceInterfaceResult',
    'GetDeviceSecondaryDeviceSshKeyResult',
    'GetDeviceSshKeyResult',
]

@pulumi.output_type
class AclTemplateDeviceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclStatus":
            suggest = "acl_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTemplateDeviceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTemplateDeviceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTemplateDeviceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_status: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None):
        """
        :param _builtins.str acl_status: Device ACL provisioning status where template was applied. One of `PROVISIONING`, `PROVISIONED`.
        :param _builtins.str name: ACL template name.
        :param _builtins.str uuid: Device uuid.
        """
        if acl_status is not None:
            pulumi.set(__self__, "acl_status", acl_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="aclStatus")
    def acl_status(self) -> Optional[_builtins.str]:
        """
        Device ACL provisioning status where template was applied. One of `PROVISIONING`, `PROVISIONED`.
        """
        return pulumi.get(self, "acl_status")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        ACL template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Device uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class AclTemplateInboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPort":
            suggest = "dst_port"
        elif key == "srcPort":
            suggest = "src_port"
        elif key == "sequenceNumber":
            suggest = "sequence_number"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTemplateInboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTemplateInboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTemplateInboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port: _builtins.str,
                 protocol: _builtins.str,
                 src_port: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 sequence_number: Optional[_builtins.int] = None,
                 source_type: Optional[_builtins.str] = None,
                 subnet: Optional[_builtins.str] = None,
                 subnets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str dst_port: Inbound traffic destination ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param Union[_builtins.str, 'AclRuleProtocolType'] protocol: Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        :param _builtins.str src_port: Inbound traffic source ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param _builtins.str description: Inbound rule description, up to 200 characters.
        :param _builtins.int sequence_number: Inbound rule sequence number
        :param _builtins.str source_type: Type of traffic source used in a given inbound rule
        :param _builtins.str subnet: Inbound traffic source IP subnet in CIDR format.
        :param Sequence[_builtins.str] subnets: Inbound traffic source IP subnets in CIDR format.
        """
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_port", src_port)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sequence_number is not None:
            pulumi.set(__self__, "sequence_number", sequence_number)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @_builtins.property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> _builtins.str:
        """
        Inbound traffic destination ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "dst_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> _builtins.str:
        """
        Inbound traffic source ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "src_port")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Inbound rule description, up to 200 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> Optional[_builtins.int]:
        """
        Inbound rule sequence number
        """
        return pulumi.get(self, "sequence_number")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    @_utilities.deprecated("""Source Type will not be returned""")
    def source_type(self) -> Optional[_builtins.str]:
        """
        Type of traffic source used in a given inbound rule
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[_builtins.str]:
        """
        Inbound traffic source IP subnet in CIDR format.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Use Subnet instead""")
    def subnets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Inbound traffic source IP subnets in CIDR format.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class DeviceClusterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "numOfNodes":
            suggest = "num_of_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: _builtins.str,
                 node0: 'outputs.DeviceClusterDetailsNode0',
                 node1: 'outputs.DeviceClusterDetailsNode1',
                 cluster_id: Optional[_builtins.str] = None,
                 num_of_nodes: Optional[_builtins.int] = None):
        """
        :param _builtins.str cluster_name: The name of the cluster device
        :param 'DeviceClusterDetailsNode0Args' node0: An object that has `node0` configuration. See Cluster Details - Nodes below for more details.
        :param 'DeviceClusterDetailsNode1Args' node1: An object that has `node1` configuration. See Cluster Details - Nodes below for more details.
        :param _builtins.str cluster_id: The ID of the cluster.
        :param _builtins.int num_of_nodes: The number of nodes in the cluster.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "node0", node0)
        pulumi.set(__self__, "node1", node1)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if num_of_nodes is not None:
            pulumi.set(__self__, "num_of_nodes", num_of_nodes)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The name of the cluster device
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter
    def node0(self) -> 'outputs.DeviceClusterDetailsNode0':
        """
        An object that has `node0` configuration. See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node0")

    @_builtins.property
    @pulumi.getter
    def node1(self) -> 'outputs.DeviceClusterDetailsNode1':
        """
        An object that has `node1` configuration. See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node1")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="numOfNodes")
    def num_of_nodes(self) -> Optional[_builtins.int]:
        """
        The number of nodes in the cluster.
        """
        return pulumi.get(self, "num_of_nodes")


@pulumi.output_type
class DeviceClusterDetailsNode0(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode0. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode0.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode0.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_file_id: Optional[_builtins.str] = None,
                 license_token: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 vendor_configuration: Optional['outputs.DeviceClusterDetailsNode0VendorConfiguration'] = None):
        """
        :param _builtins.str license_file_id: License file id. This is necessary for Fortinet and Juniper clusters.
        :param _builtins.str license_token: License token. This is necessary for Palo Alto clusters.
        :param _builtins.str name: Device name.
        :param _builtins.str uuid: Device unique identifier.
        :param 'DeviceClusterDetailsNode0VendorConfigurationArgs' vendor_configuration: An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
        """
        if license_file_id is not None:
            pulumi.set(__self__, "license_file_id", license_file_id)
        if license_token is not None:
            pulumi.set(__self__, "license_token", license_token)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor_configuration is not None:
            pulumi.set(__self__, "vendor_configuration", vendor_configuration)

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[_builtins.str]:
        """
        License file id. This is necessary for Fortinet and Juniper clusters.
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[_builtins.str]:
        """
        License token. This is necessary for Palo Alto clusters.
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional['outputs.DeviceClusterDetailsNode0VendorConfiguration']:
        """
        An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
        """
        return pulumi.get(self, "vendor_configuration")


@pulumi.output_type
class DeviceClusterDetailsNode0VendorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationKey":
            suggest = "activation_key"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "controllerFqdn":
            suggest = "controller_fqdn"
        elif key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "licenseId":
            suggest = "license_id"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "managementType":
            suggest = "management_type"
        elif key == "panoramaAuthKey":
            suggest = "panorama_auth_key"
        elif key == "panoramaIpAddress":
            suggest = "panorama_ip_address"
        elif key == "privateAddress":
            suggest = "private_address"
        elif key == "privateCidrMask":
            suggest = "private_cidr_mask"
        elif key == "privateGateway":
            suggest = "private_gateway"
        elif key == "rootPassword":
            suggest = "root_password"
        elif key == "subnetMaskIp":
            suggest = "subnet_mask_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode0VendorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode0VendorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode0VendorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_key: Optional[_builtins.str] = None,
                 admin_password: Optional[_builtins.str] = None,
                 controller1: Optional[_builtins.str] = None,
                 controller_fqdn: Optional[_builtins.str] = None,
                 gateway_ip: Optional[_builtins.str] = None,
                 hostname: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 license_id: Optional[_builtins.str] = None,
                 license_key: Optional[_builtins.str] = None,
                 management_type: Optional[_builtins.str] = None,
                 panorama_auth_key: Optional[_builtins.str] = None,
                 panorama_ip_address: Optional[_builtins.str] = None,
                 private_address: Optional[_builtins.str] = None,
                 private_cidr_mask: Optional[_builtins.str] = None,
                 private_gateway: Optional[_builtins.str] = None,
                 root_password: Optional[_builtins.str] = None,
                 subnet_mask_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str activation_key: Activation key. This is required for Velocloud clusters.
        :param _builtins.str admin_password: The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
        :param _builtins.str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param _builtins.str controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param _builtins.str gateway_ip: Gateway IP. This field is relevant only for the Infoblox devices.
        :param _builtins.str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param _builtins.str ip_address: IP Address. This field is relevant only for the Infoblox devices.
        :param _builtins.str license_id: License id. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str license_key: License key. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str management_type: Management Type. This field is relevant only for Cisco FTD Firewall devices
        :param _builtins.str panorama_auth_key: Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        :param _builtins.str panorama_ip_address: Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        :param _builtins.str private_address: Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_cidr_mask: Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_gateway: Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str root_password: The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
        :param _builtins.str subnet_mask_ip: Subnet Mask IP. This field is relevant only for the Infoblox devices.
        """
        if activation_key is not None:
            pulumi.set(__self__, "activation_key", activation_key)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if controller1 is not None:
            pulumi.set(__self__, "controller1", controller1)
        if controller_fqdn is not None:
            pulumi.set(__self__, "controller_fqdn", controller_fqdn)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if management_type is not None:
            pulumi.set(__self__, "management_type", management_type)
        if panorama_auth_key is not None:
            pulumi.set(__self__, "panorama_auth_key", panorama_auth_key)
        if panorama_ip_address is not None:
            pulumi.set(__self__, "panorama_ip_address", panorama_ip_address)
        if private_address is not None:
            pulumi.set(__self__, "private_address", private_address)
        if private_cidr_mask is not None:
            pulumi.set(__self__, "private_cidr_mask", private_cidr_mask)
        if private_gateway is not None:
            pulumi.set(__self__, "private_gateway", private_gateway)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if subnet_mask_ip is not None:
            pulumi.set(__self__, "subnet_mask_ip", subnet_mask_ip)

    @_builtins.property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[_builtins.str]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[_builtins.str]:
        """
        The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter
    def controller1(self) -> Optional[_builtins.str]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @_builtins.property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[_builtins.str]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[_builtins.str]:
        """
        Gateway IP. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[_builtins.str]:
        """
        License id. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_id")

    @_builtins.property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[_builtins.str]:
        """
        License key. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_key")

    @_builtins.property
    @pulumi.getter(name="managementType")
    def management_type(self) -> Optional[_builtins.str]:
        """
        Management Type. This field is relevant only for Cisco FTD Firewall devices
        """
        return pulumi.get(self, "management_type")

    @_builtins.property
    @pulumi.getter(name="panoramaAuthKey")
    def panorama_auth_key(self) -> Optional[_builtins.str]:
        """
        Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        """
        return pulumi.get(self, "panorama_auth_key")

    @_builtins.property
    @pulumi.getter(name="panoramaIpAddress")
    def panorama_ip_address(self) -> Optional[_builtins.str]:
        """
        Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        """
        return pulumi.get(self, "panorama_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateAddress")
    def private_address(self) -> Optional[_builtins.str]:
        """
        Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_address")

    @_builtins.property
    @pulumi.getter(name="privateCidrMask")
    def private_cidr_mask(self) -> Optional[_builtins.str]:
        """
        Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_cidr_mask")

    @_builtins.property
    @pulumi.getter(name="privateGateway")
    def private_gateway(self) -> Optional[_builtins.str]:
        """
        Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_gateway")

    @_builtins.property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[_builtins.str]:
        """
        The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")

    @_builtins.property
    @pulumi.getter(name="subnetMaskIp")
    def subnet_mask_ip(self) -> Optional[_builtins.str]:
        """
        Subnet Mask IP. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "subnet_mask_ip")


@pulumi.output_type
class DeviceClusterDetailsNode1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_file_id: Optional[_builtins.str] = None,
                 license_token: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 vendor_configuration: Optional['outputs.DeviceClusterDetailsNode1VendorConfiguration'] = None):
        """
        :param _builtins.str license_file_id: License file id. This is necessary for Fortinet and Juniper clusters.
        :param _builtins.str license_token: License token. This is necessary for Palo Alto clusters.
        :param _builtins.str name: Device name.
        :param _builtins.str uuid: Device unique identifier.
        :param 'DeviceClusterDetailsNode1VendorConfigurationArgs' vendor_configuration: An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
        """
        if license_file_id is not None:
            pulumi.set(__self__, "license_file_id", license_file_id)
        if license_token is not None:
            pulumi.set(__self__, "license_token", license_token)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor_configuration is not None:
            pulumi.set(__self__, "vendor_configuration", vendor_configuration)

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[_builtins.str]:
        """
        License file id. This is necessary for Fortinet and Juniper clusters.
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[_builtins.str]:
        """
        License token. This is necessary for Palo Alto clusters.
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional['outputs.DeviceClusterDetailsNode1VendorConfiguration']:
        """
        An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
        """
        return pulumi.get(self, "vendor_configuration")


@pulumi.output_type
class DeviceClusterDetailsNode1VendorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationKey":
            suggest = "activation_key"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "controllerFqdn":
            suggest = "controller_fqdn"
        elif key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "licenseId":
            suggest = "license_id"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "managementType":
            suggest = "management_type"
        elif key == "panoramaAuthKey":
            suggest = "panorama_auth_key"
        elif key == "panoramaIpAddress":
            suggest = "panorama_ip_address"
        elif key == "privateAddress":
            suggest = "private_address"
        elif key == "privateCidrMask":
            suggest = "private_cidr_mask"
        elif key == "privateGateway":
            suggest = "private_gateway"
        elif key == "rootPassword":
            suggest = "root_password"
        elif key == "subnetMaskIp":
            suggest = "subnet_mask_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode1VendorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode1VendorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode1VendorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_key: Optional[_builtins.str] = None,
                 admin_password: Optional[_builtins.str] = None,
                 controller1: Optional[_builtins.str] = None,
                 controller_fqdn: Optional[_builtins.str] = None,
                 gateway_ip: Optional[_builtins.str] = None,
                 hostname: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 license_id: Optional[_builtins.str] = None,
                 license_key: Optional[_builtins.str] = None,
                 management_type: Optional[_builtins.str] = None,
                 panorama_auth_key: Optional[_builtins.str] = None,
                 panorama_ip_address: Optional[_builtins.str] = None,
                 private_address: Optional[_builtins.str] = None,
                 private_cidr_mask: Optional[_builtins.str] = None,
                 private_gateway: Optional[_builtins.str] = None,
                 root_password: Optional[_builtins.str] = None,
                 subnet_mask_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str activation_key: Activation key. This is required for Velocloud clusters.
        :param _builtins.str admin_password: The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
        :param _builtins.str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param _builtins.str controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param _builtins.str gateway_ip: Gateway IP. This field is relevant only for the Infoblox devices.
        :param _builtins.str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param _builtins.str ip_address: IP Address. This field is relevant only for the Infoblox devices.
        :param _builtins.str license_id: License id. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str license_key: License key. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str management_type: Management Type. This field is relevant only for Cisco FTD Firewall devices
        :param _builtins.str panorama_auth_key: Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        :param _builtins.str panorama_ip_address: Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        :param _builtins.str private_address: Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_cidr_mask: Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_gateway: Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str root_password: The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
        :param _builtins.str subnet_mask_ip: Subnet Mask IP. This field is relevant only for the Infoblox devices.
        """
        if activation_key is not None:
            pulumi.set(__self__, "activation_key", activation_key)
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if controller1 is not None:
            pulumi.set(__self__, "controller1", controller1)
        if controller_fqdn is not None:
            pulumi.set(__self__, "controller_fqdn", controller_fqdn)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if management_type is not None:
            pulumi.set(__self__, "management_type", management_type)
        if panorama_auth_key is not None:
            pulumi.set(__self__, "panorama_auth_key", panorama_auth_key)
        if panorama_ip_address is not None:
            pulumi.set(__self__, "panorama_ip_address", panorama_ip_address)
        if private_address is not None:
            pulumi.set(__self__, "private_address", private_address)
        if private_cidr_mask is not None:
            pulumi.set(__self__, "private_cidr_mask", private_cidr_mask)
        if private_gateway is not None:
            pulumi.set(__self__, "private_gateway", private_gateway)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if subnet_mask_ip is not None:
            pulumi.set(__self__, "subnet_mask_ip", subnet_mask_ip)

    @_builtins.property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[_builtins.str]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[_builtins.str]:
        """
        The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter
    def controller1(self) -> Optional[_builtins.str]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @_builtins.property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[_builtins.str]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[_builtins.str]:
        """
        Gateway IP. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[_builtins.str]:
        """
        License id. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_id")

    @_builtins.property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[_builtins.str]:
        """
        License key. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_key")

    @_builtins.property
    @pulumi.getter(name="managementType")
    def management_type(self) -> Optional[_builtins.str]:
        """
        Management Type. This field is relevant only for Cisco FTD Firewall devices
        """
        return pulumi.get(self, "management_type")

    @_builtins.property
    @pulumi.getter(name="panoramaAuthKey")
    def panorama_auth_key(self) -> Optional[_builtins.str]:
        """
        Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        """
        return pulumi.get(self, "panorama_auth_key")

    @_builtins.property
    @pulumi.getter(name="panoramaIpAddress")
    def panorama_ip_address(self) -> Optional[_builtins.str]:
        """
        Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
        """
        return pulumi.get(self, "panorama_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateAddress")
    def private_address(self) -> Optional[_builtins.str]:
        """
        Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_address")

    @_builtins.property
    @pulumi.getter(name="privateCidrMask")
    def private_cidr_mask(self) -> Optional[_builtins.str]:
        """
        Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_cidr_mask")

    @_builtins.property
    @pulumi.getter(name="privateGateway")
    def private_gateway(self) -> Optional[_builtins.str]:
        """
        Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_gateway")

    @_builtins.property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[_builtins.str]:
        """
        The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")

    @_builtins.property
    @pulumi.getter(name="subnetMaskIp")
    def subnet_mask_ip(self) -> Optional[_builtins.str]:
        """
        Subnet Mask IP. This field is relevant only for the Infoblox devices.
        """
        return pulumi.get(self, "subnet_mask_ip")


@pulumi.output_type
class DeviceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedType":
            suggest = "assigned_type"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "operationalStatus":
            suggest = "operational_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_type: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 ip_address: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 operational_status: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str assigned_type: interface management type (Equinix Managed or empty).
        :param _builtins.int id: interface identifier.
        :param _builtins.str ip_address: interface IP address.
        :param _builtins.str mac_address: interface MAC address.
        :param _builtins.str name: Device name.
        :param _builtins.str operational_status: interface operational status. One of `up`, `down`.
        :param _builtins.str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param _builtins.str type: interface type.
        """
        if assigned_type is not None:
            pulumi.set(__self__, "assigned_type", assigned_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operational_status is not None:
            pulumi.set(__self__, "operational_status", operational_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[_builtins.str]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[_builtins.str]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        interface type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceLinkDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceId":
            suggest = "interface_id"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceLinkDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceLinkDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceLinkDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 asn: Optional[_builtins.int] = None,
                 interface_id: Optional[_builtins.int] = None,
                 ip_address: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Device identifier.
        :param _builtins.int asn: Device ASN number. Not required for self configured devices.
        :param _builtins.int interface_id: Device network interface identifier to use for device link connection.
        :param _builtins.str ip_address: IP address from device link subnet that was assigned to the device
        :param _builtins.str status: device link provisioning status on a given device. One of `PROVISIONING`, `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        pulumi.set(__self__, "id", id)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Device identifier.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[_builtins.int]:
        """
        Device ASN number. Not required for self configured devices.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[_builtins.int]:
        """
        Device network interface identifier to use for device link connection.
        """
        return pulumi.get(self, "interface_id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP address from device link subnet that was assigned to the device
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        device link provisioning status on a given device. One of `PROVISIONING`, `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DeviceLinkLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"
        elif key == "dstMetroCode":
            suggest = "dst_metro_code"
        elif key == "srcMetroCode":
            suggest = "src_metro_code"
        elif key == "throughputUnit":
            suggest = "throughput_unit"
        elif key == "dstZoneCode":
            suggest = "dst_zone_code"
        elif key == "srcZoneCode":
            suggest = "src_zone_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceLinkLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceLinkLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceLinkLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: _builtins.str,
                 dst_metro_code: _builtins.str,
                 src_metro_code: _builtins.str,
                 throughput: _builtins.str,
                 throughput_unit: _builtins.str,
                 dst_zone_code: Optional[_builtins.str] = None,
                 src_zone_code: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_number: billing account number to be used for connection charges
        :param _builtins.str dst_metro_code: connection destination metro code.
        :param _builtins.str src_metro_code: connection source metro code.
        :param _builtins.str throughput: connection throughput.
        :param _builtins.str throughput_unit: connection throughput unit (Mbps or Gbps).
        :param _builtins.str dst_zone_code: connection destination zone code is not required.
        :param _builtins.str src_zone_code: connection source zone code is not required.
        """
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "dst_metro_code", dst_metro_code)
        pulumi.set(__self__, "src_metro_code", src_metro_code)
        pulumi.set(__self__, "throughput", throughput)
        pulumi.set(__self__, "throughput_unit", throughput_unit)
        if dst_zone_code is not None:
            pulumi.set(__self__, "dst_zone_code", dst_zone_code)
        if src_zone_code is not None:
            pulumi.set(__self__, "src_zone_code", src_zone_code)

    @_builtins.property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> _builtins.str:
        """
        billing account number to be used for connection charges
        """
        return pulumi.get(self, "account_number")

    @_builtins.property
    @pulumi.getter(name="dstMetroCode")
    def dst_metro_code(self) -> _builtins.str:
        """
        connection destination metro code.
        """
        return pulumi.get(self, "dst_metro_code")

    @_builtins.property
    @pulumi.getter(name="srcMetroCode")
    def src_metro_code(self) -> _builtins.str:
        """
        connection source metro code.
        """
        return pulumi.get(self, "src_metro_code")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> _builtins.str:
        """
        connection throughput.
        """
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="throughputUnit")
    def throughput_unit(self) -> _builtins.str:
        """
        connection throughput unit (Mbps or Gbps).
        """
        return pulumi.get(self, "throughput_unit")

    @_builtins.property
    @pulumi.getter(name="dstZoneCode")
    @_utilities.deprecated("""DestinationZoneCode is not required""")
    def dst_zone_code(self) -> Optional[_builtins.str]:
        """
        connection destination zone code is not required.
        """
        return pulumi.get(self, "dst_zone_code")

    @_builtins.property
    @pulumi.getter(name="srcZoneCode")
    @_utilities.deprecated("""SourceZoneCode is not required""")
    def src_zone_code(self) -> Optional[_builtins.str]:
        """
        connection source zone code is not required.
        """
        return pulumi.get(self, "src_zone_code")


@pulumi.output_type
class DeviceLinkMetroLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"
        elif key == "metroCode":
            suggest = "metro_code"
        elif key == "throughputUnit":
            suggest = "throughput_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceLinkMetroLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceLinkMetroLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceLinkMetroLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: _builtins.str,
                 metro_code: _builtins.str,
                 throughput: _builtins.str,
                 throughput_unit: _builtins.str):
        """
        :param _builtins.str account_number: billing account number to be used for connection charges
        :param _builtins.str metro_code: connection metro code.
        :param _builtins.str throughput: connection throughput.
        :param _builtins.str throughput_unit: connection throughput unit (Mbps or Gbps).
        """
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "throughput", throughput)
        pulumi.set(__self__, "throughput_unit", throughput_unit)

    @_builtins.property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> _builtins.str:
        """
        billing account number to be used for connection charges
        """
        return pulumi.get(self, "account_number")

    @_builtins.property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> _builtins.str:
        """
        connection metro code.
        """
        return pulumi.get(self, "metro_code")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> _builtins.str:
        """
        connection throughput.
        """
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="throughputUnit")
    def throughput_unit(self) -> _builtins.str:
        """
        connection throughput unit (Mbps or Gbps).
        """
        return pulumi.get(self, "throughput_unit")


@pulumi.output_type
class DeviceSecondaryDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"
        elif key == "metroCode":
            suggest = "metro_code"
        elif key == "aclTemplateId":
            suggest = "acl_template_id"
        elif key == "additionalBandwidth":
            suggest = "additional_bandwidth"
        elif key == "cloudInitFileId":
            suggest = "cloud_init_file_id"
        elif key == "licenseFile":
            suggest = "license_file"
        elif key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseStatus":
            suggest = "license_status"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "mgmtAclTemplateUuid":
            suggest = "mgmt_acl_template_uuid"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "redundancyType":
            suggest = "redundancy_type"
        elif key == "redundantId":
            suggest = "redundant_id"
        elif key == "sshIpAddress":
            suggest = "ssh_ip_address"
        elif key == "sshIpFqdn":
            suggest = "ssh_ip_fqdn"
        elif key == "sshKey":
            suggest = "ssh_key"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"
        elif key == "wanInterfaceId":
            suggest = "wan_interface_id"
        elif key == "zoneCode":
            suggest = "zone_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: _builtins.str,
                 metro_code: _builtins.str,
                 name: _builtins.str,
                 notifications: Sequence[_builtins.str],
                 acl_template_id: Optional[_builtins.str] = None,
                 additional_bandwidth: Optional[_builtins.int] = None,
                 asn: Optional[_builtins.int] = None,
                 cloud_init_file_id: Optional[_builtins.str] = None,
                 hostname: Optional[_builtins.str] = None,
                 ibx: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.DeviceSecondaryDeviceInterface']] = None,
                 license_file: Optional[_builtins.str] = None,
                 license_file_id: Optional[_builtins.str] = None,
                 license_status: Optional[_builtins.str] = None,
                 license_token: Optional[_builtins.str] = None,
                 mgmt_acl_template_uuid: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 redundancy_type: Optional[_builtins.str] = None,
                 redundant_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 ssh_ip_address: Optional[_builtins.str] = None,
                 ssh_ip_fqdn: Optional[_builtins.str] = None,
                 ssh_key: Optional['outputs.DeviceSecondaryDeviceSshKey'] = None,
                 status: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 vendor_configuration: Optional[Mapping[str, _builtins.str]] = None,
                 wan_interface_id: Optional[_builtins.str] = None,
                 zone_code: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_number: Billing account number for secondary device.
        :param _builtins.str metro_code: Metro location of a secondary device.
        :param _builtins.str name: Secondary device name.
        :param Sequence[_builtins.str] notifications: List of email addresses that will receive notifications about secondary device.
        :param _builtins.str acl_template_id: Identifier of a WAN interface ACL template that will be applied on a secondary device.
        :param _builtins.int additional_bandwidth: Additional Internet bandwidth, in Mbps, for a secondary device.
        :param _builtins.int asn: (Autonomous System Number) Unique identifier for a network on the internet.
        :param _builtins.str cloud_init_file_id: Identifier of a cloud init file that will be applied on a secondary device.
        :param _builtins.str hostname: Secondary device hostname.
        :param _builtins.str ibx: Device location Equinix Business Exchange name.
        :param Sequence['DeviceSecondaryDeviceInterfaceArgs'] interfaces: List of device interfaces. See Interface Attribute below for more details.
        :param _builtins.str license_file: Path to the license file that will be uploaded and applied on a secondary device. Applicable for some device types in BYOL licensing mode.
        :param _builtins.str license_file_id: Identifier of a license file that will be applied on a secondary device.
        :param _builtins.str license_status: Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        :param _builtins.str license_token: License Token can be provided for some device types o the device.
        :param _builtins.str mgmt_acl_template_uuid: Identifier of an MGMT interface ACL template that will be applied on a secondary device.
               * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary device.
        :param _builtins.str project_id: Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
        :param _builtins.str redundancy_type: Device redundancy type applicable for HA devices, either primary or secondary.
        :param _builtins.str redundant_id: Unique identifier for a redundant device applicable for HA devices.
        :param _builtins.str region: Device location region.
        :param _builtins.str ssh_ip_address: IP address of SSH enabled interface on the device.
        :param _builtins.str ssh_ip_fqdn: FQDN of SSH enabled interface on the device.
        :param 'DeviceSecondaryDeviceSshKeyArgs' ssh_key: Definition of SSH key that will be provisioned on a device
        :param _builtins.str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param _builtins.str uuid: Device unique identifier.
        :param Mapping[str, _builtins.str] vendor_configuration: Key/Value pairs of vendor specific configuration parameters for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`, `systemIpAddress`, `privateAddress`, `privateCidrMask`, `privateGateway`, `licenseKey`, `licenseId`, `panoramaAuthKey`, `panoramaIpAddress`, `ipAddress`, `subnetMaskIp`, `gatewayIp`.
        :param _builtins.str wan_interface_id: device interface id picked for WAN
        :param _builtins.str zone_code: Device location zone code.
        """
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        if acl_template_id is not None:
            pulumi.set(__self__, "acl_template_id", acl_template_id)
        if additional_bandwidth is not None:
            pulumi.set(__self__, "additional_bandwidth", additional_bandwidth)
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if cloud_init_file_id is not None:
            pulumi.set(__self__, "cloud_init_file_id", cloud_init_file_id)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if license_file is not None:
            pulumi.set(__self__, "license_file", license_file)
        if license_file_id is not None:
            pulumi.set(__self__, "license_file_id", license_file_id)
        if license_status is not None:
            pulumi.set(__self__, "license_status", license_status)
        if license_token is not None:
            pulumi.set(__self__, "license_token", license_token)
        if mgmt_acl_template_uuid is not None:
            pulumi.set(__self__, "mgmt_acl_template_uuid", mgmt_acl_template_uuid)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if redundancy_type is not None:
            pulumi.set(__self__, "redundancy_type", redundancy_type)
        if redundant_id is not None:
            pulumi.set(__self__, "redundant_id", redundant_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if ssh_ip_address is not None:
            pulumi.set(__self__, "ssh_ip_address", ssh_ip_address)
        if ssh_ip_fqdn is not None:
            pulumi.set(__self__, "ssh_ip_fqdn", ssh_ip_fqdn)
        if ssh_key is not None:
            pulumi.set(__self__, "ssh_key", ssh_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vendor_configuration is not None:
            pulumi.set(__self__, "vendor_configuration", vendor_configuration)
        if wan_interface_id is not None:
            pulumi.set(__self__, "wan_interface_id", wan_interface_id)
        if zone_code is not None:
            pulumi.set(__self__, "zone_code", zone_code)

    @_builtins.property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> _builtins.str:
        """
        Billing account number for secondary device.
        """
        return pulumi.get(self, "account_number")

    @_builtins.property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> _builtins.str:
        """
        Metro location of a secondary device.
        """
        return pulumi.get(self, "metro_code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Secondary device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence[_builtins.str]:
        """
        List of email addresses that will receive notifications about secondary device.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="aclTemplateId")
    def acl_template_id(self) -> Optional[_builtins.str]:
        """
        Identifier of a WAN interface ACL template that will be applied on a secondary device.
        """
        return pulumi.get(self, "acl_template_id")

    @_builtins.property
    @pulumi.getter(name="additionalBandwidth")
    def additional_bandwidth(self) -> Optional[_builtins.int]:
        """
        Additional Internet bandwidth, in Mbps, for a secondary device.
        """
        return pulumi.get(self, "additional_bandwidth")

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[_builtins.int]:
        """
        (Autonomous System Number) Unique identifier for a network on the internet.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter(name="cloudInitFileId")
    def cloud_init_file_id(self) -> Optional[_builtins.str]:
        """
        Identifier of a cloud init file that will be applied on a secondary device.
        """
        return pulumi.get(self, "cloud_init_file_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Secondary device hostname.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def ibx(self) -> Optional[_builtins.str]:
        """
        Device location Equinix Business Exchange name.
        """
        return pulumi.get(self, "ibx")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.DeviceSecondaryDeviceInterface']]:
        """
        List of device interfaces. See Interface Attribute below for more details.
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="licenseFile")
    def license_file(self) -> Optional[_builtins.str]:
        """
        Path to the license file that will be uploaded and applied on a secondary device. Applicable for some device types in BYOL licensing mode.
        """
        return pulumi.get(self, "license_file")

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[_builtins.str]:
        """
        Identifier of a license file that will be applied on a secondary device.
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> Optional[_builtins.str]:
        """
        Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        """
        return pulumi.get(self, "license_status")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[_builtins.str]:
        """
        License Token can be provided for some device types o the device.
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter(name="mgmtAclTemplateUuid")
    def mgmt_acl_template_uuid(self) -> Optional[_builtins.str]:
        """
        Identifier of an MGMT interface ACL template that will be applied on a secondary device.
        * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary device.
        """
        return pulumi.get(self, "mgmt_acl_template_uuid")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> Optional[_builtins.str]:
        """
        Device redundancy type applicable for HA devices, either primary or secondary.
        """
        return pulumi.get(self, "redundancy_type")

    @_builtins.property
    @pulumi.getter(name="redundantId")
    def redundant_id(self) -> Optional[_builtins.str]:
        """
        Unique identifier for a redundant device applicable for HA devices.
        """
        return pulumi.get(self, "redundant_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Device location region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshIpAddress")
    def ssh_ip_address(self) -> Optional[_builtins.str]:
        """
        IP address of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_address")

    @_builtins.property
    @pulumi.getter(name="sshIpFqdn")
    def ssh_ip_fqdn(self) -> Optional[_builtins.str]:
        """
        FQDN of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_fqdn")

    @_builtins.property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional['outputs.DeviceSecondaryDeviceSshKey']:
        """
        Definition of SSH key that will be provisioned on a device
        """
        return pulumi.get(self, "ssh_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Key/Value pairs of vendor specific configuration parameters for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`, `systemIpAddress`, `privateAddress`, `privateCidrMask`, `privateGateway`, `licenseKey`, `licenseId`, `panoramaAuthKey`, `panoramaIpAddress`, `ipAddress`, `subnetMaskIp`, `gatewayIp`.
        """
        return pulumi.get(self, "vendor_configuration")

    @_builtins.property
    @pulumi.getter(name="wanInterfaceId")
    def wan_interface_id(self) -> Optional[_builtins.str]:
        """
        device interface id picked for WAN
        """
        return pulumi.get(self, "wan_interface_id")

    @_builtins.property
    @pulumi.getter(name="zoneCode")
    def zone_code(self) -> Optional[_builtins.str]:
        """
        Device location zone code.
        """
        return pulumi.get(self, "zone_code")


@pulumi.output_type
class DeviceSecondaryDeviceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedType":
            suggest = "assigned_type"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "operationalStatus":
            suggest = "operational_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDeviceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDeviceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDeviceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_type: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 ip_address: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 operational_status: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str assigned_type: interface management type (Equinix Managed or empty).
        :param _builtins.int id: interface identifier.
        :param _builtins.str ip_address: interface IP address.
        :param _builtins.str mac_address: interface MAC address.
        :param _builtins.str name: Device name.
        :param _builtins.str operational_status: interface operational status. One of `up`, `down`.
        :param _builtins.str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param _builtins.str type: interface type.
        """
        if assigned_type is not None:
            pulumi.set(__self__, "assigned_type", assigned_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operational_status is not None:
            pulumi.set(__self__, "operational_status", operational_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[_builtins.str]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[_builtins.str]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        interface type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceSecondaryDeviceSshKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDeviceSshKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDeviceSshKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDeviceSshKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username: _builtins.str,
                 key_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str username: username associated with given key.
        :param _builtins.str key_name: Reference by name to previously provisioned public SSH key
        """
        pulumi.set(__self__, "username", username)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[_builtins.str]:
        """
        Reference by name to previously provisioned public SSH key
        """
        return pulumi.get(self, "key_name")


@pulumi.output_type
class DeviceSshKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSshKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSshKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSshKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username: _builtins.str,
                 key_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str username: username associated with given key.
        :param _builtins.str key_name: Reference by name to previously provisioned public SSH key
        """
        pulumi.set(__self__, "username", username)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[_builtins.str]:
        """
        Reference by name to previously provisioned public SSH key
        """
        return pulumi.get(self, "key_name")


@pulumi.output_type
class GetDeviceClusterDetailResult(dict):
    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 cluster_name: _builtins.str,
                 node0s: Sequence['outputs.GetDeviceClusterDetailNode0Result'],
                 node1s: Sequence['outputs.GetDeviceClusterDetailNode1Result'],
                 num_of_nodes: _builtins.int):
        """
        :param _builtins.str cluster_id: The id of the cluster
        :param _builtins.str cluster_name: The name of the cluster device
        :param Sequence['GetDeviceClusterDetailNode0Args'] node0s: An object that has node0 details
        :param Sequence['GetDeviceClusterDetailNode1Args'] node1s: An object that has node1 details
        :param _builtins.int num_of_nodes: The number of nodes in the cluster
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "node0s", node0s)
        pulumi.set(__self__, "node1s", node1s)
        pulumi.set(__self__, "num_of_nodes", num_of_nodes)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The id of the cluster
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> _builtins.str:
        """
        The name of the cluster device
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter
    def node0s(self) -> Sequence['outputs.GetDeviceClusterDetailNode0Result']:
        """
        An object that has node0 details
        """
        return pulumi.get(self, "node0s")

    @_builtins.property
    @pulumi.getter
    def node1s(self) -> Sequence['outputs.GetDeviceClusterDetailNode1Result']:
        """
        An object that has node1 details
        """
        return pulumi.get(self, "node1s")

    @_builtins.property
    @pulumi.getter(name="numOfNodes")
    def num_of_nodes(self) -> _builtins.int:
        """
        The number of nodes in the cluster
        """
        return pulumi.get(self, "num_of_nodes")


@pulumi.output_type
class GetDeviceClusterDetailNode0Result(dict):
    def __init__(__self__, *,
                 license_file_id: _builtins.str,
                 license_token: _builtins.str,
                 name: _builtins.str,
                 uuid: _builtins.str,
                 vendor_configurations: Sequence['outputs.GetDeviceClusterDetailNode0VendorConfigurationResult']):
        """
        :param _builtins.str license_file_id: Unique identifier of applied license file
        :param _builtins.str license_token: License token. This is necessary for Palo Alto clusters
        :param _builtins.str name: Name of an existing Equinix Network Edge device
        :param _builtins.str uuid: UUID of an existing Equinix Network Edge device
        :param Sequence['GetDeviceClusterDetailNode0VendorConfigurationArgs'] vendor_configurations: An object that has fields relevant to the vendor of the cluster device
        """
        pulumi.set(__self__, "license_file_id", license_file_id)
        pulumi.set(__self__, "license_token", license_token)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor_configurations", vendor_configurations)

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> _builtins.str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> _builtins.str:
        """
        License token. This is necessary for Palo Alto clusters
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfigurations")
    def vendor_configurations(self) -> Sequence['outputs.GetDeviceClusterDetailNode0VendorConfigurationResult']:
        """
        An object that has fields relevant to the vendor of the cluster device
        """
        return pulumi.get(self, "vendor_configurations")


@pulumi.output_type
class GetDeviceClusterDetailNode0VendorConfigurationResult(dict):
    def __init__(__self__, *,
                 activation_key: _builtins.str,
                 admin_password: _builtins.str,
                 controller1: _builtins.str,
                 controller_fqdn: _builtins.str,
                 hostname: _builtins.str,
                 license_id: _builtins.str,
                 license_key: _builtins.str,
                 panorama_auth_key: _builtins.str,
                 panorama_ip_address: _builtins.str,
                 private_address: _builtins.str,
                 private_cidr_mask: _builtins.str,
                 private_gateway: _builtins.str,
                 root_password: _builtins.str):
        """
        :param _builtins.str activation_key: Activation key. This is required for Velocloud clusters
        :param _builtins.str admin_password: The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
        :param _builtins.str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device
        :param _builtins.str controller_fqdn: Controller fqdn. This is required for Velocloud clusters
        :param _builtins.str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
        :param _builtins.str license_id: License id. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str license_key: License key. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str panorama_auth_key: Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
        :param _builtins.str panorama_ip_address: Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
        :param _builtins.str private_address: Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_cidr_mask: Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_gateway: Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str root_password: The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
        """
        pulumi.set(__self__, "activation_key", activation_key)
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "controller1", controller1)
        pulumi.set(__self__, "controller_fqdn", controller_fqdn)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "license_id", license_id)
        pulumi.set(__self__, "license_key", license_key)
        pulumi.set(__self__, "panorama_auth_key", panorama_auth_key)
        pulumi.set(__self__, "panorama_ip_address", panorama_ip_address)
        pulumi.set(__self__, "private_address", private_address)
        pulumi.set(__self__, "private_cidr_mask", private_cidr_mask)
        pulumi.set(__self__, "private_gateway", private_gateway)
        pulumi.set(__self__, "root_password", root_password)

    @_builtins.property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> _builtins.str:
        """
        Activation key. This is required for Velocloud clusters
        """
        return pulumi.get(self, "activation_key")

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> _builtins.str:
        """
        The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter
    def controller1(self) -> _builtins.str:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device
        """
        return pulumi.get(self, "controller1")

    @_builtins.property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> _builtins.str:
        """
        Controller fqdn. This is required for Velocloud clusters
        """
        return pulumi.get(self, "controller_fqdn")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> _builtins.str:
        """
        License id. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_id")

    @_builtins.property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> _builtins.str:
        """
        License key. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_key")

    @_builtins.property
    @pulumi.getter(name="panoramaAuthKey")
    def panorama_auth_key(self) -> _builtins.str:
        """
        Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
        """
        return pulumi.get(self, "panorama_auth_key")

    @_builtins.property
    @pulumi.getter(name="panoramaIpAddress")
    def panorama_ip_address(self) -> _builtins.str:
        """
        Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
        """
        return pulumi.get(self, "panorama_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateAddress")
    def private_address(self) -> _builtins.str:
        """
        Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_address")

    @_builtins.property
    @pulumi.getter(name="privateCidrMask")
    def private_cidr_mask(self) -> _builtins.str:
        """
        Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_cidr_mask")

    @_builtins.property
    @pulumi.getter(name="privateGateway")
    def private_gateway(self) -> _builtins.str:
        """
        Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_gateway")

    @_builtins.property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> _builtins.str:
        """
        The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
        """
        return pulumi.get(self, "root_password")


@pulumi.output_type
class GetDeviceClusterDetailNode1Result(dict):
    def __init__(__self__, *,
                 license_file_id: _builtins.str,
                 license_token: _builtins.str,
                 name: _builtins.str,
                 uuid: _builtins.str,
                 vendor_configurations: Sequence['outputs.GetDeviceClusterDetailNode1VendorConfigurationResult']):
        """
        :param _builtins.str license_file_id: Unique identifier of applied license file
        :param _builtins.str license_token: License token. This is necessary for Palo Alto clusters
        :param _builtins.str name: Name of an existing Equinix Network Edge device
        :param _builtins.str uuid: UUID of an existing Equinix Network Edge device
        :param Sequence['GetDeviceClusterDetailNode1VendorConfigurationArgs'] vendor_configurations: An object that has fields relevant to the vendor of the cluster device
        """
        pulumi.set(__self__, "license_file_id", license_file_id)
        pulumi.set(__self__, "license_token", license_token)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor_configurations", vendor_configurations)

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> _builtins.str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> _builtins.str:
        """
        License token. This is necessary for Palo Alto clusters
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfigurations")
    def vendor_configurations(self) -> Sequence['outputs.GetDeviceClusterDetailNode1VendorConfigurationResult']:
        """
        An object that has fields relevant to the vendor of the cluster device
        """
        return pulumi.get(self, "vendor_configurations")


@pulumi.output_type
class GetDeviceClusterDetailNode1VendorConfigurationResult(dict):
    def __init__(__self__, *,
                 activation_key: _builtins.str,
                 admin_password: _builtins.str,
                 controller1: _builtins.str,
                 controller_fqdn: _builtins.str,
                 hostname: _builtins.str,
                 license_id: _builtins.str,
                 license_key: _builtins.str,
                 panorama_auth_key: _builtins.str,
                 panorama_ip_address: _builtins.str,
                 private_address: _builtins.str,
                 private_cidr_mask: _builtins.str,
                 private_gateway: _builtins.str,
                 root_password: _builtins.str):
        """
        :param _builtins.str activation_key: Activation key. This is required for Velocloud clusters
        :param _builtins.str admin_password: The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
        :param _builtins.str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device
        :param _builtins.str controller_fqdn: Controller fqdn. This is required for Velocloud clusters
        :param _builtins.str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
        :param _builtins.str license_id: License id. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str license_key: License key. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str panorama_auth_key: Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
        :param _builtins.str panorama_ip_address: Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
        :param _builtins.str private_address: Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_cidr_mask: Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str private_gateway: Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        :param _builtins.str root_password: The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
        """
        pulumi.set(__self__, "activation_key", activation_key)
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "controller1", controller1)
        pulumi.set(__self__, "controller_fqdn", controller_fqdn)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "license_id", license_id)
        pulumi.set(__self__, "license_key", license_key)
        pulumi.set(__self__, "panorama_auth_key", panorama_auth_key)
        pulumi.set(__self__, "panorama_ip_address", panorama_ip_address)
        pulumi.set(__self__, "private_address", private_address)
        pulumi.set(__self__, "private_cidr_mask", private_cidr_mask)
        pulumi.set(__self__, "private_gateway", private_gateway)
        pulumi.set(__self__, "root_password", root_password)

    @_builtins.property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> _builtins.str:
        """
        Activation key. This is required for Velocloud clusters
        """
        return pulumi.get(self, "activation_key")

    @_builtins.property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> _builtins.str:
        """
        The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
        """
        return pulumi.get(self, "admin_password")

    @_builtins.property
    @pulumi.getter
    def controller1(self) -> _builtins.str:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device
        """
        return pulumi.get(self, "controller1")

    @_builtins.property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> _builtins.str:
        """
        Controller fqdn. This is required for Velocloud clusters
        """
        return pulumi.get(self, "controller_fqdn")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> _builtins.str:
        """
        License id. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_id")

    @_builtins.property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> _builtins.str:
        """
        License key. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "license_key")

    @_builtins.property
    @pulumi.getter(name="panoramaAuthKey")
    def panorama_auth_key(self) -> _builtins.str:
        """
        Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
        """
        return pulumi.get(self, "panorama_auth_key")

    @_builtins.property
    @pulumi.getter(name="panoramaIpAddress")
    def panorama_ip_address(self) -> _builtins.str:
        """
        Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
        """
        return pulumi.get(self, "panorama_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateAddress")
    def private_address(self) -> _builtins.str:
        """
        Private address. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_address")

    @_builtins.property
    @pulumi.getter(name="privateCidrMask")
    def private_cidr_mask(self) -> _builtins.str:
        """
        Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_cidr_mask")

    @_builtins.property
    @pulumi.getter(name="privateGateway")
    def private_gateway(self) -> _builtins.str:
        """
        Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
        """
        return pulumi.get(self, "private_gateway")

    @_builtins.property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> _builtins.str:
        """
        The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
        """
        return pulumi.get(self, "root_password")


@pulumi.output_type
class GetDeviceInterfaceResult(dict):
    def __init__(__self__, *,
                 assigned_type: _builtins.str,
                 id: _builtins.int,
                 ip_address: _builtins.str,
                 mac_address: _builtins.str,
                 name: _builtins.str,
                 operational_status: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str assigned_type: Interface management type (Equinix Managed or empty)
        :param _builtins.int id: Interface identifier
        :param _builtins.str ip_address: interface IP address
        :param _builtins.str mac_address: Interface MAC addres
        :param _builtins.str name: Name of an existing Equinix Network Edge device
        :param _builtins.str operational_status: Interface operational status (up or down)
        :param _builtins.str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
               * RESOURCE_UPGRADE_IN_PROGRESS
               * RESOURCE_UPGRADE_FAILED
        :param _builtins.str type: Interface type
        """
        pulumi.set(__self__, "assigned_type", assigned_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operational_status", operational_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> _builtins.str:
        """
        Interface management type (Equinix Managed or empty)
        """
        return pulumi.get(self, "assigned_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Interface identifier
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        interface IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Interface MAC addres
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> _builtins.str:
        """
        Interface operational status (up or down)
        """
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        * RESOURCE_UPGRADE_IN_PROGRESS
        * RESOURCE_UPGRADE_FAILED
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceSecondaryDeviceResult(dict):
    def __init__(__self__, *,
                 account_number: _builtins.str,
                 acl_template_id: _builtins.str,
                 additional_bandwidth: _builtins.int,
                 asn: _builtins.int,
                 cloud_init_file_id: _builtins.str,
                 hostname: _builtins.str,
                 ibx: _builtins.str,
                 interfaces: Sequence['outputs.GetDeviceSecondaryDeviceInterfaceResult'],
                 license_file: _builtins.str,
                 license_file_id: _builtins.str,
                 license_status: _builtins.str,
                 license_token: _builtins.str,
                 metro_code: _builtins.str,
                 mgmt_acl_template_uuid: _builtins.str,
                 name: _builtins.str,
                 notifications: Sequence[_builtins.str],
                 project_id: _builtins.str,
                 redundancy_type: _builtins.str,
                 redundant_id: _builtins.str,
                 region: _builtins.str,
                 ssh_ip_address: _builtins.str,
                 ssh_ip_fqdn: _builtins.str,
                 ssh_keys: Sequence['outputs.GetDeviceSecondaryDeviceSshKeyResult'],
                 status: _builtins.str,
                 uuid: _builtins.str,
                 vendor_configuration: Mapping[str, _builtins.str],
                 wan_interface_id: _builtins.str,
                 zone_code: _builtins.str):
        """
        :param _builtins.str account_number: Device billing account number
        :param _builtins.str acl_template_id: Unique identifier of applied ACL template
        :param _builtins.int additional_bandwidth: Additional Internet bandwidth, in Mbps, that will be allocated to the device
        :param _builtins.int asn: Autonomous system number
        :param _builtins.str cloud_init_file_id: Unique identifier of applied cloud init file
        :param _builtins.str hostname: Device hostname prefix
        :param _builtins.str ibx: Device location Equinix Business Exchange name
        :param Sequence['GetDeviceSecondaryDeviceInterfaceArgs'] interfaces: List of device interfaces
               * `interface.#.id` - interface identifier
               * `interface.#.name` - interface name
               * `interface.#.status` - interface status (AVAILABLE, RESERVED, ASSIGNED)
               * `interface.#.operational_status` - interface operational status (up or down)
               * `interface.#.mac_address` - interface MAC address
               * `interface.#.ip_address` - interface IP address
               * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
               * `interface.#.type` - interface type
        :param _builtins.str license_file: Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
        :param _builtins.str license_file_id: Unique identifier of applied license file
        :param _builtins.str license_status: Device license registration status
               * APPLYING_LICENSE
               * REGISTERED
               * APPLIED
               * WAITING_FOR_CLUSTER_SETUP
               * REGISTRATION_FAILED
               * NA
        :param _builtins.str license_token: License Token applicable for some device types in BYOL licensing mode
        :param _builtins.str metro_code: Device location metro code
        :param _builtins.str mgmt_acl_template_uuid: Unique identifier of applied MGMT ACL template
        :param _builtins.str name: Name of an existing Equinix Network Edge device
        :param Sequence[_builtins.str] notifications: List of email addresses that will receive device status notifications
        :param _builtins.str project_id: The unique identifier of Project Resource to which device is scoped to
        :param _builtins.str redundancy_type: Device redundancy type applicable for HA devices, either primary or secondary
        :param _builtins.str redundant_id: Unique identifier for a redundant device applicable for HA devices
        :param _builtins.str region: Device location region
        :param _builtins.str ssh_ip_address: IP address of SSH enabled interface on the device
        :param _builtins.str ssh_ip_fqdn: FQDN of SSH enabled interface on the device
        :param Sequence['GetDeviceSecondaryDeviceSshKeyArgs'] ssh_keys: Definition of SSH key that will be provisioned on a device
        :param _builtins.str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
               * RESOURCE_UPGRADE_IN_PROGRESS
               * RESOURCE_UPGRADE_FAILED
        :param _builtins.str uuid: UUID of an existing Equinix Network Edge device
        :param Mapping[str, _builtins.str] vendor_configuration: Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
        :param _builtins.str wan_interface_id: device interface id picked for WAN
        :param _builtins.str zone_code: Device location zone code
        """
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "acl_template_id", acl_template_id)
        pulumi.set(__self__, "additional_bandwidth", additional_bandwidth)
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "cloud_init_file_id", cloud_init_file_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "license_file", license_file)
        pulumi.set(__self__, "license_file_id", license_file_id)
        pulumi.set(__self__, "license_status", license_status)
        pulumi.set(__self__, "license_token", license_token)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "mgmt_acl_template_uuid", mgmt_acl_template_uuid)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "redundancy_type", redundancy_type)
        pulumi.set(__self__, "redundant_id", redundant_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "ssh_ip_address", ssh_ip_address)
        pulumi.set(__self__, "ssh_ip_fqdn", ssh_ip_fqdn)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vendor_configuration", vendor_configuration)
        pulumi.set(__self__, "wan_interface_id", wan_interface_id)
        pulumi.set(__self__, "zone_code", zone_code)

    @_builtins.property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> _builtins.str:
        """
        Device billing account number
        """
        return pulumi.get(self, "account_number")

    @_builtins.property
    @pulumi.getter(name="aclTemplateId")
    def acl_template_id(self) -> _builtins.str:
        """
        Unique identifier of applied ACL template
        """
        return pulumi.get(self, "acl_template_id")

    @_builtins.property
    @pulumi.getter(name="additionalBandwidth")
    def additional_bandwidth(self) -> _builtins.int:
        """
        Additional Internet bandwidth, in Mbps, that will be allocated to the device
        """
        return pulumi.get(self, "additional_bandwidth")

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.int:
        """
        Autonomous system number
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter(name="cloudInitFileId")
    def cloud_init_file_id(self) -> _builtins.str:
        """
        Unique identifier of applied cloud init file
        """
        return pulumi.get(self, "cloud_init_file_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Device hostname prefix
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def ibx(self) -> _builtins.str:
        """
        Device location Equinix Business Exchange name
        """
        return pulumi.get(self, "ibx")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetDeviceSecondaryDeviceInterfaceResult']:
        """
        List of device interfaces
        * `interface.#.id` - interface identifier
        * `interface.#.name` - interface name
        * `interface.#.status` - interface status (AVAILABLE, RESERVED, ASSIGNED)
        * `interface.#.operational_status` - interface operational status (up or down)
        * `interface.#.mac_address` - interface MAC address
        * `interface.#.ip_address` - interface IP address
        * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
        * `interface.#.type` - interface type
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="licenseFile")
    def license_file(self) -> _builtins.str:
        """
        Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
        """
        return pulumi.get(self, "license_file")

    @_builtins.property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> _builtins.str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @_builtins.property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> _builtins.str:
        """
        Device license registration status
        * APPLYING_LICENSE
        * REGISTERED
        * APPLIED
        * WAITING_FOR_CLUSTER_SETUP
        * REGISTRATION_FAILED
        * NA
        """
        return pulumi.get(self, "license_status")

    @_builtins.property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> _builtins.str:
        """
        License Token applicable for some device types in BYOL licensing mode
        """
        return pulumi.get(self, "license_token")

    @_builtins.property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> _builtins.str:
        """
        Device location metro code
        """
        return pulumi.get(self, "metro_code")

    @_builtins.property
    @pulumi.getter(name="mgmtAclTemplateUuid")
    def mgmt_acl_template_uuid(self) -> _builtins.str:
        """
        Unique identifier of applied MGMT ACL template
        """
        return pulumi.get(self, "mgmt_acl_template_uuid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence[_builtins.str]:
        """
        List of email addresses that will receive device status notifications
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The unique identifier of Project Resource to which device is scoped to
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> _builtins.str:
        """
        Device redundancy type applicable for HA devices, either primary or secondary
        """
        return pulumi.get(self, "redundancy_type")

    @_builtins.property
    @pulumi.getter(name="redundantId")
    def redundant_id(self) -> _builtins.str:
        """
        Unique identifier for a redundant device applicable for HA devices
        """
        return pulumi.get(self, "redundant_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Device location region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sshIpAddress")
    def ssh_ip_address(self) -> _builtins.str:
        """
        IP address of SSH enabled interface on the device
        """
        return pulumi.get(self, "ssh_ip_address")

    @_builtins.property
    @pulumi.getter(name="sshIpFqdn")
    def ssh_ip_fqdn(self) -> _builtins.str:
        """
        FQDN of SSH enabled interface on the device
        """
        return pulumi.get(self, "ssh_ip_fqdn")

    @_builtins.property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence['outputs.GetDeviceSecondaryDeviceSshKeyResult']:
        """
        Definition of SSH key that will be provisioned on a device
        """
        return pulumi.get(self, "ssh_keys")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        * RESOURCE_UPGRADE_IN_PROGRESS
        * RESOURCE_UPGRADE_FAILED
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Mapping[str, _builtins.str]:
        """
        Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
        """
        return pulumi.get(self, "vendor_configuration")

    @_builtins.property
    @pulumi.getter(name="wanInterfaceId")
    def wan_interface_id(self) -> _builtins.str:
        """
        device interface id picked for WAN
        """
        return pulumi.get(self, "wan_interface_id")

    @_builtins.property
    @pulumi.getter(name="zoneCode")
    def zone_code(self) -> _builtins.str:
        """
        Device location zone code
        """
        return pulumi.get(self, "zone_code")


@pulumi.output_type
class GetDeviceSecondaryDeviceInterfaceResult(dict):
    def __init__(__self__, *,
                 assigned_type: _builtins.str,
                 id: _builtins.int,
                 ip_address: _builtins.str,
                 mac_address: _builtins.str,
                 name: _builtins.str,
                 operational_status: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str assigned_type: Interface management type (Equinix Managed or empty)
        :param _builtins.int id: Interface identifier
        :param _builtins.str ip_address: interface IP address
        :param _builtins.str mac_address: Interface MAC addres
        :param _builtins.str name: Name of an existing Equinix Network Edge device
        :param _builtins.str operational_status: Interface operational status (up or down)
        :param _builtins.str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
               * RESOURCE_UPGRADE_IN_PROGRESS
               * RESOURCE_UPGRADE_FAILED
        :param _builtins.str type: Interface type
        """
        pulumi.set(__self__, "assigned_type", assigned_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operational_status", operational_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> _builtins.str:
        """
        Interface management type (Equinix Managed or empty)
        """
        return pulumi.get(self, "assigned_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Interface identifier
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        interface IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Interface MAC addres
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> _builtins.str:
        """
        Interface operational status (up or down)
        """
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        * RESOURCE_UPGRADE_IN_PROGRESS
        * RESOURCE_UPGRADE_FAILED
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceSecondaryDeviceSshKeyResult(dict):
    def __init__(__self__, *,
                 key_name: _builtins.str,
                 username: _builtins.str):
        """
        :param _builtins.str key_name: Reference by name to previously provisioned public SSH key
        :param _builtins.str username: Username associated with given key
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> _builtins.str:
        """
        Reference by name to previously provisioned public SSH key
        """
        return pulumi.get(self, "key_name")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username associated with given key
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeviceSshKeyResult(dict):
    def __init__(__self__, *,
                 key_name: _builtins.str,
                 username: _builtins.str):
        """
        :param _builtins.str key_name: Reference by name to previously provisioned public SSH key
        :param _builtins.str username: Username associated with given key
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="keyName")
    def key_name(self) -> _builtins.str:
        """
        Reference by name to previously provisioned public SSH key
        """
        return pulumi.get(self, "key_name")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username associated with given key
        """
        return pulumi.get(self, "username")


