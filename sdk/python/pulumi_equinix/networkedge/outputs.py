# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AclTemplateDeviceDetail',
    'AclTemplateInboundRule',
    'DeviceClusterDetails',
    'DeviceClusterDetailsNode0',
    'DeviceClusterDetailsNode0VendorConfiguration',
    'DeviceClusterDetailsNode1',
    'DeviceClusterDetailsNode1VendorConfiguration',
    'DeviceInterface',
    'DeviceLinkDevice',
    'DeviceLinkLink',
    'DeviceSecondaryDevice',
    'DeviceSecondaryDeviceInterface',
    'DeviceSecondaryDeviceSshKey',
    'DeviceSshKey',
    'GetDeviceClusterDetailResult',
    'GetDeviceClusterDetailNode0Result',
    'GetDeviceClusterDetailNode0VendorConfigurationResult',
    'GetDeviceClusterDetailNode1Result',
    'GetDeviceClusterDetailNode1VendorConfigurationResult',
    'GetDeviceInterfaceResult',
    'GetDeviceSecondaryDeviceResult',
    'GetDeviceSecondaryDeviceInterfaceResult',
    'GetDeviceSecondaryDeviceSshKeyResult',
    'GetDeviceSshKeyResult',
]

@pulumi.output_type
class AclTemplateDeviceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclStatus":
            suggest = "acl_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTemplateDeviceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTemplateDeviceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTemplateDeviceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_status: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str acl_status: Device ACL provisioning status where template was applied. One of `PROVISIONING`,
               `PROVISIONED`.
        :param str name: ACL template name.
        :param str uuid: Device uuid.
        """
        AclTemplateDeviceDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acl_status=acl_status,
            name=name,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acl_status: Optional[str] = None,
             name: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if acl_status is None and 'aclStatus' in kwargs:
            acl_status = kwargs['aclStatus']

        if acl_status is not None:
            _setter("acl_status", acl_status)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="aclStatus")
    def acl_status(self) -> Optional[str]:
        """
        Device ACL provisioning status where template was applied. One of `PROVISIONING`,
        `PROVISIONED`.
        """
        return pulumi.get(self, "acl_status")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        ACL template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Device uuid.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class AclTemplateInboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPort":
            suggest = "dst_port"
        elif key == "srcPort":
            suggest = "src_port"
        elif key == "sequenceNumber":
            suggest = "sequence_number"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclTemplateInboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclTemplateInboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclTemplateInboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port: str,
                 protocol: str,
                 src_port: str,
                 description: Optional[str] = None,
                 sequence_number: Optional[int] = None,
                 source_type: Optional[str] = None,
                 subnet: Optional[str] = None,
                 subnets: Optional[Sequence[str]] = None):
        """
        :param str dst_port: Inbound traffic destination ports. Allowed values are a comma separated
               list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param Union[str, 'AclRuleProtocolType'] protocol: Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        :param str src_port: Inbound traffic source ports. Allowed values are a comma separated list
               of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        :param str description: Inbound rule description, up to 200 characters.
        :param str subnet: Inbound traffic source IP subnet in CIDR format.
        :param Sequence[str] subnets: Inbound traffic source IP subnets in CIDR format.
        """
        AclTemplateInboundRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dst_port=dst_port,
            protocol=protocol,
            src_port=src_port,
            description=description,
            sequence_number=sequence_number,
            source_type=source_type,
            subnet=subnet,
            subnets=subnets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dst_port: Optional[str] = None,
             protocol: Optional[str] = None,
             src_port: Optional[str] = None,
             description: Optional[str] = None,
             sequence_number: Optional[int] = None,
             source_type: Optional[str] = None,
             subnet: Optional[str] = None,
             subnets: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if dst_port is None and 'dstPort' in kwargs:
            dst_port = kwargs['dstPort']
        if dst_port is None:
            raise TypeError("Missing 'dst_port' argument")
        if protocol is None:
            raise TypeError("Missing 'protocol' argument")
        if src_port is None and 'srcPort' in kwargs:
            src_port = kwargs['srcPort']
        if src_port is None:
            raise TypeError("Missing 'src_port' argument")
        if sequence_number is None and 'sequenceNumber' in kwargs:
            sequence_number = kwargs['sequenceNumber']
        if source_type is None and 'sourceType' in kwargs:
            source_type = kwargs['sourceType']

        _setter("dst_port", dst_port)
        _setter("protocol", protocol)
        _setter("src_port", src_port)
        if description is not None:
            _setter("description", description)
        if sequence_number is not None:
            _setter("sequence_number", sequence_number)
        if source_type is not None:
            _setter("source_type", source_type)
        if subnet is not None:
            _setter("subnet", subnet)
        if subnets is not None:
            _setter("subnets", subnets)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        """
        Inbound traffic destination ports. Allowed values are a comma separated
        list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        """
        Inbound traffic source ports. Allowed values are a comma separated list
        of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Inbound rule description, up to 200 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> Optional[int]:
        return pulumi.get(self, "sequence_number")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        warnings.warn("""Source Type will not be returned""", DeprecationWarning)
        pulumi.log.warn("""source_type is deprecated: Source Type will not be returned""")

        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        Inbound traffic source IP subnet in CIDR format.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        """
        Inbound traffic source IP subnets in CIDR format.
        """
        warnings.warn("""Use Subnet instead""", DeprecationWarning)
        pulumi.log.warn("""subnets is deprecated: Use Subnet instead""")

        return pulumi.get(self, "subnets")


@pulumi.output_type
class DeviceClusterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "numOfNodes":
            suggest = "num_of_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_name: str,
                 node0: 'outputs.DeviceClusterDetailsNode0',
                 node1: 'outputs.DeviceClusterDetailsNode1',
                 cluster_id: Optional[str] = None,
                 num_of_nodes: Optional[int] = None):
        """
        :param str cluster_name: The name of the cluster device
        :param 'DeviceClusterDetailsNode0Args' node0: An object that has `node0` configuration.
               See Cluster Details - Nodes below for more details.
        :param 'DeviceClusterDetailsNode1Args' node1: An object that has `node1` configuration.
               See Cluster Details - Nodes below for more details.
        :param str cluster_id: The ID of the cluster.
        :param int num_of_nodes: The number of nodes in the cluster.
        """
        DeviceClusterDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_name=cluster_name,
            node0=node0,
            node1=node1,
            cluster_id=cluster_id,
            num_of_nodes=num_of_nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_name: Optional[str] = None,
             node0: Optional['outputs.DeviceClusterDetailsNode0'] = None,
             node1: Optional['outputs.DeviceClusterDetailsNode1'] = None,
             cluster_id: Optional[str] = None,
             num_of_nodes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if cluster_name is None and 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if cluster_name is None:
            raise TypeError("Missing 'cluster_name' argument")
        if node0 is None:
            raise TypeError("Missing 'node0' argument")
        if node1 is None:
            raise TypeError("Missing 'node1' argument")
        if cluster_id is None and 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if num_of_nodes is None and 'numOfNodes' in kwargs:
            num_of_nodes = kwargs['numOfNodes']

        _setter("cluster_name", cluster_name)
        _setter("node0", node0)
        _setter("node1", node1)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if num_of_nodes is not None:
            _setter("num_of_nodes", num_of_nodes)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        The name of the cluster device
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def node0(self) -> 'outputs.DeviceClusterDetailsNode0':
        """
        An object that has `node0` configuration.
        See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node0")

    @property
    @pulumi.getter
    def node1(self) -> 'outputs.DeviceClusterDetailsNode1':
        """
        An object that has `node1` configuration.
        See Cluster Details - Nodes below for more details.
        """
        return pulumi.get(self, "node1")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="numOfNodes")
    def num_of_nodes(self) -> Optional[int]:
        """
        The number of nodes in the cluster.
        """
        return pulumi.get(self, "num_of_nodes")


@pulumi.output_type
class DeviceClusterDetailsNode0(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode0. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode0.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode0.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_file_id: Optional[str] = None,
                 license_token: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vendor_configuration: Optional['outputs.DeviceClusterDetailsNode0VendorConfiguration'] = None):
        """
        :param str license_file_id: Identifier of a license file that will be applied on the device.
        :param str license_token: License Token applicable for some device types in BYOL licensing
               mode.
        :param str name: Device name.
        :param str uuid: Device unique identifier.
        :param 'DeviceClusterDetailsNode0VendorConfigurationArgs' vendor_configuration: Map of vendor specific configuration parameters for a device
               (controller1, activationKey, managementType, siteId, systemIpAddress)
               * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
               on a device (max one key).  See SSH Key below for more details.
        """
        DeviceClusterDetailsNode0._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[str] = None,
             license_token: Optional[str] = None,
             name: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configuration: Optional['outputs.DeviceClusterDetailsNode0VendorConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']

        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_token is not None:
            _setter("license_token", license_token)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[str]:
        """
        Identifier of a license file that will be applied on the device.
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[str]:
        """
        License Token applicable for some device types in BYOL licensing
        mode.
        """
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional['outputs.DeviceClusterDetailsNode0VendorConfiguration']:
        """
        Map of vendor specific configuration parameters for a device
        (controller1, activationKey, managementType, siteId, systemIpAddress)
        * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
        on a device (max one key).  See SSH Key below for more details.
        """
        return pulumi.get(self, "vendor_configuration")


@pulumi.output_type
class DeviceClusterDetailsNode0VendorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationKey":
            suggest = "activation_key"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "controllerFqdn":
            suggest = "controller_fqdn"
        elif key == "rootPassword":
            suggest = "root_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode0VendorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode0VendorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode0VendorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_key: Optional[str] = None,
                 admin_password: Optional[str] = None,
                 controller1: Optional[str] = None,
                 controller_fqdn: Optional[str] = None,
                 hostname: Optional[str] = None,
                 root_password: Optional[str] = None):
        """
        :param str activation_key: Activation key. This is required for Velocloud clusters.
        :param str admin_password: The administrative password of the device. You can use it to log in
               to the console. This field is not available for all device types.
        :param str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param str controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param str root_password: The CLI password of the device. This field is relevant only for the
               Velocloud SDWAN cluster.
        """
        DeviceClusterDetailsNode0VendorConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[str] = None,
             admin_password: Optional[str] = None,
             controller1: Optional[str] = None,
             controller_fqdn: Optional[str] = None,
             hostname: Optional[str] = None,
             root_password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']

        if activation_key is not None:
            _setter("activation_key", activation_key)
        if admin_password is not None:
            _setter("admin_password", admin_password)
        if controller1 is not None:
            _setter("controller1", controller1)
        if controller_fqdn is not None:
            _setter("controller_fqdn", controller_fqdn)
        if hostname is not None:
            _setter("hostname", hostname)
        if root_password is not None:
            _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[str]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        The administrative password of the device. You can use it to log in
        to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def controller1(self) -> Optional[str]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[str]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[str]:
        """
        The CLI password of the device. This field is relevant only for the
        Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")


@pulumi.output_type
class DeviceClusterDetailsNode1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_file_id: Optional[str] = None,
                 license_token: Optional[str] = None,
                 name: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vendor_configuration: Optional['outputs.DeviceClusterDetailsNode1VendorConfiguration'] = None):
        """
        :param str license_file_id: Identifier of a license file that will be applied on the device.
        :param str license_token: License Token applicable for some device types in BYOL licensing
               mode.
        :param str name: Device name.
        :param str uuid: Device unique identifier.
        :param 'DeviceClusterDetailsNode1VendorConfigurationArgs' vendor_configuration: Map of vendor specific configuration parameters for a device
               (controller1, activationKey, managementType, siteId, systemIpAddress)
               * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
               on a device (max one key).  See SSH Key below for more details.
        """
        DeviceClusterDetailsNode1._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[str] = None,
             license_token: Optional[str] = None,
             name: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configuration: Optional['outputs.DeviceClusterDetailsNode1VendorConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']

        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_token is not None:
            _setter("license_token", license_token)
        if name is not None:
            _setter("name", name)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[str]:
        """
        Identifier of a license file that will be applied on the device.
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[str]:
        """
        License Token applicable for some device types in BYOL licensing
        mode.
        """
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional['outputs.DeviceClusterDetailsNode1VendorConfiguration']:
        """
        Map of vendor specific configuration parameters for a device
        (controller1, activationKey, managementType, siteId, systemIpAddress)
        * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
        on a device (max one key).  See SSH Key below for more details.
        """
        return pulumi.get(self, "vendor_configuration")


@pulumi.output_type
class DeviceClusterDetailsNode1VendorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationKey":
            suggest = "activation_key"
        elif key == "adminPassword":
            suggest = "admin_password"
        elif key == "controllerFqdn":
            suggest = "controller_fqdn"
        elif key == "rootPassword":
            suggest = "root_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceClusterDetailsNode1VendorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceClusterDetailsNode1VendorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceClusterDetailsNode1VendorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_key: Optional[str] = None,
                 admin_password: Optional[str] = None,
                 controller1: Optional[str] = None,
                 controller_fqdn: Optional[str] = None,
                 hostname: Optional[str] = None,
                 root_password: Optional[str] = None):
        """
        :param str activation_key: Activation key. This is required for Velocloud clusters.
        :param str admin_password: The administrative password of the device. You can use it to log in
               to the console. This field is not available for all device types.
        :param str controller1: System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        :param str controller_fqdn: Controller fqdn. This is required for Velocloud clusters.
        :param str hostname: Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        :param str root_password: The CLI password of the device. This field is relevant only for the
               Velocloud SDWAN cluster.
        """
        DeviceClusterDetailsNode1VendorConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[str] = None,
             admin_password: Optional[str] = None,
             controller1: Optional[str] = None,
             controller_fqdn: Optional[str] = None,
             hostname: Optional[str] = None,
             root_password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']

        if activation_key is not None:
            _setter("activation_key", activation_key)
        if admin_password is not None:
            _setter("admin_password", admin_password)
        if controller1 is not None:
            _setter("controller1", controller1)
        if controller_fqdn is not None:
            _setter("controller_fqdn", controller_fqdn)
        if hostname is not None:
            _setter("hostname", hostname)
        if root_password is not None:
            _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> Optional[str]:
        """
        Activation key. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[str]:
        """
        The administrative password of the device. You can use it to log in
        to the console. This field is not available for all device types.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def controller1(self) -> Optional[str]:
        """
        System IP Address. Mandatory for the Fortinet SDWAN cluster device.
        """
        return pulumi.get(self, "controller1")

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> Optional[str]:
        """
        Controller fqdn. This is required for Velocloud clusters.
        """
        return pulumi.get(self, "controller_fqdn")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[str]:
        """
        The CLI password of the device. This field is relevant only for the
        Velocloud SDWAN cluster.
        """
        return pulumi.get(self, "root_password")


@pulumi.output_type
class DeviceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedType":
            suggest = "assigned_type"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "operationalStatus":
            suggest = "operational_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 name: Optional[str] = None,
                 operational_status: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str assigned_type: interface management type (Equinix Managed or empty).
        :param int id: interface identifier.
        :param str ip_address: interface IP address.
        :param str mac_address: interface MAC address.
        :param str name: Device name.
        :param str operational_status: interface operational status. One of `up`, `down`.
        :param str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param str type: interface type.
        """
        DeviceInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[str] = None,
             id: Optional[int] = None,
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             name: Optional[str] = None,
             operational_status: Optional[str] = None,
             status: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']

        if assigned_type is not None:
            _setter("assigned_type", assigned_type)
        if id is not None:
            _setter("id", id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if name is not None:
            _setter("name", name)
        if operational_status is not None:
            _setter("operational_status", operational_status)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[str]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[str]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        interface type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceLinkDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceId":
            suggest = "interface_id"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceLinkDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceLinkDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceLinkDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 asn: Optional[int] = None,
                 interface_id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str id: Device identifier.
        :param int asn: Device ASN number. Not required for self configured devices.
        :param int interface_id: Device network interface identifier to use for device link
               connection.
        :param str ip_address: IP address from device link subnet that was assigned to the device
        :param str status: device link provisioning status on a given device. One of `PROVISIONING`,
               `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        DeviceLinkDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            asn=asn,
            interface_id=interface_id,
            ip_address=ip_address,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             asn: Optional[int] = None,
             interface_id: Optional[int] = None,
             ip_address: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if interface_id is None and 'interfaceId' in kwargs:
            interface_id = kwargs['interfaceId']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']

        _setter("id", id)
        if asn is not None:
            _setter("asn", asn)
        if interface_id is not None:
            _setter("interface_id", interface_id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Device identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        """
        Device ASN number. Not required for self configured devices.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[int]:
        """
        Device network interface identifier to use for device link
        connection.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        IP address from device link subnet that was assigned to the device
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        device link provisioning status on a given device. One of `PROVISIONING`,
        `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DeviceLinkLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"
        elif key == "dstMetroCode":
            suggest = "dst_metro_code"
        elif key == "srcMetroCode":
            suggest = "src_metro_code"
        elif key == "throughputUnit":
            suggest = "throughput_unit"
        elif key == "dstZoneCode":
            suggest = "dst_zone_code"
        elif key == "srcZoneCode":
            suggest = "src_zone_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceLinkLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceLinkLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceLinkLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: str,
                 dst_metro_code: str,
                 src_metro_code: str,
                 throughput: str,
                 throughput_unit: str,
                 dst_zone_code: Optional[str] = None,
                 src_zone_code: Optional[str] = None):
        """
        :param str account_number: billing account number to be used for
               connection charges
        :param str dst_metro_code: connection destination metro code.
        :param str src_metro_code: connection source metro code.
        :param str throughput: connection throughput.
        :param str throughput_unit: connection throughput unit (Mbps or Gbps).
        :param str dst_zone_code: connection destination zone code is not required.
        :param str src_zone_code: connection source zone code is not required.
        """
        DeviceLinkLink._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
            dst_metro_code=dst_metro_code,
            src_metro_code=src_metro_code,
            throughput=throughput,
            throughput_unit=throughput_unit,
            dst_zone_code=dst_zone_code,
            src_zone_code=src_zone_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[str] = None,
             dst_metro_code: Optional[str] = None,
             src_metro_code: Optional[str] = None,
             throughput: Optional[str] = None,
             throughput_unit: Optional[str] = None,
             dst_zone_code: Optional[str] = None,
             src_zone_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if dst_metro_code is None and 'dstMetroCode' in kwargs:
            dst_metro_code = kwargs['dstMetroCode']
        if dst_metro_code is None:
            raise TypeError("Missing 'dst_metro_code' argument")
        if src_metro_code is None and 'srcMetroCode' in kwargs:
            src_metro_code = kwargs['srcMetroCode']
        if src_metro_code is None:
            raise TypeError("Missing 'src_metro_code' argument")
        if throughput is None:
            raise TypeError("Missing 'throughput' argument")
        if throughput_unit is None and 'throughputUnit' in kwargs:
            throughput_unit = kwargs['throughputUnit']
        if throughput_unit is None:
            raise TypeError("Missing 'throughput_unit' argument")
        if dst_zone_code is None and 'dstZoneCode' in kwargs:
            dst_zone_code = kwargs['dstZoneCode']
        if src_zone_code is None and 'srcZoneCode' in kwargs:
            src_zone_code = kwargs['srcZoneCode']

        _setter("account_number", account_number)
        _setter("dst_metro_code", dst_metro_code)
        _setter("src_metro_code", src_metro_code)
        _setter("throughput", throughput)
        _setter("throughput_unit", throughput_unit)
        if dst_zone_code is not None:
            _setter("dst_zone_code", dst_zone_code)
        if src_zone_code is not None:
            _setter("src_zone_code", src_zone_code)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> str:
        """
        billing account number to be used for
        connection charges
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="dstMetroCode")
    def dst_metro_code(self) -> str:
        """
        connection destination metro code.
        """
        return pulumi.get(self, "dst_metro_code")

    @property
    @pulumi.getter(name="srcMetroCode")
    def src_metro_code(self) -> str:
        """
        connection source metro code.
        """
        return pulumi.get(self, "src_metro_code")

    @property
    @pulumi.getter
    def throughput(self) -> str:
        """
        connection throughput.
        """
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter(name="throughputUnit")
    def throughput_unit(self) -> str:
        """
        connection throughput unit (Mbps or Gbps).
        """
        return pulumi.get(self, "throughput_unit")

    @property
    @pulumi.getter(name="dstZoneCode")
    def dst_zone_code(self) -> Optional[str]:
        """
        connection destination zone code is not required.
        """
        warnings.warn("""DestinationZoneCode is not required""", DeprecationWarning)
        pulumi.log.warn("""dst_zone_code is deprecated: DestinationZoneCode is not required""")

        return pulumi.get(self, "dst_zone_code")

    @property
    @pulumi.getter(name="srcZoneCode")
    def src_zone_code(self) -> Optional[str]:
        """
        connection source zone code is not required.
        """
        warnings.warn("""SourceZoneCode is not required""", DeprecationWarning)
        pulumi.log.warn("""src_zone_code is deprecated: SourceZoneCode is not required""")

        return pulumi.get(self, "src_zone_code")


@pulumi.output_type
class DeviceSecondaryDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"
        elif key == "metroCode":
            suggest = "metro_code"
        elif key == "aclTemplateId":
            suggest = "acl_template_id"
        elif key == "additionalBandwidth":
            suggest = "additional_bandwidth"
        elif key == "cloudInitFileId":
            suggest = "cloud_init_file_id"
        elif key == "licenseFile":
            suggest = "license_file"
        elif key == "licenseFileId":
            suggest = "license_file_id"
        elif key == "licenseStatus":
            suggest = "license_status"
        elif key == "licenseToken":
            suggest = "license_token"
        elif key == "mgmtAclTemplateUuid":
            suggest = "mgmt_acl_template_uuid"
        elif key == "redundancyType":
            suggest = "redundancy_type"
        elif key == "redundantId":
            suggest = "redundant_id"
        elif key == "sshIpAddress":
            suggest = "ssh_ip_address"
        elif key == "sshIpFqdn":
            suggest = "ssh_ip_fqdn"
        elif key == "sshKey":
            suggest = "ssh_key"
        elif key == "vendorConfiguration":
            suggest = "vendor_configuration"
        elif key == "wanInterfaceId":
            suggest = "wan_interface_id"
        elif key == "zoneCode":
            suggest = "zone_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: str,
                 metro_code: str,
                 name: str,
                 notifications: Sequence[str],
                 acl_template_id: Optional[str] = None,
                 additional_bandwidth: Optional[int] = None,
                 asn: Optional[int] = None,
                 cloud_init_file_id: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ibx: Optional[str] = None,
                 interfaces: Optional[Sequence['outputs.DeviceSecondaryDeviceInterface']] = None,
                 license_file: Optional[str] = None,
                 license_file_id: Optional[str] = None,
                 license_status: Optional[str] = None,
                 license_token: Optional[str] = None,
                 mgmt_acl_template_uuid: Optional[str] = None,
                 redundancy_type: Optional[str] = None,
                 redundant_id: Optional[str] = None,
                 region: Optional[str] = None,
                 ssh_ip_address: Optional[str] = None,
                 ssh_ip_fqdn: Optional[str] = None,
                 ssh_key: Optional['outputs.DeviceSecondaryDeviceSshKey'] = None,
                 status: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vendor_configuration: Optional[Mapping[str, str]] = None,
                 wan_interface_id: Optional[str] = None,
                 zone_code: Optional[str] = None):
        """
        :param str account_number: Billing account number for secondary device.
        :param str metro_code: Metro location of a secondary device.
        :param str name: Secondary device name.
        :param Sequence[str] notifications: List of email addresses that will receive notifications about
               secondary device.
        :param str acl_template_id: Identifier of a WAN interface ACL template that will be applied
               on a secondary device.
        :param int additional_bandwidth: Additional Internet bandwidth, in Mbps, for a secondary
               device.
        :param int asn: (Autonomous System Number) Unique identifier for a network on the internet.
        :param str cloud_init_file_id: Identifier of a cloud init file that will be applied on a secondary device.
        :param str hostname: Secondary device hostname.
        :param str ibx: Device location Equinix Business Exchange name.
        :param Sequence['DeviceSecondaryDeviceInterfaceArgs'] interfaces: List of device interfaces. See Interface Attribute below
               for more details.
        :param str license_file: Path to the license file that will be uploaded and applied on a
               secondary device. Applicable for some device types in BYOL licensing mode.
        :param str license_file_id: Identifier of a license file that will be applied on a secondary device.
        :param str license_status: Device license registration status. Possible values are `APPLYING_LICENSE`,
               `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        :param str license_token: License Token can be provided for some device types o the device.
        :param str mgmt_acl_template_uuid: Identifier of an MGMT interface ACL template that will be
               applied on a secondary device.
               * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
               device.
        :param str redundancy_type: Device redundancy type applicable for HA devices, either
               primary or secondary.
        :param str redundant_id: Unique identifier for a redundant device applicable for HA devices.
        :param str region: Device location region.
        :param str ssh_ip_address: IP address of SSH enabled interface on the device.
        :param str ssh_ip_fqdn: FQDN of SSH enabled interface on the device.
        :param str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param str uuid: Device unique identifier.
        :param Mapping[str, str] vendor_configuration: Key/Value pairs of vendor specific configuration parameters
               for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
               `systemIpAddress`.
        :param str zone_code: Device location zone code.
        """
        DeviceSecondaryDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
            metro_code=metro_code,
            name=name,
            notifications=notifications,
            acl_template_id=acl_template_id,
            additional_bandwidth=additional_bandwidth,
            asn=asn,
            cloud_init_file_id=cloud_init_file_id,
            hostname=hostname,
            ibx=ibx,
            interfaces=interfaces,
            license_file=license_file,
            license_file_id=license_file_id,
            license_status=license_status,
            license_token=license_token,
            mgmt_acl_template_uuid=mgmt_acl_template_uuid,
            redundancy_type=redundancy_type,
            redundant_id=redundant_id,
            region=region,
            ssh_ip_address=ssh_ip_address,
            ssh_ip_fqdn=ssh_ip_fqdn,
            ssh_key=ssh_key,
            status=status,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
            wan_interface_id=wan_interface_id,
            zone_code=zone_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[str] = None,
             metro_code: Optional[str] = None,
             name: Optional[str] = None,
             notifications: Optional[Sequence[str]] = None,
             acl_template_id: Optional[str] = None,
             additional_bandwidth: Optional[int] = None,
             asn: Optional[int] = None,
             cloud_init_file_id: Optional[str] = None,
             hostname: Optional[str] = None,
             ibx: Optional[str] = None,
             interfaces: Optional[Sequence['outputs.DeviceSecondaryDeviceInterface']] = None,
             license_file: Optional[str] = None,
             license_file_id: Optional[str] = None,
             license_status: Optional[str] = None,
             license_token: Optional[str] = None,
             mgmt_acl_template_uuid: Optional[str] = None,
             redundancy_type: Optional[str] = None,
             redundant_id: Optional[str] = None,
             region: Optional[str] = None,
             ssh_ip_address: Optional[str] = None,
             ssh_ip_fqdn: Optional[str] = None,
             ssh_key: Optional['outputs.DeviceSecondaryDeviceSshKey'] = None,
             status: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configuration: Optional[Mapping[str, str]] = None,
             wan_interface_id: Optional[str] = None,
             zone_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if notifications is None:
            raise TypeError("Missing 'notifications' argument")
        if acl_template_id is None and 'aclTemplateId' in kwargs:
            acl_template_id = kwargs['aclTemplateId']
        if additional_bandwidth is None and 'additionalBandwidth' in kwargs:
            additional_bandwidth = kwargs['additionalBandwidth']
        if cloud_init_file_id is None and 'cloudInitFileId' in kwargs:
            cloud_init_file_id = kwargs['cloudInitFileId']
        if license_file is None and 'licenseFile' in kwargs:
            license_file = kwargs['licenseFile']
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_status is None and 'licenseStatus' in kwargs:
            license_status = kwargs['licenseStatus']
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if mgmt_acl_template_uuid is None and 'mgmtAclTemplateUuid' in kwargs:
            mgmt_acl_template_uuid = kwargs['mgmtAclTemplateUuid']
        if redundancy_type is None and 'redundancyType' in kwargs:
            redundancy_type = kwargs['redundancyType']
        if redundant_id is None and 'redundantId' in kwargs:
            redundant_id = kwargs['redundantId']
        if ssh_ip_address is None and 'sshIpAddress' in kwargs:
            ssh_ip_address = kwargs['sshIpAddress']
        if ssh_ip_fqdn is None and 'sshIpFqdn' in kwargs:
            ssh_ip_fqdn = kwargs['sshIpFqdn']
        if ssh_key is None and 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']
        if wan_interface_id is None and 'wanInterfaceId' in kwargs:
            wan_interface_id = kwargs['wanInterfaceId']
        if zone_code is None and 'zoneCode' in kwargs:
            zone_code = kwargs['zoneCode']

        _setter("account_number", account_number)
        _setter("metro_code", metro_code)
        _setter("name", name)
        _setter("notifications", notifications)
        if acl_template_id is not None:
            _setter("acl_template_id", acl_template_id)
        if additional_bandwidth is not None:
            _setter("additional_bandwidth", additional_bandwidth)
        if asn is not None:
            _setter("asn", asn)
        if cloud_init_file_id is not None:
            _setter("cloud_init_file_id", cloud_init_file_id)
        if hostname is not None:
            _setter("hostname", hostname)
        if ibx is not None:
            _setter("ibx", ibx)
        if interfaces is not None:
            _setter("interfaces", interfaces)
        if license_file is not None:
            _setter("license_file", license_file)
        if license_file_id is not None:
            _setter("license_file_id", license_file_id)
        if license_status is not None:
            _setter("license_status", license_status)
        if license_token is not None:
            _setter("license_token", license_token)
        if mgmt_acl_template_uuid is not None:
            _setter("mgmt_acl_template_uuid", mgmt_acl_template_uuid)
        if redundancy_type is not None:
            _setter("redundancy_type", redundancy_type)
        if redundant_id is not None:
            _setter("redundant_id", redundant_id)
        if region is not None:
            _setter("region", region)
        if ssh_ip_address is not None:
            _setter("ssh_ip_address", ssh_ip_address)
        if ssh_ip_fqdn is not None:
            _setter("ssh_ip_fqdn", ssh_ip_fqdn)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if status is not None:
            _setter("status", status)
        if uuid is not None:
            _setter("uuid", uuid)
        if vendor_configuration is not None:
            _setter("vendor_configuration", vendor_configuration)
        if wan_interface_id is not None:
            _setter("wan_interface_id", wan_interface_id)
        if zone_code is not None:
            _setter("zone_code", zone_code)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> str:
        """
        Billing account number for secondary device.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Metro location of a secondary device.
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Secondary device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence[str]:
        """
        List of email addresses that will receive notifications about
        secondary device.
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="aclTemplateId")
    def acl_template_id(self) -> Optional[str]:
        """
        Identifier of a WAN interface ACL template that will be applied
        on a secondary device.
        """
        return pulumi.get(self, "acl_template_id")

    @property
    @pulumi.getter(name="additionalBandwidth")
    def additional_bandwidth(self) -> Optional[int]:
        """
        Additional Internet bandwidth, in Mbps, for a secondary
        device.
        """
        return pulumi.get(self, "additional_bandwidth")

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        """
        (Autonomous System Number) Unique identifier for a network on the internet.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="cloudInitFileId")
    def cloud_init_file_id(self) -> Optional[str]:
        """
        Identifier of a cloud init file that will be applied on a secondary device.
        """
        return pulumi.get(self, "cloud_init_file_id")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Secondary device hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        Device location Equinix Business Exchange name.
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.DeviceSecondaryDeviceInterface']]:
        """
        List of device interfaces. See Interface Attribute below
        for more details.
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="licenseFile")
    def license_file(self) -> Optional[str]:
        """
        Path to the license file that will be uploaded and applied on a
        secondary device. Applicable for some device types in BYOL licensing mode.
        """
        return pulumi.get(self, "license_file")

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> Optional[str]:
        """
        Identifier of a license file that will be applied on a secondary device.
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> Optional[str]:
        """
        Device license registration status. Possible values are `APPLYING_LICENSE`,
        `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
        """
        return pulumi.get(self, "license_status")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> Optional[str]:
        """
        License Token can be provided for some device types o the device.
        """
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter(name="mgmtAclTemplateUuid")
    def mgmt_acl_template_uuid(self) -> Optional[str]:
        """
        Identifier of an MGMT interface ACL template that will be
        applied on a secondary device.
        * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
        device.
        """
        return pulumi.get(self, "mgmt_acl_template_uuid")

    @property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> Optional[str]:
        """
        Device redundancy type applicable for HA devices, either
        primary or secondary.
        """
        return pulumi.get(self, "redundancy_type")

    @property
    @pulumi.getter(name="redundantId")
    def redundant_id(self) -> Optional[str]:
        """
        Unique identifier for a redundant device applicable for HA devices.
        """
        return pulumi.get(self, "redundant_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Device location region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sshIpAddress")
    def ssh_ip_address(self) -> Optional[str]:
        """
        IP address of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_address")

    @property
    @pulumi.getter(name="sshIpFqdn")
    def ssh_ip_fqdn(self) -> Optional[str]:
        """
        FQDN of SSH enabled interface on the device.
        """
        return pulumi.get(self, "ssh_ip_fqdn")

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional['outputs.DeviceSecondaryDeviceSshKey']:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Device unique identifier.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Optional[Mapping[str, str]]:
        """
        Key/Value pairs of vendor specific configuration parameters
        for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
        `systemIpAddress`.
        """
        return pulumi.get(self, "vendor_configuration")

    @property
    @pulumi.getter(name="wanInterfaceId")
    def wan_interface_id(self) -> Optional[str]:
        return pulumi.get(self, "wan_interface_id")

    @property
    @pulumi.getter(name="zoneCode")
    def zone_code(self) -> Optional[str]:
        """
        Device location zone code.
        """
        return pulumi.get(self, "zone_code")


@pulumi.output_type
class DeviceSecondaryDeviceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignedType":
            suggest = "assigned_type"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "operationalStatus":
            suggest = "operational_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDeviceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDeviceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDeviceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assigned_type: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 name: Optional[str] = None,
                 operational_status: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str assigned_type: interface management type (Equinix Managed or empty).
        :param int id: interface identifier.
        :param str ip_address: interface IP address.
        :param str mac_address: interface MAC address.
        :param str name: Device name.
        :param str operational_status: interface operational status. One of `up`, `down`.
        :param str status: interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        :param str type: interface type.
        """
        DeviceSecondaryDeviceInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[str] = None,
             id: Optional[int] = None,
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             name: Optional[str] = None,
             operational_status: Optional[str] = None,
             status: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']

        if assigned_type is not None:
            _setter("assigned_type", assigned_type)
        if id is not None:
            _setter("id", id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if name is not None:
            _setter("name", name)
        if operational_status is not None:
            _setter("operational_status", operational_status)
        if status is not None:
            _setter("status", status)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> Optional[str]:
        """
        interface management type (Equinix Managed or empty).
        """
        return pulumi.get(self, "assigned_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        interface identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        interface IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        interface MAC address.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[str]:
        """
        interface operational status. One of `up`, `down`.
        """
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        interface type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceSecondaryDeviceSshKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSecondaryDeviceSshKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSecondaryDeviceSshKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSecondaryDeviceSshKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: str,
                 username: str):
        """
        :param str username: username associated with given key.
        """
        DeviceSecondaryDeviceSshKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class DeviceSshKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceSshKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceSshKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceSshKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: str,
                 username: str):
        """
        :param str username: username associated with given key.
        """
        DeviceSshKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        username associated with given key.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeviceClusterDetailResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 node0s: Sequence['outputs.GetDeviceClusterDetailNode0Result'],
                 node1s: Sequence['outputs.GetDeviceClusterDetailNode1Result'],
                 num_of_nodes: int):
        """
        :param str cluster_id: The id of the cluster
        :param int num_of_nodes: The number of nodes in the cluster
        """
        GetDeviceClusterDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            node0s=node0s,
            node1s=node1s,
            num_of_nodes=num_of_nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: Optional[str] = None,
             cluster_name: Optional[str] = None,
             node0s: Optional[Sequence['outputs.GetDeviceClusterDetailNode0Result']] = None,
             node1s: Optional[Sequence['outputs.GetDeviceClusterDetailNode1Result']] = None,
             num_of_nodes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if cluster_id is None and 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if cluster_id is None:
            raise TypeError("Missing 'cluster_id' argument")
        if cluster_name is None and 'clusterName' in kwargs:
            cluster_name = kwargs['clusterName']
        if cluster_name is None:
            raise TypeError("Missing 'cluster_name' argument")
        if node0s is None:
            raise TypeError("Missing 'node0s' argument")
        if node1s is None:
            raise TypeError("Missing 'node1s' argument")
        if num_of_nodes is None and 'numOfNodes' in kwargs:
            num_of_nodes = kwargs['numOfNodes']
        if num_of_nodes is None:
            raise TypeError("Missing 'num_of_nodes' argument")

        _setter("cluster_id", cluster_id)
        _setter("cluster_name", cluster_name)
        _setter("node0s", node0s)
        _setter("node1s", node1s)
        _setter("num_of_nodes", num_of_nodes)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The id of the cluster
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def node0s(self) -> Sequence['outputs.GetDeviceClusterDetailNode0Result']:
        return pulumi.get(self, "node0s")

    @property
    @pulumi.getter
    def node1s(self) -> Sequence['outputs.GetDeviceClusterDetailNode1Result']:
        return pulumi.get(self, "node1s")

    @property
    @pulumi.getter(name="numOfNodes")
    def num_of_nodes(self) -> int:
        """
        The number of nodes in the cluster
        """
        return pulumi.get(self, "num_of_nodes")


@pulumi.output_type
class GetDeviceClusterDetailNode0Result(dict):
    def __init__(__self__, *,
                 license_file_id: str,
                 license_token: str,
                 name: str,
                 uuid: str,
                 vendor_configurations: Sequence['outputs.GetDeviceClusterDetailNode0VendorConfigurationResult']):
        """
        :param str license_file_id: Unique identifier of applied license file
        :param str name: Name of an existing Equinix Network Edge device
        :param str uuid: UUID of an existing Equinix Network Edge device
        """
        GetDeviceClusterDetailNode0Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configurations=vendor_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[str] = None,
             license_token: Optional[str] = None,
             name: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configurations: Optional[Sequence['outputs.GetDeviceClusterDetailNode0VendorConfigurationResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_file_id is None:
            raise TypeError("Missing 'license_file_id' argument")
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if license_token is None:
            raise TypeError("Missing 'license_token' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if vendor_configurations is None and 'vendorConfigurations' in kwargs:
            vendor_configurations = kwargs['vendorConfigurations']
        if vendor_configurations is None:
            raise TypeError("Missing 'vendor_configurations' argument")

        _setter("license_file_id", license_file_id)
        _setter("license_token", license_token)
        _setter("name", name)
        _setter("uuid", uuid)
        _setter("vendor_configurations", vendor_configurations)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> str:
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfigurations")
    def vendor_configurations(self) -> Sequence['outputs.GetDeviceClusterDetailNode0VendorConfigurationResult']:
        return pulumi.get(self, "vendor_configurations")


@pulumi.output_type
class GetDeviceClusterDetailNode0VendorConfigurationResult(dict):
    def __init__(__self__, *,
                 activation_key: str,
                 admin_password: str,
                 controller1: str,
                 controller_fqdn: str,
                 hostname: str,
                 root_password: str):
        GetDeviceClusterDetailNode0VendorConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[str] = None,
             admin_password: Optional[str] = None,
             controller1: Optional[str] = None,
             controller_fqdn: Optional[str] = None,
             hostname: Optional[str] = None,
             root_password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if activation_key is None:
            raise TypeError("Missing 'activation_key' argument")
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if admin_password is None:
            raise TypeError("Missing 'admin_password' argument")
        if controller1 is None:
            raise TypeError("Missing 'controller1' argument")
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if controller_fqdn is None:
            raise TypeError("Missing 'controller_fqdn' argument")
        if hostname is None:
            raise TypeError("Missing 'hostname' argument")
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']
        if root_password is None:
            raise TypeError("Missing 'root_password' argument")

        _setter("activation_key", activation_key)
        _setter("admin_password", admin_password)
        _setter("controller1", controller1)
        _setter("controller_fqdn", controller_fqdn)
        _setter("hostname", hostname)
        _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> str:
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def controller1(self) -> str:
        return pulumi.get(self, "controller1")

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> str:
        return pulumi.get(self, "controller_fqdn")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> str:
        return pulumi.get(self, "root_password")


@pulumi.output_type
class GetDeviceClusterDetailNode1Result(dict):
    def __init__(__self__, *,
                 license_file_id: str,
                 license_token: str,
                 name: str,
                 uuid: str,
                 vendor_configurations: Sequence['outputs.GetDeviceClusterDetailNode1VendorConfigurationResult']):
        """
        :param str license_file_id: Unique identifier of applied license file
        :param str name: Name of an existing Equinix Network Edge device
        :param str uuid: UUID of an existing Equinix Network Edge device
        """
        GetDeviceClusterDetailNode1Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            license_file_id=license_file_id,
            license_token=license_token,
            name=name,
            uuid=uuid,
            vendor_configurations=vendor_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             license_file_id: Optional[str] = None,
             license_token: Optional[str] = None,
             name: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configurations: Optional[Sequence['outputs.GetDeviceClusterDetailNode1VendorConfigurationResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_file_id is None:
            raise TypeError("Missing 'license_file_id' argument")
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if license_token is None:
            raise TypeError("Missing 'license_token' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if vendor_configurations is None and 'vendorConfigurations' in kwargs:
            vendor_configurations = kwargs['vendorConfigurations']
        if vendor_configurations is None:
            raise TypeError("Missing 'vendor_configurations' argument")

        _setter("license_file_id", license_file_id)
        _setter("license_token", license_token)
        _setter("name", name)
        _setter("uuid", uuid)
        _setter("vendor_configurations", vendor_configurations)

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> str:
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfigurations")
    def vendor_configurations(self) -> Sequence['outputs.GetDeviceClusterDetailNode1VendorConfigurationResult']:
        return pulumi.get(self, "vendor_configurations")


@pulumi.output_type
class GetDeviceClusterDetailNode1VendorConfigurationResult(dict):
    def __init__(__self__, *,
                 activation_key: str,
                 admin_password: str,
                 controller1: str,
                 controller_fqdn: str,
                 hostname: str,
                 root_password: str):
        GetDeviceClusterDetailNode1VendorConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            activation_key=activation_key,
            admin_password=admin_password,
            controller1=controller1,
            controller_fqdn=controller_fqdn,
            hostname=hostname,
            root_password=root_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             activation_key: Optional[str] = None,
             admin_password: Optional[str] = None,
             controller1: Optional[str] = None,
             controller_fqdn: Optional[str] = None,
             hostname: Optional[str] = None,
             root_password: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if activation_key is None and 'activationKey' in kwargs:
            activation_key = kwargs['activationKey']
        if activation_key is None:
            raise TypeError("Missing 'activation_key' argument")
        if admin_password is None and 'adminPassword' in kwargs:
            admin_password = kwargs['adminPassword']
        if admin_password is None:
            raise TypeError("Missing 'admin_password' argument")
        if controller1 is None:
            raise TypeError("Missing 'controller1' argument")
        if controller_fqdn is None and 'controllerFqdn' in kwargs:
            controller_fqdn = kwargs['controllerFqdn']
        if controller_fqdn is None:
            raise TypeError("Missing 'controller_fqdn' argument")
        if hostname is None:
            raise TypeError("Missing 'hostname' argument")
        if root_password is None and 'rootPassword' in kwargs:
            root_password = kwargs['rootPassword']
        if root_password is None:
            raise TypeError("Missing 'root_password' argument")

        _setter("activation_key", activation_key)
        _setter("admin_password", admin_password)
        _setter("controller1", controller1)
        _setter("controller_fqdn", controller_fqdn)
        _setter("hostname", hostname)
        _setter("root_password", root_password)

    @property
    @pulumi.getter(name="activationKey")
    def activation_key(self) -> str:
        return pulumi.get(self, "activation_key")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def controller1(self) -> str:
        return pulumi.get(self, "controller1")

    @property
    @pulumi.getter(name="controllerFqdn")
    def controller_fqdn(self) -> str:
        return pulumi.get(self, "controller_fqdn")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> str:
        return pulumi.get(self, "root_password")


@pulumi.output_type
class GetDeviceInterfaceResult(dict):
    def __init__(__self__, *,
                 assigned_type: str,
                 id: int,
                 ip_address: str,
                 mac_address: str,
                 name: str,
                 operational_status: str,
                 status: str,
                 type: str):
        """
        :param str name: Name of an existing Equinix Network Edge device
        :param str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
        """
        GetDeviceInterfaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[str] = None,
             id: Optional[int] = None,
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             name: Optional[str] = None,
             operational_status: Optional[str] = None,
             status: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if assigned_type is None:
            raise TypeError("Missing 'assigned_type' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if ip_address is None:
            raise TypeError("Missing 'ip_address' argument")
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if mac_address is None:
            raise TypeError("Missing 'mac_address' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']
        if operational_status is None:
            raise TypeError("Missing 'operational_status' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("assigned_type", assigned_type)
        _setter("id", id)
        _setter("ip_address", ip_address)
        _setter("mac_address", mac_address)
        _setter("name", name)
        _setter("operational_status", operational_status)
        _setter("status", status)
        _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> str:
        return pulumi.get(self, "assigned_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceSecondaryDeviceResult(dict):
    def __init__(__self__, *,
                 account_number: str,
                 acl_template_id: str,
                 additional_bandwidth: int,
                 asn: int,
                 cloud_init_file_id: str,
                 hostname: str,
                 ibx: str,
                 interfaces: Sequence['outputs.GetDeviceSecondaryDeviceInterfaceResult'],
                 license_file: str,
                 license_file_id: str,
                 license_status: str,
                 license_token: str,
                 metro_code: str,
                 mgmt_acl_template_uuid: str,
                 name: str,
                 notifications: Sequence[str],
                 redundancy_type: str,
                 redundant_id: str,
                 region: str,
                 ssh_ip_address: str,
                 ssh_ip_fqdn: str,
                 ssh_keys: Sequence['outputs.GetDeviceSecondaryDeviceSshKeyResult'],
                 status: str,
                 uuid: str,
                 vendor_configuration: Mapping[str, str],
                 wan_interface_id: str,
                 zone_code: str):
        """
        :param str acl_template_id: Unique identifier of applied ACL template
        :param int asn: Autonomous system number
        :param str ibx: Device location Equinix Business Exchange name
        :param Sequence['GetDeviceSecondaryDeviceInterfaceArgs'] interfaces: List of device interfaces
               * `interface.#.id` - interface identifier
               * `interface.#.name` - interface name
               * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
               * `interface.#.operational_status` - interface operational status (up or down)
               * `interface.#.mac_address` - interface MAC address
               * `interface.#.ip_address` - interface IP address
               * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
               * `interface.#.type` - interface type
        :param str license_file_id: Unique identifier of applied license file
        :param str license_status: Device license registration status
               * APPLYING_LICENSE
               * REGISTERED
               * APPLIED
               * WAITING_FOR_CLUSTER_SETUP
               * REGISTRATION_FAILED
               * NA
        :param str name: Name of an existing Equinix Network Edge device
        :param str redundancy_type: Device redundancy type applicable for HA devices, either
               primary or secondary
        :param str redundant_id: Unique identifier for a redundant device applicable for HA devices
        :param str region: Device location region
        :param str ssh_ip_address: IP address of SSH enabled interface on the device
        :param str ssh_ip_fqdn: FQDN of SSH enabled interface on the device
        :param str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
        :param str uuid: UUID of an existing Equinix Network Edge device
        :param str zone_code: Device location zone code
        """
        GetDeviceSecondaryDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
            acl_template_id=acl_template_id,
            additional_bandwidth=additional_bandwidth,
            asn=asn,
            cloud_init_file_id=cloud_init_file_id,
            hostname=hostname,
            ibx=ibx,
            interfaces=interfaces,
            license_file=license_file,
            license_file_id=license_file_id,
            license_status=license_status,
            license_token=license_token,
            metro_code=metro_code,
            mgmt_acl_template_uuid=mgmt_acl_template_uuid,
            name=name,
            notifications=notifications,
            redundancy_type=redundancy_type,
            redundant_id=redundant_id,
            region=region,
            ssh_ip_address=ssh_ip_address,
            ssh_ip_fqdn=ssh_ip_fqdn,
            ssh_keys=ssh_keys,
            status=status,
            uuid=uuid,
            vendor_configuration=vendor_configuration,
            wan_interface_id=wan_interface_id,
            zone_code=zone_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[str] = None,
             acl_template_id: Optional[str] = None,
             additional_bandwidth: Optional[int] = None,
             asn: Optional[int] = None,
             cloud_init_file_id: Optional[str] = None,
             hostname: Optional[str] = None,
             ibx: Optional[str] = None,
             interfaces: Optional[Sequence['outputs.GetDeviceSecondaryDeviceInterfaceResult']] = None,
             license_file: Optional[str] = None,
             license_file_id: Optional[str] = None,
             license_status: Optional[str] = None,
             license_token: Optional[str] = None,
             metro_code: Optional[str] = None,
             mgmt_acl_template_uuid: Optional[str] = None,
             name: Optional[str] = None,
             notifications: Optional[Sequence[str]] = None,
             redundancy_type: Optional[str] = None,
             redundant_id: Optional[str] = None,
             region: Optional[str] = None,
             ssh_ip_address: Optional[str] = None,
             ssh_ip_fqdn: Optional[str] = None,
             ssh_keys: Optional[Sequence['outputs.GetDeviceSecondaryDeviceSshKeyResult']] = None,
             status: Optional[str] = None,
             uuid: Optional[str] = None,
             vendor_configuration: Optional[Mapping[str, str]] = None,
             wan_interface_id: Optional[str] = None,
             zone_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if acl_template_id is None and 'aclTemplateId' in kwargs:
            acl_template_id = kwargs['aclTemplateId']
        if acl_template_id is None:
            raise TypeError("Missing 'acl_template_id' argument")
        if additional_bandwidth is None and 'additionalBandwidth' in kwargs:
            additional_bandwidth = kwargs['additionalBandwidth']
        if additional_bandwidth is None:
            raise TypeError("Missing 'additional_bandwidth' argument")
        if asn is None:
            raise TypeError("Missing 'asn' argument")
        if cloud_init_file_id is None and 'cloudInitFileId' in kwargs:
            cloud_init_file_id = kwargs['cloudInitFileId']
        if cloud_init_file_id is None:
            raise TypeError("Missing 'cloud_init_file_id' argument")
        if hostname is None:
            raise TypeError("Missing 'hostname' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if interfaces is None:
            raise TypeError("Missing 'interfaces' argument")
        if license_file is None and 'licenseFile' in kwargs:
            license_file = kwargs['licenseFile']
        if license_file is None:
            raise TypeError("Missing 'license_file' argument")
        if license_file_id is None and 'licenseFileId' in kwargs:
            license_file_id = kwargs['licenseFileId']
        if license_file_id is None:
            raise TypeError("Missing 'license_file_id' argument")
        if license_status is None and 'licenseStatus' in kwargs:
            license_status = kwargs['licenseStatus']
        if license_status is None:
            raise TypeError("Missing 'license_status' argument")
        if license_token is None and 'licenseToken' in kwargs:
            license_token = kwargs['licenseToken']
        if license_token is None:
            raise TypeError("Missing 'license_token' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if mgmt_acl_template_uuid is None and 'mgmtAclTemplateUuid' in kwargs:
            mgmt_acl_template_uuid = kwargs['mgmtAclTemplateUuid']
        if mgmt_acl_template_uuid is None:
            raise TypeError("Missing 'mgmt_acl_template_uuid' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if notifications is None:
            raise TypeError("Missing 'notifications' argument")
        if redundancy_type is None and 'redundancyType' in kwargs:
            redundancy_type = kwargs['redundancyType']
        if redundancy_type is None:
            raise TypeError("Missing 'redundancy_type' argument")
        if redundant_id is None and 'redundantId' in kwargs:
            redundant_id = kwargs['redundantId']
        if redundant_id is None:
            raise TypeError("Missing 'redundant_id' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")
        if ssh_ip_address is None and 'sshIpAddress' in kwargs:
            ssh_ip_address = kwargs['sshIpAddress']
        if ssh_ip_address is None:
            raise TypeError("Missing 'ssh_ip_address' argument")
        if ssh_ip_fqdn is None and 'sshIpFqdn' in kwargs:
            ssh_ip_fqdn = kwargs['sshIpFqdn']
        if ssh_ip_fqdn is None:
            raise TypeError("Missing 'ssh_ip_fqdn' argument")
        if ssh_keys is None and 'sshKeys' in kwargs:
            ssh_keys = kwargs['sshKeys']
        if ssh_keys is None:
            raise TypeError("Missing 'ssh_keys' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if vendor_configuration is None and 'vendorConfiguration' in kwargs:
            vendor_configuration = kwargs['vendorConfiguration']
        if vendor_configuration is None:
            raise TypeError("Missing 'vendor_configuration' argument")
        if wan_interface_id is None and 'wanInterfaceId' in kwargs:
            wan_interface_id = kwargs['wanInterfaceId']
        if wan_interface_id is None:
            raise TypeError("Missing 'wan_interface_id' argument")
        if zone_code is None and 'zoneCode' in kwargs:
            zone_code = kwargs['zoneCode']
        if zone_code is None:
            raise TypeError("Missing 'zone_code' argument")

        _setter("account_number", account_number)
        _setter("acl_template_id", acl_template_id)
        _setter("additional_bandwidth", additional_bandwidth)
        _setter("asn", asn)
        _setter("cloud_init_file_id", cloud_init_file_id)
        _setter("hostname", hostname)
        _setter("ibx", ibx)
        _setter("interfaces", interfaces)
        _setter("license_file", license_file)
        _setter("license_file_id", license_file_id)
        _setter("license_status", license_status)
        _setter("license_token", license_token)
        _setter("metro_code", metro_code)
        _setter("mgmt_acl_template_uuid", mgmt_acl_template_uuid)
        _setter("name", name)
        _setter("notifications", notifications)
        _setter("redundancy_type", redundancy_type)
        _setter("redundant_id", redundant_id)
        _setter("region", region)
        _setter("ssh_ip_address", ssh_ip_address)
        _setter("ssh_ip_fqdn", ssh_ip_fqdn)
        _setter("ssh_keys", ssh_keys)
        _setter("status", status)
        _setter("uuid", uuid)
        _setter("vendor_configuration", vendor_configuration)
        _setter("wan_interface_id", wan_interface_id)
        _setter("zone_code", zone_code)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> str:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="aclTemplateId")
    def acl_template_id(self) -> str:
        """
        Unique identifier of applied ACL template
        """
        return pulumi.get(self, "acl_template_id")

    @property
    @pulumi.getter(name="additionalBandwidth")
    def additional_bandwidth(self) -> int:
        return pulumi.get(self, "additional_bandwidth")

    @property
    @pulumi.getter
    def asn(self) -> int:
        """
        Autonomous system number
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="cloudInitFileId")
    def cloud_init_file_id(self) -> str:
        return pulumi.get(self, "cloud_init_file_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        Device location Equinix Business Exchange name
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetDeviceSecondaryDeviceInterfaceResult']:
        """
        List of device interfaces
        * `interface.#.id` - interface identifier
        * `interface.#.name` - interface name
        * `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)
        * `interface.#.operational_status` - interface operational status (up or down)
        * `interface.#.mac_address` - interface MAC address
        * `interface.#.ip_address` - interface IP address
        * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
        * `interface.#.type` - interface type
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="licenseFile")
    def license_file(self) -> str:
        return pulumi.get(self, "license_file")

    @property
    @pulumi.getter(name="licenseFileId")
    def license_file_id(self) -> str:
        """
        Unique identifier of applied license file
        """
        return pulumi.get(self, "license_file_id")

    @property
    @pulumi.getter(name="licenseStatus")
    def license_status(self) -> str:
        """
        Device license registration status
        * APPLYING_LICENSE
        * REGISTERED
        * APPLIED
        * WAITING_FOR_CLUSTER_SETUP
        * REGISTRATION_FAILED
        * NA
        """
        return pulumi.get(self, "license_status")

    @property
    @pulumi.getter(name="licenseToken")
    def license_token(self) -> str:
        return pulumi.get(self, "license_token")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="mgmtAclTemplateUuid")
    def mgmt_acl_template_uuid(self) -> str:
        return pulumi.get(self, "mgmt_acl_template_uuid")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence[str]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> str:
        """
        Device redundancy type applicable for HA devices, either
        primary or secondary
        """
        return pulumi.get(self, "redundancy_type")

    @property
    @pulumi.getter(name="redundantId")
    def redundant_id(self) -> str:
        """
        Unique identifier for a redundant device applicable for HA devices
        """
        return pulumi.get(self, "redundant_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Device location region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sshIpAddress")
    def ssh_ip_address(self) -> str:
        """
        IP address of SSH enabled interface on the device
        """
        return pulumi.get(self, "ssh_ip_address")

    @property
    @pulumi.getter(name="sshIpFqdn")
    def ssh_ip_fqdn(self) -> str:
        """
        FQDN of SSH enabled interface on the device
        """
        return pulumi.get(self, "ssh_ip_fqdn")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence['outputs.GetDeviceSecondaryDeviceSshKeyResult']:
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        UUID of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vendorConfiguration")
    def vendor_configuration(self) -> Mapping[str, str]:
        return pulumi.get(self, "vendor_configuration")

    @property
    @pulumi.getter(name="wanInterfaceId")
    def wan_interface_id(self) -> str:
        return pulumi.get(self, "wan_interface_id")

    @property
    @pulumi.getter(name="zoneCode")
    def zone_code(self) -> str:
        """
        Device location zone code
        """
        return pulumi.get(self, "zone_code")


@pulumi.output_type
class GetDeviceSecondaryDeviceInterfaceResult(dict):
    def __init__(__self__, *,
                 assigned_type: str,
                 id: int,
                 ip_address: str,
                 mac_address: str,
                 name: str,
                 operational_status: str,
                 status: str,
                 type: str):
        """
        :param str name: Name of an existing Equinix Network Edge device
        :param str status: Device provisioning status
               * INITIALIZING
               * PROVISIONING
               * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
               * WAITING_FOR_PRIMARY
               * WAITING_FOR_SECONDARY
               * WAITING_FOR_REPLICA_CLUSTER_NODES
               * CLUSTER_SETUP_IN_PROGRESS
               * FAILED
               * DEPROVISIONING
               * DEPROVISIONED
        """
        GetDeviceSecondaryDeviceInterfaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assigned_type=assigned_type,
            id=id,
            ip_address=ip_address,
            mac_address=mac_address,
            name=name,
            operational_status=operational_status,
            status=status,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assigned_type: Optional[str] = None,
             id: Optional[int] = None,
             ip_address: Optional[str] = None,
             mac_address: Optional[str] = None,
             name: Optional[str] = None,
             operational_status: Optional[str] = None,
             status: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if assigned_type is None and 'assignedType' in kwargs:
            assigned_type = kwargs['assignedType']
        if assigned_type is None:
            raise TypeError("Missing 'assigned_type' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if ip_address is None and 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if ip_address is None:
            raise TypeError("Missing 'ip_address' argument")
        if mac_address is None and 'macAddress' in kwargs:
            mac_address = kwargs['macAddress']
        if mac_address is None:
            raise TypeError("Missing 'mac_address' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']
        if operational_status is None:
            raise TypeError("Missing 'operational_status' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("assigned_type", assigned_type)
        _setter("id", id)
        _setter("ip_address", ip_address)
        _setter("mac_address", mac_address)
        _setter("name", name)
        _setter("operational_status", operational_status)
        _setter("status", status)
        _setter("type", type)

    @property
    @pulumi.getter(name="assignedType")
    def assigned_type(self) -> str:
        return pulumi.get(self, "assigned_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing Equinix Network Edge device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        return pulumi.get(self, "operational_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device provisioning status
        * INITIALIZING
        * PROVISIONING
        * PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)
        * WAITING_FOR_PRIMARY
        * WAITING_FOR_SECONDARY
        * WAITING_FOR_REPLICA_CLUSTER_NODES
        * CLUSTER_SETUP_IN_PROGRESS
        * FAILED
        * DEPROVISIONING
        * DEPROVISIONED
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeviceSecondaryDeviceSshKeyResult(dict):
    def __init__(__self__, *,
                 key_name: str,
                 username: str):
        GetDeviceSecondaryDeviceSshKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDeviceSshKeyResult(dict):
    def __init__(__self__, *,
                 key_name: str,
                 username: str):
        GetDeviceSshKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_name=key_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_name is None:
            raise TypeError("Missing 'key_name' argument")
        if username is None:
            raise TypeError("Missing 'username' argument")

        _setter("key_name", key_name)
        _setter("username", username)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


