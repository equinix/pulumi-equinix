# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterconnectionArgs', 'Interconnection']

@pulumi.input_type
class InterconnectionArgs:
    def __init__(__self__, *,
                 redundancy: pulumi.Input[str],
                 type: pulumi.Input[str],
                 contact_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 service_token_type: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Interconnection resource.
        :param pulumi.Input[str] redundancy: Connection redundancy - redundant or primary.
        :param pulumi.Input[str] type: Connection type - dedicated or shared.
        :param pulumi.Input[str] contact_email: The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        :param pulumi.Input[str] description: Description for the connection resource.
        :param pulumi.Input[str] facility: Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        :param pulumi.Input[str] metro: Metro where the connection will be created.
        :param pulumi.Input[str] mode: Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        :param pulumi.Input[str] name: Name of the connection resource
        :param pulumi.Input[str] organization_id: ID of the organization where the connection is scoped to.
        :param pulumi.Input[str] project_id: ID of the project where the connection is scoped to, must be set for.
        :param pulumi.Input[str] service_token_type: Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        :param pulumi.Input[str] speed: Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: String list of tags.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] vlans: Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vrfs: Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
               connection
        """
        pulumi.set(__self__, "redundancy", redundancy)
        pulumi.set(__self__, "type", type)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if facility is not None:
            warnings.warn("""Use metro instead of facility. For more information, read the migration guide.""", DeprecationWarning)
            pulumi.log.warn("""facility is deprecated: Use metro instead of facility. For more information, read the migration guide.""")
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if metro is not None:
            pulumi.set(__self__, "metro", metro)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_token_type is not None:
            pulumi.set(__self__, "service_token_type", service_token_type)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)
        if vrfs is not None:
            pulumi.set(__self__, "vrfs", vrfs)

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Input[str]:
        """
        Connection redundancy - redundant or primary.
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: pulumi.Input[str]):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Connection type - dedicated or shared.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the connection resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metro instead of facility. For more information, read the migration guide.""")
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def metro(self) -> Optional[pulumi.Input[str]]:
        """
        Metro where the connection will be created.
        """
        return pulumi.get(self, "metro")

    @metro.setter
    def metro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connection resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the organization where the connection is scoped to.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project where the connection is scoped to, must be set for.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceTokenType")
    def service_token_type(self) -> Optional[pulumi.Input[str]]:
        """
        Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        """
        return pulumi.get(self, "service_token_type")

    @service_token_type.setter
    def service_token_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_token_type", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        String list of tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "vlans", value)

    @property
    @pulumi.getter
    def vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
        connection
        """
        return pulumi.get(self, "vrfs")

    @vrfs.setter
    def vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vrfs", value)


@pulumi.input_type
class _InterconnectionState:
    def __init__(__self__, *,
                 authorization_code: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionPortArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[str]] = None,
                 service_token_type: Optional[pulumi.Input[str]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionServiceTokenArgs']]]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Interconnection resources.
        :param pulumi.Input[str] authorization_code: Fabric Authorization code to configure the Metal-Fabric Integration connection with Cloud Service Provider through Equinix Fabric with the fabric.Connection resource from the [Equinix Developer Portal](https://developer.equinix.com/dev-docs/fabric/getting-started/fabric-v4-apis/connect-metal-to-amazon-web-services).
        :param pulumi.Input[str] contact_email: The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        :param pulumi.Input[str] description: Description for the connection resource.
        :param pulumi.Input[str] facility: Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        :param pulumi.Input[str] metro: Metro where the connection will be created.
        :param pulumi.Input[str] mode: Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        :param pulumi.Input[str] name: Name of the connection resource
        :param pulumi.Input[str] organization_id: ID of the organization where the connection is scoped to.
        :param pulumi.Input[Sequence[pulumi.Input['InterconnectionPortArgs']]] ports: List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the metal.Interconnection datasource.
        :param pulumi.Input[str] project_id: ID of the project where the connection is scoped to, must be set for.
        :param pulumi.Input[str] redundancy: Connection redundancy - redundant or primary.
        :param pulumi.Input[str] service_token_type: Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        :param pulumi.Input[Sequence[pulumi.Input['InterconnectionServiceTokenArgs']]] service_tokens: List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the metal.Interconnection datasource.
        :param pulumi.Input[str] speed: Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        :param pulumi.Input[str] status: Status of the connection resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: String list of tags.
        :param pulumi.Input[str] token: (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
        :param pulumi.Input[str] type: Connection type - dedicated or shared.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] vlans: Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vrfs: Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
               connection
        """
        if authorization_code is not None:
            pulumi.set(__self__, "authorization_code", authorization_code)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if facility is not None:
            warnings.warn("""Use metro instead of facility. For more information, read the migration guide.""", DeprecationWarning)
            pulumi.log.warn("""facility is deprecated: Use metro instead of facility. For more information, read the migration guide.""")
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if metro is not None:
            pulumi.set(__self__, "metro", metro)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if service_token_type is not None:
            pulumi.set(__self__, "service_token_type", service_token_type)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            warnings.warn("""If your organization already has connection service tokens enabled, use `service_tokens` instead""", DeprecationWarning)
            pulumi.log.warn("""token is deprecated: If your organization already has connection service tokens enabled, use `service_tokens` instead""")
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)
        if vrfs is not None:
            pulumi.set(__self__, "vrfs", vrfs)

    @property
    @pulumi.getter(name="authorizationCode")
    def authorization_code(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric Authorization code to configure the Metal-Fabric Integration connection with Cloud Service Provider through Equinix Fabric with the fabric.Connection resource from the [Equinix Developer Portal](https://developer.equinix.com/dev-docs/fabric/getting-started/fabric-v4-apis/connect-metal-to-amazon-web-services).
        """
        return pulumi.get(self, "authorization_code")

    @authorization_code.setter
    def authorization_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_code", value)

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the connection resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metro instead of facility. For more information, read the migration guide.""")
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def metro(self) -> Optional[pulumi.Input[str]]:
        """
        Metro where the connection will be created.
        """
        return pulumi.get(self, "metro")

    @metro.setter
    def metro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connection resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the organization where the connection is scoped to.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionPortArgs']]]]:
        """
        List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the metal.Interconnection datasource.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project where the connection is scoped to, must be set for.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input[str]]:
        """
        Connection redundancy - redundant or primary.
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter(name="serviceTokenType")
    def service_token_type(self) -> Optional[pulumi.Input[str]]:
        """
        Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        """
        return pulumi.get(self, "service_token_type")

    @service_token_type.setter
    def service_token_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_token_type", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionServiceTokenArgs']]]]:
        """
        List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the metal.Interconnection datasource.
        """
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterconnectionServiceTokenArgs']]]]):
        pulumi.set(self, "service_tokens", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the connection resource.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        String list of tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""If your organization already has connection service tokens enabled, use `service_tokens` instead""")
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection type - dedicated or shared.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "vlans", value)

    @property
    @pulumi.getter
    def vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
        connection
        """
        return pulumi.get(self, "vrfs")

    @vrfs.setter
    def vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vrfs", value)


class Interconnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[str]] = None,
                 service_token_type: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).

        > Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.

        ## Example Usage
        ### example fabric billed token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        project_id = config.require("projectId")
        metro = config.get("metro")
        if metro is None:
            metro = "SV"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 200
        connection = equinix.metal.Interconnection("connection",
            name="fabric-port-to-metal",
            project_id=project_id,
            type="shared",
            redundancy="primary",
            metro=metro,
            speed=f"{speed_in_mbps}Mbps",
            service_token_type="z_side")
        pulumi.export("connectionStatus", connection.status)
        pulumi.export("connectionTokens", connection.service_tokens)
        ```
        ### example metal billed token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        project_id = config.require("projectId")
        metro = config.get("metro")
        if metro is None:
            metro = "SV"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 1000
        connection = equinix.metal.Interconnection("connection",
            name="metal-to-cloudprovider",
            project_id=project_id,
            type="shared",
            redundancy="primary",
            metro=metro,
            speed=f"{speed_in_mbps}Mbps",
            service_token_type="a_side")
        pulumi.export("connectionStatus", connection.status)
        pulumi.export("connectionTokens", connection.service_tokens)
        ```
        ### example shared metal fabric connection from fcr
        ```python
        import pulumi
        import pulumi_equinix as equinix

        example1 = equinix.metal.Vlan("example1",
            project_id=my_project_id,
            metro="SV")
        example = equinix.metal.Interconnection("example",
            name="tf-port-to-metal-legacy",
            project_id=my_project_id,
            metro="SV",
            redundancy="primary",
            type="shared_port_vlan",
            contact_email="username@example.com",
            vlans=[example1.vxlan])
        example_connection = equinix.fabric.Connection("exampleConnection",
            name="tf-NIMF-metal-2-aws-legacy",
            type="IP_VC",
            notifications=[{
                "type": equinix.fabric.NotificationsType.ALL,
                "emails": "sername@example.com",
            }],
            project={
                "project_id": fabric_project_id,
            },
            bandwidth=200,
            order={
                "purchase_order_number": "1-323292",
            },
            a_side={
                "access_point": {
                    "type": "CLOUD_ROUTER",
                    "router": {
                        "uuid": cloud_router_uuid,
                    },
                },
            },
            z_side={
                "access_point": {
                    "type": "METAL_NETWORK",
                    "authentication_key": example.authorization_code,
                },
            })
        ```
        ### example shared metal fabric connection to csp
        ```python
        import pulumi
        import pulumi_equinix as equinix

        zside = equinix.fabric.get_service_profiles_output(filter={
            "property": "/name",
            "operator": "=",
            "values": ["AWS Direct Connect"],
        })
        example1 = equinix.metal.Vlan("example1",
            project_id=my_project_id,
            metro="SV")
        example = equinix.metal.Interconnection("example",
            name="tf-port-to-metal-legacy",
            project_id=my_project_id,
            metro="SV",
            redundancy="primary",
            type="shared_port_vlan",
            contact_email="username@example.com",
            vlans=[example1.vxlan])
        example_connection = equinix.fabric.Connection("exampleConnection",
            name="tf-NIMF-metal-2-aws-legacy",
            type=equinix.fabric.ConnectionType.EVPL,
            notifications=[{
                "type": equinix.fabric.NotificationsType.ALL,
                "emails": "sername@example.com",
            }],
            project={
                "project_id": fabric_project_id,
            },
            bandwidth=200,
            order={
                "purchase_order_number": "1-323292",
            },
            a_side={
                "access_point": {
                    "type": "METAL_NETWORK",
                    "authentication_key": example.authorization_code,
                },
            },
            z_side={
                "access_point": {
                    "type": equinix.fabric.AccessPointType.SP,
                    "authentication_key": aws_account_id,
                    "seller_region": "us-west-1",
                    "profile": {
                        "type": equinix.fabric.ProfileType.L2_PROFILE,
                        "uuid": zside.id,
                    },
                    "location": {
                        "metro_code": equinix.Metro.SILICON_VALLEY,
                    },
                },
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] contact_email: The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        :param pulumi.Input[str] description: Description for the connection resource.
        :param pulumi.Input[str] facility: Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        :param pulumi.Input[str] metro: Metro where the connection will be created.
        :param pulumi.Input[str] mode: Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        :param pulumi.Input[str] name: Name of the connection resource
        :param pulumi.Input[str] organization_id: ID of the organization where the connection is scoped to.
        :param pulumi.Input[str] project_id: ID of the project where the connection is scoped to, must be set for.
        :param pulumi.Input[str] redundancy: Connection redundancy - redundant or primary.
        :param pulumi.Input[str] service_token_type: Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        :param pulumi.Input[str] speed: Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: String list of tags.
        :param pulumi.Input[str] type: Connection type - dedicated or shared.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] vlans: Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vrfs: Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
               connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterconnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).

        > Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.

        ## Example Usage
        ### example fabric billed token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        project_id = config.require("projectId")
        metro = config.get("metro")
        if metro is None:
            metro = "SV"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 200
        connection = equinix.metal.Interconnection("connection",
            name="fabric-port-to-metal",
            project_id=project_id,
            type="shared",
            redundancy="primary",
            metro=metro,
            speed=f"{speed_in_mbps}Mbps",
            service_token_type="z_side")
        pulumi.export("connectionStatus", connection.status)
        pulumi.export("connectionTokens", connection.service_tokens)
        ```
        ### example metal billed token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        project_id = config.require("projectId")
        metro = config.get("metro")
        if metro is None:
            metro = "SV"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 1000
        connection = equinix.metal.Interconnection("connection",
            name="metal-to-cloudprovider",
            project_id=project_id,
            type="shared",
            redundancy="primary",
            metro=metro,
            speed=f"{speed_in_mbps}Mbps",
            service_token_type="a_side")
        pulumi.export("connectionStatus", connection.status)
        pulumi.export("connectionTokens", connection.service_tokens)
        ```
        ### example shared metal fabric connection from fcr
        ```python
        import pulumi
        import pulumi_equinix as equinix

        example1 = equinix.metal.Vlan("example1",
            project_id=my_project_id,
            metro="SV")
        example = equinix.metal.Interconnection("example",
            name="tf-port-to-metal-legacy",
            project_id=my_project_id,
            metro="SV",
            redundancy="primary",
            type="shared_port_vlan",
            contact_email="username@example.com",
            vlans=[example1.vxlan])
        example_connection = equinix.fabric.Connection("exampleConnection",
            name="tf-NIMF-metal-2-aws-legacy",
            type="IP_VC",
            notifications=[{
                "type": equinix.fabric.NotificationsType.ALL,
                "emails": "sername@example.com",
            }],
            project={
                "project_id": fabric_project_id,
            },
            bandwidth=200,
            order={
                "purchase_order_number": "1-323292",
            },
            a_side={
                "access_point": {
                    "type": "CLOUD_ROUTER",
                    "router": {
                        "uuid": cloud_router_uuid,
                    },
                },
            },
            z_side={
                "access_point": {
                    "type": "METAL_NETWORK",
                    "authentication_key": example.authorization_code,
                },
            })
        ```
        ### example shared metal fabric connection to csp
        ```python
        import pulumi
        import pulumi_equinix as equinix

        zside = equinix.fabric.get_service_profiles_output(filter={
            "property": "/name",
            "operator": "=",
            "values": ["AWS Direct Connect"],
        })
        example1 = equinix.metal.Vlan("example1",
            project_id=my_project_id,
            metro="SV")
        example = equinix.metal.Interconnection("example",
            name="tf-port-to-metal-legacy",
            project_id=my_project_id,
            metro="SV",
            redundancy="primary",
            type="shared_port_vlan",
            contact_email="username@example.com",
            vlans=[example1.vxlan])
        example_connection = equinix.fabric.Connection("exampleConnection",
            name="tf-NIMF-metal-2-aws-legacy",
            type=equinix.fabric.ConnectionType.EVPL,
            notifications=[{
                "type": equinix.fabric.NotificationsType.ALL,
                "emails": "sername@example.com",
            }],
            project={
                "project_id": fabric_project_id,
            },
            bandwidth=200,
            order={
                "purchase_order_number": "1-323292",
            },
            a_side={
                "access_point": {
                    "type": "METAL_NETWORK",
                    "authentication_key": example.authorization_code,
                },
            },
            z_side={
                "access_point": {
                    "type": equinix.fabric.AccessPointType.SP,
                    "authentication_key": aws_account_id,
                    "seller_region": "us-west-1",
                    "profile": {
                        "type": equinix.fabric.ProfileType.L2_PROFILE,
                        "uuid": zside.id,
                    },
                    "location": {
                        "metro_code": equinix.Metro.SILICON_VALLEY,
                    },
                },
            })
        ```

        :param str resource_name: The name of the resource.
        :param InterconnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterconnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 metro: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 redundancy: Optional[pulumi.Input[str]] = None,
                 service_token_type: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterconnectionArgs.__new__(InterconnectionArgs)

            __props__.__dict__["contact_email"] = contact_email
            __props__.__dict__["description"] = description
            __props__.__dict__["facility"] = facility
            __props__.__dict__["metro"] = metro
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["project_id"] = project_id
            if redundancy is None and not opts.urn:
                raise TypeError("Missing required property 'redundancy'")
            __props__.__dict__["redundancy"] = redundancy
            __props__.__dict__["service_token_type"] = service_token_type
            __props__.__dict__["speed"] = speed
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vlans"] = vlans
            __props__.__dict__["vrfs"] = vrfs
            __props__.__dict__["authorization_code"] = None
            __props__.__dict__["ports"] = None
            __props__.__dict__["service_tokens"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["token"] = None
        super(Interconnection, __self__).__init__(
            'equinix:metal/interconnection:Interconnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorization_code: Optional[pulumi.Input[str]] = None,
            contact_email: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            facility: Optional[pulumi.Input[str]] = None,
            metro: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InterconnectionPortArgs', 'InterconnectionPortArgsDict']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            redundancy: Optional[pulumi.Input[str]] = None,
            service_token_type: Optional[pulumi.Input[str]] = None,
            service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InterconnectionServiceTokenArgs', 'InterconnectionServiceTokenArgsDict']]]]] = None,
            speed: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            token: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vlans: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Interconnection':
        """
        Get an existing Interconnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authorization_code: Fabric Authorization code to configure the Metal-Fabric Integration connection with Cloud Service Provider through Equinix Fabric with the fabric.Connection resource from the [Equinix Developer Portal](https://developer.equinix.com/dev-docs/fabric/getting-started/fabric-v4-apis/connect-metal-to-amazon-web-services).
        :param pulumi.Input[str] contact_email: The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        :param pulumi.Input[str] description: Description for the connection resource.
        :param pulumi.Input[str] facility: Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        :param pulumi.Input[str] metro: Metro where the connection will be created.
        :param pulumi.Input[str] mode: Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        :param pulumi.Input[str] name: Name of the connection resource
        :param pulumi.Input[str] organization_id: ID of the organization where the connection is scoped to.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InterconnectionPortArgs', 'InterconnectionPortArgsDict']]]] ports: List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the metal.Interconnection datasource.
        :param pulumi.Input[str] project_id: ID of the project where the connection is scoped to, must be set for.
        :param pulumi.Input[str] redundancy: Connection redundancy - redundant or primary.
        :param pulumi.Input[str] service_token_type: Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        :param pulumi.Input[Sequence[pulumi.Input[Union['InterconnectionServiceTokenArgs', 'InterconnectionServiceTokenArgsDict']]]] service_tokens: List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the metal.Interconnection datasource.
        :param pulumi.Input[str] speed: Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        :param pulumi.Input[str] status: Status of the connection resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: String list of tags.
        :param pulumi.Input[str] token: (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
        :param pulumi.Input[str] type: Connection type - dedicated or shared.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] vlans: Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vrfs: Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
               connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterconnectionState.__new__(_InterconnectionState)

        __props__.__dict__["authorization_code"] = authorization_code
        __props__.__dict__["contact_email"] = contact_email
        __props__.__dict__["description"] = description
        __props__.__dict__["facility"] = facility
        __props__.__dict__["metro"] = metro
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["ports"] = ports
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["redundancy"] = redundancy
        __props__.__dict__["service_token_type"] = service_token_type
        __props__.__dict__["service_tokens"] = service_tokens
        __props__.__dict__["speed"] = speed
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["token"] = token
        __props__.__dict__["type"] = type
        __props__.__dict__["vlans"] = vlans
        __props__.__dict__["vrfs"] = vrfs
        return Interconnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizationCode")
    def authorization_code(self) -> pulumi.Output[str]:
        """
        Fabric Authorization code to configure the Metal-Fabric Integration connection with Cloud Service Provider through Equinix Fabric with the fabric.Connection resource from the [Equinix Developer Portal](https://developer.equinix.com/dev-docs/fabric/getting-started/fabric-v4-apis/connect-metal-to-amazon-web-services).
        """
        return pulumi.get(self, "authorization_code")

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> pulumi.Output[str]:
        """
        The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.
        """
        return pulumi.get(self, "contact_email")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description for the connection resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use metro instead of facility. For more information, read the migration guide.""")
    def facility(self) -> pulumi.Output[str]:
        """
        Facility where the connection will be created. Use metro instead; read the facility to metro migration guide
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def metro(self) -> pulumi.Output[str]:
        """
        Metro where the connection will be created.
        """
        return pulumi.get(self, "metro")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the connection resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        ID of the organization where the connection is scoped to.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence['outputs.InterconnectionPort']]:
        """
        List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of port is described in documentation of the metal.Interconnection datasource.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the project where the connection is scoped to, must be set for.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Output[str]:
        """
        Connection redundancy - redundant or primary.
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter(name="serviceTokenType")
    def service_token_type(self) -> pulumi.Output[Optional[str]]:
        """
        Only used with shared connection. Type of service token to use for the connection, a_side or z_side
        """
        return pulumi.get(self, "service_token_type")

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> pulumi.Output[Sequence['outputs.InterconnectionServiceToken']]:
        """
        List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the metal.Interconnection datasource.
        """
        return pulumi.get(self, "service_tokens")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[str]:
        """
        Connection speed - Values must be in the format '<number>Mbps' or '<number>Gpbs', for example '100Mbps' or '50Gbps'. Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the connection resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        String list of tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    @_utilities.deprecated("""If your organization already has connection service tokens enabled, use `service_tokens` instead""")
    def token(self) -> pulumi.Output[str]:
        """
        (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the fabric.Connection resource or from the [Equinix Fabric Portal](https://fabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Connection type - dedicated or shared.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlans(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
        """
        return pulumi.get(self, "vlans")

    @property
    @pulumi.getter
    def vrfs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Only used with shared connection. VRFs to attach. Pass one VRF for Primary/Single connection and two VRFs for Redundant
        connection
        """
        return pulumi.get(self, "vrfs")

