# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOrganizationResult',
    'AwaitableGetOrganizationResult',
    'get_organization',
    'get_organization_output',
]

@pulumi.output_type
class GetOrganizationResult:
    """
    A collection of values returned by getOrganization.
    """
    def __init__(__self__, address=None, description=None, id=None, logo=None, name=None, organization_id=None, project_ids=None, twitter=None, website=None):
        if address and not isinstance(address, dict):
            raise TypeError("Expected argument 'address' to be a dict")
        pulumi.set(__self__, "address", address)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logo and not isinstance(logo, str):
            raise TypeError("Expected argument 'logo' to be a str")
        pulumi.set(__self__, "logo", logo)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if twitter and not isinstance(twitter, str):
            raise TypeError("Expected argument 'twitter' to be a str")
        pulumi.set(__self__, "twitter", twitter)
        if website and not isinstance(website, str):
            raise TypeError("Expected argument 'website' to be a str")
        pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter
    def address(self) -> 'outputs.GetOrganizationAddressResult':
        """
        Postal address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description string.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Empty string is the only valid value. Support for this field has been removed from the API""")
    def logo(self) -> _builtins.str:
        """
        (Deprecated) Logo URL.
        """
        return pulumi.get(self, "logo")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Sequence[_builtins.str]:
        """
        UUIDs of project resources which belong to this organization.
        """
        return pulumi.get(self, "project_ids")

    @_builtins.property
    @pulumi.getter
    def twitter(self) -> _builtins.str:
        """
        Twitter handle.
        """
        return pulumi.get(self, "twitter")

    @_builtins.property
    @pulumi.getter
    def website(self) -> _builtins.str:
        """
        Website link.
        """
        return pulumi.get(self, "website")


class AwaitableGetOrganizationResult(GetOrganizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationResult(
            address=self.address,
            description=self.description,
            id=self.id,
            logo=self.logo,
            name=self.name,
            organization_id=self.organization_id,
            project_ids=self.project_ids,
            twitter=self.twitter,
            website=self.website)


def get_organization(description: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     organization_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationResult:
    """
    Provides an Equinix Metal organization datasource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    # Fetch a organization data and show projects which belong to it
    test = equinix.metal.get_organization(organization_id=org_id)
    pulumi.export("projectsInTheOrg", test.project_ids)
    ```


    :param _builtins.str description: Description string.
    :param _builtins.str name: The organization name.
    :param _builtins.str organization_id: The UUID of the organization resource.
           
           Exactly one of `name` or `organization_id` must be given.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:metal/getOrganization:getOrganization', __args__, opts=opts, typ=GetOrganizationResult).value

    return AwaitableGetOrganizationResult(
        address=pulumi.get(__ret__, 'address'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        logo=pulumi.get(__ret__, 'logo'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        twitter=pulumi.get(__ret__, 'twitter'),
        website=pulumi.get(__ret__, 'website'))
def get_organization_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationResult]:
    """
    Provides an Equinix Metal organization datasource.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    # Fetch a organization data and show projects which belong to it
    test = equinix.metal.get_organization(organization_id=org_id)
    pulumi.export("projectsInTheOrg", test.project_ids)
    ```


    :param _builtins.str description: Description string.
    :param _builtins.str name: The organization name.
    :param _builtins.str organization_id: The UUID of the organization resource.
           
           Exactly one of `name` or `organization_id` must be given.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:metal/getOrganization:getOrganization', __args__, opts=opts, typ=GetOrganizationResult)
    return __ret__.apply(lambda __response__: GetOrganizationResult(
        address=pulumi.get(__response__, 'address'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        logo=pulumi.get(__response__, 'logo'),
        name=pulumi.get(__response__, 'name'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        project_ids=pulumi.get(__response__, 'project_ids'),
        twitter=pulumi.get(__response__, 'twitter'),
        website=pulumi.get(__response__, 'website')))
