# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationArgs', 'Organization']

@pulumi.input_type
class OrganizationArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input['OrganizationAddressArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 logo: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 twitter: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Organization resource.
        :param pulumi.Input['OrganizationAddressArgs'] address: An object that has the address information. See Address below for more details.
        :param pulumi.Input[_builtins.str] description: Description string.
        :param pulumi.Input[_builtins.str] logo: Logo URL.
        :param pulumi.Input[_builtins.str] name: The name of the Organization.
        :param pulumi.Input[_builtins.str] twitter: Twitter handle.
        :param pulumi.Input[_builtins.str] website: Website link.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if logo is not None:
            warnings.warn("""The default (empty string) is the only valid value. Support for this field has been removed from the API""", DeprecationWarning)
            pulumi.log.warn("""logo is deprecated: The default (empty string) is the only valid value. Support for this field has been removed from the API""")
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if twitter is not None:
            pulumi.set(__self__, "twitter", twitter)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input['OrganizationAddressArgs']]:
        """
        An object that has the address information. See Address below for more details.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input['OrganizationAddressArgs']]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description string.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The default (empty string) is the only valid value. Support for this field has been removed from the API""")
    def logo(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Logo URL.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def twitter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Twitter handle.
        """
        return pulumi.get(self, "twitter")

    @twitter.setter
    def twitter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "twitter", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Website link.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _OrganizationState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input['OrganizationAddressArgs']] = None,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 logo: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 twitter: Optional[pulumi.Input[_builtins.str]] = None,
                 updated: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Organization resources.
        :param pulumi.Input['OrganizationAddressArgs'] address: An object that has the address information. See Address below for more details.
        :param pulumi.Input[_builtins.str] created: The timestamp for when the organization was created.
        :param pulumi.Input[_builtins.str] description: Description string.
        :param pulumi.Input[_builtins.str] logo: Logo URL.
        :param pulumi.Input[_builtins.str] name: The name of the Organization.
        :param pulumi.Input[_builtins.str] twitter: Twitter handle.
        :param pulumi.Input[_builtins.str] updated: The timestamp for the last time the organization was updated.
        :param pulumi.Input[_builtins.str] website: Website link.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if logo is not None:
            warnings.warn("""The default (empty string) is the only valid value. Support for this field has been removed from the API""", DeprecationWarning)
            pulumi.log.warn("""logo is deprecated: The default (empty string) is the only valid value. Support for this field has been removed from the API""")
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if twitter is not None:
            pulumi.set(__self__, "twitter", twitter)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input['OrganizationAddressArgs']]:
        """
        An object that has the address information. See Address below for more details.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input['OrganizationAddressArgs']]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp for when the organization was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description string.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The default (empty string) is the only valid value. Support for this field has been removed from the API""")
    def logo(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Logo URL.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logo", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def twitter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Twitter handle.
        """
        return pulumi.get(self, "twitter")

    @twitter.setter
    def twitter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "twitter", value)

    @_builtins.property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp for the last time the organization was updated.
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated", value)

    @_builtins.property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Website link.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website", value)


@pulumi.type_token("equinix:metal/organization:Organization")
class Organization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[Union['OrganizationAddressArgs', 'OrganizationAddressArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 logo: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 twitter: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Provides a resource to manage organization resource in Equinix Metal.

        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        tf_organization1 = equinix.metal.Organization("tfOrganization1",
            name="foobar",
            description="quux")
        ```

        ## Import

        This resource can be imported using an existing organization ID:

        ```sh
        $ pulumi import equinix:metal/organization:Organization equinix_metal_organization {existing_organization_id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OrganizationAddressArgs', 'OrganizationAddressArgsDict']] address: An object that has the address information. See Address below for more details.
        :param pulumi.Input[_builtins.str] description: Description string.
        :param pulumi.Input[_builtins.str] logo: Logo URL.
        :param pulumi.Input[_builtins.str] name: The name of the Organization.
        :param pulumi.Input[_builtins.str] twitter: Twitter handle.
        :param pulumi.Input[_builtins.str] website: Website link.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OrganizationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage organization resource in Equinix Metal.

        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        tf_organization1 = equinix.metal.Organization("tfOrganization1",
            name="foobar",
            description="quux")
        ```

        ## Import

        This resource can be imported using an existing organization ID:

        ```sh
        $ pulumi import equinix:metal/organization:Organization equinix_metal_organization {existing_organization_id}
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[Union['OrganizationAddressArgs', 'OrganizationAddressArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 logo: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 twitter: Optional[pulumi.Input[_builtins.str]] = None,
                 website: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationArgs.__new__(OrganizationArgs)

            __props__.__dict__["address"] = address
            __props__.__dict__["description"] = description
            __props__.__dict__["logo"] = logo
            __props__.__dict__["name"] = name
            __props__.__dict__["twitter"] = twitter
            __props__.__dict__["website"] = website
            __props__.__dict__["created"] = None
            __props__.__dict__["updated"] = None
        super(Organization, __self__).__init__(
            'equinix:metal/organization:Organization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[Union['OrganizationAddressArgs', 'OrganizationAddressArgsDict']]] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            logo: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            twitter: Optional[pulumi.Input[_builtins.str]] = None,
            updated: Optional[pulumi.Input[_builtins.str]] = None,
            website: Optional[pulumi.Input[_builtins.str]] = None) -> 'Organization':
        """
        Get an existing Organization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OrganizationAddressArgs', 'OrganizationAddressArgsDict']] address: An object that has the address information. See Address below for more details.
        :param pulumi.Input[_builtins.str] created: The timestamp for when the organization was created.
        :param pulumi.Input[_builtins.str] description: Description string.
        :param pulumi.Input[_builtins.str] logo: Logo URL.
        :param pulumi.Input[_builtins.str] name: The name of the Organization.
        :param pulumi.Input[_builtins.str] twitter: Twitter handle.
        :param pulumi.Input[_builtins.str] updated: The timestamp for the last time the organization was updated.
        :param pulumi.Input[_builtins.str] website: Website link.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationState.__new__(_OrganizationState)

        __props__.__dict__["address"] = address
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["logo"] = logo
        __props__.__dict__["name"] = name
        __props__.__dict__["twitter"] = twitter
        __props__.__dict__["updated"] = updated
        __props__.__dict__["website"] = website
        return Organization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional['outputs.OrganizationAddress']]:
        """
        An object that has the address information. See Address below for more details.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp for when the organization was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Description string.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The default (empty string) is the only valid value. Support for this field has been removed from the API""")
    def logo(self) -> pulumi.Output[_builtins.str]:
        """
        Logo URL.
        """
        return pulumi.get(self, "logo")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Organization.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def twitter(self) -> pulumi.Output[_builtins.str]:
        """
        Twitter handle.
        """
        return pulumi.get(self, "twitter")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp for the last time the organization was updated.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def website(self) -> pulumi.Output[_builtins.str]:
        """
        Website link.
        """
        return pulumi.get(self, "website")

