# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPlansResult',
    'AwaitableGetPlansResult',
    'get_plans',
    'get_plans_output',
]

@pulumi.output_type
class GetPlansResult:
    """
    A collection of values returned by getPlans.
    """
    def __init__(__self__, filters=None, id=None, plans=None, sorts=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plans and not isinstance(plans, list):
            raise TypeError("Expected argument 'plans' to be a list")
        pulumi.set(__self__, "plans", plans)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPlansFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetPlansPlanResult']:
        return pulumi.get(self, "plans")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetPlansSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetPlansResult(GetPlansResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlansResult(
            filters=self.filters,
            id=self.id,
            plans=self.plans,
            sorts=self.sorts)


def get_plans(filters: Optional[Sequence[pulumi.InputType['GetPlansFilterArgs']]] = None,
              sorts: Optional[Sequence[pulumi.InputType['GetPlansSortArgs']]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlansResult:
    """
    Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(
            attribute="pricing_hour",
            direction="asc",
        )],
        filters=[
            equinix.metal.GetPlansFilterArgs(
                attribute="pricing_hour",
                values=["2.5"],
                match_by="less_than",
            ),
            equinix.metal.GetPlansFilterArgs(
                attribute="available_in_metros",
                values=[
                    "da",
                    "sv",
                ],
            ),
        ])
    pulumi.export("plans", example.plans)
    ```

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example = equinix.metal.get_plans(filters=[
        equinix.metal.GetPlansFilterArgs(
            attribute="class",
            values=["large"],
            match_by="substring",
        ),
        equinix.metal.GetPlansFilterArgs(
            attribute="deployment_types",
            values=["spot_market"],
        ),
        equinix.metal.GetPlansFilterArgs(
            attribute="available_in_metros",
            values=[
                "da",
                "sv",
            ],
            all=True,
        ),
    ])
    pulumi.export("plans", example.plans)
    ```
    ### Ignoring Changes to Plans/Metro

    Preserve deployed device plan, facility and metro when creating a new execution plan.

    As described in the `data-resource-behavior` feature as shown in the example below.

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example_plans = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(
            attribute="pricing_hour",
            direction="asc",
        )],
        filters=[
            equinix.metal.GetPlansFilterArgs(
                attribute="name",
                values=[
                    "c3.small.x86",
                    "c3.medium.x86",
                    "m3.large.x86",
                ],
            ),
            equinix.metal.GetPlansFilterArgs(
                attribute="available_in_metros",
                values=["sv"],
            ),
        ])
    # This equinix_metal_device will use the first returned plan and the first metro in which that plan is available
    # It will ignore future changes on plan and metro
    example_device = equinix.metal.Device("exampleDevice",
        hostname="example",
        plan=example_plans.plans[0].name.apply(lambda x: equinix.metal/plan.Plan(x)),
        metro=example_plans.plans[0].available_in_metros[0],
        operating_system="ubuntu_20_04",
        billing_cycle="hourly",
        project_id=var["project_id"])
    ```

    If your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.

    ```python
    import pulumi
    import pulumi_equinix as equinix

    config = pulumi.Config()
    ignore_plans_metros_changes = config.get_bool("ignorePlansMetrosChanges")
    if ignore_plans_metros_changes is None:
        ignore_plans_metros_changes = False
    example_plans = equinix.metal.get_plans()
    # required device arguments
    example_device = equinix.metal.Device("exampleDevice")
    ```


    :param Sequence[pulumi.InputType['GetPlansFilterArgs']] filters: One or more attribute/values pairs to filter off of
    :param Sequence[pulumi.InputType['GetPlansSortArgs']] sorts: One or more attribute/direction pairs on which to sort results. If multiple
           sorts are provided, they will be applied in order
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:metal/getPlans:getPlans', __args__, opts=opts, typ=GetPlansResult).value

    return AwaitableGetPlansResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        plans=pulumi.get(__ret__, 'plans'),
        sorts=pulumi.get(__ret__, 'sorts'))


@_utilities.lift_output_func(get_plans)
def get_plans_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPlansFilterArgs']]]]] = None,
                     sorts: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPlansSortArgs']]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPlansResult]:
    """
    Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(
            attribute="pricing_hour",
            direction="asc",
        )],
        filters=[
            equinix.metal.GetPlansFilterArgs(
                attribute="pricing_hour",
                values=["2.5"],
                match_by="less_than",
            ),
            equinix.metal.GetPlansFilterArgs(
                attribute="available_in_metros",
                values=[
                    "da",
                    "sv",
                ],
            ),
        ])
    pulumi.export("plans", example.plans)
    ```

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example = equinix.metal.get_plans(filters=[
        equinix.metal.GetPlansFilterArgs(
            attribute="class",
            values=["large"],
            match_by="substring",
        ),
        equinix.metal.GetPlansFilterArgs(
            attribute="deployment_types",
            values=["spot_market"],
        ),
        equinix.metal.GetPlansFilterArgs(
            attribute="available_in_metros",
            values=[
                "da",
                "sv",
            ],
            all=True,
        ),
    ])
    pulumi.export("plans", example.plans)
    ```
    ### Ignoring Changes to Plans/Metro

    Preserve deployed device plan, facility and metro when creating a new execution plan.

    As described in the `data-resource-behavior` feature as shown in the example below.

    ```python
    import pulumi
    import pulumi_equinix as equinix

    example_plans = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(
            attribute="pricing_hour",
            direction="asc",
        )],
        filters=[
            equinix.metal.GetPlansFilterArgs(
                attribute="name",
                values=[
                    "c3.small.x86",
                    "c3.medium.x86",
                    "m3.large.x86",
                ],
            ),
            equinix.metal.GetPlansFilterArgs(
                attribute="available_in_metros",
                values=["sv"],
            ),
        ])
    # This equinix_metal_device will use the first returned plan and the first metro in which that plan is available
    # It will ignore future changes on plan and metro
    example_device = equinix.metal.Device("exampleDevice",
        hostname="example",
        plan=example_plans.plans[0].name.apply(lambda x: equinix.metal/plan.Plan(x)),
        metro=example_plans.plans[0].available_in_metros[0],
        operating_system="ubuntu_20_04",
        billing_cycle="hourly",
        project_id=var["project_id"])
    ```

    If your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.

    ```python
    import pulumi
    import pulumi_equinix as equinix

    config = pulumi.Config()
    ignore_plans_metros_changes = config.get_bool("ignorePlansMetrosChanges")
    if ignore_plans_metros_changes is None:
        ignore_plans_metros_changes = False
    example_plans = equinix.metal.get_plans()
    # required device arguments
    example_device = equinix.metal.Device("exampleDevice")
    ```


    :param Sequence[pulumi.InputType['GetPlansFilterArgs']] filters: One or more attribute/values pairs to filter off of
    :param Sequence[pulumi.InputType['GetPlansSortArgs']] sorts: One or more attribute/direction pairs on which to sort results. If multiple
           sorts are provided, they will be applied in order
    """
    ...
