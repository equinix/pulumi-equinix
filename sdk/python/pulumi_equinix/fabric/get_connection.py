# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    """
    A collection of values returned by getConnection.
    """
    def __init__(__self__, a_side=None, account=None, additional_info=None, bandwidth=None, change_log=None, description=None, direction=None, href=None, id=None, is_remote=None, name=None, notifications=None, operation=None, order=None, project=None, redundancy=None, state=None, type=None, uuid=None, z_side=None):
        if a_side and not isinstance(a_side, dict):
            raise TypeError("Expected argument 'a_side' to be a dict")
        pulumi.set(__self__, "a_side", a_side)
        if account and not isinstance(account, dict):
            raise TypeError("Expected argument 'account' to be a dict")
        pulumi.set(__self__, "account", account)
        if additional_info and not isinstance(additional_info, list):
            raise TypeError("Expected argument 'additional_info' to be a list")
        pulumi.set(__self__, "additional_info", additional_info)
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_remote and not isinstance(is_remote, bool):
            raise TypeError("Expected argument 'is_remote' to be a bool")
        pulumi.set(__self__, "is_remote", is_remote)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if operation and not isinstance(operation, dict):
            raise TypeError("Expected argument 'operation' to be a dict")
        pulumi.set(__self__, "operation", operation)
        if order and not isinstance(order, dict):
            raise TypeError("Expected argument 'order' to be a dict")
        pulumi.set(__self__, "order", order)
        if project and not isinstance(project, dict):
            raise TypeError("Expected argument 'project' to be a dict")
        pulumi.set(__self__, "project", project)
        if redundancy and not isinstance(redundancy, dict):
            raise TypeError("Expected argument 'redundancy' to be a dict")
        pulumi.set(__self__, "redundancy", redundancy)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if z_side and not isinstance(z_side, dict):
            raise TypeError("Expected argument 'z_side' to be a dict")
        pulumi.set(__self__, "z_side", z_side)

    @property
    @pulumi.getter(name="aSide")
    def a_side(self) -> 'outputs.GetConnectionASideResult':
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_side")

    @property
    @pulumi.getter
    def account(self) -> 'outputs.GetConnectionAccountResult':
        """
        Customer account information that is associated with this connection
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.GetConnectionAdditionalInfoResult']:
        """
        Connection additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetConnectionChangeLogResult':
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided connection description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Connection URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> bool:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetConnectionNotificationResult']:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def operation(self) -> 'outputs.GetConnectionOperationResult':
        """
        Connection specific operational data
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def order(self) -> 'outputs.GetConnectionOrderResult':
        """
        Order related to this connection information
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def project(self) -> Optional['outputs.GetConnectionProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def redundancy(self) -> 'outputs.GetConnectionRedundancyResult':
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Connection overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, IP*VC, ACCESS*EPL_VC
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned connection identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="zSide")
    def z_side(self) -> 'outputs.GetConnectionZSideResult':
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_side")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            a_side=self.a_side,
            account=self.account,
            additional_info=self.additional_info,
            bandwidth=self.bandwidth,
            change_log=self.change_log,
            description=self.description,
            direction=self.direction,
            href=self.href,
            id=self.id,
            is_remote=self.is_remote,
            name=self.name,
            notifications=self.notifications,
            operation=self.operation,
            order=self.order,
            project=self.project,
            redundancy=self.redundancy,
            state=self.state,
            type=self.type,
            uuid=self.uuid,
            z_side=self.z_side)


def get_connection(project: Optional[pulumi.InputType['GetConnectionProjectArgs']] = None,
                   uuid: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    Use this data source to access information about an existing resource.

    :param pulumi.InputType['GetConnectionProjectArgs'] project: Project information
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getConnection:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        a_side=pulumi.get(__ret__, 'a_side'),
        account=pulumi.get(__ret__, 'account'),
        additional_info=pulumi.get(__ret__, 'additional_info'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        direction=pulumi.get(__ret__, 'direction'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_remote=pulumi.get(__ret__, 'is_remote'),
        name=pulumi.get(__ret__, 'name'),
        notifications=pulumi.get(__ret__, 'notifications'),
        operation=pulumi.get(__ret__, 'operation'),
        order=pulumi.get(__ret__, 'order'),
        project=pulumi.get(__ret__, 'project'),
        redundancy=pulumi.get(__ret__, 'redundancy'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'),
        z_side=pulumi.get(__ret__, 'z_side'))


@_utilities.lift_output_func(get_connection)
def get_connection_output(project: Optional[pulumi.Input[Optional[pulumi.InputType['GetConnectionProjectArgs']]]] = None,
                          uuid: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionResult]:
    """
    Use this data source to access information about an existing resource.

    :param pulumi.InputType['GetConnectionProjectArgs'] project: Project information
    """
    ...
