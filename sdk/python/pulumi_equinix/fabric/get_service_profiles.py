# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetServiceProfilesResult',
    'AwaitableGetServiceProfilesResult',
    'get_service_profiles',
    'get_service_profiles_output',
]

@pulumi.output_type
class GetServiceProfilesResult:
    """
    A collection of values returned by getServiceProfiles.
    """
    def __init__(__self__, and_filters=None, data=None, filter=None, id=None, pagination=None, sort=None, view_point=None):
        if and_filters and not isinstance(and_filters, bool):
            raise TypeError("Expected argument 'and_filters' to be a bool")
        pulumi.set(__self__, "and_filters", and_filters)
        if data and not isinstance(data, list):
            raise TypeError("Expected argument 'data' to be a list")
        pulumi.set(__self__, "data", data)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)
        if sort and not isinstance(sort, list):
            raise TypeError("Expected argument 'sort' to be a list")
        pulumi.set(__self__, "sort", sort)
        if view_point and not isinstance(view_point, str):
            raise TypeError("Expected argument 'view_point' to be a str")
        pulumi.set(__self__, "view_point", view_point)

    @property
    @pulumi.getter(name="andFilters")
    def and_filters(self) -> Optional[bool]:
        """
        Optional boolean flag to indicate if the filters will be AND'd together. Defaults to false
        """
        return pulumi.get(self, "and_filters")

    @property
    @pulumi.getter
    def data(self) -> Sequence['outputs.GetServiceProfilesDatumResult']:
        """
        List of Service Profiles
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.GetServiceProfilesFilterResult':
        """
        Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetServiceProfilesPaginationResult']:
        """
        Pagination details for the Data Source Search Request
        """
        return pulumi.get(self, "pagination")

    @property
    @pulumi.getter
    def sort(self) -> Optional[Sequence['outputs.GetServiceProfilesSortResult']]:
        """
        Filters for the Data Source Search Request
        """
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="viewPoint")
    def view_point(self) -> Optional[str]:
        """
        flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        """
        return pulumi.get(self, "view_point")


class AwaitableGetServiceProfilesResult(GetServiceProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceProfilesResult(
            and_filters=self.and_filters,
            data=self.data,
            filter=self.filter,
            id=self.id,
            pagination=self.pagination,
            sort=self.sort,
            view_point=self.view_point)


def get_service_profiles(and_filters: Optional[bool] = None,
                         filter: Optional[Union['GetServiceProfilesFilterArgs', 'GetServiceProfilesFilterArgsDict']] = None,
                         pagination: Optional[Union['GetServiceProfilesPaginationArgs', 'GetServiceProfilesPaginationArgsDict']] = None,
                         sort: Optional[Sequence[Union['GetServiceProfilesSortArgs', 'GetServiceProfilesSortArgsDict']]] = None,
                         view_point: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceProfilesResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles


    :param bool and_filters: Optional boolean flag to indicate if the filters will be AND'd together. Defaults to false
    :param Union['GetServiceProfilesFilterArgs', 'GetServiceProfilesFilterArgsDict'] filter: Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
    :param Union['GetServiceProfilesPaginationArgs', 'GetServiceProfilesPaginationArgsDict'] pagination: Pagination details for the Data Source Search Request
    :param Sequence[Union['GetServiceProfilesSortArgs', 'GetServiceProfilesSortArgsDict']] sort: Filters for the Data Source Search Request
    :param str view_point: flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
    """
    __args__ = dict()
    __args__['andFilters'] = and_filters
    __args__['filter'] = filter
    __args__['pagination'] = pagination
    __args__['sort'] = sort
    __args__['viewPoint'] = view_point
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getServiceProfiles:getServiceProfiles', __args__, opts=opts, typ=GetServiceProfilesResult).value

    return AwaitableGetServiceProfilesResult(
        and_filters=pulumi.get(__ret__, 'and_filters'),
        data=pulumi.get(__ret__, 'data'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'),
        sort=pulumi.get(__ret__, 'sort'),
        view_point=pulumi.get(__ret__, 'view_point'))


@_utilities.lift_output_func(get_service_profiles)
def get_service_profiles_output(and_filters: Optional[pulumi.Input[Optional[bool]]] = None,
                                filter: Optional[pulumi.Input[Union['GetServiceProfilesFilterArgs', 'GetServiceProfilesFilterArgsDict']]] = None,
                                pagination: Optional[pulumi.Input[Optional[Union['GetServiceProfilesPaginationArgs', 'GetServiceProfilesPaginationArgsDict']]]] = None,
                                sort: Optional[pulumi.Input[Optional[Sequence[Union['GetServiceProfilesSortArgs', 'GetServiceProfilesSortArgsDict']]]]] = None,
                                view_point: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceProfilesResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-Sprofiles-implement.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#service-profiles


    :param bool and_filters: Optional boolean flag to indicate if the filters will be AND'd together. Defaults to false
    :param Union['GetServiceProfilesFilterArgs', 'GetServiceProfilesFilterArgsDict'] filter: Filters for the Data Source Search Request (If and_filters is not set to true you cannot provide more than one filter block)
    :param Union['GetServiceProfilesPaginationArgs', 'GetServiceProfilesPaginationArgsDict'] pagination: Pagination details for the Data Source Search Request
    :param Sequence[Union['GetServiceProfilesSortArgs', 'GetServiceProfilesSortArgsDict']] sort: Filters for the Data Source Search Request
    :param str view_point: flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
    """
    ...
