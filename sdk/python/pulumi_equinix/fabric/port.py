# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortArgs', 'Port']

@pulumi.input_type
class PortArgs:
    def __init__(__self__, *,
                 account: pulumi.Input['PortAccountArgs'],
                 connectivity_source_type: pulumi.Input[str],
                 demarcation_point_ibx: pulumi.Input[str],
                 encapsulation: pulumi.Input['PortEncapsulationArgs'],
                 lag_enabled: pulumi.Input[bool],
                 location: pulumi.Input['PortLocationArgs'],
                 notifications: pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]],
                 physical_ports: pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]],
                 physical_ports_count: pulumi.Input[int],
                 physical_ports_speed: pulumi.Input[int],
                 physical_ports_type: pulumi.Input[str],
                 project: pulumi.Input['PortProjectArgs'],
                 redundancy: pulumi.Input['PortRedundancyArgs'],
                 settings: pulumi.Input['PortSettingsArgs'],
                 type: pulumi.Input[str],
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]] = None,
                 device: Optional[pulumi.Input['PortDeviceArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input['PortOrderArgs']] = None,
                 timeouts: Optional[pulumi.Input['PortTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Port resource.
        :param pulumi.Input['PortAccountArgs'] account: Port order account details
        :param pulumi.Input[str] connectivity_source_type: Connection type that is used from the port after creation
        :param pulumi.Input[str] demarcation_point_ibx: IBX code where the port will be located
        :param pulumi.Input['PortEncapsulationArgs'] encapsulation: Port encapsulation settings
        :param pulumi.Input[bool] lag_enabled: Boolean value to enable the created port with Link Aggregation Groups
        :param pulumi.Input['PortLocationArgs'] location: Location details for the port order
        :param pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]] notifications: List of notification types and the registered users to receive those notification types
        :param pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]] physical_ports: Physical ports that will implement this port order
        :param pulumi.Input[int] physical_ports_count: Number of physical ports in the Port Order
        :param pulumi.Input[int] physical_ports_speed: Physical Ports Speed in Mbps
        :param pulumi.Input[str] physical_ports_type: Physical Ports Type
        :param pulumi.Input['PortProjectArgs'] project: Port order project details
        :param pulumi.Input['PortRedundancyArgs'] redundancy: Port redundancy settings
        :param pulumi.Input['PortSettingsArgs'] settings: Port order configuration settings
        :param pulumi.Input[str] type: Type of the port order request
        :param pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]] additional_infos: List of key/value objects to provide additional context to the Port order
        :param pulumi.Input['PortDeviceArgs'] device: Port device configuration
        :param pulumi.Input[str] name: Designated name of the port
        :param pulumi.Input['PortOrderArgs'] order: Details of the Port Order such as purchaseOrder details and signature
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "connectivity_source_type", connectivity_source_type)
        pulumi.set(__self__, "demarcation_point_ibx", demarcation_point_ibx)
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "lag_enabled", lag_enabled)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "physical_ports", physical_ports)
        pulumi.set(__self__, "physical_ports_count", physical_ports_count)
        pulumi.set(__self__, "physical_ports_speed", physical_ports_speed)
        pulumi.set(__self__, "physical_ports_type", physical_ports_type)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "redundancy", redundancy)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input['PortAccountArgs']:
        """
        Port order account details
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input['PortAccountArgs']):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="connectivitySourceType")
    def connectivity_source_type(self) -> pulumi.Input[str]:
        """
        Connection type that is used from the port after creation
        """
        return pulumi.get(self, "connectivity_source_type")

    @connectivity_source_type.setter
    def connectivity_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connectivity_source_type", value)

    @property
    @pulumi.getter(name="demarcationPointIbx")
    def demarcation_point_ibx(self) -> pulumi.Input[str]:
        """
        IBX code where the port will be located
        """
        return pulumi.get(self, "demarcation_point_ibx")

    @demarcation_point_ibx.setter
    def demarcation_point_ibx(self, value: pulumi.Input[str]):
        pulumi.set(self, "demarcation_point_ibx", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Input['PortEncapsulationArgs']:
        """
        Port encapsulation settings
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: pulumi.Input['PortEncapsulationArgs']):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> pulumi.Input[bool]:
        """
        Boolean value to enable the created port with Link Aggregation Groups
        """
        return pulumi.get(self, "lag_enabled")

    @lag_enabled.setter
    def lag_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "lag_enabled", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['PortLocationArgs']:
        """
        Location details for the port order
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['PortLocationArgs']):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]]:
        """
        List of notification types and the registered users to receive those notification types
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="physicalPorts")
    def physical_ports(self) -> pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]]:
        """
        Physical ports that will implement this port order
        """
        return pulumi.get(self, "physical_ports")

    @physical_ports.setter
    def physical_ports(self, value: pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]]):
        pulumi.set(self, "physical_ports", value)

    @property
    @pulumi.getter(name="physicalPortsCount")
    def physical_ports_count(self) -> pulumi.Input[int]:
        """
        Number of physical ports in the Port Order
        """
        return pulumi.get(self, "physical_ports_count")

    @physical_ports_count.setter
    def physical_ports_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "physical_ports_count", value)

    @property
    @pulumi.getter(name="physicalPortsSpeed")
    def physical_ports_speed(self) -> pulumi.Input[int]:
        """
        Physical Ports Speed in Mbps
        """
        return pulumi.get(self, "physical_ports_speed")

    @physical_ports_speed.setter
    def physical_ports_speed(self, value: pulumi.Input[int]):
        pulumi.set(self, "physical_ports_speed", value)

    @property
    @pulumi.getter(name="physicalPortsType")
    def physical_ports_type(self) -> pulumi.Input[str]:
        """
        Physical Ports Type
        """
        return pulumi.get(self, "physical_ports_type")

    @physical_ports_type.setter
    def physical_ports_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "physical_ports_type", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input['PortProjectArgs']:
        """
        Port order project details
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input['PortProjectArgs']):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Input['PortRedundancyArgs']:
        """
        Port redundancy settings
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: pulumi.Input['PortRedundancyArgs']):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Input['PortSettingsArgs']:
        """
        Port order configuration settings
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: pulumi.Input['PortSettingsArgs']):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the port order request
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]]:
        """
        List of key/value objects to provide additional context to the Port order
        """
        return pulumi.get(self, "additional_infos")

    @additional_infos.setter
    def additional_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_infos", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input['PortDeviceArgs']]:
        """
        Port device configuration
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input['PortDeviceArgs']]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Designated name of the port
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['PortOrderArgs']]:
        """
        Details of the Port Order such as purchaseOrder details and signature
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['PortOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PortTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PortTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PortState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['PortAccountArgs']] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]] = None,
                 change_log: Optional[pulumi.Input['PortChangeLogArgs']] = None,
                 connectivity_source_type: Optional[pulumi.Input[str]] = None,
                 demarcation_point_ibx: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input['PortDeviceArgs']] = None,
                 encapsulation: Optional[pulumi.Input['PortEncapsulationArgs']] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 lag_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input['PortLocationArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]]] = None,
                 order: Optional[pulumi.Input['PortOrderArgs']] = None,
                 physical_ports: Optional[pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]]] = None,
                 physical_ports_count: Optional[pulumi.Input[int]] = None,
                 physical_ports_speed: Optional[pulumi.Input[int]] = None,
                 physical_ports_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input['PortProjectArgs']] = None,
                 redundancy: Optional[pulumi.Input['PortRedundancyArgs']] = None,
                 settings: Optional[pulumi.Input['PortSettingsArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['PortTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Port resources.
        :param pulumi.Input['PortAccountArgs'] account: Port order account details
        :param pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]] additional_infos: List of key/value objects to provide additional context to the Port order
        :param pulumi.Input['PortChangeLogArgs'] change_log: Details of the last change on the port resource
        :param pulumi.Input[str] connectivity_source_type: Connection type that is used from the port after creation
        :param pulumi.Input[str] demarcation_point_ibx: IBX code where the port will be located
        :param pulumi.Input['PortDeviceArgs'] device: Port device configuration
        :param pulumi.Input['PortEncapsulationArgs'] encapsulation: Port encapsulation settings
        :param pulumi.Input[str] href: Equinix assigned URI of the port resource
        :param pulumi.Input[bool] lag_enabled: Boolean value to enable the created port with Link Aggregation Groups
        :param pulumi.Input['PortLocationArgs'] location: Location details for the port order
        :param pulumi.Input[str] name: Designated name of the port
        :param pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]] notifications: List of notification types and the registered users to receive those notification types
        :param pulumi.Input['PortOrderArgs'] order: Details of the Port Order such as purchaseOrder details and signature
        :param pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]] physical_ports: Physical ports that will implement this port order
        :param pulumi.Input[int] physical_ports_count: Number of physical ports in the Port Order
        :param pulumi.Input[int] physical_ports_speed: Physical Ports Speed in Mbps
        :param pulumi.Input[str] physical_ports_type: Physical Ports Type
        :param pulumi.Input['PortProjectArgs'] project: Port order project details
        :param pulumi.Input['PortRedundancyArgs'] redundancy: Port redundancy settings
        :param pulumi.Input['PortSettingsArgs'] settings: Port order configuration settings
        :param pulumi.Input[str] state: Value representing provisioning status for the port resource
        :param pulumi.Input[str] type: Type of the port order request
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier of the port resource
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if connectivity_source_type is not None:
            pulumi.set(__self__, "connectivity_source_type", connectivity_source_type)
        if demarcation_point_ibx is not None:
            pulumi.set(__self__, "demarcation_point_ibx", demarcation_point_ibx)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if lag_enabled is not None:
            pulumi.set(__self__, "lag_enabled", lag_enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if physical_ports is not None:
            pulumi.set(__self__, "physical_ports", physical_ports)
        if physical_ports_count is not None:
            pulumi.set(__self__, "physical_ports_count", physical_ports_count)
        if physical_ports_speed is not None:
            pulumi.set(__self__, "physical_ports_speed", physical_ports_speed)
        if physical_ports_type is not None:
            pulumi.set(__self__, "physical_ports_type", physical_ports_type)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['PortAccountArgs']]:
        """
        Port order account details
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['PortAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]]:
        """
        List of key/value objects to provide additional context to the Port order
        """
        return pulumi.get(self, "additional_infos")

    @additional_infos.setter
    def additional_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_infos", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['PortChangeLogArgs']]:
        """
        Details of the last change on the port resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['PortChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter(name="connectivitySourceType")
    def connectivity_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection type that is used from the port after creation
        """
        return pulumi.get(self, "connectivity_source_type")

    @connectivity_source_type.setter
    def connectivity_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connectivity_source_type", value)

    @property
    @pulumi.getter(name="demarcationPointIbx")
    def demarcation_point_ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX code where the port will be located
        """
        return pulumi.get(self, "demarcation_point_ibx")

    @demarcation_point_ibx.setter
    def demarcation_point_ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "demarcation_point_ibx", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input['PortDeviceArgs']]:
        """
        Port device configuration
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input['PortDeviceArgs']]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input['PortEncapsulationArgs']]:
        """
        Port encapsulation settings
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input['PortEncapsulationArgs']]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned URI of the port resource
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable the created port with Link Aggregation Groups
        """
        return pulumi.get(self, "lag_enabled")

    @lag_enabled.setter
    def lag_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lag_enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['PortLocationArgs']]:
        """
        Location details for the port order
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['PortLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Designated name of the port
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]]]:
        """
        List of notification types and the registered users to receive those notification types
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['PortOrderArgs']]:
        """
        Details of the Port Order such as purchaseOrder details and signature
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['PortOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="physicalPorts")
    def physical_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]]]:
        """
        Physical ports that will implement this port order
        """
        return pulumi.get(self, "physical_ports")

    @physical_ports.setter
    def physical_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortPhysicalPortArgs']]]]):
        pulumi.set(self, "physical_ports", value)

    @property
    @pulumi.getter(name="physicalPortsCount")
    def physical_ports_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of physical ports in the Port Order
        """
        return pulumi.get(self, "physical_ports_count")

    @physical_ports_count.setter
    def physical_ports_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "physical_ports_count", value)

    @property
    @pulumi.getter(name="physicalPortsSpeed")
    def physical_ports_speed(self) -> Optional[pulumi.Input[int]]:
        """
        Physical Ports Speed in Mbps
        """
        return pulumi.get(self, "physical_ports_speed")

    @physical_ports_speed.setter
    def physical_ports_speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "physical_ports_speed", value)

    @property
    @pulumi.getter(name="physicalPortsType")
    def physical_ports_type(self) -> Optional[pulumi.Input[str]]:
        """
        Physical Ports Type
        """
        return pulumi.get(self, "physical_ports_type")

    @physical_ports_type.setter
    def physical_ports_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical_ports_type", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['PortProjectArgs']]:
        """
        Port order project details
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['PortProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input['PortRedundancyArgs']]:
        """
        Port redundancy settings
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input['PortRedundancyArgs']]):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['PortSettingsArgs']]:
        """
        Port order configuration settings
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['PortSettingsArgs']]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing provisioning status for the port resource
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PortTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PortTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the port order request
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned unique identifier of the port resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Port(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['PortAccountArgs', 'PortAccountArgsDict']]] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortAdditionalInfoArgs', 'PortAdditionalInfoArgsDict']]]]] = None,
                 connectivity_source_type: Optional[pulumi.Input[str]] = None,
                 demarcation_point_ibx: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[Union['PortDeviceArgs', 'PortDeviceArgsDict']]] = None,
                 encapsulation: Optional[pulumi.Input[Union['PortEncapsulationArgs', 'PortEncapsulationArgsDict']]] = None,
                 lag_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[Union['PortLocationArgs', 'PortLocationArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortNotificationArgs', 'PortNotificationArgsDict']]]]] = None,
                 order: Optional[pulumi.Input[Union['PortOrderArgs', 'PortOrderArgsDict']]] = None,
                 physical_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortPhysicalPortArgs', 'PortPhysicalPortArgsDict']]]]] = None,
                 physical_ports_count: Optional[pulumi.Input[int]] = None,
                 physical_ports_speed: Optional[pulumi.Input[int]] = None,
                 physical_ports_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[Union['PortProjectArgs', 'PortProjectArgsDict']]] = None,
                 redundancy: Optional[pulumi.Input[Union['PortRedundancyArgs', 'PortRedundancyArgsDict']]] = None,
                 settings: Optional[pulumi.Input[Union['PortSettingsArgs', 'PortSettingsArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['PortTimeoutsArgs', 'PortTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PortAccountArgs', 'PortAccountArgsDict']] account: Port order account details
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortAdditionalInfoArgs', 'PortAdditionalInfoArgsDict']]]] additional_infos: List of key/value objects to provide additional context to the Port order
        :param pulumi.Input[str] connectivity_source_type: Connection type that is used from the port after creation
        :param pulumi.Input[str] demarcation_point_ibx: IBX code where the port will be located
        :param pulumi.Input[Union['PortDeviceArgs', 'PortDeviceArgsDict']] device: Port device configuration
        :param pulumi.Input[Union['PortEncapsulationArgs', 'PortEncapsulationArgsDict']] encapsulation: Port encapsulation settings
        :param pulumi.Input[bool] lag_enabled: Boolean value to enable the created port with Link Aggregation Groups
        :param pulumi.Input[Union['PortLocationArgs', 'PortLocationArgsDict']] location: Location details for the port order
        :param pulumi.Input[str] name: Designated name of the port
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortNotificationArgs', 'PortNotificationArgsDict']]]] notifications: List of notification types and the registered users to receive those notification types
        :param pulumi.Input[Union['PortOrderArgs', 'PortOrderArgsDict']] order: Details of the Port Order such as purchaseOrder details and signature
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortPhysicalPortArgs', 'PortPhysicalPortArgsDict']]]] physical_ports: Physical ports that will implement this port order
        :param pulumi.Input[int] physical_ports_count: Number of physical ports in the Port Order
        :param pulumi.Input[int] physical_ports_speed: Physical Ports Speed in Mbps
        :param pulumi.Input[str] physical_ports_type: Physical Ports Type
        :param pulumi.Input[Union['PortProjectArgs', 'PortProjectArgsDict']] project: Port order project details
        :param pulumi.Input[Union['PortRedundancyArgs', 'PortRedundancyArgsDict']] redundancy: Port redundancy settings
        :param pulumi.Input[Union['PortSettingsArgs', 'PortSettingsArgsDict']] settings: Port order configuration settings
        :param pulumi.Input[str] type: Type of the port order request
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param PortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['PortAccountArgs', 'PortAccountArgsDict']]] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortAdditionalInfoArgs', 'PortAdditionalInfoArgsDict']]]]] = None,
                 connectivity_source_type: Optional[pulumi.Input[str]] = None,
                 demarcation_point_ibx: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[Union['PortDeviceArgs', 'PortDeviceArgsDict']]] = None,
                 encapsulation: Optional[pulumi.Input[Union['PortEncapsulationArgs', 'PortEncapsulationArgsDict']]] = None,
                 lag_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[Union['PortLocationArgs', 'PortLocationArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortNotificationArgs', 'PortNotificationArgsDict']]]]] = None,
                 order: Optional[pulumi.Input[Union['PortOrderArgs', 'PortOrderArgsDict']]] = None,
                 physical_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortPhysicalPortArgs', 'PortPhysicalPortArgsDict']]]]] = None,
                 physical_ports_count: Optional[pulumi.Input[int]] = None,
                 physical_ports_speed: Optional[pulumi.Input[int]] = None,
                 physical_ports_type: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[Union['PortProjectArgs', 'PortProjectArgsDict']]] = None,
                 redundancy: Optional[pulumi.Input[Union['PortRedundancyArgs', 'PortRedundancyArgsDict']]] = None,
                 settings: Optional[pulumi.Input[Union['PortSettingsArgs', 'PortSettingsArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['PortTimeoutsArgs', 'PortTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortArgs.__new__(PortArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            __props__.__dict__["additional_infos"] = additional_infos
            if connectivity_source_type is None and not opts.urn:
                raise TypeError("Missing required property 'connectivity_source_type'")
            __props__.__dict__["connectivity_source_type"] = connectivity_source_type
            if demarcation_point_ibx is None and not opts.urn:
                raise TypeError("Missing required property 'demarcation_point_ibx'")
            __props__.__dict__["demarcation_point_ibx"] = demarcation_point_ibx
            __props__.__dict__["device"] = device
            if encapsulation is None and not opts.urn:
                raise TypeError("Missing required property 'encapsulation'")
            __props__.__dict__["encapsulation"] = encapsulation
            if lag_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'lag_enabled'")
            __props__.__dict__["lag_enabled"] = lag_enabled
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["order"] = order
            if physical_ports is None and not opts.urn:
                raise TypeError("Missing required property 'physical_ports'")
            __props__.__dict__["physical_ports"] = physical_ports
            if physical_ports_count is None and not opts.urn:
                raise TypeError("Missing required property 'physical_ports_count'")
            __props__.__dict__["physical_ports_count"] = physical_ports_count
            if physical_ports_speed is None and not opts.urn:
                raise TypeError("Missing required property 'physical_ports_speed'")
            __props__.__dict__["physical_ports_speed"] = physical_ports_speed
            if physical_ports_type is None and not opts.urn:
                raise TypeError("Missing required property 'physical_ports_type'")
            __props__.__dict__["physical_ports_type"] = physical_ports_type
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if redundancy is None and not opts.urn:
                raise TypeError("Missing required property 'redundancy'")
            __props__.__dict__["redundancy"] = redundancy
            if settings is None and not opts.urn:
                raise TypeError("Missing required property 'settings'")
            __props__.__dict__["settings"] = settings
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(Port, __self__).__init__(
            'equinix:fabric/port:Port',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[Union['PortAccountArgs', 'PortAccountArgsDict']]] = None,
            additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortAdditionalInfoArgs', 'PortAdditionalInfoArgsDict']]]]] = None,
            change_log: Optional[pulumi.Input[Union['PortChangeLogArgs', 'PortChangeLogArgsDict']]] = None,
            connectivity_source_type: Optional[pulumi.Input[str]] = None,
            demarcation_point_ibx: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[Union['PortDeviceArgs', 'PortDeviceArgsDict']]] = None,
            encapsulation: Optional[pulumi.Input[Union['PortEncapsulationArgs', 'PortEncapsulationArgsDict']]] = None,
            href: Optional[pulumi.Input[str]] = None,
            lag_enabled: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[Union['PortLocationArgs', 'PortLocationArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortNotificationArgs', 'PortNotificationArgsDict']]]]] = None,
            order: Optional[pulumi.Input[Union['PortOrderArgs', 'PortOrderArgsDict']]] = None,
            physical_ports: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortPhysicalPortArgs', 'PortPhysicalPortArgsDict']]]]] = None,
            physical_ports_count: Optional[pulumi.Input[int]] = None,
            physical_ports_speed: Optional[pulumi.Input[int]] = None,
            physical_ports_type: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[Union['PortProjectArgs', 'PortProjectArgsDict']]] = None,
            redundancy: Optional[pulumi.Input[Union['PortRedundancyArgs', 'PortRedundancyArgsDict']]] = None,
            settings: Optional[pulumi.Input[Union['PortSettingsArgs', 'PortSettingsArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['PortTimeoutsArgs', 'PortTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Port':
        """
        Get an existing Port resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PortAccountArgs', 'PortAccountArgsDict']] account: Port order account details
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortAdditionalInfoArgs', 'PortAdditionalInfoArgsDict']]]] additional_infos: List of key/value objects to provide additional context to the Port order
        :param pulumi.Input[Union['PortChangeLogArgs', 'PortChangeLogArgsDict']] change_log: Details of the last change on the port resource
        :param pulumi.Input[str] connectivity_source_type: Connection type that is used from the port after creation
        :param pulumi.Input[str] demarcation_point_ibx: IBX code where the port will be located
        :param pulumi.Input[Union['PortDeviceArgs', 'PortDeviceArgsDict']] device: Port device configuration
        :param pulumi.Input[Union['PortEncapsulationArgs', 'PortEncapsulationArgsDict']] encapsulation: Port encapsulation settings
        :param pulumi.Input[str] href: Equinix assigned URI of the port resource
        :param pulumi.Input[bool] lag_enabled: Boolean value to enable the created port with Link Aggregation Groups
        :param pulumi.Input[Union['PortLocationArgs', 'PortLocationArgsDict']] location: Location details for the port order
        :param pulumi.Input[str] name: Designated name of the port
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortNotificationArgs', 'PortNotificationArgsDict']]]] notifications: List of notification types and the registered users to receive those notification types
        :param pulumi.Input[Union['PortOrderArgs', 'PortOrderArgsDict']] order: Details of the Port Order such as purchaseOrder details and signature
        :param pulumi.Input[Sequence[pulumi.Input[Union['PortPhysicalPortArgs', 'PortPhysicalPortArgsDict']]]] physical_ports: Physical ports that will implement this port order
        :param pulumi.Input[int] physical_ports_count: Number of physical ports in the Port Order
        :param pulumi.Input[int] physical_ports_speed: Physical Ports Speed in Mbps
        :param pulumi.Input[str] physical_ports_type: Physical Ports Type
        :param pulumi.Input[Union['PortProjectArgs', 'PortProjectArgsDict']] project: Port order project details
        :param pulumi.Input[Union['PortRedundancyArgs', 'PortRedundancyArgsDict']] redundancy: Port redundancy settings
        :param pulumi.Input[Union['PortSettingsArgs', 'PortSettingsArgsDict']] settings: Port order configuration settings
        :param pulumi.Input[str] state: Value representing provisioning status for the port resource
        :param pulumi.Input[str] type: Type of the port order request
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier of the port resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortState.__new__(_PortState)

        __props__.__dict__["account"] = account
        __props__.__dict__["additional_infos"] = additional_infos
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["connectivity_source_type"] = connectivity_source_type
        __props__.__dict__["demarcation_point_ibx"] = demarcation_point_ibx
        __props__.__dict__["device"] = device
        __props__.__dict__["encapsulation"] = encapsulation
        __props__.__dict__["href"] = href
        __props__.__dict__["lag_enabled"] = lag_enabled
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["order"] = order
        __props__.__dict__["physical_ports"] = physical_ports
        __props__.__dict__["physical_ports_count"] = physical_ports_count
        __props__.__dict__["physical_ports_speed"] = physical_ports_speed
        __props__.__dict__["physical_ports_type"] = physical_ports_type
        __props__.__dict__["project"] = project
        __props__.__dict__["redundancy"] = redundancy
        __props__.__dict__["settings"] = settings
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return Port(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.PortAccount']:
        """
        Port order account details
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> pulumi.Output[Optional[Sequence['outputs.PortAdditionalInfo']]]:
        """
        List of key/value objects to provide additional context to the Port order
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.PortChangeLog']:
        """
        Details of the last change on the port resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="connectivitySourceType")
    def connectivity_source_type(self) -> pulumi.Output[str]:
        """
        Connection type that is used from the port after creation
        """
        return pulumi.get(self, "connectivity_source_type")

    @property
    @pulumi.getter(name="demarcationPointIbx")
    def demarcation_point_ibx(self) -> pulumi.Output[str]:
        """
        IBX code where the port will be located
        """
        return pulumi.get(self, "demarcation_point_ibx")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional['outputs.PortDevice']]:
        """
        Port device configuration
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Output['outputs.PortEncapsulation']:
        """
        Port encapsulation settings
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix assigned URI of the port resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> pulumi.Output[bool]:
        """
        Boolean value to enable the created port with Link Aggregation Groups
        """
        return pulumi.get(self, "lag_enabled")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output['outputs.PortLocation']:
        """
        Location details for the port order
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Designated name of the port
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.PortNotification']]:
        """
        List of notification types and the registered users to receive those notification types
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output['outputs.PortOrder']:
        """
        Details of the Port Order such as purchaseOrder details and signature
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="physicalPorts")
    def physical_ports(self) -> pulumi.Output[Sequence['outputs.PortPhysicalPort']]:
        """
        Physical ports that will implement this port order
        """
        return pulumi.get(self, "physical_ports")

    @property
    @pulumi.getter(name="physicalPortsCount")
    def physical_ports_count(self) -> pulumi.Output[int]:
        """
        Number of physical ports in the Port Order
        """
        return pulumi.get(self, "physical_ports_count")

    @property
    @pulumi.getter(name="physicalPortsSpeed")
    def physical_ports_speed(self) -> pulumi.Output[int]:
        """
        Physical Ports Speed in Mbps
        """
        return pulumi.get(self, "physical_ports_speed")

    @property
    @pulumi.getter(name="physicalPortsType")
    def physical_ports_type(self) -> pulumi.Output[str]:
        """
        Physical Ports Type
        """
        return pulumi.get(self, "physical_ports_type")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['outputs.PortProject']:
        """
        Port order project details
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Output['outputs.PortRedundancy']:
        """
        Port redundancy settings
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output['outputs.PortSettings']:
        """
        Port order configuration settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Value representing provisioning status for the port resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PortTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the port order request
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix assigned unique identifier of the port resource
        """
        return pulumi.get(self, "uuid")

