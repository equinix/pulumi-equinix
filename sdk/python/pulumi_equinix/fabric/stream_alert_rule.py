# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamAlertRuleArgs', 'StreamAlertRule']

@pulumi.input_type
class StreamAlertRuleArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 stream_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 detection_method: Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_selector: Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']] = None,
                 timeouts: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a StreamAlertRule resource.
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input['StreamAlertRuleDetectionMethodArgs'] detection_method: Detection method for stream alert rule
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input['StreamAlertRuleMetricSelectorArgs'] metric_selector: Metric selector for the stream alert rule
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input['StreamAlertRuleResourceSelectorArgs'] resource_selector: Resource selector for the stream alert rule
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "type", type)
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Input[str]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']]:
        """
        Detection method for stream alert rule
        """
        return pulumi.get(self, "detection_method")

    @detection_method.setter
    def detection_method(self, value: Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']]):
        pulumi.set(self, "detection_method", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']]:
        """
        Metric selector for the stream alert rule
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]):
        pulumi.set(self, "resource_selector", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StreamAlertRuleState:
    def __init__(__self__, *,
                 change_log: Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detection_method: Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamAlertRule resources.
        :param pulumi.Input['StreamAlertRuleChangeLogArgs'] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input['StreamAlertRuleDetectionMethodArgs'] detection_method: Detection method for stream alert rule
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] href: Equinix assigned URI of the stream alert rule
        :param pulumi.Input['StreamAlertRuleMetricSelectorArgs'] metric_selector: Metric selector for the stream alert rule
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input['StreamAlertRuleResourceSelectorArgs'] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] state: Value representing provisioning status for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier for the stream alert rule
        """
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']]:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']]:
        """
        Detection method for stream alert rule
        """
        return pulumi.get(self, "detection_method")

    @detection_method.setter
    def detection_method(self, value: Optional[pulumi.Input['StreamAlertRuleDetectionMethodArgs']]):
        pulumi.set(self, "detection_method", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned URI of the stream alert rule
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']]:
        """
        Metric selector for the stream alert rule
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input['StreamAlertRuleMetricSelectorArgs']]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]):
        pulumi.set(self, "resource_selector", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing provisioning status for the stream alert rule
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned unique identifier for the stream alert rule
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class StreamAlertRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detection_method: Optional[pulumi.Input[Union['StreamAlertRuleDetectionMethodArgs', 'StreamAlertRuleDetectionMethodArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_selector: Optional[pulumi.Input[Union['StreamAlertRuleMetricSelectorArgs', 'StreamAlertRuleMetricSelectorArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[Union['StreamAlertRuleDetectionMethodArgs', 'StreamAlertRuleDetectionMethodArgsDict']] detection_method: Detection method for stream alert rule
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[Union['StreamAlertRuleMetricSelectorArgs', 'StreamAlertRuleMetricSelectorArgsDict']] metric_selector: Metric selector for the stream alert rule
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamAlertRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param StreamAlertRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamAlertRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detection_method: Optional[pulumi.Input[Union['StreamAlertRuleDetectionMethodArgs', 'StreamAlertRuleDetectionMethodArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_selector: Optional[pulumi.Input[Union['StreamAlertRuleMetricSelectorArgs', 'StreamAlertRuleMetricSelectorArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamAlertRuleArgs.__new__(StreamAlertRuleArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["detection_method"] = detection_method
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["metric_selector"] = metric_selector
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_selector"] = resource_selector
            if stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'stream_id'")
            __props__.__dict__["stream_id"] = stream_id
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(StreamAlertRule, __self__).__init__(
            'equinix:fabric/streamAlertRule:StreamAlertRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_log: Optional[pulumi.Input[Union['StreamAlertRuleChangeLogArgs', 'StreamAlertRuleChangeLogArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            detection_method: Optional[pulumi.Input[Union['StreamAlertRuleDetectionMethodArgs', 'StreamAlertRuleDetectionMethodArgsDict']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            href: Optional[pulumi.Input[str]] = None,
            metric_selector: Optional[pulumi.Input[Union['StreamAlertRuleMetricSelectorArgs', 'StreamAlertRuleMetricSelectorArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            stream_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'StreamAlertRule':
        """
        Get an existing StreamAlertRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['StreamAlertRuleChangeLogArgs', 'StreamAlertRuleChangeLogArgsDict']] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[Union['StreamAlertRuleDetectionMethodArgs', 'StreamAlertRuleDetectionMethodArgsDict']] detection_method: Detection method for stream alert rule
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] href: Equinix assigned URI of the stream alert rule
        :param pulumi.Input[Union['StreamAlertRuleMetricSelectorArgs', 'StreamAlertRuleMetricSelectorArgsDict']] metric_selector: Metric selector for the stream alert rule
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] state: Value representing provisioning status for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier for the stream alert rule
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamAlertRuleState.__new__(_StreamAlertRuleState)

        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["description"] = description
        __props__.__dict__["detection_method"] = detection_method
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["href"] = href
        __props__.__dict__["metric_selector"] = metric_selector
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_selector"] = resource_selector
        __props__.__dict__["state"] = state
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return StreamAlertRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.StreamAlertRuleChangeLog']:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> pulumi.Output['outputs.StreamAlertRuleDetectionMethod']:
        """
        Detection method for stream alert rule
        """
        return pulumi.get(self, "detection_method")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix assigned URI of the stream alert rule
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Output['outputs.StreamAlertRuleMetricSelector']:
        """
        Metric selector for the stream alert rule
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> pulumi.Output['outputs.StreamAlertRuleResourceSelector']:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Value representing provisioning status for the stream alert rule
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[str]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StreamAlertRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix assigned unique identifier for the stream alert rule
        """
        return pulumi.get(self, "uuid")

