# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamAlertRuleArgs', 'StreamAlertRule']

@pulumi.input_type
class StreamAlertRuleArgs:
    def __init__(__self__, *,
                 critical_threshold: pulumi.Input[str],
                 description: pulumi.Input[str],
                 metric_name: pulumi.Input[str],
                 operand: pulumi.Input[str],
                 stream_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 warning_threshold: pulumi.Input[str],
                 window_size: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']] = None,
                 timeouts: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a StreamAlertRule resource.
        :param pulumi.Input[str] critical_threshold: Stream alert rule metric critical threshold
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[str] metric_name: Stream alert rule metric name
        :param pulumi.Input[str] operand: Stream alert rule metric operand
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] warning_threshold: Stream alert rule metric warning threshold
        :param pulumi.Input[str] window_size: Stream alert rule metric window size
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input['StreamAlertRuleResourceSelectorArgs'] resource_selector: Resource selector for the stream alert rule
        """
        pulumi.set(__self__, "critical_threshold", critical_threshold)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "operand", operand)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "warning_threshold", warning_threshold)
        pulumi.set(__self__, "window_size", window_size)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="criticalThreshold")
    def critical_threshold(self) -> pulumi.Input[str]:
        """
        Stream alert rule metric critical threshold
        """
        return pulumi.get(self, "critical_threshold")

    @critical_threshold.setter
    def critical_threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "critical_threshold", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        """
        Stream alert rule metric name
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def operand(self) -> pulumi.Input[str]:
        """
        Stream alert rule metric operand
        """
        return pulumi.get(self, "operand")

    @operand.setter
    def operand(self, value: pulumi.Input[str]):
        pulumi.set(self, "operand", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Input[str]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> pulumi.Input[str]:
        """
        Stream alert rule metric warning threshold
        """
        return pulumi.get(self, "warning_threshold")

    @warning_threshold.setter
    def warning_threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "warning_threshold", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> pulumi.Input[str]:
        """
        Stream alert rule metric window size
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "window_size", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]):
        pulumi.set(self, "resource_selector", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StreamAlertRuleState:
    def __init__(__self__, *,
                 change_log: Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']] = None,
                 critical_threshold: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operand: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 warning_threshold: Optional[pulumi.Input[str]] = None,
                 window_size: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamAlertRule resources.
        :param pulumi.Input['StreamAlertRuleChangeLogArgs'] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] critical_threshold: Stream alert rule metric critical threshold
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] href: Equinix assigned URI of the stream alert rule
        :param pulumi.Input[str] metric_name: Stream alert rule metric name
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input[str] operand: Stream alert rule metric operand
        :param pulumi.Input['StreamAlertRuleResourceSelectorArgs'] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] state: Value representing provisioning status for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier for the stream alert rule
        :param pulumi.Input[str] warning_threshold: Stream alert rule metric warning threshold
        :param pulumi.Input[str] window_size: Stream alert rule metric window size
        """
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if critical_threshold is not None:
            pulumi.set(__self__, "critical_threshold", critical_threshold)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operand is not None:
            pulumi.set(__self__, "operand", operand)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if warning_threshold is not None:
            pulumi.set(__self__, "warning_threshold", warning_threshold)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']]:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['StreamAlertRuleChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter(name="criticalThreshold")
    def critical_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Stream alert rule metric critical threshold
        """
        return pulumi.get(self, "critical_threshold")

    @critical_threshold.setter
    def critical_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical_threshold", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned URI of the stream alert rule
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        Stream alert rule metric name
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operand(self) -> Optional[pulumi.Input[str]]:
        """
        Stream alert rule metric operand
        """
        return pulumi.get(self, "operand")

    @operand.setter
    def operand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand", value)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input['StreamAlertRuleResourceSelectorArgs']]):
        pulumi.set(self, "resource_selector", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing provisioning status for the stream alert rule
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAlertRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned unique identifier for the stream alert rule
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Stream alert rule metric warning threshold
        """
        return pulumi.get(self, "warning_threshold")

    @warning_threshold.setter
    def warning_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_threshold", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[str]]:
        """
        Stream alert rule metric window size
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_size", value)


class StreamAlertRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 critical_threshold: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operand: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warning_threshold: Optional[pulumi.Input[str]] = None,
                 window_size: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules'
        }

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] critical_threshold: Stream alert rule metric critical threshold
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] metric_name: Stream alert rule metric name
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input[str] operand: Stream alert rule metric operand
        :param pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] warning_threshold: Stream alert rule metric warning threshold
        :param pulumi.Input[str] window_size: Stream alert rule metric window size
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamAlertRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules'
        }

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules

        :param str resource_name: The name of the resource.
        :param StreamAlertRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamAlertRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 critical_threshold: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operand: Optional[pulumi.Input[str]] = None,
                 resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warning_threshold: Optional[pulumi.Input[str]] = None,
                 window_size: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamAlertRuleArgs.__new__(StreamAlertRuleArgs)

            if critical_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'critical_threshold'")
            __props__.__dict__["critical_threshold"] = critical_threshold
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            if metric_name is None and not opts.urn:
                raise TypeError("Missing required property 'metric_name'")
            __props__.__dict__["metric_name"] = metric_name
            __props__.__dict__["name"] = name
            if operand is None and not opts.urn:
                raise TypeError("Missing required property 'operand'")
            __props__.__dict__["operand"] = operand
            __props__.__dict__["resource_selector"] = resource_selector
            if stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'stream_id'")
            __props__.__dict__["stream_id"] = stream_id
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if warning_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'warning_threshold'")
            __props__.__dict__["warning_threshold"] = warning_threshold
            if window_size is None and not opts.urn:
                raise TypeError("Missing required property 'window_size'")
            __props__.__dict__["window_size"] = window_size
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(StreamAlertRule, __self__).__init__(
            'equinix:fabric/streamAlertRule:StreamAlertRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_log: Optional[pulumi.Input[Union['StreamAlertRuleChangeLogArgs', 'StreamAlertRuleChangeLogArgsDict']]] = None,
            critical_threshold: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            href: Optional[pulumi.Input[str]] = None,
            metric_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operand: Optional[pulumi.Input[str]] = None,
            resource_selector: Optional[pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            stream_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['StreamAlertRuleTimeoutsArgs', 'StreamAlertRuleTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            warning_threshold: Optional[pulumi.Input[str]] = None,
            window_size: Optional[pulumi.Input[str]] = None) -> 'StreamAlertRule':
        """
        Get an existing StreamAlertRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['StreamAlertRuleChangeLogArgs', 'StreamAlertRuleChangeLogArgsDict']] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] critical_threshold: Stream alert rule metric critical threshold
        :param pulumi.Input[str] description: Customer-provided stream alert rule description
        :param pulumi.Input[bool] enabled: Stream alert rule enabled status
        :param pulumi.Input[str] href: Equinix assigned URI of the stream alert rule
        :param pulumi.Input[str] metric_name: Stream alert rule metric name
        :param pulumi.Input[str] name: Customer-provided stream alert rule name
        :param pulumi.Input[str] operand: Stream alert rule metric operand
        :param pulumi.Input[Union['StreamAlertRuleResourceSelectorArgs', 'StreamAlertRuleResourceSelectorArgsDict']] resource_selector: Resource selector for the stream alert rule
        :param pulumi.Input[str] state: Value representing provisioning status for the stream alert rule
        :param pulumi.Input[str] stream_id: The stream UUID that contains this alert rule
        :param pulumi.Input[str] type: Type of the stream alert rule
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier for the stream alert rule
        :param pulumi.Input[str] warning_threshold: Stream alert rule metric warning threshold
        :param pulumi.Input[str] window_size: Stream alert rule metric window size
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamAlertRuleState.__new__(_StreamAlertRuleState)

        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["critical_threshold"] = critical_threshold
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["href"] = href
        __props__.__dict__["metric_name"] = metric_name
        __props__.__dict__["name"] = name
        __props__.__dict__["operand"] = operand
        __props__.__dict__["resource_selector"] = resource_selector
        __props__.__dict__["state"] = state
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["warning_threshold"] = warning_threshold
        __props__.__dict__["window_size"] = window_size
        return StreamAlertRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.StreamAlertRuleChangeLog']:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="criticalThreshold")
    def critical_threshold(self) -> pulumi.Output[str]:
        """
        Stream alert rule metric critical threshold
        """
        return pulumi.get(self, "critical_threshold")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Stream alert rule enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix assigned URI of the stream alert rule
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Output[str]:
        """
        Stream alert rule metric name
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operand(self) -> pulumi.Output[str]:
        """
        Stream alert rule metric operand
        """
        return pulumi.get(self, "operand")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> pulumi.Output['outputs.StreamAlertRuleResourceSelector']:
        """
        Resource selector for the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Value representing provisioning status for the stream alert rule
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[str]:
        """
        The stream UUID that contains this alert rule
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StreamAlertRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix assigned unique identifier for the stream alert rule
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="warningThreshold")
    def warning_threshold(self) -> pulumi.Output[str]:
        """
        Stream alert rule metric warning threshold
        """
        return pulumi.get(self, "warning_threshold")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> pulumi.Output[str]:
        """
        Stream alert rule metric window size
        """
        return pulumi.get(self, "window_size")

