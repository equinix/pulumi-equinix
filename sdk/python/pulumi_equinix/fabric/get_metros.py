# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetrosResult',
    'AwaitableGetMetrosResult',
    'get_metros',
    'get_metros_output',
]

@pulumi.output_type
class GetMetrosResult:
    """
    A collection of values returned by getMetros.
    """
    def __init__(__self__, datas=None, id=None, pagination=None, presence=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)
        if presence and not isinstance(presence, str):
            raise TypeError("Expected argument 'presence' to be a str")
        pulumi.set(__self__, "presence", presence)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetMetrosDataResult']:
        """
        Returned list of metro objects
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> 'outputs.GetMetrosPaginationResult':
        """
        Pagination details for the returned metro list
        """
        return pulumi.get(self, "pagination")

    @property
    @pulumi.getter
    def presence(self) -> Optional[str]:
        """
        User On Boarded Metros based on Fabric resource availability
        """
        return pulumi.get(self, "presence")


class AwaitableGetMetrosResult(GetMetrosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetrosResult(
            datas=self.datas,
            id=self.id,
            pagination=self.pagination,
            presence=self.presence)


def get_metros(pagination: Optional[Union['GetMetrosPaginationArgs', 'GetMetrosPaginationArgsDict']] = None,
               presence: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetrosResult:
    """
    ## Example Usage


    :param Union['GetMetrosPaginationArgs', 'GetMetrosPaginationArgsDict'] pagination: Pagination details for the returned metro list
    :param str presence: User On Boarded Metros based on Fabric resource availability
    """
    __args__ = dict()
    __args__['pagination'] = pagination
    __args__['presence'] = presence
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getMetros:getMetros', __args__, opts=opts, typ=GetMetrosResult).value

    return AwaitableGetMetrosResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'),
        presence=pulumi.get(__ret__, 'presence'))
def get_metros_output(pagination: Optional[pulumi.Input[Union['GetMetrosPaginationArgs', 'GetMetrosPaginationArgsDict']]] = None,
                      presence: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetrosResult]:
    """
    ## Example Usage


    :param Union['GetMetrosPaginationArgs', 'GetMetrosPaginationArgsDict'] pagination: Pagination details for the returned metro list
    :param str presence: User On Boarded Metros based on Fabric resource availability
    """
    __args__ = dict()
    __args__['pagination'] = pagination
    __args__['presence'] = presence
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getMetros:getMetros', __args__, opts=opts, typ=GetMetrosResult)
    return __ret__.apply(lambda __response__: GetMetrosResult(
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        pagination=pulumi.get(__response__, 'pagination'),
        presence=pulumi.get(__response__, 'presence')))
