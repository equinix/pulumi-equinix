# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConnectionRouteFilterArgs', 'ConnectionRouteFilter']

@pulumi.input_type
class ConnectionRouteFilterArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 direction: pulumi.Input[str],
                 route_filter_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ConnectionRouteFilter resource.
        :param pulumi.Input[str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        :param pulumi.Input[str] direction: Direction of the filtering of the attached Route Filter Policy
        :param pulumi.Input[str] route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "route_filter_id", route_filter_id)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        Direction of the filtering of the attached Route Filter Policy
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> pulumi.Input[str]:
        """
        Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        return pulumi.get(self, "route_filter_id")

    @route_filter_id.setter
    def route_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_filter_id", value)


@pulumi.input_type
class _ConnectionRouteFilterState:
    def __init__(__self__, *,
                 attachment_status: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConnectionRouteFilter resources.
        :param pulumi.Input[str] attachment_status: Status of the Route Filter Policy attachment lifecycle
        :param pulumi.Input[str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        :param pulumi.Input[str] direction: Direction of the filtering of the attached Route Filter Policy
        :param pulumi.Input[str] href: URI to the attached Route Filter Policy on the Connection
        :param pulumi.Input[str] route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter Policy
        """
        if attachment_status is not None:
            pulumi.set(__self__, "attachment_status", attachment_status)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if route_filter_id is not None:
            pulumi.set(__self__, "route_filter_id", route_filter_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the Route Filter Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @attachment_status.setter
    def attachment_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attachment_status", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of the filtering of the attached Route Filter Policy
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        URI to the attached Route Filter Policy on the Connection
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        return pulumi.get(self, "route_filter_id")

    @route_filter_id.setter
    def route_filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_filter_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix Assigned ID for Route Filter Policy
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class ConnectionRouteFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows attachment of Route Filter Polices to Fabric Connections

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        policy_attachment = equinix.fabric.ConnectionRouteFilter("policyAttachment",
            connection_id="<connection_uuid>",
            route_filter_id="<route_filter_policy_uuid>",
            direction="INBOUND")
        pulumi.export("connectionRouteFilterId", policy_attachment.id)
        pulumi.export("connectionRouteFilterConnectionId", policy_attachment.connection_id)
        pulumi.export("connectionRouteFilterDirection", policy_attachment.direction)
        pulumi.export("connectionRouteFilterType", policy_attachment.type)
        pulumi.export("connectionRouteFilterAttachmentStatus", policy_attachment.attachment_status)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        :param pulumi.Input[str] direction: Direction of the filtering of the attached Route Filter Policy
        :param pulumi.Input[str] route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionRouteFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows attachment of Route Filter Polices to Fabric Connections

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        policy_attachment = equinix.fabric.ConnectionRouteFilter("policyAttachment",
            connection_id="<connection_uuid>",
            route_filter_id="<route_filter_policy_uuid>",
            direction="INBOUND")
        pulumi.export("connectionRouteFilterId", policy_attachment.id)
        pulumi.export("connectionRouteFilterConnectionId", policy_attachment.connection_id)
        pulumi.export("connectionRouteFilterDirection", policy_attachment.direction)
        pulumi.export("connectionRouteFilterType", policy_attachment.type)
        pulumi.export("connectionRouteFilterAttachmentStatus", policy_attachment.attachment_status)
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionRouteFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionRouteFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionRouteFilterArgs.__new__(ConnectionRouteFilterArgs)

            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            if route_filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_filter_id'")
            __props__.__dict__["route_filter_id"] = route_filter_id
            __props__.__dict__["attachment_status"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        super(ConnectionRouteFilter, __self__).__init__(
            'equinix:fabric/connectionRouteFilter:ConnectionRouteFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachment_status: Optional[pulumi.Input[str]] = None,
            connection_id: Optional[pulumi.Input[str]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            route_filter_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'ConnectionRouteFilter':
        """
        Get an existing ConnectionRouteFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attachment_status: Status of the Route Filter Policy attachment lifecycle
        :param pulumi.Input[str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        :param pulumi.Input[str] direction: Direction of the filtering of the attached Route Filter Policy
        :param pulumi.Input[str] href: URI to the attached Route Filter Policy on the Connection
        :param pulumi.Input[str] route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter Policy
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionRouteFilterState.__new__(_ConnectionRouteFilterState)

        __props__.__dict__["attachment_status"] = attachment_status
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["direction"] = direction
        __props__.__dict__["href"] = href
        __props__.__dict__["route_filter_id"] = route_filter_id
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return ConnectionRouteFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> pulumi.Output[str]:
        """
        Status of the Route Filter Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[str]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        Direction of the filtering of the attached Route Filter Policy
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        URI to the attached Route Filter Policy on the Connection
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> pulumi.Output[str]:
        """
        Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        return pulumi.get(self, "route_filter_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix Assigned ID for Route Filter Policy
        """
        return pulumi.get(self, "uuid")

