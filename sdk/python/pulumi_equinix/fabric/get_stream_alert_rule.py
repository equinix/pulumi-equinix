# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetStreamAlertRuleResult',
    'AwaitableGetStreamAlertRuleResult',
    'get_stream_alert_rule',
    'get_stream_alert_rule_output',
]

@pulumi.output_type
class GetStreamAlertRuleResult:
    """
    A collection of values returned by getStreamAlertRule.
    """
    def __init__(__self__, alert_rule_id=None, change_log=None, description=None, detection_method=None, enabled=None, href=None, id=None, metric_selector=None, name=None, resource_selector=None, state=None, stream_id=None, type=None, uuid=None):
        if alert_rule_id and not isinstance(alert_rule_id, str):
            raise TypeError("Expected argument 'alert_rule_id' to be a str")
        pulumi.set(__self__, "alert_rule_id", alert_rule_id)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if detection_method and not isinstance(detection_method, dict):
            raise TypeError("Expected argument 'detection_method' to be a dict")
        pulumi.set(__self__, "detection_method", detection_method)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_selector and not isinstance(metric_selector, dict):
            raise TypeError("Expected argument 'metric_selector' to be a dict")
        pulumi.set(__self__, "metric_selector", metric_selector)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_selector and not isinstance(resource_selector, dict):
            raise TypeError("Expected argument 'resource_selector' to be a dict")
        pulumi.set(__self__, "resource_selector", resource_selector)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if stream_id and not isinstance(stream_id, str):
            raise TypeError("Expected argument 'stream_id' to be a str")
        pulumi.set(__self__, "stream_id", stream_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="alertRuleId")
    def alert_rule_id(self) -> str:
        """
        The uuid of the stream alert rule
        """
        return pulumi.get(self, "alert_rule_id")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetStreamAlertRuleChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided stream alert rule description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> 'outputs.GetStreamAlertRuleDetectionMethodResult':
        """
        Detection method for stream alert rule
        """
        return pulumi.get(self, "detection_method")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix assigned URI of the stream alert rule resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> 'outputs.GetStreamAlertRuleMetricSelectorResult':
        """
        Metric selector for the stream alert rule
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-provided stream alert rule name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> 'outputs.GetStreamAlertRuleResourceSelectorResult':
        """
        Lists of metrics to be included/excluded on the stream alert rule
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> str:
        """
        The uuid of the stream that is the target of the stream alert rule
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the stream alert rule
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned unique identifier of the stream subscription resource
        """
        return pulumi.get(self, "uuid")


class AwaitableGetStreamAlertRuleResult(GetStreamAlertRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamAlertRuleResult(
            alert_rule_id=self.alert_rule_id,
            change_log=self.change_log,
            description=self.description,
            detection_method=self.detection_method,
            enabled=self.enabled,
            href=self.href,
            id=self.id,
            metric_selector=self.metric_selector,
            name=self.name,
            resource_selector=self.resource_selector,
            state=self.state,
            stream_id=self.stream_id,
            type=self.type,
            uuid=self.uuid)


def get_stream_alert_rule(alert_rule_id: Optional[str] = None,
                          detection_method: Optional[Union['GetStreamAlertRuleDetectionMethodArgs', 'GetStreamAlertRuleDetectionMethodArgsDict']] = None,
                          metric_selector: Optional[Union['GetStreamAlertRuleMetricSelectorArgs', 'GetStreamAlertRuleMetricSelectorArgsDict']] = None,
                          stream_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamAlertRuleResult:
    """
    ## Example Usage


    :param str alert_rule_id: The uuid of the stream alert rule
    :param Union['GetStreamAlertRuleDetectionMethodArgs', 'GetStreamAlertRuleDetectionMethodArgsDict'] detection_method: Detection method for stream alert rule
    :param Union['GetStreamAlertRuleMetricSelectorArgs', 'GetStreamAlertRuleMetricSelectorArgsDict'] metric_selector: Metric selector for the stream alert rule
    :param str stream_id: The uuid of the stream that is the target of the stream alert rule
    """
    __args__ = dict()
    __args__['alertRuleId'] = alert_rule_id
    __args__['detectionMethod'] = detection_method
    __args__['metricSelector'] = metric_selector
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getStreamAlertRule:getStreamAlertRule', __args__, opts=opts, typ=GetStreamAlertRuleResult).value

    return AwaitableGetStreamAlertRuleResult(
        alert_rule_id=pulumi.get(__ret__, 'alert_rule_id'),
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        detection_method=pulumi.get(__ret__, 'detection_method'),
        enabled=pulumi.get(__ret__, 'enabled'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        metric_selector=pulumi.get(__ret__, 'metric_selector'),
        name=pulumi.get(__ret__, 'name'),
        resource_selector=pulumi.get(__ret__, 'resource_selector'),
        state=pulumi.get(__ret__, 'state'),
        stream_id=pulumi.get(__ret__, 'stream_id'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_stream_alert_rule_output(alert_rule_id: Optional[pulumi.Input[str]] = None,
                                 detection_method: Optional[pulumi.Input[Optional[Union['GetStreamAlertRuleDetectionMethodArgs', 'GetStreamAlertRuleDetectionMethodArgsDict']]]] = None,
                                 metric_selector: Optional[pulumi.Input[Optional[Union['GetStreamAlertRuleMetricSelectorArgs', 'GetStreamAlertRuleMetricSelectorArgsDict']]]] = None,
                                 stream_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamAlertRuleResult]:
    """
    ## Example Usage


    :param str alert_rule_id: The uuid of the stream alert rule
    :param Union['GetStreamAlertRuleDetectionMethodArgs', 'GetStreamAlertRuleDetectionMethodArgsDict'] detection_method: Detection method for stream alert rule
    :param Union['GetStreamAlertRuleMetricSelectorArgs', 'GetStreamAlertRuleMetricSelectorArgsDict'] metric_selector: Metric selector for the stream alert rule
    :param str stream_id: The uuid of the stream that is the target of the stream alert rule
    """
    __args__ = dict()
    __args__['alertRuleId'] = alert_rule_id
    __args__['detectionMethod'] = detection_method
    __args__['metricSelector'] = metric_selector
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getStreamAlertRule:getStreamAlertRule', __args__, opts=opts, typ=GetStreamAlertRuleResult)
    return __ret__.apply(lambda __response__: GetStreamAlertRuleResult(
        alert_rule_id=pulumi.get(__response__, 'alert_rule_id'),
        change_log=pulumi.get(__response__, 'change_log'),
        description=pulumi.get(__response__, 'description'),
        detection_method=pulumi.get(__response__, 'detection_method'),
        enabled=pulumi.get(__response__, 'enabled'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        metric_selector=pulumi.get(__response__, 'metric_selector'),
        name=pulumi.get(__response__, 'name'),
        resource_selector=pulumi.get(__response__, 'resource_selector'),
        state=pulumi.get(__response__, 'state'),
        stream_id=pulumi.get(__response__, 'stream_id'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
