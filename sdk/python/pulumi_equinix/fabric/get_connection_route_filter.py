# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetConnectionRouteFilterResult',
    'AwaitableGetConnectionRouteFilterResult',
    'get_connection_route_filter',
    'get_connection_route_filter_output',
]

@pulumi.output_type
class GetConnectionRouteFilterResult:
    """
    A collection of values returned by getConnectionRouteFilter.
    """
    def __init__(__self__, attachment_status=None, connection_id=None, direction=None, href=None, id=None, route_filter_id=None, type=None, uuid=None):
        if attachment_status and not isinstance(attachment_status, str):
            raise TypeError("Expected argument 'attachment_status' to be a str")
        pulumi.set(__self__, "attachment_status", attachment_status)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if route_filter_id and not isinstance(route_filter_id, str):
            raise TypeError("Expected argument 'route_filter_id' to be a str")
        pulumi.set(__self__, "route_filter_id", route_filter_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Status of the Route Filter Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Direction of the filtering of the attached Route Filter Policy
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI to the attached Route Filter Policy on the Connection
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> str:
        """
        Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
        """
        return pulumi.get(self, "route_filter_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Filter Policy
        """
        return pulumi.get(self, "uuid")


class AwaitableGetConnectionRouteFilterResult(GetConnectionRouteFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionRouteFilterResult(
            attachment_status=self.attachment_status,
            connection_id=self.connection_id,
            direction=self.direction,
            href=self.href,
            id=self.id,
            route_filter_id=self.route_filter_id,
            type=self.type,
            uuid=self.uuid)


def get_connection_route_filter(connection_id: Optional[str] = None,
                                route_filter_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionRouteFilterResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policy = equinix.fabric.get_connection_route_filter(connection_id="<connection_uuid>",
        route_filter_id="<route_filter_uuid>")
    pulumi.export("connectionRouteFilterId", attached_policy.id)
    pulumi.export("connectionRouteFilterConnectionId", attached_policy.connection_id)
    pulumi.export("connectionRouteFilterDirection", attached_policy.direction)
    pulumi.export("connectionRouteFilterType", attached_policy.type)
    pulumi.export("connectionRouteFilterAttachmentStatus", attached_policy.attachment_status)
    ```


    :param str connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
    :param str route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['routeFilterId'] = route_filter_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter', __args__, opts=opts, typ=GetConnectionRouteFilterResult).value

    return AwaitableGetConnectionRouteFilterResult(
        attachment_status=pulumi.get(__ret__, 'attachment_status'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        direction=pulumi.get(__ret__, 'direction'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        route_filter_id=pulumi.get(__ret__, 'route_filter_id'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_connection_route_filter)
def get_connection_route_filter_output(connection_id: Optional[pulumi.Input[str]] = None,
                                       route_filter_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionRouteFilterResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policy = equinix.fabric.get_connection_route_filter(connection_id="<connection_uuid>",
        route_filter_id="<route_filter_uuid>")
    pulumi.export("connectionRouteFilterId", attached_policy.id)
    pulumi.export("connectionRouteFilterConnectionId", attached_policy.connection_id)
    pulumi.export("connectionRouteFilterDirection", attached_policy.direction)
    pulumi.export("connectionRouteFilterType", attached_policy.type)
    pulumi.export("connectionRouteFilterAttachmentStatus", attached_policy.attachment_status)
    ```


    :param str connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
    :param str route_filter_id: Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
    """
    ...
