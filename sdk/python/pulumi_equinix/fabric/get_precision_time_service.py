# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPrecisionTimeServiceResult',
    'AwaitableGetPrecisionTimeServiceResult',
    'get_precision_time_service',
    'get_precision_time_service_output',
]

@pulumi.output_type
class GetPrecisionTimeServiceResult:
    """
    A collection of values returned by getPrecisionTimeService.
    """
    def __init__(__self__, account=None, change_log=None, connections=None, ept_service_id=None, href=None, id=None, ipv4=None, name=None, ntp_advanced_configurations=None, order=None, package=None, precision_time_price=None, project=None, ptp_advanced_configuration=None, state=None, type=None, uuid=None):
        if account and not isinstance(account, dict):
            raise TypeError("Expected argument 'account' to be a dict")
        pulumi.set(__self__, "account", account)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if ept_service_id and not isinstance(ept_service_id, str):
            raise TypeError("Expected argument 'ept_service_id' to be a str")
        pulumi.set(__self__, "ept_service_id", ept_service_id)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4 and not isinstance(ipv4, dict):
            raise TypeError("Expected argument 'ipv4' to be a dict")
        pulumi.set(__self__, "ipv4", ipv4)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ntp_advanced_configurations and not isinstance(ntp_advanced_configurations, list):
            raise TypeError("Expected argument 'ntp_advanced_configurations' to be a list")
        pulumi.set(__self__, "ntp_advanced_configurations", ntp_advanced_configurations)
        if order and not isinstance(order, dict):
            raise TypeError("Expected argument 'order' to be a dict")
        pulumi.set(__self__, "order", order)
        if package and not isinstance(package, dict):
            raise TypeError("Expected argument 'package' to be a dict")
        pulumi.set(__self__, "package", package)
        if precision_time_price and not isinstance(precision_time_price, dict):
            raise TypeError("Expected argument 'precision_time_price' to be a dict")
        pulumi.set(__self__, "precision_time_price", precision_time_price)
        if project and not isinstance(project, dict):
            raise TypeError("Expected argument 'project' to be a dict")
        pulumi.set(__self__, "project", project)
        if ptp_advanced_configuration and not isinstance(ptp_advanced_configuration, dict):
            raise TypeError("Expected argument 'ptp_advanced_configuration' to be a dict")
        pulumi.set(__self__, "ptp_advanced_configuration", ptp_advanced_configuration)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def account(self) -> 'outputs.GetPrecisionTimeServiceAccountResult':
        """
        Equinix User Account associated with Precision Time Service
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetPrecisionTimeServiceChangeLogResult':
        """
        Details of the last change on the route aggregation resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetPrecisionTimeServiceConnectionResult']:
        """
        An array of objects with unique identifiers of connections.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter(name="eptServiceId")
    def ept_service_id(self) -> str:
        """
        The uuid of the EPT Service this data source should retrieve
        """
        return pulumi.get(self, "ept_service_id")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix generated Portal link for the created Precision Time Service
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetPrecisionTimeServiceIpv4Result':
        """
        An object that has Network IP Configurations for Timing Master Servers.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Precision Time Service. Applicable values: Maximum: 24 characters; Allowed characters: alpha-numeric, hyphens ('-') and underscores ('_')
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ntpAdvancedConfigurations")
    def ntp_advanced_configurations(self) -> Optional[Sequence['outputs.GetPrecisionTimeServiceNtpAdvancedConfigurationResult']]:
        """
        NTP Advanced configuration
        """
        return pulumi.get(self, "ntp_advanced_configurations")

    @property
    @pulumi.getter
    def order(self) -> 'outputs.GetPrecisionTimeServiceOrderResult':
        """
        Precision Time Order
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def package(self) -> 'outputs.GetPrecisionTimeServicePackageResult':
        """
        Precision Time Service Package Details
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="precisionTimePrice")
    def precision_time_price(self) -> 'outputs.GetPrecisionTimeServicePrecisionTimePriceResult':
        """
        Precision Time Service Price
        """
        return pulumi.get(self, "precision_time_price")

    @property
    @pulumi.getter
    def project(self) -> Optional['outputs.GetPrecisionTimeServiceProjectResult']:
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="ptpAdvancedConfiguration")
    def ptp_advanced_configuration(self) -> Optional['outputs.GetPrecisionTimeServicePtpAdvancedConfigurationResult']:
        """
        PTP Advanced Configuration
        """
        return pulumi.get(self, "ptp_advanced_configuration")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Indicator of the state of this Precision Time Service
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Choose type of Precision Time Service
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix generated id for the Precision Time Service
        """
        return pulumi.get(self, "uuid")


class AwaitableGetPrecisionTimeServiceResult(GetPrecisionTimeServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrecisionTimeServiceResult(
            account=self.account,
            change_log=self.change_log,
            connections=self.connections,
            ept_service_id=self.ept_service_id,
            href=self.href,
            id=self.id,
            ipv4=self.ipv4,
            name=self.name,
            ntp_advanced_configurations=self.ntp_advanced_configurations,
            order=self.order,
            package=self.package,
            precision_time_price=self.precision_time_price,
            project=self.project,
            ptp_advanced_configuration=self.ptp_advanced_configuration,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_precision_time_service(ept_service_id: Optional[str] = None,
                               ntp_advanced_configurations: Optional[Sequence[Union['GetPrecisionTimeServiceNtpAdvancedConfigurationArgs', 'GetPrecisionTimeServiceNtpAdvancedConfigurationArgsDict']]] = None,
                               project: Optional[Union['GetPrecisionTimeServiceProjectArgs', 'GetPrecisionTimeServiceProjectArgsDict']] = None,
                               ptp_advanced_configuration: Optional[Union['GetPrecisionTimeServicePtpAdvancedConfigurationArgs', 'GetPrecisionTimeServicePtpAdvancedConfigurationArgsDict']] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrecisionTimeServiceResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ept_test = equinix.fabric.get_precision_time_service(ept_service_id="<ept_service_id")
    pulumi.export("eptServiceId", ept_test.id)
    pulumi.export("eptServiceName", ept_test.name)
    pulumi.export("eptServiceState", ept_test.state)
    pulumi.export("eptServiceType", ept_test.type)
    pulumi.export("eptServiceIpv4", ept_test.ipv4)
    pulumi.export("eptServiceConnection", equinix_fabric_precision_time_service["ptp"]["connections"])
    ```


    :param str ept_service_id: The uuid of the EPT Service this data source should retrieve
    :param Sequence[Union['GetPrecisionTimeServiceNtpAdvancedConfigurationArgs', 'GetPrecisionTimeServiceNtpAdvancedConfigurationArgsDict']] ntp_advanced_configurations: NTP Advanced configuration
    :param Union['GetPrecisionTimeServiceProjectArgs', 'GetPrecisionTimeServiceProjectArgsDict'] project: Equinix Project attribute object
    :param Union['GetPrecisionTimeServicePtpAdvancedConfigurationArgs', 'GetPrecisionTimeServicePtpAdvancedConfigurationArgsDict'] ptp_advanced_configuration: PTP Advanced Configuration
    """
    __args__ = dict()
    __args__['eptServiceId'] = ept_service_id
    __args__['ntpAdvancedConfigurations'] = ntp_advanced_configurations
    __args__['project'] = project
    __args__['ptpAdvancedConfiguration'] = ptp_advanced_configuration
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getPrecisionTimeService:getPrecisionTimeService', __args__, opts=opts, typ=GetPrecisionTimeServiceResult).value

    return AwaitableGetPrecisionTimeServiceResult(
        account=pulumi.get(__ret__, 'account'),
        change_log=pulumi.get(__ret__, 'change_log'),
        connections=pulumi.get(__ret__, 'connections'),
        ept_service_id=pulumi.get(__ret__, 'ept_service_id'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ipv4=pulumi.get(__ret__, 'ipv4'),
        name=pulumi.get(__ret__, 'name'),
        ntp_advanced_configurations=pulumi.get(__ret__, 'ntp_advanced_configurations'),
        order=pulumi.get(__ret__, 'order'),
        package=pulumi.get(__ret__, 'package'),
        precision_time_price=pulumi.get(__ret__, 'precision_time_price'),
        project=pulumi.get(__ret__, 'project'),
        ptp_advanced_configuration=pulumi.get(__ret__, 'ptp_advanced_configuration'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_precision_time_service_output(ept_service_id: Optional[pulumi.Input[str]] = None,
                                      ntp_advanced_configurations: Optional[pulumi.Input[Optional[Sequence[Union['GetPrecisionTimeServiceNtpAdvancedConfigurationArgs', 'GetPrecisionTimeServiceNtpAdvancedConfigurationArgsDict']]]]] = None,
                                      project: Optional[pulumi.Input[Optional[Union['GetPrecisionTimeServiceProjectArgs', 'GetPrecisionTimeServiceProjectArgsDict']]]] = None,
                                      ptp_advanced_configuration: Optional[pulumi.Input[Optional[Union['GetPrecisionTimeServicePtpAdvancedConfigurationArgs', 'GetPrecisionTimeServicePtpAdvancedConfigurationArgsDict']]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrecisionTimeServiceResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Precision Time Service by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Precision-Time

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ept_test = equinix.fabric.get_precision_time_service(ept_service_id="<ept_service_id")
    pulumi.export("eptServiceId", ept_test.id)
    pulumi.export("eptServiceName", ept_test.name)
    pulumi.export("eptServiceState", ept_test.state)
    pulumi.export("eptServiceType", ept_test.type)
    pulumi.export("eptServiceIpv4", ept_test.ipv4)
    pulumi.export("eptServiceConnection", equinix_fabric_precision_time_service["ptp"]["connections"])
    ```


    :param str ept_service_id: The uuid of the EPT Service this data source should retrieve
    :param Sequence[Union['GetPrecisionTimeServiceNtpAdvancedConfigurationArgs', 'GetPrecisionTimeServiceNtpAdvancedConfigurationArgsDict']] ntp_advanced_configurations: NTP Advanced configuration
    :param Union['GetPrecisionTimeServiceProjectArgs', 'GetPrecisionTimeServiceProjectArgsDict'] project: Equinix Project attribute object
    :param Union['GetPrecisionTimeServicePtpAdvancedConfigurationArgs', 'GetPrecisionTimeServicePtpAdvancedConfigurationArgsDict'] ptp_advanced_configuration: PTP Advanced Configuration
    """
    __args__ = dict()
    __args__['eptServiceId'] = ept_service_id
    __args__['ntpAdvancedConfigurations'] = ntp_advanced_configurations
    __args__['project'] = project
    __args__['ptpAdvancedConfiguration'] = ptp_advanced_configuration
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getPrecisionTimeService:getPrecisionTimeService', __args__, opts=opts, typ=GetPrecisionTimeServiceResult)
    return __ret__.apply(lambda __response__: GetPrecisionTimeServiceResult(
        account=pulumi.get(__response__, 'account'),
        change_log=pulumi.get(__response__, 'change_log'),
        connections=pulumi.get(__response__, 'connections'),
        ept_service_id=pulumi.get(__response__, 'ept_service_id'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ipv4=pulumi.get(__response__, 'ipv4'),
        name=pulumi.get(__response__, 'name'),
        ntp_advanced_configurations=pulumi.get(__response__, 'ntp_advanced_configurations'),
        order=pulumi.get(__response__, 'order'),
        package=pulumi.get(__response__, 'package'),
        precision_time_price=pulumi.get(__response__, 'precision_time_price'),
        project=pulumi.get(__response__, 'project'),
        ptp_advanced_configuration=pulumi.get(__response__, 'ptp_advanced_configuration'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
