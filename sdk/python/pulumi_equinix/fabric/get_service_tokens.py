# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetServiceTokensResult',
    'AwaitableGetServiceTokensResult',
    'get_service_tokens',
    'get_service_tokens_output',
]

@pulumi.output_type
class GetServiceTokensResult:
    """
    A collection of values returned by getServiceTokens.
    """
    def __init__(__self__, datas=None, filters=None, id=None, pagination=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetServiceTokensDataResult']:
        """
        List of Service Tokens
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetServiceTokensFilterResult']:
        """
        Filters for the Data Source Search Request
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetServiceTokensPaginationResult']:
        """
        Pagination details for the Data Source Search Request
        """
        return pulumi.get(self, "pagination")


class AwaitableGetServiceTokensResult(GetServiceTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceTokensResult(
            datas=self.datas,
            filters=self.filters,
            id=self.id,
            pagination=self.pagination)


def get_service_tokens(filters: Optional[Sequence[Union['GetServiceTokensFilterArgs', 'GetServiceTokensFilterArgsDict']]] = None,
                       pagination: Optional[Union['GetServiceTokensPaginationArgs', 'GetServiceTokensPaginationArgsDict']] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceTokensResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm


    :param Sequence[Union['GetServiceTokensFilterArgs', 'GetServiceTokensFilterArgsDict']] filters: Filters for the Data Source Search Request
    :param Union['GetServiceTokensPaginationArgs', 'GetServiceTokensPaginationArgsDict'] pagination: Pagination details for the Data Source Search Request
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['pagination'] = pagination
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getServiceTokens:getServiceTokens', __args__, opts=opts, typ=GetServiceTokensResult).value

    return AwaitableGetServiceTokensResult(
        datas=pulumi.get(__ret__, 'datas'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'))


@_utilities.lift_output_func(get_service_tokens)
def get_service_tokens_output(filters: Optional[pulumi.Input[Sequence[Union['GetServiceTokensFilterArgs', 'GetServiceTokensFilterArgsDict']]]] = None,
                              pagination: Optional[pulumi.Input[Optional[Union['GetServiceTokensPaginationArgs', 'GetServiceTokensPaginationArgsDict']]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceTokensResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch service token for a given search data set

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm


    :param Sequence[Union['GetServiceTokensFilterArgs', 'GetServiceTokensFilterArgsDict']] filters: Filters for the Data Source Search Request
    :param Union['GetServiceTokensPaginationArgs', 'GetServiceTokensPaginationArgsDict'] pagination: Pagination details for the Data Source Search Request
    """
    ...
