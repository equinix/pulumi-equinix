# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPortResult',
    'AwaitableGetPortResult',
    'get_port',
    'get_port_output',
]

@pulumi.output_type
class GetPortResult:
    """
    A collection of values returned by getPort.
    """
    def __init__(__self__, accounts=None, available_bandwidth=None, bandwidth=None, change_logs=None, description=None, devices=None, encapsulations=None, href=None, id=None, lags=None, locations=None, name=None, operations=None, redundancies=None, service_type=None, state=None, type=None, used_bandwidth=None, uuid=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if available_bandwidth and not isinstance(available_bandwidth, int):
            raise TypeError("Expected argument 'available_bandwidth' to be a int")
        pulumi.set(__self__, "available_bandwidth", available_bandwidth)
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if encapsulations and not isinstance(encapsulations, list):
            raise TypeError("Expected argument 'encapsulations' to be a list")
        pulumi.set(__self__, "encapsulations", encapsulations)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lags and not isinstance(lags, list):
            raise TypeError("Expected argument 'lags' to be a list")
        pulumi.set(__self__, "lags", lags)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if redundancies and not isinstance(redundancies, list):
            raise TypeError("Expected argument 'redundancies' to be a list")
        pulumi.set(__self__, "redundancies", redundancies)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if used_bandwidth and not isinstance(used_bandwidth, int):
            raise TypeError("Expected argument 'used_bandwidth' to be a int")
        pulumi.set(__self__, "used_bandwidth", used_bandwidth)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetPortAccountResult']:
        """
        Customer account information that is associated with this port
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="availableBandwidth")
    def available_bandwidth(self) -> int:
        """
        Port available bandwidth in Mbps
        """
        return pulumi.get(self, "available_bandwidth")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetPortChangeLogResult']:
        """
        Captures port lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Port description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPortDeviceResult']:
        """
        Port device
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def encapsulations(self) -> Sequence['outputs.GetPortEncapsulationResult']:
        """
        Port encapsulation protocol
        """
        return pulumi.get(self, "encapsulations")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Port URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lags(self) -> Sequence['outputs.GetPortLagResult']:
        """
        Port Lag
        """
        return pulumi.get(self, "lags")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetPortLocationResult']:
        """
        Port location information
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetPortOperationResult']:
        """
        Port specific operational data
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortRedundancyResult']:
        """
        Port redundancy information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Port service type
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Port state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Port type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBandwidth")
    def used_bandwidth(self) -> int:
        """
        Port used bandwidth in Mbps
        """
        return pulumi.get(self, "used_bandwidth")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned port identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetPortResult(GetPortResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortResult(
            accounts=self.accounts,
            available_bandwidth=self.available_bandwidth,
            bandwidth=self.bandwidth,
            change_logs=self.change_logs,
            description=self.description,
            devices=self.devices,
            encapsulations=self.encapsulations,
            href=self.href,
            id=self.id,
            lags=self.lags,
            locations=self.locations,
            name=self.name,
            operations=self.operations,
            redundancies=self.redundancies,
            service_type=self.service_type,
            state=self.state,
            type=self.type,
            used_bandwidth=self.used_bandwidth,
            uuid=self.uuid)


def get_port(uuid: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortResult:
    """
    Use this data source to access information about an existing resource.

    :param str uuid: Equinix-assigned port identifier
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getPort:getPort', __args__, opts=opts, typ=GetPortResult).value

    return AwaitableGetPortResult(
        accounts=__ret__.accounts,
        available_bandwidth=__ret__.available_bandwidth,
        bandwidth=__ret__.bandwidth,
        change_logs=__ret__.change_logs,
        description=__ret__.description,
        devices=__ret__.devices,
        encapsulations=__ret__.encapsulations,
        href=__ret__.href,
        id=__ret__.id,
        lags=__ret__.lags,
        locations=__ret__.locations,
        name=__ret__.name,
        operations=__ret__.operations,
        redundancies=__ret__.redundancies,
        service_type=__ret__.service_type,
        state=__ret__.state,
        type=__ret__.type,
        used_bandwidth=__ret__.used_bandwidth,
        uuid=__ret__.uuid)


@_utilities.lift_output_func(get_port)
def get_port_output(uuid: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortResult]:
    """
    Use this data source to access information about an existing resource.

    :param str uuid: Equinix-assigned port identifier
    """
    ...
