# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPortResult',
    'AwaitableGetPortResult',
    'get_port',
    'get_port_output',
]

@pulumi.output_type
class GetPortResult:
    """
    A collection of values returned by getPort.
    """
    def __init__(__self__, account=None, available_bandwidth=None, bandwidth=None, change_log=None, description=None, device=None, encapsulation=None, href=None, id=None, lag_enabled=None, location=None, name=None, operation=None, redundancy=None, service_type=None, state=None, type=None, used_bandwidth=None, uuid=None):
        if account and not isinstance(account, dict):
            raise TypeError("Expected argument 'account' to be a dict")
        pulumi.set(__self__, "account", account)
        if available_bandwidth and not isinstance(available_bandwidth, int):
            raise TypeError("Expected argument 'available_bandwidth' to be a int")
        pulumi.set(__self__, "available_bandwidth", available_bandwidth)
        if bandwidth and not isinstance(bandwidth, int):
            raise TypeError("Expected argument 'bandwidth' to be a int")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, dict):
            raise TypeError("Expected argument 'device' to be a dict")
        pulumi.set(__self__, "device", device)
        if encapsulation and not isinstance(encapsulation, dict):
            raise TypeError("Expected argument 'encapsulation' to be a dict")
        pulumi.set(__self__, "encapsulation", encapsulation)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lag_enabled and not isinstance(lag_enabled, bool):
            raise TypeError("Expected argument 'lag_enabled' to be a bool")
        pulumi.set(__self__, "lag_enabled", lag_enabled)
        if location and not isinstance(location, dict):
            raise TypeError("Expected argument 'location' to be a dict")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operation and not isinstance(operation, dict):
            raise TypeError("Expected argument 'operation' to be a dict")
        pulumi.set(__self__, "operation", operation)
        if redundancy and not isinstance(redundancy, dict):
            raise TypeError("Expected argument 'redundancy' to be a dict")
        pulumi.set(__self__, "redundancy", redundancy)
        if service_type and not isinstance(service_type, str):
            raise TypeError("Expected argument 'service_type' to be a str")
        pulumi.set(__self__, "service_type", service_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if used_bandwidth and not isinstance(used_bandwidth, int):
            raise TypeError("Expected argument 'used_bandwidth' to be a int")
        pulumi.set(__self__, "used_bandwidth", used_bandwidth)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def account(self) -> 'outputs.GetPortAccountResult':
        """
        Customer account information that is associated with this port
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="availableBandwidth")
    def available_bandwidth(self) -> int:
        """
        Port available bandwidth in Mbps
        """
        return pulumi.get(self, "available_bandwidth")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetPortChangeLogResult':
        """
        Captures port lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Port description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> 'outputs.GetPortDeviceResult':
        """
        Port device
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def encapsulation(self) -> 'outputs.GetPortEncapsulationResult':
        """
        Port encapsulation protocol
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Port URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> bool:
        return pulumi.get(self, "lag_enabled")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetPortLocationResult':
        """
        Port location information
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> 'outputs.GetPortOperationResult':
        """
        Port specific operational data
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def redundancy(self) -> 'outputs.GetPortRedundancyResult':
        """
        Port redundancy information
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Port service type
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Port state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Port type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBandwidth")
    def used_bandwidth(self) -> int:
        """
        Port used bandwidth in Mbps
        """
        return pulumi.get(self, "used_bandwidth")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned port identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetPortResult(GetPortResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortResult(
            account=self.account,
            available_bandwidth=self.available_bandwidth,
            bandwidth=self.bandwidth,
            change_log=self.change_log,
            description=self.description,
            device=self.device,
            encapsulation=self.encapsulation,
            href=self.href,
            id=self.id,
            lag_enabled=self.lag_enabled,
            location=self.location,
            name=self.name,
            operation=self.operation,
            redundancy=self.redundancy,
            service_type=self.service_type,
            state=self.state,
            type=self.type,
            used_bandwidth=self.used_bandwidth,
            uuid=self.uuid)


def get_port(uuid: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortResult:
    """
    Use this data source to access information about an existing resource.

    :param str uuid: Equinix-assigned port identifier
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getPort:getPort', __args__, opts=opts, typ=GetPortResult).value

    return AwaitableGetPortResult(
        account=pulumi.get(__ret__, 'account'),
        available_bandwidth=pulumi.get(__ret__, 'available_bandwidth'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        encapsulation=pulumi.get(__ret__, 'encapsulation'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lag_enabled=pulumi.get(__ret__, 'lag_enabled'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        operation=pulumi.get(__ret__, 'operation'),
        redundancy=pulumi.get(__ret__, 'redundancy'),
        service_type=pulumi.get(__ret__, 'service_type'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        used_bandwidth=pulumi.get(__ret__, 'used_bandwidth'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_port)
def get_port_output(uuid: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortResult]:
    """
    Use this data source to access information about an existing resource.

    :param str uuid: Equinix-assigned port identifier
    """
    ...
