# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRouteAggregationRuleResult',
    'AwaitableGetRouteAggregationRuleResult',
    'get_route_aggregation_rule',
    'get_route_aggregation_rule_output',
]

@pulumi.output_type
class GetRouteAggregationRuleResult:
    """
    A collection of values returned by getRouteAggregationRule.
    """
    def __init__(__self__, change=None, change_log=None, description=None, href=None, id=None, name=None, prefix=None, route_aggregation_id=None, route_aggregation_rule_id=None, state=None, type=None, uuid=None):
        if change and not isinstance(change, dict):
            raise TypeError("Expected argument 'change' to be a dict")
        pulumi.set(__self__, "change", change)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if route_aggregation_id and not isinstance(route_aggregation_id, str):
            raise TypeError("Expected argument 'route_aggregation_id' to be a str")
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if route_aggregation_rule_id and not isinstance(route_aggregation_rule_id, str):
            raise TypeError("Expected argument 'route_aggregation_rule_id' to be a str")
        pulumi.set(__self__, "route_aggregation_rule_id", route_aggregation_rule_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def change(self) -> 'outputs.GetRouteAggregationRuleChangeResult':
        """
        Current state of latest route aggregation rule change
        """
        return pulumi.get(self, "change")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetRouteAggregationRuleChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Customer-provided route aggregation rule description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation rule resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer provided name of the route aggregation rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Customer-provided route aggregation rule prefix
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> str:
        """
        The uuid of the route aggregation this data source should retrieve
        """
        return pulumi.get(self, "route_aggregation_id")

    @property
    @pulumi.getter(name="routeAggregationRuleId")
    def route_aggregation_rule_id(self) -> str:
        """
        The uuid of the route aggregation rule this data source should retrieve
        """
        return pulumi.get(self, "route_aggregation_rule_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the route aggregation rule resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the route aggregation rule resource
        """
        return pulumi.get(self, "uuid")


class AwaitableGetRouteAggregationRuleResult(GetRouteAggregationRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteAggregationRuleResult(
            change=self.change,
            change_log=self.change_log,
            description=self.description,
            href=self.href,
            id=self.id,
            name=self.name,
            prefix=self.prefix,
            route_aggregation_id=self.route_aggregation_id,
            route_aggregation_rule_id=self.route_aggregation_rule_id,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_route_aggregation_rule(description: Optional[str] = None,
                               route_aggregation_id: Optional[str] = None,
                               route_aggregation_rule_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteAggregationRuleResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_rule = equinix.fabric.get_route_aggregation_rule(route_aggregation_id="<route_aggregation_id>",
        route_aggregation_rule_id="<route_aggregation_rule_id>")
    pulumi.export("routeAggregationRuleName", ra_rule.name)
    pulumi.export("routeAggregationRuleDescription", ra_rule.description)
    pulumi.export("routeAggregationRuleType", ra_rule.type)
    pulumi.export("routeAggregationRulePrefix", ra_rule.prefix)
    pulumi.export("routeAggregationRuleState", ra_rule.state)
    ```


    :param str description: Customer-provided route aggregation rule description
    :param str route_aggregation_id: The uuid of the route aggregation this data source should retrieve
    :param str route_aggregation_rule_id: The uuid of the route aggregation rule this data source should retrieve
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['routeAggregationId'] = route_aggregation_id
    __args__['routeAggregationRuleId'] = route_aggregation_rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRouteAggregationRule:getRouteAggregationRule', __args__, opts=opts, typ=GetRouteAggregationRuleResult).value

    return AwaitableGetRouteAggregationRuleResult(
        change=pulumi.get(__ret__, 'change'),
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        prefix=pulumi.get(__ret__, 'prefix'),
        route_aggregation_id=pulumi.get(__ret__, 'route_aggregation_id'),
        route_aggregation_rule_id=pulumi.get(__ret__, 'route_aggregation_rule_id'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_route_aggregation_rule_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                      route_aggregation_id: Optional[pulumi.Input[str]] = None,
                                      route_aggregation_rule_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRouteAggregationRuleResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rule by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_rule = equinix.fabric.get_route_aggregation_rule(route_aggregation_id="<route_aggregation_id>",
        route_aggregation_rule_id="<route_aggregation_rule_id>")
    pulumi.export("routeAggregationRuleName", ra_rule.name)
    pulumi.export("routeAggregationRuleDescription", ra_rule.description)
    pulumi.export("routeAggregationRuleType", ra_rule.type)
    pulumi.export("routeAggregationRulePrefix", ra_rule.prefix)
    pulumi.export("routeAggregationRuleState", ra_rule.state)
    ```


    :param str description: Customer-provided route aggregation rule description
    :param str route_aggregation_id: The uuid of the route aggregation this data source should retrieve
    :param str route_aggregation_rule_id: The uuid of the route aggregation rule this data source should retrieve
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['routeAggregationId'] = route_aggregation_id
    __args__['routeAggregationRuleId'] = route_aggregation_rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getRouteAggregationRule:getRouteAggregationRule', __args__, opts=opts, typ=GetRouteAggregationRuleResult)
    return __ret__.apply(lambda __response__: GetRouteAggregationRuleResult(
        change=pulumi.get(__response__, 'change'),
        change_log=pulumi.get(__response__, 'change_log'),
        description=pulumi.get(__response__, 'description'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        prefix=pulumi.get(__response__, 'prefix'),
        route_aggregation_id=pulumi.get(__response__, 'route_aggregation_id'),
        route_aggregation_rule_id=pulumi.get(__response__, 'route_aggregation_rule_id'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
