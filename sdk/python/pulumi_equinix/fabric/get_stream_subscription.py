# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStreamSubscriptionResult',
    'AwaitableGetStreamSubscriptionResult',
    'get_stream_subscription',
    'get_stream_subscription_output',
]

@pulumi.output_type
class GetStreamSubscriptionResult:
    """
    A collection of values returned by getStreamSubscription.
    """
    def __init__(__self__, change_log=None, description=None, enabled=None, event_selector=None, href=None, id=None, metric_selector=None, name=None, sink=None, state=None, stream_id=None, subscription_id=None, type=None, uuid=None):
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if event_selector and not isinstance(event_selector, dict):
            raise TypeError("Expected argument 'event_selector' to be a dict")
        pulumi.set(__self__, "event_selector", event_selector)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_selector and not isinstance(metric_selector, dict):
            raise TypeError("Expected argument 'metric_selector' to be a dict")
        pulumi.set(__self__, "metric_selector", metric_selector)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sink and not isinstance(sink, dict):
            raise TypeError("Expected argument 'sink' to be a dict")
        pulumi.set(__self__, "sink", sink)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if stream_id and not isinstance(stream_id, str):
            raise TypeError("Expected argument 'stream_id' to be a str")
        pulumi.set(__self__, "stream_id", stream_id)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetStreamSubscriptionChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided stream subscription description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventSelector")
    def event_selector(self) -> 'outputs.GetStreamSubscriptionEventSelectorResult':
        """
        Lists of events to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "event_selector")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix assigned URI of the stream subscription resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> 'outputs.GetStreamSubscriptionMetricSelectorResult':
        """
        Lists of metrics to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-provided stream subscription name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sink(self) -> 'outputs.GetStreamSubscriptionSinkResult':
        """
        The details of the subscriber to the Equinix Stream
        """
        return pulumi.get(self, "sink")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> str:
        """
        The uuid of the stream that is the target of the stream subscription
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The uuid of the stream subscription
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned unique identifier of the stream subscription resource
        """
        return pulumi.get(self, "uuid")


class AwaitableGetStreamSubscriptionResult(GetStreamSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamSubscriptionResult(
            change_log=self.change_log,
            description=self.description,
            enabled=self.enabled,
            event_selector=self.event_selector,
            href=self.href,
            id=self.id,
            metric_selector=self.metric_selector,
            name=self.name,
            sink=self.sink,
            state=self.state,
            stream_id=self.stream_id,
            subscription_id=self.subscription_id,
            type=self.type,
            uuid=self.uuid)


def get_stream_subscription(stream_id: Optional[str] = None,
                            subscription_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamSubscriptionResult:
    """
    Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    by_ids = equinix.fabric.get_stream_subscription(stream_id="<stream_id>",
        subscription_id="<subscription_id>")
    ```


    :param str stream_id: The uuid of the stream that is the target of the stream subscription
    :param str subscription_id: The uuid of the stream subscription
    """
    __args__ = dict()
    __args__['streamId'] = stream_id
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getStreamSubscription:getStreamSubscription', __args__, opts=opts, typ=GetStreamSubscriptionResult).value

    return AwaitableGetStreamSubscriptionResult(
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        event_selector=pulumi.get(__ret__, 'event_selector'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        metric_selector=pulumi.get(__ret__, 'metric_selector'),
        name=pulumi.get(__ret__, 'name'),
        sink=pulumi.get(__ret__, 'sink'),
        state=pulumi.get(__ret__, 'state'),
        stream_id=pulumi.get(__ret__, 'stream_id'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_stream_subscription_output(stream_id: Optional[pulumi.Input[str]] = None,
                                   subscription_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamSubscriptionResult]:
    """
    Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Subscription by Stream Id and Subscription Id

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    by_ids = equinix.fabric.get_stream_subscription(stream_id="<stream_id>",
        subscription_id="<subscription_id>")
    ```


    :param str stream_id: The uuid of the stream that is the target of the stream subscription
    :param str subscription_id: The uuid of the stream subscription
    """
    __args__ = dict()
    __args__['streamId'] = stream_id
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getStreamSubscription:getStreamSubscription', __args__, opts=opts, typ=GetStreamSubscriptionResult)
    return __ret__.apply(lambda __response__: GetStreamSubscriptionResult(
        change_log=pulumi.get(__response__, 'change_log'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        event_selector=pulumi.get(__response__, 'event_selector'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        metric_selector=pulumi.get(__response__, 'metric_selector'),
        name=pulumi.get(__response__, 'name'),
        sink=pulumi.get(__response__, 'sink'),
        state=pulumi.get(__response__, 'state'),
        stream_id=pulumi.get(__response__, 'stream_id'),
        subscription_id=pulumi.get(__response__, 'subscription_id'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
