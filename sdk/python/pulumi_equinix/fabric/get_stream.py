# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStreamResult',
    'AwaitableGetStreamResult',
    'get_stream',
    'get_stream_output',
]

@pulumi.output_type
class GetStreamResult:
    """
    A collection of values returned by getStream.
    """
    def __init__(__self__, assets_count=None, change_log=None, description=None, href=None, id=None, name=None, project=None, state=None, stream_id=None, stream_subscriptions_count=None, type=None, uuid=None):
        if assets_count and not isinstance(assets_count, float):
            raise TypeError("Expected argument 'assets_count' to be a float")
        pulumi.set(__self__, "assets_count", assets_count)
        if change_log and not isinstance(change_log, dict):
            raise TypeError("Expected argument 'change_log' to be a dict")
        pulumi.set(__self__, "change_log", change_log)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, dict):
            raise TypeError("Expected argument 'project' to be a dict")
        pulumi.set(__self__, "project", project)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if stream_id and not isinstance(stream_id, str):
            raise TypeError("Expected argument 'stream_id' to be a str")
        pulumi.set(__self__, "stream_id", stream_id)
        if stream_subscriptions_count and not isinstance(stream_subscriptions_count, float):
            raise TypeError("Expected argument 'stream_subscriptions_count' to be a float")
        pulumi.set(__self__, "stream_subscriptions_count", stream_subscriptions_count)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="assetsCount")
    def assets_count(self) -> float:
        """
        Count of the streaming assets attached to the stream resource
        """
        return pulumi.get(self, "assets_count")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetStreamChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided description of the stream resource
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the stream resource in Equinix Portal
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-provided name of the stream resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> 'outputs.GetStreamProjectResult':
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> str:
        """
        The uuid of the stream this data source should retrieve
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamSubscriptionsCount")
    def stream_subscriptions_count(self) -> float:
        """
        Count of the client subscriptions on the stream resource
        """
        return pulumi.get(self, "stream_subscriptions_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Streaming Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the stream resource
        """
        return pulumi.get(self, "uuid")


class AwaitableGetStreamResult(GetStreamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamResult(
            assets_count=self.assets_count,
            change_log=self.change_log,
            description=self.description,
            href=self.href,
            id=self.id,
            name=self.name,
            project=self.project,
            state=self.state,
            stream_id=self.stream_id,
            stream_subscriptions_count=self.stream_subscriptions_count,
            type=self.type,
            uuid=self.uuid)


def get_stream(stream_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    data_stream = equinix.fabric.get_stream(stream_id="<uuid_of_stream>")
    pulumi.export("streamState", data_stream.state)
    ```


    :param str stream_id: The uuid of the stream this data source should retrieve
    """
    __args__ = dict()
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getStream:getStream', __args__, opts=opts, typ=GetStreamResult).value

    return AwaitableGetStreamResult(
        assets_count=pulumi.get(__ret__, 'assets_count'),
        change_log=pulumi.get(__ret__, 'change_log'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        state=pulumi.get(__ret__, 'state'),
        stream_id=pulumi.get(__ret__, 'stream_id'),
        stream_subscriptions_count=pulumi.get(__ret__, 'stream_subscriptions_count'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_stream_output(stream_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStreamResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    data_stream = equinix.fabric.get_stream(stream_id="<uuid_of_stream>")
    pulumi.export("streamState", data_stream.state)
    ```


    :param str stream_id: The uuid of the stream this data source should retrieve
    """
    __args__ = dict()
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getStream:getStream', __args__, opts=opts, typ=GetStreamResult)
    return __ret__.apply(lambda __response__: GetStreamResult(
        assets_count=pulumi.get(__response__, 'assets_count'),
        change_log=pulumi.get(__response__, 'change_log'),
        description=pulumi.get(__response__, 'description'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        state=pulumi.get(__response__, 'state'),
        stream_id=pulumi.get(__response__, 'stream_id'),
        stream_subscriptions_count=pulumi.get(__response__, 'stream_subscriptions_count'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
