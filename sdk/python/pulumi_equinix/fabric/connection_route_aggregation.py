# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionRouteAggregationArgs', 'ConnectionRouteAggregation']

@pulumi.input_type
class ConnectionRouteAggregationArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[_builtins.str],
                 route_aggregation_id: pulumi.Input[_builtins.str],
                 timeouts: Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ConnectionRouteAggregation resource.
        :param pulumi.Input[_builtins.str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        :param pulumi.Input[_builtins.str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> pulumi.Input[_builtins.str]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @route_aggregation_id.setter
    def route_aggregation_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "route_aggregation_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ConnectionRouteAggregationState:
    def __init__(__self__, *,
                 attachment_status: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectionRouteAggregation resources.
        :param pulumi.Input[_builtins.str] attachment_status: Status of the Route Aggregation Policy attachment lifecycle
        :param pulumi.Input[_builtins.str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        :param pulumi.Input[_builtins.str] href: URI to the attached Route Aggregation Policy on the Connection
        :param pulumi.Input[_builtins.str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param pulumi.Input[_builtins.str] type: Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        :param pulumi.Input[_builtins.str] uuid: Equinix Assigned ID for Route Aggregation Policy
        """
        if attachment_status is not None:
            pulumi.set(__self__, "attachment_status", attachment_status)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if route_aggregation_id is not None:
            pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the Route Aggregation Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @attachment_status.setter
    def attachment_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attachment_status", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URI to the attached Route Aggregation Policy on the Connection
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @route_aggregation_id.setter
    def route_aggregation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_aggregation_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ConnectionRouteAggregationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Equinix Assigned ID for Route Aggregation Policy
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation")
class ConnectionRouteAggregation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ConnectionRouteAggregationTimeoutsArgs', 'ConnectionRouteAggregationTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        policy_attachment = equinix.fabric.ConnectionRouteAggregation("policy_attachment",
            route_aggregation_id="<route_aggregation_id>",
            connection_id="<connection_id>")
        pulumi.export("connectionRouteAggregationId", policy_attachment.id)
        pulumi.export("connectionRouteAggregationConnectionId", policy_attachment.connection_id)
        pulumi.export("connectionRouteAggregationType", policy_attachment.type)
        pulumi.export("connectionRouteAggregationAttachmentStatus", policy_attachment.attachment_status)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        :param pulumi.Input[_builtins.str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionRouteAggregationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        policy_attachment = equinix.fabric.ConnectionRouteAggregation("policy_attachment",
            route_aggregation_id="<route_aggregation_id>",
            connection_id="<connection_id>")
        pulumi.export("connectionRouteAggregationId", policy_attachment.id)
        pulumi.export("connectionRouteAggregationConnectionId", policy_attachment.connection_id)
        pulumi.export("connectionRouteAggregationType", policy_attachment.type)
        pulumi.export("connectionRouteAggregationAttachmentStatus", policy_attachment.attachment_status)
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionRouteAggregationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionRouteAggregationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ConnectionRouteAggregationTimeoutsArgs', 'ConnectionRouteAggregationTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionRouteAggregationArgs.__new__(ConnectionRouteAggregationArgs)

            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if route_aggregation_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_aggregation_id'")
            __props__.__dict__["route_aggregation_id"] = route_aggregation_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["attachment_status"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        super(ConnectionRouteAggregation, __self__).__init__(
            'equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attachment_status: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            route_aggregation_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ConnectionRouteAggregationTimeoutsArgs', 'ConnectionRouteAggregationTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            uuid: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectionRouteAggregation':
        """
        Get an existing ConnectionRouteAggregation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] attachment_status: Status of the Route Aggregation Policy attachment lifecycle
        :param pulumi.Input[_builtins.str] connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        :param pulumi.Input[_builtins.str] href: URI to the attached Route Aggregation Policy on the Connection
        :param pulumi.Input[_builtins.str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param pulumi.Input[_builtins.str] type: Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        :param pulumi.Input[_builtins.str] uuid: Equinix Assigned ID for Route Aggregation Policy
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionRouteAggregationState.__new__(_ConnectionRouteAggregationState)

        __props__.__dict__["attachment_status"] = attachment_status
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["href"] = href
        __props__.__dict__["route_aggregation_id"] = route_aggregation_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return ConnectionRouteAggregation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the Route Aggregation Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Aggregation Policy to
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        URI to the attached Route Aggregation Policy on the Connection
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> pulumi.Output[_builtins.str]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ConnectionRouteAggregationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        """
        Equinix Assigned ID for Route Aggregation Policy
        """
        return pulumi.get(self, "uuid")

