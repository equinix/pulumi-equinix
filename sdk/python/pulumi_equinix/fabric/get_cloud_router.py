# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudRouterResult',
    'AwaitableGetCloudRouterResult',
    'get_cloud_router',
    'get_cloud_router_output',
]

@pulumi.output_type
class GetCloudRouterResult:
    """
    A collection of values returned by getCloudRouter.
    """
    def __init__(__self__, accounts=None, bgp_ipv4_routes_count=None, bgp_ipv6_routes_count=None, change_logs=None, connections_count=None, description=None, equinix_asn=None, href=None, id=None, locations=None, name=None, notifications=None, orders=None, packages=None, projects=None, state=None, type=None, uuid=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if bgp_ipv4_routes_count and not isinstance(bgp_ipv4_routes_count, int):
            raise TypeError("Expected argument 'bgp_ipv4_routes_count' to be a int")
        pulumi.set(__self__, "bgp_ipv4_routes_count", bgp_ipv4_routes_count)
        if bgp_ipv6_routes_count and not isinstance(bgp_ipv6_routes_count, int):
            raise TypeError("Expected argument 'bgp_ipv6_routes_count' to be a int")
        pulumi.set(__self__, "bgp_ipv6_routes_count", bgp_ipv6_routes_count)
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if connections_count and not isinstance(connections_count, int):
            raise TypeError("Expected argument 'connections_count' to be a int")
        pulumi.set(__self__, "connections_count", connections_count)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if equinix_asn and not isinstance(equinix_asn, int):
            raise TypeError("Expected argument 'equinix_asn' to be a int")
        pulumi.set(__self__, "equinix_asn", equinix_asn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if orders and not isinstance(orders, list):
            raise TypeError("Expected argument 'orders' to be a list")
        pulumi.set(__self__, "orders", orders)
        if packages and not isinstance(packages, list):
            raise TypeError("Expected argument 'packages' to be a list")
        pulumi.set(__self__, "packages", packages)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetCloudRouterAccountResult']:
        """
        Customer account information that is associated with this Fabric Cloud Router
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="bgpIpv4RoutesCount")
    def bgp_ipv4_routes_count(self) -> int:
        return pulumi.get(self, "bgp_ipv4_routes_count")

    @property
    @pulumi.getter(name="bgpIpv6RoutesCount")
    def bgp_ipv6_routes_count(self) -> int:
        return pulumi.get(self, "bgp_ipv6_routes_count")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetCloudRouterChangeLogResult']:
        """
        Captures Fabric Cloud Router lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided Fabric Cloud Router description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> int:
        """
        Equinix ASN
        """
        return pulumi.get(self, "equinix_asn")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Fabric Cloud Router URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetCloudRouterLocationResult']:
        """
        Fabric Cloud Router location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetCloudRouterNotificationResult']:
        """
        Preferences for notifications on Fabric Cloud Router configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def orders(self) -> Sequence['outputs.GetCloudRouterOrderResult']:
        """
        Order information related to this Fabric Cloud Router
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetCloudRouterPackageResult']:
        """
        Fabric Cloud Router package information
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetCloudRouterProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Fabric Cloud Router overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the Fabric Cloud Router type like XF_GATEWAY
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Fabric Cloud Router identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetCloudRouterResult(GetCloudRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudRouterResult(
            accounts=self.accounts,
            bgp_ipv4_routes_count=self.bgp_ipv4_routes_count,
            bgp_ipv6_routes_count=self.bgp_ipv6_routes_count,
            change_logs=self.change_logs,
            connections_count=self.connections_count,
            description=self.description,
            equinix_asn=self.equinix_asn,
            href=self.href,
            id=self.id,
            locations=self.locations,
            name=self.name,
            notifications=self.notifications,
            orders=self.orders,
            packages=self.packages,
            projects=self.projects,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_cloud_router(projects: Optional[Sequence[pulumi.InputType['GetCloudRouterProjectArgs']]] = None,
                     uuid: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudRouterResult:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetCloudRouterProjectArgs']] projects: Project information
    :param str uuid: Equinix-assigned Fabric Cloud Router identifier
    """
    __args__ = dict()
    __args__['projects'] = projects
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getCloudRouter:getCloudRouter', __args__, opts=opts, typ=GetCloudRouterResult).value

    return AwaitableGetCloudRouterResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        bgp_ipv4_routes_count=pulumi.get(__ret__, 'bgp_ipv4_routes_count'),
        bgp_ipv6_routes_count=pulumi.get(__ret__, 'bgp_ipv6_routes_count'),
        change_logs=pulumi.get(__ret__, 'change_logs'),
        connections_count=pulumi.get(__ret__, 'connections_count'),
        description=pulumi.get(__ret__, 'description'),
        equinix_asn=pulumi.get(__ret__, 'equinix_asn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        locations=pulumi.get(__ret__, 'locations'),
        name=pulumi.get(__ret__, 'name'),
        notifications=pulumi.get(__ret__, 'notifications'),
        orders=pulumi.get(__ret__, 'orders'),
        packages=pulumi.get(__ret__, 'packages'),
        projects=pulumi.get(__ret__, 'projects'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_cloud_router)
def get_cloud_router_output(projects: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCloudRouterProjectArgs']]]]] = None,
                            uuid: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudRouterResult]:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetCloudRouterProjectArgs']] projects: Project information
    :param str uuid: Equinix-assigned Fabric Cloud Router identifier
    """
    ...
