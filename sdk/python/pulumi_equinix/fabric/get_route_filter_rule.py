# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRouteFilterRuleResult',
    'AwaitableGetRouteFilterRuleResult',
    'get_route_filter_rule',
    'get_route_filter_rule_output',
]

@pulumi.output_type
class GetRouteFilterRuleResult:
    """
    A collection of values returned by getRouteFilterRule.
    """
    def __init__(__self__, action=None, change_logs=None, changes=None, description=None, href=None, id=None, name=None, prefix=None, prefix_match=None, route_filter_id=None, state=None, type=None, uuid=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if changes and not isinstance(changes, list):
            raise TypeError("Expected argument 'changes' to be a list")
        pulumi.set(__self__, "changes", changes)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if prefix_match and not isinstance(prefix_match, str):
            raise TypeError("Expected argument 'prefix_match' to be a str")
        pulumi.set(__self__, "prefix_match", prefix_match)
        if route_filter_id and not isinstance(route_filter_id, str):
            raise TypeError("Expected argument 'route_filter_id' to be a str")
        pulumi.set(__self__, "route_filter_id", route_filter_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        Action that will be taken on IP Addresses matching the rule
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetRouteFilterRuleChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @_builtins.property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetRouteFilterRuleChangeResult']:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        """
        Route filter rules URI
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP Address Prefix to Filter on
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> _builtins.str:
        """
        Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        return pulumi.get(self, "prefix_match")

    @_builtins.property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> _builtins.str:
        """
        UUID of the Route Filter Policy the rule is attached to
        """
        return pulumi.get(self, "route_filter_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of the Route Filter Rule in its lifecycle
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        Equinix Assigned ID for Route Filter Rule to retrieve data for
        """
        return pulumi.get(self, "uuid")


class AwaitableGetRouteFilterRuleResult(GetRouteFilterRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteFilterRuleResult(
            action=self.action,
            change_logs=self.change_logs,
            changes=self.changes,
            description=self.description,
            href=self.href,
            id=self.id,
            name=self.name,
            prefix=self.prefix,
            prefix_match=self.prefix_match,
            route_filter_id=self.route_filter_id,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_route_filter_rule(route_filter_id: Optional[_builtins.str] = None,
                          uuid: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteFilterRuleResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    rf_rule = equinix.fabric.get_route_filter_rule(route_filter_id="<route_filter_policy_id>",
        uuid="<route_filter_rule_uuid>")
    pulumi.export("routeFilterRuleName", rf_rule.name)
    pulumi.export("routeFilterRuleDescription", rf_rule.description)
    pulumi.export("routeFilterRulePrefix", rf_rule.prefix)
    pulumi.export("routeFilterRulePrefixMatch", rf_rule.prefix_match)
    ```


    :param _builtins.str route_filter_id: UUID of the Route Filter Policy the rule is attached to
    :param _builtins.str uuid: Equinix Assigned ID for Route Filter Rule to retrieve data for
    """
    __args__ = dict()
    __args__['routeFilterId'] = route_filter_id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRouteFilterRule:getRouteFilterRule', __args__, opts=opts, typ=GetRouteFilterRuleResult).value

    return AwaitableGetRouteFilterRuleResult(
        action=pulumi.get(__ret__, 'action'),
        change_logs=pulumi.get(__ret__, 'change_logs'),
        changes=pulumi.get(__ret__, 'changes'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        prefix=pulumi.get(__ret__, 'prefix'),
        prefix_match=pulumi.get(__ret__, 'prefix_match'),
        route_filter_id=pulumi.get(__ret__, 'route_filter_id'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_route_filter_rule_output(route_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 uuid: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRouteFilterRuleResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    rf_rule = equinix.fabric.get_route_filter_rule(route_filter_id="<route_filter_policy_id>",
        uuid="<route_filter_rule_uuid>")
    pulumi.export("routeFilterRuleName", rf_rule.name)
    pulumi.export("routeFilterRuleDescription", rf_rule.description)
    pulumi.export("routeFilterRulePrefix", rf_rule.prefix)
    pulumi.export("routeFilterRulePrefixMatch", rf_rule.prefix_match)
    ```


    :param _builtins.str route_filter_id: UUID of the Route Filter Policy the rule is attached to
    :param _builtins.str uuid: Equinix Assigned ID for Route Filter Rule to retrieve data for
    """
    __args__ = dict()
    __args__['routeFilterId'] = route_filter_id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getRouteFilterRule:getRouteFilterRule', __args__, opts=opts, typ=GetRouteFilterRuleResult)
    return __ret__.apply(lambda __response__: GetRouteFilterRuleResult(
        action=pulumi.get(__response__, 'action'),
        change_logs=pulumi.get(__response__, 'change_logs'),
        changes=pulumi.get(__response__, 'changes'),
        description=pulumi.get(__response__, 'description'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        prefix=pulumi.get(__response__, 'prefix'),
        prefix_match=pulumi.get(__response__, 'prefix_match'),
        route_filter_id=pulumi.get(__response__, 'route_filter_id'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
