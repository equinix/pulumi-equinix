# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import _enums as _root_enums
from ._enums import *

__all__ = [
    'CloudRouterAccount',
    'CloudRouterChangeLog',
    'CloudRouterLocation',
    'CloudRouterNotification',
    'CloudRouterOrder',
    'CloudRouterPackage',
    'CloudRouterProject',
    'ConnectionASide',
    'ConnectionASideAccessPoint',
    'ConnectionASideAccessPointAccount',
    'ConnectionASideAccessPointGateway',
    'ConnectionASideAccessPointInterface',
    'ConnectionASideAccessPointLinkProtocol',
    'ConnectionASideAccessPointLocation',
    'ConnectionASideAccessPointNetwork',
    'ConnectionASideAccessPointPort',
    'ConnectionASideAccessPointPortRedundancy',
    'ConnectionASideAccessPointProfile',
    'ConnectionASideAccessPointProfileAccessPointTypeConfig',
    'ConnectionASideAccessPointRouter',
    'ConnectionASideAccessPointRoutingProtocol',
    'ConnectionASideAccessPointVirtualDevice',
    'ConnectionASideAdditionalInfo',
    'ConnectionASideServiceToken',
    'ConnectionAccount',
    'ConnectionChangeLog',
    'ConnectionNotification',
    'ConnectionOperation',
    'ConnectionOperationError',
    'ConnectionOperationErrorAdditionalInfo',
    'ConnectionOrder',
    'ConnectionProject',
    'ConnectionRedundancy',
    'ConnectionZSide',
    'ConnectionZSideAccessPoint',
    'ConnectionZSideAccessPointAccount',
    'ConnectionZSideAccessPointGateway',
    'ConnectionZSideAccessPointInterface',
    'ConnectionZSideAccessPointLinkProtocol',
    'ConnectionZSideAccessPointLocation',
    'ConnectionZSideAccessPointNetwork',
    'ConnectionZSideAccessPointPort',
    'ConnectionZSideAccessPointPortRedundancy',
    'ConnectionZSideAccessPointProfile',
    'ConnectionZSideAccessPointProfileAccessPointTypeConfig',
    'ConnectionZSideAccessPointRouter',
    'ConnectionZSideAccessPointRoutingProtocol',
    'ConnectionZSideAccessPointVirtualDevice',
    'ConnectionZSideAdditionalInfo',
    'ConnectionZSideServiceToken',
    'RoutingProtocolBfd',
    'RoutingProtocolBgpIpv4',
    'RoutingProtocolBgpIpv6',
    'RoutingProtocolChange',
    'RoutingProtocolChangeLog',
    'RoutingProtocolDirectIpv4',
    'RoutingProtocolDirectIpv6',
    'RoutingProtocolOperation',
    'RoutingProtocolOperationError',
    'RoutingProtocolOperationErrorAdditionalInfo',
    'ServiceProfileAccessPointTypeConfig',
    'ServiceProfileAccessPointTypeConfigApiConfig',
    'ServiceProfileAccessPointTypeConfigAuthenticationKey',
    'ServiceProfileAccessPointTypeConfigLinkProtocolConfig',
    'ServiceProfileAccount',
    'ServiceProfileChangeLog',
    'ServiceProfileCustomField',
    'ServiceProfileMarketingInfo',
    'ServiceProfileMarketingInfoProcessStep',
    'ServiceProfileMetro',
    'ServiceProfileNotification',
    'ServiceProfilePort',
    'ServiceProfilePortLocation',
    'ServiceProfileProject',
    'ServiceProfileVirtualDevice',
    'ServiceProfileVirtualDeviceLocation',
    'GetCloudRouterAccountResult',
    'GetCloudRouterChangeLogResult',
    'GetCloudRouterLocationResult',
    'GetCloudRouterNotificationResult',
    'GetCloudRouterOrderResult',
    'GetCloudRouterPackageResult',
    'GetCloudRouterProjectResult',
    'GetConnectionASideResult',
    'GetConnectionASideAccessPointResult',
    'GetConnectionASideAccessPointAccountResult',
    'GetConnectionASideAccessPointGatewayResult',
    'GetConnectionASideAccessPointInterfaceResult',
    'GetConnectionASideAccessPointLinkProtocolResult',
    'GetConnectionASideAccessPointLocationResult',
    'GetConnectionASideAccessPointPortResult',
    'GetConnectionASideAccessPointPortRedundancyResult',
    'GetConnectionASideAccessPointProfileResult',
    'GetConnectionASideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult',
    'GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult',
    'GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult',
    'GetConnectionASideAccessPointRouterResult',
    'GetConnectionASideAccessPointVirtualDeviceResult',
    'GetConnectionASideServiceTokenResult',
    'GetConnectionAccountResult',
    'GetConnectionAdditionalInfoResult',
    'GetConnectionChangeLogResult',
    'GetConnectionNotificationResult',
    'GetConnectionOperationResult',
    'GetConnectionOperationErrorResult',
    'GetConnectionOperationErrorAdditionalInfoResult',
    'GetConnectionOrderResult',
    'GetConnectionProjectResult',
    'GetConnectionRedundancyResult',
    'GetConnectionZSideResult',
    'GetConnectionZSideAccessPointResult',
    'GetConnectionZSideAccessPointAccountResult',
    'GetConnectionZSideAccessPointGatewayResult',
    'GetConnectionZSideAccessPointInterfaceResult',
    'GetConnectionZSideAccessPointLinkProtocolResult',
    'GetConnectionZSideAccessPointLocationResult',
    'GetConnectionZSideAccessPointPortResult',
    'GetConnectionZSideAccessPointPortRedundancyResult',
    'GetConnectionZSideAccessPointProfileResult',
    'GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult',
    'GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult',
    'GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult',
    'GetConnectionZSideAccessPointRouterResult',
    'GetConnectionZSideAccessPointVirtualDeviceResult',
    'GetConnectionZSideServiceTokenResult',
    'GetPortAccountResult',
    'GetPortChangeLogResult',
    'GetPortDeviceResult',
    'GetPortDeviceRedundancyResult',
    'GetPortEncapsulationResult',
    'GetPortLocationResult',
    'GetPortOperationResult',
    'GetPortRedundancyResult',
    'GetPortsDatumResult',
    'GetPortsDatumAccountResult',
    'GetPortsDatumChangeLogResult',
    'GetPortsDatumDeviceResult',
    'GetPortsDatumDeviceRedundancyResult',
    'GetPortsDatumEncapsulationResult',
    'GetPortsDatumLocationResult',
    'GetPortsDatumOperationResult',
    'GetPortsDatumRedundancyResult',
    'GetPortsFilterResult',
    'GetRoutingProtocolBfdResult',
    'GetRoutingProtocolBgpIpv4Result',
    'GetRoutingProtocolBgpIpv6Result',
    'GetRoutingProtocolChangeResult',
    'GetRoutingProtocolChangeLogResult',
    'GetRoutingProtocolDirectIpv4Result',
    'GetRoutingProtocolDirectIpv6Result',
    'GetRoutingProtocolOperationResult',
    'GetRoutingProtocolOperationErrorResult',
    'GetRoutingProtocolOperationErrorAdditionalInfoResult',
    'GetServiceProfileAccessPointTypeConfigResult',
    'GetServiceProfileAccessPointTypeConfigApiConfigResult',
    'GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult',
    'GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult',
    'GetServiceProfileAccountResult',
    'GetServiceProfileChangeLogResult',
    'GetServiceProfileCustomFieldResult',
    'GetServiceProfileMarketingInfoResult',
    'GetServiceProfileMarketingInfoProcessStepResult',
    'GetServiceProfileMetroResult',
    'GetServiceProfileNotificationResult',
    'GetServiceProfilePortResult',
    'GetServiceProfilePortLocationResult',
    'GetServiceProfileProjectResult',
    'GetServiceProfilesDatumResult',
    'GetServiceProfilesDatumAccessPointTypeConfigResult',
    'GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult',
    'GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult',
    'GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult',
    'GetServiceProfilesDatumAccountResult',
    'GetServiceProfilesDatumChangeLogResult',
    'GetServiceProfilesDatumCustomFieldResult',
    'GetServiceProfilesDatumMarketingInfoResult',
    'GetServiceProfilesDatumMarketingInfoProcessStepResult',
    'GetServiceProfilesDatumMetroResult',
    'GetServiceProfilesDatumNotificationResult',
    'GetServiceProfilesDatumPortResult',
    'GetServiceProfilesDatumPortLocationResult',
    'GetServiceProfilesDatumProjectResult',
    'GetServiceProfilesFilterResult',
    'GetServiceProfilesSortResult',
]

@pulumi.output_type
class CloudRouterAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: Optional[int] = None):
        """
        :param int account_number: Account Number
        """
        CloudRouterAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_number=account_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_number: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']

        if account_number is not None:
            _setter("account_number", account_number)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")


@pulumi.output_type
class CloudRouterChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        CloudRouterChangeLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']

        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_email is not None:
            _setter("created_by_email", created_by_email)
        if created_by_full_name is not None:
            _setter("created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            _setter("created_date_time", created_date_time)
        if deleted_by is not None:
            _setter("deleted_by", deleted_by)
        if deleted_by_email is not None:
            _setter("deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            _setter("deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            _setter("deleted_date_time", deleted_date_time)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_email is not None:
            _setter("updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            _setter("updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class CloudRouterLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        CloudRouterLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']

        if ibx is not None:
            _setter("ibx", ibx)
        if metro_code is not None:
            _setter("metro_code", metro_code)
        if metro_name is not None:
            _setter("metro_name", metro_name)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class CloudRouterNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        CloudRouterNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            type=type,
            send_interval=send_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             send_interval: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']

        _setter("emails", emails)
        _setter("type", type)
        if send_interval is not None:
            _setter("send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class CloudRouterOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingTier":
            suggest = "billing_tier"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "purchaseOrderNumber":
            suggest = "purchase_order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_tier: Optional[str] = None,
                 order_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 purchase_order_number: Optional[str] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        """
        CloudRouterOrder._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_tier=billing_tier,
            order_id=order_id,
            order_number=order_number,
            purchase_order_number=purchase_order_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_tier: Optional[str] = None,
             order_id: Optional[str] = None,
             order_number: Optional[str] = None,
             purchase_order_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if billing_tier is None and 'billingTier' in kwargs:
            billing_tier = kwargs['billingTier']
        if order_id is None and 'orderId' in kwargs:
            order_id = kwargs['orderId']
        if order_number is None and 'orderNumber' in kwargs:
            order_number = kwargs['orderNumber']
        if purchase_order_number is None and 'purchaseOrderNumber' in kwargs:
            purchase_order_number = kwargs['purchaseOrderNumber']

        if billing_tier is not None:
            _setter("billing_tier", billing_tier)
        if order_id is not None:
            _setter("order_id", order_id)
        if order_number is not None:
            _setter("order_number", order_number)
        if purchase_order_number is not None:
            _setter("purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[str]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[str]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[str]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class CloudRouterPackage(dict):
    def __init__(__self__, *,
                 code: str):
        """
        :param str code: Fabric Cloud Router package code
        """
        CloudRouterPackage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if code is None:
            raise TypeError("Missing 'code' argument")

        _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Fabric Cloud Router package code
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class CloudRouterProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        CloudRouterProject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if href is not None:
            _setter("href", href)
        if project_id is not None:
            _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ConnectionASide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPoint":
            suggest = "access_point"
        elif key == "additionalInfo":
            suggest = "additional_info"
        elif key == "serviceToken":
            suggest = "service_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point: Optional['outputs.ConnectionASideAccessPoint'] = None,
                 additional_info: Optional[Sequence['outputs.ConnectionASideAdditionalInfo']] = None,
                 service_token: Optional['outputs.ConnectionASideServiceToken'] = None):
        """
        :param 'ConnectionASideAccessPointArgs' access_point: Point of access details
        :param Sequence['ConnectionASideAdditionalInfoArgs'] additional_info: Connection side additional information
        :param 'ConnectionASideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        ConnectionASide._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point=access_point,
            additional_info=additional_info,
            service_token=service_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point: Optional['outputs.ConnectionASideAccessPoint'] = None,
             additional_info: Optional[Sequence['outputs.ConnectionASideAdditionalInfo']] = None,
             service_token: Optional['outputs.ConnectionASideServiceToken'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point is None and 'accessPoint' in kwargs:
            access_point = kwargs['accessPoint']
        if additional_info is None and 'additionalInfo' in kwargs:
            additional_info = kwargs['additionalInfo']
        if service_token is None and 'serviceToken' in kwargs:
            service_token = kwargs['serviceToken']

        if access_point is not None:
            _setter("access_point", access_point)
        if additional_info is not None:
            _setter("additional_info", additional_info)
        if service_token is not None:
            _setter("service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.ConnectionASideAccessPoint']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionASideAdditionalInfo']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.ConnectionASideServiceToken']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class ConnectionASideAccessPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "peeringType":
            suggest = "peering_type"
        elif key == "providerConnectionId":
            suggest = "provider_connection_id"
        elif key == "routingProtocols":
            suggest = "routing_protocols"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional['outputs.ConnectionASideAccessPointAccount'] = None,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.ConnectionASideAccessPointGateway'] = None,
                 interface: Optional['outputs.ConnectionASideAccessPointInterface'] = None,
                 link_protocol: Optional['outputs.ConnectionASideAccessPointLinkProtocol'] = None,
                 location: Optional['outputs.ConnectionASideAccessPointLocation'] = None,
                 network: Optional['outputs.ConnectionASideAccessPointNetwork'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.ConnectionASideAccessPointPort'] = None,
                 profile: Optional['outputs.ConnectionASideAccessPointProfile'] = None,
                 provider_connection_id: Optional[str] = None,
                 router: Optional['outputs.ConnectionASideAccessPointRouter'] = None,
                 routing_protocols: Optional[Sequence['outputs.ConnectionASideAccessPointRoutingProtocol']] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ConnectionASideAccessPointVirtualDevice'] = None):
        """
        :param 'ConnectionASideAccessPointAccountArgs' account: Account
        :param str authentication_key: Authentication key for provider based connections
        :param 'ConnectionASideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'ConnectionASideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'ConnectionASideAccessPointLocationArgs' location: Access point location
        :param Union[str, 'AccessPointPeeringType'] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'ConnectionASideAccessPointPortArgs' port: Port access point information
        :param 'ConnectionASideAccessPointProfileArgs' profile: Service Profile
        :param str provider_connection_id: Provider assigned Connection Id
        :param 'ConnectionASideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        :param Sequence['ConnectionASideAccessPointRoutingProtocolArgs'] routing_protocols: Access point routing protocols configuration
        :param str seller_region: Access point seller region
        :param Union[str, 'AccessPointType'] type: Interface type
        :param 'ConnectionASideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        ConnectionASideAccessPoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account=account,
            authentication_key=authentication_key,
            gateway=gateway,
            interface=interface,
            link_protocol=link_protocol,
            location=location,
            network=network,
            peering_type=peering_type,
            port=port,
            profile=profile,
            provider_connection_id=provider_connection_id,
            router=router,
            routing_protocols=routing_protocols,
            seller_region=seller_region,
            type=type,
            virtual_device=virtual_device,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account: Optional['outputs.ConnectionASideAccessPointAccount'] = None,
             authentication_key: Optional[str] = None,
             gateway: Optional['outputs.ConnectionASideAccessPointGateway'] = None,
             interface: Optional['outputs.ConnectionASideAccessPointInterface'] = None,
             link_protocol: Optional['outputs.ConnectionASideAccessPointLinkProtocol'] = None,
             location: Optional['outputs.ConnectionASideAccessPointLocation'] = None,
             network: Optional['outputs.ConnectionASideAccessPointNetwork'] = None,
             peering_type: Optional[str] = None,
             port: Optional['outputs.ConnectionASideAccessPointPort'] = None,
             profile: Optional['outputs.ConnectionASideAccessPointProfile'] = None,
             provider_connection_id: Optional[str] = None,
             router: Optional['outputs.ConnectionASideAccessPointRouter'] = None,
             routing_protocols: Optional[Sequence['outputs.ConnectionASideAccessPointRoutingProtocol']] = None,
             seller_region: Optional[str] = None,
             type: Optional[str] = None,
             virtual_device: Optional['outputs.ConnectionASideAccessPointVirtualDevice'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if authentication_key is None and 'authenticationKey' in kwargs:
            authentication_key = kwargs['authenticationKey']
        if link_protocol is None and 'linkProtocol' in kwargs:
            link_protocol = kwargs['linkProtocol']
        if peering_type is None and 'peeringType' in kwargs:
            peering_type = kwargs['peeringType']
        if provider_connection_id is None and 'providerConnectionId' in kwargs:
            provider_connection_id = kwargs['providerConnectionId']
        if routing_protocols is None and 'routingProtocols' in kwargs:
            routing_protocols = kwargs['routingProtocols']
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if virtual_device is None and 'virtualDevice' in kwargs:
            virtual_device = kwargs['virtualDevice']

        if account is not None:
            _setter("account", account)
        if authentication_key is not None:
            _setter("authentication_key", authentication_key)
        if gateway is not None:
            _setter("gateway", gateway)
        if interface is not None:
            _setter("interface", interface)
        if link_protocol is not None:
            _setter("link_protocol", link_protocol)
        if location is not None:
            _setter("location", location)
        if network is not None:
            _setter("network", network)
        if peering_type is not None:
            _setter("peering_type", peering_type)
        if port is not None:
            _setter("port", port)
        if profile is not None:
            _setter("profile", profile)
        if provider_connection_id is not None:
            _setter("provider_connection_id", provider_connection_id)
        if router is not None:
            _setter("router", router)
        if routing_protocols is not None:
            _setter("routing_protocols", routing_protocols)
        if seller_region is not None:
            _setter("seller_region", seller_region)
        if type is not None:
            _setter("type", type)
        if virtual_device is not None:
            _setter("virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional['outputs.ConnectionASideAccessPointAccount']:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def gateway(self) -> Optional['outputs.ConnectionASideAccessPointGateway']:
        warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
        pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")

        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ConnectionASideAccessPointInterface']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ConnectionASideAccessPointLinkProtocol']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ConnectionASideAccessPointLocation']:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ConnectionASideAccessPointNetwork']:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ConnectionASideAccessPointPort']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.ConnectionASideAccessPointProfile']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[str]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.ConnectionASideAccessPointRouter']:
        """
        Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="routingProtocols")
    def routing_protocols(self) -> Optional[Sequence['outputs.ConnectionASideAccessPointRoutingProtocol']]:
        """
        Access point routing protocols configuration
        """
        return pulumi.get(self, "routing_protocols")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ConnectionASideAccessPointVirtualDevice']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ConnectionASideAccessPointAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None):
        ConnectionASideAccessPointAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']

        if account_name is not None:
            _setter("account_name", account_name)
        if account_number is not None:
            _setter("account_number", account_number)
        if global_cust_id is not None:
            _setter("global_cust_id", global_cust_id)
        if global_org_id is not None:
            _setter("global_org_id", global_org_id)
        if global_organization_name is not None:
            _setter("global_organization_name", global_organization_name)
        if org_id is not None:
            _setter("org_id", org_id)
        if organization_name is not None:
            _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class ConnectionASideAccessPointGateway(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointGateway._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointInterface(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param Union[str, 'AccessPointLinkProtocolType'] type: Interface type
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        ConnectionASideAccessPointLinkProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            vlan_c_tag=vlan_c_tag,
            vlan_s_tag=vlan_s_tag,
            vlan_tag=vlan_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             vlan_c_tag: Optional[int] = None,
             vlan_s_tag: Optional[int] = None,
             vlan_tag: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if vlan_c_tag is None and 'vlanCTag' in kwargs:
            vlan_c_tag = kwargs['vlanCTag']
        if vlan_s_tag is None and 'vlanSTag' in kwargs:
            vlan_s_tag = kwargs['vlanSTag']
        if vlan_tag is None and 'vlanTag' in kwargs:
            vlan_tag = kwargs['vlanTag']

        if type is not None:
            _setter("type", type)
        if vlan_c_tag is not None:
            _setter("vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            _setter("vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            _setter("vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ConnectionASideAccessPointLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param Union[str, '_root_enums.Metro'] metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        ConnectionASideAccessPointLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']

        if ibx is not None:
            _setter("ibx", ibx)
        if metro_code is not None:
            _setter("metro_code", metro_code)
        if metro_name is not None:
            _setter("metro_name", metro_name)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ConnectionASideAccessPointNetwork(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointNetwork._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointPort(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 redundancies: Optional[Sequence['outputs.ConnectionASideAccessPointPortRedundancy']] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['ConnectionASideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointPort._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            name=name,
            redundancies=redundancies,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.ConnectionASideAccessPointPortRedundancy']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if name is not None:
            _setter("name", name)
        if redundancies is not None:
            _setter("redundancies", redundancies)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[Sequence['outputs.ConnectionASideAccessPointPortRedundancy']]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointPortRedundancy(dict):
    def __init__(__self__, *,
                 priority: Optional[str] = None):
        """
        :param str priority: Priority type- PRIMARY, SECONDARY
        """
        ConnectionASideAccessPointPortRedundancy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionASideAccessPointProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointTypeConfigs":
            suggest = "access_point_type_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 access_point_type_configs: Optional[Sequence['outputs.ConnectionASideAccessPointProfileAccessPointTypeConfig']] = None,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param Union[str, 'ProfileType'] type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        :param Sequence['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Unique Resource Identifier
        :param str name: Port name
        """
        ConnectionASideAccessPointProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
            access_point_type_configs=access_point_type_configs,
            description=description,
            href=href,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             access_point_type_configs: Optional[Sequence['outputs.ConnectionASideAccessPointProfileAccessPointTypeConfig']] = None,
             description: Optional[str] = None,
             href: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if access_point_type_configs is None and 'accessPointTypeConfigs' in kwargs:
            access_point_type_configs = kwargs['accessPointTypeConfigs']

        _setter("type", type)
        _setter("uuid", uuid)
        if access_point_type_configs is not None:
            _setter("access_point_type_configs", access_point_type_configs)
        if description is not None:
            _setter("description", description)
        if href is not None:
            _setter("href", href)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[Sequence['outputs.ConnectionASideAccessPointProfileAccessPointTypeConfig']]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConnectionASideAccessPointProfileAccessPointTypeConfig(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointProfileAccessPointTypeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointRouter(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointRouter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointRoutingProtocol(dict):
    def __init__(__self__, *,
                 state: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str state: Routing protocol instance state
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointRoutingProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state=state,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if state is not None:
            _setter("state", state)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointVirtualDevice(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideAccessPointVirtualDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAdditionalInfo(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        ConnectionASideAdditionalInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionASideServiceToken(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: User-provided service description
        :param str href: Unique Resource Identifier
        :param Union[str, 'ServiceTokenType'] type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionASideServiceToken._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if href is not None:
            _setter("href", href)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None):
        ConnectionAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']

        if account_name is not None:
            _setter("account_name", account_name)
        if account_number is not None:
            _setter("account_number", account_number)
        if global_cust_id is not None:
            _setter("global_cust_id", global_cust_id)
        if global_org_id is not None:
            _setter("global_org_id", global_org_id)
        if global_organization_name is not None:
            _setter("global_organization_name", global_organization_name)
        if org_id is not None:
            _setter("org_id", org_id)
        if organization_name is not None:
            _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class ConnectionChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        ConnectionChangeLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']

        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_email is not None:
            _setter("created_by_email", created_by_email)
        if created_by_full_name is not None:
            _setter("created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            _setter("created_date_time", created_date_time)
        if deleted_by is not None:
            _setter("deleted_by", deleted_by)
        if deleted_by_email is not None:
            _setter("deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            _setter("deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            _setter("deleted_date_time", deleted_date_time)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_email is not None:
            _setter("updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            _setter("updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class ConnectionNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param Union[str, 'NotificationsType'] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        ConnectionNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            type=type,
            send_interval=send_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             send_interval: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']

        _setter("emails", emails)
        _setter("type", type)
        if send_interval is not None:
            _setter("send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class ConnectionOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixStatus":
            suggest = "equinix_status"
        elif key == "providerStatus":
            suggest = "provider_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_status: Optional[str] = None,
                 errors: Optional[Sequence['outputs.ConnectionOperationError']] = None,
                 provider_status: Optional[str] = None):
        ConnectionOperation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_status=equinix_status,
            errors=errors,
            provider_status=provider_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_status: Optional[str] = None,
             errors: Optional[Sequence['outputs.ConnectionOperationError']] = None,
             provider_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_status is None and 'equinixStatus' in kwargs:
            equinix_status = kwargs['equinixStatus']
        if provider_status is None and 'providerStatus' in kwargs:
            provider_status = kwargs['providerStatus']

        if equinix_status is not None:
            _setter("equinix_status", equinix_status)
        if errors is not None:
            _setter("errors", errors)
        if provider_status is not None:
            _setter("provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> Optional[str]:
        return pulumi.get(self, "equinix_status")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.ConnectionOperationError']]:
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> Optional[str]:
        return pulumi.get(self, "provider_status")


@pulumi.output_type
class ConnectionOperationError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOperationError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOperationError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOperationError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Optional[Sequence['outputs.ConnectionOperationErrorAdditionalInfo']] = None,
                 correlation_id: Optional[str] = None,
                 details: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 help: Optional[str] = None):
        """
        :param Sequence['ConnectionOperationErrorAdditionalInfoArgs'] additional_info: Connection side additional information
        """
        ConnectionOperationError._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_info=additional_info,
            correlation_id=correlation_id,
            details=details,
            error_code=error_code,
            error_message=error_message,
            help=help,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_info: Optional[Sequence['outputs.ConnectionOperationErrorAdditionalInfo']] = None,
             correlation_id: Optional[str] = None,
             details: Optional[str] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             help: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if additional_info is None and 'additionalInfo' in kwargs:
            additional_info = kwargs['additionalInfo']
        if correlation_id is None and 'correlationId' in kwargs:
            correlation_id = kwargs['correlationId']
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_message is None and 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']

        if additional_info is not None:
            _setter("additional_info", additional_info)
        if correlation_id is not None:
            _setter("correlation_id", correlation_id)
        if details is not None:
            _setter("details", details)
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if help is not None:
            _setter("help", help)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionOperationErrorAdditionalInfo']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[str]:
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> Optional[str]:
        return pulumi.get(self, "help")


@pulumi.output_type
class ConnectionOperationErrorAdditionalInfo(dict):
    def __init__(__self__, *,
                 property: Optional[str] = None,
                 reason: Optional[str] = None):
        ConnectionOperationErrorAdditionalInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property=property,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if property is not None:
            _setter("property", property)
        if reason is not None:
            _setter("reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ConnectionOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingTier":
            suggest = "billing_tier"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "purchaseOrderNumber":
            suggest = "purchase_order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_tier: Optional[str] = None,
                 order_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 purchase_order_number: Optional[str] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        """
        ConnectionOrder._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_tier=billing_tier,
            order_id=order_id,
            order_number=order_number,
            purchase_order_number=purchase_order_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_tier: Optional[str] = None,
             order_id: Optional[str] = None,
             order_number: Optional[str] = None,
             purchase_order_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if billing_tier is None and 'billingTier' in kwargs:
            billing_tier = kwargs['billingTier']
        if order_id is None and 'orderId' in kwargs:
            order_id = kwargs['orderId']
        if order_number is None and 'orderNumber' in kwargs:
            order_number = kwargs['orderNumber']
        if purchase_order_number is None and 'purchaseOrderNumber' in kwargs:
            purchase_order_number = kwargs['purchaseOrderNumber']

        if billing_tier is not None:
            _setter("billing_tier", billing_tier)
        if order_id is not None:
            _setter("order_id", order_id)
        if order_number is not None:
            _setter("order_number", order_number)
        if purchase_order_number is not None:
            _setter("purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[str]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[str]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[str]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class ConnectionProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        ConnectionProject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if href is not None:
            _setter("href", href)
        if project_id is not None:
            _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ConnectionRedundancy(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 priority: Optional[str] = None):
        """
        :param str group: Redundancy group identifier
        :param str priority: Priority type- PRIMARY, SECONDARY
        """
        ConnectionRedundancy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if group is not None:
            _setter("group", group)
        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Redundancy group identifier
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionZSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPoint":
            suggest = "access_point"
        elif key == "additionalInfo":
            suggest = "additional_info"
        elif key == "serviceToken":
            suggest = "service_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point: Optional['outputs.ConnectionZSideAccessPoint'] = None,
                 additional_info: Optional[Sequence['outputs.ConnectionZSideAdditionalInfo']] = None,
                 service_token: Optional['outputs.ConnectionZSideServiceToken'] = None):
        """
        :param 'ConnectionZSideAccessPointArgs' access_point: Point of access details
        :param Sequence['ConnectionZSideAdditionalInfoArgs'] additional_info: Connection side additional information
        :param 'ConnectionZSideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        ConnectionZSide._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point=access_point,
            additional_info=additional_info,
            service_token=service_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point: Optional['outputs.ConnectionZSideAccessPoint'] = None,
             additional_info: Optional[Sequence['outputs.ConnectionZSideAdditionalInfo']] = None,
             service_token: Optional['outputs.ConnectionZSideServiceToken'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point is None and 'accessPoint' in kwargs:
            access_point = kwargs['accessPoint']
        if additional_info is None and 'additionalInfo' in kwargs:
            additional_info = kwargs['additionalInfo']
        if service_token is None and 'serviceToken' in kwargs:
            service_token = kwargs['serviceToken']

        if access_point is not None:
            _setter("access_point", access_point)
        if additional_info is not None:
            _setter("additional_info", additional_info)
        if service_token is not None:
            _setter("service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.ConnectionZSideAccessPoint']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionZSideAdditionalInfo']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.ConnectionZSideServiceToken']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class ConnectionZSideAccessPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "peeringType":
            suggest = "peering_type"
        elif key == "providerConnectionId":
            suggest = "provider_connection_id"
        elif key == "routingProtocols":
            suggest = "routing_protocols"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional['outputs.ConnectionZSideAccessPointAccount'] = None,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.ConnectionZSideAccessPointGateway'] = None,
                 interface: Optional['outputs.ConnectionZSideAccessPointInterface'] = None,
                 link_protocol: Optional['outputs.ConnectionZSideAccessPointLinkProtocol'] = None,
                 location: Optional['outputs.ConnectionZSideAccessPointLocation'] = None,
                 network: Optional['outputs.ConnectionZSideAccessPointNetwork'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.ConnectionZSideAccessPointPort'] = None,
                 profile: Optional['outputs.ConnectionZSideAccessPointProfile'] = None,
                 provider_connection_id: Optional[str] = None,
                 router: Optional['outputs.ConnectionZSideAccessPointRouter'] = None,
                 routing_protocols: Optional[Sequence['outputs.ConnectionZSideAccessPointRoutingProtocol']] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ConnectionZSideAccessPointVirtualDevice'] = None):
        """
        :param 'ConnectionZSideAccessPointAccountArgs' account: Account
        :param str authentication_key: Authentication key for provider based connections
        :param 'ConnectionZSideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'ConnectionZSideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'ConnectionZSideAccessPointLocationArgs' location: Access point location
        :param Union[str, 'AccessPointPeeringType'] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'ConnectionZSideAccessPointPortArgs' port: Port access point information
        :param 'ConnectionZSideAccessPointProfileArgs' profile: Service Profile
        :param str provider_connection_id: Provider assigned Connection Id
        :param 'ConnectionZSideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        :param Sequence['ConnectionZSideAccessPointRoutingProtocolArgs'] routing_protocols: Access point routing protocols configuration
        :param str seller_region: Access point seller region
        :param Union[str, 'AccessPointType'] type: Interface type
        :param 'ConnectionZSideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        ConnectionZSideAccessPoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account=account,
            authentication_key=authentication_key,
            gateway=gateway,
            interface=interface,
            link_protocol=link_protocol,
            location=location,
            network=network,
            peering_type=peering_type,
            port=port,
            profile=profile,
            provider_connection_id=provider_connection_id,
            router=router,
            routing_protocols=routing_protocols,
            seller_region=seller_region,
            type=type,
            virtual_device=virtual_device,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account: Optional['outputs.ConnectionZSideAccessPointAccount'] = None,
             authentication_key: Optional[str] = None,
             gateway: Optional['outputs.ConnectionZSideAccessPointGateway'] = None,
             interface: Optional['outputs.ConnectionZSideAccessPointInterface'] = None,
             link_protocol: Optional['outputs.ConnectionZSideAccessPointLinkProtocol'] = None,
             location: Optional['outputs.ConnectionZSideAccessPointLocation'] = None,
             network: Optional['outputs.ConnectionZSideAccessPointNetwork'] = None,
             peering_type: Optional[str] = None,
             port: Optional['outputs.ConnectionZSideAccessPointPort'] = None,
             profile: Optional['outputs.ConnectionZSideAccessPointProfile'] = None,
             provider_connection_id: Optional[str] = None,
             router: Optional['outputs.ConnectionZSideAccessPointRouter'] = None,
             routing_protocols: Optional[Sequence['outputs.ConnectionZSideAccessPointRoutingProtocol']] = None,
             seller_region: Optional[str] = None,
             type: Optional[str] = None,
             virtual_device: Optional['outputs.ConnectionZSideAccessPointVirtualDevice'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if authentication_key is None and 'authenticationKey' in kwargs:
            authentication_key = kwargs['authenticationKey']
        if link_protocol is None and 'linkProtocol' in kwargs:
            link_protocol = kwargs['linkProtocol']
        if peering_type is None and 'peeringType' in kwargs:
            peering_type = kwargs['peeringType']
        if provider_connection_id is None and 'providerConnectionId' in kwargs:
            provider_connection_id = kwargs['providerConnectionId']
        if routing_protocols is None and 'routingProtocols' in kwargs:
            routing_protocols = kwargs['routingProtocols']
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if virtual_device is None and 'virtualDevice' in kwargs:
            virtual_device = kwargs['virtualDevice']

        if account is not None:
            _setter("account", account)
        if authentication_key is not None:
            _setter("authentication_key", authentication_key)
        if gateway is not None:
            _setter("gateway", gateway)
        if interface is not None:
            _setter("interface", interface)
        if link_protocol is not None:
            _setter("link_protocol", link_protocol)
        if location is not None:
            _setter("location", location)
        if network is not None:
            _setter("network", network)
        if peering_type is not None:
            _setter("peering_type", peering_type)
        if port is not None:
            _setter("port", port)
        if profile is not None:
            _setter("profile", profile)
        if provider_connection_id is not None:
            _setter("provider_connection_id", provider_connection_id)
        if router is not None:
            _setter("router", router)
        if routing_protocols is not None:
            _setter("routing_protocols", routing_protocols)
        if seller_region is not None:
            _setter("seller_region", seller_region)
        if type is not None:
            _setter("type", type)
        if virtual_device is not None:
            _setter("virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional['outputs.ConnectionZSideAccessPointAccount']:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def gateway(self) -> Optional['outputs.ConnectionZSideAccessPointGateway']:
        warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
        pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")

        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ConnectionZSideAccessPointInterface']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ConnectionZSideAccessPointLinkProtocol']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ConnectionZSideAccessPointLocation']:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ConnectionZSideAccessPointNetwork']:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ConnectionZSideAccessPointPort']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.ConnectionZSideAccessPointProfile']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[str]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.ConnectionZSideAccessPointRouter']:
        """
        Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="routingProtocols")
    def routing_protocols(self) -> Optional[Sequence['outputs.ConnectionZSideAccessPointRoutingProtocol']]:
        """
        Access point routing protocols configuration
        """
        return pulumi.get(self, "routing_protocols")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ConnectionZSideAccessPointVirtualDevice']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ConnectionZSideAccessPointAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None):
        ConnectionZSideAccessPointAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']

        if account_name is not None:
            _setter("account_name", account_name)
        if account_number is not None:
            _setter("account_number", account_number)
        if global_cust_id is not None:
            _setter("global_cust_id", global_cust_id)
        if global_org_id is not None:
            _setter("global_org_id", global_org_id)
        if global_organization_name is not None:
            _setter("global_organization_name", global_organization_name)
        if org_id is not None:
            _setter("org_id", org_id)
        if organization_name is not None:
            _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class ConnectionZSideAccessPointGateway(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointGateway._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointInterface(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if id is not None:
            _setter("id", id)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param Union[str, 'AccessPointLinkProtocolType'] type: Interface type
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        ConnectionZSideAccessPointLinkProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            vlan_c_tag=vlan_c_tag,
            vlan_s_tag=vlan_s_tag,
            vlan_tag=vlan_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             vlan_c_tag: Optional[int] = None,
             vlan_s_tag: Optional[int] = None,
             vlan_tag: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if vlan_c_tag is None and 'vlanCTag' in kwargs:
            vlan_c_tag = kwargs['vlanCTag']
        if vlan_s_tag is None and 'vlanSTag' in kwargs:
            vlan_s_tag = kwargs['vlanSTag']
        if vlan_tag is None and 'vlanTag' in kwargs:
            vlan_tag = kwargs['vlanTag']

        if type is not None:
            _setter("type", type)
        if vlan_c_tag is not None:
            _setter("vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            _setter("vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            _setter("vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ConnectionZSideAccessPointLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param Union[str, '_root_enums.Metro'] metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        ConnectionZSideAccessPointLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']

        if ibx is not None:
            _setter("ibx", ibx)
        if metro_code is not None:
            _setter("metro_code", metro_code)
        if metro_name is not None:
            _setter("metro_name", metro_name)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ConnectionZSideAccessPointNetwork(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointNetwork._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointPort(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 redundancies: Optional[Sequence['outputs.ConnectionZSideAccessPointPortRedundancy']] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['ConnectionZSideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointPort._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            name=name,
            redundancies=redundancies,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.ConnectionZSideAccessPointPortRedundancy']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if name is not None:
            _setter("name", name)
        if redundancies is not None:
            _setter("redundancies", redundancies)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[Sequence['outputs.ConnectionZSideAccessPointPortRedundancy']]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointPortRedundancy(dict):
    def __init__(__self__, *,
                 priority: Optional[str] = None):
        """
        :param str priority: Priority type- PRIMARY, SECONDARY
        """
        ConnectionZSideAccessPointPortRedundancy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionZSideAccessPointProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointTypeConfigs":
            suggest = "access_point_type_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 access_point_type_configs: Optional[Sequence['outputs.ConnectionZSideAccessPointProfileAccessPointTypeConfig']] = None,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param Union[str, 'ProfileType'] type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        :param Sequence['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Unique Resource Identifier
        :param str name: Port name
        """
        ConnectionZSideAccessPointProfile._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
            access_point_type_configs=access_point_type_configs,
            description=description,
            href=href,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             access_point_type_configs: Optional[Sequence['outputs.ConnectionZSideAccessPointProfileAccessPointTypeConfig']] = None,
             description: Optional[str] = None,
             href: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if access_point_type_configs is None and 'accessPointTypeConfigs' in kwargs:
            access_point_type_configs = kwargs['accessPointTypeConfigs']

        _setter("type", type)
        _setter("uuid", uuid)
        if access_point_type_configs is not None:
            _setter("access_point_type_configs", access_point_type_configs)
        if description is not None:
            _setter("description", description)
        if href is not None:
            _setter("href", href)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[Sequence['outputs.ConnectionZSideAccessPointProfileAccessPointTypeConfig']]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConnectionZSideAccessPointProfileAccessPointTypeConfig(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointProfileAccessPointTypeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointRouter(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointRouter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointRoutingProtocol(dict):
    def __init__(__self__, *,
                 state: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str state: Routing protocol instance state
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointRoutingProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state=state,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if state is not None:
            _setter("state", state)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointVirtualDevice(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideAccessPointVirtualDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAdditionalInfo(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        ConnectionZSideAdditionalInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionZSideServiceToken(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: User-provided service description
        :param str href: Unique Resource Identifier
        :param Union[str, 'ServiceTokenType'] type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        ConnectionZSideServiceToken._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if href is not None:
            _setter("href", href)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RoutingProtocolBfd(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Bidirectional Forwarding Detection enablement
        :param str interval: Interval range between the received BFD control packets
        """
        RoutingProtocolBfd._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            interval=interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             interval: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")

        _setter("enabled", enabled)
        if interval is not None:
            _setter("interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class RoutingProtocolBgpIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerPeerIp":
            suggest = "customer_peer_ip"
        elif key == "equinixPeerIp":
            suggest = "equinix_peer_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolBgpIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolBgpIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolBgpIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_peer_ip: str,
                 enabled: Optional[bool] = None,
                 equinix_peer_ip: Optional[str] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param bool enabled: Admin status for the BGP session
        :param str equinix_peer_ip: Equinix side peering ip
        """
        RoutingProtocolBgpIpv4._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_peer_ip=customer_peer_ip,
            enabled=enabled,
            equinix_peer_ip=equinix_peer_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_peer_ip: Optional[str] = None,
             enabled: Optional[bool] = None,
             equinix_peer_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if customer_peer_ip is None and 'customerPeerIp' in kwargs:
            customer_peer_ip = kwargs['customerPeerIp']
        if customer_peer_ip is None:
            raise TypeError("Missing 'customer_peer_ip' argument")
        if equinix_peer_ip is None and 'equinixPeerIp' in kwargs:
            equinix_peer_ip = kwargs['equinixPeerIp']

        _setter("customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            _setter("enabled", enabled)
        if equinix_peer_ip is not None:
            _setter("equinix_peer_ip", equinix_peer_ip)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[str]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")


@pulumi.output_type
class RoutingProtocolBgpIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerPeerIp":
            suggest = "customer_peer_ip"
        elif key == "equinixPeerIp":
            suggest = "equinix_peer_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolBgpIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolBgpIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolBgpIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_peer_ip: str,
                 enabled: Optional[bool] = None,
                 equinix_peer_ip: Optional[str] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param bool enabled: Admin status for the BGP session
        :param str equinix_peer_ip: Equinix side peering ip
        """
        RoutingProtocolBgpIpv6._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_peer_ip=customer_peer_ip,
            enabled=enabled,
            equinix_peer_ip=equinix_peer_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_peer_ip: Optional[str] = None,
             enabled: Optional[bool] = None,
             equinix_peer_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if customer_peer_ip is None and 'customerPeerIp' in kwargs:
            customer_peer_ip = kwargs['customerPeerIp']
        if customer_peer_ip is None:
            raise TypeError("Missing 'customer_peer_ip' argument")
        if equinix_peer_ip is None and 'equinixPeerIp' in kwargs:
            equinix_peer_ip = kwargs['equinixPeerIp']

        _setter("customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            _setter("enabled", enabled)
        if equinix_peer_ip is not None:
            _setter("equinix_peer_ip", equinix_peer_ip)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[str]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")


@pulumi.output_type
class RoutingProtocolChange(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        RoutingProtocolChange._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if href is not None:
            _setter("href", href)
        if type is not None:
            _setter("type", type)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RoutingProtocolChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        RoutingProtocolChangeLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']

        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_email is not None:
            _setter("created_by_email", created_by_email)
        if created_by_full_name is not None:
            _setter("created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            _setter("created_date_time", created_date_time)
        if deleted_by is not None:
            _setter("deleted_by", deleted_by)
        if deleted_by_email is not None:
            _setter("deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            _setter("deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            _setter("deleted_date_time", deleted_date_time)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_email is not None:
            _setter("updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            _setter("updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RoutingProtocolDirectIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixIfaceIp":
            suggest = "equinix_iface_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolDirectIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolDirectIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolDirectIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_iface_ip: str):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        RoutingProtocolDirectIpv4._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_iface_ip=equinix_iface_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_iface_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_iface_ip is None and 'equinixIfaceIp' in kwargs:
            equinix_iface_ip = kwargs['equinixIfaceIp']
        if equinix_iface_ip is None:
            raise TypeError("Missing 'equinix_iface_ip' argument")

        _setter("equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> str:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class RoutingProtocolDirectIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixIfaceIp":
            suggest = "equinix_iface_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolDirectIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolDirectIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolDirectIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_iface_ip: Optional[str] = None):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        RoutingProtocolDirectIpv6._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_iface_ip=equinix_iface_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_iface_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_iface_ip is None and 'equinixIfaceIp' in kwargs:
            equinix_iface_ip = kwargs['equinixIfaceIp']

        if equinix_iface_ip is not None:
            _setter("equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class RoutingProtocolOperation(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.RoutingProtocolOperationError']] = None):
        RoutingProtocolOperation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            errors=errors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             errors: Optional[Sequence['outputs.RoutingProtocolOperationError']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if errors is not None:
            _setter("errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.RoutingProtocolOperationError']]:
        return pulumi.get(self, "errors")


@pulumi.output_type
class RoutingProtocolOperationError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfos":
            suggest = "additional_infos"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolOperationError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolOperationError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolOperationError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_infos: Optional[Sequence['outputs.RoutingProtocolOperationErrorAdditionalInfo']] = None,
                 correlation_id: Optional[str] = None,
                 details: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 help: Optional[str] = None):
        RoutingProtocolOperationError._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_infos=additional_infos,
            correlation_id=correlation_id,
            details=details,
            error_code=error_code,
            error_message=error_message,
            help=help,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_infos: Optional[Sequence['outputs.RoutingProtocolOperationErrorAdditionalInfo']] = None,
             correlation_id: Optional[str] = None,
             details: Optional[str] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             help: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if additional_infos is None and 'additionalInfos' in kwargs:
            additional_infos = kwargs['additionalInfos']
        if correlation_id is None and 'correlationId' in kwargs:
            correlation_id = kwargs['correlationId']
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_message is None and 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']

        if additional_infos is not None:
            _setter("additional_infos", additional_infos)
        if correlation_id is not None:
            _setter("correlation_id", correlation_id)
        if details is not None:
            _setter("details", details)
        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)
        if help is not None:
            _setter("help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.RoutingProtocolOperationErrorAdditionalInfo']]:
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[str]:
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> Optional[str]:
        return pulumi.get(self, "help")


@pulumi.output_type
class RoutingProtocolOperationErrorAdditionalInfo(dict):
    def __init__(__self__, *,
                 property: Optional[str] = None,
                 reason: Optional[str] = None):
        RoutingProtocolOperationErrorAdditionalInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property=property,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if property is not None:
            _setter("property", property)
        if reason is not None:
            _setter("reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBandwidthAutoApproval":
            suggest = "allow_bandwidth_auto_approval"
        elif key == "allowBandwidthUpgrade":
            suggest = "allow_bandwidth_upgrade"
        elif key == "allowCustomBandwidth":
            suggest = "allow_custom_bandwidth"
        elif key == "allowRemoteConnections":
            suggest = "allow_remote_connections"
        elif key == "apiConfig":
            suggest = "api_config"
        elif key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "bandwidthAlertThreshold":
            suggest = "bandwidth_alert_threshold"
        elif key == "connectionLabel":
            suggest = "connection_label"
        elif key == "connectionRedundancyRequired":
            suggest = "connection_redundancy_required"
        elif key == "enableAutoGenerateServiceKey":
            suggest = "enable_auto_generate_service_key"
        elif key == "linkProtocolConfig":
            suggest = "link_protocol_config"
        elif key == "supportedBandwidths":
            suggest = "supported_bandwidths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 allow_bandwidth_auto_approval: Optional[bool] = None,
                 allow_bandwidth_upgrade: Optional[bool] = None,
                 allow_custom_bandwidth: Optional[bool] = None,
                 allow_remote_connections: Optional[bool] = None,
                 api_config: Optional['outputs.ServiceProfileAccessPointTypeConfigApiConfig'] = None,
                 authentication_key: Optional['outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey'] = None,
                 bandwidth_alert_threshold: Optional[float] = None,
                 connection_label: Optional[str] = None,
                 connection_redundancy_required: Optional[bool] = None,
                 enable_auto_generate_service_key: Optional[bool] = None,
                 link_protocol_config: Optional['outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig'] = None,
                 supported_bandwidths: Optional[Sequence[int]] = None,
                 uuid: Optional[str] = None):
        """
        :param Union[str, 'ProfileAccessPointType'] type: Type of access point type config - VD, COLO
        :param bool allow_bandwidth_auto_approval: Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        :param bool allow_bandwidth_upgrade: Availability of a bandwidth upgrade. The default is false
        :param bool allow_custom_bandwidth: Setting to enable or disable the ability of the buyer to customize the bandwidth
        :param bool allow_remote_connections: Setting to allow or prohibit remote connections to the service profile
        :param 'ServiceProfileAccessPointTypeConfigApiConfigArgs' api_config: Api configuration details
        :param 'ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs' authentication_key: Authentication key details
        :param float bandwidth_alert_threshold: Percentage of port bandwidth at which an allocation alert is generated
        :param str connection_label: Custom name for Connection
        :param bool connection_redundancy_required: Mandate redundant connections
        :param bool enable_auto_generate_service_key: Enable auto generate service key
        :param 'ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs' link_protocol_config: Link protocol configuration details
        :param Sequence[int] supported_bandwidths: Supported bandwidths
        :param str uuid: Colo/Port Uuid
        """
        ServiceProfileAccessPointTypeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            allow_bandwidth_auto_approval=allow_bandwidth_auto_approval,
            allow_bandwidth_upgrade=allow_bandwidth_upgrade,
            allow_custom_bandwidth=allow_custom_bandwidth,
            allow_remote_connections=allow_remote_connections,
            api_config=api_config,
            authentication_key=authentication_key,
            bandwidth_alert_threshold=bandwidth_alert_threshold,
            connection_label=connection_label,
            connection_redundancy_required=connection_redundancy_required,
            enable_auto_generate_service_key=enable_auto_generate_service_key,
            link_protocol_config=link_protocol_config,
            supported_bandwidths=supported_bandwidths,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             allow_bandwidth_auto_approval: Optional[bool] = None,
             allow_bandwidth_upgrade: Optional[bool] = None,
             allow_custom_bandwidth: Optional[bool] = None,
             allow_remote_connections: Optional[bool] = None,
             api_config: Optional['outputs.ServiceProfileAccessPointTypeConfigApiConfig'] = None,
             authentication_key: Optional['outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey'] = None,
             bandwidth_alert_threshold: Optional[float] = None,
             connection_label: Optional[str] = None,
             connection_redundancy_required: Optional[bool] = None,
             enable_auto_generate_service_key: Optional[bool] = None,
             link_protocol_config: Optional['outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig'] = None,
             supported_bandwidths: Optional[Sequence[int]] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if allow_bandwidth_auto_approval is None and 'allowBandwidthAutoApproval' in kwargs:
            allow_bandwidth_auto_approval = kwargs['allowBandwidthAutoApproval']
        if allow_bandwidth_upgrade is None and 'allowBandwidthUpgrade' in kwargs:
            allow_bandwidth_upgrade = kwargs['allowBandwidthUpgrade']
        if allow_custom_bandwidth is None and 'allowCustomBandwidth' in kwargs:
            allow_custom_bandwidth = kwargs['allowCustomBandwidth']
        if allow_remote_connections is None and 'allowRemoteConnections' in kwargs:
            allow_remote_connections = kwargs['allowRemoteConnections']
        if api_config is None and 'apiConfig' in kwargs:
            api_config = kwargs['apiConfig']
        if authentication_key is None and 'authenticationKey' in kwargs:
            authentication_key = kwargs['authenticationKey']
        if bandwidth_alert_threshold is None and 'bandwidthAlertThreshold' in kwargs:
            bandwidth_alert_threshold = kwargs['bandwidthAlertThreshold']
        if connection_label is None and 'connectionLabel' in kwargs:
            connection_label = kwargs['connectionLabel']
        if connection_redundancy_required is None and 'connectionRedundancyRequired' in kwargs:
            connection_redundancy_required = kwargs['connectionRedundancyRequired']
        if enable_auto_generate_service_key is None and 'enableAutoGenerateServiceKey' in kwargs:
            enable_auto_generate_service_key = kwargs['enableAutoGenerateServiceKey']
        if link_protocol_config is None and 'linkProtocolConfig' in kwargs:
            link_protocol_config = kwargs['linkProtocolConfig']
        if supported_bandwidths is None and 'supportedBandwidths' in kwargs:
            supported_bandwidths = kwargs['supportedBandwidths']

        _setter("type", type)
        if allow_bandwidth_auto_approval is not None:
            _setter("allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        if allow_bandwidth_upgrade is not None:
            _setter("allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        if allow_custom_bandwidth is not None:
            _setter("allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connections is not None:
            _setter("allow_remote_connections", allow_remote_connections)
        if api_config is not None:
            _setter("api_config", api_config)
        if authentication_key is not None:
            _setter("authentication_key", authentication_key)
        if bandwidth_alert_threshold is not None:
            _setter("bandwidth_alert_threshold", bandwidth_alert_threshold)
        if connection_label is not None:
            _setter("connection_label", connection_label)
        if connection_redundancy_required is not None:
            _setter("connection_redundancy_required", connection_redundancy_required)
        if enable_auto_generate_service_key is not None:
            _setter("enable_auto_generate_service_key", enable_auto_generate_service_key)
        if link_protocol_config is not None:
            _setter("link_protocol_config", link_protocol_config)
        if supported_bandwidths is not None:
            _setter("supported_bandwidths", supported_bandwidths)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        """
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> Optional[bool]:
        """
        Availability of a bandwidth upgrade. The default is false
        """
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to customize the bandwidth
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> Optional[bool]:
        """
        Setting to allow or prohibit remote connections to the service profile
        """
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfig")
    def api_config(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigApiConfig']:
        """
        Api configuration details
        """
        return pulumi.get(self, "api_config")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey']:
        """
        Authentication key details
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> Optional[float]:
        """
        Percentage of port bandwidth at which an allocation alert is generated
        """
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> Optional[str]:
        """
        Custom name for Connection
        """
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> Optional[bool]:
        """
        Mandate redundant connections
        """
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> Optional[bool]:
        """
        Enable auto generate service key
        """
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfig")
    def link_protocol_config(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig']:
        """
        Link protocol configuration details
        """
        return pulumi.get(self, "link_protocol_config")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[Sequence[int]]:
        """
        Supported bandwidths
        """
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigApiConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOverSubscription":
            suggest = "allow_over_subscription"
        elif key == "apiAvailable":
            suggest = "api_available"
        elif key == "bandwidthFromApi":
            suggest = "bandwidth_from_api"
        elif key == "equinixManagedPort":
            suggest = "equinix_managed_port"
        elif key == "equinixManagedVlan":
            suggest = "equinix_managed_vlan"
        elif key == "integrationId":
            suggest = "integration_id"
        elif key == "overSubscriptionLimit":
            suggest = "over_subscription_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfigApiConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfigApiConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfigApiConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_over_subscription: Optional[bool] = None,
                 api_available: Optional[bool] = None,
                 bandwidth_from_api: Optional[bool] = None,
                 equinix_managed_port: Optional[bool] = None,
                 equinix_managed_vlan: Optional[bool] = None,
                 integration_id: Optional[str] = None,
                 over_subscription_limit: Optional[int] = None):
        """
        :param bool allow_over_subscription: Setting showing that oversubscription support is available (true) or not (false). The default is false
        :param bool api_available: Setting indicating whether the API is available (true) or not (false)
        :param bool bandwidth_from_api: Bandwidth from api
        :param bool equinix_managed_port: Setting indicating that the port is managed by Equinix (true) or not (false)
        :param bool equinix_managed_vlan: Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        :param str integration_id: Integration id
        :param int over_subscription_limit: A cap on over subscription
        """
        ServiceProfileAccessPointTypeConfigApiConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_over_subscription=allow_over_subscription,
            api_available=api_available,
            bandwidth_from_api=bandwidth_from_api,
            equinix_managed_port=equinix_managed_port,
            equinix_managed_vlan=equinix_managed_vlan,
            integration_id=integration_id,
            over_subscription_limit=over_subscription_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_over_subscription: Optional[bool] = None,
             api_available: Optional[bool] = None,
             bandwidth_from_api: Optional[bool] = None,
             equinix_managed_port: Optional[bool] = None,
             equinix_managed_vlan: Optional[bool] = None,
             integration_id: Optional[str] = None,
             over_subscription_limit: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_over_subscription is None and 'allowOverSubscription' in kwargs:
            allow_over_subscription = kwargs['allowOverSubscription']
        if api_available is None and 'apiAvailable' in kwargs:
            api_available = kwargs['apiAvailable']
        if bandwidth_from_api is None and 'bandwidthFromApi' in kwargs:
            bandwidth_from_api = kwargs['bandwidthFromApi']
        if equinix_managed_port is None and 'equinixManagedPort' in kwargs:
            equinix_managed_port = kwargs['equinixManagedPort']
        if equinix_managed_vlan is None and 'equinixManagedVlan' in kwargs:
            equinix_managed_vlan = kwargs['equinixManagedVlan']
        if integration_id is None and 'integrationId' in kwargs:
            integration_id = kwargs['integrationId']
        if over_subscription_limit is None and 'overSubscriptionLimit' in kwargs:
            over_subscription_limit = kwargs['overSubscriptionLimit']

        if allow_over_subscription is not None:
            _setter("allow_over_subscription", allow_over_subscription)
        if api_available is not None:
            _setter("api_available", api_available)
        if bandwidth_from_api is not None:
            _setter("bandwidth_from_api", bandwidth_from_api)
        if equinix_managed_port is not None:
            _setter("equinix_managed_port", equinix_managed_port)
        if equinix_managed_vlan is not None:
            _setter("equinix_managed_vlan", equinix_managed_vlan)
        if integration_id is not None:
            _setter("integration_id", integration_id)
        if over_subscription_limit is not None:
            _setter("over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> Optional[bool]:
        """
        Setting showing that oversubscription support is available (true) or not (false). The default is false
        """
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> Optional[bool]:
        """
        Setting indicating whether the API is available (true) or not (false)
        """
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> Optional[bool]:
        """
        Bandwidth from api
        """
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> Optional[bool]:
        """
        Setting indicating that the port is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> Optional[bool]:
        """
        Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[str]:
        """
        Integration id
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> Optional[int]:
        """
        A cap on over subscription
        """
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigAuthenticationKey(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 label: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        :param str description: Description
        :param str label: Label
        :param bool required: Required
        """
        ServiceProfileAccessPointTypeConfigAuthenticationKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            label=label,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if label is not None:
            _setter("label", label)
        if required is not None:
            _setter("required", required)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Label
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Required
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigLinkProtocolConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encapsulationStrategy":
            suggest = "encapsulation_strategy"
        elif key == "reuseVlanSTag":
            suggest = "reuse_vlan_s_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfigLinkProtocolConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfigLinkProtocolConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfigLinkProtocolConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[str] = None,
                 encapsulation_strategy: Optional[str] = None,
                 reuse_vlan_s_tag: Optional[bool] = None):
        """
        :param str encapsulation: Port Encapsulation
        :param str encapsulation_strategy: Encapsulation strategy
        :param bool reuse_vlan_s_tag: Reuse vlan sTag
        """
        ServiceProfileAccessPointTypeConfigLinkProtocolConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encapsulation=encapsulation,
            encapsulation_strategy=encapsulation_strategy,
            reuse_vlan_s_tag=reuse_vlan_s_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encapsulation: Optional[str] = None,
             encapsulation_strategy: Optional[str] = None,
             reuse_vlan_s_tag: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if encapsulation_strategy is None and 'encapsulationStrategy' in kwargs:
            encapsulation_strategy = kwargs['encapsulationStrategy']
        if reuse_vlan_s_tag is None and 'reuseVlanSTag' in kwargs:
            reuse_vlan_s_tag = kwargs['reuseVlanSTag']

        if encapsulation is not None:
            _setter("encapsulation", encapsulation)
        if encapsulation_strategy is not None:
            _setter("encapsulation_strategy", encapsulation_strategy)
        if reuse_vlan_s_tag is not None:
            _setter("reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[str]:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> Optional[str]:
        """
        Encapsulation strategy
        """
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> Optional[bool]:
        """
        Reuse vlan sTag
        """
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class ServiceProfileAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Account Name
        :param int account_number: Account Number
        :param str global_cust_id: Global Customer organization identifier
        :param str global_org_id: Global organization identifier
        :param str global_organization_name: Global organization name
        :param int org_id: Customer organization identifier
        :param str organization_name: Customer organization name
        :param str ucm_id: Enterprise datastore id
        """
        ServiceProfileAccount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
            ucm_id=ucm_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             ucm_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if ucm_id is None and 'ucmId' in kwargs:
            ucm_id = kwargs['ucmId']

        if account_name is not None:
            _setter("account_name", account_name)
        if account_number is not None:
            _setter("account_number", account_number)
        if global_cust_id is not None:
            _setter("global_cust_id", global_cust_id)
        if global_org_id is not None:
            _setter("global_org_id", global_org_id)
        if global_organization_name is not None:
            _setter("global_organization_name", global_organization_name)
        if org_id is not None:
            _setter("org_id", org_id)
        if organization_name is not None:
            _setter("organization_name", organization_name)
        if ucm_id is not None:
            _setter("ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Global Customer organization identifier
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Global organization identifier
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Global organization name
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Customer organization identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Customer organization name
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ServiceProfileChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        ServiceProfileChangeLog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']

        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_email is not None:
            _setter("created_by_email", created_by_email)
        if created_by_full_name is not None:
            _setter("created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            _setter("created_date_time", created_date_time)
        if deleted_by is not None:
            _setter("deleted_by", deleted_by)
        if deleted_by_email is not None:
            _setter("deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            _setter("deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            _setter("deleted_date_time", deleted_date_time)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_email is not None:
            _setter("updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            _setter("updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class ServiceProfileCustomField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "captureInEmail":
            suggest = "capture_in_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileCustomField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileCustomField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileCustomField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 label: str,
                 required: bool,
                 capture_in_email: Optional[bool] = None,
                 description: Optional[str] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str data_type: Data type
        :param str label: Label
        :param bool required: Required field
        :param bool capture_in_email: Required field
        :param str description: Description
        :param Sequence[str] options: Options
        """
        ServiceProfileCustomField._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_type=data_type,
            label=label,
            required=required,
            capture_in_email=capture_in_email,
            description=description,
            options=options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_type: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             capture_in_email: Optional[bool] = None,
             description: Optional[str] = None,
             options: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if data_type is None and 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if data_type is None:
            raise TypeError("Missing 'data_type' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")
        if capture_in_email is None and 'captureInEmail' in kwargs:
            capture_in_email = kwargs['captureInEmail']

        _setter("data_type", data_type)
        _setter("label", label)
        _setter("required", required)
        if capture_in_email is not None:
            _setter("capture_in_email", capture_in_email)
        if description is not None:
            _setter("description", description)
        if options is not None:
            _setter("options", options)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Required field
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> Optional[bool]:
        """
        Required field
        """
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Options
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class ServiceProfileMarketingInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processSteps":
            suggest = "process_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMarketingInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMarketingInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMarketingInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logo: Optional[str] = None,
                 process_steps: Optional[Sequence['outputs.ServiceProfileMarketingInfoProcessStep']] = None,
                 promotion: Optional[bool] = None):
        """
        :param str logo: Logo
        :param Sequence['ServiceProfileMarketingInfoProcessStepArgs'] process_steps: Process Step
        :param bool promotion: Promotion
        """
        ServiceProfileMarketingInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logo=logo,
            process_steps=process_steps,
            promotion=promotion,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logo: Optional[str] = None,
             process_steps: Optional[Sequence['outputs.ServiceProfileMarketingInfoProcessStep']] = None,
             promotion: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if process_steps is None and 'processSteps' in kwargs:
            process_steps = kwargs['processSteps']

        if logo is not None:
            _setter("logo", logo)
        if process_steps is not None:
            _setter("process_steps", process_steps)
        if promotion is not None:
            _setter("promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> Optional[str]:
        """
        Logo
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Optional[Sequence['outputs.ServiceProfileMarketingInfoProcessStep']]:
        """
        Process Step
        """
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> Optional[bool]:
        """
        Promotion
        """
        return pulumi.get(self, "promotion")


@pulumi.output_type
class ServiceProfileMarketingInfoProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subTitle":
            suggest = "sub_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMarketingInfoProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMarketingInfoProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMarketingInfoProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 sub_title: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str description: Description
        :param str sub_title: Sub Title
        :param str title: Title
        """
        ServiceProfileMarketingInfoProcessStep._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            sub_title=sub_title,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             sub_title: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if sub_title is None and 'subTitle' in kwargs:
            sub_title = kwargs['subTitle']

        if description is not None:
            _setter("description", description)
        if sub_title is not None:
            _setter("sub_title", sub_title)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> Optional[str]:
        """
        Sub Title
        """
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ServiceProfileMetro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "inTrail":
            suggest = "in_trail"
        elif key == "sellerRegions":
            suggest = "seller_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMetro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMetro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMetro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_name: Optional[str] = None,
                 ibxs: Optional[Sequence[str]] = None,
                 in_trail: Optional[bool] = None,
                 name: Optional[str] = None,
                 seller_regions: Optional[Mapping[str, str]] = None):
        """
        :param str code: Metro Code - Example SV
        :param str display_name: Display Name
        :param Sequence[str] ibxs: IBX- Equinix International Business Exchange list
        :param bool in_trail: In Trail
        :param str name: Metro Name
        :param Mapping[str, str] seller_regions: Seller Regions
        """
        ServiceProfileMetro._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            display_name=display_name,
            ibxs=ibxs,
            in_trail=in_trail,
            name=name,
            seller_regions=seller_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             display_name: Optional[str] = None,
             ibxs: Optional[Sequence[str]] = None,
             in_trail: Optional[bool] = None,
             name: Optional[str] = None,
             seller_regions: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if in_trail is None and 'inTrail' in kwargs:
            in_trail = kwargs['inTrail']
        if seller_regions is None and 'sellerRegions' in kwargs:
            seller_regions = kwargs['sellerRegions']

        if code is not None:
            _setter("code", code)
        if display_name is not None:
            _setter("display_name", display_name)
        if ibxs is not None:
            _setter("ibxs", ibxs)
        if in_trail is not None:
            _setter("in_trail", in_trail)
        if name is not None:
            _setter("name", name)
        if seller_regions is not None:
            _setter("seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Metro Code - Example SV
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Optional[Sequence[str]]:
        """
        IBX- Equinix International Business Exchange list
        """
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> Optional[bool]:
        """
        In Trail
        """
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Optional[Mapping[str, str]]:
        """
        Seller Regions
        """
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class ServiceProfileNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param Union[str, 'NotificationsType'] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        ServiceProfileNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            type=type,
            send_interval=send_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             send_interval: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']

        _setter("emails", emails)
        _setter("type", type)
        if send_interval is not None:
            _setter("send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class ServiceProfilePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossConnectId":
            suggest = "cross_connect_id"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "sellerRegionDescription":
            suggest = "seller_region_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfilePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfilePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfilePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 cross_connect_id: Optional[str] = None,
                 location: Optional['outputs.ServiceProfilePortLocation'] = None,
                 seller_region: Optional[str] = None,
                 seller_region_description: Optional[str] = None):
        """
        :param str type: Colo/Port Type
        :param str uuid: Colo/Port Uuid
        :param str cross_connect_id: Cross Connect Id
        :param 'ServiceProfilePortLocationArgs' location: Colo/Port Location
        :param str seller_region: Seller Region
        :param str seller_region_description: Seller Region details
        """
        ServiceProfilePort._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
            cross_connect_id=cross_connect_id,
            location=location,
            seller_region=seller_region,
            seller_region_description=seller_region_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             cross_connect_id: Optional[str] = None,
             location: Optional['outputs.ServiceProfilePortLocation'] = None,
             seller_region: Optional[str] = None,
             seller_region_description: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if cross_connect_id is None and 'crossConnectId' in kwargs:
            cross_connect_id = kwargs['crossConnectId']
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if seller_region_description is None and 'sellerRegionDescription' in kwargs:
            seller_region_description = kwargs['sellerRegionDescription']

        _setter("type", type)
        _setter("uuid", uuid)
        if cross_connect_id is not None:
            _setter("cross_connect_id", cross_connect_id)
        if location is not None:
            _setter("location", location)
        if seller_region is not None:
            _setter("seller_region", seller_region)
        if seller_region_description is not None:
            _setter("seller_region_description", seller_region_description)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Colo/Port Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> Optional[str]:
        """
        Cross Connect Id
        """
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ServiceProfilePortLocation']:
        """
        Colo/Port Location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Seller Region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> Optional[str]:
        """
        Seller Region details
        """
        return pulumi.get(self, "seller_region_description")


@pulumi.output_type
class ServiceProfilePortLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfilePortLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfilePortLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfilePortLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        ServiceProfilePortLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']

        if ibx is not None:
            _setter("ibx", ibx)
        if metro_code is not None:
            _setter("metro_code", metro_code)
        if metro_name is not None:
            _setter("metro_name", metro_name)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceProfileProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        ServiceProfileProject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if href is not None:
            _setter("href", href)
        if project_id is not None:
            _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ServiceProfileVirtualDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceUuid":
            suggest = "interface_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileVirtualDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileVirtualDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileVirtualDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 interface_uuid: Optional[str] = None,
                 location: Optional['outputs.ServiceProfileVirtualDeviceLocation'] = None):
        """
        :param str type: Virtual Device Type
        :param str uuid: Virtual Device Uuid
        :param str interface_uuid: Device Interface Uuid
        :param 'ServiceProfileVirtualDeviceLocationArgs' location: Device Location
        """
        ServiceProfileVirtualDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uuid=uuid,
            interface_uuid=interface_uuid,
            location=location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             interface_uuid: Optional[str] = None,
             location: Optional['outputs.ServiceProfileVirtualDeviceLocation'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")
        if interface_uuid is None and 'interfaceUuid' in kwargs:
            interface_uuid = kwargs['interfaceUuid']

        _setter("type", type)
        _setter("uuid", uuid)
        if interface_uuid is not None:
            _setter("interface_uuid", interface_uuid)
        if location is not None:
            _setter("location", location)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Virtual Device Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="interfaceUuid")
    def interface_uuid(self) -> Optional[str]:
        """
        Device Interface Uuid
        """
        return pulumi.get(self, "interface_uuid")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ServiceProfileVirtualDeviceLocation']:
        """
        Device Location
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class ServiceProfileVirtualDeviceLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileVirtualDeviceLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileVirtualDeviceLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileVirtualDeviceLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        ServiceProfileVirtualDeviceLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']

        if ibx is not None:
            _setter("ibx", ibx)
        if metro_code is not None:
            _setter("metro_code", metro_code)
        if metro_name is not None:
            _setter("metro_name", metro_name)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCloudRouterAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetCloudRouterAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetCloudRouterChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetCloudRouterChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetCloudRouterLocationResult(dict):
    def __init__(__self__, *,
                 href: str,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetCloudRouterLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("href", href)
        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCloudRouterNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 send_interval: str,
                 type: str):
        GetCloudRouterNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            send_interval=send_interval,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             send_interval: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']
        if send_interval is None:
            raise TypeError("Missing 'send_interval' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("emails", emails)
        _setter("send_interval", send_interval)
        _setter("type", type)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> str:
        return pulumi.get(self, "send_interval")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCloudRouterOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str):
        GetCloudRouterOrderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_tier=billing_tier,
            order_id=order_id,
            order_number=order_number,
            purchase_order_number=purchase_order_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_tier: Optional[str] = None,
             order_id: Optional[str] = None,
             order_number: Optional[str] = None,
             purchase_order_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if billing_tier is None and 'billingTier' in kwargs:
            billing_tier = kwargs['billingTier']
        if billing_tier is None:
            raise TypeError("Missing 'billing_tier' argument")
        if order_id is None and 'orderId' in kwargs:
            order_id = kwargs['orderId']
        if order_id is None:
            raise TypeError("Missing 'order_id' argument")
        if order_number is None and 'orderNumber' in kwargs:
            order_number = kwargs['orderNumber']
        if order_number is None:
            raise TypeError("Missing 'order_number' argument")
        if purchase_order_number is None and 'purchaseOrderNumber' in kwargs:
            purchase_order_number = kwargs['purchaseOrderNumber']
        if purchase_order_number is None:
            raise TypeError("Missing 'purchase_order_number' argument")

        _setter("billing_tier", billing_tier)
        _setter("order_id", order_id)
        _setter("order_number", order_number)
        _setter("purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class GetCloudRouterPackageResult(dict):
    def __init__(__self__, *,
                 code: str):
        GetCloudRouterPackageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if code is None:
            raise TypeError("Missing 'code' argument")

        _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")


@pulumi.output_type
class GetCloudRouterProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        GetCloudRouterProjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")

        _setter("href", href)
        _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetConnectionASideResult(dict):
    def __init__(__self__, *,
                 access_point: 'outputs.GetConnectionASideAccessPointResult',
                 service_token: 'outputs.GetConnectionASideServiceTokenResult'):
        GetConnectionASideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point=access_point,
            service_token=service_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point: Optional['outputs.GetConnectionASideAccessPointResult'] = None,
             service_token: Optional['outputs.GetConnectionASideServiceTokenResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point is None and 'accessPoint' in kwargs:
            access_point = kwargs['accessPoint']
        if access_point is None:
            raise TypeError("Missing 'access_point' argument")
        if service_token is None and 'serviceToken' in kwargs:
            service_token = kwargs['serviceToken']
        if service_token is None:
            raise TypeError("Missing 'service_token' argument")

        _setter("access_point", access_point)
        _setter("service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> 'outputs.GetConnectionASideAccessPointResult':
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> 'outputs.GetConnectionASideServiceTokenResult':
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionASideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionASideAccessPointAccountResult'],
                 authentication_key: str,
                 gateways: Sequence['outputs.GetConnectionASideAccessPointGatewayResult'],
                 interfaces: Sequence['outputs.GetConnectionASideAccessPointInterfaceResult'],
                 link_protocols: Sequence['outputs.GetConnectionASideAccessPointLinkProtocolResult'],
                 locations: Sequence['outputs.GetConnectionASideAccessPointLocationResult'],
                 peering_type: str,
                 ports: Sequence['outputs.GetConnectionASideAccessPointPortResult'],
                 profiles: Sequence['outputs.GetConnectionASideAccessPointProfileResult'],
                 provider_connection_id: str,
                 routers: Sequence['outputs.GetConnectionASideAccessPointRouterResult'],
                 seller_region: str,
                 type: str,
                 virtual_devices: Sequence['outputs.GetConnectionASideAccessPointVirtualDeviceResult']):
        """
        :param Sequence['GetConnectionASideAccessPointRouterArgs'] routers: CloudRouter; Replaces `gateway` attribute (Set of Object)
        """
        GetConnectionASideAccessPointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accounts=accounts,
            authentication_key=authentication_key,
            gateways=gateways,
            interfaces=interfaces,
            link_protocols=link_protocols,
            locations=locations,
            peering_type=peering_type,
            ports=ports,
            profiles=profiles,
            provider_connection_id=provider_connection_id,
            routers=routers,
            seller_region=seller_region,
            type=type,
            virtual_devices=virtual_devices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accounts: Optional[Sequence['outputs.GetConnectionASideAccessPointAccountResult']] = None,
             authentication_key: Optional[str] = None,
             gateways: Optional[Sequence['outputs.GetConnectionASideAccessPointGatewayResult']] = None,
             interfaces: Optional[Sequence['outputs.GetConnectionASideAccessPointInterfaceResult']] = None,
             link_protocols: Optional[Sequence['outputs.GetConnectionASideAccessPointLinkProtocolResult']] = None,
             locations: Optional[Sequence['outputs.GetConnectionASideAccessPointLocationResult']] = None,
             peering_type: Optional[str] = None,
             ports: Optional[Sequence['outputs.GetConnectionASideAccessPointPortResult']] = None,
             profiles: Optional[Sequence['outputs.GetConnectionASideAccessPointProfileResult']] = None,
             provider_connection_id: Optional[str] = None,
             routers: Optional[Sequence['outputs.GetConnectionASideAccessPointRouterResult']] = None,
             seller_region: Optional[str] = None,
             type: Optional[str] = None,
             virtual_devices: Optional[Sequence['outputs.GetConnectionASideAccessPointVirtualDeviceResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if accounts is None:
            raise TypeError("Missing 'accounts' argument")
        if authentication_key is None and 'authenticationKey' in kwargs:
            authentication_key = kwargs['authenticationKey']
        if authentication_key is None:
            raise TypeError("Missing 'authentication_key' argument")
        if gateways is None:
            raise TypeError("Missing 'gateways' argument")
        if interfaces is None:
            raise TypeError("Missing 'interfaces' argument")
        if link_protocols is None and 'linkProtocols' in kwargs:
            link_protocols = kwargs['linkProtocols']
        if link_protocols is None:
            raise TypeError("Missing 'link_protocols' argument")
        if locations is None:
            raise TypeError("Missing 'locations' argument")
        if peering_type is None and 'peeringType' in kwargs:
            peering_type = kwargs['peeringType']
        if peering_type is None:
            raise TypeError("Missing 'peering_type' argument")
        if ports is None:
            raise TypeError("Missing 'ports' argument")
        if profiles is None:
            raise TypeError("Missing 'profiles' argument")
        if provider_connection_id is None and 'providerConnectionId' in kwargs:
            provider_connection_id = kwargs['providerConnectionId']
        if provider_connection_id is None:
            raise TypeError("Missing 'provider_connection_id' argument")
        if routers is None:
            raise TypeError("Missing 'routers' argument")
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if seller_region is None:
            raise TypeError("Missing 'seller_region' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if virtual_devices is None and 'virtualDevices' in kwargs:
            virtual_devices = kwargs['virtualDevices']
        if virtual_devices is None:
            raise TypeError("Missing 'virtual_devices' argument")

        _setter("accounts", accounts)
        _setter("authentication_key", authentication_key)
        _setter("gateways", gateways)
        _setter("interfaces", interfaces)
        _setter("link_protocols", link_protocols)
        _setter("locations", locations)
        _setter("peering_type", peering_type)
        _setter("ports", ports)
        _setter("profiles", profiles)
        _setter("provider_connection_id", provider_connection_id)
        _setter("routers", routers)
        _setter("seller_region", seller_region)
        _setter("type", type)
        _setter("virtual_devices", virtual_devices)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionASideAccessPointAccountResult']:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def gateways(self) -> Sequence['outputs.GetConnectionASideAccessPointGatewayResult']:
        warnings.warn("""router attribute will be returned instead""", DeprecationWarning)
        pulumi.log.warn("""gateways is deprecated: router attribute will be returned instead""")

        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetConnectionASideAccessPointInterfaceResult']:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="linkProtocols")
    def link_protocols(self) -> Sequence['outputs.GetConnectionASideAccessPointLinkProtocolResult']:
        return pulumi.get(self, "link_protocols")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetConnectionASideAccessPointLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> str:
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetConnectionASideAccessPointPortResult']:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def routers(self) -> Sequence['outputs.GetConnectionASideAccessPointRouterResult']:
        """
        CloudRouter; Replaces `gateway` attribute (Set of Object)
        """
        return pulumi.get(self, "routers")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> str:
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> Sequence['outputs.GetConnectionASideAccessPointVirtualDeviceResult']:
        return pulumi.get(self, "virtual_devices")


@pulumi.output_type
class GetConnectionASideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetConnectionASideAccessPointAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetConnectionASideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 state: str,
                 uuid: str):
        GetConnectionASideAccessPointGatewayResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            state=state,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             state: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("state", state)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str,
                 uuid: str):
        GetConnectionASideAccessPointInterfaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("id", id)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        GetConnectionASideAccessPointLinkProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            vlan_c_tag=vlan_c_tag,
            vlan_s_tag=vlan_s_tag,
            vlan_tag=vlan_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             vlan_c_tag: Optional[int] = None,
             vlan_s_tag: Optional[int] = None,
             vlan_tag: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if vlan_c_tag is None and 'vlanCTag' in kwargs:
            vlan_c_tag = kwargs['vlanCTag']
        if vlan_c_tag is None:
            raise TypeError("Missing 'vlan_c_tag' argument")
        if vlan_s_tag is None and 'vlanSTag' in kwargs:
            vlan_s_tag = kwargs['vlanSTag']
        if vlan_s_tag is None:
            raise TypeError("Missing 'vlan_s_tag' argument")
        if vlan_tag is None and 'vlanTag' in kwargs:
            vlan_tag = kwargs['vlanTag']
        if vlan_tag is None:
            raise TypeError("Missing 'vlan_tag' argument")

        _setter("type", type)
        _setter("vlan_c_tag", vlan_c_tag)
        _setter("vlan_s_tag", vlan_s_tag)
        _setter("vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetConnectionASideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 href: str,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetConnectionASideAccessPointLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("href", href)
        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionASideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionASideAccessPointPortRedundancyResult'],
                 uuid: str):
        GetConnectionASideAccessPointPortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            name=name,
            redundancies=redundancies,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.GetConnectionASideAccessPointPortRedundancyResult']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if redundancies is None:
            raise TypeError("Missing 'redundancies' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("name", name)
        _setter("redundancies", redundancies)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionASideAccessPointPortRedundancyResult']:
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 priority: str):
        GetConnectionASideAccessPointPortRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionASideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        GetConnectionASideAccessPointProfileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point_type_configs=access_point_type_configs,
            description=description,
            href=href,
            name=name,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point_type_configs: Optional[Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigResult']] = None,
             description: Optional[str] = None,
             href: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point_type_configs is None and 'accessPointTypeConfigs' in kwargs:
            access_point_type_configs = kwargs['accessPointTypeConfigs']
        if access_point_type_configs is None:
            raise TypeError("Missing 'access_point_type_configs' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("access_point_type_configs", access_point_type_configs)
        _setter("description", description)
        _setter("href", href)
        _setter("name", name)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigResult']:
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 allow_bandwidth_auto_approval: bool,
                 allow_bandwidth_upgrade: bool,
                 allow_custom_bandwidth: bool,
                 allow_remote_connections: bool,
                 api_configs: Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult'],
                 authentication_keys: Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult'],
                 bandwidth_alert_threshold: float,
                 connection_label: str,
                 connection_redundancy_required: bool,
                 enable_auto_generate_service_key: bool,
                 link_protocol_configs: Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult'],
                 supported_bandwidths: Sequence[int],
                 type: str,
                 uuid: str):
        GetConnectionASideAccessPointProfileAccessPointTypeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_bandwidth_auto_approval=allow_bandwidth_auto_approval,
            allow_bandwidth_upgrade=allow_bandwidth_upgrade,
            allow_custom_bandwidth=allow_custom_bandwidth,
            allow_remote_connections=allow_remote_connections,
            api_configs=api_configs,
            authentication_keys=authentication_keys,
            bandwidth_alert_threshold=bandwidth_alert_threshold,
            connection_label=connection_label,
            connection_redundancy_required=connection_redundancy_required,
            enable_auto_generate_service_key=enable_auto_generate_service_key,
            link_protocol_configs=link_protocol_configs,
            supported_bandwidths=supported_bandwidths,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_bandwidth_auto_approval: Optional[bool] = None,
             allow_bandwidth_upgrade: Optional[bool] = None,
             allow_custom_bandwidth: Optional[bool] = None,
             allow_remote_connections: Optional[bool] = None,
             api_configs: Optional[Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult']] = None,
             authentication_keys: Optional[Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult']] = None,
             bandwidth_alert_threshold: Optional[float] = None,
             connection_label: Optional[str] = None,
             connection_redundancy_required: Optional[bool] = None,
             enable_auto_generate_service_key: Optional[bool] = None,
             link_protocol_configs: Optional[Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult']] = None,
             supported_bandwidths: Optional[Sequence[int]] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_bandwidth_auto_approval is None and 'allowBandwidthAutoApproval' in kwargs:
            allow_bandwidth_auto_approval = kwargs['allowBandwidthAutoApproval']
        if allow_bandwidth_auto_approval is None:
            raise TypeError("Missing 'allow_bandwidth_auto_approval' argument")
        if allow_bandwidth_upgrade is None and 'allowBandwidthUpgrade' in kwargs:
            allow_bandwidth_upgrade = kwargs['allowBandwidthUpgrade']
        if allow_bandwidth_upgrade is None:
            raise TypeError("Missing 'allow_bandwidth_upgrade' argument")
        if allow_custom_bandwidth is None and 'allowCustomBandwidth' in kwargs:
            allow_custom_bandwidth = kwargs['allowCustomBandwidth']
        if allow_custom_bandwidth is None:
            raise TypeError("Missing 'allow_custom_bandwidth' argument")
        if allow_remote_connections is None and 'allowRemoteConnections' in kwargs:
            allow_remote_connections = kwargs['allowRemoteConnections']
        if allow_remote_connections is None:
            raise TypeError("Missing 'allow_remote_connections' argument")
        if api_configs is None and 'apiConfigs' in kwargs:
            api_configs = kwargs['apiConfigs']
        if api_configs is None:
            raise TypeError("Missing 'api_configs' argument")
        if authentication_keys is None and 'authenticationKeys' in kwargs:
            authentication_keys = kwargs['authenticationKeys']
        if authentication_keys is None:
            raise TypeError("Missing 'authentication_keys' argument")
        if bandwidth_alert_threshold is None and 'bandwidthAlertThreshold' in kwargs:
            bandwidth_alert_threshold = kwargs['bandwidthAlertThreshold']
        if bandwidth_alert_threshold is None:
            raise TypeError("Missing 'bandwidth_alert_threshold' argument")
        if connection_label is None and 'connectionLabel' in kwargs:
            connection_label = kwargs['connectionLabel']
        if connection_label is None:
            raise TypeError("Missing 'connection_label' argument")
        if connection_redundancy_required is None and 'connectionRedundancyRequired' in kwargs:
            connection_redundancy_required = kwargs['connectionRedundancyRequired']
        if connection_redundancy_required is None:
            raise TypeError("Missing 'connection_redundancy_required' argument")
        if enable_auto_generate_service_key is None and 'enableAutoGenerateServiceKey' in kwargs:
            enable_auto_generate_service_key = kwargs['enableAutoGenerateServiceKey']
        if enable_auto_generate_service_key is None:
            raise TypeError("Missing 'enable_auto_generate_service_key' argument")
        if link_protocol_configs is None and 'linkProtocolConfigs' in kwargs:
            link_protocol_configs = kwargs['linkProtocolConfigs']
        if link_protocol_configs is None:
            raise TypeError("Missing 'link_protocol_configs' argument")
        if supported_bandwidths is None and 'supportedBandwidths' in kwargs:
            supported_bandwidths = kwargs['supportedBandwidths']
        if supported_bandwidths is None:
            raise TypeError("Missing 'supported_bandwidths' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        _setter("allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        _setter("allow_custom_bandwidth", allow_custom_bandwidth)
        _setter("allow_remote_connections", allow_remote_connections)
        _setter("api_configs", api_configs)
        _setter("authentication_keys", authentication_keys)
        _setter("bandwidth_alert_threshold", bandwidth_alert_threshold)
        _setter("connection_label", connection_label)
        _setter("connection_redundancy_required", connection_redundancy_required)
        _setter("enable_auto_generate_service_key", enable_auto_generate_service_key)
        _setter("link_protocol_configs", link_protocol_configs)
        _setter("supported_bandwidths", supported_bandwidths)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> bool:
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfigs")
    def api_configs(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult']:
        return pulumi.get(self, "api_configs")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult']:
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> float:
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> str:
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> bool:
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> bool:
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfigs")
    def link_protocol_configs(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult']:
        return pulumi.get(self, "link_protocol_configs")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: bool,
                 api_available: bool,
                 bandwidth_from_api: bool,
                 equinix_managed_port: bool,
                 equinix_managed_vlan: bool,
                 integration_id: str,
                 over_subscription_limit: int):
        GetConnectionASideAccessPointProfileAccessPointTypeConfigApiConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_over_subscription=allow_over_subscription,
            api_available=api_available,
            bandwidth_from_api=bandwidth_from_api,
            equinix_managed_port=equinix_managed_port,
            equinix_managed_vlan=equinix_managed_vlan,
            integration_id=integration_id,
            over_subscription_limit=over_subscription_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_over_subscription: Optional[bool] = None,
             api_available: Optional[bool] = None,
             bandwidth_from_api: Optional[bool] = None,
             equinix_managed_port: Optional[bool] = None,
             equinix_managed_vlan: Optional[bool] = None,
             integration_id: Optional[str] = None,
             over_subscription_limit: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_over_subscription is None and 'allowOverSubscription' in kwargs:
            allow_over_subscription = kwargs['allowOverSubscription']
        if allow_over_subscription is None:
            raise TypeError("Missing 'allow_over_subscription' argument")
        if api_available is None and 'apiAvailable' in kwargs:
            api_available = kwargs['apiAvailable']
        if api_available is None:
            raise TypeError("Missing 'api_available' argument")
        if bandwidth_from_api is None and 'bandwidthFromApi' in kwargs:
            bandwidth_from_api = kwargs['bandwidthFromApi']
        if bandwidth_from_api is None:
            raise TypeError("Missing 'bandwidth_from_api' argument")
        if equinix_managed_port is None and 'equinixManagedPort' in kwargs:
            equinix_managed_port = kwargs['equinixManagedPort']
        if equinix_managed_port is None:
            raise TypeError("Missing 'equinix_managed_port' argument")
        if equinix_managed_vlan is None and 'equinixManagedVlan' in kwargs:
            equinix_managed_vlan = kwargs['equinixManagedVlan']
        if equinix_managed_vlan is None:
            raise TypeError("Missing 'equinix_managed_vlan' argument")
        if integration_id is None and 'integrationId' in kwargs:
            integration_id = kwargs['integrationId']
        if integration_id is None:
            raise TypeError("Missing 'integration_id' argument")
        if over_subscription_limit is None and 'overSubscriptionLimit' in kwargs:
            over_subscription_limit = kwargs['overSubscriptionLimit']
        if over_subscription_limit is None:
            raise TypeError("Missing 'over_subscription_limit' argument")

        _setter("allow_over_subscription", allow_over_subscription)
        _setter("api_available", api_available)
        _setter("bandwidth_from_api", bandwidth_from_api)
        _setter("equinix_managed_port", equinix_managed_port)
        _setter("equinix_managed_vlan", equinix_managed_vlan)
        _setter("integration_id", integration_id)
        _setter("over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> bool:
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> bool:
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> bool:
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> bool:
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> bool:
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> int:
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 label: str,
                 required: bool):
        GetConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            label=label,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("description", description)
        _setter("label", label)
        _setter("required", required)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: str,
                 encapsulation_strategy: str,
                 reuse_vlan_s_tag: bool):
        GetConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encapsulation=encapsulation,
            encapsulation_strategy=encapsulation_strategy,
            reuse_vlan_s_tag=reuse_vlan_s_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encapsulation: Optional[str] = None,
             encapsulation_strategy: Optional[str] = None,
             reuse_vlan_s_tag: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if encapsulation is None:
            raise TypeError("Missing 'encapsulation' argument")
        if encapsulation_strategy is None and 'encapsulationStrategy' in kwargs:
            encapsulation_strategy = kwargs['encapsulationStrategy']
        if encapsulation_strategy is None:
            raise TypeError("Missing 'encapsulation_strategy' argument")
        if reuse_vlan_s_tag is None and 'reuseVlanSTag' in kwargs:
            reuse_vlan_s_tag = kwargs['reuseVlanSTag']
        if reuse_vlan_s_tag is None:
            raise TypeError("Missing 'reuse_vlan_s_tag' argument")

        _setter("encapsulation", encapsulation)
        _setter("encapsulation_strategy", encapsulation_strategy)
        _setter("reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> str:
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> str:
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> bool:
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetConnectionASideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 state: str,
                 uuid: str):
        GetConnectionASideAccessPointRouterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            state=state,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             state: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("state", state)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        GetConnectionASideAccessPointVirtualDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: str,
                 uuid: str):
        GetConnectionASideServiceTokenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("description", description)
        _setter("href", href)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetConnectionAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetConnectionAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        GetConnectionAdditionalInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetConnectionChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetConnectionNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 send_interval: str,
                 type: str):
        GetConnectionNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            send_interval=send_interval,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             send_interval: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']
        if send_interval is None:
            raise TypeError("Missing 'send_interval' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("emails", emails)
        _setter("send_interval", send_interval)
        _setter("type", type)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> str:
        return pulumi.get(self, "send_interval")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionOperationResult(dict):
    def __init__(__self__, *,
                 equinix_status: str,
                 errors: Sequence['outputs.GetConnectionOperationErrorResult'],
                 provider_status: str):
        GetConnectionOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_status=equinix_status,
            errors=errors,
            provider_status=provider_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_status: Optional[str] = None,
             errors: Optional[Sequence['outputs.GetConnectionOperationErrorResult']] = None,
             provider_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_status is None and 'equinixStatus' in kwargs:
            equinix_status = kwargs['equinixStatus']
        if equinix_status is None:
            raise TypeError("Missing 'equinix_status' argument")
        if errors is None:
            raise TypeError("Missing 'errors' argument")
        if provider_status is None and 'providerStatus' in kwargs:
            provider_status = kwargs['providerStatus']
        if provider_status is None:
            raise TypeError("Missing 'provider_status' argument")

        _setter("equinix_status", equinix_status)
        _setter("errors", errors)
        _setter("provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> str:
        return pulumi.get(self, "equinix_status")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetConnectionOperationErrorResult']:
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> str:
        return pulumi.get(self, "provider_status")


@pulumi.output_type
class GetConnectionOperationErrorResult(dict):
    def __init__(__self__, *,
                 additional_infos: Sequence['outputs.GetConnectionOperationErrorAdditionalInfoResult'],
                 correlation_id: str,
                 details: str,
                 error_code: str,
                 error_message: str,
                 help: str):
        GetConnectionOperationErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_infos=additional_infos,
            correlation_id=correlation_id,
            details=details,
            error_code=error_code,
            error_message=error_message,
            help=help,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_infos: Optional[Sequence['outputs.GetConnectionOperationErrorAdditionalInfoResult']] = None,
             correlation_id: Optional[str] = None,
             details: Optional[str] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             help: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if additional_infos is None and 'additionalInfos' in kwargs:
            additional_infos = kwargs['additionalInfos']
        if additional_infos is None:
            raise TypeError("Missing 'additional_infos' argument")
        if correlation_id is None and 'correlationId' in kwargs:
            correlation_id = kwargs['correlationId']
        if correlation_id is None:
            raise TypeError("Missing 'correlation_id' argument")
        if details is None:
            raise TypeError("Missing 'details' argument")
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_code is None:
            raise TypeError("Missing 'error_code' argument")
        if error_message is None and 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']
        if error_message is None:
            raise TypeError("Missing 'error_message' argument")
        if help is None:
            raise TypeError("Missing 'help' argument")

        _setter("additional_infos", additional_infos)
        _setter("correlation_id", correlation_id)
        _setter("details", details)
        _setter("error_code", error_code)
        _setter("error_message", error_message)
        _setter("help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetConnectionOperationErrorAdditionalInfoResult']:
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> str:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> str:
        return pulumi.get(self, "help")


@pulumi.output_type
class GetConnectionOperationErrorAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 property: str,
                 reason: str):
        GetConnectionOperationErrorAdditionalInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property=property,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if property is None:
            raise TypeError("Missing 'property' argument")
        if reason is None:
            raise TypeError("Missing 'reason' argument")

        _setter("property", property)
        _setter("reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


@pulumi.output_type
class GetConnectionOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str):
        GetConnectionOrderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_tier=billing_tier,
            order_id=order_id,
            order_number=order_number,
            purchase_order_number=purchase_order_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_tier: Optional[str] = None,
             order_id: Optional[str] = None,
             order_number: Optional[str] = None,
             purchase_order_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if billing_tier is None and 'billingTier' in kwargs:
            billing_tier = kwargs['billingTier']
        if billing_tier is None:
            raise TypeError("Missing 'billing_tier' argument")
        if order_id is None and 'orderId' in kwargs:
            order_id = kwargs['orderId']
        if order_id is None:
            raise TypeError("Missing 'order_id' argument")
        if order_number is None and 'orderNumber' in kwargs:
            order_number = kwargs['orderNumber']
        if order_number is None:
            raise TypeError("Missing 'order_number' argument")
        if purchase_order_number is None and 'purchaseOrderNumber' in kwargs:
            purchase_order_number = kwargs['purchaseOrderNumber']
        if purchase_order_number is None:
            raise TypeError("Missing 'purchase_order_number' argument")

        _setter("billing_tier", billing_tier)
        _setter("order_id", order_id)
        _setter("order_number", order_number)
        _setter("purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class GetConnectionProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        GetConnectionProjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")

        _setter("href", href)
        _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetConnectionRedundancyResult(dict):
    def __init__(__self__, *,
                 group: str,
                 priority: str):
        GetConnectionRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if group is None:
            raise TypeError("Missing 'group' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("group", group)
        _setter("priority", priority)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionZSideResult(dict):
    def __init__(__self__, *,
                 access_point: 'outputs.GetConnectionZSideAccessPointResult',
                 service_token: 'outputs.GetConnectionZSideServiceTokenResult'):
        GetConnectionZSideResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point=access_point,
            service_token=service_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point: Optional['outputs.GetConnectionZSideAccessPointResult'] = None,
             service_token: Optional['outputs.GetConnectionZSideServiceTokenResult'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point is None and 'accessPoint' in kwargs:
            access_point = kwargs['accessPoint']
        if access_point is None:
            raise TypeError("Missing 'access_point' argument")
        if service_token is None and 'serviceToken' in kwargs:
            service_token = kwargs['serviceToken']
        if service_token is None:
            raise TypeError("Missing 'service_token' argument")

        _setter("access_point", access_point)
        _setter("service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> 'outputs.GetConnectionZSideAccessPointResult':
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> 'outputs.GetConnectionZSideServiceTokenResult':
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionZSideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionZSideAccessPointAccountResult'],
                 authentication_key: str,
                 gateways: Sequence['outputs.GetConnectionZSideAccessPointGatewayResult'],
                 interfaces: Sequence['outputs.GetConnectionZSideAccessPointInterfaceResult'],
                 link_protocols: Sequence['outputs.GetConnectionZSideAccessPointLinkProtocolResult'],
                 locations: Sequence['outputs.GetConnectionZSideAccessPointLocationResult'],
                 peering_type: str,
                 ports: Sequence['outputs.GetConnectionZSideAccessPointPortResult'],
                 profiles: Sequence['outputs.GetConnectionZSideAccessPointProfileResult'],
                 provider_connection_id: str,
                 routers: Sequence['outputs.GetConnectionZSideAccessPointRouterResult'],
                 seller_region: str,
                 type: str,
                 virtual_devices: Sequence['outputs.GetConnectionZSideAccessPointVirtualDeviceResult']):
        """
        :param Sequence['GetConnectionZSideAccessPointRouterArgs'] routers: CloudRouter; Replaces `gateway` attribute (Set of Object)
        """
        GetConnectionZSideAccessPointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accounts=accounts,
            authentication_key=authentication_key,
            gateways=gateways,
            interfaces=interfaces,
            link_protocols=link_protocols,
            locations=locations,
            peering_type=peering_type,
            ports=ports,
            profiles=profiles,
            provider_connection_id=provider_connection_id,
            routers=routers,
            seller_region=seller_region,
            type=type,
            virtual_devices=virtual_devices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accounts: Optional[Sequence['outputs.GetConnectionZSideAccessPointAccountResult']] = None,
             authentication_key: Optional[str] = None,
             gateways: Optional[Sequence['outputs.GetConnectionZSideAccessPointGatewayResult']] = None,
             interfaces: Optional[Sequence['outputs.GetConnectionZSideAccessPointInterfaceResult']] = None,
             link_protocols: Optional[Sequence['outputs.GetConnectionZSideAccessPointLinkProtocolResult']] = None,
             locations: Optional[Sequence['outputs.GetConnectionZSideAccessPointLocationResult']] = None,
             peering_type: Optional[str] = None,
             ports: Optional[Sequence['outputs.GetConnectionZSideAccessPointPortResult']] = None,
             profiles: Optional[Sequence['outputs.GetConnectionZSideAccessPointProfileResult']] = None,
             provider_connection_id: Optional[str] = None,
             routers: Optional[Sequence['outputs.GetConnectionZSideAccessPointRouterResult']] = None,
             seller_region: Optional[str] = None,
             type: Optional[str] = None,
             virtual_devices: Optional[Sequence['outputs.GetConnectionZSideAccessPointVirtualDeviceResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if accounts is None:
            raise TypeError("Missing 'accounts' argument")
        if authentication_key is None and 'authenticationKey' in kwargs:
            authentication_key = kwargs['authenticationKey']
        if authentication_key is None:
            raise TypeError("Missing 'authentication_key' argument")
        if gateways is None:
            raise TypeError("Missing 'gateways' argument")
        if interfaces is None:
            raise TypeError("Missing 'interfaces' argument")
        if link_protocols is None and 'linkProtocols' in kwargs:
            link_protocols = kwargs['linkProtocols']
        if link_protocols is None:
            raise TypeError("Missing 'link_protocols' argument")
        if locations is None:
            raise TypeError("Missing 'locations' argument")
        if peering_type is None and 'peeringType' in kwargs:
            peering_type = kwargs['peeringType']
        if peering_type is None:
            raise TypeError("Missing 'peering_type' argument")
        if ports is None:
            raise TypeError("Missing 'ports' argument")
        if profiles is None:
            raise TypeError("Missing 'profiles' argument")
        if provider_connection_id is None and 'providerConnectionId' in kwargs:
            provider_connection_id = kwargs['providerConnectionId']
        if provider_connection_id is None:
            raise TypeError("Missing 'provider_connection_id' argument")
        if routers is None:
            raise TypeError("Missing 'routers' argument")
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if seller_region is None:
            raise TypeError("Missing 'seller_region' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if virtual_devices is None and 'virtualDevices' in kwargs:
            virtual_devices = kwargs['virtualDevices']
        if virtual_devices is None:
            raise TypeError("Missing 'virtual_devices' argument")

        _setter("accounts", accounts)
        _setter("authentication_key", authentication_key)
        _setter("gateways", gateways)
        _setter("interfaces", interfaces)
        _setter("link_protocols", link_protocols)
        _setter("locations", locations)
        _setter("peering_type", peering_type)
        _setter("ports", ports)
        _setter("profiles", profiles)
        _setter("provider_connection_id", provider_connection_id)
        _setter("routers", routers)
        _setter("seller_region", seller_region)
        _setter("type", type)
        _setter("virtual_devices", virtual_devices)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionZSideAccessPointAccountResult']:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def gateways(self) -> Sequence['outputs.GetConnectionZSideAccessPointGatewayResult']:
        warnings.warn("""router attribute will be returned instead""", DeprecationWarning)
        pulumi.log.warn("""gateways is deprecated: router attribute will be returned instead""")

        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetConnectionZSideAccessPointInterfaceResult']:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="linkProtocols")
    def link_protocols(self) -> Sequence['outputs.GetConnectionZSideAccessPointLinkProtocolResult']:
        return pulumi.get(self, "link_protocols")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetConnectionZSideAccessPointLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> str:
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetConnectionZSideAccessPointPortResult']:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileResult']:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def routers(self) -> Sequence['outputs.GetConnectionZSideAccessPointRouterResult']:
        """
        CloudRouter; Replaces `gateway` attribute (Set of Object)
        """
        return pulumi.get(self, "routers")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> str:
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> Sequence['outputs.GetConnectionZSideAccessPointVirtualDeviceResult']:
        return pulumi.get(self, "virtual_devices")


@pulumi.output_type
class GetConnectionZSideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetConnectionZSideAccessPointAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetConnectionZSideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 state: str,
                 uuid: str):
        GetConnectionZSideAccessPointGatewayResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            state=state,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             state: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("state", state)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str,
                 uuid: str):
        GetConnectionZSideAccessPointInterfaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("id", id)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        GetConnectionZSideAccessPointLinkProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            vlan_c_tag=vlan_c_tag,
            vlan_s_tag=vlan_s_tag,
            vlan_tag=vlan_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             vlan_c_tag: Optional[int] = None,
             vlan_s_tag: Optional[int] = None,
             vlan_tag: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if vlan_c_tag is None and 'vlanCTag' in kwargs:
            vlan_c_tag = kwargs['vlanCTag']
        if vlan_c_tag is None:
            raise TypeError("Missing 'vlan_c_tag' argument")
        if vlan_s_tag is None and 'vlanSTag' in kwargs:
            vlan_s_tag = kwargs['vlanSTag']
        if vlan_s_tag is None:
            raise TypeError("Missing 'vlan_s_tag' argument")
        if vlan_tag is None and 'vlanTag' in kwargs:
            vlan_tag = kwargs['vlanTag']
        if vlan_tag is None:
            raise TypeError("Missing 'vlan_tag' argument")

        _setter("type", type)
        _setter("vlan_c_tag", vlan_c_tag)
        _setter("vlan_s_tag", vlan_s_tag)
        _setter("vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetConnectionZSideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 href: str,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetConnectionZSideAccessPointLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("href", href)
        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionZSideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionZSideAccessPointPortRedundancyResult'],
                 uuid: str):
        GetConnectionZSideAccessPointPortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            name=name,
            redundancies=redundancies,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.GetConnectionZSideAccessPointPortRedundancyResult']] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if redundancies is None:
            raise TypeError("Missing 'redundancies' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("name", name)
        _setter("redundancies", redundancies)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionZSideAccessPointPortRedundancyResult']:
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 priority: str):
        GetConnectionZSideAccessPointPortRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        GetConnectionZSideAccessPointProfileResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point_type_configs=access_point_type_configs,
            description=description,
            href=href,
            name=name,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point_type_configs: Optional[Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult']] = None,
             description: Optional[str] = None,
             href: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point_type_configs is None and 'accessPointTypeConfigs' in kwargs:
            access_point_type_configs = kwargs['accessPointTypeConfigs']
        if access_point_type_configs is None:
            raise TypeError("Missing 'access_point_type_configs' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("access_point_type_configs", access_point_type_configs)
        _setter("description", description)
        _setter("href", href)
        _setter("name", name)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult']:
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 allow_bandwidth_auto_approval: bool,
                 allow_bandwidth_upgrade: bool,
                 allow_custom_bandwidth: bool,
                 allow_remote_connections: bool,
                 api_configs: Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult'],
                 authentication_keys: Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult'],
                 bandwidth_alert_threshold: float,
                 connection_label: str,
                 connection_redundancy_required: bool,
                 enable_auto_generate_service_key: bool,
                 link_protocol_configs: Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult'],
                 supported_bandwidths: Sequence[int],
                 type: str,
                 uuid: str):
        GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_bandwidth_auto_approval=allow_bandwidth_auto_approval,
            allow_bandwidth_upgrade=allow_bandwidth_upgrade,
            allow_custom_bandwidth=allow_custom_bandwidth,
            allow_remote_connections=allow_remote_connections,
            api_configs=api_configs,
            authentication_keys=authentication_keys,
            bandwidth_alert_threshold=bandwidth_alert_threshold,
            connection_label=connection_label,
            connection_redundancy_required=connection_redundancy_required,
            enable_auto_generate_service_key=enable_auto_generate_service_key,
            link_protocol_configs=link_protocol_configs,
            supported_bandwidths=supported_bandwidths,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_bandwidth_auto_approval: Optional[bool] = None,
             allow_bandwidth_upgrade: Optional[bool] = None,
             allow_custom_bandwidth: Optional[bool] = None,
             allow_remote_connections: Optional[bool] = None,
             api_configs: Optional[Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult']] = None,
             authentication_keys: Optional[Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult']] = None,
             bandwidth_alert_threshold: Optional[float] = None,
             connection_label: Optional[str] = None,
             connection_redundancy_required: Optional[bool] = None,
             enable_auto_generate_service_key: Optional[bool] = None,
             link_protocol_configs: Optional[Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult']] = None,
             supported_bandwidths: Optional[Sequence[int]] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_bandwidth_auto_approval is None and 'allowBandwidthAutoApproval' in kwargs:
            allow_bandwidth_auto_approval = kwargs['allowBandwidthAutoApproval']
        if allow_bandwidth_auto_approval is None:
            raise TypeError("Missing 'allow_bandwidth_auto_approval' argument")
        if allow_bandwidth_upgrade is None and 'allowBandwidthUpgrade' in kwargs:
            allow_bandwidth_upgrade = kwargs['allowBandwidthUpgrade']
        if allow_bandwidth_upgrade is None:
            raise TypeError("Missing 'allow_bandwidth_upgrade' argument")
        if allow_custom_bandwidth is None and 'allowCustomBandwidth' in kwargs:
            allow_custom_bandwidth = kwargs['allowCustomBandwidth']
        if allow_custom_bandwidth is None:
            raise TypeError("Missing 'allow_custom_bandwidth' argument")
        if allow_remote_connections is None and 'allowRemoteConnections' in kwargs:
            allow_remote_connections = kwargs['allowRemoteConnections']
        if allow_remote_connections is None:
            raise TypeError("Missing 'allow_remote_connections' argument")
        if api_configs is None and 'apiConfigs' in kwargs:
            api_configs = kwargs['apiConfigs']
        if api_configs is None:
            raise TypeError("Missing 'api_configs' argument")
        if authentication_keys is None and 'authenticationKeys' in kwargs:
            authentication_keys = kwargs['authenticationKeys']
        if authentication_keys is None:
            raise TypeError("Missing 'authentication_keys' argument")
        if bandwidth_alert_threshold is None and 'bandwidthAlertThreshold' in kwargs:
            bandwidth_alert_threshold = kwargs['bandwidthAlertThreshold']
        if bandwidth_alert_threshold is None:
            raise TypeError("Missing 'bandwidth_alert_threshold' argument")
        if connection_label is None and 'connectionLabel' in kwargs:
            connection_label = kwargs['connectionLabel']
        if connection_label is None:
            raise TypeError("Missing 'connection_label' argument")
        if connection_redundancy_required is None and 'connectionRedundancyRequired' in kwargs:
            connection_redundancy_required = kwargs['connectionRedundancyRequired']
        if connection_redundancy_required is None:
            raise TypeError("Missing 'connection_redundancy_required' argument")
        if enable_auto_generate_service_key is None and 'enableAutoGenerateServiceKey' in kwargs:
            enable_auto_generate_service_key = kwargs['enableAutoGenerateServiceKey']
        if enable_auto_generate_service_key is None:
            raise TypeError("Missing 'enable_auto_generate_service_key' argument")
        if link_protocol_configs is None and 'linkProtocolConfigs' in kwargs:
            link_protocol_configs = kwargs['linkProtocolConfigs']
        if link_protocol_configs is None:
            raise TypeError("Missing 'link_protocol_configs' argument")
        if supported_bandwidths is None and 'supportedBandwidths' in kwargs:
            supported_bandwidths = kwargs['supportedBandwidths']
        if supported_bandwidths is None:
            raise TypeError("Missing 'supported_bandwidths' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        _setter("allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        _setter("allow_custom_bandwidth", allow_custom_bandwidth)
        _setter("allow_remote_connections", allow_remote_connections)
        _setter("api_configs", api_configs)
        _setter("authentication_keys", authentication_keys)
        _setter("bandwidth_alert_threshold", bandwidth_alert_threshold)
        _setter("connection_label", connection_label)
        _setter("connection_redundancy_required", connection_redundancy_required)
        _setter("enable_auto_generate_service_key", enable_auto_generate_service_key)
        _setter("link_protocol_configs", link_protocol_configs)
        _setter("supported_bandwidths", supported_bandwidths)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> bool:
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfigs")
    def api_configs(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult']:
        return pulumi.get(self, "api_configs")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult']:
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> float:
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> str:
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> bool:
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> bool:
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfigs")
    def link_protocol_configs(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult']:
        return pulumi.get(self, "link_protocol_configs")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: bool,
                 api_available: bool,
                 bandwidth_from_api: bool,
                 equinix_managed_port: bool,
                 equinix_managed_vlan: bool,
                 integration_id: str,
                 over_subscription_limit: int):
        GetConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_over_subscription=allow_over_subscription,
            api_available=api_available,
            bandwidth_from_api=bandwidth_from_api,
            equinix_managed_port=equinix_managed_port,
            equinix_managed_vlan=equinix_managed_vlan,
            integration_id=integration_id,
            over_subscription_limit=over_subscription_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_over_subscription: Optional[bool] = None,
             api_available: Optional[bool] = None,
             bandwidth_from_api: Optional[bool] = None,
             equinix_managed_port: Optional[bool] = None,
             equinix_managed_vlan: Optional[bool] = None,
             integration_id: Optional[str] = None,
             over_subscription_limit: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_over_subscription is None and 'allowOverSubscription' in kwargs:
            allow_over_subscription = kwargs['allowOverSubscription']
        if allow_over_subscription is None:
            raise TypeError("Missing 'allow_over_subscription' argument")
        if api_available is None and 'apiAvailable' in kwargs:
            api_available = kwargs['apiAvailable']
        if api_available is None:
            raise TypeError("Missing 'api_available' argument")
        if bandwidth_from_api is None and 'bandwidthFromApi' in kwargs:
            bandwidth_from_api = kwargs['bandwidthFromApi']
        if bandwidth_from_api is None:
            raise TypeError("Missing 'bandwidth_from_api' argument")
        if equinix_managed_port is None and 'equinixManagedPort' in kwargs:
            equinix_managed_port = kwargs['equinixManagedPort']
        if equinix_managed_port is None:
            raise TypeError("Missing 'equinix_managed_port' argument")
        if equinix_managed_vlan is None and 'equinixManagedVlan' in kwargs:
            equinix_managed_vlan = kwargs['equinixManagedVlan']
        if equinix_managed_vlan is None:
            raise TypeError("Missing 'equinix_managed_vlan' argument")
        if integration_id is None and 'integrationId' in kwargs:
            integration_id = kwargs['integrationId']
        if integration_id is None:
            raise TypeError("Missing 'integration_id' argument")
        if over_subscription_limit is None and 'overSubscriptionLimit' in kwargs:
            over_subscription_limit = kwargs['overSubscriptionLimit']
        if over_subscription_limit is None:
            raise TypeError("Missing 'over_subscription_limit' argument")

        _setter("allow_over_subscription", allow_over_subscription)
        _setter("api_available", api_available)
        _setter("bandwidth_from_api", bandwidth_from_api)
        _setter("equinix_managed_port", equinix_managed_port)
        _setter("equinix_managed_vlan", equinix_managed_vlan)
        _setter("integration_id", integration_id)
        _setter("over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> bool:
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> bool:
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> bool:
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> bool:
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> bool:
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> int:
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 label: str,
                 required: bool):
        GetConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            label=label,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("description", description)
        _setter("label", label)
        _setter("required", required)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: str,
                 encapsulation_strategy: str,
                 reuse_vlan_s_tag: bool):
        GetConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encapsulation=encapsulation,
            encapsulation_strategy=encapsulation_strategy,
            reuse_vlan_s_tag=reuse_vlan_s_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encapsulation: Optional[str] = None,
             encapsulation_strategy: Optional[str] = None,
             reuse_vlan_s_tag: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if encapsulation is None:
            raise TypeError("Missing 'encapsulation' argument")
        if encapsulation_strategy is None and 'encapsulationStrategy' in kwargs:
            encapsulation_strategy = kwargs['encapsulationStrategy']
        if encapsulation_strategy is None:
            raise TypeError("Missing 'encapsulation_strategy' argument")
        if reuse_vlan_s_tag is None and 'reuseVlanSTag' in kwargs:
            reuse_vlan_s_tag = kwargs['reuseVlanSTag']
        if reuse_vlan_s_tag is None:
            raise TypeError("Missing 'reuse_vlan_s_tag' argument")

        _setter("encapsulation", encapsulation)
        _setter("encapsulation_strategy", encapsulation_strategy)
        _setter("reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> str:
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> str:
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> bool:
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetConnectionZSideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 state: str,
                 uuid: str):
        GetConnectionZSideAccessPointRouterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            state=state,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             state: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("state", state)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        GetConnectionZSideAccessPointVirtualDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: str,
                 uuid: str):
        GetConnectionZSideServiceTokenResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("description", description)
        _setter("href", href)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPortAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetPortAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetPortChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetPortChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPortDeviceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 redundancies: Sequence['outputs.GetPortDeviceRedundancyResult']):
        GetPortDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            redundancies=redundancies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.GetPortDeviceRedundancyResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if redundancies is None:
            raise TypeError("Missing 'redundancies' argument")

        _setter("name", name)
        _setter("redundancies", redundancies)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortDeviceRedundancyResult']:
        return pulumi.get(self, "redundancies")


@pulumi.output_type
class GetPortDeviceRedundancyResult(dict):
    def __init__(__self__, *,
                 group: str,
                 priority: str):
        GetPortDeviceRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if group is None:
            raise TypeError("Missing 'group' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("group", group)
        _setter("priority", priority)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortEncapsulationResult(dict):
    def __init__(__self__, *,
                 tag_protocol_id: str,
                 type: str):
        GetPortEncapsulationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tag_protocol_id=tag_protocol_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tag_protocol_id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if tag_protocol_id is None and 'tagProtocolId' in kwargs:
            tag_protocol_id = kwargs['tagProtocolId']
        if tag_protocol_id is None:
            raise TypeError("Missing 'tag_protocol_id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("tag_protocol_id", tag_protocol_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="tagProtocolId")
    def tag_protocol_id(self) -> str:
        return pulumi.get(self, "tag_protocol_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPortLocationResult(dict):
    def __init__(__self__, *,
                 href: str,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetPortLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("href", href)
        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetPortOperationResult(dict):
    def __init__(__self__, *,
                 connection_count: int,
                 op_status_changed_at: str,
                 operational_status: str):
        GetPortOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_count=connection_count,
            op_status_changed_at=op_status_changed_at,
            operational_status=operational_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_count: Optional[int] = None,
             op_status_changed_at: Optional[str] = None,
             operational_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if connection_count is None and 'connectionCount' in kwargs:
            connection_count = kwargs['connectionCount']
        if connection_count is None:
            raise TypeError("Missing 'connection_count' argument")
        if op_status_changed_at is None and 'opStatusChangedAt' in kwargs:
            op_status_changed_at = kwargs['opStatusChangedAt']
        if op_status_changed_at is None:
            raise TypeError("Missing 'op_status_changed_at' argument")
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']
        if operational_status is None:
            raise TypeError("Missing 'operational_status' argument")

        _setter("connection_count", connection_count)
        _setter("op_status_changed_at", op_status_changed_at)
        _setter("operational_status", operational_status)

    @property
    @pulumi.getter(name="connectionCount")
    def connection_count(self) -> int:
        return pulumi.get(self, "connection_count")

    @property
    @pulumi.getter(name="opStatusChangedAt")
    def op_status_changed_at(self) -> str:
        return pulumi.get(self, "op_status_changed_at")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        return pulumi.get(self, "operational_status")


@pulumi.output_type
class GetPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        GetPortRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if group is None:
            raise TypeError("Missing 'group' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("enabled", enabled)
        _setter("group", group)
        _setter("priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsDatumResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetPortsDatumAccountResult'],
                 available_bandwidth: int,
                 bandwidth: int,
                 change_logs: Sequence['outputs.GetPortsDatumChangeLogResult'],
                 description: str,
                 devices: Sequence['outputs.GetPortsDatumDeviceResult'],
                 encapsulations: Sequence['outputs.GetPortsDatumEncapsulationResult'],
                 href: str,
                 lag_enabled: bool,
                 locations: Sequence['outputs.GetPortsDatumLocationResult'],
                 name: str,
                 operations: Sequence['outputs.GetPortsDatumOperationResult'],
                 redundancies: Sequence['outputs.GetPortsDatumRedundancyResult'],
                 service_type: str,
                 state: str,
                 type: str,
                 used_bandwidth: int,
                 uuid: Optional[str] = None):
        GetPortsDatumResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accounts=accounts,
            available_bandwidth=available_bandwidth,
            bandwidth=bandwidth,
            change_logs=change_logs,
            description=description,
            devices=devices,
            encapsulations=encapsulations,
            href=href,
            lag_enabled=lag_enabled,
            locations=locations,
            name=name,
            operations=operations,
            redundancies=redundancies,
            service_type=service_type,
            state=state,
            type=type,
            used_bandwidth=used_bandwidth,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accounts: Optional[Sequence['outputs.GetPortsDatumAccountResult']] = None,
             available_bandwidth: Optional[int] = None,
             bandwidth: Optional[int] = None,
             change_logs: Optional[Sequence['outputs.GetPortsDatumChangeLogResult']] = None,
             description: Optional[str] = None,
             devices: Optional[Sequence['outputs.GetPortsDatumDeviceResult']] = None,
             encapsulations: Optional[Sequence['outputs.GetPortsDatumEncapsulationResult']] = None,
             href: Optional[str] = None,
             lag_enabled: Optional[bool] = None,
             locations: Optional[Sequence['outputs.GetPortsDatumLocationResult']] = None,
             name: Optional[str] = None,
             operations: Optional[Sequence['outputs.GetPortsDatumOperationResult']] = None,
             redundancies: Optional[Sequence['outputs.GetPortsDatumRedundancyResult']] = None,
             service_type: Optional[str] = None,
             state: Optional[str] = None,
             type: Optional[str] = None,
             used_bandwidth: Optional[int] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if accounts is None:
            raise TypeError("Missing 'accounts' argument")
        if available_bandwidth is None and 'availableBandwidth' in kwargs:
            available_bandwidth = kwargs['availableBandwidth']
        if available_bandwidth is None:
            raise TypeError("Missing 'available_bandwidth' argument")
        if bandwidth is None:
            raise TypeError("Missing 'bandwidth' argument")
        if change_logs is None and 'changeLogs' in kwargs:
            change_logs = kwargs['changeLogs']
        if change_logs is None:
            raise TypeError("Missing 'change_logs' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if devices is None:
            raise TypeError("Missing 'devices' argument")
        if encapsulations is None:
            raise TypeError("Missing 'encapsulations' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if lag_enabled is None and 'lagEnabled' in kwargs:
            lag_enabled = kwargs['lagEnabled']
        if lag_enabled is None:
            raise TypeError("Missing 'lag_enabled' argument")
        if locations is None:
            raise TypeError("Missing 'locations' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if operations is None:
            raise TypeError("Missing 'operations' argument")
        if redundancies is None:
            raise TypeError("Missing 'redundancies' argument")
        if service_type is None and 'serviceType' in kwargs:
            service_type = kwargs['serviceType']
        if service_type is None:
            raise TypeError("Missing 'service_type' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if used_bandwidth is None and 'usedBandwidth' in kwargs:
            used_bandwidth = kwargs['usedBandwidth']
        if used_bandwidth is None:
            raise TypeError("Missing 'used_bandwidth' argument")

        _setter("accounts", accounts)
        _setter("available_bandwidth", available_bandwidth)
        _setter("bandwidth", bandwidth)
        _setter("change_logs", change_logs)
        _setter("description", description)
        _setter("devices", devices)
        _setter("encapsulations", encapsulations)
        _setter("href", href)
        _setter("lag_enabled", lag_enabled)
        _setter("locations", locations)
        _setter("name", name)
        _setter("operations", operations)
        _setter("redundancies", redundancies)
        _setter("service_type", service_type)
        _setter("state", state)
        _setter("type", type)
        _setter("used_bandwidth", used_bandwidth)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetPortsDatumAccountResult']:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="availableBandwidth")
    def available_bandwidth(self) -> int:
        return pulumi.get(self, "available_bandwidth")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetPortsDatumChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPortsDatumDeviceResult']:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def encapsulations(self) -> Sequence['outputs.GetPortsDatumEncapsulationResult']:
        return pulumi.get(self, "encapsulations")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> bool:
        return pulumi.get(self, "lag_enabled")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetPortsDatumLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetPortsDatumOperationResult']:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortsDatumRedundancyResult']:
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBandwidth")
    def used_bandwidth(self) -> int:
        return pulumi.get(self, "used_bandwidth")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPortsDatumAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str):
        GetPortsDatumAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")


@pulumi.output_type
class GetPortsDatumChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetPortsDatumChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPortsDatumDeviceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 redundancies: Sequence['outputs.GetPortsDatumDeviceRedundancyResult']):
        GetPortsDatumDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            redundancies=redundancies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             redundancies: Optional[Sequence['outputs.GetPortsDatumDeviceRedundancyResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if redundancies is None:
            raise TypeError("Missing 'redundancies' argument")

        _setter("name", name)
        _setter("redundancies", redundancies)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortsDatumDeviceRedundancyResult']:
        return pulumi.get(self, "redundancies")


@pulumi.output_type
class GetPortsDatumDeviceRedundancyResult(dict):
    def __init__(__self__, *,
                 group: str,
                 priority: str):
        GetPortsDatumDeviceRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if group is None:
            raise TypeError("Missing 'group' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("group", group)
        _setter("priority", priority)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsDatumEncapsulationResult(dict):
    def __init__(__self__, *,
                 tag_protocol_id: str,
                 type: str):
        GetPortsDatumEncapsulationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tag_protocol_id=tag_protocol_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tag_protocol_id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if tag_protocol_id is None and 'tagProtocolId' in kwargs:
            tag_protocol_id = kwargs['tagProtocolId']
        if tag_protocol_id is None:
            raise TypeError("Missing 'tag_protocol_id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("tag_protocol_id", tag_protocol_id)
        _setter("type", type)

    @property
    @pulumi.getter(name="tagProtocolId")
    def tag_protocol_id(self) -> str:
        return pulumi.get(self, "tag_protocol_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPortsDatumLocationResult(dict):
    def __init__(__self__, *,
                 href: str,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetPortsDatumLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("href", href)
        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetPortsDatumOperationResult(dict):
    def __init__(__self__, *,
                 connection_count: int,
                 op_status_changed_at: str,
                 operational_status: str):
        GetPortsDatumOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_count=connection_count,
            op_status_changed_at=op_status_changed_at,
            operational_status=operational_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_count: Optional[int] = None,
             op_status_changed_at: Optional[str] = None,
             operational_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if connection_count is None and 'connectionCount' in kwargs:
            connection_count = kwargs['connectionCount']
        if connection_count is None:
            raise TypeError("Missing 'connection_count' argument")
        if op_status_changed_at is None and 'opStatusChangedAt' in kwargs:
            op_status_changed_at = kwargs['opStatusChangedAt']
        if op_status_changed_at is None:
            raise TypeError("Missing 'op_status_changed_at' argument")
        if operational_status is None and 'operationalStatus' in kwargs:
            operational_status = kwargs['operationalStatus']
        if operational_status is None:
            raise TypeError("Missing 'operational_status' argument")

        _setter("connection_count", connection_count)
        _setter("op_status_changed_at", op_status_changed_at)
        _setter("operational_status", operational_status)

    @property
    @pulumi.getter(name="connectionCount")
    def connection_count(self) -> int:
        return pulumi.get(self, "connection_count")

    @property
    @pulumi.getter(name="opStatusChangedAt")
    def op_status_changed_at(self) -> str:
        return pulumi.get(self, "op_status_changed_at")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        return pulumi.get(self, "operational_status")


@pulumi.output_type
class GetPortsDatumRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        GetPortsDatumRedundancyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            group=group,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             group: Optional[str] = None,
             priority: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if group is None:
            raise TypeError("Missing 'group' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")

        _setter("enabled", enabled)
        _setter("group", group)
        _setter("priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Query Parameter to Get Ports By Name
        """
        GetPortsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Query Parameter to Get Ports By Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRoutingProtocolBfdResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Bidirectional Forwarding Detection enablement
        :param str interval: Interval range between the received BFD control packets
        """
        GetRoutingProtocolBfdResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            interval=interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             interval: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")

        _setter("enabled", enabled)
        if interval is not None:
            _setter("interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class GetRoutingProtocolBgpIpv4Result(dict):
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param bool enabled: Admin status for the BGP session
        """
        GetRoutingProtocolBgpIpv4Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_peer_ip=customer_peer_ip,
            equinix_peer_ip=equinix_peer_ip,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_peer_ip: Optional[str] = None,
             equinix_peer_ip: Optional[str] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if customer_peer_ip is None and 'customerPeerIp' in kwargs:
            customer_peer_ip = kwargs['customerPeerIp']
        if customer_peer_ip is None:
            raise TypeError("Missing 'customer_peer_ip' argument")
        if equinix_peer_ip is None and 'equinixPeerIp' in kwargs:
            equinix_peer_ip = kwargs['equinixPeerIp']
        if equinix_peer_ip is None:
            raise TypeError("Missing 'equinix_peer_ip' argument")

        _setter("customer_peer_ip", customer_peer_ip)
        _setter("equinix_peer_ip", equinix_peer_ip)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetRoutingProtocolBgpIpv6Result(dict):
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param bool enabled: Admin status for the BGP session
        """
        GetRoutingProtocolBgpIpv6Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_peer_ip=customer_peer_ip,
            equinix_peer_ip=equinix_peer_ip,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_peer_ip: Optional[str] = None,
             equinix_peer_ip: Optional[str] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if customer_peer_ip is None and 'customerPeerIp' in kwargs:
            customer_peer_ip = kwargs['customerPeerIp']
        if customer_peer_ip is None:
            raise TypeError("Missing 'customer_peer_ip' argument")
        if equinix_peer_ip is None and 'equinixPeerIp' in kwargs:
            equinix_peer_ip = kwargs['equinixPeerIp']
        if equinix_peer_ip is None:
            raise TypeError("Missing 'equinix_peer_ip' argument")

        _setter("customer_peer_ip", customer_peer_ip)
        _setter("equinix_peer_ip", equinix_peer_ip)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetRoutingProtocolChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        GetRoutingProtocolChangeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("href", href)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRoutingProtocolChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetRoutingProtocolChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRoutingProtocolDirectIpv4Result(dict):
    def __init__(__self__, *,
                 equinix_iface_ip: str):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        GetRoutingProtocolDirectIpv4Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_iface_ip=equinix_iface_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_iface_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_iface_ip is None and 'equinixIfaceIp' in kwargs:
            equinix_iface_ip = kwargs['equinixIfaceIp']
        if equinix_iface_ip is None:
            raise TypeError("Missing 'equinix_iface_ip' argument")

        _setter("equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> str:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class GetRoutingProtocolDirectIpv6Result(dict):
    def __init__(__self__, *,
                 equinix_iface_ip: Optional[str] = None):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        GetRoutingProtocolDirectIpv6Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            equinix_iface_ip=equinix_iface_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             equinix_iface_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if equinix_iface_ip is None and 'equinixIfaceIp' in kwargs:
            equinix_iface_ip = kwargs['equinixIfaceIp']

        if equinix_iface_ip is not None:
            _setter("equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class GetRoutingProtocolOperationResult(dict):
    def __init__(__self__, *,
                 errors: Sequence['outputs.GetRoutingProtocolOperationErrorResult']):
        GetRoutingProtocolOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            errors=errors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             errors: Optional[Sequence['outputs.GetRoutingProtocolOperationErrorResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if errors is None:
            raise TypeError("Missing 'errors' argument")

        _setter("errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetRoutingProtocolOperationErrorResult']:
        return pulumi.get(self, "errors")


@pulumi.output_type
class GetRoutingProtocolOperationErrorResult(dict):
    def __init__(__self__, *,
                 additional_infos: Sequence['outputs.GetRoutingProtocolOperationErrorAdditionalInfoResult'],
                 correlation_id: str,
                 details: str,
                 error_code: str,
                 error_message: str,
                 help: str):
        GetRoutingProtocolOperationErrorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_infos=additional_infos,
            correlation_id=correlation_id,
            details=details,
            error_code=error_code,
            error_message=error_message,
            help=help,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_infos: Optional[Sequence['outputs.GetRoutingProtocolOperationErrorAdditionalInfoResult']] = None,
             correlation_id: Optional[str] = None,
             details: Optional[str] = None,
             error_code: Optional[str] = None,
             error_message: Optional[str] = None,
             help: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if additional_infos is None and 'additionalInfos' in kwargs:
            additional_infos = kwargs['additionalInfos']
        if additional_infos is None:
            raise TypeError("Missing 'additional_infos' argument")
        if correlation_id is None and 'correlationId' in kwargs:
            correlation_id = kwargs['correlationId']
        if correlation_id is None:
            raise TypeError("Missing 'correlation_id' argument")
        if details is None:
            raise TypeError("Missing 'details' argument")
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_code is None:
            raise TypeError("Missing 'error_code' argument")
        if error_message is None and 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']
        if error_message is None:
            raise TypeError("Missing 'error_message' argument")
        if help is None:
            raise TypeError("Missing 'help' argument")

        _setter("additional_infos", additional_infos)
        _setter("correlation_id", correlation_id)
        _setter("details", details)
        _setter("error_code", error_code)
        _setter("error_message", error_message)
        _setter("help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetRoutingProtocolOperationErrorAdditionalInfoResult']:
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> str:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> str:
        return pulumi.get(self, "help")


@pulumi.output_type
class GetRoutingProtocolOperationErrorAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 property: str,
                 reason: str):
        GetRoutingProtocolOperationErrorAdditionalInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property=property,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property: Optional[str] = None,
             reason: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if property is None:
            raise TypeError("Missing 'property' argument")
        if reason is None:
            raise TypeError("Missing 'reason' argument")

        _setter("property", property)
        _setter("reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 allow_bandwidth_auto_approval: bool,
                 allow_bandwidth_upgrade: bool,
                 allow_custom_bandwidth: bool,
                 allow_remote_connections: bool,
                 api_configs: Sequence['outputs.GetServiceProfileAccessPointTypeConfigApiConfigResult'],
                 authentication_keys: Sequence['outputs.GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult'],
                 bandwidth_alert_threshold: float,
                 connection_label: str,
                 connection_redundancy_required: bool,
                 enable_auto_generate_service_key: bool,
                 link_protocol_configs: Sequence['outputs.GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult'],
                 supported_bandwidths: Sequence[int],
                 type: str,
                 uuid: str):
        GetServiceProfileAccessPointTypeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_bandwidth_auto_approval=allow_bandwidth_auto_approval,
            allow_bandwidth_upgrade=allow_bandwidth_upgrade,
            allow_custom_bandwidth=allow_custom_bandwidth,
            allow_remote_connections=allow_remote_connections,
            api_configs=api_configs,
            authentication_keys=authentication_keys,
            bandwidth_alert_threshold=bandwidth_alert_threshold,
            connection_label=connection_label,
            connection_redundancy_required=connection_redundancy_required,
            enable_auto_generate_service_key=enable_auto_generate_service_key,
            link_protocol_configs=link_protocol_configs,
            supported_bandwidths=supported_bandwidths,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_bandwidth_auto_approval: Optional[bool] = None,
             allow_bandwidth_upgrade: Optional[bool] = None,
             allow_custom_bandwidth: Optional[bool] = None,
             allow_remote_connections: Optional[bool] = None,
             api_configs: Optional[Sequence['outputs.GetServiceProfileAccessPointTypeConfigApiConfigResult']] = None,
             authentication_keys: Optional[Sequence['outputs.GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult']] = None,
             bandwidth_alert_threshold: Optional[float] = None,
             connection_label: Optional[str] = None,
             connection_redundancy_required: Optional[bool] = None,
             enable_auto_generate_service_key: Optional[bool] = None,
             link_protocol_configs: Optional[Sequence['outputs.GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult']] = None,
             supported_bandwidths: Optional[Sequence[int]] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_bandwidth_auto_approval is None and 'allowBandwidthAutoApproval' in kwargs:
            allow_bandwidth_auto_approval = kwargs['allowBandwidthAutoApproval']
        if allow_bandwidth_auto_approval is None:
            raise TypeError("Missing 'allow_bandwidth_auto_approval' argument")
        if allow_bandwidth_upgrade is None and 'allowBandwidthUpgrade' in kwargs:
            allow_bandwidth_upgrade = kwargs['allowBandwidthUpgrade']
        if allow_bandwidth_upgrade is None:
            raise TypeError("Missing 'allow_bandwidth_upgrade' argument")
        if allow_custom_bandwidth is None and 'allowCustomBandwidth' in kwargs:
            allow_custom_bandwidth = kwargs['allowCustomBandwidth']
        if allow_custom_bandwidth is None:
            raise TypeError("Missing 'allow_custom_bandwidth' argument")
        if allow_remote_connections is None and 'allowRemoteConnections' in kwargs:
            allow_remote_connections = kwargs['allowRemoteConnections']
        if allow_remote_connections is None:
            raise TypeError("Missing 'allow_remote_connections' argument")
        if api_configs is None and 'apiConfigs' in kwargs:
            api_configs = kwargs['apiConfigs']
        if api_configs is None:
            raise TypeError("Missing 'api_configs' argument")
        if authentication_keys is None and 'authenticationKeys' in kwargs:
            authentication_keys = kwargs['authenticationKeys']
        if authentication_keys is None:
            raise TypeError("Missing 'authentication_keys' argument")
        if bandwidth_alert_threshold is None and 'bandwidthAlertThreshold' in kwargs:
            bandwidth_alert_threshold = kwargs['bandwidthAlertThreshold']
        if bandwidth_alert_threshold is None:
            raise TypeError("Missing 'bandwidth_alert_threshold' argument")
        if connection_label is None and 'connectionLabel' in kwargs:
            connection_label = kwargs['connectionLabel']
        if connection_label is None:
            raise TypeError("Missing 'connection_label' argument")
        if connection_redundancy_required is None and 'connectionRedundancyRequired' in kwargs:
            connection_redundancy_required = kwargs['connectionRedundancyRequired']
        if connection_redundancy_required is None:
            raise TypeError("Missing 'connection_redundancy_required' argument")
        if enable_auto_generate_service_key is None and 'enableAutoGenerateServiceKey' in kwargs:
            enable_auto_generate_service_key = kwargs['enableAutoGenerateServiceKey']
        if enable_auto_generate_service_key is None:
            raise TypeError("Missing 'enable_auto_generate_service_key' argument")
        if link_protocol_configs is None and 'linkProtocolConfigs' in kwargs:
            link_protocol_configs = kwargs['linkProtocolConfigs']
        if link_protocol_configs is None:
            raise TypeError("Missing 'link_protocol_configs' argument")
        if supported_bandwidths is None and 'supportedBandwidths' in kwargs:
            supported_bandwidths = kwargs['supportedBandwidths']
        if supported_bandwidths is None:
            raise TypeError("Missing 'supported_bandwidths' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        _setter("allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        _setter("allow_custom_bandwidth", allow_custom_bandwidth)
        _setter("allow_remote_connections", allow_remote_connections)
        _setter("api_configs", api_configs)
        _setter("authentication_keys", authentication_keys)
        _setter("bandwidth_alert_threshold", bandwidth_alert_threshold)
        _setter("connection_label", connection_label)
        _setter("connection_redundancy_required", connection_redundancy_required)
        _setter("enable_auto_generate_service_key", enable_auto_generate_service_key)
        _setter("link_protocol_configs", link_protocol_configs)
        _setter("supported_bandwidths", supported_bandwidths)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> bool:
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfigs")
    def api_configs(self) -> Sequence['outputs.GetServiceProfileAccessPointTypeConfigApiConfigResult']:
        return pulumi.get(self, "api_configs")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Sequence['outputs.GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult']:
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> float:
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> str:
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> bool:
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> bool:
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfigs")
    def link_protocol_configs(self) -> Sequence['outputs.GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult']:
        return pulumi.get(self, "link_protocol_configs")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: bool,
                 api_available: bool,
                 bandwidth_from_api: bool,
                 equinix_managed_port: bool,
                 equinix_managed_vlan: bool,
                 integration_id: str,
                 over_subscription_limit: int):
        GetServiceProfileAccessPointTypeConfigApiConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_over_subscription=allow_over_subscription,
            api_available=api_available,
            bandwidth_from_api=bandwidth_from_api,
            equinix_managed_port=equinix_managed_port,
            equinix_managed_vlan=equinix_managed_vlan,
            integration_id=integration_id,
            over_subscription_limit=over_subscription_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_over_subscription: Optional[bool] = None,
             api_available: Optional[bool] = None,
             bandwidth_from_api: Optional[bool] = None,
             equinix_managed_port: Optional[bool] = None,
             equinix_managed_vlan: Optional[bool] = None,
             integration_id: Optional[str] = None,
             over_subscription_limit: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_over_subscription is None and 'allowOverSubscription' in kwargs:
            allow_over_subscription = kwargs['allowOverSubscription']
        if allow_over_subscription is None:
            raise TypeError("Missing 'allow_over_subscription' argument")
        if api_available is None and 'apiAvailable' in kwargs:
            api_available = kwargs['apiAvailable']
        if api_available is None:
            raise TypeError("Missing 'api_available' argument")
        if bandwidth_from_api is None and 'bandwidthFromApi' in kwargs:
            bandwidth_from_api = kwargs['bandwidthFromApi']
        if bandwidth_from_api is None:
            raise TypeError("Missing 'bandwidth_from_api' argument")
        if equinix_managed_port is None and 'equinixManagedPort' in kwargs:
            equinix_managed_port = kwargs['equinixManagedPort']
        if equinix_managed_port is None:
            raise TypeError("Missing 'equinix_managed_port' argument")
        if equinix_managed_vlan is None and 'equinixManagedVlan' in kwargs:
            equinix_managed_vlan = kwargs['equinixManagedVlan']
        if equinix_managed_vlan is None:
            raise TypeError("Missing 'equinix_managed_vlan' argument")
        if integration_id is None and 'integrationId' in kwargs:
            integration_id = kwargs['integrationId']
        if integration_id is None:
            raise TypeError("Missing 'integration_id' argument")
        if over_subscription_limit is None and 'overSubscriptionLimit' in kwargs:
            over_subscription_limit = kwargs['overSubscriptionLimit']
        if over_subscription_limit is None:
            raise TypeError("Missing 'over_subscription_limit' argument")

        _setter("allow_over_subscription", allow_over_subscription)
        _setter("api_available", api_available)
        _setter("bandwidth_from_api", bandwidth_from_api)
        _setter("equinix_managed_port", equinix_managed_port)
        _setter("equinix_managed_vlan", equinix_managed_vlan)
        _setter("integration_id", integration_id)
        _setter("over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> bool:
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> bool:
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> bool:
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> bool:
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> bool:
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> int:
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 label: str,
                 required: bool):
        GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            label=label,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("description", description)
        _setter("label", label)
        _setter("required", required)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: str,
                 encapsulation_strategy: str,
                 reuse_vlan_s_tag: bool):
        GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encapsulation=encapsulation,
            encapsulation_strategy=encapsulation_strategy,
            reuse_vlan_s_tag=reuse_vlan_s_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encapsulation: Optional[str] = None,
             encapsulation_strategy: Optional[str] = None,
             reuse_vlan_s_tag: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if encapsulation is None:
            raise TypeError("Missing 'encapsulation' argument")
        if encapsulation_strategy is None and 'encapsulationStrategy' in kwargs:
            encapsulation_strategy = kwargs['encapsulationStrategy']
        if encapsulation_strategy is None:
            raise TypeError("Missing 'encapsulation_strategy' argument")
        if reuse_vlan_s_tag is None and 'reuseVlanSTag' in kwargs:
            reuse_vlan_s_tag = kwargs['reuseVlanSTag']
        if reuse_vlan_s_tag is None:
            raise TypeError("Missing 'reuse_vlan_s_tag' argument")

        _setter("encapsulation", encapsulation)
        _setter("encapsulation_strategy", encapsulation_strategy)
        _setter("reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> str:
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> str:
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> bool:
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetServiceProfileAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        GetServiceProfileAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
            ucm_id=ucm_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             ucm_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")
        if ucm_id is None and 'ucmId' in kwargs:
            ucm_id = kwargs['ucmId']
        if ucm_id is None:
            raise TypeError("Missing 'ucm_id' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)
        _setter("ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceProfileChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetServiceProfileChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceProfileCustomFieldResult(dict):
    def __init__(__self__, *,
                 capture_in_email: bool,
                 data_type: str,
                 description: str,
                 label: str,
                 options: Sequence[str],
                 required: bool):
        GetServiceProfileCustomFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capture_in_email=capture_in_email,
            data_type=data_type,
            description=description,
            label=label,
            options=options,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capture_in_email: Optional[bool] = None,
             data_type: Optional[str] = None,
             description: Optional[str] = None,
             label: Optional[str] = None,
             options: Optional[Sequence[str]] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if capture_in_email is None and 'captureInEmail' in kwargs:
            capture_in_email = kwargs['captureInEmail']
        if capture_in_email is None:
            raise TypeError("Missing 'capture_in_email' argument")
        if data_type is None and 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if data_type is None:
            raise TypeError("Missing 'data_type' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if options is None:
            raise TypeError("Missing 'options' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("capture_in_email", capture_in_email)
        _setter("data_type", data_type)
        _setter("description", description)
        _setter("label", label)
        _setter("options", options)
        _setter("required", required)

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> bool:
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfileMarketingInfoResult(dict):
    def __init__(__self__, *,
                 logo: str,
                 process_steps: Sequence['outputs.GetServiceProfileMarketingInfoProcessStepResult'],
                 promotion: bool):
        GetServiceProfileMarketingInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logo=logo,
            process_steps=process_steps,
            promotion=promotion,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logo: Optional[str] = None,
             process_steps: Optional[Sequence['outputs.GetServiceProfileMarketingInfoProcessStepResult']] = None,
             promotion: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if logo is None:
            raise TypeError("Missing 'logo' argument")
        if process_steps is None and 'processSteps' in kwargs:
            process_steps = kwargs['processSteps']
        if process_steps is None:
            raise TypeError("Missing 'process_steps' argument")
        if promotion is None:
            raise TypeError("Missing 'promotion' argument")

        _setter("logo", logo)
        _setter("process_steps", process_steps)
        _setter("promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> str:
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Sequence['outputs.GetServiceProfileMarketingInfoProcessStepResult']:
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> bool:
        return pulumi.get(self, "promotion")


@pulumi.output_type
class GetServiceProfileMarketingInfoProcessStepResult(dict):
    def __init__(__self__, *,
                 description: str,
                 sub_title: str,
                 title: str):
        GetServiceProfileMarketingInfoProcessStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            sub_title=sub_title,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             sub_title: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if sub_title is None and 'subTitle' in kwargs:
            sub_title = kwargs['subTitle']
        if sub_title is None:
            raise TypeError("Missing 'sub_title' argument")
        if title is None:
            raise TypeError("Missing 'title' argument")

        _setter("description", description)
        _setter("sub_title", sub_title)
        _setter("title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> str:
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetServiceProfileMetroResult(dict):
    def __init__(__self__, *,
                 code: str,
                 display_name: str,
                 ibxs: Sequence[str],
                 in_trail: bool,
                 name: str,
                 seller_regions: Mapping[str, str]):
        GetServiceProfileMetroResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            display_name=display_name,
            ibxs=ibxs,
            in_trail=in_trail,
            name=name,
            seller_regions=seller_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             display_name: Optional[str] = None,
             ibxs: Optional[Sequence[str]] = None,
             in_trail: Optional[bool] = None,
             name: Optional[str] = None,
             seller_regions: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if code is None:
            raise TypeError("Missing 'code' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if ibxs is None:
            raise TypeError("Missing 'ibxs' argument")
        if in_trail is None and 'inTrail' in kwargs:
            in_trail = kwargs['inTrail']
        if in_trail is None:
            raise TypeError("Missing 'in_trail' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if seller_regions is None and 'sellerRegions' in kwargs:
            seller_regions = kwargs['sellerRegions']
        if seller_regions is None:
            raise TypeError("Missing 'seller_regions' argument")

        _setter("code", code)
        _setter("display_name", display_name)
        _setter("ibxs", ibxs)
        _setter("in_trail", in_trail)
        _setter("name", name)
        _setter("seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Sequence[str]:
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> bool:
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Mapping[str, str]:
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class GetServiceProfileNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 send_interval: str,
                 type: str):
        GetServiceProfileNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            send_interval=send_interval,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             send_interval: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']
        if send_interval is None:
            raise TypeError("Missing 'send_interval' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("emails", emails)
        _setter("send_interval", send_interval)
        _setter("type", type)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> str:
        return pulumi.get(self, "send_interval")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceProfilePortResult(dict):
    def __init__(__self__, *,
                 cross_connect_id: str,
                 locations: Sequence['outputs.GetServiceProfilePortLocationResult'],
                 seller_region: str,
                 seller_region_description: str,
                 type: str,
                 uuid: str):
        GetServiceProfilePortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cross_connect_id=cross_connect_id,
            locations=locations,
            seller_region=seller_region,
            seller_region_description=seller_region_description,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cross_connect_id: Optional[str] = None,
             locations: Optional[Sequence['outputs.GetServiceProfilePortLocationResult']] = None,
             seller_region: Optional[str] = None,
             seller_region_description: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if cross_connect_id is None and 'crossConnectId' in kwargs:
            cross_connect_id = kwargs['crossConnectId']
        if cross_connect_id is None:
            raise TypeError("Missing 'cross_connect_id' argument")
        if locations is None:
            raise TypeError("Missing 'locations' argument")
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if seller_region is None:
            raise TypeError("Missing 'seller_region' argument")
        if seller_region_description is None and 'sellerRegionDescription' in kwargs:
            seller_region_description = kwargs['sellerRegionDescription']
        if seller_region_description is None:
            raise TypeError("Missing 'seller_region_description' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("cross_connect_id", cross_connect_id)
        _setter("locations", locations)
        _setter("seller_region", seller_region)
        _setter("seller_region_description", seller_region_description)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> str:
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceProfilePortLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> str:
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> str:
        return pulumi.get(self, "seller_region_description")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceProfilePortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetServiceProfilePortLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfileProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        GetServiceProfileProjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")

        _setter("href", href)
        _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceProfilesDatumResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigResult'],
                 accounts: Sequence['outputs.GetServiceProfilesDatumAccountResult'],
                 allowed_emails: Sequence[str],
                 change_logs: Sequence['outputs.GetServiceProfilesDatumChangeLogResult'],
                 custom_fields: Sequence['outputs.GetServiceProfilesDatumCustomFieldResult'],
                 description: str,
                 href: str,
                 marketing_infos: Sequence['outputs.GetServiceProfilesDatumMarketingInfoResult'],
                 metros: Sequence['outputs.GetServiceProfilesDatumMetroResult'],
                 name: str,
                 notifications: Sequence['outputs.GetServiceProfilesDatumNotificationResult'],
                 ports: Sequence['outputs.GetServiceProfilesDatumPortResult'],
                 projects: Sequence['outputs.GetServiceProfilesDatumProjectResult'],
                 self_profile: bool,
                 tags: Sequence[str],
                 type: str,
                 visibility: str,
                 state: Optional[str] = None,
                 uuid: Optional[str] = None):
        GetServiceProfilesDatumResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_point_type_configs=access_point_type_configs,
            accounts=accounts,
            allowed_emails=allowed_emails,
            change_logs=change_logs,
            custom_fields=custom_fields,
            description=description,
            href=href,
            marketing_infos=marketing_infos,
            metros=metros,
            name=name,
            notifications=notifications,
            ports=ports,
            projects=projects,
            self_profile=self_profile,
            tags=tags,
            type=type,
            visibility=visibility,
            state=state,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_point_type_configs: Optional[Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigResult']] = None,
             accounts: Optional[Sequence['outputs.GetServiceProfilesDatumAccountResult']] = None,
             allowed_emails: Optional[Sequence[str]] = None,
             change_logs: Optional[Sequence['outputs.GetServiceProfilesDatumChangeLogResult']] = None,
             custom_fields: Optional[Sequence['outputs.GetServiceProfilesDatumCustomFieldResult']] = None,
             description: Optional[str] = None,
             href: Optional[str] = None,
             marketing_infos: Optional[Sequence['outputs.GetServiceProfilesDatumMarketingInfoResult']] = None,
             metros: Optional[Sequence['outputs.GetServiceProfilesDatumMetroResult']] = None,
             name: Optional[str] = None,
             notifications: Optional[Sequence['outputs.GetServiceProfilesDatumNotificationResult']] = None,
             ports: Optional[Sequence['outputs.GetServiceProfilesDatumPortResult']] = None,
             projects: Optional[Sequence['outputs.GetServiceProfilesDatumProjectResult']] = None,
             self_profile: Optional[bool] = None,
             tags: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             visibility: Optional[str] = None,
             state: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if access_point_type_configs is None and 'accessPointTypeConfigs' in kwargs:
            access_point_type_configs = kwargs['accessPointTypeConfigs']
        if access_point_type_configs is None:
            raise TypeError("Missing 'access_point_type_configs' argument")
        if accounts is None:
            raise TypeError("Missing 'accounts' argument")
        if allowed_emails is None and 'allowedEmails' in kwargs:
            allowed_emails = kwargs['allowedEmails']
        if allowed_emails is None:
            raise TypeError("Missing 'allowed_emails' argument")
        if change_logs is None and 'changeLogs' in kwargs:
            change_logs = kwargs['changeLogs']
        if change_logs is None:
            raise TypeError("Missing 'change_logs' argument")
        if custom_fields is None and 'customFields' in kwargs:
            custom_fields = kwargs['customFields']
        if custom_fields is None:
            raise TypeError("Missing 'custom_fields' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if href is None:
            raise TypeError("Missing 'href' argument")
        if marketing_infos is None and 'marketingInfos' in kwargs:
            marketing_infos = kwargs['marketingInfos']
        if marketing_infos is None:
            raise TypeError("Missing 'marketing_infos' argument")
        if metros is None:
            raise TypeError("Missing 'metros' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if notifications is None:
            raise TypeError("Missing 'notifications' argument")
        if ports is None:
            raise TypeError("Missing 'ports' argument")
        if projects is None:
            raise TypeError("Missing 'projects' argument")
        if self_profile is None and 'selfProfile' in kwargs:
            self_profile = kwargs['selfProfile']
        if self_profile is None:
            raise TypeError("Missing 'self_profile' argument")
        if tags is None:
            raise TypeError("Missing 'tags' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if visibility is None:
            raise TypeError("Missing 'visibility' argument")

        _setter("access_point_type_configs", access_point_type_configs)
        _setter("accounts", accounts)
        _setter("allowed_emails", allowed_emails)
        _setter("change_logs", change_logs)
        _setter("custom_fields", custom_fields)
        _setter("description", description)
        _setter("href", href)
        _setter("marketing_infos", marketing_infos)
        _setter("metros", metros)
        _setter("name", name)
        _setter("notifications", notifications)
        _setter("ports", ports)
        _setter("projects", projects)
        _setter("self_profile", self_profile)
        _setter("tags", tags)
        _setter("type", type)
        _setter("visibility", visibility)
        if state is not None:
            _setter("state", state)
        if uuid is not None:
            _setter("uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigResult']:
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetServiceProfilesDatumAccountResult']:
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="allowedEmails")
    def allowed_emails(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_emails")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetServiceProfilesDatumChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Sequence['outputs.GetServiceProfilesDatumCustomFieldResult']:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="marketingInfos")
    def marketing_infos(self) -> Sequence['outputs.GetServiceProfilesDatumMarketingInfoResult']:
        return pulumi.get(self, "marketing_infos")

    @property
    @pulumi.getter
    def metros(self) -> Sequence['outputs.GetServiceProfilesDatumMetroResult']:
        return pulumi.get(self, "metros")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetServiceProfilesDatumNotificationResult']:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetServiceProfilesDatumPortResult']:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetServiceProfilesDatumProjectResult']:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="selfProfile")
    def self_profile(self) -> bool:
        return pulumi.get(self, "self_profile")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 allow_bandwidth_auto_approval: bool,
                 allow_bandwidth_upgrade: bool,
                 allow_custom_bandwidth: bool,
                 allow_remote_connections: bool,
                 api_configs: Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult'],
                 authentication_keys: Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult'],
                 bandwidth_alert_threshold: float,
                 connection_label: str,
                 connection_redundancy_required: bool,
                 enable_auto_generate_service_key: bool,
                 link_protocol_configs: Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult'],
                 supported_bandwidths: Sequence[int],
                 type: str,
                 uuid: str):
        GetServiceProfilesDatumAccessPointTypeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_bandwidth_auto_approval=allow_bandwidth_auto_approval,
            allow_bandwidth_upgrade=allow_bandwidth_upgrade,
            allow_custom_bandwidth=allow_custom_bandwidth,
            allow_remote_connections=allow_remote_connections,
            api_configs=api_configs,
            authentication_keys=authentication_keys,
            bandwidth_alert_threshold=bandwidth_alert_threshold,
            connection_label=connection_label,
            connection_redundancy_required=connection_redundancy_required,
            enable_auto_generate_service_key=enable_auto_generate_service_key,
            link_protocol_configs=link_protocol_configs,
            supported_bandwidths=supported_bandwidths,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_bandwidth_auto_approval: Optional[bool] = None,
             allow_bandwidth_upgrade: Optional[bool] = None,
             allow_custom_bandwidth: Optional[bool] = None,
             allow_remote_connections: Optional[bool] = None,
             api_configs: Optional[Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult']] = None,
             authentication_keys: Optional[Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult']] = None,
             bandwidth_alert_threshold: Optional[float] = None,
             connection_label: Optional[str] = None,
             connection_redundancy_required: Optional[bool] = None,
             enable_auto_generate_service_key: Optional[bool] = None,
             link_protocol_configs: Optional[Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult']] = None,
             supported_bandwidths: Optional[Sequence[int]] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_bandwidth_auto_approval is None and 'allowBandwidthAutoApproval' in kwargs:
            allow_bandwidth_auto_approval = kwargs['allowBandwidthAutoApproval']
        if allow_bandwidth_auto_approval is None:
            raise TypeError("Missing 'allow_bandwidth_auto_approval' argument")
        if allow_bandwidth_upgrade is None and 'allowBandwidthUpgrade' in kwargs:
            allow_bandwidth_upgrade = kwargs['allowBandwidthUpgrade']
        if allow_bandwidth_upgrade is None:
            raise TypeError("Missing 'allow_bandwidth_upgrade' argument")
        if allow_custom_bandwidth is None and 'allowCustomBandwidth' in kwargs:
            allow_custom_bandwidth = kwargs['allowCustomBandwidth']
        if allow_custom_bandwidth is None:
            raise TypeError("Missing 'allow_custom_bandwidth' argument")
        if allow_remote_connections is None and 'allowRemoteConnections' in kwargs:
            allow_remote_connections = kwargs['allowRemoteConnections']
        if allow_remote_connections is None:
            raise TypeError("Missing 'allow_remote_connections' argument")
        if api_configs is None and 'apiConfigs' in kwargs:
            api_configs = kwargs['apiConfigs']
        if api_configs is None:
            raise TypeError("Missing 'api_configs' argument")
        if authentication_keys is None and 'authenticationKeys' in kwargs:
            authentication_keys = kwargs['authenticationKeys']
        if authentication_keys is None:
            raise TypeError("Missing 'authentication_keys' argument")
        if bandwidth_alert_threshold is None and 'bandwidthAlertThreshold' in kwargs:
            bandwidth_alert_threshold = kwargs['bandwidthAlertThreshold']
        if bandwidth_alert_threshold is None:
            raise TypeError("Missing 'bandwidth_alert_threshold' argument")
        if connection_label is None and 'connectionLabel' in kwargs:
            connection_label = kwargs['connectionLabel']
        if connection_label is None:
            raise TypeError("Missing 'connection_label' argument")
        if connection_redundancy_required is None and 'connectionRedundancyRequired' in kwargs:
            connection_redundancy_required = kwargs['connectionRedundancyRequired']
        if connection_redundancy_required is None:
            raise TypeError("Missing 'connection_redundancy_required' argument")
        if enable_auto_generate_service_key is None and 'enableAutoGenerateServiceKey' in kwargs:
            enable_auto_generate_service_key = kwargs['enableAutoGenerateServiceKey']
        if enable_auto_generate_service_key is None:
            raise TypeError("Missing 'enable_auto_generate_service_key' argument")
        if link_protocol_configs is None and 'linkProtocolConfigs' in kwargs:
            link_protocol_configs = kwargs['linkProtocolConfigs']
        if link_protocol_configs is None:
            raise TypeError("Missing 'link_protocol_configs' argument")
        if supported_bandwidths is None and 'supportedBandwidths' in kwargs:
            supported_bandwidths = kwargs['supportedBandwidths']
        if supported_bandwidths is None:
            raise TypeError("Missing 'supported_bandwidths' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        _setter("allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        _setter("allow_custom_bandwidth", allow_custom_bandwidth)
        _setter("allow_remote_connections", allow_remote_connections)
        _setter("api_configs", api_configs)
        _setter("authentication_keys", authentication_keys)
        _setter("bandwidth_alert_threshold", bandwidth_alert_threshold)
        _setter("connection_label", connection_label)
        _setter("connection_redundancy_required", connection_redundancy_required)
        _setter("enable_auto_generate_service_key", enable_auto_generate_service_key)
        _setter("link_protocol_configs", link_protocol_configs)
        _setter("supported_bandwidths", supported_bandwidths)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> bool:
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> bool:
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfigs")
    def api_configs(self) -> Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult']:
        return pulumi.get(self, "api_configs")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult']:
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> float:
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> str:
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> bool:
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> bool:
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfigs")
    def link_protocol_configs(self) -> Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult']:
        return pulumi.get(self, "link_protocol_configs")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: bool,
                 api_available: bool,
                 bandwidth_from_api: bool,
                 equinix_managed_port: bool,
                 equinix_managed_vlan: bool,
                 integration_id: str,
                 over_subscription_limit: int):
        GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_over_subscription=allow_over_subscription,
            api_available=api_available,
            bandwidth_from_api=bandwidth_from_api,
            equinix_managed_port=equinix_managed_port,
            equinix_managed_vlan=equinix_managed_vlan,
            integration_id=integration_id,
            over_subscription_limit=over_subscription_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_over_subscription: Optional[bool] = None,
             api_available: Optional[bool] = None,
             bandwidth_from_api: Optional[bool] = None,
             equinix_managed_port: Optional[bool] = None,
             equinix_managed_vlan: Optional[bool] = None,
             integration_id: Optional[str] = None,
             over_subscription_limit: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if allow_over_subscription is None and 'allowOverSubscription' in kwargs:
            allow_over_subscription = kwargs['allowOverSubscription']
        if allow_over_subscription is None:
            raise TypeError("Missing 'allow_over_subscription' argument")
        if api_available is None and 'apiAvailable' in kwargs:
            api_available = kwargs['apiAvailable']
        if api_available is None:
            raise TypeError("Missing 'api_available' argument")
        if bandwidth_from_api is None and 'bandwidthFromApi' in kwargs:
            bandwidth_from_api = kwargs['bandwidthFromApi']
        if bandwidth_from_api is None:
            raise TypeError("Missing 'bandwidth_from_api' argument")
        if equinix_managed_port is None and 'equinixManagedPort' in kwargs:
            equinix_managed_port = kwargs['equinixManagedPort']
        if equinix_managed_port is None:
            raise TypeError("Missing 'equinix_managed_port' argument")
        if equinix_managed_vlan is None and 'equinixManagedVlan' in kwargs:
            equinix_managed_vlan = kwargs['equinixManagedVlan']
        if equinix_managed_vlan is None:
            raise TypeError("Missing 'equinix_managed_vlan' argument")
        if integration_id is None and 'integrationId' in kwargs:
            integration_id = kwargs['integrationId']
        if integration_id is None:
            raise TypeError("Missing 'integration_id' argument")
        if over_subscription_limit is None and 'overSubscriptionLimit' in kwargs:
            over_subscription_limit = kwargs['overSubscriptionLimit']
        if over_subscription_limit is None:
            raise TypeError("Missing 'over_subscription_limit' argument")

        _setter("allow_over_subscription", allow_over_subscription)
        _setter("api_available", api_available)
        _setter("bandwidth_from_api", bandwidth_from_api)
        _setter("equinix_managed_port", equinix_managed_port)
        _setter("equinix_managed_vlan", equinix_managed_vlan)
        _setter("integration_id", integration_id)
        _setter("over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> bool:
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> bool:
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> bool:
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> bool:
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> bool:
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> int:
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: str,
                 label: str,
                 required: bool):
        GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            label=label,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             label: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("description", description)
        _setter("label", label)
        _setter("required", required)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: str,
                 encapsulation_strategy: str,
                 reuse_vlan_s_tag: bool):
        GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encapsulation=encapsulation,
            encapsulation_strategy=encapsulation_strategy,
            reuse_vlan_s_tag=reuse_vlan_s_tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encapsulation: Optional[str] = None,
             encapsulation_strategy: Optional[str] = None,
             reuse_vlan_s_tag: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if encapsulation is None:
            raise TypeError("Missing 'encapsulation' argument")
        if encapsulation_strategy is None and 'encapsulationStrategy' in kwargs:
            encapsulation_strategy = kwargs['encapsulationStrategy']
        if encapsulation_strategy is None:
            raise TypeError("Missing 'encapsulation_strategy' argument")
        if reuse_vlan_s_tag is None and 'reuseVlanSTag' in kwargs:
            reuse_vlan_s_tag = kwargs['reuseVlanSTag']
        if reuse_vlan_s_tag is None:
            raise TypeError("Missing 'reuse_vlan_s_tag' argument")

        _setter("encapsulation", encapsulation)
        _setter("encapsulation_strategy", encapsulation_strategy)
        _setter("reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> str:
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> str:
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> bool:
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetServiceProfilesDatumAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        GetServiceProfilesDatumAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_name=account_name,
            account_number=account_number,
            global_cust_id=global_cust_id,
            global_org_id=global_org_id,
            global_organization_name=global_organization_name,
            org_id=org_id,
            organization_name=organization_name,
            ucm_id=ucm_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_name: Optional[str] = None,
             account_number: Optional[int] = None,
             global_cust_id: Optional[str] = None,
             global_org_id: Optional[str] = None,
             global_organization_name: Optional[str] = None,
             org_id: Optional[int] = None,
             organization_name: Optional[str] = None,
             ucm_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if account_name is None and 'accountName' in kwargs:
            account_name = kwargs['accountName']
        if account_name is None:
            raise TypeError("Missing 'account_name' argument")
        if account_number is None and 'accountNumber' in kwargs:
            account_number = kwargs['accountNumber']
        if account_number is None:
            raise TypeError("Missing 'account_number' argument")
        if global_cust_id is None and 'globalCustId' in kwargs:
            global_cust_id = kwargs['globalCustId']
        if global_cust_id is None:
            raise TypeError("Missing 'global_cust_id' argument")
        if global_org_id is None and 'globalOrgId' in kwargs:
            global_org_id = kwargs['globalOrgId']
        if global_org_id is None:
            raise TypeError("Missing 'global_org_id' argument")
        if global_organization_name is None and 'globalOrganizationName' in kwargs:
            global_organization_name = kwargs['globalOrganizationName']
        if global_organization_name is None:
            raise TypeError("Missing 'global_organization_name' argument")
        if org_id is None and 'orgId' in kwargs:
            org_id = kwargs['orgId']
        if org_id is None:
            raise TypeError("Missing 'org_id' argument")
        if organization_name is None and 'organizationName' in kwargs:
            organization_name = kwargs['organizationName']
        if organization_name is None:
            raise TypeError("Missing 'organization_name' argument")
        if ucm_id is None and 'ucmId' in kwargs:
            ucm_id = kwargs['ucmId']
        if ucm_id is None:
            raise TypeError("Missing 'ucm_id' argument")

        _setter("account_name", account_name)
        _setter("account_number", account_number)
        _setter("global_cust_id", global_cust_id)
        _setter("global_org_id", global_org_id)
        _setter("global_organization_name", global_organization_name)
        _setter("org_id", org_id)
        _setter("organization_name", organization_name)
        _setter("ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceProfilesDatumChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        GetServiceProfilesDatumChangeLogResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_by=created_by,
            created_by_email=created_by_email,
            created_by_full_name=created_by_full_name,
            created_date_time=created_date_time,
            deleted_by=deleted_by,
            deleted_by_email=deleted_by_email,
            deleted_by_full_name=deleted_by_full_name,
            deleted_date_time=deleted_date_time,
            updated_by=updated_by,
            updated_by_email=updated_by_email,
            updated_by_full_name=updated_by_full_name,
            updated_date_time=updated_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_by: Optional[str] = None,
             created_by_email: Optional[str] = None,
             created_by_full_name: Optional[str] = None,
             created_date_time: Optional[str] = None,
             deleted_by: Optional[str] = None,
             deleted_by_email: Optional[str] = None,
             deleted_by_full_name: Optional[str] = None,
             deleted_date_time: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_email: Optional[str] = None,
             updated_by_full_name: Optional[str] = None,
             updated_date_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if created_by_email is None and 'createdByEmail' in kwargs:
            created_by_email = kwargs['createdByEmail']
        if created_by_email is None:
            raise TypeError("Missing 'created_by_email' argument")
        if created_by_full_name is None and 'createdByFullName' in kwargs:
            created_by_full_name = kwargs['createdByFullName']
        if created_by_full_name is None:
            raise TypeError("Missing 'created_by_full_name' argument")
        if created_date_time is None and 'createdDateTime' in kwargs:
            created_date_time = kwargs['createdDateTime']
        if created_date_time is None:
            raise TypeError("Missing 'created_date_time' argument")
        if deleted_by is None and 'deletedBy' in kwargs:
            deleted_by = kwargs['deletedBy']
        if deleted_by is None:
            raise TypeError("Missing 'deleted_by' argument")
        if deleted_by_email is None and 'deletedByEmail' in kwargs:
            deleted_by_email = kwargs['deletedByEmail']
        if deleted_by_email is None:
            raise TypeError("Missing 'deleted_by_email' argument")
        if deleted_by_full_name is None and 'deletedByFullName' in kwargs:
            deleted_by_full_name = kwargs['deletedByFullName']
        if deleted_by_full_name is None:
            raise TypeError("Missing 'deleted_by_full_name' argument")
        if deleted_date_time is None and 'deletedDateTime' in kwargs:
            deleted_date_time = kwargs['deletedDateTime']
        if deleted_date_time is None:
            raise TypeError("Missing 'deleted_date_time' argument")
        if updated_by is None and 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if updated_by is None:
            raise TypeError("Missing 'updated_by' argument")
        if updated_by_email is None and 'updatedByEmail' in kwargs:
            updated_by_email = kwargs['updatedByEmail']
        if updated_by_email is None:
            raise TypeError("Missing 'updated_by_email' argument")
        if updated_by_full_name is None and 'updatedByFullName' in kwargs:
            updated_by_full_name = kwargs['updatedByFullName']
        if updated_by_full_name is None:
            raise TypeError("Missing 'updated_by_full_name' argument")
        if updated_date_time is None and 'updatedDateTime' in kwargs:
            updated_date_time = kwargs['updatedDateTime']
        if updated_date_time is None:
            raise TypeError("Missing 'updated_date_time' argument")

        _setter("created_by", created_by)
        _setter("created_by_email", created_by_email)
        _setter("created_by_full_name", created_by_full_name)
        _setter("created_date_time", created_date_time)
        _setter("deleted_by", deleted_by)
        _setter("deleted_by_email", deleted_by_email)
        _setter("deleted_by_full_name", deleted_by_full_name)
        _setter("deleted_date_time", deleted_date_time)
        _setter("updated_by", updated_by)
        _setter("updated_by_email", updated_by_email)
        _setter("updated_by_full_name", updated_by_full_name)
        _setter("updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceProfilesDatumCustomFieldResult(dict):
    def __init__(__self__, *,
                 capture_in_email: bool,
                 data_type: str,
                 description: str,
                 label: str,
                 options: Sequence[str],
                 required: bool):
        GetServiceProfilesDatumCustomFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capture_in_email=capture_in_email,
            data_type=data_type,
            description=description,
            label=label,
            options=options,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capture_in_email: Optional[bool] = None,
             data_type: Optional[str] = None,
             description: Optional[str] = None,
             label: Optional[str] = None,
             options: Optional[Sequence[str]] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if capture_in_email is None and 'captureInEmail' in kwargs:
            capture_in_email = kwargs['captureInEmail']
        if capture_in_email is None:
            raise TypeError("Missing 'capture_in_email' argument")
        if data_type is None and 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if data_type is None:
            raise TypeError("Missing 'data_type' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if options is None:
            raise TypeError("Missing 'options' argument")
        if required is None:
            raise TypeError("Missing 'required' argument")

        _setter("capture_in_email", capture_in_email)
        _setter("data_type", data_type)
        _setter("description", description)
        _setter("label", label)
        _setter("options", options)
        _setter("required", required)

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> bool:
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfilesDatumMarketingInfoResult(dict):
    def __init__(__self__, *,
                 logo: str,
                 process_steps: Sequence['outputs.GetServiceProfilesDatumMarketingInfoProcessStepResult'],
                 promotion: bool):
        GetServiceProfilesDatumMarketingInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logo=logo,
            process_steps=process_steps,
            promotion=promotion,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logo: Optional[str] = None,
             process_steps: Optional[Sequence['outputs.GetServiceProfilesDatumMarketingInfoProcessStepResult']] = None,
             promotion: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if logo is None:
            raise TypeError("Missing 'logo' argument")
        if process_steps is None and 'processSteps' in kwargs:
            process_steps = kwargs['processSteps']
        if process_steps is None:
            raise TypeError("Missing 'process_steps' argument")
        if promotion is None:
            raise TypeError("Missing 'promotion' argument")

        _setter("logo", logo)
        _setter("process_steps", process_steps)
        _setter("promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> str:
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Sequence['outputs.GetServiceProfilesDatumMarketingInfoProcessStepResult']:
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> bool:
        return pulumi.get(self, "promotion")


@pulumi.output_type
class GetServiceProfilesDatumMarketingInfoProcessStepResult(dict):
    def __init__(__self__, *,
                 description: str,
                 sub_title: str,
                 title: str):
        GetServiceProfilesDatumMarketingInfoProcessStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            sub_title=sub_title,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             sub_title: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if sub_title is None and 'subTitle' in kwargs:
            sub_title = kwargs['subTitle']
        if sub_title is None:
            raise TypeError("Missing 'sub_title' argument")
        if title is None:
            raise TypeError("Missing 'title' argument")

        _setter("description", description)
        _setter("sub_title", sub_title)
        _setter("title", title)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> str:
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetServiceProfilesDatumMetroResult(dict):
    def __init__(__self__, *,
                 code: str,
                 display_name: str,
                 ibxs: Sequence[str],
                 in_trail: bool,
                 name: str,
                 seller_regions: Mapping[str, str]):
        GetServiceProfilesDatumMetroResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            display_name=display_name,
            ibxs=ibxs,
            in_trail=in_trail,
            name=name,
            seller_regions=seller_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[str] = None,
             display_name: Optional[str] = None,
             ibxs: Optional[Sequence[str]] = None,
             in_trail: Optional[bool] = None,
             name: Optional[str] = None,
             seller_regions: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if code is None:
            raise TypeError("Missing 'code' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if ibxs is None:
            raise TypeError("Missing 'ibxs' argument")
        if in_trail is None and 'inTrail' in kwargs:
            in_trail = kwargs['inTrail']
        if in_trail is None:
            raise TypeError("Missing 'in_trail' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if seller_regions is None and 'sellerRegions' in kwargs:
            seller_regions = kwargs['sellerRegions']
        if seller_regions is None:
            raise TypeError("Missing 'seller_regions' argument")

        _setter("code", code)
        _setter("display_name", display_name)
        _setter("ibxs", ibxs)
        _setter("in_trail", in_trail)
        _setter("name", name)
        _setter("seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Sequence[str]:
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> bool:
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Mapping[str, str]:
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class GetServiceProfilesDatumNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 send_interval: str,
                 type: str):
        GetServiceProfilesDatumNotificationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            emails=emails,
            send_interval=send_interval,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             emails: Optional[Sequence[str]] = None,
             send_interval: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if emails is None:
            raise TypeError("Missing 'emails' argument")
        if send_interval is None and 'sendInterval' in kwargs:
            send_interval = kwargs['sendInterval']
        if send_interval is None:
            raise TypeError("Missing 'send_interval' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("emails", emails)
        _setter("send_interval", send_interval)
        _setter("type", type)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> str:
        return pulumi.get(self, "send_interval")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceProfilesDatumPortResult(dict):
    def __init__(__self__, *,
                 cross_connect_id: str,
                 locations: Sequence['outputs.GetServiceProfilesDatumPortLocationResult'],
                 seller_region: str,
                 seller_region_description: str,
                 type: str,
                 uuid: str):
        GetServiceProfilesDatumPortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cross_connect_id=cross_connect_id,
            locations=locations,
            seller_region=seller_region,
            seller_region_description=seller_region_description,
            type=type,
            uuid=uuid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cross_connect_id: Optional[str] = None,
             locations: Optional[Sequence['outputs.GetServiceProfilesDatumPortLocationResult']] = None,
             seller_region: Optional[str] = None,
             seller_region_description: Optional[str] = None,
             type: Optional[str] = None,
             uuid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if cross_connect_id is None and 'crossConnectId' in kwargs:
            cross_connect_id = kwargs['crossConnectId']
        if cross_connect_id is None:
            raise TypeError("Missing 'cross_connect_id' argument")
        if locations is None:
            raise TypeError("Missing 'locations' argument")
        if seller_region is None and 'sellerRegion' in kwargs:
            seller_region = kwargs['sellerRegion']
        if seller_region is None:
            raise TypeError("Missing 'seller_region' argument")
        if seller_region_description is None and 'sellerRegionDescription' in kwargs:
            seller_region_description = kwargs['sellerRegionDescription']
        if seller_region_description is None:
            raise TypeError("Missing 'seller_region_description' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if uuid is None:
            raise TypeError("Missing 'uuid' argument")

        _setter("cross_connect_id", cross_connect_id)
        _setter("locations", locations)
        _setter("seller_region", seller_region)
        _setter("seller_region_description", seller_region_description)
        _setter("type", type)
        _setter("uuid", uuid)

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> str:
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceProfilesDatumPortLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> str:
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> str:
        return pulumi.get(self, "seller_region_description")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceProfilesDatumPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        GetServiceProfilesDatumPortLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ibx=ibx,
            metro_code=metro_code,
            metro_name=metro_name,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ibx: Optional[str] = None,
             metro_code: Optional[str] = None,
             metro_name: Optional[str] = None,
             region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if ibx is None:
            raise TypeError("Missing 'ibx' argument")
        if metro_code is None and 'metroCode' in kwargs:
            metro_code = kwargs['metroCode']
        if metro_code is None:
            raise TypeError("Missing 'metro_code' argument")
        if metro_name is None and 'metroName' in kwargs:
            metro_name = kwargs['metroName']
        if metro_name is None:
            raise TypeError("Missing 'metro_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("ibx", ibx)
        _setter("metro_code", metro_code)
        _setter("metro_name", metro_name)
        _setter("region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfilesDatumProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        GetServiceProfilesDatumProjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            href=href,
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             href: Optional[str] = None,
             project_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if href is None:
            raise TypeError("Missing 'href' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")

        _setter("href", href)
        _setter("project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceProfilesFilterResult(dict):
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 property: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str operator: Possible operator to use on filters = - equal
        :param str property: Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
        :param Sequence[str] values: Values
        """
        GetServiceProfilesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            property=property,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: Optional[str] = None,
             property: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if operator is not None:
            _setter("operator", operator)
        if property is not None:
            _setter("property", property)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Possible operator to use on filters = - equal
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Values
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceProfilesSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: Priority type- DESC, ASC
        :param str property: Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
        """
        GetServiceProfilesSortResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if direction is not None:
            _setter("direction", direction)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Priority type- DESC, ASC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


