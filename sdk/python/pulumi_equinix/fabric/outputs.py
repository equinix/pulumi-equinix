# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _enums as _root_enums
from ._enums import *

__all__ = [
    'CloudRouterAccount',
    'CloudRouterChangeLog',
    'CloudRouterLocation',
    'CloudRouterMarketplaceSubscription',
    'CloudRouterNotification',
    'CloudRouterOrder',
    'CloudRouterPackage',
    'CloudRouterProject',
    'ConnectionASide',
    'ConnectionASideAccessPoint',
    'ConnectionASideAccessPointAccount',
    'ConnectionASideAccessPointGateway',
    'ConnectionASideAccessPointInterface',
    'ConnectionASideAccessPointLinkProtocol',
    'ConnectionASideAccessPointLocation',
    'ConnectionASideAccessPointNetwork',
    'ConnectionASideAccessPointPort',
    'ConnectionASideAccessPointPortRedundancy',
    'ConnectionASideAccessPointProfile',
    'ConnectionASideAccessPointProfileAccessPointTypeConfig',
    'ConnectionASideAccessPointRouter',
    'ConnectionASideAccessPointVirtualDevice',
    'ConnectionASideAdditionalInfo',
    'ConnectionASideServiceToken',
    'ConnectionAccount',
    'ConnectionChangeLog',
    'ConnectionNotification',
    'ConnectionOperation',
    'ConnectionOperationError',
    'ConnectionOperationErrorAdditionalInfo',
    'ConnectionOrder',
    'ConnectionProject',
    'ConnectionRedundancy',
    'ConnectionRouteAggregationTimeouts',
    'ConnectionZSide',
    'ConnectionZSideAccessPoint',
    'ConnectionZSideAccessPointAccount',
    'ConnectionZSideAccessPointGateway',
    'ConnectionZSideAccessPointInterface',
    'ConnectionZSideAccessPointLinkProtocol',
    'ConnectionZSideAccessPointLocation',
    'ConnectionZSideAccessPointNetwork',
    'ConnectionZSideAccessPointPort',
    'ConnectionZSideAccessPointPortRedundancy',
    'ConnectionZSideAccessPointProfile',
    'ConnectionZSideAccessPointProfileAccessPointTypeConfig',
    'ConnectionZSideAccessPointRouter',
    'ConnectionZSideAccessPointVirtualDevice',
    'ConnectionZSideAdditionalInfo',
    'ConnectionZSideServiceToken',
    'NetworkChange',
    'NetworkChangeLog',
    'NetworkLocation',
    'NetworkNotification',
    'NetworkOperation',
    'NetworkProject',
    'PrecisionTimeServiceAccount',
    'PrecisionTimeServiceChangeLog',
    'PrecisionTimeServiceConnection',
    'PrecisionTimeServiceIpv4',
    'PrecisionTimeServiceNtpAdvancedConfiguration',
    'PrecisionTimeServiceOrder',
    'PrecisionTimeServicePackage',
    'PrecisionTimeServicePrecisionTimePrice',
    'PrecisionTimeServicePrecisionTimePriceCharge',
    'PrecisionTimeServiceProject',
    'PrecisionTimeServicePtpAdvancedConfiguration',
    'PrecisionTimeServiceTimeouts',
    'RouteAggregationChange',
    'RouteAggregationChangeLog',
    'RouteAggregationProject',
    'RouteAggregationRuleChange',
    'RouteAggregationRuleChangeLog',
    'RouteAggregationRuleTimeouts',
    'RouteAggregationTimeouts',
    'RouteFilterChange',
    'RouteFilterChangeLog',
    'RouteFilterProject',
    'RouteFilterRuleChange',
    'RouteFilterRuleChangeLog',
    'RoutingProtocolBfd',
    'RoutingProtocolBgpIpv4',
    'RoutingProtocolBgpIpv6',
    'RoutingProtocolChange',
    'RoutingProtocolChangeLog',
    'RoutingProtocolDirectIpv4',
    'RoutingProtocolDirectIpv6',
    'RoutingProtocolOperation',
    'RoutingProtocolOperationError',
    'RoutingProtocolOperationErrorAdditionalInfo',
    'ServiceProfileAccessPointTypeConfig',
    'ServiceProfileAccessPointTypeConfigApiConfig',
    'ServiceProfileAccessPointTypeConfigAuthenticationKey',
    'ServiceProfileAccessPointTypeConfigLinkProtocolConfig',
    'ServiceProfileAccount',
    'ServiceProfileChangeLog',
    'ServiceProfileCustomField',
    'ServiceProfileMarketingInfo',
    'ServiceProfileMarketingInfoProcessStep',
    'ServiceProfileMetro',
    'ServiceProfileNotification',
    'ServiceProfilePort',
    'ServiceProfilePortLocation',
    'ServiceProfileProject',
    'ServiceProfileVirtualDevice',
    'ServiceProfileVirtualDeviceLocation',
    'ServiceTokenAccount',
    'ServiceTokenChangeLog',
    'ServiceTokenNotification',
    'ServiceTokenProject',
    'ServiceTokenServiceTokenConnection',
    'ServiceTokenServiceTokenConnectionASide',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelector',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterface',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetwork',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation',
    'ServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDevice',
    'ServiceTokenServiceTokenConnectionZSide',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelector',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation',
    'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice',
    'StreamAttachmentTimeouts',
    'StreamChangeLog',
    'StreamProject',
    'StreamSubscriptionChangeLog',
    'StreamSubscriptionEventSelector',
    'StreamSubscriptionMetricSelector',
    'StreamSubscriptionSink',
    'StreamSubscriptionSinkCredential',
    'StreamSubscriptionSinkSettings',
    'StreamSubscriptionTimeouts',
    'StreamTimeouts',
    'GetCloudRouterAccountResult',
    'GetCloudRouterChangeLogResult',
    'GetCloudRouterLocationResult',
    'GetCloudRouterMarketplaceSubscriptionResult',
    'GetCloudRouterNotificationResult',
    'GetCloudRouterOrderResult',
    'GetCloudRouterPackageResult',
    'GetCloudRouterProjectResult',
    'GetCloudRoutersDataResult',
    'GetCloudRoutersDataAccountResult',
    'GetCloudRoutersDataChangeLogResult',
    'GetCloudRoutersDataLocationResult',
    'GetCloudRoutersDataMarketplaceSubscriptionResult',
    'GetCloudRoutersDataNotificationResult',
    'GetCloudRoutersDataOrderResult',
    'GetCloudRoutersDataPackageResult',
    'GetCloudRoutersDataProjectResult',
    'GetCloudRoutersFilterResult',
    'GetCloudRoutersPaginationResult',
    'GetCloudRoutersSortResult',
    'GetConnectionASideResult',
    'GetConnectionASideAccessPointResult',
    'GetConnectionASideAccessPointAccountResult',
    'GetConnectionASideAccessPointGatewayResult',
    'GetConnectionASideAccessPointInterfaceResult',
    'GetConnectionASideAccessPointLinkProtocolResult',
    'GetConnectionASideAccessPointLocationResult',
    'GetConnectionASideAccessPointNetworkResult',
    'GetConnectionASideAccessPointPortResult',
    'GetConnectionASideAccessPointPortRedundancyResult',
    'GetConnectionASideAccessPointProfileResult',
    'GetConnectionASideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionASideAccessPointRouterResult',
    'GetConnectionASideAccessPointVirtualDeviceResult',
    'GetConnectionASideAdditionalInfoResult',
    'GetConnectionASideServiceTokenResult',
    'GetConnectionAccountResult',
    'GetConnectionChangeLogResult',
    'GetConnectionNotificationResult',
    'GetConnectionOperationResult',
    'GetConnectionOperationErrorResult',
    'GetConnectionOperationErrorAdditionalInfoResult',
    'GetConnectionOrderResult',
    'GetConnectionProjectResult',
    'GetConnectionRedundancyResult',
    'GetConnectionRouteAggregationsDataResult',
    'GetConnectionRouteAggregationsPaginationResult',
    'GetConnectionRouteFiltersDataResult',
    'GetConnectionRouteFiltersPaginationResult',
    'GetConnectionZSideResult',
    'GetConnectionZSideAccessPointResult',
    'GetConnectionZSideAccessPointAccountResult',
    'GetConnectionZSideAccessPointGatewayResult',
    'GetConnectionZSideAccessPointInterfaceResult',
    'GetConnectionZSideAccessPointLinkProtocolResult',
    'GetConnectionZSideAccessPointLocationResult',
    'GetConnectionZSideAccessPointNetworkResult',
    'GetConnectionZSideAccessPointPortResult',
    'GetConnectionZSideAccessPointPortRedundancyResult',
    'GetConnectionZSideAccessPointProfileResult',
    'GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionZSideAccessPointRouterResult',
    'GetConnectionZSideAccessPointVirtualDeviceResult',
    'GetConnectionZSideAdditionalInfoResult',
    'GetConnectionZSideServiceTokenResult',
    'GetConnectionsDataResult',
    'GetConnectionsDataASideResult',
    'GetConnectionsDataASideAccessPointResult',
    'GetConnectionsDataASideAccessPointAccountResult',
    'GetConnectionsDataASideAccessPointGatewayResult',
    'GetConnectionsDataASideAccessPointInterfaceResult',
    'GetConnectionsDataASideAccessPointLinkProtocolResult',
    'GetConnectionsDataASideAccessPointLocationResult',
    'GetConnectionsDataASideAccessPointNetworkResult',
    'GetConnectionsDataASideAccessPointPortResult',
    'GetConnectionsDataASideAccessPointPortRedundancyResult',
    'GetConnectionsDataASideAccessPointProfileResult',
    'GetConnectionsDataASideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionsDataASideAccessPointRouterResult',
    'GetConnectionsDataASideAccessPointVirtualDeviceResult',
    'GetConnectionsDataASideAdditionalInfoResult',
    'GetConnectionsDataASideServiceTokenResult',
    'GetConnectionsDataAccountResult',
    'GetConnectionsDataChangeLogResult',
    'GetConnectionsDataNotificationResult',
    'GetConnectionsDataOperationResult',
    'GetConnectionsDataOperationErrorResult',
    'GetConnectionsDataOperationErrorAdditionalInfoResult',
    'GetConnectionsDataOrderResult',
    'GetConnectionsDataProjectResult',
    'GetConnectionsDataRedundancyResult',
    'GetConnectionsDataZSideResult',
    'GetConnectionsDataZSideAccessPointResult',
    'GetConnectionsDataZSideAccessPointAccountResult',
    'GetConnectionsDataZSideAccessPointGatewayResult',
    'GetConnectionsDataZSideAccessPointInterfaceResult',
    'GetConnectionsDataZSideAccessPointLinkProtocolResult',
    'GetConnectionsDataZSideAccessPointLocationResult',
    'GetConnectionsDataZSideAccessPointNetworkResult',
    'GetConnectionsDataZSideAccessPointPortResult',
    'GetConnectionsDataZSideAccessPointPortRedundancyResult',
    'GetConnectionsDataZSideAccessPointProfileResult',
    'GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfigResult',
    'GetConnectionsDataZSideAccessPointRouterResult',
    'GetConnectionsDataZSideAccessPointVirtualDeviceResult',
    'GetConnectionsDataZSideAdditionalInfoResult',
    'GetConnectionsDataZSideServiceTokenResult',
    'GetConnectionsFilterResult',
    'GetConnectionsPaginationResult',
    'GetConnectionsSortResult',
    'GetMarketplaceSubscriptionEntitlementResult',
    'GetMarketplaceSubscriptionEntitlementAssetResult',
    'GetMarketplaceSubscriptionEntitlementAssetPackageResult',
    'GetMarketplaceSubscriptionTrialResult',
    'GetMetroConnectedMetroResult',
    'GetMetroGeoCoordinatesResult',
    'GetMetrosDataResult',
    'GetMetrosDataConnectedMetroResult',
    'GetMetrosDataGeoCoordinatesResult',
    'GetMetrosPaginationResult',
    'GetNetworkChangeResult',
    'GetNetworkChangeLogResult',
    'GetNetworkLocationResult',
    'GetNetworkNotificationResult',
    'GetNetworkOperationResult',
    'GetNetworkProjectResult',
    'GetNetworksDataResult',
    'GetNetworksDataChangeResult',
    'GetNetworksDataChangeLogResult',
    'GetNetworksDataLocationResult',
    'GetNetworksDataNotificationResult',
    'GetNetworksDataOperationResult',
    'GetNetworksDataProjectResult',
    'GetNetworksFilterResult',
    'GetNetworksPaginationResult',
    'GetNetworksSortResult',
    'GetPortAccountResult',
    'GetPortChangeLogResult',
    'GetPortDeviceResult',
    'GetPortDeviceRedundancyResult',
    'GetPortEncapsulationResult',
    'GetPortLocationResult',
    'GetPortOperationResult',
    'GetPortRedundancyResult',
    'GetPortsDatumResult',
    'GetPortsDatumAccountResult',
    'GetPortsDatumChangeLogResult',
    'GetPortsDatumDeviceResult',
    'GetPortsDatumDeviceRedundancyResult',
    'GetPortsDatumEncapsulationResult',
    'GetPortsDatumLocationResult',
    'GetPortsDatumOperationResult',
    'GetPortsDatumRedundancyResult',
    'GetPortsFilterResult',
    'GetPrecisionTimeServiceAccountResult',
    'GetPrecisionTimeServiceChangeLogResult',
    'GetPrecisionTimeServiceConnectionResult',
    'GetPrecisionTimeServiceIpv4Result',
    'GetPrecisionTimeServiceNtpAdvancedConfigurationResult',
    'GetPrecisionTimeServiceOrderResult',
    'GetPrecisionTimeServicePackageResult',
    'GetPrecisionTimeServicePrecisionTimePriceResult',
    'GetPrecisionTimeServicePrecisionTimePriceChargeResult',
    'GetPrecisionTimeServiceProjectResult',
    'GetPrecisionTimeServicePtpAdvancedConfigurationResult',
    'GetPrecisionTimeServicesDataResult',
    'GetPrecisionTimeServicesDataAccountResult',
    'GetPrecisionTimeServicesDataChangeLogResult',
    'GetPrecisionTimeServicesDataConnectionResult',
    'GetPrecisionTimeServicesDataIpv4Result',
    'GetPrecisionTimeServicesDataNtpAdvancedConfigurationResult',
    'GetPrecisionTimeServicesDataOrderResult',
    'GetPrecisionTimeServicesDataPackageResult',
    'GetPrecisionTimeServicesDataPrecisionTimePriceResult',
    'GetPrecisionTimeServicesDataPrecisionTimePriceChargeResult',
    'GetPrecisionTimeServicesDataProjectResult',
    'GetPrecisionTimeServicesDataPtpAdvancedConfigurationResult',
    'GetPrecisionTimeServicesFilterResult',
    'GetPrecisionTimeServicesPaginationResult',
    'GetPrecisionTimeServicesSortResult',
    'GetRouteAggregationChangeResult',
    'GetRouteAggregationChangeLogResult',
    'GetRouteAggregationProjectResult',
    'GetRouteAggregationRuleChangeResult',
    'GetRouteAggregationRuleChangeLogResult',
    'GetRouteAggregationRulesDataResult',
    'GetRouteAggregationRulesDataChangeResult',
    'GetRouteAggregationRulesDataChangeLogResult',
    'GetRouteAggregationRulesPaginationResult',
    'GetRouteAggregationsDataResult',
    'GetRouteAggregationsDataChangeResult',
    'GetRouteAggregationsDataChangeLogResult',
    'GetRouteAggregationsDataProjectResult',
    'GetRouteAggregationsFilterResult',
    'GetRouteAggregationsPaginationResult',
    'GetRouteAggregationsSortResult',
    'GetRouteFilterChangeResult',
    'GetRouteFilterChangeLogResult',
    'GetRouteFilterProjectResult',
    'GetRouteFilterRuleChangeResult',
    'GetRouteFilterRuleChangeLogResult',
    'GetRouteFilterRulesDataResult',
    'GetRouteFilterRulesDataChangeResult',
    'GetRouteFilterRulesDataChangeLogResult',
    'GetRouteFilterRulesPaginationResult',
    'GetRouteFiltersDataResult',
    'GetRouteFiltersDataChangeResult',
    'GetRouteFiltersDataChangeLogResult',
    'GetRouteFiltersDataProjectResult',
    'GetRouteFiltersFilterResult',
    'GetRouteFiltersPaginationResult',
    'GetRouteFiltersSortResult',
    'GetRoutingProtocolBfdResult',
    'GetRoutingProtocolBgpIpv4Result',
    'GetRoutingProtocolBgpIpv6Result',
    'GetRoutingProtocolChangeResult',
    'GetRoutingProtocolChangeLogResult',
    'GetRoutingProtocolDirectIpv4Result',
    'GetRoutingProtocolDirectIpv6Result',
    'GetRoutingProtocolOperationResult',
    'GetRoutingProtocolOperationErrorResult',
    'GetRoutingProtocolOperationErrorAdditionalInfoResult',
    'GetServiceProfileAccessPointTypeConfigResult',
    'GetServiceProfileAccessPointTypeConfigApiConfigResult',
    'GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult',
    'GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult',
    'GetServiceProfileAccountResult',
    'GetServiceProfileChangeLogResult',
    'GetServiceProfileCustomFieldResult',
    'GetServiceProfileMarketingInfoResult',
    'GetServiceProfileMarketingInfoProcessStepResult',
    'GetServiceProfileMetroResult',
    'GetServiceProfileNotificationResult',
    'GetServiceProfilePortResult',
    'GetServiceProfilePortLocationResult',
    'GetServiceProfileProjectResult',
    'GetServiceProfileVirtualDeviceResult',
    'GetServiceProfileVirtualDeviceLocationResult',
    'GetServiceProfilesDatumResult',
    'GetServiceProfilesDatumAccessPointTypeConfigResult',
    'GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult',
    'GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult',
    'GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult',
    'GetServiceProfilesDatumAccountResult',
    'GetServiceProfilesDatumChangeLogResult',
    'GetServiceProfilesDatumCustomFieldResult',
    'GetServiceProfilesDatumMarketingInfoResult',
    'GetServiceProfilesDatumMarketingInfoProcessStepResult',
    'GetServiceProfilesDatumMetroResult',
    'GetServiceProfilesDatumNotificationResult',
    'GetServiceProfilesDatumPortResult',
    'GetServiceProfilesDatumPortLocationResult',
    'GetServiceProfilesDatumProjectResult',
    'GetServiceProfilesDatumVirtualDeviceResult',
    'GetServiceProfilesDatumVirtualDeviceLocationResult',
    'GetServiceProfilesFilterResult',
    'GetServiceProfilesPaginationResult',
    'GetServiceProfilesSortResult',
    'GetServiceTokenAccountResult',
    'GetServiceTokenChangeLogResult',
    'GetServiceTokenNotificationResult',
    'GetServiceTokenProjectResult',
    'GetServiceTokenServiceTokenConnectionResult',
    'GetServiceTokenServiceTokenConnectionASideResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationResult',
    'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult',
    'GetServiceTokenServiceTokenConnectionZSideResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationResult',
    'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult',
    'GetServiceTokensDataResult',
    'GetServiceTokensDataAccountResult',
    'GetServiceTokensDataChangeLogResult',
    'GetServiceTokensDataNotificationResult',
    'GetServiceTokensDataProjectResult',
    'GetServiceTokensDataServiceTokenConnectionResult',
    'GetServiceTokensDataServiceTokenConnectionASideResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorInterfaceResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortLocationResult',
    'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult',
    'GetServiceTokensDataServiceTokenConnectionZSideResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorInterfaceResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortLocationResult',
    'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult',
    'GetServiceTokensFilterResult',
    'GetServiceTokensPaginationResult',
    'GetStreamAttachmentsDataResult',
    'GetStreamAttachmentsFilterResult',
    'GetStreamAttachmentsPaginationResult',
    'GetStreamAttachmentsSortResult',
    'GetStreamChangeLogResult',
    'GetStreamProjectResult',
    'GetStreamSubscriptionChangeLogResult',
    'GetStreamSubscriptionEventSelectorResult',
    'GetStreamSubscriptionMetricSelectorResult',
    'GetStreamSubscriptionSinkResult',
    'GetStreamSubscriptionSinkCredentialResult',
    'GetStreamSubscriptionSinkSettingsResult',
    'GetStreamSubscriptionsDataResult',
    'GetStreamSubscriptionsDataChangeLogResult',
    'GetStreamSubscriptionsDataEventSelectorResult',
    'GetStreamSubscriptionsDataMetricSelectorResult',
    'GetStreamSubscriptionsDataSinkResult',
    'GetStreamSubscriptionsDataSinkCredentialResult',
    'GetStreamSubscriptionsDataSinkSettingsResult',
    'GetStreamSubscriptionsPaginationResult',
    'GetStreamsDataResult',
    'GetStreamsDataChangeLogResult',
    'GetStreamsDataProjectResult',
    'GetStreamsPaginationResult',
]

@pulumi.output_type
class CloudRouterAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountNumber":
            suggest = "account_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_number: int):
        """
        :param int account_number: Account Number
        """
        pulumi.set(__self__, "account_number", account_number)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")


@pulumi.output_type
class CloudRouterChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class CloudRouterLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class CloudRouterMarketplaceSubscription(dict):
    def __init__(__self__, *,
                 uuid: str,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Marketplace Subscription identifier
        :param str type: Marketplace Subscription type like; AWS*MARKETPLACE*SUBSCRIPTION
        """
        pulumi.set(__self__, "uuid", uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Marketplace Subscription identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Marketplace Subscription type like; AWS*MARKETPLACE*SUBSCRIPTION
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CloudRouterNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class CloudRouterOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingTier":
            suggest = "billing_tier"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "purchaseOrderNumber":
            suggest = "purchase_order_number"
        elif key == "termLength":
            suggest = "term_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_tier: Optional[str] = None,
                 order_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 purchase_order_number: Optional[str] = None,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        if billing_tier is not None:
            pulumi.set(__self__, "billing_tier", billing_tier)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if purchase_order_number is not None:
            pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[str]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[str]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[str]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class CloudRouterPackage(dict):
    def __init__(__self__, *,
                 code: str):
        """
        :param str code: Fabric Cloud Router package code
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Fabric Cloud Router package code
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class CloudRouterProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRouterProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRouterProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRouterProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ConnectionASide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPoint":
            suggest = "access_point"
        elif key == "additionalInfo":
            suggest = "additional_info"
        elif key == "serviceToken":
            suggest = "service_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point: Optional['outputs.ConnectionASideAccessPoint'] = None,
                 additional_info: Optional[Sequence['outputs.ConnectionASideAdditionalInfo']] = None,
                 service_token: Optional['outputs.ConnectionASideServiceToken'] = None):
        """
        :param 'ConnectionASideAccessPointArgs' access_point: Point of access details
        :param Sequence['ConnectionASideAdditionalInfoArgs'] additional_info: Connection side additional information
        :param 'ConnectionASideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.ConnectionASideAccessPoint']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionASideAdditionalInfo']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.ConnectionASideServiceToken']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class ConnectionASideAccessPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "peeringType":
            suggest = "peering_type"
        elif key == "providerConnectionId":
            suggest = "provider_connection_id"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional['outputs.ConnectionASideAccessPointAccount'] = None,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.ConnectionASideAccessPointGateway'] = None,
                 interface: Optional['outputs.ConnectionASideAccessPointInterface'] = None,
                 link_protocol: Optional['outputs.ConnectionASideAccessPointLinkProtocol'] = None,
                 location: Optional['outputs.ConnectionASideAccessPointLocation'] = None,
                 network: Optional['outputs.ConnectionASideAccessPointNetwork'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.ConnectionASideAccessPointPort'] = None,
                 profile: Optional['outputs.ConnectionASideAccessPointProfile'] = None,
                 provider_connection_id: Optional[str] = None,
                 router: Optional['outputs.ConnectionASideAccessPointRouter'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ConnectionASideAccessPointVirtualDevice'] = None):
        """
        :param 'ConnectionASideAccessPointAccountArgs' account: Account
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'ConnectionASideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'ConnectionASideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'ConnectionASideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'ConnectionASideAccessPointLocationArgs' location: Access point location
        :param 'ConnectionASideAccessPointNetworkArgs' network: network access point information
        :param Union[str, 'AccessPointPeeringType'] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'ConnectionASideAccessPointPortArgs' port: Port access point information
        :param 'ConnectionASideAccessPointProfileArgs' profile: Service Profile
        :param str provider_connection_id: Provider assigned Connection Id
        :param 'ConnectionASideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param Union[str, 'AccessPointType'] type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
        :param 'ConnectionASideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if provider_connection_id is not None:
            pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional['outputs.ConnectionASideAccessPointAccount']:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.ConnectionASideAccessPointGateway']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ConnectionASideAccessPointInterface']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ConnectionASideAccessPointLinkProtocol']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ConnectionASideAccessPointLocation']:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ConnectionASideAccessPointNetwork']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ConnectionASideAccessPointPort']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.ConnectionASideAccessPointProfile']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[str]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.ConnectionASideAccessPointRouter']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ConnectionASideAccessPointVirtualDevice']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ConnectionASideAccessPointAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ConnectionASideAccessPointGateway(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointInterface(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param Union[str, 'AccessPointLinkProtocolType'] type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ConnectionASideAccessPointLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param Union[str, '_root_enums.Metro'] metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ConnectionASideAccessPointNetwork(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointPort(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 redundancy: Optional['outputs.ConnectionASideAccessPointPortRedundancy'] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param 'ConnectionASideAccessPointPortRedundancyArgs' redundancy: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancy(self) -> Optional['outputs.ConnectionASideAccessPointPortRedundancy']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointPortRedundancy(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group: Optional[str] = None,
                 priority: Optional[str] = None):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionASideAccessPointProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointTypeConfigs":
            suggest = "access_point_type_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionASideAccessPointProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionASideAccessPointProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionASideAccessPointProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 access_point_type_configs: Optional[Sequence['outputs.ConnectionASideAccessPointProfileAccessPointTypeConfig']] = None,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param Union[str, 'ProfileType'] type: Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        :param Sequence['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[Sequence['outputs.ConnectionASideAccessPointProfileAccessPointTypeConfig']]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConnectionASideAccessPointProfileAccessPointTypeConfig(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointRouter(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAccessPointVirtualDevice(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionASideAdditionalInfo(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionASideServiceToken(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param Union[str, 'ServiceTokenType'] type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ConnectionChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class ConnectionNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param Union[str, 'NotificationsType'] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class ConnectionOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixStatus":
            suggest = "equinix_status"
        elif key == "providerStatus":
            suggest = "provider_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_status: Optional[str] = None,
                 errors: Optional[Sequence['outputs.ConnectionOperationError']] = None,
                 provider_status: Optional[str] = None):
        """
        :param str equinix_status: Connection status
        :param Sequence['ConnectionOperationErrorArgs'] errors: Errors occurred
        :param str provider_status: Connection provider readiness status
        """
        if equinix_status is not None:
            pulumi.set(__self__, "equinix_status", equinix_status)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if provider_status is not None:
            pulumi.set(__self__, "provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> Optional[str]:
        """
        Connection status
        """
        return pulumi.get(self, "equinix_status")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.ConnectionOperationError']]:
        """
        Errors occurred
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> Optional[str]:
        """
        Connection provider readiness status
        """
        return pulumi.get(self, "provider_status")


@pulumi.output_type
class ConnectionOperationError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOperationError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOperationError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOperationError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Optional[Sequence['outputs.ConnectionOperationErrorAdditionalInfo']] = None,
                 correlation_id: Optional[str] = None,
                 details: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 help: Optional[str] = None):
        """
        :param Sequence['ConnectionOperationErrorAdditionalInfoArgs'] additional_info: Pricing error additional Info
        :param str correlation_id: CorrelationId
        :param str details: Details
        :param str error_code: Error  code
        :param str error_message: Error Message
        :param str help: Help
        """
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if correlation_id is not None:
            pulumi.set(__self__, "correlation_id", correlation_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if help is not None:
            pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionOperationErrorAdditionalInfo']]:
        """
        Pricing error additional Info
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[str]:
        """
        CorrelationId
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        """
        Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error  code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error Message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> Optional[str]:
        """
        Help
        """
        return pulumi.get(self, "help")


@pulumi.output_type
class ConnectionOperationErrorAdditionalInfo(dict):
    def __init__(__self__, *,
                 property: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        :param str property: Property at which the error potentially occurred
        :param str reason: Reason for the error
        """
        if property is not None:
            pulumi.set(__self__, "property", property)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason for the error
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Property at which the error potentially occurred
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ConnectionOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingTier":
            suggest = "billing_tier"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "purchaseOrderNumber":
            suggest = "purchase_order_number"
        elif key == "termLength":
            suggest = "term_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_tier: Optional[str] = None,
                 order_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 purchase_order_number: Optional[str] = None,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        if billing_tier is not None:
            pulumi.set(__self__, "billing_tier", billing_tier)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if purchase_order_number is not None:
            pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[str]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[str]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[str]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class ConnectionProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ConnectionRedundancy(dict):
    def __init__(__self__, *,
                 group: Optional[str] = None,
                 priority: Optional[str] = None):
        """
        :param str group: Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)
        :param str priority: Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionRouteAggregationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class ConnectionZSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPoint":
            suggest = "access_point"
        elif key == "additionalInfo":
            suggest = "additional_info"
        elif key == "serviceToken":
            suggest = "service_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point: Optional['outputs.ConnectionZSideAccessPoint'] = None,
                 additional_info: Optional[Sequence['outputs.ConnectionZSideAdditionalInfo']] = None,
                 service_token: Optional['outputs.ConnectionZSideServiceToken'] = None):
        """
        :param 'ConnectionZSideAccessPointArgs' access_point: Point of access details
        :param Sequence['ConnectionZSideAdditionalInfoArgs'] additional_info: Connection side additional information
        :param 'ConnectionZSideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.ConnectionZSideAccessPoint']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[Sequence['outputs.ConnectionZSideAdditionalInfo']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.ConnectionZSideServiceToken']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class ConnectionZSideAccessPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "peeringType":
            suggest = "peering_type"
        elif key == "providerConnectionId":
            suggest = "provider_connection_id"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional['outputs.ConnectionZSideAccessPointAccount'] = None,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.ConnectionZSideAccessPointGateway'] = None,
                 interface: Optional['outputs.ConnectionZSideAccessPointInterface'] = None,
                 link_protocol: Optional['outputs.ConnectionZSideAccessPointLinkProtocol'] = None,
                 location: Optional['outputs.ConnectionZSideAccessPointLocation'] = None,
                 network: Optional['outputs.ConnectionZSideAccessPointNetwork'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.ConnectionZSideAccessPointPort'] = None,
                 profile: Optional['outputs.ConnectionZSideAccessPointProfile'] = None,
                 provider_connection_id: Optional[str] = None,
                 router: Optional['outputs.ConnectionZSideAccessPointRouter'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ConnectionZSideAccessPointVirtualDevice'] = None):
        """
        :param 'ConnectionZSideAccessPointAccountArgs' account: Account
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'ConnectionZSideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'ConnectionZSideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'ConnectionZSideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'ConnectionZSideAccessPointLocationArgs' location: Access point location
        :param 'ConnectionZSideAccessPointNetworkArgs' network: network access point information
        :param Union[str, 'AccessPointPeeringType'] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'ConnectionZSideAccessPointPortArgs' port: Port access point information
        :param 'ConnectionZSideAccessPointProfileArgs' profile: Service Profile
        :param str provider_connection_id: Provider assigned Connection Id
        :param 'ConnectionZSideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param Union[str, 'AccessPointType'] type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
        :param 'ConnectionZSideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if provider_connection_id is not None:
            pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional['outputs.ConnectionZSideAccessPointAccount']:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.ConnectionZSideAccessPointGateway']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ConnectionZSideAccessPointInterface']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ConnectionZSideAccessPointLinkProtocol']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ConnectionZSideAccessPointLocation']:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ConnectionZSideAccessPointNetwork']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ConnectionZSideAccessPointPort']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.ConnectionZSideAccessPointProfile']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[str]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.ConnectionZSideAccessPointRouter']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ConnectionZSideAccessPointVirtualDevice']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ConnectionZSideAccessPointAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ConnectionZSideAccessPointGateway(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointInterface(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param Union[str, 'AccessPointLinkProtocolType'] type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ConnectionZSideAccessPointLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param Union[str, '_root_enums.Metro'] metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ConnectionZSideAccessPointNetwork(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointPort(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 redundancy: Optional['outputs.ConnectionZSideAccessPointPortRedundancy'] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param 'ConnectionZSideAccessPointPortRedundancyArgs' redundancy: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancy(self) -> Optional['outputs.ConnectionZSideAccessPointPortRedundancy']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointPortRedundancy(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group: Optional[str] = None,
                 priority: Optional[str] = None):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ConnectionZSideAccessPointProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointTypeConfigs":
            suggest = "access_point_type_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionZSideAccessPointProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionZSideAccessPointProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionZSideAccessPointProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 access_point_type_configs: Optional[Sequence['outputs.ConnectionZSideAccessPointProfileAccessPointTypeConfig']] = None,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param Union[str, 'ProfileType'] type: Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        :param Sequence['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[Sequence['outputs.ConnectionZSideAccessPointProfileAccessPointTypeConfig']]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConnectionZSideAccessPointProfileAccessPointTypeConfig(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointRouter(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAccessPointVirtualDevice(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ConnectionZSideAdditionalInfo(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionZSideServiceToken(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param Union[str, 'ServiceTokenType'] type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkChange(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Absolute URL that returns the details of the given change.
               Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        :param str type: Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        :param str uuid: Asset change request identifier.
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Absolute URL that returns the details of the given change.
        Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Asset change request identifier.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class NetworkChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class NetworkLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class NetworkNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class NetworkOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixStatus":
            suggest = "equinix_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_status: Optional[str] = None):
        """
        :param str equinix_status: Progress towards provisioning a given asset.
        """
        if equinix_status is not None:
            pulumi.set(__self__, "equinix_status", equinix_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> Optional[str]:
        """
        Progress towards provisioning a given asset.
        """
        return pulumi.get(self, "equinix_status")


@pulumi.output_type
class NetworkProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Customer project identifier
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Customer project identifier
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class PrecisionTimeServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "resellerAccountName":
            suggest = "reseller_account_name"
        elif key == "resellerAccountNumber":
            suggest = "reseller_account_number"
        elif key == "resellerOrgId":
            suggest = "reseller_org_id"
        elif key == "resellerUcmId":
            suggest = "reseller_ucm_id"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 reseller_account_name: Optional[str] = None,
                 reseller_account_number: Optional[int] = None,
                 reseller_org_id: Optional[int] = None,
                 reseller_ucm_id: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Account Name
        :param int account_number: Equinix Account Number
        :param str global_cust_id: Global Customer Id
        :param str global_org_id: Customer organization naidentifierme
        :param str global_organization_name: Global organization name
        :param int org_id: Customer organization identifier
        :param str organization_name: Customer organization name
        :param str reseller_account_name: Reseller account name
        :param int reseller_account_number: Reseller account number
        :param int reseller_org_id: Reseller customer organization identifier
        :param str reseller_ucm_id: Reseller account ucmId
        :param str ucm_id: Global organization name
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if reseller_account_name is not None:
            pulumi.set(__self__, "reseller_account_name", reseller_account_name)
        if reseller_account_number is not None:
            pulumi.set(__self__, "reseller_account_number", reseller_account_number)
        if reseller_org_id is not None:
            pulumi.set(__self__, "reseller_org_id", reseller_org_id)
        if reseller_ucm_id is not None:
            pulumi.set(__self__, "reseller_ucm_id", reseller_ucm_id)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix Account Number
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Global Customer Id
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Customer organization naidentifierme
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Global organization name
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Customer organization identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Customer organization name
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="resellerAccountName")
    def reseller_account_name(self) -> Optional[str]:
        """
        Reseller account name
        """
        return pulumi.get(self, "reseller_account_name")

    @property
    @pulumi.getter(name="resellerAccountNumber")
    def reseller_account_number(self) -> Optional[int]:
        """
        Reseller account number
        """
        return pulumi.get(self, "reseller_account_number")

    @property
    @pulumi.getter(name="resellerOrgId")
    def reseller_org_id(self) -> Optional[int]:
        """
        Reseller customer organization identifier
        """
        return pulumi.get(self, "reseller_org_id")

    @property
    @pulumi.getter(name="resellerUcmId")
    def reseller_ucm_id(self) -> Optional[str]:
        """
        Reseller account ucmId
        """
        return pulumi.get(self, "reseller_ucm_id")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Global organization name
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class PrecisionTimeServiceChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class PrecisionTimeServiceConnection(dict):
    def __init__(__self__, *,
                 uuid: str,
                 href: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        :param str href: Link to the Equinix Fabric Connection associated with the Precision Time Service
        :param str type: Type of the Equinix Fabric Connection associated with the Precision Time Service
        """
        pulumi.set(__self__, "uuid", uuid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Link to the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PrecisionTimeServiceIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultGateway":
            suggest = "default_gateway"
        elif key == "networkMask":
            suggest = "network_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_gateway: str,
                 network_mask: str,
                 primary: str,
                 secondary: str):
        """
        :param str default_gateway: IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        :param str network_mask: IPv4 address that defines the range of consecutive subnets in the network.
        :param str primary: IPv4 address for the Primary Timing Master Server.
        :param str secondary: IPv4 address for the Secondary Timing Master Server.
        """
        pulumi.set(__self__, "default_gateway", default_gateway)
        pulumi.set(__self__, "network_mask", network_mask)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> str:
        """
        IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="networkMask")
    def network_mask(self) -> str:
        """
        IPv4 address that defines the range of consecutive subnets in the network.
        """
        return pulumi.get(self, "network_mask")

    @property
    @pulumi.getter
    def primary(self) -> str:
        """
        IPv4 address for the Primary Timing Master Server.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> str:
        """
        IPv4 address for the Secondary Timing Master Server.
        """
        return pulumi.get(self, "secondary")


@pulumi.output_type
class PrecisionTimeServiceNtpAdvancedConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyNumber":
            suggest = "key_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceNtpAdvancedConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceNtpAdvancedConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceNtpAdvancedConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[str] = None,
                 key_number: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str key: The plaintext authentication key. For ASCII type, the key\\
               \\ must contain printable ASCII characters, range 10-20 characters. For\\
               \\ HEX type, range should be 10-40 characters
        :param int key_number: The authentication Key ID
        :param str type: md5 Authentication type
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_number is not None:
            pulumi.set(__self__, "key_number", key_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The plaintext authentication key. For ASCII type, the key\\
        \\ must contain printable ASCII characters, range 10-20 characters. For\\
        \\ HEX type, range should be 10-40 characters
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyNumber")
    def key_number(self) -> Optional[int]:
        """
        The authentication Key ID
        """
        return pulumi.get(self, "key_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        md5 Authentication type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PrecisionTimeServiceOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerReferenceNumber":
            suggest = "customer_reference_number"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "purchaseOrderNumber":
            suggest = "purchase_order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_reference_number: Optional[str] = None,
                 order_number: Optional[str] = None,
                 purchase_order_number: Optional[str] = None):
        """
        :param str customer_reference_number: Customer reference number
        :param str order_number: Order reference number
        :param str purchase_order_number: Purchase order number
        """
        if customer_reference_number is not None:
            pulumi.set(__self__, "customer_reference_number", customer_reference_number)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if purchase_order_number is not None:
            pulumi.set(__self__, "purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="customerReferenceNumber")
    def customer_reference_number(self) -> Optional[str]:
        """
        Customer reference number
        """
        return pulumi.get(self, "customer_reference_number")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order reference number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[str]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class PrecisionTimeServicePackage(dict):
    def __init__(__self__, *,
                 code: str,
                 href: Optional[str] = None):
        """
        :param str code: Time Precision Package Code for the desired billing package
        :param str href: Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        pulumi.set(__self__, "code", code)
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Time Precision Package Code for the desired billing package
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        return pulumi.get(self, "href")


@pulumi.output_type
class PrecisionTimeServicePrecisionTimePrice(dict):
    def __init__(__self__, *,
                 charges: Optional[Sequence['outputs.PrecisionTimeServicePrecisionTimePriceCharge']] = None,
                 currency: Optional[str] = None):
        """
        :param Sequence['PrecisionTimeServicePrecisionTimePriceChargeArgs'] charges: offering price charge
        :param str currency: Offering price currency
        """
        if charges is not None:
            pulumi.set(__self__, "charges", charges)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)

    @property
    @pulumi.getter
    def charges(self) -> Optional[Sequence['outputs.PrecisionTimeServicePrecisionTimePriceCharge']]:
        """
        offering price charge
        """
        return pulumi.get(self, "charges")

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        """
        Offering price currency
        """
        return pulumi.get(self, "currency")


@pulumi.output_type
class PrecisionTimeServicePrecisionTimePriceCharge(dict):
    def __init__(__self__, *,
                 price: Optional[float] = None,
                 type: Optional[str] = None):
        """
        :param float price: Offering price
        :param str type: Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        if price is not None:
            pulumi.set(__self__, "price", price)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def price(self) -> Optional[float]:
        """
        Offering price
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PrecisionTimeServiceProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServiceProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServiceProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServiceProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: Optional[str] = None):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class PrecisionTimeServicePtpAdvancedConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grantTime":
            suggest = "grant_time"
        elif key == "logAnnounceInterval":
            suggest = "log_announce_interval"
        elif key == "logDelayReqInterval":
            suggest = "log_delay_req_interval"
        elif key == "logSyncInterval":
            suggest = "log_sync_interval"
        elif key == "timeScale":
            suggest = "time_scale"
        elif key == "transportMode":
            suggest = "transport_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrecisionTimeServicePtpAdvancedConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrecisionTimeServicePtpAdvancedConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrecisionTimeServicePtpAdvancedConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[int] = None,
                 grant_time: Optional[int] = None,
                 log_announce_interval: Optional[int] = None,
                 log_delay_req_interval: Optional[int] = None,
                 log_sync_interval: Optional[int] = None,
                 priority1: Optional[int] = None,
                 priority2: Optional[int] = None,
                 time_scale: Optional[str] = None,
                 transport_mode: Optional[str] = None):
        """
        :param int domain: The PTP domain value
        :param int grant_time: Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        :param int log_announce_interval: Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        :param int log_delay_req_interval: Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int log_sync_interval: Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int priority1: The priority1 value determines the best primary clock, Lower value indicates higher priority
        :param int priority2: The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        :param str time_scale: Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        :param str transport_mode: ptp transport mode
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if grant_time is not None:
            pulumi.set(__self__, "grant_time", grant_time)
        if log_announce_interval is not None:
            pulumi.set(__self__, "log_announce_interval", log_announce_interval)
        if log_delay_req_interval is not None:
            pulumi.set(__self__, "log_delay_req_interval", log_delay_req_interval)
        if log_sync_interval is not None:
            pulumi.set(__self__, "log_sync_interval", log_sync_interval)
        if priority1 is not None:
            pulumi.set(__self__, "priority1", priority1)
        if priority2 is not None:
            pulumi.set(__self__, "priority2", priority2)
        if time_scale is not None:
            pulumi.set(__self__, "time_scale", time_scale)
        if transport_mode is not None:
            pulumi.set(__self__, "transport_mode", transport_mode)

    @property
    @pulumi.getter
    def domain(self) -> Optional[int]:
        """
        The PTP domain value
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="grantTime")
    def grant_time(self) -> Optional[int]:
        """
        Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        """
        return pulumi.get(self, "grant_time")

    @property
    @pulumi.getter(name="logAnnounceInterval")
    def log_announce_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        """
        return pulumi.get(self, "log_announce_interval")

    @property
    @pulumi.getter(name="logDelayReqInterval")
    def log_delay_req_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_delay_req_interval")

    @property
    @pulumi.getter(name="logSyncInterval")
    def log_sync_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_sync_interval")

    @property
    @pulumi.getter
    def priority1(self) -> Optional[int]:
        """
        The priority1 value determines the best primary clock, Lower value indicates higher priority
        """
        return pulumi.get(self, "priority1")

    @property
    @pulumi.getter
    def priority2(self) -> Optional[int]:
        """
        The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        """
        return pulumi.get(self, "priority2")

    @property
    @pulumi.getter(name="timeScale")
    def time_scale(self) -> Optional[str]:
        """
        Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        """
        return pulumi.get(self, "time_scale")

    @property
    @pulumi.getter(name="transportMode")
    def transport_mode(self) -> Optional[str]:
        """
        ptp transport mode
        """
        return pulumi.get(self, "transport_mode")


@pulumi.output_type
class PrecisionTimeServiceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RouteAggregationChange(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Equinix auto generated URI to the route aggregation change
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RouteAggregationChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteAggregationChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteAggregationChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteAggregationChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RouteAggregationProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteAggregationProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteAggregationProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteAggregationProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class RouteAggregationRuleChange(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 href: Optional[str] = None):
        """
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        :param str href: Equinix auto generated URI to the route aggregation change
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")


@pulumi.output_type
class RouteAggregationRuleChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteAggregationRuleChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteAggregationRuleChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteAggregationRuleChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RouteAggregationRuleTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RouteAggregationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RouteFilterChange(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: The URI of the previous Route Filter Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        The URI of the previous Route Filter Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RouteFilterChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteFilterChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteFilterChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteFilterChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RouteFilterProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteFilterProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteFilterProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteFilterProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str,
                 href: Optional[str] = None):
        """
        :param str project_id: Project id associated with Fabric Project
        :param str href: URI of the Fabric Project
        """
        pulumi.set(__self__, "project_id", project_id)
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project id associated with Fabric Project
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        URI of the Fabric Project
        """
        return pulumi.get(self, "href")


@pulumi.output_type
class RouteFilterRuleChange(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: The URI of the previous Route Filter Rule Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        The URI of the previous Route Filter Rule Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RouteFilterRuleChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteFilterRuleChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteFilterRuleChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteFilterRuleChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RoutingProtocolBfd(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Bidirectional Forwarding Detection enablement
        :param str interval: Interval range between the received BFD control packets
        """
        pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class RoutingProtocolBgpIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerPeerIp":
            suggest = "customer_peer_ip"
        elif key == "equinixPeerIp":
            suggest = "equinix_peer_ip"
        elif key == "inboundMed":
            suggest = "inbound_med"
        elif key == "outboundAsPrependCount":
            suggest = "outbound_as_prepend_count"
        elif key == "outboundMed":
            suggest = "outbound_med"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolBgpIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolBgpIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolBgpIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_peer_ip: str,
                 enabled: Optional[bool] = None,
                 equinix_peer_ip: Optional[str] = None,
                 inbound_med: Optional[int] = None,
                 outbound_as_prepend_count: Optional[str] = None,
                 outbound_med: Optional[int] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param bool enabled: Admin status for the BGP session
        :param str equinix_peer_ip: Equinix side peering ip
        :param int inbound_med: Inbound Multi Exit Discriminator attribute
        :param str outbound_as_prepend_count: AS path prepend count. One of: 0, 1, 3, 5
        :param int outbound_med: Outbound Multi Exit Discriminator attribute
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if equinix_peer_ip is not None:
            pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        if inbound_med is not None:
            pulumi.set(__self__, "inbound_med", inbound_med)
        if outbound_as_prepend_count is not None:
            pulumi.set(__self__, "outbound_as_prepend_count", outbound_as_prepend_count)
        if outbound_med is not None:
            pulumi.set(__self__, "outbound_med", outbound_med)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[str]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter(name="inboundMed")
    def inbound_med(self) -> Optional[int]:
        """
        Inbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "inbound_med")

    @property
    @pulumi.getter(name="outboundAsPrependCount")
    def outbound_as_prepend_count(self) -> Optional[str]:
        """
        AS path prepend count. One of: 0, 1, 3, 5
        """
        return pulumi.get(self, "outbound_as_prepend_count")

    @property
    @pulumi.getter(name="outboundMed")
    def outbound_med(self) -> Optional[int]:
        """
        Outbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "outbound_med")


@pulumi.output_type
class RoutingProtocolBgpIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerPeerIp":
            suggest = "customer_peer_ip"
        elif key == "equinixPeerIp":
            suggest = "equinix_peer_ip"
        elif key == "inboundMed":
            suggest = "inbound_med"
        elif key == "outboundAsPrependCount":
            suggest = "outbound_as_prepend_count"
        elif key == "outboundMed":
            suggest = "outbound_med"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolBgpIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolBgpIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolBgpIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_peer_ip: str,
                 enabled: Optional[bool] = None,
                 equinix_peer_ip: Optional[str] = None,
                 inbound_med: Optional[int] = None,
                 outbound_as_prepend_count: Optional[str] = None,
                 outbound_med: Optional[int] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param bool enabled: Admin status for the BGP session
        :param str equinix_peer_ip: Equinix side peering ip
        :param int inbound_med: Inbound Multi Exit Discriminator attribute
        :param str outbound_as_prepend_count: AS path prepend count. One of: 0, 1, 3, 5
        :param int outbound_med: Outbound Multi Exit Discriminator attribute
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if equinix_peer_ip is not None:
            pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        if inbound_med is not None:
            pulumi.set(__self__, "inbound_med", inbound_med)
        if outbound_as_prepend_count is not None:
            pulumi.set(__self__, "outbound_as_prepend_count", outbound_as_prepend_count)
        if outbound_med is not None:
            pulumi.set(__self__, "outbound_med", outbound_med)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[str]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter(name="inboundMed")
    def inbound_med(self) -> Optional[int]:
        """
        Inbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "inbound_med")

    @property
    @pulumi.getter(name="outboundAsPrependCount")
    def outbound_as_prepend_count(self) -> Optional[str]:
        """
        AS path prepend count. One of: 0, 1, 3, 5
        """
        return pulumi.get(self, "outbound_as_prepend_count")

    @property
    @pulumi.getter(name="outboundMed")
    def outbound_med(self) -> Optional[int]:
        """
        Outbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "outbound_med")


@pulumi.output_type
class RoutingProtocolChange(dict):
    def __init__(__self__, *,
                 href: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Routing Protocol Change URI
        :param str type: Type of change
        :param str uuid: Uniquely identifies a change
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Routing Protocol Change URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of change
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Uniquely identifies a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class RoutingProtocolChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class RoutingProtocolDirectIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixIfaceIp":
            suggest = "equinix_iface_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolDirectIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolDirectIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolDirectIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_iface_ip: str):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> str:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class RoutingProtocolDirectIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equinixIfaceIp":
            suggest = "equinix_iface_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolDirectIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolDirectIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolDirectIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 equinix_iface_ip: Optional[str] = None):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        if equinix_iface_ip is not None:
            pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class RoutingProtocolOperation(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.RoutingProtocolOperationError']] = None):
        """
        :param Sequence['RoutingProtocolOperationErrorArgs'] errors: Errors occurred
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.RoutingProtocolOperationError']]:
        """
        Errors occurred
        """
        return pulumi.get(self, "errors")


@pulumi.output_type
class RoutingProtocolOperationError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfos":
            suggest = "additional_infos"
        elif key == "correlationId":
            suggest = "correlation_id"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProtocolOperationError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProtocolOperationError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProtocolOperationError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_infos: Optional[Sequence['outputs.RoutingProtocolOperationErrorAdditionalInfo']] = None,
                 correlation_id: Optional[str] = None,
                 details: Optional[str] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 help: Optional[str] = None):
        """
        :param Sequence['RoutingProtocolOperationErrorAdditionalInfoArgs'] additional_infos: Pricing error additional Info
        :param str correlation_id: CorrelationId
        :param str details: Details
        :param str error_code: Error  code
        :param str error_message: Error Message
        :param str help: Help
        """
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if correlation_id is not None:
            pulumi.set(__self__, "correlation_id", correlation_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if help is not None:
            pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.RoutingProtocolOperationErrorAdditionalInfo']]:
        """
        Pricing error additional Info
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[str]:
        """
        CorrelationId
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        """
        Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        """
        Error  code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        Error Message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> Optional[str]:
        """
        Help
        """
        return pulumi.get(self, "help")


@pulumi.output_type
class RoutingProtocolOperationErrorAdditionalInfo(dict):
    def __init__(__self__, *,
                 property: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        :param str property: Property at which the error potentially occurred
        :param str reason: Reason for the error
        """
        if property is not None:
            pulumi.set(__self__, "property", property)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason for the error
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Property at which the error potentially occurred
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBandwidthAutoApproval":
            suggest = "allow_bandwidth_auto_approval"
        elif key == "allowBandwidthUpgrade":
            suggest = "allow_bandwidth_upgrade"
        elif key == "allowCustomBandwidth":
            suggest = "allow_custom_bandwidth"
        elif key == "allowRemoteConnections":
            suggest = "allow_remote_connections"
        elif key == "apiConfig":
            suggest = "api_config"
        elif key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "bandwidthAlertThreshold":
            suggest = "bandwidth_alert_threshold"
        elif key == "connectionLabel":
            suggest = "connection_label"
        elif key == "connectionRedundancyRequired":
            suggest = "connection_redundancy_required"
        elif key == "enableAutoGenerateServiceKey":
            suggest = "enable_auto_generate_service_key"
        elif key == "linkProtocolConfig":
            suggest = "link_protocol_config"
        elif key == "supportedBandwidths":
            suggest = "supported_bandwidths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 allow_bandwidth_auto_approval: Optional[bool] = None,
                 allow_bandwidth_upgrade: Optional[bool] = None,
                 allow_custom_bandwidth: Optional[bool] = None,
                 allow_remote_connections: Optional[bool] = None,
                 api_config: Optional['outputs.ServiceProfileAccessPointTypeConfigApiConfig'] = None,
                 authentication_key: Optional['outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey'] = None,
                 bandwidth_alert_threshold: Optional[float] = None,
                 connection_label: Optional[str] = None,
                 connection_redundancy_required: Optional[bool] = None,
                 enable_auto_generate_service_key: Optional[bool] = None,
                 link_protocol_config: Optional['outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig'] = None,
                 supported_bandwidths: Optional[Sequence[int]] = None,
                 uuid: Optional[str] = None):
        """
        :param Union[str, 'ProfileAccessPointType'] type: Type of access point type config - VD, COLO
        :param bool allow_bandwidth_auto_approval: Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        :param bool allow_bandwidth_upgrade: Availability of a bandwidth upgrade. The default is false
        :param bool allow_custom_bandwidth: Setting to enable or disable the ability of the buyer to customize the bandwidth
        :param bool allow_remote_connections: Setting to allow or prohibit remote connections to the service profile
        :param 'ServiceProfileAccessPointTypeConfigApiConfigArgs' api_config: Api configuration details
        :param 'ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs' authentication_key: Authentication key details
        :param float bandwidth_alert_threshold: Percentage of port bandwidth at which an allocation alert is generated
        :param str connection_label: Custom name for Connection
        :param bool connection_redundancy_required: Mandate redundant connections
        :param bool enable_auto_generate_service_key: Enable auto generate service key
        :param 'ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs' link_protocol_config: Link protocol configuration details
        :param Sequence[int] supported_bandwidths: Supported bandwidths
        :param str uuid: Colo/Port Uuid
        """
        pulumi.set(__self__, "type", type)
        if allow_bandwidth_auto_approval is not None:
            pulumi.set(__self__, "allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        if allow_bandwidth_upgrade is not None:
            pulumi.set(__self__, "allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        if allow_custom_bandwidth is not None:
            pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connections is not None:
            pulumi.set(__self__, "allow_remote_connections", allow_remote_connections)
        if api_config is not None:
            pulumi.set(__self__, "api_config", api_config)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bandwidth_alert_threshold is not None:
            pulumi.set(__self__, "bandwidth_alert_threshold", bandwidth_alert_threshold)
        if connection_label is not None:
            pulumi.set(__self__, "connection_label", connection_label)
        if connection_redundancy_required is not None:
            pulumi.set(__self__, "connection_redundancy_required", connection_redundancy_required)
        if enable_auto_generate_service_key is not None:
            pulumi.set(__self__, "enable_auto_generate_service_key", enable_auto_generate_service_key)
        if link_protocol_config is not None:
            pulumi.set(__self__, "link_protocol_config", link_protocol_config)
        if supported_bandwidths is not None:
            pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        """
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> Optional[bool]:
        """
        Availability of a bandwidth upgrade. The default is false
        """
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to customize the bandwidth
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> Optional[bool]:
        """
        Setting to allow or prohibit remote connections to the service profile
        """
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfig")
    def api_config(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigApiConfig']:
        """
        Api configuration details
        """
        return pulumi.get(self, "api_config")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigAuthenticationKey']:
        """
        Authentication key details
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> Optional[float]:
        """
        Percentage of port bandwidth at which an allocation alert is generated
        """
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> Optional[str]:
        """
        Custom name for Connection
        """
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> Optional[bool]:
        """
        Mandate redundant connections
        """
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> Optional[bool]:
        """
        Enable auto generate service key
        """
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfig")
    def link_protocol_config(self) -> Optional['outputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfig']:
        """
        Link protocol configuration details
        """
        return pulumi.get(self, "link_protocol_config")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[Sequence[int]]:
        """
        Supported bandwidths
        """
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigApiConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOverSubscription":
            suggest = "allow_over_subscription"
        elif key == "apiAvailable":
            suggest = "api_available"
        elif key == "bandwidthFromApi":
            suggest = "bandwidth_from_api"
        elif key == "equinixManagedPort":
            suggest = "equinix_managed_port"
        elif key == "equinixManagedVlan":
            suggest = "equinix_managed_vlan"
        elif key == "integrationId":
            suggest = "integration_id"
        elif key == "overSubscriptionLimit":
            suggest = "over_subscription_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfigApiConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfigApiConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfigApiConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_over_subscription: Optional[bool] = None,
                 api_available: Optional[bool] = None,
                 bandwidth_from_api: Optional[bool] = None,
                 equinix_managed_port: Optional[bool] = None,
                 equinix_managed_vlan: Optional[bool] = None,
                 integration_id: Optional[str] = None,
                 over_subscription_limit: Optional[int] = None):
        """
        :param bool allow_over_subscription: Setting showing that oversubscription support is available (true) or not (false). The default is false
        :param bool api_available: Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        :param bool bandwidth_from_api: Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        :param bool equinix_managed_port: Setting indicating that the port is managed by Equinix (true) or not (false)
        :param bool equinix_managed_vlan: Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        :param str integration_id: A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        :param int over_subscription_limit: Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        if allow_over_subscription is not None:
            pulumi.set(__self__, "allow_over_subscription", allow_over_subscription)
        if api_available is not None:
            pulumi.set(__self__, "api_available", api_available)
        if bandwidth_from_api is not None:
            pulumi.set(__self__, "bandwidth_from_api", bandwidth_from_api)
        if equinix_managed_port is not None:
            pulumi.set(__self__, "equinix_managed_port", equinix_managed_port)
        if equinix_managed_vlan is not None:
            pulumi.set(__self__, "equinix_managed_vlan", equinix_managed_vlan)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if over_subscription_limit is not None:
            pulumi.set(__self__, "over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> Optional[bool]:
        """
        Setting showing that oversubscription support is available (true) or not (false). The default is false
        """
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> Optional[bool]:
        """
        Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        """
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> Optional[bool]:
        """
        Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        """
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> Optional[bool]:
        """
        Setting indicating that the port is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> Optional[bool]:
        """
        Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[str]:
        """
        A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> Optional[int]:
        """
        Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigAuthenticationKey(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 label: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        :param str description: Description of authorization key
        :param str label: Name of the parameter that must be provided to authorize the connection.
        :param bool required: Requirement to configure an authentication key.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of authorization key
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Name of the parameter that must be provided to authorize the connection.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Requirement to configure an authentication key.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class ServiceProfileAccessPointTypeConfigLinkProtocolConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encapsulationStrategy":
            suggest = "encapsulation_strategy"
        elif key == "reuseVlanSTag":
            suggest = "reuse_vlan_s_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccessPointTypeConfigLinkProtocolConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccessPointTypeConfigLinkProtocolConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccessPointTypeConfigLinkProtocolConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[str] = None,
                 encapsulation_strategy: Optional[str] = None,
                 reuse_vlan_s_tag: Optional[bool] = None):
        """
        :param str encapsulation: Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        :param str encapsulation_strategy: Additional tagging information required by the seller profile.
        :param bool reuse_vlan_s_tag: Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_strategy is not None:
            pulumi.set(__self__, "encapsulation_strategy", encapsulation_strategy)
        if reuse_vlan_s_tag is not None:
            pulumi.set(__self__, "reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[str]:
        """
        Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> Optional[str]:
        """
        Additional tagging information required by the seller profile.
        """
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> Optional[bool]:
        """
        Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class ServiceProfileAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ServiceProfileChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class ServiceProfileCustomField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "captureInEmail":
            suggest = "capture_in_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileCustomField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileCustomField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileCustomField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 label: str,
                 required: bool,
                 capture_in_email: Optional[bool] = None,
                 description: Optional[str] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str data_type: Data type
        :param str label: Label
        :param bool required: Required field
        :param bool capture_in_email: Required field
        :param str description: Description
        :param Sequence[str] options: Options
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "required", required)
        if capture_in_email is not None:
            pulumi.set(__self__, "capture_in_email", capture_in_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Required field
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> Optional[bool]:
        """
        Required field
        """
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Options
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class ServiceProfileMarketingInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processSteps":
            suggest = "process_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMarketingInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMarketingInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMarketingInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logo: Optional[str] = None,
                 process_steps: Optional[Sequence['outputs.ServiceProfileMarketingInfoProcessStep']] = None,
                 promotion: Optional[bool] = None):
        """
        :param str logo: Logo
        :param Sequence['ServiceProfileMarketingInfoProcessStepArgs'] process_steps: Process Step
        :param bool promotion: Promotion
        """
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if process_steps is not None:
            pulumi.set(__self__, "process_steps", process_steps)
        if promotion is not None:
            pulumi.set(__self__, "promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> Optional[str]:
        """
        Logo
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Optional[Sequence['outputs.ServiceProfileMarketingInfoProcessStep']]:
        """
        Process Step
        """
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> Optional[bool]:
        """
        Promotion
        """
        return pulumi.get(self, "promotion")


@pulumi.output_type
class ServiceProfileMarketingInfoProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subTitle":
            suggest = "sub_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMarketingInfoProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMarketingInfoProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMarketingInfoProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 sub_title: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str description: Description
        :param str sub_title: Sub Title
        :param str title: Title
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sub_title is not None:
            pulumi.set(__self__, "sub_title", sub_title)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> Optional[str]:
        """
        Sub Title
        """
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ServiceProfileMetro(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "inTrail":
            suggest = "in_trail"
        elif key == "sellerRegions":
            suggest = "seller_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileMetro. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileMetro.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileMetro.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_name: Optional[str] = None,
                 ibxs: Optional[Sequence[str]] = None,
                 in_trail: Optional[bool] = None,
                 name: Optional[str] = None,
                 seller_regions: Optional[Mapping[str, str]] = None):
        """
        :param str code: Metro Code - Example SV
        :param str display_name: Display Name
        :param Sequence[str] ibxs: IBX- Equinix International Business Exchange list
        :param bool in_trail: In Trail
        :param str name: Metro Name
        :param Mapping[str, str] seller_regions: Seller Regions
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ibxs is not None:
            pulumi.set(__self__, "ibxs", ibxs)
        if in_trail is not None:
            pulumi.set(__self__, "in_trail", in_trail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if seller_regions is not None:
            pulumi.set(__self__, "seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Metro Code - Example SV
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Optional[Sequence[str]]:
        """
        IBX- Equinix International Business Exchange list
        """
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> Optional[bool]:
        """
        In Trail
        """
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Optional[Mapping[str, str]]:
        """
        Seller Regions
        """
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class ServiceProfileNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param Union[str, 'NotificationsType'] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class ServiceProfilePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossConnectId":
            suggest = "cross_connect_id"
        elif key == "sellerRegion":
            suggest = "seller_region"
        elif key == "sellerRegionDescription":
            suggest = "seller_region_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfilePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfilePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfilePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 cross_connect_id: Optional[str] = None,
                 location: Optional['outputs.ServiceProfilePortLocation'] = None,
                 seller_region: Optional[str] = None,
                 seller_region_description: Optional[str] = None):
        """
        :param str type: Colo/Port Type
        :param str uuid: Colo/Port Uuid
        :param str cross_connect_id: Cross Connect Id
        :param 'ServiceProfilePortLocationArgs' location: Colo/Port Location
        :param str seller_region: Seller Region
        :param str seller_region_description: Seller Region details
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if cross_connect_id is not None:
            pulumi.set(__self__, "cross_connect_id", cross_connect_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if seller_region_description is not None:
            pulumi.set(__self__, "seller_region_description", seller_region_description)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Colo/Port Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> Optional[str]:
        """
        Cross Connect Id
        """
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ServiceProfilePortLocation']:
        """
        Colo/Port Location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Seller Region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> Optional[str]:
        """
        Seller Region details
        """
        return pulumi.get(self, "seller_region_description")


@pulumi.output_type
class ServiceProfilePortLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfilePortLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfilePortLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfilePortLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceProfileProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ServiceProfileVirtualDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceUuid":
            suggest = "interface_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileVirtualDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileVirtualDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileVirtualDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 interface_uuid: Optional[str] = None,
                 location: Optional['outputs.ServiceProfileVirtualDeviceLocation'] = None):
        """
        :param str type: Virtual Device Type
        :param str uuid: Virtual Device Uuid
        :param str interface_uuid: Device Interface Uuid
        :param 'ServiceProfileVirtualDeviceLocationArgs' location: Device Location
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if interface_uuid is not None:
            pulumi.set(__self__, "interface_uuid", interface_uuid)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Virtual Device Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="interfaceUuid")
    def interface_uuid(self) -> Optional[str]:
        """
        Device Interface Uuid
        """
        return pulumi.get(self, "interface_uuid")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ServiceProfileVirtualDeviceLocation']:
        """
        Device Location
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class ServiceProfileVirtualDeviceLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceProfileVirtualDeviceLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceProfileVirtualDeviceLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceProfileVirtualDeviceLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceTokenAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "accountNumber":
            suggest = "account_number"
        elif key == "globalCustId":
            suggest = "global_cust_id"
        elif key == "globalOrgId":
            suggest = "global_org_id"
        elif key == "globalOrganizationName":
            suggest = "global_organization_name"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "ucmId":
            suggest = "ucm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 account_number: Optional[int] = None,
                 global_cust_id: Optional[str] = None,
                 global_org_id: Optional[str] = None,
                 global_organization_name: Optional[str] = None,
                 org_id: Optional[int] = None,
                 organization_name: Optional[str] = None,
                 ucm_id: Optional[str] = None):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[int]:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[str]:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[int]:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[str]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class ServiceTokenChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class ServiceTokenNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendInterval":
            suggest = "send_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class ServiceTokenProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 href: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ServiceTokenServiceTokenConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aSides":
            suggest = "a_sides"
        elif key == "allowCustomBandwidth":
            suggest = "allow_custom_bandwidth"
        elif key == "allowRemoteConnection":
            suggest = "allow_remote_connection"
        elif key == "bandwidthLimit":
            suggest = "bandwidth_limit"
        elif key == "supportedBandwidths":
            suggest = "supported_bandwidths"
        elif key == "zSides":
            suggest = "z_sides"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 a_sides: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASide']] = None,
                 allow_custom_bandwidth: Optional[bool] = None,
                 allow_remote_connection: Optional[bool] = None,
                 bandwidth_limit: Optional[int] = None,
                 supported_bandwidths: Optional[Sequence[int]] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 z_sides: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSide']] = None):
        """
        :param Sequence['ServiceTokenServiceTokenConnectionASideArgs'] a_sides: A-Side Connection link protocol,virtual device or network configuration
        :param bool allow_custom_bandwidth: Allow custom bandwidth value
        :param bool allow_remote_connection: Authorization to connect remotely
        :param int bandwidth_limit: Connection bandwidth limit in Mbps
        :param Sequence[int] supported_bandwidths: List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        :param str type: Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
        :param str uuid: Equinix-assigned connection identifier
        :param Sequence['ServiceTokenServiceTokenConnectionZSideArgs'] z_sides: Z-Side Connection link protocol,virtual device or network configuration
        """
        if a_sides is not None:
            pulumi.set(__self__, "a_sides", a_sides)
        if allow_custom_bandwidth is not None:
            pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connection is not None:
            pulumi.set(__self__, "allow_remote_connection", allow_remote_connection)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if supported_bandwidths is not None:
            pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if z_sides is not None:
            pulumi.set(__self__, "z_sides", z_sides)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASide']]:
        """
        A-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "a_sides")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[bool]:
        """
        Allow custom bandwidth value
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnection")
    def allow_remote_connection(self) -> Optional[bool]:
        """
        Authorization to connect remotely
        """
        return pulumi.get(self, "allow_remote_connection")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[int]:
        """
        Connection bandwidth limit in Mbps
        """
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[Sequence[int]]:
        """
        List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        """
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Connection supported by Service Token you will create; EVPL*VC, EVPLAN*VC, EPLAN*VC, IPWAN*VC
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned connection identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSide']]:
        """
        Z-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "z_sides")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointSelectors":
            suggest = "access_point_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelector']):
        """
        :param Sequence['ServiceTokenServiceTokenConnectionASideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelector']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASideAccessPointSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterface'] = None,
                 link_protocol: Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol'] = None,
                 network: Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetwork'] = None,
                 port: Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort'] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDevice'] = None):
        """
        :param 'ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param 'ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs' port: Port Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'ServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterface']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetwork']:
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDevice']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorInterface(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[int] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Interface type
        :param int id: id
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetwork(dict):
    def __init__(__self__, *,
                 uuid: str,
                 href: Optional[str] = None,
                 locations: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation']] = None,
                 name: Optional[str] = None,
                 scope: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Network identifier
        :param str href: Unique Resource Identifier
        :param Sequence['ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        """
        pulumi.set(__self__, "uuid", uuid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation']]:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Network
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "cvpId":
            suggest = "cvp_id"
        elif key == "encapsulationProtocolType":
            suggest = "encapsulation_protocol_type"
        elif key == "portName":
            suggest = "port_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uuid: str,
                 account_name: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 cvp_id: Optional[int] = None,
                 encapsulation_protocol_type: Optional[str] = None,
                 href: Optional[str] = None,
                 locations: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation']] = None,
                 port_name: Optional[str] = None,
                 priority: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Port identifier
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        """
        pulumi.set(__self__, "uuid", uuid)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if cvp_id is not None:
            pulumi.set(__self__, "cvp_id", cvp_id)
        if encapsulation_protocol_type is not None:
            pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> Optional[int]:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> Optional[str]:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation']]:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[str]:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Port
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDevice(dict):
    def __init__(__self__, *,
                 uuid: str,
                 cluster: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Virtual Device identifier
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        """
        pulumi.set(__self__, "uuid", uuid)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessPointSelectors":
            suggest = "access_point_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelector']):
        """
        :param Sequence['ServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelector']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkProtocol":
            suggest = "link_protocol"
        elif key == "virtualDevice":
            suggest = "virtual_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSideAccessPointSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface'] = None,
                 link_protocol: Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol'] = None,
                 network: Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork'] = None,
                 port: Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort'] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice'] = None):
        """
        :param 'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param 'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortArgs' port: Port Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork']:
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterface(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[int] = None,
                 uuid: Optional[str] = None):
        """
        :param str type: Interface type
        :param int id: id
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanCTag":
            suggest = "vlan_c_tag"
        elif key == "vlanSTag":
            suggest = "vlan_s_tag"
        elif key == "vlanTag":
            suggest = "vlan_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: Optional[str] = None,
                 vlan_c_tag: Optional[int] = None,
                 vlan_s_tag: Optional[int] = None,
                 vlan_tag: Optional[int] = None):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[int]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[int]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetwork(dict):
    def __init__(__self__, *,
                 uuid: str,
                 href: Optional[str] = None,
                 locations: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation']] = None,
                 name: Optional[str] = None,
                 scope: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Network identifier
        :param str href: Unique Resource Identifier
        :param Sequence['ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        """
        pulumi.set(__self__, "uuid", uuid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation']]:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Network
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "cvpId":
            suggest = "cvp_id"
        elif key == "encapsulationProtocolType":
            suggest = "encapsulation_protocol_type"
        elif key == "portName":
            suggest = "port_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uuid: str,
                 account_name: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 cvp_id: Optional[int] = None,
                 encapsulation_protocol_type: Optional[str] = None,
                 href: Optional[str] = None,
                 locations: Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation']] = None,
                 port_name: Optional[str] = None,
                 priority: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Port identifier
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        """
        pulumi.set(__self__, "uuid", uuid)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if cvp_id is not None:
            pulumi.set(__self__, "cvp_id", cvp_id)
        if encapsulation_protocol_type is not None:
            pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> Optional[int]:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> Optional[str]:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation']]:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[str]:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Port
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metroCode":
            suggest = "metro_code"
        elif key == "metroName":
            suggest = "metro_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ibx: Optional[str] = None,
                 metro_code: Optional[str] = None,
                 metro_name: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[str]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[str]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[str]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDevice(dict):
    def __init__(__self__, *,
                 uuid: str,
                 cluster: Optional[str] = None,
                 href: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str uuid: Equinix-assigned Virtual Device identifier
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        """
        pulumi.set(__self__, "uuid", uuid)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class StreamAttachmentTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class StreamChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class StreamProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class StreamSubscriptionChangeLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "createdByEmail":
            suggest = "created_by_email"
        elif key == "createdByFullName":
            suggest = "created_by_full_name"
        elif key == "createdDateTime":
            suggest = "created_date_time"
        elif key == "deletedBy":
            suggest = "deleted_by"
        elif key == "deletedByEmail":
            suggest = "deleted_by_email"
        elif key == "deletedByFullName":
            suggest = "deleted_by_full_name"
        elif key == "deletedDateTime":
            suggest = "deleted_date_time"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByEmail":
            suggest = "updated_by_email"
        elif key == "updatedByFullName":
            suggest = "updated_by_full_name"
        elif key == "updatedDateTime":
            suggest = "updated_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamSubscriptionChangeLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamSubscriptionChangeLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamSubscriptionChangeLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_by: Optional[str] = None,
                 created_by_email: Optional[str] = None,
                 created_by_full_name: Optional[str] = None,
                 created_date_time: Optional[str] = None,
                 deleted_by: Optional[str] = None,
                 deleted_by_email: Optional[str] = None,
                 deleted_by_full_name: Optional[str] = None,
                 deleted_date_time: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_email: Optional[str] = None,
                 updated_by_full_name: Optional[str] = None,
                 updated_date_time: Optional[str] = None):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[str]:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[str]:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[str]:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[str]:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[str]:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[str]:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[str]:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[str]:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[str]:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[str]:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class StreamSubscriptionEventSelector(dict):
    def __init__(__self__, *,
                 includes: Sequence[str],
                 excepts: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] includes: List of events to include
        :param Sequence[str] excepts: List of events to exclude
        """
        pulumi.set(__self__, "includes", includes)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of events to include
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter
    def excepts(self) -> Optional[Sequence[str]]:
        """
        List of events to exclude
        """
        return pulumi.get(self, "excepts")


@pulumi.output_type
class StreamSubscriptionMetricSelector(dict):
    def __init__(__self__, *,
                 includes: Sequence[str],
                 excepts: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] includes: List of metrics to include
        :param Sequence[str] excepts: List of metrics to exclude
        """
        pulumi.set(__self__, "includes", includes)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of metrics to include
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter
    def excepts(self) -> Optional[Sequence[str]]:
        """
        List of metrics to exclude
        """
        return pulumi.get(self, "excepts")


@pulumi.output_type
class StreamSubscriptionSink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchEnabled":
            suggest = "batch_enabled"
        elif key == "batchSizeMax":
            suggest = "batch_size_max"
        elif key == "batchWaitTimeMax":
            suggest = "batch_wait_time_max"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamSubscriptionSink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamSubscriptionSink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamSubscriptionSink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 batch_enabled: Optional[bool] = None,
                 batch_size_max: Optional[int] = None,
                 batch_wait_time_max: Optional[int] = None,
                 credential: Optional['outputs.StreamSubscriptionSinkCredential'] = None,
                 host: Optional[str] = None,
                 settings: Optional['outputs.StreamSubscriptionSinkSettings'] = None,
                 uri: Optional[str] = None):
        """
        :param str type: Type of the subscriber
        :param bool batch_enabled: Boolean switch enabling batch delivery of data
        :param int batch_size_max: Maximum size of the batch delivery if enabled
        :param int batch_wait_time_max: Maximum time to wait for batch delivery if enabled
        :param 'StreamSubscriptionSinkCredentialArgs' credential: Access details for the specified sink type
        :param str host: Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        :param 'StreamSubscriptionSinkSettingsArgs' settings: Stream subscription sink settings
        :param str uri: Publicly reachable http endpoint destination for data stream
        """
        pulumi.set(__self__, "type", type)
        if batch_enabled is not None:
            pulumi.set(__self__, "batch_enabled", batch_enabled)
        if batch_size_max is not None:
            pulumi.set(__self__, "batch_size_max", batch_size_max)
        if batch_wait_time_max is not None:
            pulumi.set(__self__, "batch_wait_time_max", batch_wait_time_max)
        if credential is not None:
            pulumi.set(__self__, "credential", credential)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the subscriber
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="batchEnabled")
    def batch_enabled(self) -> Optional[bool]:
        """
        Boolean switch enabling batch delivery of data
        """
        return pulumi.get(self, "batch_enabled")

    @property
    @pulumi.getter(name="batchSizeMax")
    def batch_size_max(self) -> Optional[int]:
        """
        Maximum size of the batch delivery if enabled
        """
        return pulumi.get(self, "batch_size_max")

    @property
    @pulumi.getter(name="batchWaitTimeMax")
    def batch_wait_time_max(self) -> Optional[int]:
        """
        Maximum time to wait for batch delivery if enabled
        """
        return pulumi.get(self, "batch_wait_time_max")

    @property
    @pulumi.getter
    def credential(self) -> Optional['outputs.StreamSubscriptionSinkCredential']:
        """
        Access details for the specified sink type
        """
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.StreamSubscriptionSinkSettings']:
        """
        Stream subscription sink settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        Publicly reachable http endpoint destination for data stream
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class StreamSubscriptionSinkCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "apiKey":
            suggest = "api_key"
        elif key == "integrationKey":
            suggest = "integration_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamSubscriptionSinkCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamSubscriptionSinkCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamSubscriptionSinkCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_token: Optional[str] = None,
                 api_key: Optional[str] = None,
                 integration_key: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str type: Type of the credential being passed
        :param str access_token: Passed as Authorization header value
        :param str api_key: Passed as Authorization header value
        :param str integration_key: Passed as Authorization header value
        :param str password: Passed as Authorization header value
        :param str username: Passed as Authorization header value
        """
        pulumi.set(__self__, "type", type)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the credential being passed
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[str]:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class StreamSubscriptionSinkSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationKey":
            suggest = "application_key"
        elif key == "eventIndex":
            suggest = "event_index"
        elif key == "eventUri":
            suggest = "event_uri"
        elif key == "metricIndex":
            suggest = "metric_index"
        elif key == "metricUri":
            suggest = "metric_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamSubscriptionSinkSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamSubscriptionSinkSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamSubscriptionSinkSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_key: Optional[str] = None,
                 event_index: Optional[str] = None,
                 event_uri: Optional[str] = None,
                 metric_index: Optional[str] = None,
                 metric_uri: Optional[str] = None,
                 source: Optional[str] = None):
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if event_index is not None:
            pulumi.set(__self__, "event_index", event_index)
        if event_uri is not None:
            pulumi.set(__self__, "event_uri", event_uri)
        if metric_index is not None:
            pulumi.set(__self__, "metric_index", metric_index)
        if metric_uri is not None:
            pulumi.set(__self__, "metric_uri", metric_uri)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[str]:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="eventIndex")
    def event_index(self) -> Optional[str]:
        return pulumi.get(self, "event_index")

    @property
    @pulumi.getter(name="eventUri")
    def event_uri(self) -> Optional[str]:
        return pulumi.get(self, "event_uri")

    @property
    @pulumi.getter(name="metricIndex")
    def metric_index(self) -> Optional[str]:
        return pulumi.get(self, "metric_index")

    @property
    @pulumi.getter(name="metricUri")
    def metric_uri(self) -> Optional[str]:
        return pulumi.get(self, "metric_uri")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class StreamSubscriptionTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class StreamTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 read: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def read(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class GetCloudRouterAccountResult(dict):
    def __init__(__self__, *,
                 account_number: int):
        """
        :param int account_number: Account Number
        """
        pulumi.set(__self__, "account_number", account_number)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")


@pulumi.output_type
class GetCloudRouterChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetCloudRouterLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCloudRouterMarketplaceSubscriptionResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
        :param str uuid: Equinix-assigned Marketplace Subscription identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Marketplace Subscription identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetCloudRouterNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetCloudRouterOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        pulumi.set(__self__, "billing_tier", billing_tier)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class GetCloudRouterPackageResult(dict):
    def __init__(__self__, *,
                 code: str):
        """
        :param str code: Fabric Cloud Router package code
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Fabric Cloud Router package code
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class GetCloudRouterProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetCloudRoutersDataResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetCloudRoutersDataAccountResult'],
                 change_logs: Sequence['outputs.GetCloudRoutersDataChangeLogResult'],
                 connections_count: int,
                 description: str,
                 equinix_asn: int,
                 href: str,
                 locations: Sequence['outputs.GetCloudRoutersDataLocationResult'],
                 marketplace_subscriptions: Sequence['outputs.GetCloudRoutersDataMarketplaceSubscriptionResult'],
                 name: str,
                 notifications: Sequence['outputs.GetCloudRoutersDataNotificationResult'],
                 orders: Sequence['outputs.GetCloudRoutersDataOrderResult'],
                 packages: Sequence['outputs.GetCloudRoutersDataPackageResult'],
                 projects: Sequence['outputs.GetCloudRoutersDataProjectResult'],
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetCloudRoutersDataAccountArgs'] accounts: Customer account information that is associated with this Fabric Cloud Router
        :param Sequence['GetCloudRoutersDataChangeLogArgs'] change_logs: Captures Fabric Cloud Router lifecycle change information
        :param int connections_count: Number of connections associated with this Fabric Cloud Router instance
        :param str description: Customer-provided Fabric Cloud Router description
        :param int equinix_asn: Equinix ASN
        :param str href: Fabric Cloud Router URI information
        :param Sequence['GetCloudRoutersDataLocationArgs'] locations: Fabric Cloud Router location
        :param Sequence['GetCloudRoutersDataMarketplaceSubscriptionArgs'] marketplace_subscriptions: Equinix Fabric Entity for Marketplace Subscription
        :param str name: Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param Sequence['GetCloudRoutersDataNotificationArgs'] notifications: Preferences for notifications on Fabric Cloud Router configuration or status changes
        :param Sequence['GetCloudRoutersDataOrderArgs'] orders: Order information related to this Fabric Cloud Router
        :param Sequence['GetCloudRoutersDataPackageArgs'] packages: Fabric Cloud Router Package Type
        :param Sequence['GetCloudRoutersDataProjectArgs'] projects: Customer resource hierarchy project information. Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        :param str state: Fabric Cloud Router overall state
        :param str type: Defines the FCR type like; XF_ROUTER
        :param str uuid: Equinix-assigned Fabric Cloud Router identifier
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "connections_count", connections_count)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "equinix_asn", equinix_asn)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "marketplace_subscriptions", marketplace_subscriptions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "orders", orders)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetCloudRoutersDataAccountResult']:
        """
        Customer account information that is associated with this Fabric Cloud Router
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetCloudRoutersDataChangeLogResult']:
        """
        Captures Fabric Cloud Router lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        """
        Number of connections associated with this Fabric Cloud Router instance
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided Fabric Cloud Router description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> int:
        """
        Equinix ASN
        """
        return pulumi.get(self, "equinix_asn")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Fabric Cloud Router URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetCloudRoutersDataLocationResult']:
        """
        Fabric Cloud Router location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="marketplaceSubscriptions")
    def marketplace_subscriptions(self) -> Sequence['outputs.GetCloudRoutersDataMarketplaceSubscriptionResult']:
        """
        Equinix Fabric Entity for Marketplace Subscription
        """
        return pulumi.get(self, "marketplace_subscriptions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetCloudRoutersDataNotificationResult']:
        """
        Preferences for notifications on Fabric Cloud Router configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def orders(self) -> Sequence['outputs.GetCloudRoutersDataOrderResult']:
        """
        Order information related to this Fabric Cloud Router
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetCloudRoutersDataPackageResult']:
        """
        Fabric Cloud Router Package Type
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetCloudRoutersDataProjectResult']:
        """
        Customer resource hierarchy project information. Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Fabric Cloud Router overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the FCR type like; XF_ROUTER
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Fabric Cloud Router identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetCloudRoutersDataAccountResult(dict):
    def __init__(__self__, *,
                 account_number: int):
        """
        :param int account_number: Account Number
        """
        pulumi.set(__self__, "account_number", account_number)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")


@pulumi.output_type
class GetCloudRoutersDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetCloudRoutersDataLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCloudRoutersDataMarketplaceSubscriptionResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
        :param str uuid: Equinix-assigned Marketplace Subscription identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Marketplace Subscription identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetCloudRoutersDataNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetCloudRoutersDataOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        pulumi.set(__self__, "billing_tier", billing_tier)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class GetCloudRoutersDataPackageResult(dict):
    def __init__(__self__, *,
                 code: str):
        """
        :param str code: Fabric Cloud Router package code
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Fabric Cloud Router package code
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class GetCloudRoutersDataProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetCloudRoutersFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str],
                 or_: Optional[bool] = None):
        """
        :param str operator: Possible operators to use on the filter property. Can be one of the following: [= - equal, != - not equal, > - greater than, >= - greater than or equal to, < - less than, <= - less than or equal to, [NOT] BETWEEN - (not) between, [NOT] LIKE - (not) like, [NOT] IN - (not) in
        :param str property: The API response property which you want to filter your request on. Can be one of the following: "/project/projectId", "/name", "/uuid", "/state", "/location/metroCode", "/location/metroName", "/package/code", "/*"
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        :param bool or_: Boolean flag indicating whether this filter is included in the OR group. There can only be one OR group and it can have a maximum of 3 filters. The OR group only counts as 1 of the 8 possible filters
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)
        if or_ is not None:
            pulumi.set(__self__, "or_", or_)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Possible operators to use on the filter property. Can be one of the following: [= - equal, != - not equal, > - greater than, >= - greater than or equal to, < - less than, <= - less than or equal to, [NOT] BETWEEN - (not) between, [NOT] LIKE - (not) like, [NOT] IN - (not) in
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="or")
    def or_(self) -> Optional[bool]:
        """
        Boolean flag indicating whether this filter is included in the OR group. There can only be one OR group and it can have a maximum of 3 filters. The OR group only counts as 1 of the 8 possible filters
        """
        return pulumi.get(self, "or_")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The API response property which you want to filter your request on. Can be one of the following: "/project/projectId", "/name", "/uuid", "/state", "/location/metroCode", "/location/metroName", "/package/code", "/*"
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetCloudRoutersPaginationResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 offset: Optional[int] = None):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        """
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetCloudRoutersSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. Can be one of the following: [/name, /uuid, /state, /location/metroCode, /location/metroName, /package/code, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. Can be one of the following: [/name, /uuid, /state, /location/metroCode, /location/metroName, /package/code, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetConnectionASideResult(dict):
    def __init__(__self__, *,
                 access_point: Optional['outputs.GetConnectionASideAccessPointResult'] = None,
                 additional_infos: Optional[Sequence['outputs.GetConnectionASideAdditionalInfoResult']] = None,
                 service_token: Optional['outputs.GetConnectionASideServiceTokenResult'] = None):
        """
        :param 'GetConnectionASideAccessPointArgs' access_point: Point of access details
        :param Sequence['GetConnectionASideAdditionalInfoArgs'] additional_infos: Connection side additional information
        :param 'GetConnectionASideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.GetConnectionASideAccessPointResult']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.GetConnectionASideAdditionalInfoResult']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.GetConnectionASideServiceTokenResult']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionASideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionASideAccessPointAccountResult'],
                 location: 'outputs.GetConnectionASideAccessPointLocationResult',
                 provider_connection_id: str,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.GetConnectionASideAccessPointGatewayResult'] = None,
                 interface: Optional['outputs.GetConnectionASideAccessPointInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetConnectionASideAccessPointLinkProtocolResult'] = None,
                 network: Optional['outputs.GetConnectionASideAccessPointNetworkResult'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.GetConnectionASideAccessPointPortResult'] = None,
                 profile: Optional['outputs.GetConnectionASideAccessPointProfileResult'] = None,
                 router: Optional['outputs.GetConnectionASideAccessPointRouterResult'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.GetConnectionASideAccessPointVirtualDeviceResult'] = None):
        """
        :param Sequence['GetConnectionASideAccessPointAccountArgs'] accounts: Account
        :param 'GetConnectionASideAccessPointLocationArgs' location: Access point location
        :param str provider_connection_id: Provider assigned Connection Id
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'GetConnectionASideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'GetConnectionASideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'GetConnectionASideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'GetConnectionASideAccessPointNetworkArgs' network: network access point information
        :param str peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'GetConnectionASideAccessPointPortArgs' port: Port access point information
        :param 'GetConnectionASideAccessPointProfileArgs' profile: Service Profile
        :param 'GetConnectionASideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param str type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        :param 'GetConnectionASideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionASideAccessPointAccountResult']:
        """
        Account
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetConnectionASideAccessPointLocationResult':
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.GetConnectionASideAccessPointGatewayResult']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetConnectionASideAccessPointInterfaceResult']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetConnectionASideAccessPointLinkProtocolResult']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.GetConnectionASideAccessPointNetworkResult']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetConnectionASideAccessPointPortResult']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.GetConnectionASideAccessPointProfileResult']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.GetConnectionASideAccessPointRouterResult']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetConnectionASideAccessPointVirtualDeviceResult']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetConnectionASideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionASideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int,
                 type: Optional[str] = None):
        """
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionASideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionASideAccessPointNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionASideAccessPointPortRedundancyResult'],
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['GetConnectionASideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionASideAccessPointPortRedundancyResult']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionASideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetConnectionASideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        :param str type: Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        """
        pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionASideAccessPointProfileAccessPointTypeConfigResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionASideAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionASideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param str type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetConnectionNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetConnectionOperationResult(dict):
    def __init__(__self__, *,
                 equinix_status: str,
                 errors: Sequence['outputs.GetConnectionOperationErrorResult'],
                 provider_status: str):
        """
        :param str equinix_status: Connection status
        :param Sequence['GetConnectionOperationErrorArgs'] errors: Errors occurred
        :param str provider_status: Connection provider readiness status
        """
        pulumi.set(__self__, "equinix_status", equinix_status)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> str:
        """
        Connection status
        """
        return pulumi.get(self, "equinix_status")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetConnectionOperationErrorResult']:
        """
        Errors occurred
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> str:
        """
        Connection provider readiness status
        """
        return pulumi.get(self, "provider_status")


@pulumi.output_type
class GetConnectionOperationErrorResult(dict):
    def __init__(__self__, *,
                 additional_infos: Sequence['outputs.GetConnectionOperationErrorAdditionalInfoResult'],
                 correlation_id: str,
                 details: str,
                 error_code: str,
                 error_message: str,
                 help: str):
        """
        :param Sequence['GetConnectionOperationErrorAdditionalInfoArgs'] additional_infos: Pricing error additional Info
        :param str correlation_id: CorrelationId
        :param str details: Details
        :param str error_code: Error  code
        :param str error_message: Error Message
        :param str help: Help
        """
        pulumi.set(__self__, "additional_infos", additional_infos)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetConnectionOperationErrorAdditionalInfoResult']:
        """
        Pricing error additional Info
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        CorrelationId
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> str:
        """
        Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        Error  code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Error Message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> str:
        """
        Help
        """
        return pulumi.get(self, "help")


@pulumi.output_type
class GetConnectionOperationErrorAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 property: str,
                 reason: str):
        """
        :param str property: Property at which the error potentially occurred
        :param str reason: Reason for the error
        """
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the error
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property at which the error potentially occurred
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetConnectionOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        pulumi.set(__self__, "billing_tier", billing_tier)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class GetConnectionProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetConnectionRedundancyResult(dict):
    def __init__(__self__, *,
                 group: str,
                 priority: str):
        """
        :param str group: Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
        :param str priority: Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionRouteAggregationsDataResult(dict):
    def __init__(__self__, *,
                 attachment_status: str,
                 connection_id: str,
                 href: str,
                 route_aggregation_id: str,
                 type: str,
                 uuid: str):
        """
        :param str attachment_status: Status of the Route Aggregation Policy attachment lifecycle
        :param str connection_id: UUID of the Connection to attach this Route Aggregation to
        :param str href: URI to the attached Route Aggregation Policy on the Connection
        :param str route_aggregation_id: UUID of the Route Aggregation to attach this Connection to
        :param str type: Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        :param str uuid: Equinix Assigned ID for Route Aggregation Policy
        """
        pulumi.set(__self__, "attachment_status", attachment_status)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Status of the Route Aggregation Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        UUID of the Connection to attach this Route Aggregation to
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI to the attached Route Aggregation Policy on the Connection
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> str:
        """
        UUID of the Route Aggregation to attach this Connection to
        """
        return pulumi.get(self, "route_aggregation_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Aggregation Policy
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionRouteAggregationsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of connection route aggregations available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of connection route aggregations available to the user making the request
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetConnectionRouteFiltersDataResult(dict):
    def __init__(__self__, *,
                 attachment_status: str,
                 direction: str,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str attachment_status: Status of the Route Filter Policy attachment lifecycle
        :param str direction: Direction of the filtering of the attached Route Filter Policy
        :param str href: URI to the attached Route Filter Policy on the Connection
        :param str type: Route Filter Type. One of [ "BGP_IPv4_PREFIX_FILTER", "BGP_IPv6_PREFIX_FILTER" ]
        :param str uuid: Equinix Assigned ID for Route Filter Policy
        """
        pulumi.set(__self__, "attachment_status", attachment_status)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Status of the Route Filter Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Direction of the filtering of the attached Route Filter Policy
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI to the attached Route Filter Policy on the Connection
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Filter Type. One of [ "BGP_IPv4_PREFIX_FILTER", "BGP_IPv6_PREFIX_FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Filter Policy
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionRouteFiltersPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param str next: URL relative to the last item in the response.
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        :param str previous: URL relative to the first item in the response.
        :param int total: Total number of elements returned.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        URL relative to the last item in the response.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        URL relative to the first item in the response.
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of elements returned.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetConnectionZSideResult(dict):
    def __init__(__self__, *,
                 access_point: Optional['outputs.GetConnectionZSideAccessPointResult'] = None,
                 additional_infos: Optional[Sequence['outputs.GetConnectionZSideAdditionalInfoResult']] = None,
                 service_token: Optional['outputs.GetConnectionZSideServiceTokenResult'] = None):
        """
        :param 'GetConnectionZSideAccessPointArgs' access_point: Point of access details
        :param Sequence['GetConnectionZSideAdditionalInfoArgs'] additional_infos: Connection side additional information
        :param 'GetConnectionZSideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.GetConnectionZSideAccessPointResult']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.GetConnectionZSideAdditionalInfoResult']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.GetConnectionZSideServiceTokenResult']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionZSideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionZSideAccessPointAccountResult'],
                 location: 'outputs.GetConnectionZSideAccessPointLocationResult',
                 provider_connection_id: str,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.GetConnectionZSideAccessPointGatewayResult'] = None,
                 interface: Optional['outputs.GetConnectionZSideAccessPointInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetConnectionZSideAccessPointLinkProtocolResult'] = None,
                 network: Optional['outputs.GetConnectionZSideAccessPointNetworkResult'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.GetConnectionZSideAccessPointPortResult'] = None,
                 profile: Optional['outputs.GetConnectionZSideAccessPointProfileResult'] = None,
                 router: Optional['outputs.GetConnectionZSideAccessPointRouterResult'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.GetConnectionZSideAccessPointVirtualDeviceResult'] = None):
        """
        :param Sequence['GetConnectionZSideAccessPointAccountArgs'] accounts: Account
        :param 'GetConnectionZSideAccessPointLocationArgs' location: Access point location
        :param str provider_connection_id: Provider assigned Connection Id
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'GetConnectionZSideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'GetConnectionZSideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'GetConnectionZSideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'GetConnectionZSideAccessPointNetworkArgs' network: network access point information
        :param str peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'GetConnectionZSideAccessPointPortArgs' port: Port access point information
        :param 'GetConnectionZSideAccessPointProfileArgs' profile: Service Profile
        :param 'GetConnectionZSideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param str type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        :param 'GetConnectionZSideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionZSideAccessPointAccountResult']:
        """
        Account
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetConnectionZSideAccessPointLocationResult':
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.GetConnectionZSideAccessPointGatewayResult']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetConnectionZSideAccessPointInterfaceResult']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetConnectionZSideAccessPointLinkProtocolResult']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.GetConnectionZSideAccessPointNetworkResult']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetConnectionZSideAccessPointPortResult']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.GetConnectionZSideAccessPointProfileResult']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.GetConnectionZSideAccessPointRouterResult']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetConnectionZSideAccessPointVirtualDeviceResult']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetConnectionZSideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionZSideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int,
                 type: Optional[str] = None):
        """
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionZSideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionZSideAccessPointNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionZSideAccessPointPortRedundancyResult'],
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['GetConnectionZSideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionZSideAccessPointPortRedundancyResult']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetConnectionZSideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        :param str type: Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        """
        pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionZSideAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionZSideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param str type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataResult(dict):
    def __init__(__self__, *,
                 a_sides: Sequence['outputs.GetConnectionsDataASideResult'],
                 accounts: Sequence['outputs.GetConnectionsDataAccountResult'],
                 additional_infos: Sequence[Mapping[str, str]],
                 bandwidth: int,
                 change_logs: Sequence['outputs.GetConnectionsDataChangeLogResult'],
                 description: str,
                 direction: str,
                 href: str,
                 is_remote: bool,
                 name: str,
                 notifications: Sequence['outputs.GetConnectionsDataNotificationResult'],
                 operations: Sequence['outputs.GetConnectionsDataOperationResult'],
                 orders: Sequence['outputs.GetConnectionsDataOrderResult'],
                 projects: Sequence['outputs.GetConnectionsDataProjectResult'],
                 redundancies: Sequence['outputs.GetConnectionsDataRedundancyResult'],
                 state: str,
                 type: str,
                 uuid: str,
                 z_sides: Sequence['outputs.GetConnectionsDataZSideResult']):
        """
        :param Sequence['GetConnectionsDataASideArgs'] a_sides: Requester or Customer side connection configuration object of the multi-segment connection
        :param Sequence['GetConnectionsDataAccountArgs'] accounts: Customer account information that is associated with this connection
        :param Sequence[Mapping[str, str]] additional_infos: Connection additional information
        :param int bandwidth: Connection bandwidth in Mbps
        :param Sequence['GetConnectionsDataChangeLogArgs'] change_logs: Captures connection lifecycle change information
        :param str description: Customer-provided connection description
        :param str direction: Connection directionality from the requester point of view
        :param str href: Connection URI information
        :param bool is_remote: Connection property derived from access point locations
        :param str name: Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param Sequence['GetConnectionsDataNotificationArgs'] notifications: Preferences for notifications on connection configuration or status changes
        :param Sequence['GetConnectionsDataOperationArgs'] operations: Connection type-specific operational data
        :param Sequence['GetConnectionsDataOrderArgs'] orders: Order details
        :param Sequence['GetConnectionsDataProjectArgs'] projects: Project information
        :param Sequence['GetConnectionsDataRedundancyArgs'] redundancies: Connection Redundancy Configuration
        :param str state: Connection overall state
        :param str type: Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC, EC_VC
        :param str uuid: Equinix-assigned connection identifier
        :param Sequence['GetConnectionsDataZSideArgs'] z_sides: Destination or Provider side connection configuration object of the multi-segment connection
        """
        pulumi.set(__self__, "a_sides", a_sides)
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "additional_infos", additional_infos)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "is_remote", is_remote)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "orders", orders)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "z_sides", z_sides)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> Sequence['outputs.GetConnectionsDataASideResult']:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_sides")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionsDataAccountResult']:
        """
        Customer account information that is associated with this connection
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence[Mapping[str, str]]:
        """
        Connection additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetConnectionsDataChangeLogResult']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided connection description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Connection URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> bool:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetConnectionsDataNotificationResult']:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetConnectionsDataOperationResult']:
        """
        Connection type-specific operational data
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def orders(self) -> Sequence['outputs.GetConnectionsDataOrderResult']:
        """
        Order details
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetConnectionsDataProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionsDataRedundancyResult']:
        """
        Connection Redundancy Configuration
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Connection overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC, EC_VC
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned connection identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> Sequence['outputs.GetConnectionsDataZSideResult']:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_sides")


@pulumi.output_type
class GetConnectionsDataASideResult(dict):
    def __init__(__self__, *,
                 access_point: Optional['outputs.GetConnectionsDataASideAccessPointResult'] = None,
                 additional_infos: Optional[Sequence['outputs.GetConnectionsDataASideAdditionalInfoResult']] = None,
                 service_token: Optional['outputs.GetConnectionsDataASideServiceTokenResult'] = None):
        """
        :param 'GetConnectionsDataASideAccessPointArgs' access_point: Point of access details
        :param Sequence['GetConnectionsDataASideAdditionalInfoArgs'] additional_infos: Connection side additional information
        :param 'GetConnectionsDataASideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.GetConnectionsDataASideAccessPointResult']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.GetConnectionsDataASideAdditionalInfoResult']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.GetConnectionsDataASideServiceTokenResult']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionsDataASideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionsDataASideAccessPointAccountResult'],
                 location: 'outputs.GetConnectionsDataASideAccessPointLocationResult',
                 provider_connection_id: str,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.GetConnectionsDataASideAccessPointGatewayResult'] = None,
                 interface: Optional['outputs.GetConnectionsDataASideAccessPointInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetConnectionsDataASideAccessPointLinkProtocolResult'] = None,
                 network: Optional['outputs.GetConnectionsDataASideAccessPointNetworkResult'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.GetConnectionsDataASideAccessPointPortResult'] = None,
                 profile: Optional['outputs.GetConnectionsDataASideAccessPointProfileResult'] = None,
                 router: Optional['outputs.GetConnectionsDataASideAccessPointRouterResult'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.GetConnectionsDataASideAccessPointVirtualDeviceResult'] = None):
        """
        :param Sequence['GetConnectionsDataASideAccessPointAccountArgs'] accounts: Account
        :param 'GetConnectionsDataASideAccessPointLocationArgs' location: Access point location
        :param str provider_connection_id: Provider assigned Connection Id
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'GetConnectionsDataASideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'GetConnectionsDataASideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'GetConnectionsDataASideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'GetConnectionsDataASideAccessPointNetworkArgs' network: network access point information
        :param str peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'GetConnectionsDataASideAccessPointPortArgs' port: Port access point information
        :param 'GetConnectionsDataASideAccessPointProfileArgs' profile: Service Profile
        :param 'GetConnectionsDataASideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param str type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        :param 'GetConnectionsDataASideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionsDataASideAccessPointAccountResult']:
        """
        Account
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetConnectionsDataASideAccessPointLocationResult':
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.GetConnectionsDataASideAccessPointGatewayResult']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetConnectionsDataASideAccessPointInterfaceResult']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetConnectionsDataASideAccessPointLinkProtocolResult']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.GetConnectionsDataASideAccessPointNetworkResult']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetConnectionsDataASideAccessPointPortResult']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.GetConnectionsDataASideAccessPointProfileResult']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.GetConnectionsDataASideAccessPointRouterResult']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetConnectionsDataASideAccessPointVirtualDeviceResult']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetConnectionsDataASideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionsDataASideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int,
                 type: Optional[str] = None):
        """
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionsDataASideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionsDataASideAccessPointNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionsDataASideAccessPointPortRedundancyResult'],
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['GetConnectionsDataASideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionsDataASideAccessPointPortRedundancyResult']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionsDataASideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionsDataASideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetConnectionsDataASideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        :param str type: Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        """
        pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionsDataASideAccessPointProfileAccessPointTypeConfigResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataASideAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionsDataASideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param str type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionsDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetConnectionsDataNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetConnectionsDataOperationResult(dict):
    def __init__(__self__, *,
                 equinix_status: str,
                 errors: Sequence['outputs.GetConnectionsDataOperationErrorResult'],
                 provider_status: str):
        """
        :param str equinix_status: Connection status
        :param Sequence['GetConnectionsDataOperationErrorArgs'] errors: Errors occurred
        :param str provider_status: Connection provider readiness status
        """
        pulumi.set(__self__, "equinix_status", equinix_status)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> str:
        """
        Connection status
        """
        return pulumi.get(self, "equinix_status")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetConnectionsDataOperationErrorResult']:
        """
        Errors occurred
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> str:
        """
        Connection provider readiness status
        """
        return pulumi.get(self, "provider_status")


@pulumi.output_type
class GetConnectionsDataOperationErrorResult(dict):
    def __init__(__self__, *,
                 additional_infos: Sequence['outputs.GetConnectionsDataOperationErrorAdditionalInfoResult'],
                 correlation_id: str,
                 details: str,
                 error_code: str,
                 error_message: str,
                 help: str):
        """
        :param Sequence['GetConnectionsDataOperationErrorAdditionalInfoArgs'] additional_infos: Pricing error additional Info
        :param str correlation_id: CorrelationId
        :param str details: Details
        :param str error_code: Error  code
        :param str error_message: Error Message
        :param str help: Help
        """
        pulumi.set(__self__, "additional_infos", additional_infos)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetConnectionsDataOperationErrorAdditionalInfoResult']:
        """
        Pricing error additional Info
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        CorrelationId
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> str:
        """
        Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        Error  code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Error Message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> str:
        """
        Help
        """
        return pulumi.get(self, "help")


@pulumi.output_type
class GetConnectionsDataOperationErrorAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 property: str,
                 reason: str):
        """
        :param str property: Property at which the error potentially occurred
        :param str reason: Reason for the error
        """
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the error
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property at which the error potentially occurred
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetConnectionsDataOrderResult(dict):
    def __init__(__self__, *,
                 billing_tier: str,
                 order_id: str,
                 order_number: str,
                 purchase_order_number: str,
                 term_length: Optional[int] = None):
        """
        :param str billing_tier: Billing tier for connection bandwidth
        :param str order_id: Order Identification
        :param str order_number: Order Reference Number
        :param str purchase_order_number: Purchase order number
        :param int term_length: Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        pulumi.set(__self__, "billing_tier", billing_tier)
        pulumi.set(__self__, "order_id", order_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)
        if term_length is not None:
            pulumi.set(__self__, "term_length", term_length)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> str:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> str:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @property
    @pulumi.getter(name="termLength")
    def term_length(self) -> Optional[int]:
        """
        Term length in months; valid values are 1, 12, 24, 36 where 1 is the default value (for on-demand case)
        """
        return pulumi.get(self, "term_length")


@pulumi.output_type
class GetConnectionsDataProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetConnectionsDataRedundancyResult(dict):
    def __init__(__self__, *,
                 group: str,
                 priority: str):
        """
        :param str group: Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
        :param str priority: Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Connection priority in redundancy group - PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionsDataZSideResult(dict):
    def __init__(__self__, *,
                 access_point: Optional['outputs.GetConnectionsDataZSideAccessPointResult'] = None,
                 additional_infos: Optional[Sequence['outputs.GetConnectionsDataZSideAdditionalInfoResult']] = None,
                 service_token: Optional['outputs.GetConnectionsDataZSideServiceTokenResult'] = None):
        """
        :param 'GetConnectionsDataZSideAccessPointArgs' access_point: Point of access details
        :param Sequence['GetConnectionsDataZSideAdditionalInfoArgs'] additional_infos: Connection side additional information
        :param 'GetConnectionsDataZSideServiceTokenArgs' service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointResult']:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[Sequence['outputs.GetConnectionsDataZSideAdditionalInfoResult']]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional['outputs.GetConnectionsDataZSideServiceTokenResult']:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetConnectionsDataZSideAccessPointAccountResult'],
                 location: 'outputs.GetConnectionsDataZSideAccessPointLocationResult',
                 provider_connection_id: str,
                 authentication_key: Optional[str] = None,
                 gateway: Optional['outputs.GetConnectionsDataZSideAccessPointGatewayResult'] = None,
                 interface: Optional['outputs.GetConnectionsDataZSideAccessPointInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetConnectionsDataZSideAccessPointLinkProtocolResult'] = None,
                 network: Optional['outputs.GetConnectionsDataZSideAccessPointNetworkResult'] = None,
                 peering_type: Optional[str] = None,
                 port: Optional['outputs.GetConnectionsDataZSideAccessPointPortResult'] = None,
                 profile: Optional['outputs.GetConnectionsDataZSideAccessPointProfileResult'] = None,
                 router: Optional['outputs.GetConnectionsDataZSideAccessPointRouterResult'] = None,
                 seller_region: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_device: Optional['outputs.GetConnectionsDataZSideAccessPointVirtualDeviceResult'] = None):
        """
        :param Sequence['GetConnectionsDataZSideAccessPointAccountArgs'] accounts: Account
        :param 'GetConnectionsDataZSideAccessPointLocationArgs' location: Access point location
        :param str provider_connection_id: Provider assigned Connection Id
        :param str authentication_key: Authentication key for provider based connections or Metal-Fabric Integration connections
        :param 'GetConnectionsDataZSideAccessPointGatewayArgs' gateway: **Deprecated** `gateway` Use `router` attribute instead
        :param 'GetConnectionsDataZSideAccessPointInterfaceArgs' interface: Virtual device interface
        :param 'GetConnectionsDataZSideAccessPointLinkProtocolArgs' link_protocol: Connection link protocol
        :param 'GetConnectionsDataZSideAccessPointNetworkArgs' network: network access point information
        :param str peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param 'GetConnectionsDataZSideAccessPointPortArgs' port: Port access point information
        :param 'GetConnectionsDataZSideAccessPointProfileArgs' profile: Service Profile
        :param 'GetConnectionsDataZSideAccessPointRouterArgs' router: Cloud Router access point information that replaces `gateway`
        :param str seller_region: Access point seller region
        :param str type: Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        :param 'GetConnectionsDataZSideAccessPointVirtualDeviceArgs' virtual_device: Virtual device
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetConnectionsDataZSideAccessPointAccountResult']:
        """
        Account
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def location(self) -> 'outputs.GetConnectionsDataZSideAccessPointLocationResult':
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> str:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key for provider based connections or Metal-Fabric Integration connections
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    @_utilities.deprecated("""use router attribute instead; gateway is no longer a part of the supported backend""")
    def gateway(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointGatewayResult']:
        """
        **Deprecated** `gateway` Use `router` attribute instead
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointInterfaceResult']:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointLinkProtocolResult']:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointNetworkResult']:
        """
        network access point information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[str]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointPortResult']:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profile(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointProfileResult']:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def router(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointRouterResult']:
        """
        Cloud Router access point information that replaces `gateway`
        """
        return pulumi.get(self, "router")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetConnectionsDataZSideAccessPointVirtualDeviceResult']:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointGatewayResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointLinkProtocolResult(dict):
    def __init__(__self__, *,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int,
                 type: Optional[str] = None):
        """
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointPortResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: str,
                 redundancies: Sequence['outputs.GetConnectionsDataZSideAccessPointPortRedundancyResult'],
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param str name: Port name
        :param Sequence['GetConnectionsDataZSideAccessPointPortRedundancyArgs'] redundancies: Redundancy Information
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetConnectionsDataZSideAccessPointPortRedundancyResult']:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointProfileResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfigResult'],
                 description: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param str name: Customer-assigned service profile name
        :param str type: Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        """
        pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfigResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Equinix-assigned access point type config identifier
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned access point type config identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointRouterResult(dict):
    def __init__(__self__, *,
                 href: str,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str uuid: Equinix-assigned virtual gateway identifier
        """
        pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned virtual gateway identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAccessPointVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 href: str,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsDataZSideAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Additional information key
        :param str value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionsDataZSideServiceTokenResult(dict):
    def __init__(__self__, *,
                 description: str,
                 href: str,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        """
        :param str description: Service token description
        :param str href: An absolute URL that is the subject of the link's context
        :param str type: Token type - VC_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Service token description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Token type - VC_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str],
                 group: Optional[str] = None):
        """
        :param str operator: Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
        :param str property: Possible field names to use on filters. One of [/isRemote /name /uuid /type /geoScope /account/orgId /aSide/accessPoint/account/accountName /aSide/accessPoint/account/accountNumber /aSide/accessPoint/router/uuid /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /aSide/accessPoint/linkProtocol/vlanTagMin /aSide/accessPoint/linkProtocol/vlanTagMax /aSide/accessPoint/location/metroCode /aSide/accessPoint/location/metroName /aSide/accessPoint/name /aSide/accessPoint/port/uuid /aSide/accessPoint/port/name /aSide/accessPoint/type /aSide/accessPoint/virtualDevice/name /aSide/accessPoint/virtualDevice/uuid /aSide/serviceToken/uuid /change/status /operation/equinixStatus /operation/providerStatus /project/projectId /redundancy/group /redundancy/priority /zSide/accessPoint/account/accountName /zSide/accessPoint/authenticationKey /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/linkProtocol/vlanTagMin /zSide/accessPoint/linkProtocol/vlanTagMax /zSide/accessPoint/location/metroCode /zSide/accessPoint/location/metroName /zSide/accessPoint/name /zSide/accessPoint/port/uuid /zSide/accessPoint/network/uuid /zSide/accessPoint/port/name /zSide/accessPoint/profile/uuid /zSide/accessPoint/type /zSide/accessPoint/virtualDevice/name /zSide/accessPoint/virtualDevice/uuid /zSide/serviceToken/uuid /zSide/internetAccess/uuid *]
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        :param str group: Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Possible field names to use on filters. One of [/isRemote /name /uuid /type /geoScope /account/orgId /aSide/accessPoint/account/accountName /aSide/accessPoint/account/accountNumber /aSide/accessPoint/router/uuid /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /aSide/accessPoint/linkProtocol/vlanTagMin /aSide/accessPoint/linkProtocol/vlanTagMax /aSide/accessPoint/location/metroCode /aSide/accessPoint/location/metroName /aSide/accessPoint/name /aSide/accessPoint/port/uuid /aSide/accessPoint/port/name /aSide/accessPoint/type /aSide/accessPoint/virtualDevice/name /aSide/accessPoint/virtualDevice/uuid /aSide/serviceToken/uuid /change/status /operation/equinixStatus /operation/providerStatus /project/projectId /redundancy/group /redundancy/priority /zSide/accessPoint/account/accountName /zSide/accessPoint/authenticationKey /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/linkProtocol/vlanTagMin /zSide/accessPoint/linkProtocol/vlanTagMax /zSide/accessPoint/location/metroCode /zSide/accessPoint/location/metroName /zSide/accessPoint/name /zSide/accessPoint/port/uuid /zSide/accessPoint/network/uuid /zSide/accessPoint/port/name /zSide/accessPoint/profile/uuid /zSide/accessPoint/type /zSide/accessPoint/virtualDevice/name /zSide/accessPoint/virtualDevice/uuid /zSide/serviceToken/uuid /zSide/internetAccess/uuid *]
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetConnectionsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 offset: Optional[int] = None):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        """
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetConnectionsSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. One of [/name /direction /aSide/accessPoint/name /aSide/accessPoint/type /aSide/accessPoint/account/accountName /aSide/accessPoint/location/metroName /aSide/accessPoint/location/metroCode /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/name /zSide/accessPoint/type /zSide/accessPoint/account/accountName /zSide/accessPoint/location/metroName /zSide/accessPoint/location/metroCode /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/authenticationKey /bandwidth /geoScope /uuid /changeLog/createdDateTime /changeLog/updatedDateTime /operation/equinixStatus /operation/providerStatus /redundancy/priority]. Defaults to /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. One of [/name /direction /aSide/accessPoint/name /aSide/accessPoint/type /aSide/accessPoint/account/accountName /aSide/accessPoint/location/metroName /aSide/accessPoint/location/metroCode /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/name /zSide/accessPoint/type /zSide/accessPoint/account/accountName /zSide/accessPoint/location/metroName /zSide/accessPoint/location/metroCode /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/authenticationKey /bandwidth /geoScope /uuid /changeLog/createdDateTime /changeLog/updatedDateTime /operation/equinixStatus /operation/providerStatus /redundancy/priority]. Defaults to /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetMarketplaceSubscriptionEntitlementResult(dict):
    def __init__(__self__, *,
                 assets: Sequence['outputs.GetMarketplaceSubscriptionEntitlementAssetResult'],
                 quantity_available: int,
                 quantity_consumed: int,
                 quantity_entitled: int,
                 uuid: str):
        """
        :param Sequence['GetMarketplaceSubscriptionEntitlementAssetArgs'] assets: Asset information
        :param int quantity_available: Available Quantity
        :param int quantity_consumed: Consumed Quantity
        :param int quantity_entitled: Entitled Quantity
        :param str uuid: Subscription Entitlement Id
        """
        pulumi.set(__self__, "assets", assets)
        pulumi.set(__self__, "quantity_available", quantity_available)
        pulumi.set(__self__, "quantity_consumed", quantity_consumed)
        pulumi.set(__self__, "quantity_entitled", quantity_entitled)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def assets(self) -> Sequence['outputs.GetMarketplaceSubscriptionEntitlementAssetResult']:
        """
        Asset information
        """
        return pulumi.get(self, "assets")

    @property
    @pulumi.getter(name="quantityAvailable")
    def quantity_available(self) -> int:
        """
        Available Quantity
        """
        return pulumi.get(self, "quantity_available")

    @property
    @pulumi.getter(name="quantityConsumed")
    def quantity_consumed(self) -> int:
        """
        Consumed Quantity
        """
        return pulumi.get(self, "quantity_consumed")

    @property
    @pulumi.getter(name="quantityEntitled")
    def quantity_entitled(self) -> int:
        """
        Entitled Quantity
        """
        return pulumi.get(self, "quantity_entitled")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Subscription Entitlement Id
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetMarketplaceSubscriptionEntitlementAssetResult(dict):
    def __init__(__self__, *,
                 packages: Sequence['outputs.GetMarketplaceSubscriptionEntitlementAssetPackageResult'],
                 type: str):
        """
        :param Sequence['GetMarketplaceSubscriptionEntitlementAssetPackageArgs'] packages: Fabric Cloud Router Package Type
        :param str type: Defines the FCR type like; XF_ROUTER
        """
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetMarketplaceSubscriptionEntitlementAssetPackageResult']:
        """
        Fabric Cloud Router Package Type
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Defines the FCR type like; XF_ROUTER
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMarketplaceSubscriptionEntitlementAssetPackageResult(dict):
    def __init__(__self__, *,
                 code: str):
        """
        :param str code: Cloud Router package code
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Cloud Router package code
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class GetMarketplaceSubscriptionTrialResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: Marketplace Subscription Trial Enabled
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Marketplace Subscription Trial Enabled
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetMetroConnectedMetroResult(dict):
    def __init__(__self__, *,
                 avg_latency: float,
                 code: str,
                 href: str,
                 remote_vc_bandwidth_max: int):
        pulumi.set(__self__, "avg_latency", avg_latency)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "remote_vc_bandwidth_max", remote_vc_bandwidth_max)

    @property
    @pulumi.getter(name="avgLatency")
    def avg_latency(self) -> float:
        return pulumi.get(self, "avg_latency")

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="remoteVcBandwidthMax")
    def remote_vc_bandwidth_max(self) -> int:
        return pulumi.get(self, "remote_vc_bandwidth_max")


@pulumi.output_type
class GetMetroGeoCoordinatesResult(dict):
    def __init__(__self__, *,
                 latitude: float,
                 longitude: float):
        """
        :param float latitude: Latitude of the Metro
        :param float longitude: Longitude of the Metro
        """
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Latitude of the Metro
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Longitude of the Metro
        """
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetMetrosDataResult(dict):
    def __init__(__self__, *,
                 code: str,
                 connected_metros: Sequence['outputs.GetMetrosDataConnectedMetroResult'],
                 equinix_asn: int,
                 geo_coordinates: 'outputs.GetMetrosDataGeoCoordinatesResult',
                 geo_scopes: Sequence[str],
                 href: str,
                 local_vc_bandwidth_max: int,
                 name: str,
                 region: str,
                 type: str):
        """
        :param str code: Code assigned to an Equinix IBX data center in a specified metropolitan area
        :param Sequence['GetMetrosDataConnectedMetroArgs'] connected_metros: Arrays of objects containing latency data for the specified metro
        :param int equinix_asn: Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
        :param 'GetMetrosDataGeoCoordinatesArgs' geo_coordinates: Geographic location data of Fabric Metro
        :param Sequence[str] geo_scopes: List of supported geographic boundaries of a Fabric Metro. Example values: CANADA, CONUS.
        :param str href: The canonical URL at which the resource resides
        :param int local_vc_bandwidth_max: This field holds Max Connection speed within the metro.
        :param str name: Name of the region in which the data center is located
        :param str region: Board geographical area in which the data center is located
        :param str type: Indicator of a fabric metro
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "connected_metros", connected_metros)
        pulumi.set(__self__, "equinix_asn", equinix_asn)
        pulumi.set(__self__, "geo_coordinates", geo_coordinates)
        pulumi.set(__self__, "geo_scopes", geo_scopes)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "local_vc_bandwidth_max", local_vc_bandwidth_max)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code assigned to an Equinix IBX data center in a specified metropolitan area
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="connectedMetros")
    def connected_metros(self) -> Sequence['outputs.GetMetrosDataConnectedMetroResult']:
        """
        Arrays of objects containing latency data for the specified metro
        """
        return pulumi.get(self, "connected_metros")

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> int:
        """
        Autonomous system number (ASN) for a specified Fabric metro. The ASN is a unique identifier that carries the network routing protocol and exchanges that data with other internal systems via border gateway protocol.
        """
        return pulumi.get(self, "equinix_asn")

    @property
    @pulumi.getter(name="geoCoordinates")
    def geo_coordinates(self) -> 'outputs.GetMetrosDataGeoCoordinatesResult':
        """
        Geographic location data of Fabric Metro
        """
        return pulumi.get(self, "geo_coordinates")

    @property
    @pulumi.getter(name="geoScopes")
    def geo_scopes(self) -> Sequence[str]:
        """
        List of supported geographic boundaries of a Fabric Metro. Example values: CANADA, CONUS.
        """
        return pulumi.get(self, "geo_scopes")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The canonical URL at which the resource resides
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="localVcBandwidthMax")
    def local_vc_bandwidth_max(self) -> int:
        """
        This field holds Max Connection speed within the metro.
        """
        return pulumi.get(self, "local_vc_bandwidth_max")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the region in which the data center is located
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Board geographical area in which the data center is located
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Indicator of a fabric metro
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMetrosDataConnectedMetroResult(dict):
    def __init__(__self__, *,
                 avg_latency: float,
                 code: str,
                 href: str,
                 remote_vc_bandwidth_max: int):
        pulumi.set(__self__, "avg_latency", avg_latency)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "remote_vc_bandwidth_max", remote_vc_bandwidth_max)

    @property
    @pulumi.getter(name="avgLatency")
    def avg_latency(self) -> float:
        return pulumi.get(self, "avg_latency")

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="remoteVcBandwidthMax")
    def remote_vc_bandwidth_max(self) -> int:
        return pulumi.get(self, "remote_vc_bandwidth_max")


@pulumi.output_type
class GetMetrosDataGeoCoordinatesResult(dict):
    def __init__(__self__, *,
                 latitude: float,
                 longitude: float):
        """
        :param float latitude: Latitude of the Metro
        :param float longitude: Longitude of the Metro
        """
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Latitude of the Metro
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Longitude of the Metro
        """
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetMetrosPaginationResult(dict):
    def __init__(__self__, *,
                 next: str,
                 previous: str,
                 total: int,
                 limit: Optional[int] = None,
                 offset: Optional[int] = None):
        """
        :param str next: URL relative to the next item in the response.
        :param str previous: URL relative to the previous item in the response.
        :param int total: The total number of metro returned
        :param int limit: Maximum number of search results returned per page.
        :param int offset: Index of the first item returned in the response.
        """
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        URL relative to the next item in the response.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        URL relative to the previous item in the response.
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of metro returned
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Maximum number of search results returned per page.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        Index of the first item returned in the response.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetNetworkChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Absolute URL that returns the details of the given change.
               Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        :param str type: Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        :param str uuid: Asset change request identifier.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Absolute URL that returns the details of the given change.
        Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Asset change request identifier.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworkChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetNetworkLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetNetworkNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetNetworkOperationResult(dict):
    def __init__(__self__, *,
                 equinix_status: str):
        """
        :param str equinix_status: Progress towards provisioning a given asset.
        """
        pulumi.set(__self__, "equinix_status", equinix_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> str:
        """
        Progress towards provisioning a given asset.
        """
        return pulumi.get(self, "equinix_status")


@pulumi.output_type
class GetNetworkProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Customer project identifier
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Customer project identifier
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetNetworksDataResult(dict):
    def __init__(__self__, *,
                 change_logs: Sequence['outputs.GetNetworksDataChangeLogResult'],
                 changes: Sequence['outputs.GetNetworksDataChangeResult'],
                 connections_count: int,
                 href: str,
                 locations: Sequence['outputs.GetNetworksDataLocationResult'],
                 name: str,
                 notifications: Sequence['outputs.GetNetworksDataNotificationResult'],
                 operations: Sequence['outputs.GetNetworksDataOperationResult'],
                 projects: Sequence['outputs.GetNetworksDataProjectResult'],
                 scope: str,
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetNetworksDataChangeLogArgs'] change_logs: A permanent record of asset creation, modification, or deletion
        :param Sequence['GetNetworksDataChangeArgs'] changes: Information on asset change operation
        :param int connections_count: Number of connections associated with this network
        :param str href: Fabric Network URI information
        :param Sequence['GetNetworksDataLocationArgs'] locations: Fabric Network location
        :param str name: Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param Sequence['GetNetworksDataNotificationArgs'] notifications: Preferences for notifications on Fabric Network configuration or status changes
        :param Sequence['GetNetworksDataOperationArgs'] operations: Network operation information that is associated with this Fabric Network
        :param Sequence['GetNetworksDataProjectArgs'] projects: Fabric Network project
        :param str scope: Fabric Network scope
        :param str state: Fabric Network overall state
        :param str type: Supported Network types - EVPLAN, EPLAN, IPWAN
        :param str uuid: Equinix-assigned network identifier
        """
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "changes", changes)
        pulumi.set(__self__, "connections_count", connections_count)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetNetworksDataChangeLogResult']:
        """
        A permanent record of asset creation, modification, or deletion
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetNetworksDataChangeResult']:
        """
        Information on asset change operation
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        """
        Number of connections associated with this network
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Fabric Network URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetNetworksDataLocationResult']:
        """
        Fabric Network location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetNetworksDataNotificationResult']:
        """
        Preferences for notifications on Fabric Network configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetNetworksDataOperationResult']:
        """
        Network operation information that is associated with this Fabric Network
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetNetworksDataProjectResult']:
        """
        Fabric Network project
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Fabric Network scope
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Fabric Network overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Supported Network types - EVPLAN, EPLAN, IPWAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworksDataChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Absolute URL that returns the details of the given change.
               Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        :param str type: Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        :param str uuid: Asset change request identifier.
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Absolute URL that returns the details of the given change.
        Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Asset change request identifier.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetNetworksDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetNetworksDataLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetNetworksDataNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetNetworksDataOperationResult(dict):
    def __init__(__self__, *,
                 equinix_status: str):
        """
        :param str equinix_status: Progress towards provisioning a given asset.
        """
        pulumi.set(__self__, "equinix_status", equinix_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> str:
        """
        Progress towards provisioning a given asset.
        """
        return pulumi.get(self, "equinix_status")


@pulumi.output_type
class GetNetworksDataProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Customer project identifier
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Customer project identifier
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetNetworksFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str],
                 group: Optional[str] = None):
        """
        :param str operator: Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, ILIKE, NOT ILIKE, IN, NOT IN]
        :param str property: Possible field names to use on filters. One of [/name /uuid /scope /type /operation/equinixStatus /location/region /project/projectId /account/globalCustId /account/orgId /deletedDate /_*]
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        :param str group: Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, ILIKE, NOT ILIKE, IN, NOT IN]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Possible field names to use on filters. One of [/name /uuid /scope /type /operation/equinixStatus /location/region /project/projectId /account/globalCustId /account/orgId /deletedDate /_*]
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetNetworksPaginationResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 offset: Optional[int] = None):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        """
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetNetworksSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. One of [/name /uuid /scope /operation/equinixStatus /location/region /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. One of [/name /uuid /scope /operation/equinixStatus /location/region /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetPortAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetPortChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPortDeviceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 redundancies: Sequence['outputs.GetPortDeviceRedundancyResult']):
        """
        :param str name: Port name
        :param Sequence['GetPortDeviceRedundancyArgs'] redundancies: Port device redundancy
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortDeviceRedundancyResult']:
        """
        Port device redundancy
        """
        return pulumi.get(self, "redundancies")


@pulumi.output_type
class GetPortDeviceRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortEncapsulationResult(dict):
    def __init__(__self__, *,
                 tag_protocol_id: str,
                 type: str):
        """
        :param str tag_protocol_id: Port encapsulation Tag Protocol Identifier
        :param str type: Port encapsulation protocol type
        """
        pulumi.set(__self__, "tag_protocol_id", tag_protocol_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="tagProtocolId")
    def tag_protocol_id(self) -> str:
        """
        Port encapsulation Tag Protocol Identifier
        """
        return pulumi.get(self, "tag_protocol_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Port encapsulation protocol type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetPortOperationResult(dict):
    def __init__(__self__, *,
                 connection_count: int,
                 op_status_changed_at: str,
                 operational_status: str):
        """
        :param int connection_count: Total number of current connections
        :param str op_status_changed_at: Date and time at which port availability changed
        :param str operational_status: Port operation status
        """
        pulumi.set(__self__, "connection_count", connection_count)
        pulumi.set(__self__, "op_status_changed_at", op_status_changed_at)
        pulumi.set(__self__, "operational_status", operational_status)

    @property
    @pulumi.getter(name="connectionCount")
    def connection_count(self) -> int:
        """
        Total number of current connections
        """
        return pulumi.get(self, "connection_count")

    @property
    @pulumi.getter(name="opStatusChangedAt")
    def op_status_changed_at(self) -> str:
        """
        Date and time at which port availability changed
        """
        return pulumi.get(self, "op_status_changed_at")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        """
        Port operation status
        """
        return pulumi.get(self, "operational_status")


@pulumi.output_type
class GetPortRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsDatumResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetPortsDatumAccountResult'],
                 available_bandwidth: int,
                 bandwidth: int,
                 change_logs: Sequence['outputs.GetPortsDatumChangeLogResult'],
                 description: str,
                 devices: Sequence['outputs.GetPortsDatumDeviceResult'],
                 encapsulations: Sequence['outputs.GetPortsDatumEncapsulationResult'],
                 href: str,
                 lag_enabled: bool,
                 locations: Sequence['outputs.GetPortsDatumLocationResult'],
                 name: str,
                 operations: Sequence['outputs.GetPortsDatumOperationResult'],
                 redundancies: Sequence['outputs.GetPortsDatumRedundancyResult'],
                 service_type: str,
                 state: str,
                 type: str,
                 used_bandwidth: int,
                 uuid: str):
        """
        :param Sequence['GetPortsDatumAccountArgs'] accounts: Customer account information that is associated with this port
        :param int available_bandwidth: Port available bandwidth in Mbps
        :param int bandwidth: Port bandwidth in Mbps
        :param Sequence['GetPortsDatumChangeLogArgs'] change_logs: Captures port lifecycle change information
        :param str description: Port description
        :param Sequence['GetPortsDatumDeviceArgs'] devices: Port device
        :param Sequence['GetPortsDatumEncapsulationArgs'] encapsulations: Port encapsulation protocol
        :param str href: Port URI information
        :param bool lag_enabled: Port Lag
        :param Sequence['GetPortsDatumLocationArgs'] locations: Port location information
        :param str name: Port name
        :param Sequence['GetPortsDatumOperationArgs'] operations: Port specific operational data
        :param Sequence['GetPortsDatumRedundancyArgs'] redundancies: Port redundancy information
        :param str service_type: Port service type
        :param str state: Port state
        :param str type: Port type
        :param int used_bandwidth: Port used bandwidth in Mbps
        :param str uuid: Equinix-assigned port identifier
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "available_bandwidth", available_bandwidth)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "encapsulations", encapsulations)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "lag_enabled", lag_enabled)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "redundancies", redundancies)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used_bandwidth", used_bandwidth)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetPortsDatumAccountResult']:
        """
        Customer account information that is associated with this port
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="availableBandwidth")
    def available_bandwidth(self) -> int:
        """
        Port available bandwidth in Mbps
        """
        return pulumi.get(self, "available_bandwidth")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetPortsDatumChangeLogResult']:
        """
        Captures port lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Port description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPortsDatumDeviceResult']:
        """
        Port device
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def encapsulations(self) -> Sequence['outputs.GetPortsDatumEncapsulationResult']:
        """
        Port encapsulation protocol
        """
        return pulumi.get(self, "encapsulations")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Port URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="lagEnabled")
    def lag_enabled(self) -> bool:
        """
        Port Lag
        """
        return pulumi.get(self, "lag_enabled")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetPortsDatumLocationResult']:
        """
        Port location information
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetPortsDatumOperationResult']:
        """
        Port specific operational data
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortsDatumRedundancyResult']:
        """
        Port redundancy information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Port service type
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Port state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Port type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usedBandwidth")
    def used_bandwidth(self) -> int:
        """
        Port used bandwidth in Mbps
        """
        return pulumi.get(self, "used_bandwidth")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPortsDatumAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetPortsDatumChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPortsDatumDeviceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 redundancies: Sequence['outputs.GetPortsDatumDeviceRedundancyResult']):
        """
        :param str name: Port name
        :param Sequence['GetPortsDatumDeviceRedundancyArgs'] redundancies: Port device redundancy
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redundancies", redundancies)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundancies(self) -> Sequence['outputs.GetPortsDatumDeviceRedundancyResult']:
        """
        Port device redundancy
        """
        return pulumi.get(self, "redundancies")


@pulumi.output_type
class GetPortsDatumDeviceRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsDatumEncapsulationResult(dict):
    def __init__(__self__, *,
                 tag_protocol_id: str,
                 type: str):
        """
        :param str tag_protocol_id: Port encapsulation Tag Protocol Identifier
        :param str type: Port encapsulation protocol type
        """
        pulumi.set(__self__, "tag_protocol_id", tag_protocol_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="tagProtocolId")
    def tag_protocol_id(self) -> str:
        """
        Port encapsulation Tag Protocol Identifier
        """
        return pulumi.get(self, "tag_protocol_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Port encapsulation protocol type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPortsDatumLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetPortsDatumOperationResult(dict):
    def __init__(__self__, *,
                 connection_count: int,
                 op_status_changed_at: str,
                 operational_status: str):
        """
        :param int connection_count: Total number of current connections
        :param str op_status_changed_at: Date and time at which port availability changed
        :param str operational_status: Port operation status
        """
        pulumi.set(__self__, "connection_count", connection_count)
        pulumi.set(__self__, "op_status_changed_at", op_status_changed_at)
        pulumi.set(__self__, "operational_status", operational_status)

    @property
    @pulumi.getter(name="connectionCount")
    def connection_count(self) -> int:
        """
        Total number of current connections
        """
        return pulumi.get(self, "connection_count")

    @property
    @pulumi.getter(name="opStatusChangedAt")
    def op_status_changed_at(self) -> str:
        """
        Date and time at which port availability changed
        """
        return pulumi.get(self, "op_status_changed_at")

    @property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> str:
        """
        Port operation status
        """
        return pulumi.get(self, "operational_status")


@pulumi.output_type
class GetPortsDatumRedundancyResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 group: str,
                 priority: str):
        """
        :param bool enabled: Access point redundancy
        :param str group: Port redundancy group
        :param str priority: Priority type-Primary or Secondary
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Access point redundancy
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Port redundancy group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Priority type-Primary or Secondary
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPortsFilterResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Query Parameter to Get Ports By Name
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Query Parameter to Get Ports By Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPrecisionTimeServiceAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 reseller_account_name: str,
                 reseller_account_number: int,
                 reseller_org_id: int,
                 reseller_ucm_id: str,
                 ucm_id: str):
        """
        :param str account_name: Account Name
        :param int account_number: Equinix Account Number
        :param str global_cust_id: Global Customer Id
        :param str global_org_id: Customer organization naidentifierme
        :param str global_organization_name: Global organization name
        :param int org_id: Customer organization identifier
        :param str organization_name: Customer organization name
        :param str reseller_account_name: Reseller account name
        :param int reseller_account_number: Reseller account number
        :param int reseller_org_id: Reseller customer organization identifier
        :param str reseller_ucm_id: Reseller account ucmId
        :param str ucm_id: Global organization name
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "reseller_account_name", reseller_account_name)
        pulumi.set(__self__, "reseller_account_number", reseller_account_number)
        pulumi.set(__self__, "reseller_org_id", reseller_org_id)
        pulumi.set(__self__, "reseller_ucm_id", reseller_ucm_id)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix Account Number
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Global Customer Id
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Customer organization naidentifierme
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Global organization name
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Customer organization identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Customer organization name
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="resellerAccountName")
    def reseller_account_name(self) -> str:
        """
        Reseller account name
        """
        return pulumi.get(self, "reseller_account_name")

    @property
    @pulumi.getter(name="resellerAccountNumber")
    def reseller_account_number(self) -> int:
        """
        Reseller account number
        """
        return pulumi.get(self, "reseller_account_number")

    @property
    @pulumi.getter(name="resellerOrgId")
    def reseller_org_id(self) -> int:
        """
        Reseller customer organization identifier
        """
        return pulumi.get(self, "reseller_org_id")

    @property
    @pulumi.getter(name="resellerUcmId")
    def reseller_ucm_id(self) -> str:
        """
        Reseller account ucmId
        """
        return pulumi.get(self, "reseller_ucm_id")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Global organization name
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetPrecisionTimeServiceChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPrecisionTimeServiceConnectionResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Link to the Equinix Fabric Connection associated with the Precision Time Service
        :param str type: Type of the Equinix Fabric Connection associated with the Precision Time Service
        :param str uuid: Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Link to the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPrecisionTimeServiceIpv4Result(dict):
    def __init__(__self__, *,
                 default_gateway: str,
                 network_mask: str,
                 primary: str,
                 secondary: str):
        """
        :param str default_gateway: IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        :param str network_mask: IPv4 address that defines the range of consecutive subnets in the network.
        :param str primary: IPv4 address for the Primary Timing Master Server.
        :param str secondary: IPv4 address for the Secondary Timing Master Server.
        """
        pulumi.set(__self__, "default_gateway", default_gateway)
        pulumi.set(__self__, "network_mask", network_mask)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> str:
        """
        IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="networkMask")
    def network_mask(self) -> str:
        """
        IPv4 address that defines the range of consecutive subnets in the network.
        """
        return pulumi.get(self, "network_mask")

    @property
    @pulumi.getter
    def primary(self) -> str:
        """
        IPv4 address for the Primary Timing Master Server.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> str:
        """
        IPv4 address for the Secondary Timing Master Server.
        """
        return pulumi.get(self, "secondary")


@pulumi.output_type
class GetPrecisionTimeServiceNtpAdvancedConfigurationResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 key_number: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str key: The plaintext authentication key. For ASCII type, the key\\
               \\ must contain printable ASCII characters, range 10-20 characters. For\\
               \\ HEX type, range should be 10-40 characters
        :param int key_number: The authentication Key ID
        :param str type: md5 Authentication type
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_number is not None:
            pulumi.set(__self__, "key_number", key_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The plaintext authentication key. For ASCII type, the key\\
        \\ must contain printable ASCII characters, range 10-20 characters. For\\
        \\ HEX type, range should be 10-40 characters
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyNumber")
    def key_number(self) -> Optional[int]:
        """
        The authentication Key ID
        """
        return pulumi.get(self, "key_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        md5 Authentication type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrecisionTimeServiceOrderResult(dict):
    def __init__(__self__, *,
                 customer_reference_number: str,
                 order_number: str,
                 purchase_order_number: str):
        """
        :param str customer_reference_number: Customer reference number
        :param str order_number: Order reference number
        :param str purchase_order_number: Purchase order number
        """
        pulumi.set(__self__, "customer_reference_number", customer_reference_number)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="customerReferenceNumber")
    def customer_reference_number(self) -> str:
        """
        Customer reference number
        """
        return pulumi.get(self, "customer_reference_number")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order reference number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class GetPrecisionTimeServicePackageResult(dict):
    def __init__(__self__, *,
                 code: str,
                 href: str):
        """
        :param str code: Time Precision Package Code for the desired billing package
        :param str href: Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Time Precision Package Code for the desired billing package
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        return pulumi.get(self, "href")


@pulumi.output_type
class GetPrecisionTimeServicePrecisionTimePriceResult(dict):
    def __init__(__self__, *,
                 charges: Sequence['outputs.GetPrecisionTimeServicePrecisionTimePriceChargeResult'],
                 currency: str):
        """
        :param Sequence['GetPrecisionTimeServicePrecisionTimePriceChargeArgs'] charges: offering price charge
        :param str currency: Offering price currency
        """
        pulumi.set(__self__, "charges", charges)
        pulumi.set(__self__, "currency", currency)

    @property
    @pulumi.getter
    def charges(self) -> Sequence['outputs.GetPrecisionTimeServicePrecisionTimePriceChargeResult']:
        """
        offering price charge
        """
        return pulumi.get(self, "charges")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Offering price currency
        """
        return pulumi.get(self, "currency")


@pulumi.output_type
class GetPrecisionTimeServicePrecisionTimePriceChargeResult(dict):
    def __init__(__self__, *,
                 price: float,
                 type: str):
        """
        :param float price: Offering price
        :param str type: Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def price(self) -> float:
        """
        Offering price
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrecisionTimeServiceProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetPrecisionTimeServicePtpAdvancedConfigurationResult(dict):
    def __init__(__self__, *,
                 domain: Optional[int] = None,
                 grant_time: Optional[int] = None,
                 log_announce_interval: Optional[int] = None,
                 log_delay_req_interval: Optional[int] = None,
                 log_sync_interval: Optional[int] = None,
                 priority1: Optional[int] = None,
                 priority2: Optional[int] = None,
                 time_scale: Optional[str] = None,
                 transport_mode: Optional[str] = None):
        """
        :param int domain: The PTP domain value
        :param int grant_time: Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        :param int log_announce_interval: Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        :param int log_delay_req_interval: Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int log_sync_interval: Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int priority1: The priority1 value determines the best primary clock, Lower value indicates higher priority
        :param int priority2: The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        :param str time_scale: Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        :param str transport_mode: ptp transport mode
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if grant_time is not None:
            pulumi.set(__self__, "grant_time", grant_time)
        if log_announce_interval is not None:
            pulumi.set(__self__, "log_announce_interval", log_announce_interval)
        if log_delay_req_interval is not None:
            pulumi.set(__self__, "log_delay_req_interval", log_delay_req_interval)
        if log_sync_interval is not None:
            pulumi.set(__self__, "log_sync_interval", log_sync_interval)
        if priority1 is not None:
            pulumi.set(__self__, "priority1", priority1)
        if priority2 is not None:
            pulumi.set(__self__, "priority2", priority2)
        if time_scale is not None:
            pulumi.set(__self__, "time_scale", time_scale)
        if transport_mode is not None:
            pulumi.set(__self__, "transport_mode", transport_mode)

    @property
    @pulumi.getter
    def domain(self) -> Optional[int]:
        """
        The PTP domain value
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="grantTime")
    def grant_time(self) -> Optional[int]:
        """
        Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        """
        return pulumi.get(self, "grant_time")

    @property
    @pulumi.getter(name="logAnnounceInterval")
    def log_announce_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        """
        return pulumi.get(self, "log_announce_interval")

    @property
    @pulumi.getter(name="logDelayReqInterval")
    def log_delay_req_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_delay_req_interval")

    @property
    @pulumi.getter(name="logSyncInterval")
    def log_sync_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_sync_interval")

    @property
    @pulumi.getter
    def priority1(self) -> Optional[int]:
        """
        The priority1 value determines the best primary clock, Lower value indicates higher priority
        """
        return pulumi.get(self, "priority1")

    @property
    @pulumi.getter
    def priority2(self) -> Optional[int]:
        """
        The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        """
        return pulumi.get(self, "priority2")

    @property
    @pulumi.getter(name="timeScale")
    def time_scale(self) -> Optional[str]:
        """
        Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        """
        return pulumi.get(self, "time_scale")

    @property
    @pulumi.getter(name="transportMode")
    def transport_mode(self) -> Optional[str]:
        """
        ptp transport mode
        """
        return pulumi.get(self, "transport_mode")


@pulumi.output_type
class GetPrecisionTimeServicesDataResult(dict):
    def __init__(__self__, *,
                 account: 'outputs.GetPrecisionTimeServicesDataAccountResult',
                 change_log: 'outputs.GetPrecisionTimeServicesDataChangeLogResult',
                 connections: Sequence['outputs.GetPrecisionTimeServicesDataConnectionResult'],
                 href: str,
                 ipv4: 'outputs.GetPrecisionTimeServicesDataIpv4Result',
                 name: str,
                 order: 'outputs.GetPrecisionTimeServicesDataOrderResult',
                 package: 'outputs.GetPrecisionTimeServicesDataPackageResult',
                 precision_time_price: 'outputs.GetPrecisionTimeServicesDataPrecisionTimePriceResult',
                 state: str,
                 type: str,
                 uuid: str,
                 ntp_advanced_configurations: Optional[Sequence['outputs.GetPrecisionTimeServicesDataNtpAdvancedConfigurationResult']] = None,
                 project: Optional['outputs.GetPrecisionTimeServicesDataProjectResult'] = None,
                 ptp_advanced_configuration: Optional['outputs.GetPrecisionTimeServicesDataPtpAdvancedConfigurationResult'] = None):
        """
        :param 'GetPrecisionTimeServicesDataAccountArgs' account: Equinix User Account associated with Precision Time Service
        :param 'GetPrecisionTimeServicesDataChangeLogArgs' change_log: Details of the last change on the route aggregation resource
        :param Sequence['GetPrecisionTimeServicesDataConnectionArgs'] connections: An array of objects with unique identifiers of connections.
        :param str href: Equinix generated Portal link for the created Precision Time Service
        :param 'GetPrecisionTimeServicesDataIpv4Args' ipv4: An object that has Network IP Configurations for Timing Master Servers.
        :param str name: Name of Precision Time Service. Applicable values: Maximum: 24 characters; Allowed characters: alpha-numeric, hyphens ('-') and underscores ('_')
        :param 'GetPrecisionTimeServicesDataOrderArgs' order: Precision Time Order
        :param 'GetPrecisionTimeServicesDataPackageArgs' package: Precision Time Service Package Details
        :param 'GetPrecisionTimeServicesDataPrecisionTimePriceArgs' precision_time_price: Precision Time Service Price
        :param str state: Indicator of the state of this Precision Time Service
        :param str type: Choose type of Precision Time Service
        :param str uuid: Equinix generated id for the Precision Time Service
        :param Sequence['GetPrecisionTimeServicesDataNtpAdvancedConfigurationArgs'] ntp_advanced_configurations: NTP Advanced configuration
        :param 'GetPrecisionTimeServicesDataProjectArgs' project: Equinix Project attribute object
        :param 'GetPrecisionTimeServicesDataPtpAdvancedConfigurationArgs' ptp_advanced_configuration: PTP Advanced Configuration
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "precision_time_price", precision_time_price)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if ntp_advanced_configurations is not None:
            pulumi.set(__self__, "ntp_advanced_configurations", ntp_advanced_configurations)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if ptp_advanced_configuration is not None:
            pulumi.set(__self__, "ptp_advanced_configuration", ptp_advanced_configuration)

    @property
    @pulumi.getter
    def account(self) -> 'outputs.GetPrecisionTimeServicesDataAccountResult':
        """
        Equinix User Account associated with Precision Time Service
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetPrecisionTimeServicesDataChangeLogResult':
        """
        Details of the last change on the route aggregation resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetPrecisionTimeServicesDataConnectionResult']:
        """
        An array of objects with unique identifiers of connections.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix generated Portal link for the created Precision Time Service
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetPrecisionTimeServicesDataIpv4Result':
        """
        An object that has Network IP Configurations for Timing Master Servers.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Precision Time Service. Applicable values: Maximum: 24 characters; Allowed characters: alpha-numeric, hyphens ('-') and underscores ('_')
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> 'outputs.GetPrecisionTimeServicesDataOrderResult':
        """
        Precision Time Order
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def package(self) -> 'outputs.GetPrecisionTimeServicesDataPackageResult':
        """
        Precision Time Service Package Details
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter(name="precisionTimePrice")
    def precision_time_price(self) -> 'outputs.GetPrecisionTimeServicesDataPrecisionTimePriceResult':
        """
        Precision Time Service Price
        """
        return pulumi.get(self, "precision_time_price")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Indicator of the state of this Precision Time Service
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Choose type of Precision Time Service
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix generated id for the Precision Time Service
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="ntpAdvancedConfigurations")
    def ntp_advanced_configurations(self) -> Optional[Sequence['outputs.GetPrecisionTimeServicesDataNtpAdvancedConfigurationResult']]:
        """
        NTP Advanced configuration
        """
        return pulumi.get(self, "ntp_advanced_configurations")

    @property
    @pulumi.getter
    def project(self) -> Optional['outputs.GetPrecisionTimeServicesDataProjectResult']:
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="ptpAdvancedConfiguration")
    def ptp_advanced_configuration(self) -> Optional['outputs.GetPrecisionTimeServicesDataPtpAdvancedConfigurationResult']:
        """
        PTP Advanced Configuration
        """
        return pulumi.get(self, "ptp_advanced_configuration")


@pulumi.output_type
class GetPrecisionTimeServicesDataAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 reseller_account_name: str,
                 reseller_account_number: int,
                 reseller_org_id: int,
                 reseller_ucm_id: str,
                 ucm_id: str):
        """
        :param str account_name: Account Name
        :param int account_number: Equinix Account Number
        :param str global_cust_id: Global Customer Id
        :param str global_org_id: Customer organization naidentifierme
        :param str global_organization_name: Global organization name
        :param int org_id: Customer organization identifier
        :param str organization_name: Customer organization name
        :param str reseller_account_name: Reseller account name
        :param int reseller_account_number: Reseller account number
        :param int reseller_org_id: Reseller customer organization identifier
        :param str reseller_ucm_id: Reseller account ucmId
        :param str ucm_id: Global organization name
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "reseller_account_name", reseller_account_name)
        pulumi.set(__self__, "reseller_account_number", reseller_account_number)
        pulumi.set(__self__, "reseller_org_id", reseller_org_id)
        pulumi.set(__self__, "reseller_ucm_id", reseller_ucm_id)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix Account Number
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Global Customer Id
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Customer organization naidentifierme
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Global organization name
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Customer organization identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Customer organization name
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="resellerAccountName")
    def reseller_account_name(self) -> str:
        """
        Reseller account name
        """
        return pulumi.get(self, "reseller_account_name")

    @property
    @pulumi.getter(name="resellerAccountNumber")
    def reseller_account_number(self) -> int:
        """
        Reseller account number
        """
        return pulumi.get(self, "reseller_account_number")

    @property
    @pulumi.getter(name="resellerOrgId")
    def reseller_org_id(self) -> int:
        """
        Reseller customer organization identifier
        """
        return pulumi.get(self, "reseller_org_id")

    @property
    @pulumi.getter(name="resellerUcmId")
    def reseller_ucm_id(self) -> str:
        """
        Reseller account ucmId
        """
        return pulumi.get(self, "reseller_ucm_id")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Global organization name
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetPrecisionTimeServicesDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetPrecisionTimeServicesDataConnectionResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Link to the Equinix Fabric Connection associated with the Precision Time Service
        :param str type: Type of the Equinix Fabric Connection associated with the Precision Time Service
        :param str uuid: Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Link to the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Equinix Fabric Connection associated with the Precision Time Service
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Fabric Connection UUID; Precision Time Service will be connected with it
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPrecisionTimeServicesDataIpv4Result(dict):
    def __init__(__self__, *,
                 default_gateway: str,
                 network_mask: str,
                 primary: str,
                 secondary: str):
        """
        :param str default_gateway: IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        :param str network_mask: IPv4 address that defines the range of consecutive subnets in the network.
        :param str primary: IPv4 address for the Primary Timing Master Server.
        :param str secondary: IPv4 address for the Secondary Timing Master Server.
        """
        pulumi.set(__self__, "default_gateway", default_gateway)
        pulumi.set(__self__, "network_mask", network_mask)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> str:
        """
        IPv4 address that establishes the Routing Interface where traffic is directed. It serves as the next hop in the Network.
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="networkMask")
    def network_mask(self) -> str:
        """
        IPv4 address that defines the range of consecutive subnets in the network.
        """
        return pulumi.get(self, "network_mask")

    @property
    @pulumi.getter
    def primary(self) -> str:
        """
        IPv4 address for the Primary Timing Master Server.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> str:
        """
        IPv4 address for the Secondary Timing Master Server.
        """
        return pulumi.get(self, "secondary")


@pulumi.output_type
class GetPrecisionTimeServicesDataNtpAdvancedConfigurationResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 key_number: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str key: The plaintext authentication key. For ASCII type, the key\\
               \\ must contain printable ASCII characters, range 10-20 characters. For\\
               \\ HEX type, range should be 10-40 characters
        :param int key_number: The authentication Key ID
        :param str type: md5 Authentication type
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_number is not None:
            pulumi.set(__self__, "key_number", key_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The plaintext authentication key. For ASCII type, the key\\
        \\ must contain printable ASCII characters, range 10-20 characters. For\\
        \\ HEX type, range should be 10-40 characters
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyNumber")
    def key_number(self) -> Optional[int]:
        """
        The authentication Key ID
        """
        return pulumi.get(self, "key_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        md5 Authentication type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrecisionTimeServicesDataOrderResult(dict):
    def __init__(__self__, *,
                 customer_reference_number: str,
                 order_number: str,
                 purchase_order_number: str):
        """
        :param str customer_reference_number: Customer reference number
        :param str order_number: Order reference number
        :param str purchase_order_number: Purchase order number
        """
        pulumi.set(__self__, "customer_reference_number", customer_reference_number)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="customerReferenceNumber")
    def customer_reference_number(self) -> str:
        """
        Customer reference number
        """
        return pulumi.get(self, "customer_reference_number")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order reference number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> str:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")


@pulumi.output_type
class GetPrecisionTimeServicesDataPackageResult(dict):
    def __init__(__self__, *,
                 code: str,
                 href: str):
        """
        :param str code: Time Precision Package Code for the desired billing package
        :param str href: Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Time Precision Package Code for the desired billing package
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Time Precision Package HREF link to corresponding resource in Equinix Portal
        """
        return pulumi.get(self, "href")


@pulumi.output_type
class GetPrecisionTimeServicesDataPrecisionTimePriceResult(dict):
    def __init__(__self__, *,
                 charges: Sequence['outputs.GetPrecisionTimeServicesDataPrecisionTimePriceChargeResult'],
                 currency: str):
        """
        :param Sequence['GetPrecisionTimeServicesDataPrecisionTimePriceChargeArgs'] charges: offering price charge
        :param str currency: Offering price currency
        """
        pulumi.set(__self__, "charges", charges)
        pulumi.set(__self__, "currency", currency)

    @property
    @pulumi.getter
    def charges(self) -> Sequence['outputs.GetPrecisionTimeServicesDataPrecisionTimePriceChargeResult']:
        """
        offering price charge
        """
        return pulumi.get(self, "charges")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Offering price currency
        """
        return pulumi.get(self, "currency")


@pulumi.output_type
class GetPrecisionTimeServicesDataPrecisionTimePriceChargeResult(dict):
    def __init__(__self__, *,
                 price: float,
                 type: str):
        """
        :param float price: Offering price
        :param str type: Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def price(self) -> float:
        """
        Offering price
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Price charge type; MONTHLY*RECURRING, NON*RECURRING
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrecisionTimeServicesDataProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetPrecisionTimeServicesDataPtpAdvancedConfigurationResult(dict):
    def __init__(__self__, *,
                 domain: Optional[int] = None,
                 grant_time: Optional[int] = None,
                 log_announce_interval: Optional[int] = None,
                 log_delay_req_interval: Optional[int] = None,
                 log_sync_interval: Optional[int] = None,
                 priority1: Optional[int] = None,
                 priority2: Optional[int] = None,
                 time_scale: Optional[str] = None,
                 transport_mode: Optional[str] = None):
        """
        :param int domain: The PTP domain value
        :param int grant_time: Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        :param int log_announce_interval: Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        :param int log_delay_req_interval: Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int log_sync_interval: Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        :param int priority1: The priority1 value determines the best primary clock, Lower value indicates higher priority
        :param int priority2: The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        :param str time_scale: Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        :param str transport_mode: ptp transport mode
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if grant_time is not None:
            pulumi.set(__self__, "grant_time", grant_time)
        if log_announce_interval is not None:
            pulumi.set(__self__, "log_announce_interval", log_announce_interval)
        if log_delay_req_interval is not None:
            pulumi.set(__self__, "log_delay_req_interval", log_delay_req_interval)
        if log_sync_interval is not None:
            pulumi.set(__self__, "log_sync_interval", log_sync_interval)
        if priority1 is not None:
            pulumi.set(__self__, "priority1", priority1)
        if priority2 is not None:
            pulumi.set(__self__, "priority2", priority2)
        if time_scale is not None:
            pulumi.set(__self__, "time_scale", time_scale)
        if transport_mode is not None:
            pulumi.set(__self__, "transport_mode", transport_mode)

    @property
    @pulumi.getter
    def domain(self) -> Optional[int]:
        """
        The PTP domain value
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="grantTime")
    def grant_time(self) -> Optional[int]:
        """
        Unicast Grant Time in seconds. For Multicast and Hybrid transport modes, grant time defaults to 300 seconds. For Unicast mode, grant time can be between 30 to 7200
        """
        return pulumi.get(self, "grant_time")

    @property
    @pulumi.getter(name="logAnnounceInterval")
    def log_announce_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Announce packets from the PTP time server. Default is 1 (1 packet every 2 seconds), Unit packets/second
        """
        return pulumi.get(self, "log_announce_interval")

    @property
    @pulumi.getter(name="logDelayReqInterval")
    def log_delay_req_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP DelayReq packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_delay_req_interval")

    @property
    @pulumi.getter(name="logSyncInterval")
    def log_sync_interval(self) -> Optional[int]:
        """
        Logarithmic value that controls the rate of PTP Sync packets. Default is -4 (16 packets per second), Unit packets/second..
        """
        return pulumi.get(self, "log_sync_interval")

    @property
    @pulumi.getter
    def priority1(self) -> Optional[int]:
        """
        The priority1 value determines the best primary clock, Lower value indicates higher priority
        """
        return pulumi.get(self, "priority1")

    @property
    @pulumi.getter
    def priority2(self) -> Optional[int]:
        """
        The priority2 value differentiates and prioritizes the primary clock to avoid confusion when priority1-value is the same for different primary clocks in a network
        """
        return pulumi.get(self, "priority2")

    @property
    @pulumi.getter(name="timeScale")
    def time_scale(self) -> Optional[str]:
        """
        Time Scale value, ARB denotes Arbitrary and PTP denotes Precision Time Protocol
        """
        return pulumi.get(self, "time_scale")

    @property
    @pulumi.getter(name="transportMode")
    def transport_mode(self) -> Optional[str]:
        """
        ptp transport mode
        """
        return pulumi.get(self, "transport_mode")


@pulumi.output_type
class GetPrecisionTimeServicesFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str],
                 or_: Optional[bool] = None):
        """
        :param str operator: Operation applied to the values of the filter
        :param str property: Property to apply the filter to
        :param Sequence[str] values: List of values to apply the operation to for the specified property
        :param bool or_: Boolean value to specify if this filter is a part of the OR group. Has a maximum of 3 and only counts for 1 of the 8 possible filters
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)
        if or_ is not None:
            pulumi.set(__self__, "or_", or_)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operation applied to the values of the filter
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of values to apply the operation to for the specified property
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="or")
    def or_(self) -> Optional[bool]:
        """
        Boolean value to specify if this filter is a part of the OR group. Has a maximum of 3 and only counts for 1 of the 8 possible filters
        """
        return pulumi.get(self, "or_")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property to apply the filter to
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetPrecisionTimeServicesPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 offset: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param int offset: Index of the first item returned in the response. The default is 0
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetPrecisionTimeServicesSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. One of [/name /uuid /state /type /package/code /changeLog/createdDateTime /changeLog/updatedDateTime] Defaults to /name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. One of [/name /uuid /state /type /package/code /changeLog/createdDateTime /changeLog/updatedDateTime] Defaults to /name
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetRouteAggregationChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Equinix auto generated URI to the route aggregation change
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteAggregationChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteAggregationProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetRouteAggregationRuleChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Equinix auto generated URI to the route aggregation change
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteAggregationRuleChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteAggregationRulesDataResult(dict):
    def __init__(__self__, *,
                 change: 'outputs.GetRouteAggregationRulesDataChangeResult',
                 change_log: 'outputs.GetRouteAggregationRulesDataChangeLogResult',
                 href: str,
                 name: str,
                 prefix: str,
                 route_aggregation_id: str,
                 state: str,
                 type: str,
                 uuid: str,
                 description: Optional[str] = None):
        """
        :param 'GetRouteAggregationRulesDataChangeArgs' change: Current state of latest route aggregation rule change
        :param 'GetRouteAggregationRulesDataChangeLogArgs' change_log: Details of the last change on the stream resource
        :param str href: Equinix auto generated URI to the route aggregation rule resource
        :param str name: Customer provided name of the route aggregation rule
        :param str prefix: Customer-provided route aggregation rule prefix
        :param str route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param str state: Value representing provisioning status for the route aggregation rule resource
        :param str type: Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        :param str uuid: Equinix-assigned unique id for the route aggregation rule resource
        :param str description: Customer-provided route aggregation rule description
        """
        pulumi.set(__self__, "change", change)
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def change(self) -> 'outputs.GetRouteAggregationRulesDataChangeResult':
        """
        Current state of latest route aggregation rule change
        """
        return pulumi.get(self, "change")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetRouteAggregationRulesDataChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation rule resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer provided name of the route aggregation rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Customer-provided route aggregation rule prefix
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> str:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the route aggregation rule resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the route aggregation rule resource
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Customer-provided route aggregation rule description
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetRouteAggregationRulesDataChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Equinix auto generated URI to the route aggregation change
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteAggregationRulesDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteAggregationRulesPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of route agrgegation rules available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of route agrgegation rules available to the user making the request
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetRouteAggregationsDataResult(dict):
    def __init__(__self__, *,
                 change: 'outputs.GetRouteAggregationsDataChangeResult',
                 change_log: 'outputs.GetRouteAggregationsDataChangeLogResult',
                 connections_count: int,
                 description: str,
                 href: str,
                 name: str,
                 project: 'outputs.GetRouteAggregationsDataProjectResult',
                 rules_count: int,
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param 'GetRouteAggregationsDataChangeArgs' change: Current state of latest Route Aggregation change
        :param 'GetRouteAggregationsDataChangeLogArgs' change_log: Details of the last change on the route aggregation resource
        :param int connections_count: Number of Connections attached to route aggregation
        :param str description: Customer-provided route aggregation description
        :param str href: Equinix auto generated URI to the route aggregation resource
        :param str name: Customer provided name of the route aggregation
        :param 'GetRouteAggregationsDataProjectArgs' project: Equinix Project attribute object
        :param int rules_count: Number of Rules attached to route aggregation
        :param str state: Value representing provisioning status for the route aggregation resource
        :param str type: Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        :param str uuid: Equinix-assigned unique id for the route aggregation resource
        """
        pulumi.set(__self__, "change", change)
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "connections_count", connections_count)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "rules_count", rules_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def change(self) -> 'outputs.GetRouteAggregationsDataChangeResult':
        """
        Current state of latest Route Aggregation change
        """
        return pulumi.get(self, "change")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetRouteAggregationsDataChangeLogResult':
        """
        Details of the last change on the route aggregation resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        """
        Number of Connections attached to route aggregation
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided route aggregation description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer provided name of the route aggregation
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> 'outputs.GetRouteAggregationsDataProjectResult':
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="rulesCount")
    def rules_count(self) -> int:
        """
        Number of Rules attached to route aggregation
        """
        return pulumi.get(self, "rules_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the route aggregation resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the route aggregation resource
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteAggregationsDataChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Equinix auto generated URI to the route aggregation change
        :param str type: Equinix defined Route Aggregation Change Type
        :param str uuid: Equinix-assigned unique id for a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the route aggregation change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Route Aggregation Change Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteAggregationsDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the route aggregation resource
        :param str created_by_email: Email of creator of the route aggregation resource
        :param str created_by_full_name: Legal name of creator of the route aggregation resource
        :param str created_date_time: Creation time of the route aggregation resource
        :param str deleted_by: User name of deleter of the route aggregation resource
        :param str deleted_by_email: Email of deleter of the route aggregation resource
        :param str deleted_by_full_name: Legal name of deleter of the route aggregation resource
        :param str deleted_date_time: Deletion time of the route aggregation resource
        :param str updated_by: User name of last updater of the route aggregation resource
        :param str updated_by_email: Email of last updater of the route aggregation resource
        :param str updated_by_full_name: Legal name of last updater of the route aggregation resource
        :param str updated_date_time: Last update time of the route aggregation resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the route aggregation resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the route aggregation resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the route aggregation resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the route aggregation resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the route aggregation resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the route aggregation resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteAggregationsDataProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetRouteAggregationsFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str]):
        """
        :param str operator: Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
        :param str property: possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        possible field names to use on filters. One of [/type /name /project/projectId /uuid /state]
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetRouteAggregationsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of route aggregations available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of route aggregations available to the user making the request
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetRouteAggregationsSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. One of [/type /name /project/projectId /uuid /state] Defaults to /name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. One of [/type /name /project/projectId /uuid /state] Defaults to /name
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetRouteFilterChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: The URI of the previous Route Filter Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The URI of the previous Route Filter Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFilterChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteFilterProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: URI of the Fabric Project
        :param str project_id: Project id associated with Fabric Project
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI of the Fabric Project
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project id associated with Fabric Project
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetRouteFilterRuleChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: The URI of the previous Route Filter Rule Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The URI of the previous Route Filter Rule Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFilterRuleChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteFilterRulesDataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 change_logs: Sequence['outputs.GetRouteFilterRulesDataChangeLogResult'],
                 changes: Sequence['outputs.GetRouteFilterRulesDataChangeResult'],
                 description: str,
                 href: str,
                 name: str,
                 prefix: str,
                 prefix_match: str,
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param str action: Action that will be taken on IP Addresses matching the rule
        :param Sequence['GetRouteFilterRulesDataChangeArgs'] changes: An object with the details of the previous change applied on the Route Filter
        :param str description: Optional description to add to the Route Filter you will be creating
        :param str href: Route filter rules URI
        :param str name: Name of the Route Filter
        :param str prefix: IP Address Prefix to Filter on
        :param str prefix_match: Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        :param str state: State of the Route Filter Rule in its lifecycle
        :param str type: Route Filter Type. One of [ BGP_IPv4_PREFIX_FILTER_RULE, BGP_IPv6_PREFIX_FILTER_RULE ]
        :param str uuid: Equinix Assigned ID for Route Filter Rule to retrieve data for
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "changes", changes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action that will be taken on IP Addresses matching the rule
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetRouteFilterRulesDataChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetRouteFilterRulesDataChangeResult']:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Route filter rules URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IP Address Prefix to Filter on
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        """
        Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the Route Filter Rule in its lifecycle
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Filter Type. One of [ BGP_IPv4_PREFIX_FILTER_RULE, BGP_IPv6_PREFIX_FILTER_RULE ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Filter Rule to retrieve data for
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFilterRulesDataChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: The URI of the previous Route Filter Rule Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The URI of the previous Route Filter Rule Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_RULE_UPDATE","BGP_IPv4_PREFIX_FILTER_RULE_CREATION","BGP_IPv4_PREFIX_FILTER_RULE_DELETION","BGP_IPv6_PREFIX_FILTER_RULE_UPDATE","BGP_IPv6_PREFIX_FILTER_RULE_CREATION","BGP_IPv6_PREFIX_FILTER_RULE_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFilterRulesDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteFilterRulesPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param str next: URL relative to the last item in the response.
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        :param str previous: URL relative to the first item in the response.
        :param int total: Total number of elements returned.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        URL relative to the last item in the response.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        URL relative to the first item in the response.
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of elements returned.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetRouteFiltersDataResult(dict):
    def __init__(__self__, *,
                 change_logs: Sequence['outputs.GetRouteFiltersDataChangeLogResult'],
                 changes: Sequence['outputs.GetRouteFiltersDataChangeResult'],
                 connections_count: int,
                 description: str,
                 href: str,
                 name: str,
                 not_matched_rule_action: str,
                 projects: Sequence['outputs.GetRouteFiltersDataProjectResult'],
                 rules_count: int,
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetRouteFiltersDataChangeArgs'] changes: An object with the details of the previous change applied on the Route Filter
        :param int connections_count: The number of Fabric Connections that this Route Filter is attached to
        :param str description: Optional description to add to the Route Filter you will be creating
        :param str href: Route filter URI
        :param str name: Name of the Route Filter
        :param str not_matched_rule_action: The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        :param Sequence['GetRouteFiltersDataProjectArgs'] projects: The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        :param int rules_count: The number of Route Filter Rules attached to this Route Filter
        :param str state: State of the Route Filter in its lifecycle
        :param str type: Route Filter Type. One of [ "BGP_IPv4_PREFIX_FILTER", "BGP_IPv6_PREFIX_FILTER" ]
        :param str uuid: Equinix Assigned ID for Route Filter
        """
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "changes", changes)
        pulumi.set(__self__, "connections_count", connections_count)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "not_matched_rule_action", not_matched_rule_action)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "rules_count", rules_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetRouteFiltersDataChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetRouteFiltersDataChangeResult']:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        """
        The number of Fabric Connections that this Route Filter is attached to
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Route filter URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notMatchedRuleAction")
    def not_matched_rule_action(self) -> str:
        """
        The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        """
        return pulumi.get(self, "not_matched_rule_action")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetRouteFiltersDataProjectResult']:
        """
        The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="rulesCount")
    def rules_count(self) -> int:
        """
        The number of Route Filter Rules attached to this Route Filter
        """
        return pulumi.get(self, "rules_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the Route Filter in its lifecycle
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Filter Type. One of [ "BGP_IPv4_PREFIX_FILTER", "BGP_IPv6_PREFIX_FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Filter
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFiltersDataChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: The URI of the previous Route Filter Change
        :param str type: Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        :param str uuid: Unique identifier for the previous change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        The URI of the previous Route Filter Change
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of change. One of [ "BGP_IPv4_PREFIX_FILTER_UPDATE","BGP_IPv4_PREFIX_FILTER_CREATION","BGP_IPv4_PREFIX_FILTER_DELETION","BGP_IPv6_PREFIX_FILTER_UPDATE","BGP_IPv6_PREFIX_FILTER_CREATION","BGP_IPv6_PREFIX_FILTER_DELETION" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Unique identifier for the previous change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRouteFiltersDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRouteFiltersDataProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: URI of the Fabric Project
        :param str project_id: Project id associated with Fabric Project
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI of the Fabric Project
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project id associated with Fabric Project
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetRouteFiltersFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str]):
        """
        :param str operator: Possible operators to use on the filter property. Can be one of the following: [ "=", "!=", "[NOT] LIKE", "[NOT] IN", "ILIKE" ]
        :param str property: The API response property which you want to filter your request on. Can be one of the following: "/type", "/name", "/project/projectId", "/uuid", "/state"
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Possible operators to use on the filter property. Can be one of the following: [ "=", "!=", "[NOT] LIKE", "[NOT] IN", "ILIKE" ]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The API response property which you want to filter your request on. Can be one of the following: "/type", "/name", "/project/projectId", "/uuid", "/state"
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetRouteFiltersPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param str next: URL relative to the last item in the response.
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        :param str previous: URL relative to the first item in the response.
        :param int total: Total number of elements returned.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        URL relative to the last item in the response.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        URL relative to the first item in the response.
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of elements returned.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetRouteFiltersSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. Can be one of the following: [/type, /uuid, /name, /project/projectId, /state, /notMatchedRuleAction, /connectionsCount, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. Can be one of the following: [/type, /uuid, /name, /project/projectId, /state, /notMatchedRuleAction, /connectionsCount, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetRoutingProtocolBfdResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Bidirectional Forwarding Detection enablement
        :param str interval: Interval range between the received BFD control packets
        """
        pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class GetRoutingProtocolBgpIpv4Result(dict):
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 inbound_med: int,
                 outbound_as_prepend_count: str,
                 outbound_med: int,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param int inbound_med: Inbound Multi Exit Discriminator attribute
        :param str outbound_as_prepend_count: AS path prepend count. One of: 0, 1, 3, 5
        :param int outbound_med: Outbound Multi Exit Discriminator attribute
        :param bool enabled: Admin status for the BGP session
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        pulumi.set(__self__, "inbound_med", inbound_med)
        pulumi.set(__self__, "outbound_as_prepend_count", outbound_as_prepend_count)
        pulumi.set(__self__, "outbound_med", outbound_med)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter(name="inboundMed")
    def inbound_med(self) -> int:
        """
        Inbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "inbound_med")

    @property
    @pulumi.getter(name="outboundAsPrependCount")
    def outbound_as_prepend_count(self) -> str:
        """
        AS path prepend count. One of: 0, 1, 3, 5
        """
        return pulumi.get(self, "outbound_as_prepend_count")

    @property
    @pulumi.getter(name="outboundMed")
    def outbound_med(self) -> int:
        """
        Outbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "outbound_med")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetRoutingProtocolBgpIpv6Result(dict):
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 inbound_med: int,
                 outbound_as_prepend_count: str,
                 outbound_med: int,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param int inbound_med: Inbound Multi Exit Discriminator attribute
        :param str outbound_as_prepend_count: AS path prepend count. One of: 0, 1, 3, 5
        :param int outbound_med: Outbound Multi Exit Discriminator attribute
        :param bool enabled: Admin status for the BGP session
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        pulumi.set(__self__, "inbound_med", inbound_med)
        pulumi.set(__self__, "outbound_as_prepend_count", outbound_as_prepend_count)
        pulumi.set(__self__, "outbound_med", outbound_med)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @property
    @pulumi.getter(name="inboundMed")
    def inbound_med(self) -> int:
        """
        Inbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "inbound_med")

    @property
    @pulumi.getter(name="outboundAsPrependCount")
    def outbound_as_prepend_count(self) -> str:
        """
        AS path prepend count. One of: 0, 1, 3, 5
        """
        return pulumi.get(self, "outbound_as_prepend_count")

    @property
    @pulumi.getter(name="outboundMed")
    def outbound_med(self) -> int:
        """
        Outbound Multi Exit Discriminator attribute
        """
        return pulumi.get(self, "outbound_med")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetRoutingProtocolChangeResult(dict):
    def __init__(__self__, *,
                 href: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Routing Protocol Change URI
        :param str type: Type of change
        :param str uuid: Uniquely identifies a change
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Routing Protocol Change URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of change
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Uniquely identifies a change
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetRoutingProtocolChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetRoutingProtocolDirectIpv4Result(dict):
    def __init__(__self__, *,
                 equinix_iface_ip: str):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> str:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class GetRoutingProtocolDirectIpv6Result(dict):
    def __init__(__self__, *,
                 equinix_iface_ip: Optional[str] = None):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        if equinix_iface_ip is not None:
            pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")


@pulumi.output_type
class GetRoutingProtocolOperationResult(dict):
    def __init__(__self__, *,
                 errors: Sequence['outputs.GetRoutingProtocolOperationErrorResult']):
        """
        :param Sequence['GetRoutingProtocolOperationErrorArgs'] errors: Errors occurred
        """
        pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetRoutingProtocolOperationErrorResult']:
        """
        Errors occurred
        """
        return pulumi.get(self, "errors")


@pulumi.output_type
class GetRoutingProtocolOperationErrorResult(dict):
    def __init__(__self__, *,
                 additional_infos: Sequence['outputs.GetRoutingProtocolOperationErrorAdditionalInfoResult'],
                 correlation_id: str,
                 details: str,
                 error_code: str,
                 error_message: str,
                 help: str):
        """
        :param Sequence['GetRoutingProtocolOperationErrorAdditionalInfoArgs'] additional_infos: Pricing error additional Info
        :param str correlation_id: CorrelationId
        :param str details: Details
        :param str error_code: Error  code
        :param str error_message: Error Message
        :param str help: Help
        """
        pulumi.set(__self__, "additional_infos", additional_infos)
        pulumi.set(__self__, "correlation_id", correlation_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Sequence['outputs.GetRoutingProtocolOperationErrorAdditionalInfoResult']:
        """
        Pricing error additional Info
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> str:
        """
        CorrelationId
        """
        return pulumi.get(self, "correlation_id")

    @property
    @pulumi.getter
    def details(self) -> str:
        """
        Details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> str:
        """
        Error  code
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Error Message
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def help(self) -> str:
        """
        Help
        """
        return pulumi.get(self, "help")


@pulumi.output_type
class GetRoutingProtocolOperationErrorAdditionalInfoResult(dict):
    def __init__(__self__, *,
                 property: str,
                 reason: str):
        """
        :param str property: Property at which the error potentially occurred
        :param str reason: Reason for the error
        """
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the error
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property at which the error potentially occurred
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 allow_bandwidth_auto_approval: Optional[bool] = None,
                 allow_bandwidth_upgrade: Optional[bool] = None,
                 allow_custom_bandwidth: Optional[bool] = None,
                 allow_remote_connections: Optional[bool] = None,
                 api_config: Optional['outputs.GetServiceProfileAccessPointTypeConfigApiConfigResult'] = None,
                 authentication_key: Optional['outputs.GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult'] = None,
                 bandwidth_alert_threshold: Optional[float] = None,
                 connection_label: Optional[str] = None,
                 connection_redundancy_required: Optional[bool] = None,
                 enable_auto_generate_service_key: Optional[bool] = None,
                 link_protocol_config: Optional['outputs.GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult'] = None,
                 supported_bandwidths: Optional[Sequence[int]] = None):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Colo/Port Uuid
        :param bool allow_bandwidth_auto_approval: Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        :param bool allow_bandwidth_upgrade: Availability of a bandwidth upgrade. The default is false
        :param bool allow_custom_bandwidth: Setting to enable or disable the ability of the buyer to customize the bandwidth
        :param bool allow_remote_connections: Setting to allow or prohibit remote connections to the service profile
        :param 'GetServiceProfileAccessPointTypeConfigApiConfigArgs' api_config: Api configuration details
        :param 'GetServiceProfileAccessPointTypeConfigAuthenticationKeyArgs' authentication_key: Authentication key details
        :param float bandwidth_alert_threshold: Percentage of port bandwidth at which an allocation alert is generated
        :param str connection_label: Custom name for Connection
        :param bool connection_redundancy_required: Mandate redundant connections
        :param bool enable_auto_generate_service_key: Enable auto generate service key
        :param 'GetServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs' link_protocol_config: Link protocol configuration details
        :param Sequence[int] supported_bandwidths: Supported bandwidths
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if allow_bandwidth_auto_approval is not None:
            pulumi.set(__self__, "allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        if allow_bandwidth_upgrade is not None:
            pulumi.set(__self__, "allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        if allow_custom_bandwidth is not None:
            pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connections is not None:
            pulumi.set(__self__, "allow_remote_connections", allow_remote_connections)
        if api_config is not None:
            pulumi.set(__self__, "api_config", api_config)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bandwidth_alert_threshold is not None:
            pulumi.set(__self__, "bandwidth_alert_threshold", bandwidth_alert_threshold)
        if connection_label is not None:
            pulumi.set(__self__, "connection_label", connection_label)
        if connection_redundancy_required is not None:
            pulumi.set(__self__, "connection_redundancy_required", connection_redundancy_required)
        if enable_auto_generate_service_key is not None:
            pulumi.set(__self__, "enable_auto_generate_service_key", enable_auto_generate_service_key)
        if link_protocol_config is not None:
            pulumi.set(__self__, "link_protocol_config", link_protocol_config)
        if supported_bandwidths is not None:
            pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        """
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> Optional[bool]:
        """
        Availability of a bandwidth upgrade. The default is false
        """
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to customize the bandwidth
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> Optional[bool]:
        """
        Setting to allow or prohibit remote connections to the service profile
        """
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfig")
    def api_config(self) -> Optional['outputs.GetServiceProfileAccessPointTypeConfigApiConfigResult']:
        """
        Api configuration details
        """
        return pulumi.get(self, "api_config")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional['outputs.GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult']:
        """
        Authentication key details
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> Optional[float]:
        """
        Percentage of port bandwidth at which an allocation alert is generated
        """
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> Optional[str]:
        """
        Custom name for Connection
        """
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> Optional[bool]:
        """
        Mandate redundant connections
        """
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> Optional[bool]:
        """
        Enable auto generate service key
        """
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfig")
    def link_protocol_config(self) -> Optional['outputs.GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult']:
        """
        Link protocol configuration details
        """
        return pulumi.get(self, "link_protocol_config")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[Sequence[int]]:
        """
        Supported bandwidths
        """
        return pulumi.get(self, "supported_bandwidths")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: Optional[bool] = None,
                 api_available: Optional[bool] = None,
                 bandwidth_from_api: Optional[bool] = None,
                 equinix_managed_port: Optional[bool] = None,
                 equinix_managed_vlan: Optional[bool] = None,
                 integration_id: Optional[str] = None,
                 over_subscription_limit: Optional[int] = None):
        """
        :param bool allow_over_subscription: Setting showing that oversubscription support is available (true) or not (false). The default is false
        :param bool api_available: Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        :param bool bandwidth_from_api: Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        :param bool equinix_managed_port: Setting indicating that the port is managed by Equinix (true) or not (false)
        :param bool equinix_managed_vlan: Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        :param str integration_id: A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        :param int over_subscription_limit: Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        if allow_over_subscription is not None:
            pulumi.set(__self__, "allow_over_subscription", allow_over_subscription)
        if api_available is not None:
            pulumi.set(__self__, "api_available", api_available)
        if bandwidth_from_api is not None:
            pulumi.set(__self__, "bandwidth_from_api", bandwidth_from_api)
        if equinix_managed_port is not None:
            pulumi.set(__self__, "equinix_managed_port", equinix_managed_port)
        if equinix_managed_vlan is not None:
            pulumi.set(__self__, "equinix_managed_vlan", equinix_managed_vlan)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if over_subscription_limit is not None:
            pulumi.set(__self__, "over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> Optional[bool]:
        """
        Setting showing that oversubscription support is available (true) or not (false). The default is false
        """
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> Optional[bool]:
        """
        Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        """
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> Optional[bool]:
        """
        Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        """
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> Optional[bool]:
        """
        Setting indicating that the port is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> Optional[bool]:
        """
        Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[str]:
        """
        A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> Optional[int]:
        """
        Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 label: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        :param str description: Description of authorization key
        :param str label: Name of the parameter that must be provided to authorize the connection.
        :param bool required: Requirement to configure an authentication key.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of authorization key
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Name of the parameter that must be provided to authorize the connection.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Requirement to configure an authentication key.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfileAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: Optional[str] = None,
                 encapsulation_strategy: Optional[str] = None,
                 reuse_vlan_s_tag: Optional[bool] = None):
        """
        :param str encapsulation: Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        :param str encapsulation_strategy: Additional tagging information required by the seller profile.
        :param bool reuse_vlan_s_tag: Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_strategy is not None:
            pulumi.set(__self__, "encapsulation_strategy", encapsulation_strategy)
        if reuse_vlan_s_tag is not None:
            pulumi.set(__self__, "reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[str]:
        """
        Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> Optional[str]:
        """
        Additional tagging information required by the seller profile.
        """
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> Optional[bool]:
        """
        Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetServiceProfileAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceProfileChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceProfileCustomFieldResult(dict):
    def __init__(__self__, *,
                 data_type: str,
                 label: str,
                 required: bool,
                 capture_in_email: Optional[bool] = None,
                 description: Optional[str] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str data_type: Data type
        :param str label: Label
        :param bool required: Required field
        :param bool capture_in_email: Required field
        :param str description: Description
        :param Sequence[str] options: Options
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "required", required)
        if capture_in_email is not None:
            pulumi.set(__self__, "capture_in_email", capture_in_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Required field
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> Optional[bool]:
        """
        Required field
        """
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Options
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class GetServiceProfileMarketingInfoResult(dict):
    def __init__(__self__, *,
                 logo: Optional[str] = None,
                 process_steps: Optional[Sequence['outputs.GetServiceProfileMarketingInfoProcessStepResult']] = None,
                 promotion: Optional[bool] = None):
        """
        :param str logo: Logo
        :param Sequence['GetServiceProfileMarketingInfoProcessStepArgs'] process_steps: Process Step
        :param bool promotion: Promotion
        """
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if process_steps is not None:
            pulumi.set(__self__, "process_steps", process_steps)
        if promotion is not None:
            pulumi.set(__self__, "promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> Optional[str]:
        """
        Logo
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Optional[Sequence['outputs.GetServiceProfileMarketingInfoProcessStepResult']]:
        """
        Process Step
        """
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> Optional[bool]:
        """
        Promotion
        """
        return pulumi.get(self, "promotion")


@pulumi.output_type
class GetServiceProfileMarketingInfoProcessStepResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 sub_title: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str description: Description
        :param str sub_title: Sub Title
        :param str title: Title
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sub_title is not None:
            pulumi.set(__self__, "sub_title", sub_title)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> Optional[str]:
        """
        Sub Title
        """
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetServiceProfileMetroResult(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_name: Optional[str] = None,
                 ibxs: Optional[Sequence[str]] = None,
                 in_trail: Optional[bool] = None,
                 name: Optional[str] = None,
                 seller_regions: Optional[Mapping[str, str]] = None):
        """
        :param str code: Metro Code - Example SV
        :param str display_name: Display Name
        :param Sequence[str] ibxs: IBX- Equinix International Business Exchange list
        :param bool in_trail: In Trail
        :param str name: Metro Name
        :param Mapping[str, str] seller_regions: Seller Regions
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ibxs is not None:
            pulumi.set(__self__, "ibxs", ibxs)
        if in_trail is not None:
            pulumi.set(__self__, "in_trail", in_trail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if seller_regions is not None:
            pulumi.set(__self__, "seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Metro Code - Example SV
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Optional[Sequence[str]]:
        """
        IBX- Equinix International Business Exchange list
        """
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> Optional[bool]:
        """
        In Trail
        """
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Optional[Mapping[str, str]]:
        """
        Seller Regions
        """
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class GetServiceProfileNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetServiceProfilePortResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 cross_connect_id: Optional[str] = None,
                 location: Optional['outputs.GetServiceProfilePortLocationResult'] = None,
                 seller_region: Optional[str] = None,
                 seller_region_description: Optional[str] = None):
        """
        :param str type: Colo/Port Type
        :param str uuid: Colo/Port Uuid
        :param str cross_connect_id: Cross Connect Id
        :param 'GetServiceProfilePortLocationArgs' location: Colo/Port Location
        :param str seller_region: Seller Region
        :param str seller_region_description: Seller Region details
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if cross_connect_id is not None:
            pulumi.set(__self__, "cross_connect_id", cross_connect_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if seller_region_description is not None:
            pulumi.set(__self__, "seller_region_description", seller_region_description)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Colo/Port Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> Optional[str]:
        """
        Cross Connect Id
        """
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.GetServiceProfilePortLocationResult']:
        """
        Colo/Port Location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Seller Region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> Optional[str]:
        """
        Seller Region details
        """
        return pulumi.get(self, "seller_region_description")


@pulumi.output_type
class GetServiceProfilePortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfileProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceProfileVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 interface_uuid: Optional[str] = None,
                 location: Optional['outputs.GetServiceProfileVirtualDeviceLocationResult'] = None):
        """
        :param str type: Virtual Device Type
        :param str uuid: Virtual Device Uuid
        :param str interface_uuid: Device Interface Uuid
        :param 'GetServiceProfileVirtualDeviceLocationArgs' location: Device Location
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if interface_uuid is not None:
            pulumi.set(__self__, "interface_uuid", interface_uuid)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Virtual Device Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="interfaceUuid")
    def interface_uuid(self) -> Optional[str]:
        """
        Device Interface Uuid
        """
        return pulumi.get(self, "interface_uuid")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.GetServiceProfileVirtualDeviceLocationResult']:
        """
        Device Location
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class GetServiceProfileVirtualDeviceLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfilesDatumResult(dict):
    def __init__(__self__, *,
                 access_point_type_configs: Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigResult'],
                 accounts: Sequence['outputs.GetServiceProfilesDatumAccountResult'],
                 allowed_emails: Sequence[str],
                 change_logs: Sequence['outputs.GetServiceProfilesDatumChangeLogResult'],
                 custom_fields: Sequence['outputs.GetServiceProfilesDatumCustomFieldResult'],
                 description: str,
                 href: str,
                 marketing_infos: Sequence['outputs.GetServiceProfilesDatumMarketingInfoResult'],
                 metros: Sequence['outputs.GetServiceProfilesDatumMetroResult'],
                 name: str,
                 notifications: Sequence['outputs.GetServiceProfilesDatumNotificationResult'],
                 ports: Sequence['outputs.GetServiceProfilesDatumPortResult'],
                 projects: Sequence['outputs.GetServiceProfilesDatumProjectResult'],
                 self_profile: bool,
                 state: str,
                 tags: Sequence[str],
                 type: str,
                 uuid: str,
                 view_point: str,
                 virtual_devices: Sequence['outputs.GetServiceProfilesDatumVirtualDeviceResult'],
                 visibility: str):
        """
        :param Sequence['GetServiceProfilesDatumAccessPointTypeConfigArgs'] access_point_type_configs: Access point config information
        :param Sequence['GetServiceProfilesDatumAccountArgs'] accounts: Service Profile Owner Account Information
        :param Sequence[str] allowed_emails: Array of contact emails
        :param Sequence['GetServiceProfilesDatumChangeLogArgs'] change_logs: Captures connection lifecycle change information
        :param Sequence['GetServiceProfilesDatumCustomFieldArgs'] custom_fields: Custom Fields
        :param str description: User-provided service description
        :param str href: Service Profile URI response attribute
        :param Sequence['GetServiceProfilesDatumMarketingInfoArgs'] marketing_infos: Marketing Info
        :param Sequence['GetServiceProfilesDatumMetroArgs'] metros: Access point config information
        :param str name: Customer-assigned service profile name
        :param Sequence['GetServiceProfilesDatumNotificationArgs'] notifications: Preferences for notifications on connection configuration or status changes
        :param Sequence['GetServiceProfilesDatumPortArgs'] ports: Ports
        :param Sequence['GetServiceProfilesDatumProjectArgs'] projects: Project information
        :param bool self_profile: Self Profile indicating if the profile is created for customer's  self use
        :param str state: Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        :param Sequence[str] tags: Tags attached to the connection
        :param str type: Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        :param str uuid: Equinix assigned service profile identifier
        :param str view_point: Flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        :param Sequence['GetServiceProfilesDatumVirtualDeviceArgs'] virtual_devices: Virtual Devices
        :param str visibility: Service profile visibility - PUBLIC, PRIVATE
        """
        pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "allowed_emails", allowed_emails)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "marketing_infos", marketing_infos)
        pulumi.set(__self__, "metros", metros)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "self_profile", self_profile)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "view_point", view_point)
        pulumi.set(__self__, "virtual_devices", virtual_devices)
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Sequence['outputs.GetServiceProfilesDatumAccessPointTypeConfigResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetServiceProfilesDatumAccountResult']:
        """
        Service Profile Owner Account Information
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="allowedEmails")
    def allowed_emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "allowed_emails")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetServiceProfilesDatumChangeLogResult']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Sequence['outputs.GetServiceProfilesDatumCustomFieldResult']:
        """
        Custom Fields
        """
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Service Profile URI response attribute
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="marketingInfos")
    def marketing_infos(self) -> Sequence['outputs.GetServiceProfilesDatumMarketingInfoResult']:
        """
        Marketing Info
        """
        return pulumi.get(self, "marketing_infos")

    @property
    @pulumi.getter
    def metros(self) -> Sequence['outputs.GetServiceProfilesDatumMetroResult']:
        """
        Access point config information
        """
        return pulumi.get(self, "metros")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned service profile name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetServiceProfilesDatumNotificationResult']:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetServiceProfilesDatumPortResult']:
        """
        Ports
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetServiceProfilesDatumProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="selfProfile")
    def self_profile(self) -> bool:
        """
        Self Profile indicating if the profile is created for customer's  self use
        """
        return pulumi.get(self, "self_profile")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Tags attached to the connection
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned service profile identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="viewPoint")
    def view_point(self) -> str:
        """
        Flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
        """
        return pulumi.get(self, "view_point")

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> Sequence['outputs.GetServiceProfilesDatumVirtualDeviceResult']:
        """
        Virtual Devices
        """
        return pulumi.get(self, "virtual_devices")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        """
        Service profile visibility - PUBLIC, PRIVATE
        """
        return pulumi.get(self, "visibility")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 allow_bandwidth_auto_approval: Optional[bool] = None,
                 allow_bandwidth_upgrade: Optional[bool] = None,
                 allow_custom_bandwidth: Optional[bool] = None,
                 allow_remote_connections: Optional[bool] = None,
                 api_config: Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult'] = None,
                 authentication_key: Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult'] = None,
                 bandwidth_alert_threshold: Optional[float] = None,
                 connection_label: Optional[str] = None,
                 connection_redundancy_required: Optional[bool] = None,
                 enable_auto_generate_service_key: Optional[bool] = None,
                 link_protocol_config: Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult'] = None,
                 supported_bandwidths: Optional[Sequence[int]] = None):
        """
        :param str type: Type of access point type config - VD, COLO
        :param str uuid: Colo/Port Uuid
        :param bool allow_bandwidth_auto_approval: Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        :param bool allow_bandwidth_upgrade: Availability of a bandwidth upgrade. The default is false
        :param bool allow_custom_bandwidth: Setting to enable or disable the ability of the buyer to customize the bandwidth
        :param bool allow_remote_connections: Setting to allow or prohibit remote connections to the service profile
        :param 'GetServiceProfilesDatumAccessPointTypeConfigApiConfigArgs' api_config: Api configuration details
        :param 'GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyArgs' authentication_key: Authentication key details
        :param float bandwidth_alert_threshold: Percentage of port bandwidth at which an allocation alert is generated
        :param str connection_label: Custom name for Connection
        :param bool connection_redundancy_required: Mandate redundant connections
        :param bool enable_auto_generate_service_key: Enable auto generate service key
        :param 'GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigArgs' link_protocol_config: Link protocol configuration details
        :param Sequence[int] supported_bandwidths: Supported bandwidths
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if allow_bandwidth_auto_approval is not None:
            pulumi.set(__self__, "allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        if allow_bandwidth_upgrade is not None:
            pulumi.set(__self__, "allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        if allow_custom_bandwidth is not None:
            pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connections is not None:
            pulumi.set(__self__, "allow_remote_connections", allow_remote_connections)
        if api_config is not None:
            pulumi.set(__self__, "api_config", api_config)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bandwidth_alert_threshold is not None:
            pulumi.set(__self__, "bandwidth_alert_threshold", bandwidth_alert_threshold)
        if connection_label is not None:
            pulumi.set(__self__, "connection_label", connection_label)
        if connection_redundancy_required is not None:
            pulumi.set(__self__, "connection_redundancy_required", connection_redundancy_required)
        if enable_auto_generate_service_key is not None:
            pulumi.set(__self__, "enable_auto_generate_service_key", enable_auto_generate_service_key)
        if link_protocol_config is not None:
            pulumi.set(__self__, "link_protocol_config", link_protocol_config)
        if supported_bandwidths is not None:
            pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        """
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> Optional[bool]:
        """
        Availability of a bandwidth upgrade. The default is false
        """
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[bool]:
        """
        Setting to enable or disable the ability of the buyer to customize the bandwidth
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> Optional[bool]:
        """
        Setting to allow or prohibit remote connections to the service profile
        """
        return pulumi.get(self, "allow_remote_connections")

    @property
    @pulumi.getter(name="apiConfig")
    def api_config(self) -> Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult']:
        """
        Api configuration details
        """
        return pulumi.get(self, "api_config")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult']:
        """
        Authentication key details
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> Optional[float]:
        """
        Percentage of port bandwidth at which an allocation alert is generated
        """
        return pulumi.get(self, "bandwidth_alert_threshold")

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> Optional[str]:
        """
        Custom name for Connection
        """
        return pulumi.get(self, "connection_label")

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> Optional[bool]:
        """
        Mandate redundant connections
        """
        return pulumi.get(self, "connection_redundancy_required")

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> Optional[bool]:
        """
        Enable auto generate service key
        """
        return pulumi.get(self, "enable_auto_generate_service_key")

    @property
    @pulumi.getter(name="linkProtocolConfig")
    def link_protocol_config(self) -> Optional['outputs.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult']:
        """
        Link protocol configuration details
        """
        return pulumi.get(self, "link_protocol_config")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[Sequence[int]]:
        """
        Supported bandwidths
        """
        return pulumi.get(self, "supported_bandwidths")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigApiConfigResult(dict):
    def __init__(__self__, *,
                 allow_over_subscription: Optional[bool] = None,
                 api_available: Optional[bool] = None,
                 bandwidth_from_api: Optional[bool] = None,
                 equinix_managed_port: Optional[bool] = None,
                 equinix_managed_vlan: Optional[bool] = None,
                 integration_id: Optional[str] = None,
                 over_subscription_limit: Optional[int] = None):
        """
        :param bool allow_over_subscription: Setting showing that oversubscription support is available (true) or not (false). The default is false
        :param bool api_available: Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        :param bool bandwidth_from_api: Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        :param bool equinix_managed_port: Setting indicating that the port is managed by Equinix (true) or not (false)
        :param bool equinix_managed_vlan: Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        :param str integration_id: A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        :param int over_subscription_limit: Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        if allow_over_subscription is not None:
            pulumi.set(__self__, "allow_over_subscription", allow_over_subscription)
        if api_available is not None:
            pulumi.set(__self__, "api_available", api_available)
        if bandwidth_from_api is not None:
            pulumi.set(__self__, "bandwidth_from_api", bandwidth_from_api)
        if equinix_managed_port is not None:
            pulumi.set(__self__, "equinix_managed_port", equinix_managed_port)
        if equinix_managed_vlan is not None:
            pulumi.set(__self__, "equinix_managed_vlan", equinix_managed_vlan)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if over_subscription_limit is not None:
            pulumi.set(__self__, "over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> Optional[bool]:
        """
        Setting showing that oversubscription support is available (true) or not (false). The default is false
        """
        return pulumi.get(self, "allow_over_subscription")

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> Optional[bool]:
        """
        Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
        """
        return pulumi.get(self, "api_available")

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> Optional[bool]:
        """
        Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
        """
        return pulumi.get(self, "bandwidth_from_api")

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> Optional[bool]:
        """
        Setting indicating that the port is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_port")

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> Optional[bool]:
        """
        Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_vlan")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[str]:
        """
        A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> Optional[int]:
        """
        Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
        """
        return pulumi.get(self, "over_subscription_limit")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 label: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        :param str description: Description of authorization key
        :param str label: Name of the parameter that must be provided to authorize the connection.
        :param bool required: Requirement to configure an authentication key.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of authorization key
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Name of the parameter that must be provided to authorize the connection.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Requirement to configure an authentication key.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfigResult(dict):
    def __init__(__self__, *,
                 encapsulation: Optional[str] = None,
                 encapsulation_strategy: Optional[str] = None,
                 reuse_vlan_s_tag: Optional[bool] = None):
        """
        :param str encapsulation: Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        :param str encapsulation_strategy: Additional tagging information required by the seller profile.
        :param bool reuse_vlan_s_tag: Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_strategy is not None:
            pulumi.set(__self__, "encapsulation_strategy", encapsulation_strategy)
        if reuse_vlan_s_tag is not None:
            pulumi.set(__self__, "reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[str]:
        """
        Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> Optional[str]:
        """
        Additional tagging information required by the seller profile.
        """
        return pulumi.get(self, "encapsulation_strategy")

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> Optional[bool]:
        """
        Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
        """
        return pulumi.get(self, "reuse_vlan_s_tag")


@pulumi.output_type
class GetServiceProfilesDatumAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceProfilesDatumChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceProfilesDatumCustomFieldResult(dict):
    def __init__(__self__, *,
                 data_type: str,
                 label: str,
                 required: bool,
                 capture_in_email: Optional[bool] = None,
                 description: Optional[str] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str data_type: Data type
        :param str label: Label
        :param bool required: Required field
        :param bool capture_in_email: Required field
        :param str description: Description
        :param Sequence[str] options: Options
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "required", required)
        if capture_in_email is not None:
            pulumi.set(__self__, "capture_in_email", capture_in_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Required field
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> Optional[bool]:
        """
        Required field
        """
        return pulumi.get(self, "capture_in_email")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Options
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class GetServiceProfilesDatumMarketingInfoResult(dict):
    def __init__(__self__, *,
                 logo: Optional[str] = None,
                 process_steps: Optional[Sequence['outputs.GetServiceProfilesDatumMarketingInfoProcessStepResult']] = None,
                 promotion: Optional[bool] = None):
        """
        :param str logo: Logo
        :param Sequence['GetServiceProfilesDatumMarketingInfoProcessStepArgs'] process_steps: Process Step
        :param bool promotion: Promotion
        """
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if process_steps is not None:
            pulumi.set(__self__, "process_steps", process_steps)
        if promotion is not None:
            pulumi.set(__self__, "promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> Optional[str]:
        """
        Logo
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Optional[Sequence['outputs.GetServiceProfilesDatumMarketingInfoProcessStepResult']]:
        """
        Process Step
        """
        return pulumi.get(self, "process_steps")

    @property
    @pulumi.getter
    def promotion(self) -> Optional[bool]:
        """
        Promotion
        """
        return pulumi.get(self, "promotion")


@pulumi.output_type
class GetServiceProfilesDatumMarketingInfoProcessStepResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 sub_title: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str description: Description
        :param str sub_title: Sub Title
        :param str title: Title
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sub_title is not None:
            pulumi.set(__self__, "sub_title", sub_title)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> Optional[str]:
        """
        Sub Title
        """
        return pulumi.get(self, "sub_title")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetServiceProfilesDatumMetroResult(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 display_name: Optional[str] = None,
                 ibxs: Optional[Sequence[str]] = None,
                 in_trail: Optional[bool] = None,
                 name: Optional[str] = None,
                 seller_regions: Optional[Mapping[str, str]] = None):
        """
        :param str code: Metro Code - Example SV
        :param str display_name: Display Name
        :param Sequence[str] ibxs: IBX- Equinix International Business Exchange list
        :param bool in_trail: In Trail
        :param str name: Metro Name
        :param Mapping[str, str] seller_regions: Seller Regions
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ibxs is not None:
            pulumi.set(__self__, "ibxs", ibxs)
        if in_trail is not None:
            pulumi.set(__self__, "in_trail", in_trail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if seller_regions is not None:
            pulumi.set(__self__, "seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Metro Code - Example SV
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def ibxs(self) -> Optional[Sequence[str]]:
        """
        IBX- Equinix International Business Exchange list
        """
        return pulumi.get(self, "ibxs")

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> Optional[bool]:
        """
        In Trail
        """
        return pulumi.get(self, "in_trail")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Optional[Mapping[str, str]]:
        """
        Seller Regions
        """
        return pulumi.get(self, "seller_regions")


@pulumi.output_type
class GetServiceProfilesDatumNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetServiceProfilesDatumPortResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 cross_connect_id: Optional[str] = None,
                 location: Optional['outputs.GetServiceProfilesDatumPortLocationResult'] = None,
                 seller_region: Optional[str] = None,
                 seller_region_description: Optional[str] = None):
        """
        :param str type: Colo/Port Type
        :param str uuid: Colo/Port Uuid
        :param str cross_connect_id: Cross Connect Id
        :param 'GetServiceProfilesDatumPortLocationArgs' location: Colo/Port Location
        :param str seller_region: Seller Region
        :param str seller_region_description: Seller Region details
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if cross_connect_id is not None:
            pulumi.set(__self__, "cross_connect_id", cross_connect_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if seller_region_description is not None:
            pulumi.set(__self__, "seller_region_description", seller_region_description)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Colo/Port Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> Optional[str]:
        """
        Cross Connect Id
        """
        return pulumi.get(self, "cross_connect_id")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.GetServiceProfilesDatumPortLocationResult']:
        """
        Colo/Port Location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[str]:
        """
        Seller Region
        """
        return pulumi.get(self, "seller_region")

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> Optional[str]:
        """
        Seller Region details
        """
        return pulumi.get(self, "seller_region_description")


@pulumi.output_type
class GetServiceProfilesDatumPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfilesDatumProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceProfilesDatumVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 type: str,
                 uuid: str,
                 interface_uuid: Optional[str] = None,
                 location: Optional['outputs.GetServiceProfilesDatumVirtualDeviceLocationResult'] = None):
        """
        :param str type: Virtual Device Type
        :param str uuid: Virtual Device Uuid
        :param str interface_uuid: Device Interface Uuid
        :param 'GetServiceProfilesDatumVirtualDeviceLocationArgs' location: Device Location
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if interface_uuid is not None:
            pulumi.set(__self__, "interface_uuid", interface_uuid)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Virtual Device Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="interfaceUuid")
    def interface_uuid(self) -> Optional[str]:
        """
        Device Interface Uuid
        """
        return pulumi.get(self, "interface_uuid")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.GetServiceProfilesDatumVirtualDeviceLocationResult']:
        """
        Device Location
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class GetServiceProfilesDatumVirtualDeviceLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceProfilesFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str]):
        """
        :param str operator: Operators to use on your filtered field with the values given. One of [=]
        :param str property: Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operators to use on your filtered field with the values given. One of [=]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceProfilesPaginationResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 offset: Optional[int] = None):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        """
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetServiceProfilesSortResult(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        :param str property: The property name to use in sorting. One of [/name /uuid /state /location/metroCode /location/metroName /package/code /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property name to use in sorting. One of [/name /uuid /state /location/metroCode /location/metroName /package/code /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceTokenAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceTokenChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceTokenNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetServiceTokenProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionResult(dict):
    def __init__(__self__, *,
                 a_sides: Sequence['outputs.GetServiceTokenServiceTokenConnectionASideResult'],
                 allow_custom_bandwidth: bool,
                 allow_remote_connection: bool,
                 bandwidth_limit: int,
                 supported_bandwidths: Sequence[int],
                 uuid: str,
                 z_sides: Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideResult'],
                 type: Optional[str] = None):
        """
        :param Sequence['GetServiceTokenServiceTokenConnectionASideArgs'] a_sides: A-Side Connection link protocol,virtual device or network configuration
        :param bool allow_custom_bandwidth: Allow custom bandwidth value
        :param bool allow_remote_connection: Authorization to connect remotely
        :param int bandwidth_limit: Connection bandwidth limit in Mbps
        :param Sequence[int] supported_bandwidths: List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        :param str uuid: Equinix-assigned connection identifier
        :param Sequence['GetServiceTokenServiceTokenConnectionZSideArgs'] z_sides: Z-Side Connection link protocol,virtual device or network configuration
        :param str type: Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
        """
        pulumi.set(__self__, "a_sides", a_sides)
        pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        pulumi.set(__self__, "allow_remote_connection", allow_remote_connection)
        pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "z_sides", z_sides)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionASideResult']:
        """
        A-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "a_sides")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        """
        Allow custom bandwidth value
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnection")
    def allow_remote_connection(self) -> bool:
        """
        Authorization to connect remotely
        """
        return pulumi.get(self, "allow_remote_connection")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> int:
        """
        Connection bandwidth limit in Mbps
        """
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        """
        List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        """
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned connection identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideResult']:
        """
        Z-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "z_sides")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideResult(dict):
    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorResult']):
        """
        :param Sequence['GetServiceTokenServiceTokenConnectionASideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorResult']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkResult',
                 type: str,
                 interface: Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult'] = None,
                 port: Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortResult'] = None,
                 virtual_device: Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult'] = None):
        """
        :param 'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortArgs' port: Port Configuration
        :param 'GetServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "type", type)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkResult':
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceResult']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortResult']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: str,
                 uuid: str):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult'],
                 name: str,
                 scope: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult']:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Network
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 bandwidth: int,
                 cvp_id: int,
                 encapsulation_protocol_type: str,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationResult'],
                 port_name: str,
                 priority: str,
                 type: str,
                 uuid: str):
        """
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cvp_id", cvp_id)
        pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "port_name", port_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> int:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> str:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationResult']:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> str:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Port
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 cluster: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideResult(dict):
    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorResult']):
        """
        :param Sequence['GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorResult']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkResult',
                 type: str,
                 interface: Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult'] = None,
                 port: Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortResult'] = None,
                 virtual_device: Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult'] = None):
        """
        :param 'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortArgs' port: Port Configuration
        :param 'GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "type", type)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkResult':
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceResult']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortResult']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: str,
                 uuid: str):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult'],
                 name: str,
                 scope: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult']:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Network
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 bandwidth: int,
                 cvp_id: int,
                 encapsulation_protocol_type: str,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationResult'],
                 port_name: str,
                 priority: str,
                 type: str,
                 uuid: str):
        """
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cvp_id", cvp_id)
        pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "port_name", port_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> int:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> str:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationResult']:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> str:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Port
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokenServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 cluster: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetServiceTokensDataAccountResult'],
                 change_logs: Sequence['outputs.GetServiceTokensDataChangeLogResult'],
                 description: str,
                 expiration_date_time: str,
                 href: str,
                 issuer_side: str,
                 name: str,
                 notifications: Sequence['outputs.GetServiceTokensDataNotificationResult'],
                 projects: Sequence['outputs.GetServiceTokensDataProjectResult'],
                 service_token_connections: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionResult'],
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param Sequence['GetServiceTokensDataAccountArgs'] accounts: Customer account information that is associated with this service token
        :param Sequence['GetServiceTokensDataChangeLogArgs'] change_logs: Captures connection lifecycle change information
        :param str description: Optional Description to the Service Token you will be creating
        :param str expiration_date_time: Expiration date and time of the service token; 2020-11-06T07:00:00Z
        :param str href: An absolute URL that is the subject of the link's context.
        :param str issuer_side: Information about token side; ASIDE, ZSIDE
        :param str name: Name of the Service Token
        :param Sequence['GetServiceTokensDataNotificationArgs'] notifications: Preferences for notifications on Service Token configuration or status changes
        :param Sequence['GetServiceTokensDataProjectArgs'] projects: Project information
        :param Sequence['GetServiceTokensDataServiceTokenConnectionArgs'] service_token_connections: Service Token Connection Type Information
        :param str state: Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        :param str type: Service Token Type; VC_TOKEN,EPL_TOKEN
        :param str uuid: Equinix-assigned service token identifier
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "change_logs", change_logs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expiration_date_time", expiration_date_time)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "issuer_side", issuer_side)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "service_token_connections", service_token_connections)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetServiceTokensDataAccountResult']:
        """
        Customer account information that is associated with this service token
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetServiceTokensDataChangeLogResult']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional Description to the Service Token you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirationDateTime")
    def expiration_date_time(self) -> str:
        """
        Expiration date and time of the service token; 2020-11-06T07:00:00Z
        """
        return pulumi.get(self, "expiration_date_time")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="issuerSide")
    def issuer_side(self) -> str:
        """
        Information about token side; ASIDE, ZSIDE
        """
        return pulumi.get(self, "issuer_side")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Token
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetServiceTokensDataNotificationResult']:
        """
        Preferences for notifications on Service Token configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetServiceTokensDataProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="serviceTokenConnections")
    def service_token_connections(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionResult']:
        """
        Service Token Connection Type Information
        """
        return pulumi.get(self, "service_token_connections")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service Token Type; VC_TOKEN,EPL_TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 account_number: int,
                 global_cust_id: str,
                 global_org_id: str,
                 global_organization_name: str,
                 org_id: int,
                 organization_name: str,
                 ucm_id: str):
        """
        :param str account_name: Legal name of the accountholder.
        :param int account_number: Equinix-assigned account number.
        :param str global_cust_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_org_id: Equinix-assigned ID of the subscriber's parent organization.
        :param str global_organization_name: Equinix-assigned name of the subscriber's parent organization.
        :param int org_id: Equinix-assigned ID of the subscriber's organization.
        :param str organization_name: Equinix-assigned name of the subscriber's organization.
        :param str ucm_id: Enterprise datastore id
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_number", account_number)
        pulumi.set(__self__, "global_cust_id", global_cust_id)
        pulumi.set(__self__, "global_org_id", global_org_id)
        pulumi.set(__self__, "global_organization_name", global_organization_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Legal name of the accountholder.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> int:
        """
        Equinix-assigned account number.
        """
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_cust_id")

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> str:
        """
        Equinix-assigned ID of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_org_id")

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's parent organization.
        """
        return pulumi.get(self, "global_organization_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        Equinix-assigned ID of the subscriber's organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        Equinix-assigned name of the subscriber's organization.
        """
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> str:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")


@pulumi.output_type
class GetServiceTokensDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: Created by User Key
        :param str created_by_email: Created by User Email Address
        :param str created_by_full_name: Created by User Full Name
        :param str created_date_time: Created by Date and Time
        :param str deleted_by: Deleted by User Key
        :param str deleted_by_email: Deleted by User Email Address
        :param str deleted_by_full_name: Deleted by User Full Name
        :param str deleted_date_time: Deleted by Date and Time
        :param str updated_by: Updated by User Key
        :param str updated_by_email: Updated by User Email Address
        :param str updated_by_full_name: Updated by User Full Name
        :param str updated_date_time: Updated by Date and Time
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Created by User Key
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Created by User Email Address
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Created by User Full Name
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Created by Date and Time
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        Deleted by User Key
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Deleted by User Email Address
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Deleted by User Full Name
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deleted by Date and Time
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Updated by User Key
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Updated by User Email Address
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Updated by User Full Name
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Updated by Date and Time
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetServiceTokensDataNotificationResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 type: str,
                 send_interval: Optional[str] = None):
        """
        :param Sequence[str] emails: Array of contact emails
        :param str type: Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        :param str send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[str]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")


@pulumi.output_type
class GetServiceTokensDataProjectResult(dict):
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionResult(dict):
    def __init__(__self__, *,
                 a_sides: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideResult'],
                 allow_custom_bandwidth: bool,
                 allow_remote_connection: bool,
                 bandwidth_limit: int,
                 supported_bandwidths: Sequence[int],
                 uuid: str,
                 z_sides: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideResult'],
                 type: Optional[str] = None):
        """
        :param Sequence['GetServiceTokensDataServiceTokenConnectionASideArgs'] a_sides: A-Side Connection link protocol,virtual device or network configuration
        :param bool allow_custom_bandwidth: Allow custom bandwidth value
        :param bool allow_remote_connection: Authorization to connect remotely
        :param int bandwidth_limit: Connection bandwidth limit in Mbps
        :param Sequence[int] supported_bandwidths: List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        :param str uuid: Equinix-assigned connection identifier
        :param Sequence['GetServiceTokensDataServiceTokenConnectionZSideArgs'] z_sides: Z-Side Connection link protocol,virtual device or network configuration
        :param str type: Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
        """
        pulumi.set(__self__, "a_sides", a_sides)
        pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        pulumi.set(__self__, "allow_remote_connection", allow_remote_connection)
        pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "z_sides", z_sides)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideResult']:
        """
        A-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "a_sides")

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> bool:
        """
        Allow custom bandwidth value
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @property
    @pulumi.getter(name="allowRemoteConnection")
    def allow_remote_connection(self) -> bool:
        """
        Authorization to connect remotely
        """
        return pulumi.get(self, "allow_remote_connection")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> int:
        """
        Connection bandwidth limit in Mbps
        """
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Sequence[int]:
        """
        List of permitted bandwidths'; For Port-based Service Tokens, the maximum allowable bandwidth is 50 Gbps, while for Virtual Device-based Service Tokens, it is limited to 10 Gbps
        """
        return pulumi.get(self, "supported_bandwidths")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned connection identifier
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideResult']:
        """
        Z-Side Connection link protocol,virtual device or network configuration
        """
        return pulumi.get(self, "z_sides")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of Connection supported by Service Token you will create; EVPL_VC, EVPLAN_VC, EPLAN_VC, IPWAN_VC
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideResult(dict):
    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorResult']):
        """
        :param Sequence['GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorResult']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkResult',
                 type: str,
                 interface: Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult'] = None,
                 port: Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortResult'] = None,
                 virtual_device: Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult'] = None):
        """
        :param 'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortArgs' port: Port Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "type", type)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkResult':
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorInterfaceResult']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortResult']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: str,
                 uuid: str):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult'],
                 name: str,
                 scope: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult']:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Network
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorNetworkLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 bandwidth: int,
                 cvp_id: int,
                 encapsulation_protocol_type: str,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortLocationResult'],
                 port_name: str,
                 priority: str,
                 type: str,
                 uuid: str):
        """
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cvp_id", cvp_id)
        pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "port_name", port_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> int:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> str:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortLocationResult']:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> str:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Port
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionASideAccessPointSelectorVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 cluster: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideResult(dict):
    def __init__(__self__, *,
                 access_point_selectors: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorResult']):
        """
        :param Sequence['GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorArgs'] access_point_selectors: List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        pulumi.set(__self__, "access_point_selectors", access_point_selectors)

    @property
    @pulumi.getter(name="accessPointSelectors")
    def access_point_selectors(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorResult']:
        """
        List of criteria for selecting network access points with optimal efficiency, security, compatibility, and availability
        """
        return pulumi.get(self, "access_point_selectors")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkResult',
                 type: str,
                 interface: Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorInterfaceResult'] = None,
                 link_protocol: Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult'] = None,
                 port: Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortResult'] = None,
                 virtual_device: Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult'] = None):
        """
        :param 'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkArgs' network: Network Configuration
        :param str type: Type of Access point; COLO, VD, NETWORK
        :param 'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorInterfaceArgs' interface: Virtual Device Interface Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorLinkProtocolArgs' link_protocol: Link protocol Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortArgs' port: Port Configuration
        :param 'GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceArgs' virtual_device: Virtual Device Configuration
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "type", type)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkResult':
        """
        Network Configuration
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Access point; COLO, VD, NETWORK
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def interface(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorInterfaceResult']:
        """
        Virtual Device Interface Configuration
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult']:
        """
        Link protocol Configuration
        """
        return pulumi.get(self, "link_protocol")

    @property
    @pulumi.getter
    def port(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortResult']:
        """
        Port Configuration
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult']:
        """
        Virtual Device Configuration
        """
        return pulumi.get(self, "virtual_device")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorInterfaceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 type: str,
                 uuid: str):
        """
        :param int id: id
        :param str type: Interface type
        :param str uuid: Equinix-assigned interface identifier
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorLinkProtocolResult(dict):
    def __init__(__self__, *,
                 type: str,
                 vlan_c_tag: int,
                 vlan_s_tag: int,
                 vlan_tag: int):
        """
        :param str type: Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        :param int vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param int vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param int vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> int:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> int:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> int:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult'],
                 name: str,
                 scope: str,
                 type: str,
                 uuid: str):
        """
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkLocationArgs'] locations: Location
        :param str name: Network Name
        :param str scope: Scope of Network
        :param str type: Type of Network
        :param str uuid: Equinix-assigned Network identifier
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult']:
        """
        Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Scope of Network
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Network
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Network identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorNetworkLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 bandwidth: int,
                 cvp_id: int,
                 encapsulation_protocol_type: str,
                 href: str,
                 locations: Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortLocationResult'],
                 port_name: str,
                 priority: str,
                 type: str,
                 uuid: str):
        """
        :param str account_name: Account Name
        :param int bandwidth: Port Bandwidth
        :param int cvp_id: Customer virtual port Id
        :param str encapsulation_protocol_type: Port Encapsulation
        :param str href: Unique Resource Identifier
        :param Sequence['GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortLocationArgs'] locations: Port Location
        :param str port_name: Port Name
        :param str priority: Port Priority
        :param str type: Type of Port
        :param str uuid: Equinix-assigned Port identifier
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cvp_id", cvp_id)
        pulumi.set(__self__, "encapsulation_protocol_type", encapsulation_protocol_type)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "port_name", port_name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Port Bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cvpId")
    def cvp_id(self) -> int:
        """
        Customer virtual port Id
        """
        return pulumi.get(self, "cvp_id")

    @property
    @pulumi.getter(name="encapsulationProtocolType")
    def encapsulation_protocol_type(self) -> str:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation_protocol_type")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortLocationResult']:
        """
        Port Location
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> str:
        """
        Port Name
        """
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        Port Priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Port
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Port identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorPortLocationResult(dict):
    def __init__(__self__, *,
                 ibx: str,
                 metro_code: str,
                 metro_name: str,
                 region: str):
        """
        :param str ibx: IBX Code
        :param str metro_code: Access point metro code
        :param str metro_name: Access point metro name
        :param str region: Access point region
        """
        pulumi.set(__self__, "ibx", ibx)
        pulumi.set(__self__, "metro_code", metro_code)
        pulumi.set(__self__, "metro_name", metro_name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> str:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> str:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> str:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Access point region
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetServiceTokensDataServiceTokenConnectionZSideAccessPointSelectorVirtualDeviceResult(dict):
    def __init__(__self__, *,
                 cluster: str,
                 href: str,
                 name: str,
                 type: str,
                 uuid: str):
        """
        :param str cluster: Virtual Device Cluster Information
        :param str href: Unique Resource Identifier
        :param str name: Customer-assigned Virtual Device Name
        :param str type: Virtual Device type
        :param str uuid: Equinix-assigned Virtual Device identifier
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        Virtual Device Cluster Information
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-assigned Virtual Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Virtual Device type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned Virtual Device identifier
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetServiceTokensFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str]):
        """
        :param str operator: Possible operators to use on the filter property. Can be one of the following: [ "=", "!=", "[NOT] LIKE", "[NOT] IN", "ILIKE" ]
        :param str property: The API response property which you want to filter your request on. Can be one of the following: "/type", "/name", "/project/projectId", "/uuid", "/state"
        :param Sequence[str] values: The values that you want to apply the property+operator combination to in order to filter your data search
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Possible operators to use on the filter property. Can be one of the following: [ "=", "!=", "[NOT] LIKE", "[NOT] IN", "ILIKE" ]
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values that you want to apply the property+operator combination to in order to filter your data search
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The API response property which you want to filter your request on. Can be one of the following: "/type", "/name", "/project/projectId", "/uuid", "/state"
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetServiceTokensPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        :param str next: URL relative to the last item in the response.
        :param int offset: The page offset for the pagination request. Index of the first element. Default is 0.
        :param str previous: URL relative to the first item in the response.
        :param int total: Total number of elements returned.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        URL relative to the last item in the response.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        The page offset for the pagination request. Index of the first element. Default is 0.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        URL relative to the first item in the response.
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of elements returned.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetStreamAttachmentsDataResult(dict):
    def __init__(__self__, *,
                 attachment_status: str,
                 href: str,
                 metrics_enabled: bool,
                 type: str,
                 uuid: str):
        """
        :param str attachment_status: Value representing status for the stream attachment
        :param str href: Equinix auto generated URI to the stream attachment in Equinix Portal
        :param bool metrics_enabled: Boolean value indicating enablement of metrics for this asset stream attachment
        :param str type: Equinix defined type for the asset stream attachment
        :param str uuid: Equinix-assigned unique id for the stream attachment
        """
        pulumi.set(__self__, "attachment_status", attachment_status)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Value representing status for the stream attachment
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the stream attachment in Equinix Portal
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> bool:
        """
        Boolean value indicating enablement of metrics for this asset stream attachment
        """
        return pulumi.get(self, "metrics_enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined type for the asset stream attachment
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the stream attachment
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetStreamAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 values: Sequence[str],
                 or_: Optional[bool] = None):
        """
        :param str operator: Operation applied to the values of the filter
        :param str property: Property to apply the filter to
        :param Sequence[str] values: List of values to apply the operation to for the specified property
        :param bool or_: Boolean value to specify if this filter is a part of the OR group. Has a maximum of 3 and only counts for 1 of the 8 possible filters
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)
        if or_ is not None:
            pulumi.set(__self__, "or_", or_)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operation applied to the values of the filter
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        List of values to apply the operation to for the specified property
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="or")
    def or_(self) -> Optional[bool]:
        """
        Boolean value to specify if this filter is a part of the OR group. Has a maximum of 3 and only counts for 1 of the 8 possible filters
        """
        return pulumi.get(self, "or_")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        Property to apply the filter to
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetStreamAttachmentsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of streams available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of streams available to the user making the request
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetStreamAttachmentsSortResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 property: str):
        """
        :param str direction: The sorting direction of the property chosen. ASC or DESC
        :param str property: The field name the sorting is performed on
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        The sorting direction of the property chosen. ASC or DESC
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The field name the sorting is performed on
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class GetStreamChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetStreamProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetStreamSubscriptionChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetStreamSubscriptionEventSelectorResult(dict):
    def __init__(__self__, *,
                 excepts: Sequence[str],
                 includes: Sequence[str]):
        """
        :param Sequence[str] excepts: List of events to exclude
        :param Sequence[str] includes: List of events to include
        """
        pulumi.set(__self__, "excepts", excepts)
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def excepts(self) -> Sequence[str]:
        """
        List of events to exclude
        """
        return pulumi.get(self, "excepts")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of events to include
        """
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetStreamSubscriptionMetricSelectorResult(dict):
    def __init__(__self__, *,
                 excepts: Sequence[str],
                 includes: Sequence[str]):
        """
        :param Sequence[str] excepts: List of metrics to exclude
        :param Sequence[str] includes: List of metrics to include
        """
        pulumi.set(__self__, "excepts", excepts)
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def excepts(self) -> Sequence[str]:
        """
        List of metrics to exclude
        """
        return pulumi.get(self, "excepts")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of metrics to include
        """
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetStreamSubscriptionSinkResult(dict):
    def __init__(__self__, *,
                 batch_enabled: bool,
                 batch_size_max: int,
                 batch_wait_time_max: int,
                 credential: 'outputs.GetStreamSubscriptionSinkCredentialResult',
                 host: str,
                 settings: 'outputs.GetStreamSubscriptionSinkSettingsResult',
                 type: str,
                 uri: str):
        """
        :param bool batch_enabled: Boolean switch enabling batch delivery of data
        :param int batch_size_max: Maximum size of the batch delivery if enabled
        :param int batch_wait_time_max: Maximum time to wait for batch delivery if enabled
        :param 'GetStreamSubscriptionSinkCredentialArgs' credential: Access details for the specified sink type
        :param str host: Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        :param 'GetStreamSubscriptionSinkSettingsArgs' settings: Stream subscription sink settings
        :param str type: Type of the subscriber
        :param str uri: Publicly reachable http endpoint destination for data stream
        """
        pulumi.set(__self__, "batch_enabled", batch_enabled)
        pulumi.set(__self__, "batch_size_max", batch_size_max)
        pulumi.set(__self__, "batch_wait_time_max", batch_wait_time_max)
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="batchEnabled")
    def batch_enabled(self) -> bool:
        """
        Boolean switch enabling batch delivery of data
        """
        return pulumi.get(self, "batch_enabled")

    @property
    @pulumi.getter(name="batchSizeMax")
    def batch_size_max(self) -> int:
        """
        Maximum size of the batch delivery if enabled
        """
        return pulumi.get(self, "batch_size_max")

    @property
    @pulumi.getter(name="batchWaitTimeMax")
    def batch_wait_time_max(self) -> int:
        """
        Maximum time to wait for batch delivery if enabled
        """
        return pulumi.get(self, "batch_wait_time_max")

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetStreamSubscriptionSinkCredentialResult':
        """
        Access details for the specified sink type
        """
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.GetStreamSubscriptionSinkSettingsResult':
        """
        Stream subscription sink settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the subscriber
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Publicly reachable http endpoint destination for data stream
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetStreamSubscriptionSinkCredentialResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 integration_key: str,
                 password: str,
                 type: str,
                 username: str):
        """
        :param str access_token: Passed as Authorization header value
        :param str api_key: Passed as Authorization header value
        :param str integration_key: Passed as Authorization header value
        :param str password: Passed as Authorization header value
        :param str type: Type of the credential being passed
        :param str username: Passed as Authorization header value
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the credential being passed
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStreamSubscriptionSinkSettingsResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 integration_key: str,
                 password: str,
                 type: str,
                 username: str):
        """
        :param str access_token: Passed as Authorization header value
        :param str api_key: Passed as Authorization header value
        :param str integration_key: Passed as Authorization header value
        :param str password: Passed as Authorization header value
        :param str type: Type of the stream subscription request
        :param str username: Passed as Authorization header value
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStreamSubscriptionsDataResult(dict):
    def __init__(__self__, *,
                 change_log: 'outputs.GetStreamSubscriptionsDataChangeLogResult',
                 description: str,
                 enabled: bool,
                 event_selector: 'outputs.GetStreamSubscriptionsDataEventSelectorResult',
                 href: str,
                 metric_selector: 'outputs.GetStreamSubscriptionsDataMetricSelectorResult',
                 name: str,
                 sink: 'outputs.GetStreamSubscriptionsDataSinkResult',
                 state: str,
                 type: str,
                 uuid: str):
        """
        :param 'GetStreamSubscriptionsDataChangeLogArgs' change_log: Details of the last change on the stream resource
        :param str description: Customer-provided stream subscription description
        :param bool enabled: Stream subscription enabled status
        :param 'GetStreamSubscriptionsDataEventSelectorArgs' event_selector: Lists of events to be included/excluded on the stream subscription
        :param str href: Equinix assigned URI of the stream subscription resource
        :param 'GetStreamSubscriptionsDataMetricSelectorArgs' metric_selector: Lists of metrics to be included/excluded on the stream subscription
        :param str name: Customer-provided stream subscription name
        :param 'GetStreamSubscriptionsDataSinkArgs' sink: The details of the subscriber to the Equinix Stream
        :param str state: Value representing provisioning status for the stream resource
        :param str type: Type of the stream subscription request
        :param str uuid: Equinix assigned unique identifier of the stream subscription resource
        """
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_selector", event_selector)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "metric_selector", metric_selector)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sink", sink)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetStreamSubscriptionsDataChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided stream subscription description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventSelector")
    def event_selector(self) -> 'outputs.GetStreamSubscriptionsDataEventSelectorResult':
        """
        Lists of events to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "event_selector")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix assigned URI of the stream subscription resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> 'outputs.GetStreamSubscriptionsDataMetricSelectorResult':
        """
        Lists of metrics to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-provided stream subscription name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sink(self) -> 'outputs.GetStreamSubscriptionsDataSinkResult':
        """
        The details of the subscriber to the Equinix Stream
        """
        return pulumi.get(self, "sink")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix assigned unique identifier of the stream subscription resource
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetStreamSubscriptionsDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetStreamSubscriptionsDataEventSelectorResult(dict):
    def __init__(__self__, *,
                 excepts: Sequence[str],
                 includes: Sequence[str]):
        """
        :param Sequence[str] excepts: List of events to exclude
        :param Sequence[str] includes: List of events to include
        """
        pulumi.set(__self__, "excepts", excepts)
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def excepts(self) -> Sequence[str]:
        """
        List of events to exclude
        """
        return pulumi.get(self, "excepts")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of events to include
        """
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetStreamSubscriptionsDataMetricSelectorResult(dict):
    def __init__(__self__, *,
                 excepts: Sequence[str],
                 includes: Sequence[str]):
        """
        :param Sequence[str] excepts: List of metrics to exclude
        :param Sequence[str] includes: List of metrics to include
        """
        pulumi.set(__self__, "excepts", excepts)
        pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def excepts(self) -> Sequence[str]:
        """
        List of metrics to exclude
        """
        return pulumi.get(self, "excepts")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of metrics to include
        """
        return pulumi.get(self, "includes")


@pulumi.output_type
class GetStreamSubscriptionsDataSinkResult(dict):
    def __init__(__self__, *,
                 batch_enabled: bool,
                 batch_size_max: int,
                 batch_wait_time_max: int,
                 credential: 'outputs.GetStreamSubscriptionsDataSinkCredentialResult',
                 host: str,
                 settings: 'outputs.GetStreamSubscriptionsDataSinkSettingsResult',
                 type: str,
                 uri: str):
        """
        :param bool batch_enabled: Boolean switch enabling batch delivery of data
        :param int batch_size_max: Maximum size of the batch delivery if enabled
        :param int batch_wait_time_max: Maximum time to wait for batch delivery if enabled
        :param 'GetStreamSubscriptionsDataSinkCredentialArgs' credential: Access details for the specified sink type
        :param str host: Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        :param 'GetStreamSubscriptionsDataSinkSettingsArgs' settings: Stream subscription sink settings
        :param str type: Type of the subscriber
        :param str uri: Publicly reachable http endpoint destination for data stream
        """
        pulumi.set(__self__, "batch_enabled", batch_enabled)
        pulumi.set(__self__, "batch_size_max", batch_size_max)
        pulumi.set(__self__, "batch_wait_time_max", batch_wait_time_max)
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="batchEnabled")
    def batch_enabled(self) -> bool:
        """
        Boolean switch enabling batch delivery of data
        """
        return pulumi.get(self, "batch_enabled")

    @property
    @pulumi.getter(name="batchSizeMax")
    def batch_size_max(self) -> int:
        """
        Maximum size of the batch delivery if enabled
        """
        return pulumi.get(self, "batch_size_max")

    @property
    @pulumi.getter(name="batchWaitTimeMax")
    def batch_wait_time_max(self) -> int:
        """
        Maximum time to wait for batch delivery if enabled
        """
        return pulumi.get(self, "batch_wait_time_max")

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.GetStreamSubscriptionsDataSinkCredentialResult':
        """
        Access details for the specified sink type
        """
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Known hostname of certain data stream subscription products. Not to be confused with a variable URI
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.GetStreamSubscriptionsDataSinkSettingsResult':
        """
        Stream subscription sink settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the subscriber
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Publicly reachable http endpoint destination for data stream
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetStreamSubscriptionsDataSinkCredentialResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 integration_key: str,
                 password: str,
                 type: str,
                 username: str):
        """
        :param str access_token: Passed as Authorization header value
        :param str api_key: Passed as Authorization header value
        :param str integration_key: Passed as Authorization header value
        :param str password: Passed as Authorization header value
        :param str type: Type of the credential being passed
        :param str username: Passed as Authorization header value
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the credential being passed
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStreamSubscriptionsDataSinkSettingsResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 api_key: str,
                 integration_key: str,
                 password: str,
                 type: str,
                 username: str):
        """
        :param str access_token: Passed as Authorization header value
        :param str api_key: Passed as Authorization header value
        :param str integration_key: Passed as Authorization header value
        :param str password: Passed as Authorization header value
        :param str username: Passed as Authorization header value
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Passed as Authorization header value
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStreamSubscriptionsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of streams available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of streams available to the user making the request
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetStreamsDataResult(dict):
    def __init__(__self__, *,
                 assets_count: int,
                 change_log: 'outputs.GetStreamsDataChangeLogResult',
                 description: str,
                 href: str,
                 name: str,
                 project: 'outputs.GetStreamsDataProjectResult',
                 state: str,
                 stream_subscriptions_count: int,
                 type: str,
                 uuid: str):
        """
        :param int assets_count: Count of the streaming assets attached to the stream resource
        :param 'GetStreamsDataChangeLogArgs' change_log: Details of the last change on the stream resource
        :param str description: Customer-provided description of the stream resource
        :param str href: Equinix auto generated URI to the stream resource in Equinix Portal
        :param str name: Customer-provided name of the stream resource
        :param 'GetStreamsDataProjectArgs' project: Equinix Project attribute object
        :param str state: Value representing provisioning status for the stream resource
        :param int stream_subscriptions_count: Count of the client subscriptions on the stream resource
        :param str type: Equinix defined Streaming Type
        :param str uuid: Equinix-assigned unique id for the stream resource
        """
        pulumi.set(__self__, "assets_count", assets_count)
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "stream_subscriptions_count", stream_subscriptions_count)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="assetsCount")
    def assets_count(self) -> int:
        """
        Count of the streaming assets attached to the stream resource
        """
        return pulumi.get(self, "assets_count")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> 'outputs.GetStreamsDataChangeLogResult':
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Customer-provided description of the stream resource
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the stream resource in Equinix Portal
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Customer-provided name of the stream resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> 'outputs.GetStreamsDataProjectResult':
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamSubscriptionsCount")
    def stream_subscriptions_count(self) -> int:
        """
        Count of the client subscriptions on the stream resource
        """
        return pulumi.get(self, "stream_subscriptions_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined Streaming Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the stream resource
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetStreamsDataChangeLogResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_by_email: str,
                 created_by_full_name: str,
                 created_date_time: str,
                 deleted_by: str,
                 deleted_by_email: str,
                 deleted_by_full_name: str,
                 deleted_date_time: str,
                 updated_by: str,
                 updated_by_email: str,
                 updated_by_full_name: str,
                 updated_date_time: str):
        """
        :param str created_by: User name of creator of the stream resource
        :param str created_by_email: Email of creator of the stream resource
        :param str created_by_full_name: Legal name of creator of the stream resource
        :param str created_date_time: Creation time of the stream resource
        :param str deleted_by: User name of deleter of the stream resource
        :param str deleted_by_email: Email of deleter of the stream resource
        :param str deleted_by_full_name: Legal name of deleter of the stream resource
        :param str deleted_date_time: Deletion time of the stream resource
        :param str updated_by: User name of last updater of the stream resource
        :param str updated_by_email: Email of last updater of the stream resource
        :param str updated_by_full_name: Legal name of last updater of the stream resource
        :param str updated_date_time: Last update time of the stream resource
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_email", created_by_email)
        pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        pulumi.set(__self__, "created_date_time", created_date_time)
        pulumi.set(__self__, "deleted_by", deleted_by)
        pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_email", updated_by_email)
        pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        User name of creator of the stream resource
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> str:
        """
        Email of creator of the stream resource
        """
        return pulumi.get(self, "created_by_email")

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> str:
        """
        Legal name of creator of the stream resource
        """
        return pulumi.get(self, "created_by_full_name")

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> str:
        """
        Creation time of the stream resource
        """
        return pulumi.get(self, "created_date_time")

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> str:
        """
        User name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by")

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> str:
        """
        Email of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_email")

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> str:
        """
        Legal name of deleter of the stream resource
        """
        return pulumi.get(self, "deleted_by_full_name")

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> str:
        """
        Deletion time of the stream resource
        """
        return pulumi.get(self, "deleted_date_time")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        User name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> str:
        """
        Email of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_email")

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> str:
        """
        Legal name of last updater of the stream resource
        """
        return pulumi.get(self, "updated_by_full_name")

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> str:
        """
        Last update time of the stream resource
        """
        return pulumi.get(self, "updated_date_time")


@pulumi.output_type
class GetStreamsDataProjectResult(dict):
    def __init__(__self__, *,
                 project_id: str):
        """
        :param str project_id: Equinix Subscriber-assigned project ID
        """
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Equinix Subscriber-assigned project ID
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetStreamsPaginationResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 next: str,
                 offset: int,
                 previous: str,
                 total: int):
        """
        :param int limit: Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        :param str next: The URL relative to the next item in the response
        :param int offset: Index of the first item returned in the response. The default is 0
        :param str previous: The URL relative to the previous item in the response
        :param int total: The total number of streams available to the user making the request
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "next", next)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "previous", previous)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of search results returned per page. Number must be between 1 and 100, and the default is 20
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def next(self) -> str:
        """
        The URL relative to the next item in the response
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        Index of the first item returned in the response. The default is 0
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def previous(self) -> str:
        """
        The URL relative to the previous item in the response
        """
        return pulumi.get(self, "previous")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of streams available to the user making the request
        """
        return pulumi.get(self, "total")


