# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamAttachmentArgs', 'StreamAttachment']

@pulumi.input_type
class StreamAttachmentArgs:
    def __init__(__self__, *,
                 asset: pulumi.Input[str],
                 asset_id: pulumi.Input[str],
                 stream_id: pulumi.Input[str],
                 metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 timeouts: Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a StreamAttachment resource.
        :param pulumi.Input[str] asset: Equinix defined asset category. Matches the product name the asset is a part of
        :param pulumi.Input[str] asset_id: Equinix defined UUID of the asset being attached to the stream
        :param pulumi.Input[str] stream_id: UUID of the stream that is the target of this asset attachment
        :param pulumi.Input[bool] metrics_enabled: Boolean value indicating enablement of metrics for this asset stream attachment
        """
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "asset_id", asset_id)
        pulumi.set(__self__, "stream_id", stream_id)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def asset(self) -> pulumi.Input[str]:
        """
        Equinix defined asset category. Matches the product name the asset is a part of
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> pulumi.Input[str]:
        """
        Equinix defined UUID of the asset being attached to the stream
        """
        return pulumi.get(self, "asset_id")

    @asset_id.setter
    def asset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset_id", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Input[str]:
        """
        UUID of the stream that is the target of this asset attachment
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating enablement of metrics for this asset stream attachment
        """
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StreamAttachmentState:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[str]] = None,
                 asset_id: Optional[pulumi.Input[str]] = None,
                 attachment_status: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamAttachment resources.
        :param pulumi.Input[str] asset: Equinix defined asset category. Matches the product name the asset is a part of
        :param pulumi.Input[str] asset_id: Equinix defined UUID of the asset being attached to the stream
        :param pulumi.Input[str] attachment_status: Value representing status for the stream attachment
        :param pulumi.Input[str] href: Equinix auto generated URI to the stream attachment in Equinix Portal
        :param pulumi.Input[bool] metrics_enabled: Boolean value indicating enablement of metrics for this asset stream attachment
        :param pulumi.Input[str] stream_id: UUID of the stream that is the target of this asset attachment
        :param pulumi.Input[str] type: Equinix defined type for the asset stream attachment
        :param pulumi.Input[str] uuid: Equinix-assigned unique id for the stream attachment
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if asset_id is not None:
            pulumi.set(__self__, "asset_id", asset_id)
        if attachment_status is not None:
            pulumi.set(__self__, "attachment_status", attachment_status)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if metrics_enabled is not None:
            pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix defined asset category. Matches the product name the asset is a part of
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix defined UUID of the asset being attached to the stream
        """
        return pulumi.get(self, "asset_id")

    @asset_id.setter
    def asset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_id", value)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing status for the stream attachment
        """
        return pulumi.get(self, "attachment_status")

    @attachment_status.setter
    def attachment_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attachment_status", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix auto generated URI to the stream attachment in Equinix Portal
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating enablement of metrics for this asset stream attachment
        """
        return pulumi.get(self, "metrics_enabled")

    @metrics_enabled.setter
    def metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics_enabled", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the stream that is the target of this asset attachment
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix defined type for the asset stream attachment
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned unique id for the stream attachment
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class StreamAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset: Optional[pulumi.Input[str]] = None,
                 asset_id: Optional[pulumi.Input[str]] = None,
                 metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAttachmentTimeoutsArgs', 'StreamAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Attachments

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        asset = equinix.fabric.StreamAttachment("asset",
            asset="<asset_group>",
            asset_id="<id_of_the_asset_being_attached>",
            stream_id="<id_of_the_stream_asset_is_being_attached_to>")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asset: Equinix defined asset category. Matches the product name the asset is a part of
        :param pulumi.Input[str] asset_id: Equinix defined UUID of the asset being attached to the stream
        :param pulumi.Input[bool] metrics_enabled: Boolean value indicating enablement of metrics for this asset stream attachment
        :param pulumi.Input[str] stream_id: UUID of the stream that is the target of this asset attachment
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Attachments

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        asset = equinix.fabric.StreamAttachment("asset",
            asset="<asset_group>",
            asset_id="<id_of_the_asset_being_attached>",
            stream_id="<id_of_the_stream_asset_is_being_attached_to>")
        ```

        :param str resource_name: The name of the resource.
        :param StreamAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset: Optional[pulumi.Input[str]] = None,
                 asset_id: Optional[pulumi.Input[str]] = None,
                 metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamAttachmentTimeoutsArgs', 'StreamAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamAttachmentArgs.__new__(StreamAttachmentArgs)

            if asset is None and not opts.urn:
                raise TypeError("Missing required property 'asset'")
            __props__.__dict__["asset"] = asset
            if asset_id is None and not opts.urn:
                raise TypeError("Missing required property 'asset_id'")
            __props__.__dict__["asset_id"] = asset_id
            __props__.__dict__["metrics_enabled"] = metrics_enabled
            if stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'stream_id'")
            __props__.__dict__["stream_id"] = stream_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["attachment_status"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        super(StreamAttachment, __self__).__init__(
            'equinix:fabric/streamAttachment:StreamAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset: Optional[pulumi.Input[str]] = None,
            asset_id: Optional[pulumi.Input[str]] = None,
            attachment_status: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            metrics_enabled: Optional[pulumi.Input[bool]] = None,
            stream_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['StreamAttachmentTimeoutsArgs', 'StreamAttachmentTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'StreamAttachment':
        """
        Get an existing StreamAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] asset: Equinix defined asset category. Matches the product name the asset is a part of
        :param pulumi.Input[str] asset_id: Equinix defined UUID of the asset being attached to the stream
        :param pulumi.Input[str] attachment_status: Value representing status for the stream attachment
        :param pulumi.Input[str] href: Equinix auto generated URI to the stream attachment in Equinix Portal
        :param pulumi.Input[bool] metrics_enabled: Boolean value indicating enablement of metrics for this asset stream attachment
        :param pulumi.Input[str] stream_id: UUID of the stream that is the target of this asset attachment
        :param pulumi.Input[str] type: Equinix defined type for the asset stream attachment
        :param pulumi.Input[str] uuid: Equinix-assigned unique id for the stream attachment
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamAttachmentState.__new__(_StreamAttachmentState)

        __props__.__dict__["asset"] = asset
        __props__.__dict__["asset_id"] = asset_id
        __props__.__dict__["attachment_status"] = attachment_status
        __props__.__dict__["href"] = href
        __props__.__dict__["metrics_enabled"] = metrics_enabled
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return StreamAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def asset(self) -> pulumi.Output[str]:
        """
        Equinix defined asset category. Matches the product name the asset is a part of
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> pulumi.Output[str]:
        """
        Equinix defined UUID of the asset being attached to the stream
        """
        return pulumi.get(self, "asset_id")

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> pulumi.Output[str]:
        """
        Value representing status for the stream attachment
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix auto generated URI to the stream attachment in Equinix Portal
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> pulumi.Output[bool]:
        """
        Boolean value indicating enablement of metrics for this asset stream attachment
        """
        return pulumi.get(self, "metrics_enabled")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[str]:
        """
        UUID of the stream that is the target of this asset attachment
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StreamAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Equinix defined type for the asset stream attachment
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix-assigned unique id for the stream attachment
        """
        return pulumi.get(self, "uuid")

