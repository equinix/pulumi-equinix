# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetStreamAttachmentResult',
    'AwaitableGetStreamAttachmentResult',
    'get_stream_attachment',
    'get_stream_attachment_output',
]

@pulumi.output_type
class GetStreamAttachmentResult:
    """
    A collection of values returned by getStreamAttachment.
    """
    def __init__(__self__, asset=None, asset_id=None, attachment_status=None, href=None, id=None, metrics_enabled=None, stream_id=None, type=None, uuid=None):
        if asset and not isinstance(asset, str):
            raise TypeError("Expected argument 'asset' to be a str")
        pulumi.set(__self__, "asset", asset)
        if asset_id and not isinstance(asset_id, str):
            raise TypeError("Expected argument 'asset_id' to be a str")
        pulumi.set(__self__, "asset_id", asset_id)
        if attachment_status and not isinstance(attachment_status, str):
            raise TypeError("Expected argument 'attachment_status' to be a str")
        pulumi.set(__self__, "attachment_status", attachment_status)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metrics_enabled and not isinstance(metrics_enabled, bool):
            raise TypeError("Expected argument 'metrics_enabled' to be a bool")
        pulumi.set(__self__, "metrics_enabled", metrics_enabled)
        if stream_id and not isinstance(stream_id, str):
            raise TypeError("Expected argument 'stream_id' to be a str")
        pulumi.set(__self__, "stream_id", stream_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def asset(self) -> str:
        """
        Equinix defined asset category. Matches the product name the asset is a part of
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> str:
        """
        Equinix defined UUID of the asset being attached to the stream
        """
        return pulumi.get(self, "asset_id")

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Value representing status for the stream attachment
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Equinix auto generated URI to the stream attachment in Equinix Portal
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricsEnabled")
    def metrics_enabled(self) -> bool:
        """
        Boolean value indicating enablement of metrics for this asset stream attachment
        """
        return pulumi.get(self, "metrics_enabled")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> str:
        """
        The uuid of the stream this data source should retrieve
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Equinix defined type for the asset stream attachment
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned unique id for the stream attachment
        """
        return pulumi.get(self, "uuid")


class AwaitableGetStreamAttachmentResult(GetStreamAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamAttachmentResult(
            asset=self.asset,
            asset_id=self.asset_id,
            attachment_status=self.attachment_status,
            href=self.href,
            id=self.id,
            metrics_enabled=self.metrics_enabled,
            stream_id=self.stream_id,
            type=self.type,
            uuid=self.uuid)


def get_stream_attachment(asset: Optional[str] = None,
                          asset_id: Optional[str] = None,
                          stream_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamAttachmentResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    by_ids = equinix.fabric.get_stream_attachment(asset="<asset_group>",
        asset_id="<id_of_the_asset_being_attached>",
        stream_id="<id_of_the_stream_asset_is_being_attached_to>")
    ```


    :param str asset: Equinix defined asset category. Matches the product name the asset is a part of
    :param str asset_id: Equinix defined UUID of the asset being attached to the stream
    :param str stream_id: The uuid of the stream this data source should retrieve
    """
    __args__ = dict()
    __args__['asset'] = asset
    __args__['assetId'] = asset_id
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getStreamAttachment:getStreamAttachment', __args__, opts=opts, typ=GetStreamAttachmentResult).value

    return AwaitableGetStreamAttachmentResult(
        asset=pulumi.get(__ret__, 'asset'),
        asset_id=pulumi.get(__ret__, 'asset_id'),
        attachment_status=pulumi.get(__ret__, 'attachment_status'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        metrics_enabled=pulumi.get(__ret__, 'metrics_enabled'),
        stream_id=pulumi.get(__ret__, 'stream_id'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_stream_attachment_output(asset: Optional[pulumi.Input[str]] = None,
                                 asset_id: Optional[pulumi.Input[str]] = None,
                                 stream_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamAttachmentResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream Asset Attachment by IDs

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    by_ids = equinix.fabric.get_stream_attachment(asset="<asset_group>",
        asset_id="<id_of_the_asset_being_attached>",
        stream_id="<id_of_the_stream_asset_is_being_attached_to>")
    ```


    :param str asset: Equinix defined asset category. Matches the product name the asset is a part of
    :param str asset_id: Equinix defined UUID of the asset being attached to the stream
    :param str stream_id: The uuid of the stream this data source should retrieve
    """
    __args__ = dict()
    __args__['asset'] = asset
    __args__['assetId'] = asset_id
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getStreamAttachment:getStreamAttachment', __args__, opts=opts, typ=GetStreamAttachmentResult)
    return __ret__.apply(lambda __response__: GetStreamAttachmentResult(
        asset=pulumi.get(__response__, 'asset'),
        asset_id=pulumi.get(__response__, 'asset_id'),
        attachment_status=pulumi.get(__response__, 'attachment_status'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        metrics_enabled=pulumi.get(__response__, 'metrics_enabled'),
        stream_id=pulumi.get(__response__, 'stream_id'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
