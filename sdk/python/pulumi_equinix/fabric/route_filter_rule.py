# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteFilterRuleArgs', 'RouteFilterRule']

@pulumi.input_type
class RouteFilterRuleArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 route_filter_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouteFilterRule resource.
        :param pulumi.Input[str] prefix: IP Address Prefix to Filter on
        :param pulumi.Input[str] route_filter_id: UUID of the Route Filter Policy to apply this Rule to
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] prefix_match: Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "route_filter_id", route_filter_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        IP Address Prefix to Filter on
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> pulumi.Input[str]:
        """
        UUID of the Route Filter Policy to apply this Rule to
        """
        return pulumi.get(self, "route_filter_id")

    @route_filter_id.setter
    def route_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_filter_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        return pulumi.get(self, "prefix_match")

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_match", value)


@pulumi.input_type
class _RouteFilterRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 change_logs: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeLogArgs']]]] = None,
                 changes: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteFilterRule resources.
        :param pulumi.Input[str] action: Action that will be taken on IP Addresses matching the rule
        :param pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeArgs']]] changes: An object with the details of the previous change applied on the Route Filter
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] href: Route filter rules URI
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] prefix: IP Address Prefix to Filter on
        :param pulumi.Input[str] prefix_match: Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        :param pulumi.Input[str] route_filter_id: UUID of the Route Filter Policy to apply this Rule to
        :param pulumi.Input[str] state: State of the Route Filter Rule in its lifecycle
        :param pulumi.Input[str] type: Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter Rule
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if change_logs is not None:
            pulumi.set(__self__, "change_logs", change_logs)
        if changes is not None:
            pulumi.set(__self__, "changes", changes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if route_filter_id is not None:
            pulumi.set(__self__, "route_filter_id", route_filter_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action that will be taken on IP Addresses matching the rule
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeLogArgs']]]]:
        return pulumi.get(self, "change_logs")

    @change_logs.setter
    def change_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeLogArgs']]]]):
        pulumi.set(self, "change_logs", value)

    @property
    @pulumi.getter
    def changes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeArgs']]]]:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @changes.setter
    def changes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterRuleChangeArgs']]]]):
        pulumi.set(self, "changes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Route filter rules URI
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address Prefix to Filter on
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        return pulumi.get(self, "prefix_match")

    @prefix_match.setter
    def prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_match", value)

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the Route Filter Policy to apply this Rule to
        """
        return pulumi.get(self, "route_filter_id")

    @route_filter_id.setter
    def route_filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_filter_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the Route Filter Rule in its lifecycle
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix Assigned ID for Route Filter Rule
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class RouteFilterRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Rule

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        rf_rule = equinix.fabric.RouteFilterRule("rfRule",
            route_filter_id="<route_filter_policy_id>",
            prefix="192.168.0.0/24",
            prefix_match="exact",
            description="Route Filter Rule for X Purpose")
        pulumi.export("routeFilterRuleId", rf_rule.id)
        pulumi.export("routeFilterId", rf_rule.route_filter_id)
        pulumi.export("routeFilterRulePrefix", rf_rule.prefix)
        pulumi.export("routeFilterRulePrefixMatch", rf_rule.prefix_match)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] prefix: IP Address Prefix to Filter on
        :param pulumi.Input[str] prefix_match: Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        :param pulumi.Input[str] route_filter_id: UUID of the Route Filter Policy to apply this Rule to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteFilterRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Rule

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        rf_rule = equinix.fabric.RouteFilterRule("rfRule",
            route_filter_id="<route_filter_policy_id>",
            prefix="192.168.0.0/24",
            prefix_match="exact",
            description="Route Filter Rule for X Purpose")
        pulumi.export("routeFilterRuleId", rf_rule.id)
        pulumi.export("routeFilterId", rf_rule.route_filter_id)
        pulumi.export("routeFilterRulePrefix", rf_rule.prefix)
        pulumi.export("routeFilterRulePrefixMatch", rf_rule.prefix_match)
        ```

        :param str resource_name: The name of the resource.
        :param RouteFilterRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteFilterRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 prefix_match: Optional[pulumi.Input[str]] = None,
                 route_filter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteFilterRuleArgs.__new__(RouteFilterRuleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["prefix_match"] = prefix_match
            if route_filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_filter_id'")
            __props__.__dict__["route_filter_id"] = route_filter_id
            __props__.__dict__["action"] = None
            __props__.__dict__["change_logs"] = None
            __props__.__dict__["changes"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        super(RouteFilterRule, __self__).__init__(
            'equinix:fabric/routeFilterRule:RouteFilterRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            change_logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterRuleChangeLogArgs', 'RouteFilterRuleChangeLogArgsDict']]]]] = None,
            changes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterRuleChangeArgs', 'RouteFilterRuleChangeArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            prefix_match: Optional[pulumi.Input[str]] = None,
            route_filter_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'RouteFilterRule':
        """
        Get an existing RouteFilterRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action that will be taken on IP Addresses matching the rule
        :param pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterRuleChangeArgs', 'RouteFilterRuleChangeArgsDict']]]] changes: An object with the details of the previous change applied on the Route Filter
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] href: Route filter rules URI
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] prefix: IP Address Prefix to Filter on
        :param pulumi.Input[str] prefix_match: Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        :param pulumi.Input[str] route_filter_id: UUID of the Route Filter Policy to apply this Rule to
        :param pulumi.Input[str] state: State of the Route Filter Rule in its lifecycle
        :param pulumi.Input[str] type: Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter Rule
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteFilterRuleState.__new__(_RouteFilterRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["change_logs"] = change_logs
        __props__.__dict__["changes"] = changes
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["prefix_match"] = prefix_match
        __props__.__dict__["route_filter_id"] = route_filter_id
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return RouteFilterRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action that will be taken on IP Addresses matching the rule
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> pulumi.Output[Sequence['outputs.RouteFilterRuleChangeLog']]:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> pulumi.Output[Sequence['outputs.RouteFilterRuleChange']]:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Route filter rules URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[str]:
        """
        IP Address Prefix to Filter on
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> pulumi.Output[str]:
        """
        Prefix matching operator. One of [ orlonger, exact ] Default: "orlonger"
        """
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="routeFilterId")
    def route_filter_id(self) -> pulumi.Output[str]:
        """
        UUID of the Route Filter Policy to apply this Rule to
        """
        return pulumi.get(self, "route_filter_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the Route Filter Rule in its lifecycle
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Route Filter Type. One of [ BGP*IPv4*PREFIX*FILTER*RULE, BGP*IPv6*PREFIX*FILTER*RULE ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix Assigned ID for Route Filter Rule
        """
        return pulumi.get(self, "uuid")

