# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudRouterArgs', 'CloudRouter']

@pulumi.input_type
class CloudRouterArgs:
    def __init__(__self__, *,
                 account: pulumi.Input['CloudRouterAccountArgs'],
                 location: pulumi.Input['CloudRouterLocationArgs'],
                 notifications: pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]],
                 order: pulumi.Input['CloudRouterOrderArgs'],
                 package: pulumi.Input['CloudRouterPackageArgs'],
                 project: pulumi.Input['CloudRouterProjectArgs'],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudRouter resource.
        :param pulumi.Input['CloudRouterAccountArgs'] account: Customer account information that is associated with this Fabric Cloud Router
        :param pulumi.Input['CloudRouterLocationArgs'] location: Fabric Cloud Router location
        :param pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]] notifications: Preferences for notifications on Fabric Cloud Router configuration or status changes
        :param pulumi.Input['CloudRouterOrderArgs'] order: Order information related to this Fabric Cloud Router
        :param pulumi.Input['CloudRouterPackageArgs'] package: Fabric Cloud Router Package Type
        :param pulumi.Input['CloudRouterProjectArgs'] project: Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        :param pulumi.Input[str] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] description: Customer-provided Fabric Cloud Router description
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[str] name: Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[str] uuid: Equinix-assigned Fabric Cloud Router identifier
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input['CloudRouterAccountArgs']:
        """
        Customer account information that is associated with this Fabric Cloud Router
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input['CloudRouterAccountArgs']):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['CloudRouterLocationArgs']:
        """
        Fabric Cloud Router location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['CloudRouterLocationArgs']):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]]:
        """
        Preferences for notifications on Fabric Cloud Router configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input['CloudRouterOrderArgs']:
        """
        Order information related to this Fabric Cloud Router
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input['CloudRouterOrderArgs']):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def package(self) -> pulumi.Input['CloudRouterPackageArgs']:
        """
        Fabric Cloud Router Package Type
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: pulumi.Input['CloudRouterPackageArgs']):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input['CloudRouterProjectArgs']:
        """
        Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input['CloudRouterProjectArgs']):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided Fabric Cloud Router description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned Fabric Cloud Router identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _CloudRouterState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['CloudRouterAccountArgs']] = None,
                 bgp_ipv4_routes_count: Optional[pulumi.Input[int]] = None,
                 bgp_ipv6_routes_count: Optional[pulumi.Input[int]] = None,
                 change_logs: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterChangeLogArgs']]]] = None,
                 connections_count: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distinct_ipv4_prefixes_count: Optional[pulumi.Input[int]] = None,
                 distinct_ipv6_prefixes_count: Optional[pulumi.Input[int]] = None,
                 equinix_asn: Optional[pulumi.Input[int]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input['CloudRouterLocationArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]]] = None,
                 order: Optional[pulumi.Input['CloudRouterOrderArgs']] = None,
                 package: Optional[pulumi.Input['CloudRouterPackageArgs']] = None,
                 project: Optional[pulumi.Input['CloudRouterProjectArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudRouter resources.
        :param pulumi.Input['CloudRouterAccountArgs'] account: Customer account information that is associated with this Fabric Cloud Router
        :param pulumi.Input[int] bgp_ipv4_routes_count: Number of IPv4 BGP routes in use (including non-distinct prefixes)
        :param pulumi.Input[int] bgp_ipv6_routes_count: Number of IPv6 BGP routes in use (including non-distinct prefixes)
        :param pulumi.Input[Sequence[pulumi.Input['CloudRouterChangeLogArgs']]] change_logs: Captures Fabric Cloud Router lifecycle change information
        :param pulumi.Input[int] connections_count: Number of connections associated with this Fabric Cloud Router instance
        :param pulumi.Input[str] description: Customer-provided Fabric Cloud Router description
        :param pulumi.Input[int] distinct_ipv4_prefixes_count: Number of distinct IPv4 routes
        :param pulumi.Input[int] distinct_ipv6_prefixes_count: Number of distinct IPv6 routes
        :param pulumi.Input[int] equinix_asn: Equinix ASN
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input['CloudRouterLocationArgs'] location: Fabric Cloud Router location
        :param pulumi.Input[str] name: Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]] notifications: Preferences for notifications on Fabric Cloud Router configuration or status changes
        :param pulumi.Input['CloudRouterOrderArgs'] order: Order information related to this Fabric Cloud Router
        :param pulumi.Input['CloudRouterPackageArgs'] package: Fabric Cloud Router Package Type
        :param pulumi.Input['CloudRouterProjectArgs'] project: Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        :param pulumi.Input[str] state: Fabric Cloud Router overall state
        :param pulumi.Input[str] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] uuid: Equinix-assigned Fabric Cloud Router identifier
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if bgp_ipv4_routes_count is not None:
            pulumi.set(__self__, "bgp_ipv4_routes_count", bgp_ipv4_routes_count)
        if bgp_ipv6_routes_count is not None:
            pulumi.set(__self__, "bgp_ipv6_routes_count", bgp_ipv6_routes_count)
        if change_logs is not None:
            pulumi.set(__self__, "change_logs", change_logs)
        if connections_count is not None:
            pulumi.set(__self__, "connections_count", connections_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distinct_ipv4_prefixes_count is not None:
            pulumi.set(__self__, "distinct_ipv4_prefixes_count", distinct_ipv4_prefixes_count)
        if distinct_ipv6_prefixes_count is not None:
            pulumi.set(__self__, "distinct_ipv6_prefixes_count", distinct_ipv6_prefixes_count)
        if equinix_asn is not None:
            pulumi.set(__self__, "equinix_asn", equinix_asn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['CloudRouterAccountArgs']]:
        """
        Customer account information that is associated with this Fabric Cloud Router
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['CloudRouterAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="bgpIpv4RoutesCount")
    def bgp_ipv4_routes_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv4 BGP routes in use (including non-distinct prefixes)
        """
        return pulumi.get(self, "bgp_ipv4_routes_count")

    @bgp_ipv4_routes_count.setter
    def bgp_ipv4_routes_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_ipv4_routes_count", value)

    @property
    @pulumi.getter(name="bgpIpv6RoutesCount")
    def bgp_ipv6_routes_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv6 BGP routes in use (including non-distinct prefixes)
        """
        return pulumi.get(self, "bgp_ipv6_routes_count")

    @bgp_ipv6_routes_count.setter
    def bgp_ipv6_routes_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_ipv6_routes_count", value)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterChangeLogArgs']]]]:
        """
        Captures Fabric Cloud Router lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @change_logs.setter
    def change_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterChangeLogArgs']]]]):
        pulumi.set(self, "change_logs", value)

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of connections associated with this Fabric Cloud Router instance
        """
        return pulumi.get(self, "connections_count")

    @connections_count.setter
    def connections_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connections_count", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided Fabric Cloud Router description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distinctIpv4PrefixesCount")
    def distinct_ipv4_prefixes_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of distinct IPv4 routes
        """
        return pulumi.get(self, "distinct_ipv4_prefixes_count")

    @distinct_ipv4_prefixes_count.setter
    def distinct_ipv4_prefixes_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distinct_ipv4_prefixes_count", value)

    @property
    @pulumi.getter(name="distinctIpv6PrefixesCount")
    def distinct_ipv6_prefixes_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of distinct IPv6 routes
        """
        return pulumi.get(self, "distinct_ipv6_prefixes_count")

    @distinct_ipv6_prefixes_count.setter
    def distinct_ipv6_prefixes_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distinct_ipv6_prefixes_count", value)

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> Optional[pulumi.Input[int]]:
        """
        Equinix ASN
        """
        return pulumi.get(self, "equinix_asn")

    @equinix_asn.setter
    def equinix_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "equinix_asn", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['CloudRouterLocationArgs']]:
        """
        Fabric Cloud Router location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['CloudRouterLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]]]:
        """
        Preferences for notifications on Fabric Cloud Router configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRouterNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['CloudRouterOrderArgs']]:
        """
        Order information related to this Fabric Cloud Router
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['CloudRouterOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def package(self) -> Optional[pulumi.Input['CloudRouterPackageArgs']]:
        """
        Fabric Cloud Router Package Type
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: Optional[pulumi.Input['CloudRouterPackageArgs']]):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['CloudRouterProjectArgs']]:
        """
        Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['CloudRouterProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric Cloud Router overall state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned Fabric Cloud Router identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class CloudRouter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['CloudRouterAccountArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[pulumi.InputType['CloudRouterLocationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterNotificationArgs']]]]] = None,
                 order: Optional[pulumi.Input[pulumi.InputType['CloudRouterOrderArgs']]] = None,
                 package: Optional[pulumi.Input[pulumi.InputType['CloudRouterPackageArgs']]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['CloudRouterProjectArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Cloud Router](https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks).

        Additional Fabric Cloud Router documentation:
        * Getting Started: <https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks>
        * API: <https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers>

        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        metro = config.get("metro")
        if metro is None:
            metro = "FR"
        account_num = config.require_int("accountNum")
        router = equinix.fabric.CloudRouter("router",
            name="My-Fabric-Cloud-Router",
            type="XF_ROUTER",
            location=equinix.fabric.CloudRouterLocationArgs(
                metro_code=metro,
            ),
            package=equinix.fabric.CloudRouterPackageArgs(
                code="BASIC",
            ),
            notifications=[equinix.fabric.CloudRouterNotificationArgs(
                type="ALL",
                emails=["example@equinix.com"],
            )],
            account=equinix.fabric.CloudRouterAccountArgs(
                account_number=272010,
            ))
        pulumi.export("routerId", router.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CloudRouterAccountArgs']] account: Customer account information that is associated with this Fabric Cloud Router
        :param pulumi.Input[str] description: Customer-provided Fabric Cloud Router description
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[pulumi.InputType['CloudRouterLocationArgs']] location: Fabric Cloud Router location
        :param pulumi.Input[str] name: Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterNotificationArgs']]]] notifications: Preferences for notifications on Fabric Cloud Router configuration or status changes
        :param pulumi.Input[pulumi.InputType['CloudRouterOrderArgs']] order: Order information related to this Fabric Cloud Router
        :param pulumi.Input[pulumi.InputType['CloudRouterPackageArgs']] package: Fabric Cloud Router Package Type
        :param pulumi.Input[pulumi.InputType['CloudRouterProjectArgs']] project: Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        :param pulumi.Input[str] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] uuid: Equinix-assigned Fabric Cloud Router identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudRouterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Cloud Router](https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks).

        Additional Fabric Cloud Router documentation:
        * Getting Started: <https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks>
        * API: <https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers>

        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        metro = config.get("metro")
        if metro is None:
            metro = "FR"
        account_num = config.require_int("accountNum")
        router = equinix.fabric.CloudRouter("router",
            name="My-Fabric-Cloud-Router",
            type="XF_ROUTER",
            location=equinix.fabric.CloudRouterLocationArgs(
                metro_code=metro,
            ),
            package=equinix.fabric.CloudRouterPackageArgs(
                code="BASIC",
            ),
            notifications=[equinix.fabric.CloudRouterNotificationArgs(
                type="ALL",
                emails=["example@equinix.com"],
            )],
            account=equinix.fabric.CloudRouterAccountArgs(
                account_number=272010,
            ))
        pulumi.export("routerId", router.id)
        ```

        :param str resource_name: The name of the resource.
        :param CloudRouterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudRouterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['CloudRouterAccountArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[pulumi.InputType['CloudRouterLocationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterNotificationArgs']]]]] = None,
                 order: Optional[pulumi.Input[pulumi.InputType['CloudRouterOrderArgs']]] = None,
                 package: Optional[pulumi.Input[pulumi.InputType['CloudRouterPackageArgs']]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['CloudRouterProjectArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudRouterArgs.__new__(CloudRouterArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            __props__.__dict__["description"] = description
            __props__.__dict__["href"] = href
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            if package is None and not opts.urn:
                raise TypeError("Missing required property 'package'")
            __props__.__dict__["package"] = package
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["bgp_ipv4_routes_count"] = None
            __props__.__dict__["bgp_ipv6_routes_count"] = None
            __props__.__dict__["change_logs"] = None
            __props__.__dict__["connections_count"] = None
            __props__.__dict__["distinct_ipv4_prefixes_count"] = None
            __props__.__dict__["distinct_ipv6_prefixes_count"] = None
            __props__.__dict__["equinix_asn"] = None
            __props__.__dict__["state"] = None
        super(CloudRouter, __self__).__init__(
            'equinix:fabric/cloudRouter:CloudRouter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[pulumi.InputType['CloudRouterAccountArgs']]] = None,
            bgp_ipv4_routes_count: Optional[pulumi.Input[int]] = None,
            bgp_ipv6_routes_count: Optional[pulumi.Input[int]] = None,
            change_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterChangeLogArgs']]]]] = None,
            connections_count: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            distinct_ipv4_prefixes_count: Optional[pulumi.Input[int]] = None,
            distinct_ipv6_prefixes_count: Optional[pulumi.Input[int]] = None,
            equinix_asn: Optional[pulumi.Input[int]] = None,
            href: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[pulumi.InputType['CloudRouterLocationArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterNotificationArgs']]]]] = None,
            order: Optional[pulumi.Input[pulumi.InputType['CloudRouterOrderArgs']]] = None,
            package: Optional[pulumi.Input[pulumi.InputType['CloudRouterPackageArgs']]] = None,
            project: Optional[pulumi.Input[pulumi.InputType['CloudRouterProjectArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'CloudRouter':
        """
        Get an existing CloudRouter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CloudRouterAccountArgs']] account: Customer account information that is associated with this Fabric Cloud Router
        :param pulumi.Input[int] bgp_ipv4_routes_count: Number of IPv4 BGP routes in use (including non-distinct prefixes)
        :param pulumi.Input[int] bgp_ipv6_routes_count: Number of IPv6 BGP routes in use (including non-distinct prefixes)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterChangeLogArgs']]]] change_logs: Captures Fabric Cloud Router lifecycle change information
        :param pulumi.Input[int] connections_count: Number of connections associated with this Fabric Cloud Router instance
        :param pulumi.Input[str] description: Customer-provided Fabric Cloud Router description
        :param pulumi.Input[int] distinct_ipv4_prefixes_count: Number of distinct IPv4 routes
        :param pulumi.Input[int] distinct_ipv6_prefixes_count: Number of distinct IPv6 routes
        :param pulumi.Input[int] equinix_asn: Equinix ASN
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[pulumi.InputType['CloudRouterLocationArgs']] location: Fabric Cloud Router location
        :param pulumi.Input[str] name: Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudRouterNotificationArgs']]]] notifications: Preferences for notifications on Fabric Cloud Router configuration or status changes
        :param pulumi.Input[pulumi.InputType['CloudRouterOrderArgs']] order: Order information related to this Fabric Cloud Router
        :param pulumi.Input[pulumi.InputType['CloudRouterPackageArgs']] package: Fabric Cloud Router Package Type
        :param pulumi.Input[pulumi.InputType['CloudRouterProjectArgs']] project: Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        :param pulumi.Input[str] state: Fabric Cloud Router overall state
        :param pulumi.Input[str] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] uuid: Equinix-assigned Fabric Cloud Router identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudRouterState.__new__(_CloudRouterState)

        __props__.__dict__["account"] = account
        __props__.__dict__["bgp_ipv4_routes_count"] = bgp_ipv4_routes_count
        __props__.__dict__["bgp_ipv6_routes_count"] = bgp_ipv6_routes_count
        __props__.__dict__["change_logs"] = change_logs
        __props__.__dict__["connections_count"] = connections_count
        __props__.__dict__["description"] = description
        __props__.__dict__["distinct_ipv4_prefixes_count"] = distinct_ipv4_prefixes_count
        __props__.__dict__["distinct_ipv6_prefixes_count"] = distinct_ipv6_prefixes_count
        __props__.__dict__["equinix_asn"] = equinix_asn
        __props__.__dict__["href"] = href
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["order"] = order
        __props__.__dict__["package"] = package
        __props__.__dict__["project"] = project
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return CloudRouter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.CloudRouterAccount']:
        """
        Customer account information that is associated with this Fabric Cloud Router
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="bgpIpv4RoutesCount")
    def bgp_ipv4_routes_count(self) -> pulumi.Output[int]:
        """
        Number of IPv4 BGP routes in use (including non-distinct prefixes)
        """
        return pulumi.get(self, "bgp_ipv4_routes_count")

    @property
    @pulumi.getter(name="bgpIpv6RoutesCount")
    def bgp_ipv6_routes_count(self) -> pulumi.Output[int]:
        """
        Number of IPv6 BGP routes in use (including non-distinct prefixes)
        """
        return pulumi.get(self, "bgp_ipv6_routes_count")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> pulumi.Output[Sequence['outputs.CloudRouterChangeLog']]:
        """
        Captures Fabric Cloud Router lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> pulumi.Output[int]:
        """
        Number of connections associated with this Fabric Cloud Router instance
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Customer-provided Fabric Cloud Router description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distinctIpv4PrefixesCount")
    def distinct_ipv4_prefixes_count(self) -> pulumi.Output[int]:
        """
        Number of distinct IPv4 routes
        """
        return pulumi.get(self, "distinct_ipv4_prefixes_count")

    @property
    @pulumi.getter(name="distinctIpv6PrefixesCount")
    def distinct_ipv6_prefixes_count(self) -> pulumi.Output[int]:
        """
        Number of distinct IPv6 routes
        """
        return pulumi.get(self, "distinct_ipv6_prefixes_count")

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> pulumi.Output[int]:
        """
        Equinix ASN
        """
        return pulumi.get(self, "equinix_asn")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output['outputs.CloudRouterLocation']:
        """
        Fabric Cloud Router location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.CloudRouterNotification']]:
        """
        Preferences for notifications on Fabric Cloud Router configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output['outputs.CloudRouterOrder']:
        """
        Order information related to this Fabric Cloud Router
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def package(self) -> pulumi.Output['outputs.CloudRouterPackage']:
        """
        Fabric Cloud Router Package Type
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['outputs.CloudRouterProject']:
        """
        Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Fabric Cloud Router overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix-assigned Fabric Cloud Router identifier
        """
        return pulumi.get(self, "uuid")

