# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConnectionRouteAggregationsResult',
    'AwaitableGetConnectionRouteAggregationsResult',
    'get_connection_route_aggregations',
    'get_connection_route_aggregations_output',
]

@pulumi.output_type
class GetConnectionRouteAggregationsResult:
    """
    A collection of values returned by getConnectionRouteAggregations.
    """
    def __init__(__self__, connection_id=None, datas=None, id=None, pagination=None):
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The uuid of the connection this data source should retrieve
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetConnectionRouteAggregationsDataResult']:
        """
        Returned list of connection route aggregation objects
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetConnectionRouteAggregationsPaginationResult']:
        """
        Pagination details for the returned connection route aggregations list
        """
        return pulumi.get(self, "pagination")


class AwaitableGetConnectionRouteAggregationsResult(GetConnectionRouteAggregationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionRouteAggregationsResult(
            connection_id=self.connection_id,
            datas=self.datas,
            id=self.id,
            pagination=self.pagination)


def get_connection_route_aggregations(connection_id: Optional[str] = None,
                                      pagination: Optional[Union['GetConnectionRouteAggregationsPaginationArgs', 'GetConnectionRouteAggregationsPaginationArgsDict']] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionRouteAggregationsResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policies = equinix.fabric.get_connection_route_aggregations(connection_id="connection_id")
    pulumi.export("connectionFirstRouteAggregationUuid", attached_policies.datas[0].uuid)
    pulumi.export("connectionFirstRouteAggregationType", attached_policies.datas[0].type)
    pulumi.export("connectionFirstRouteAggregationAttachmentStatus", attached_policies.datas[0].attachment_status)
    ```


    :param str connection_id: The uuid of the connection this data source should retrieve
    :param Union['GetConnectionRouteAggregationsPaginationArgs', 'GetConnectionRouteAggregationsPaginationArgsDict'] pagination: Pagination details for the returned connection route aggregations list
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['pagination'] = pagination
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getConnectionRouteAggregations:getConnectionRouteAggregations', __args__, opts=opts, typ=GetConnectionRouteAggregationsResult).value

    return AwaitableGetConnectionRouteAggregationsResult(
        connection_id=pulumi.get(__ret__, 'connection_id'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'))
def get_connection_route_aggregations_output(connection_id: Optional[pulumi.Input[str]] = None,
                                             pagination: Optional[pulumi.Input[Optional[Union['GetConnectionRouteAggregationsPaginationArgs', 'GetConnectionRouteAggregationsPaginationArgsDict']]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionRouteAggregationsResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregations with pagination details
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policies = equinix.fabric.get_connection_route_aggregations(connection_id="connection_id")
    pulumi.export("connectionFirstRouteAggregationUuid", attached_policies.datas[0].uuid)
    pulumi.export("connectionFirstRouteAggregationType", attached_policies.datas[0].type)
    pulumi.export("connectionFirstRouteAggregationAttachmentStatus", attached_policies.datas[0].attachment_status)
    ```


    :param str connection_id: The uuid of the connection this data source should retrieve
    :param Union['GetConnectionRouteAggregationsPaginationArgs', 'GetConnectionRouteAggregationsPaginationArgsDict'] pagination: Pagination details for the returned connection route aggregations list
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['pagination'] = pagination
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getConnectionRouteAggregations:getConnectionRouteAggregations', __args__, opts=opts, typ=GetConnectionRouteAggregationsResult)
    return __ret__.apply(lambda __response__: GetConnectionRouteAggregationsResult(
        connection_id=pulumi.get(__response__, 'connection_id'),
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        pagination=pulumi.get(__response__, 'pagination')))
