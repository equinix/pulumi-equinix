# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 a_sides: pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]],
                 bandwidth: pulumi.Input[int],
                 notifications: pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]],
                 type: pulumi.Input[str],
                 z_sides: pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]],
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 orders: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]] a_sides: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[str] type: Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]] z_sides: Destination or Provider side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]] additional_infos: Connection additional information
        :param pulumi.Input[str] name: Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]] orders: Order related to this connection information
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]] projects: Project information
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]] redundancies: Redundancy Information
        """
        pulumi.set(__self__, "a_sides", a_sides)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "z_sides", z_sides)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if redundancies is not None:
            pulumi.set(__self__, "redundancies", redundancies)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]]:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_sides")

    @a_sides.setter
    def a_sides(self, value: pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]]):
        pulumi.set(self, "a_sides", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[int]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]]:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_sides")

    @z_sides.setter
    def z_sides(self, value: pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]]):
        pulumi.set(self, "z_sides", value)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]]:
        """
        Connection additional information
        """
        return pulumi.get(self, "additional_infos")

    @additional_infos.setter
    def additional_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_infos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def orders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "orders")

    @orders.setter
    def orders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]]):
        pulumi.set(self, "orders", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]]:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @redundancies.setter
    def redundancies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]]):
        pulumi.set(self, "redundancies", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 a_sides: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]]] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAccountArgs']]]] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 change_logs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionChangeLogArgs']]]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 is_remote: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationArgs']]]] = None,
                 orders: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 z_sides: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]] a_sides: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAccountArgs']]] accounts: Customer account information that is associated with this connection
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]] additional_infos: Connection additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionChangeLogArgs']]] change_logs: Captures connection lifecycle change information
        :param pulumi.Input[str] direction: Connection directionality from the requester point of view
        :param pulumi.Input[str] href: Connection URI information
        :param pulumi.Input[bool] is_remote: Connection property derived from access point locations
        :param pulumi.Input[str] name: Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionOperationArgs']]] operations: Connection type-specific operational data
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]] orders: Order related to this connection information
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]] projects: Project information
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]] redundancies: Redundancy Information
        :param pulumi.Input[str] state: Connection overall state
        :param pulumi.Input[str] type: Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]] z_sides: Destination or Provider side connection configuration object of the multi-segment connection
        """
        if a_sides is not None:
            pulumi.set(__self__, "a_sides", a_sides)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if change_logs is not None:
            pulumi.set(__self__, "change_logs", change_logs)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_remote is not None:
            pulumi.set(__self__, "is_remote", is_remote)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if redundancies is not None:
            pulumi.set(__self__, "redundancies", redundancies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if z_sides is not None:
            pulumi.set(__self__, "z_sides", z_sides)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]]]:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_sides")

    @a_sides.setter
    def a_sides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideArgs']]]]):
        pulumi.set(self, "a_sides", value)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAccountArgs']]]]:
        """
        Customer account information that is associated with this connection
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAccountArgs']]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]]:
        """
        Connection additional information
        """
        return pulumi.get(self, "additional_infos")

    @additional_infos.setter
    def additional_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_infos", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionChangeLogArgs']]]]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @change_logs.setter
    def change_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionChangeLogArgs']]]]):
        pulumi.set(self, "change_logs", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Connection URI information
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> Optional[pulumi.Input[bool]]:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @is_remote.setter
    def is_remote(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_remote", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationArgs']]]]:
        """
        Connection type-specific operational data
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationArgs']]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def orders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "orders")

    @orders.setter
    def orders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOrderArgs']]]]):
        pulumi.set(self, "orders", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]]:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionProjectArgs']]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @redundancies.setter
    def redundancies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionRedundancyArgs']]]]):
        pulumi.set(self, "redundancies", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Connection overall state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]]]:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_sides")

    @z_sides.setter
    def z_sides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideArgs']]]]):
        pulumi.set(self, "z_sides", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]]]] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAdditionalInfoArgs']]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
                 orders: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]]]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]]]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 z_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]]]] = None,
                 __props__=None):
        """
        Create a Connection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]]] a_sides: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAdditionalInfoArgs']]]] additional_infos: Connection additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[str] name: Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]]] orders: Order related to this connection information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]]] projects: Project information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]]] redundancies: Redundancy Information
        :param pulumi.Input[str] type: Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]]] z_sides: Destination or Provider side connection configuration object of the multi-segment connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Connection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]]]] = None,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAdditionalInfoArgs']]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
                 orders: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]]]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]]]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 z_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            if a_sides is None and not opts.urn:
                raise TypeError("Missing required property 'a_sides'")
            __props__.__dict__["a_sides"] = a_sides
            __props__.__dict__["additional_infos"] = additional_infos
            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["name"] = name
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["orders"] = orders
            __props__.__dict__["projects"] = projects
            __props__.__dict__["redundancies"] = redundancies
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if z_sides is None and not opts.urn:
                raise TypeError("Missing required property 'z_sides'")
            __props__.__dict__["z_sides"] = z_sides
            __props__.__dict__["accounts"] = None
            __props__.__dict__["change_logs"] = None
            __props__.__dict__["direction"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_remote"] = None
            __props__.__dict__["operations"] = None
            __props__.__dict__["state"] = None
        super(Connection, __self__).__init__(
            'equinix:fabric/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            a_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]]]] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAccountArgs']]]]] = None,
            additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAdditionalInfoArgs']]]]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            change_logs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionChangeLogArgs']]]]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            is_remote: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
            operations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOperationArgs']]]]] = None,
            orders: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]]]] = None,
            projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]]]] = None,
            redundancies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            z_sides: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]]]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]]] a_sides: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAccountArgs']]]] accounts: Customer account information that is associated with this connection
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionAdditionalInfoArgs']]]] additional_infos: Connection additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionChangeLogArgs']]]] change_logs: Captures connection lifecycle change information
        :param pulumi.Input[str] direction: Connection directionality from the requester point of view
        :param pulumi.Input[str] href: Connection URI information
        :param pulumi.Input[bool] is_remote: Connection property derived from access point locations
        :param pulumi.Input[str] name: Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOperationArgs']]]] operations: Connection type-specific operational data
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]]] orders: Order related to this connection information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]]] projects: Project information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]]] redundancies: Redundancy Information
        :param pulumi.Input[str] state: Connection overall state
        :param pulumi.Input[str] type: Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]]] z_sides: Destination or Provider side connection configuration object of the multi-segment connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["a_sides"] = a_sides
        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["additional_infos"] = additional_infos
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["change_logs"] = change_logs
        __props__.__dict__["direction"] = direction
        __props__.__dict__["href"] = href
        __props__.__dict__["is_remote"] = is_remote
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["operations"] = operations
        __props__.__dict__["orders"] = orders
        __props__.__dict__["projects"] = projects
        __props__.__dict__["redundancies"] = redundancies
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["z_sides"] = z_sides
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aSides")
    def a_sides(self) -> pulumi.Output[Sequence['outputs.ConnectionASide']]:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_sides")

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Sequence['outputs.ConnectionAccount']]:
        """
        Customer account information that is associated with this connection
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionAdditionalInfo']]]:
        """
        Connection additional information
        """
        return pulumi.get(self, "additional_infos")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> pulumi.Output[Sequence['outputs.ConnectionChangeLog']]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Connection URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> pulumi.Output[bool]:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.ConnectionNotification']]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Output[Sequence['outputs.ConnectionOperation']]:
        """
        Connection type-specific operational data
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def orders(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionOrder']]]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionProject']]]:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def redundancies(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionRedundancy']]]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Connection overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zSides")
    def z_sides(self) -> pulumi.Output[Sequence['outputs.ConnectionZSide']]:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_sides")

