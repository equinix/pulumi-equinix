# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import _enums as _root_enums
from ._enums import *
from ._inputs import *

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 a_side: pulumi.Input['ConnectionASideArgs'],
                 bandwidth: pulumi.Input[int],
                 notifications: pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]],
                 type: pulumi.Input[Union[str, 'ConnectionType']],
                 z_side: pulumi.Input['ConnectionZSideArgs'],
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input['ConnectionOrderArgs']] = None,
                 project: Optional[pulumi.Input['ConnectionProjectArgs']] = None,
                 redundancy: Optional[pulumi.Input['ConnectionRedundancyArgs']] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input['ConnectionASideArgs'] a_side: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Union[str, 'ConnectionType']] type: Interface type
        :param pulumi.Input['ConnectionZSideArgs'] z_side: Destination or Provider side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] additional_info: Connection side additional information
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input['ConnectionOrderArgs'] order: Order related to this connection information
        :param pulumi.Input['ConnectionProjectArgs'] project: Project information
        :param pulumi.Input['ConnectionRedundancyArgs'] redundancy: Redundancy Information
        """
        pulumi.set(__self__, "a_side", a_side)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "z_side", z_side)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)

    @property
    @pulumi.getter(name="aSide")
    def a_side(self) -> pulumi.Input['ConnectionASideArgs']:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_side")

    @a_side.setter
    def a_side(self, value: pulumi.Input['ConnectionASideArgs']):
        pulumi.set(self, "a_side", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[int]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ConnectionType']]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ConnectionType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zSide")
    def z_side(self) -> pulumi.Input['ConnectionZSideArgs']:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_side")

    @z_side.setter
    def z_side(self, value: pulumi.Input['ConnectionZSideArgs']):
        pulumi.set(self, "z_side", value)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @additional_info.setter
    def additional_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "additional_info", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['ConnectionOrderArgs']]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['ConnectionOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ConnectionProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ConnectionProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input['ConnectionRedundancyArgs']]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input['ConnectionRedundancyArgs']]):
        pulumi.set(self, "redundancy", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 a_side: Optional[pulumi.Input['ConnectionASideArgs']] = None,
                 account: Optional[pulumi.Input['ConnectionAccountArgs']] = None,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 change_log: Optional[pulumi.Input['ConnectionChangeLogArgs']] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 is_remote: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]] = None,
                 operation: Optional[pulumi.Input['ConnectionOperationArgs']] = None,
                 order: Optional[pulumi.Input['ConnectionOrderArgs']] = None,
                 project: Optional[pulumi.Input['ConnectionProjectArgs']] = None,
                 redundancy: Optional[pulumi.Input['ConnectionRedundancyArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ConnectionType']]] = None,
                 z_side: Optional[pulumi.Input['ConnectionZSideArgs']] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input['ConnectionASideArgs'] a_side: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input['ConnectionAccountArgs'] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] additional_info: Connection side additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input['ConnectionChangeLogArgs'] change_log: Captures connection lifecycle change information
        :param pulumi.Input[str] direction: Connection directionality from the requester point of view
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[bool] is_remote: Connection property derived from access point locations
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input['ConnectionOperationArgs'] operation: Connection type-specific operational data
        :param pulumi.Input['ConnectionOrderArgs'] order: Order related to this connection information
        :param pulumi.Input['ConnectionProjectArgs'] project: Project information
        :param pulumi.Input['ConnectionRedundancyArgs'] redundancy: Redundancy Information
        :param pulumi.Input[str] state: Routing protocol instance state
        :param pulumi.Input[Union[str, 'ConnectionType']] type: Interface type
        :param pulumi.Input['ConnectionZSideArgs'] z_side: Destination or Provider side connection configuration object of the multi-segment connection
        """
        if a_side is not None:
            pulumi.set(__self__, "a_side", a_side)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_remote is not None:
            pulumi.set(__self__, "is_remote", is_remote)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if redundancy is not None:
            pulumi.set(__self__, "redundancy", redundancy)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if z_side is not None:
            pulumi.set(__self__, "z_side", z_side)

    @property
    @pulumi.getter(name="aSide")
    def a_side(self) -> Optional[pulumi.Input['ConnectionASideArgs']]:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_side")

    @a_side.setter
    def a_side(self, value: Optional[pulumi.Input['ConnectionASideArgs']]):
        pulumi.set(self, "a_side", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ConnectionAccountArgs']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ConnectionAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @additional_info.setter
    def additional_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "additional_info", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['ConnectionChangeLogArgs']]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['ConnectionChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> Optional[pulumi.Input[bool]]:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @is_remote.setter
    def is_remote(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_remote", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input['ConnectionOperationArgs']]:
        """
        Connection type-specific operational data
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input['ConnectionOperationArgs']]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['ConnectionOrderArgs']]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['ConnectionOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ConnectionProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ConnectionProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def redundancy(self) -> Optional[pulumi.Input['ConnectionRedundancyArgs']]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @redundancy.setter
    def redundancy(self, value: Optional[pulumi.Input['ConnectionRedundancyArgs']]):
        pulumi.set(self, "redundancy", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ConnectionType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ConnectionType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zSide")
    def z_side(self) -> Optional[pulumi.Input['ConnectionZSideArgs']]:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_side")

    @z_side.setter
    def z_side(self, value: Optional[pulumi.Input['ConnectionZSideArgs']]):
        pulumi.set(self, "z_side", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_side: Optional[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]] = None,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
                 order: Optional[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]] = None,
                 redundancy: Optional[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ConnectionType']]] = None,
                 z_side: Optional[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]] = None,
                 __props__=None):
        """
        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        metro = config.get("metro")
        if metro is None:
            metro = "FR"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 50
        fabric_port_name = config.require("fabricPortName")
        aws_region = config.get("awsRegion")
        if aws_region is None:
            aws_region = "eu-central-1"
        aws_account_id = config.require("awsAccountId")
        service_profile_id = equinix.fabric.get_service_profiles(filter=equinix.fabric.GetServiceProfilesFilterArgs(
            property="/name",
            operator="=",
            values=["AWS Direct Connect"],
        )).data[0].uuid
        port_id = equinix.fabric.get_ports(filter=equinix.fabric.GetPortsFilterArgs(
            name=fabric_port_name,
        )).data[0].uuid
        colo2_aws = equinix.fabric.Connection("colo2Aws",
            name="Pulumi-colo2Aws",
            type="EVPL_VC",
            notifications=[equinix.fabric.ConnectionNotificationArgs(
                type="ALL",
                emails=["example@equinix.com"],
            )],
            bandwidth=speed_in_mbps,
            redundancy=equinix.fabric.ConnectionRedundancyArgs(
                priority="PRIMARY",
            ),
            a_side=equinix.fabric.ConnectionASideArgs(
                access_point=equinix.fabric.ConnectionASideAccessPointArgs(
                    type="COLO",
                    port=equinix.fabric.ConnectionASideAccessPointPortArgs(
                        uuid=port_id,
                    ),
                    link_protocol=equinix.fabric.ConnectionASideAccessPointLinkProtocolArgs(
                        type="DOT1Q",
                        vlan_tag=1234,
                    ),
                ),
            ),
            z_side=equinix.fabric.ConnectionZSideArgs(
                access_point=equinix.fabric.ConnectionZSideAccessPointArgs(
                    type="SP",
                    authentication_key=aws_account_id,
                    seller_region=aws_region,
                    profile=equinix.fabric.ConnectionZSideAccessPointProfileArgs(
                        type="L2_PROFILE",
                        uuid=service_profile_id,
                    ),
                    location=equinix.fabric.ConnectionZSideAccessPointLocationArgs(
                        metro_code=metro,
                    ),
                ),
            ))
        pulumi.export("connectionId", colo2_aws.id)
        pulumi.export("connectionStatus", colo2_aws.operation.equinix_status)
        pulumi.export("connectionProviderStatus", colo2_aws.operation.provider_status)
        pulumi.export("awsDirectConnectId", colo2_aws.z_side.access_point.provider_connection_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionASideArgs']] a_side: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] additional_info: Connection side additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[pulumi.InputType['ConnectionOrderArgs']] order: Order related to this connection information
        :param pulumi.Input[pulumi.InputType['ConnectionProjectArgs']] project: Project information
        :param pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']] redundancy: Redundancy Information
        :param pulumi.Input[Union[str, 'ConnectionType']] type: Interface type
        :param pulumi.Input[pulumi.InputType['ConnectionZSideArgs']] z_side: Destination or Provider side connection configuration object of the multi-segment connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        config = pulumi.Config()
        metro = config.get("metro")
        if metro is None:
            metro = "FR"
        speed_in_mbps = config.get_int("speedInMbps")
        if speed_in_mbps is None:
            speed_in_mbps = 50
        fabric_port_name = config.require("fabricPortName")
        aws_region = config.get("awsRegion")
        if aws_region is None:
            aws_region = "eu-central-1"
        aws_account_id = config.require("awsAccountId")
        service_profile_id = equinix.fabric.get_service_profiles(filter=equinix.fabric.GetServiceProfilesFilterArgs(
            property="/name",
            operator="=",
            values=["AWS Direct Connect"],
        )).data[0].uuid
        port_id = equinix.fabric.get_ports(filter=equinix.fabric.GetPortsFilterArgs(
            name=fabric_port_name,
        )).data[0].uuid
        colo2_aws = equinix.fabric.Connection("colo2Aws",
            name="Pulumi-colo2Aws",
            type="EVPL_VC",
            notifications=[equinix.fabric.ConnectionNotificationArgs(
                type="ALL",
                emails=["example@equinix.com"],
            )],
            bandwidth=speed_in_mbps,
            redundancy=equinix.fabric.ConnectionRedundancyArgs(
                priority="PRIMARY",
            ),
            a_side=equinix.fabric.ConnectionASideArgs(
                access_point=equinix.fabric.ConnectionASideAccessPointArgs(
                    type="COLO",
                    port=equinix.fabric.ConnectionASideAccessPointPortArgs(
                        uuid=port_id,
                    ),
                    link_protocol=equinix.fabric.ConnectionASideAccessPointLinkProtocolArgs(
                        type="DOT1Q",
                        vlan_tag=1234,
                    ),
                ),
            ),
            z_side=equinix.fabric.ConnectionZSideArgs(
                access_point=equinix.fabric.ConnectionZSideAccessPointArgs(
                    type="SP",
                    authentication_key=aws_account_id,
                    seller_region=aws_region,
                    profile=equinix.fabric.ConnectionZSideAccessPointProfileArgs(
                        type="L2_PROFILE",
                        uuid=service_profile_id,
                    ),
                    location=equinix.fabric.ConnectionZSideAccessPointLocationArgs(
                        metro_code=metro,
                    ),
                ),
            ))
        pulumi.export("connectionId", colo2_aws.id)
        pulumi.export("connectionStatus", colo2_aws.operation.equinix_status)
        pulumi.export("connectionProviderStatus", colo2_aws.operation.provider_status)
        pulumi.export("awsDirectConnectId", colo2_aws.z_side.access_point.provider_connection_id)
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_side: Optional[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]] = None,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
                 order: Optional[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]] = None,
                 redundancy: Optional[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ConnectionType']]] = None,
                 z_side: Optional[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            if a_side is None and not opts.urn:
                raise TypeError("Missing required property 'a_side'")
            __props__.__dict__["a_side"] = a_side
            __props__.__dict__["additional_info"] = additional_info
            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["name"] = name
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["order"] = order
            __props__.__dict__["project"] = project
            __props__.__dict__["redundancy"] = redundancy
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if z_side is None and not opts.urn:
                raise TypeError("Missing required property 'z_side'")
            __props__.__dict__["z_side"] = z_side
            __props__.__dict__["account"] = None
            __props__.__dict__["change_log"] = None
            __props__.__dict__["direction"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["is_remote"] = None
            __props__.__dict__["operation"] = None
            __props__.__dict__["state"] = None
        super(Connection, __self__).__init__(
            'equinix:fabric/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            a_side: Optional[pulumi.Input[pulumi.InputType['ConnectionASideArgs']]] = None,
            account: Optional[pulumi.Input[pulumi.InputType['ConnectionAccountArgs']]] = None,
            additional_info: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            change_log: Optional[pulumi.Input[pulumi.InputType['ConnectionChangeLogArgs']]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            is_remote: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]]] = None,
            operation: Optional[pulumi.Input[pulumi.InputType['ConnectionOperationArgs']]] = None,
            order: Optional[pulumi.Input[pulumi.InputType['ConnectionOrderArgs']]] = None,
            project: Optional[pulumi.Input[pulumi.InputType['ConnectionProjectArgs']]] = None,
            redundancy: Optional[pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[Union[str, 'ConnectionType']]] = None,
            z_side: Optional[pulumi.Input[pulumi.InputType['ConnectionZSideArgs']]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionASideArgs']] a_side: Requester or Customer side connection configuration object of the multi-segment connection
        :param pulumi.Input[pulumi.InputType['ConnectionAccountArgs']] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] additional_info: Connection side additional information
        :param pulumi.Input[int] bandwidth: Connection bandwidth in Mbps
        :param pulumi.Input[pulumi.InputType['ConnectionChangeLogArgs']] change_log: Captures connection lifecycle change information
        :param pulumi.Input[str] direction: Connection directionality from the requester point of view
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[bool] is_remote: Connection property derived from access point locations
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[pulumi.InputType['ConnectionOperationArgs']] operation: Connection type-specific operational data
        :param pulumi.Input[pulumi.InputType['ConnectionOrderArgs']] order: Order related to this connection information
        :param pulumi.Input[pulumi.InputType['ConnectionProjectArgs']] project: Project information
        :param pulumi.Input[pulumi.InputType['ConnectionRedundancyArgs']] redundancy: Redundancy Information
        :param pulumi.Input[str] state: Routing protocol instance state
        :param pulumi.Input[Union[str, 'ConnectionType']] type: Interface type
        :param pulumi.Input[pulumi.InputType['ConnectionZSideArgs']] z_side: Destination or Provider side connection configuration object of the multi-segment connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["a_side"] = a_side
        __props__.__dict__["account"] = account
        __props__.__dict__["additional_info"] = additional_info
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["direction"] = direction
        __props__.__dict__["href"] = href
        __props__.__dict__["is_remote"] = is_remote
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["operation"] = operation
        __props__.__dict__["order"] = order
        __props__.__dict__["project"] = project
        __props__.__dict__["redundancy"] = redundancy
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["z_side"] = z_side
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aSide")
    def a_side(self) -> pulumi.Output['outputs.ConnectionASide']:
        """
        Requester or Customer side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "a_side")

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.ConnectionAccount']:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> pulumi.Output[Optional[Sequence[Mapping[str, Any]]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        Connection bandwidth in Mbps
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.ConnectionChangeLog']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        Connection directionality from the requester point of view
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="isRemote")
    def is_remote(self) -> pulumi.Output[bool]:
        """
        Connection property derived from access point locations
        """
        return pulumi.get(self, "is_remote")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.ConnectionNotification']]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Output['outputs.ConnectionOperation']:
        """
        Connection type-specific operational data
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[Optional['outputs.ConnectionOrder']]:
        """
        Order related to this connection information
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional['outputs.ConnectionProject']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def redundancy(self) -> pulumi.Output[Optional['outputs.ConnectionRedundancy']]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancy")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zSide")
    def z_side(self) -> pulumi.Output['outputs.ConnectionZSide']:
        """
        Destination or Provider side connection configuration object of the multi-segment connection
        """
        return pulumi.get(self, "z_side")

