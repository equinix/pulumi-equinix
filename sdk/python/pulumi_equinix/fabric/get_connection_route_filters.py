# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionRouteFiltersResult',
    'AwaitableGetConnectionRouteFiltersResult',
    'get_connection_route_filters',
    'get_connection_route_filters_output',
]

@pulumi.output_type
class GetConnectionRouteFiltersResult:
    """
    A collection of values returned by getConnectionRouteFilters.
    """
    def __init__(__self__, connection_id=None, datas=None, id=None, paginations=None):
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if paginations and not isinstance(paginations, list):
            raise TypeError("Expected argument 'paginations' to be a list")
        pulumi.set(__self__, "paginations", paginations)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetConnectionRouteFiltersDataResult']:
        """
        The list of Rules attached to the given Route Filter Policy UUID
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def paginations(self) -> Sequence['outputs.GetConnectionRouteFiltersPaginationResult']:
        """
        Pagination details for the Data Source Search Request
        """
        return pulumi.get(self, "paginations")


class AwaitableGetConnectionRouteFiltersResult(GetConnectionRouteFiltersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionRouteFiltersResult(
            connection_id=self.connection_id,
            datas=self.datas,
            id=self.id,
            paginations=self.paginations)


def get_connection_route_filters(connection_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionRouteFiltersResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules


    :param str connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getConnectionRouteFilters:getConnectionRouteFilters', __args__, opts=opts, typ=GetConnectionRouteFiltersResult).value

    return AwaitableGetConnectionRouteFiltersResult(
        connection_id=pulumi.get(__ret__, 'connection_id'),
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        paginations=pulumi.get(__ret__, 'paginations'))


@_utilities.lift_output_func(get_connection_route_filters)
def get_connection_route_filters_output(connection_id: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionRouteFiltersResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch all route filter policies attached to a fabric connection

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules


    :param str connection_id: Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
    """
    ...
