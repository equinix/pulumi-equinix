# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMarketplaceSubscriptionResult',
    'AwaitableGetMarketplaceSubscriptionResult',
    'get_marketplace_subscription',
    'get_marketplace_subscription_output',
]

@pulumi.output_type
class GetMarketplaceSubscriptionResult:
    """
    A collection of values returned by getMarketplaceSubscription.
    """
    def __init__(__self__, entitlements=None, href=None, id=None, is_auto_renew=None, marketplace=None, offer_type=None, status=None, trial=None, uuid=None):
        if entitlements and not isinstance(entitlements, list):
            raise TypeError("Expected argument 'entitlements' to be a list")
        pulumi.set(__self__, "entitlements", entitlements)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_auto_renew and not isinstance(is_auto_renew, bool):
            raise TypeError("Expected argument 'is_auto_renew' to be a bool")
        pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        if marketplace and not isinstance(marketplace, str):
            raise TypeError("Expected argument 'marketplace' to be a str")
        pulumi.set(__self__, "marketplace", marketplace)
        if offer_type and not isinstance(offer_type, str):
            raise TypeError("Expected argument 'offer_type' to be a str")
        pulumi.set(__self__, "offer_type", offer_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trial and not isinstance(trial, dict):
            raise TypeError("Expected argument 'trial' to be a dict")
        pulumi.set(__self__, "trial", trial)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def entitlements(self) -> Sequence['outputs.GetMarketplaceSubscriptionEntitlementResult']:
        """
        Subscription entitlements
        """
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Subscription URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> bool:
        """
        Information about subscription auto renewal
        """
        return pulumi.get(self, "is_auto_renew")

    @property
    @pulumi.getter
    def marketplace(self) -> str:
        """
        Marketplace like; AWS, GCP, AZURE, REDHAT
        """
        return pulumi.get(self, "marketplace")

    @property
    @pulumi.getter(name="offerType")
    def offer_type(self) -> str:
        """
        Marketplace Offer Type like; PUBLIC, PRIVATE_OFFER
        """
        return pulumi.get(self, "offer_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Subscription Status like; ACTIVE, EXPIRED, CANCELLED, GRACE_PERIOD
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def trial(self) -> 'outputs.GetMarketplaceSubscriptionTrialResult':
        """
        Subscription Trial
        """
        return pulumi.get(self, "trial")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned marketplace identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetMarketplaceSubscriptionResult(GetMarketplaceSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMarketplaceSubscriptionResult(
            entitlements=self.entitlements,
            href=self.href,
            id=self.id,
            is_auto_renew=self.is_auto_renew,
            marketplace=self.marketplace,
            offer_type=self.offer_type,
            status=self.status,
            trial=self.trial,
            uuid=self.uuid)


def get_marketplace_subscription(uuid: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMarketplaceSubscriptionResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    subscription_test = equinix.fabric.get_marketplace_subscription(uuid="<uuid_of_marketplace_subscription>")
    pulumi.export("id", subscription_test.id)
    pulumi.export("status", subscription_test.status)
    pulumi.export("marketplace", subscription_test.marketplace)
    pulumi.export("offerType", subscription_test.offer_type)
    pulumi.export("isAutoRenew", subscription_test.is_auto_renew)
    ```


    :param str uuid: Equinix-assigned marketplace identifier
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getMarketplaceSubscription:getMarketplaceSubscription', __args__, opts=opts, typ=GetMarketplaceSubscriptionResult).value

    return AwaitableGetMarketplaceSubscriptionResult(
        entitlements=pulumi.get(__ret__, 'entitlements'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_auto_renew=pulumi.get(__ret__, 'is_auto_renew'),
        marketplace=pulumi.get(__ret__, 'marketplace'),
        offer_type=pulumi.get(__ret__, 'offer_type'),
        status=pulumi.get(__ret__, 'status'),
        trial=pulumi.get(__ret__, 'trial'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_marketplace_subscription)
def get_marketplace_subscription_output(uuid: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMarketplaceSubscriptionResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Marketplace Subscription detail for a given UUID

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    subscription_test = equinix.fabric.get_marketplace_subscription(uuid="<uuid_of_marketplace_subscription>")
    pulumi.export("id", subscription_test.id)
    pulumi.export("status", subscription_test.status)
    pulumi.export("marketplace", subscription_test.marketplace)
    pulumi.export("offerType", subscription_test.offer_type)
    pulumi.export("isAutoRenew", subscription_test.is_auto_renew)
    ```


    :param str uuid: Equinix-assigned marketplace identifier
    """
    ...
