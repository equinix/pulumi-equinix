# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteAggregationRuleArgs', 'RouteAggregationRule']

@pulumi.input_type
class RouteAggregationRuleArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 route_aggregation_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a RouteAggregationRule resource.
        :param pulumi.Input[str] prefix: Customer-provided route aggregation rule prefix
        :param pulumi.Input[str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param pulumi.Input[str] description: Customer-provided route aggregation rule description
        :param pulumi.Input[str] name: Customer provided name of the route aggregation rule
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        Customer-provided route aggregation rule prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> pulumi.Input[str]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @route_aggregation_id.setter
    def route_aggregation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_aggregation_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided route aggregation rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer provided name of the route aggregation rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _RouteAggregationRuleState:
    def __init__(__self__, *,
                 change: Optional[pulumi.Input['RouteAggregationRuleChangeArgs']] = None,
                 change_log: Optional[pulumi.Input['RouteAggregationRuleChangeLogArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteAggregationRule resources.
        :param pulumi.Input['RouteAggregationRuleChangeArgs'] change: Current state of latest route aggregation rule change
        :param pulumi.Input['RouteAggregationRuleChangeLogArgs'] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided route aggregation rule description
        :param pulumi.Input[str] href: Equinix auto generated URI to the route aggregation rule resource
        :param pulumi.Input[str] name: Customer provided name of the route aggregation rule
        :param pulumi.Input[str] prefix: Customer-provided route aggregation rule prefix
        :param pulumi.Input[str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param pulumi.Input[str] state: Value representing provisioning status for the route aggregation rule resource
        :param pulumi.Input[str] type: Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        :param pulumi.Input[str] uuid: Equinix-assigned unique id for the route aggregation rule resource
        """
        if change is not None:
            pulumi.set(__self__, "change", change)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if route_aggregation_id is not None:
            pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def change(self) -> Optional[pulumi.Input['RouteAggregationRuleChangeArgs']]:
        """
        Current state of latest route aggregation rule change
        """
        return pulumi.get(self, "change")

    @change.setter
    def change(self, value: Optional[pulumi.Input['RouteAggregationRuleChangeArgs']]):
        pulumi.set(self, "change", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['RouteAggregationRuleChangeLogArgs']]:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['RouteAggregationRuleChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided route aggregation rule description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix auto generated URI to the route aggregation rule resource
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer provided name of the route aggregation rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided route aggregation rule prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @route_aggregation_id.setter
    def route_aggregation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_aggregation_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing provisioning status for the route aggregation rule resource
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RouteAggregationRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned unique id for the route aggregation rule resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class RouteAggregationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['RouteAggregationRuleTimeoutsArgs', 'RouteAggregationRuleTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Aggregation

        Additional Documentation:
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        ra_rule = equinix.fabric.RouteAggregationRule("raRule",
            route_aggregation_id="<route_aggregation_id>",
            description="Route aggregation rule",
            prefix="192.168.0.0/24")
        pulumi.export("routeAggregationRuleName", ra_rule.name)
        pulumi.export("routeAggregationRuleDescription", ra_rule.description)
        pulumi.export("routeAggregationRuleType", ra_rule.type)
        pulumi.export("routeAggregationRulePrefix", ra_rule.prefix)
        pulumi.export("routeAggregationRuleState", ra_rule.state)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Customer-provided route aggregation rule description
        :param pulumi.Input[str] name: Customer provided name of the route aggregation rule
        :param pulumi.Input[str] prefix: Customer-provided route aggregation rule prefix
        :param pulumi.Input[str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteAggregationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Aggregation

        Additional Documentation:
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        ra_rule = equinix.fabric.RouteAggregationRule("raRule",
            route_aggregation_id="<route_aggregation_id>",
            description="Route aggregation rule",
            prefix="192.168.0.0/24")
        pulumi.export("routeAggregationRuleName", ra_rule.name)
        pulumi.export("routeAggregationRuleDescription", ra_rule.description)
        pulumi.export("routeAggregationRuleType", ra_rule.type)
        pulumi.export("routeAggregationRulePrefix", ra_rule.prefix)
        pulumi.export("routeAggregationRuleState", ra_rule.state)
        ```

        :param str resource_name: The name of the resource.
        :param RouteAggregationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteAggregationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 route_aggregation_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['RouteAggregationRuleTimeoutsArgs', 'RouteAggregationRuleTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteAggregationRuleArgs.__new__(RouteAggregationRuleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            if route_aggregation_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_aggregation_id'")
            __props__.__dict__["route_aggregation_id"] = route_aggregation_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["change"] = None
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        super(RouteAggregationRule, __self__).__init__(
            'equinix:fabric/routeAggregationRule:RouteAggregationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change: Optional[pulumi.Input[Union['RouteAggregationRuleChangeArgs', 'RouteAggregationRuleChangeArgsDict']]] = None,
            change_log: Optional[pulumi.Input[Union['RouteAggregationRuleChangeLogArgs', 'RouteAggregationRuleChangeLogArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            route_aggregation_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['RouteAggregationRuleTimeoutsArgs', 'RouteAggregationRuleTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'RouteAggregationRule':
        """
        Get an existing RouteAggregationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RouteAggregationRuleChangeArgs', 'RouteAggregationRuleChangeArgsDict']] change: Current state of latest route aggregation rule change
        :param pulumi.Input[Union['RouteAggregationRuleChangeLogArgs', 'RouteAggregationRuleChangeLogArgsDict']] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided route aggregation rule description
        :param pulumi.Input[str] href: Equinix auto generated URI to the route aggregation rule resource
        :param pulumi.Input[str] name: Customer provided name of the route aggregation rule
        :param pulumi.Input[str] prefix: Customer-provided route aggregation rule prefix
        :param pulumi.Input[str] route_aggregation_id: UUID of the Route Aggregation to apply this Rule to
        :param pulumi.Input[str] state: Value representing provisioning status for the route aggregation rule resource
        :param pulumi.Input[str] type: Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        :param pulumi.Input[str] uuid: Equinix-assigned unique id for the route aggregation rule resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteAggregationRuleState.__new__(_RouteAggregationRuleState)

        __props__.__dict__["change"] = change
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["route_aggregation_id"] = route_aggregation_id
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return RouteAggregationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def change(self) -> pulumi.Output['outputs.RouteAggregationRuleChange']:
        """
        Current state of latest route aggregation rule change
        """
        return pulumi.get(self, "change")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.RouteAggregationRuleChangeLog']:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Customer-provided route aggregation rule description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix auto generated URI to the route aggregation rule resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Customer provided name of the route aggregation rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[str]:
        """
        Customer-provided route aggregation rule prefix
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> pulumi.Output[str]:
        """
        UUID of the Route Aggregation to apply this Rule to
        """
        return pulumi.get(self, "route_aggregation_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Value representing provisioning status for the route aggregation rule resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.RouteAggregationRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix-assigned unique id for the route aggregation rule resource
        """
        return pulumi.get(self, "uuid")

