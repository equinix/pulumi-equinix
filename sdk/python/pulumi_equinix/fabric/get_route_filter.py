# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRouteFilterResult',
    'AwaitableGetRouteFilterResult',
    'get_route_filter',
    'get_route_filter_output',
]

@pulumi.output_type
class GetRouteFilterResult:
    """
    A collection of values returned by getRouteFilter.
    """
    def __init__(__self__, change_logs=None, changes=None, connections_count=None, description=None, href=None, id=None, name=None, not_matched_rule_action=None, projects=None, rules_count=None, state=None, type=None, uuid=None):
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if changes and not isinstance(changes, list):
            raise TypeError("Expected argument 'changes' to be a list")
        pulumi.set(__self__, "changes", changes)
        if connections_count and not isinstance(connections_count, int):
            raise TypeError("Expected argument 'connections_count' to be a int")
        pulumi.set(__self__, "connections_count", connections_count)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if not_matched_rule_action and not isinstance(not_matched_rule_action, str):
            raise TypeError("Expected argument 'not_matched_rule_action' to be a str")
        pulumi.set(__self__, "not_matched_rule_action", not_matched_rule_action)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if rules_count and not isinstance(rules_count, int):
            raise TypeError("Expected argument 'rules_count' to be a int")
        pulumi.set(__self__, "rules_count", rules_count)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetRouteFilterChangeLogResult']:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetRouteFilterChangeResult']:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> int:
        """
        The number of Fabric Connections that this Route Filter is attached to
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Route filter URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notMatchedRuleAction")
    def not_matched_rule_action(self) -> str:
        """
        The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        """
        return pulumi.get(self, "not_matched_rule_action")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetRouteFilterProjectResult']:
        """
        The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="rulesCount")
    def rules_count(self) -> int:
        """
        The number of Route Filter Rules attached to this Route Filter
        """
        return pulumi.get(self, "rules_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the Route Filter in its lifecycle
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Filter
        """
        return pulumi.get(self, "uuid")


class AwaitableGetRouteFilterResult(GetRouteFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteFilterResult(
            change_logs=self.change_logs,
            changes=self.changes,
            connections_count=self.connections_count,
            description=self.description,
            href=self.href,
            id=self.id,
            name=self.name,
            not_matched_rule_action=self.not_matched_rule_action,
            projects=self.projects,
            rules_count=self.rules_count,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_route_filter(uuid: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteFilterResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    rf_policy = equinix.fabric.get_route_filter(uuid="<uuid_of_route_filter")
    pulumi.export("id", rf_policy.id)
    pulumi.export("type", rf_policy.type)
    pulumi.export("state", rf_policy.state)
    pulumi.export("notMatchedRulesAction", rf_policy.not_matched_rule_action)
    pulumi.export("connectionsCount", rf_policy.connections_count)
    pulumi.export("rulesCount", rf_policy.rules_count)
    ```


    :param str uuid: Equinix Assigned ID for Route Filter
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRouteFilter:getRouteFilter', __args__, opts=opts, typ=GetRouteFilterResult).value

    return AwaitableGetRouteFilterResult(
        change_logs=pulumi.get(__ret__, 'change_logs'),
        changes=pulumi.get(__ret__, 'changes'),
        connections_count=pulumi.get(__ret__, 'connections_count'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        not_matched_rule_action=pulumi.get(__ret__, 'not_matched_rule_action'),
        projects=pulumi.get(__ret__, 'projects'),
        rules_count=pulumi.get(__ret__, 'rules_count'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_route_filter)
def get_route_filter_output(uuid: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouteFilterResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch route filter for a given UUID

    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
    * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    rf_policy = equinix.fabric.get_route_filter(uuid="<uuid_of_route_filter")
    pulumi.export("id", rf_policy.id)
    pulumi.export("type", rf_policy.type)
    pulumi.export("state", rf_policy.state)
    pulumi.export("notMatchedRulesAction", rf_policy.not_matched_rule_action)
    pulumi.export("connectionsCount", rf_policy.connections_count)
    pulumi.export("rulesCount", rf_policy.rules_count)
    ```


    :param str uuid: Equinix Assigned ID for Route Filter
    """
    ...
