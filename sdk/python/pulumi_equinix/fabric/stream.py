# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamArgs', 'Stream']

@pulumi.input_type
class StreamArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input['StreamProjectArgs']] = None,
                 timeouts: Optional[pulumi.Input['StreamTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Stream resource.
        :param pulumi.Input[_builtins.str] description: Customer-provided description of the stream resource
        :param pulumi.Input[_builtins.str] type: Equinix defined Streaming Type
        :param pulumi.Input[_builtins.str] name: Customer-provided name of the stream resource
        :param pulumi.Input['StreamProjectArgs'] project: Equinix Project attribute object
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Customer-provided description of the stream resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Equinix defined Streaming Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer-provided name of the stream resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['StreamProjectArgs']]:
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['StreamProjectArgs']]):
        pulumi.set(self, "project", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StreamState:
    def __init__(__self__, *,
                 assets_count: Optional[pulumi.Input[_builtins.int]] = None,
                 change_log: Optional[pulumi.Input['StreamChangeLogArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input['StreamProjectArgs']] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_subscriptions_count: Optional[pulumi.Input[_builtins.int]] = None,
                 timeouts: Optional[pulumi.Input['StreamTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Stream resources.
        :param pulumi.Input[_builtins.int] assets_count: Count of the streaming assets attached to the stream resource
        :param pulumi.Input['StreamChangeLogArgs'] change_log: Details of the last change on the stream resource
        :param pulumi.Input[_builtins.str] description: Customer-provided description of the stream resource
        :param pulumi.Input[_builtins.str] href: Equinix auto generated URI to the stream resource in Equinix Portal
        :param pulumi.Input[_builtins.str] name: Customer-provided name of the stream resource
        :param pulumi.Input['StreamProjectArgs'] project: Equinix Project attribute object
        :param pulumi.Input[_builtins.str] state: Value representing provisioning status for the stream resource
        :param pulumi.Input[_builtins.int] stream_subscriptions_count: Count of the client subscriptions on the stream resource
        :param pulumi.Input[_builtins.str] type: Equinix defined Streaming Type
        :param pulumi.Input[_builtins.str] uuid: Equinix-assigned unique id for the stream resource
        """
        if assets_count is not None:
            pulumi.set(__self__, "assets_count", assets_count)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_subscriptions_count is not None:
            pulumi.set(__self__, "stream_subscriptions_count", stream_subscriptions_count)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="assetsCount")
    def assets_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Count of the streaming assets attached to the stream resource
        """
        return pulumi.get(self, "assets_count")

    @assets_count.setter
    def assets_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "assets_count", value)

    @_builtins.property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['StreamChangeLogArgs']]:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['StreamChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer-provided description of the stream resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Equinix auto generated URI to the stream resource in Equinix Portal
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer-provided name of the stream resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['StreamProjectArgs']]:
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['StreamProjectArgs']]):
        pulumi.set(self, "project", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="streamSubscriptionsCount")
    def stream_subscriptions_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Count of the client subscriptions on the stream resource
        """
        return pulumi.get(self, "stream_subscriptions_count")

    @stream_subscriptions_count.setter
    def stream_subscriptions_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "stream_subscriptions_count", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Equinix defined Streaming Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Equinix-assigned unique id for the stream resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("equinix:fabric/stream:Stream")
class Stream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input[Union['StreamProjectArgs', 'StreamProjectArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamTimeoutsArgs', 'StreamTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        new_stream = equinix.fabric.Stream("new_stream",
            type="TELEMETRY_STREAM",
            name="<name_of_stream_resource>",
            description="<description_of_stream_resource>",
            project={
                "project_id": "<destination_project_id_for_stream",
            })
        pulumi.export("streamState", new_stream.state)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Customer-provided description of the stream resource
        :param pulumi.Input[_builtins.str] name: Customer-provided name of the stream resource
        :param pulumi.Input[Union['StreamProjectArgs', 'StreamProjectArgsDict']] project: Equinix Project attribute object
        :param pulumi.Input[_builtins.str] type: Equinix defined Streaming Type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

        ## Example Usage

        ```python
        import pulumi
        import pulumi_equinix as equinix

        new_stream = equinix.fabric.Stream("new_stream",
            type="TELEMETRY_STREAM",
            name="<name_of_stream_resource>",
            description="<description_of_stream_resource>",
            project={
                "project_id": "<destination_project_id_for_stream",
            })
        pulumi.export("streamState", new_stream.state)
        ```

        :param str resource_name: The name of the resource.
        :param StreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project: Optional[pulumi.Input[Union['StreamProjectArgs', 'StreamProjectArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamTimeoutsArgs', 'StreamTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamArgs.__new__(StreamArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["assets_count"] = None
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["stream_subscriptions_count"] = None
            __props__.__dict__["uuid"] = None
        super(Stream, __self__).__init__(
            'equinix:fabric/stream:Stream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assets_count: Optional[pulumi.Input[_builtins.int]] = None,
            change_log: Optional[pulumi.Input[Union['StreamChangeLogArgs', 'StreamChangeLogArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project: Optional[pulumi.Input[Union['StreamProjectArgs', 'StreamProjectArgsDict']]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            stream_subscriptions_count: Optional[pulumi.Input[_builtins.int]] = None,
            timeouts: Optional[pulumi.Input[Union['StreamTimeoutsArgs', 'StreamTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            uuid: Optional[pulumi.Input[_builtins.str]] = None) -> 'Stream':
        """
        Get an existing Stream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] assets_count: Count of the streaming assets attached to the stream resource
        :param pulumi.Input[Union['StreamChangeLogArgs', 'StreamChangeLogArgsDict']] change_log: Details of the last change on the stream resource
        :param pulumi.Input[_builtins.str] description: Customer-provided description of the stream resource
        :param pulumi.Input[_builtins.str] href: Equinix auto generated URI to the stream resource in Equinix Portal
        :param pulumi.Input[_builtins.str] name: Customer-provided name of the stream resource
        :param pulumi.Input[Union['StreamProjectArgs', 'StreamProjectArgsDict']] project: Equinix Project attribute object
        :param pulumi.Input[_builtins.str] state: Value representing provisioning status for the stream resource
        :param pulumi.Input[_builtins.int] stream_subscriptions_count: Count of the client subscriptions on the stream resource
        :param pulumi.Input[_builtins.str] type: Equinix defined Streaming Type
        :param pulumi.Input[_builtins.str] uuid: Equinix-assigned unique id for the stream resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamState.__new__(_StreamState)

        __props__.__dict__["assets_count"] = assets_count
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["state"] = state
        __props__.__dict__["stream_subscriptions_count"] = stream_subscriptions_count
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return Stream(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="assetsCount")
    def assets_count(self) -> pulumi.Output[_builtins.int]:
        """
        Count of the streaming assets attached to the stream resource
        """
        return pulumi.get(self, "assets_count")

    @_builtins.property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.StreamChangeLog']:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Customer-provided description of the stream resource
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Equinix auto generated URI to the stream resource in Equinix Portal
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Customer-provided name of the stream resource
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def project(self) -> pulumi.Output['outputs.StreamProject']:
        """
        Equinix Project attribute object
        """
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="streamSubscriptionsCount")
    def stream_subscriptions_count(self) -> pulumi.Output[_builtins.int]:
        """
        Count of the client subscriptions on the stream resource
        """
        return pulumi.get(self, "stream_subscriptions_count")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StreamTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Equinix defined Streaming Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        """
        Equinix-assigned unique id for the stream resource
        """
        return pulumi.get(self, "uuid")

