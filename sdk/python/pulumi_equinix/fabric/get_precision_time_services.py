# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPrecisionTimeServicesResult',
    'AwaitableGetPrecisionTimeServicesResult',
    'get_precision_time_services',
    'get_precision_time_services_output',
]

@pulumi.output_type
class GetPrecisionTimeServicesResult:
    """
    A collection of values returned by getPrecisionTimeServices.
    """
    def __init__(__self__, datas=None, filters=None, id=None, pagination=None, sorts=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetPrecisionTimeServicesDataResult']:
        """
        Returned list of route aggregation objects
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetPrecisionTimeServicesFilterResult']:
        """
        List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetPrecisionTimeServicesPaginationResult']:
        """
        Pagination details for the returned route aggregations list
        """
        return pulumi.get(self, "pagination")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetPrecisionTimeServicesSortResult']]:
        """
        Filters for the Data Source Search Request
        """
        return pulumi.get(self, "sorts")


class AwaitableGetPrecisionTimeServicesResult(GetPrecisionTimeServicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrecisionTimeServicesResult(
            datas=self.datas,
            filters=self.filters,
            id=self.id,
            pagination=self.pagination,
            sorts=self.sorts)


def get_precision_time_services(filters: Optional[Sequence[Union['GetPrecisionTimeServicesFilterArgs', 'GetPrecisionTimeServicesFilterArgsDict']]] = None,
                                pagination: Optional[Union['GetPrecisionTimeServicesPaginationArgs', 'GetPrecisionTimeServicesPaginationArgsDict']] = None,
                                sorts: Optional[Sequence[Union['GetPrecisionTimeServicesSortArgs', 'GetPrecisionTimeServicesSortArgsDict']]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrecisionTimeServicesResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
    Additional Documentation:
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm


    :param Sequence[Union['GetPrecisionTimeServicesFilterArgs', 'GetPrecisionTimeServicesFilterArgsDict']] filters: List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
    :param Union['GetPrecisionTimeServicesPaginationArgs', 'GetPrecisionTimeServicesPaginationArgsDict'] pagination: Pagination details for the returned route aggregations list
    :param Sequence[Union['GetPrecisionTimeServicesSortArgs', 'GetPrecisionTimeServicesSortArgsDict']] sorts: Filters for the Data Source Search Request
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['pagination'] = pagination
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getPrecisionTimeServices:getPrecisionTimeServices', __args__, opts=opts, typ=GetPrecisionTimeServicesResult).value

    return AwaitableGetPrecisionTimeServicesResult(
        datas=pulumi.get(__ret__, 'datas'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'),
        sorts=pulumi.get(__ret__, 'sorts'))
def get_precision_time_services_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetPrecisionTimeServicesFilterArgs', 'GetPrecisionTimeServicesFilterArgsDict']]]]] = None,
                                       pagination: Optional[pulumi.Input[Optional[Union['GetPrecisionTimeServicesPaginationArgs', 'GetPrecisionTimeServicesPaginationArgsDict']]]] = None,
                                       sorts: Optional[pulumi.Input[Optional[Sequence[Union['GetPrecisionTimeServicesSortArgs', 'GetPrecisionTimeServicesSortArgsDict']]]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrecisionTimeServicesResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Precision Time Services with pagination details
    Additional Documentation:
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/API-Reference/API-Precision-Time.htm


    :param Sequence[Union['GetPrecisionTimeServicesFilterArgs', 'GetPrecisionTimeServicesFilterArgsDict']] filters: List of filters to apply to the stream attachment get request. Maximum of 8. All will be AND'd together with 1 of the 8 being a possible OR group of 3
    :param Union['GetPrecisionTimeServicesPaginationArgs', 'GetPrecisionTimeServicesPaginationArgsDict'] pagination: Pagination details for the returned route aggregations list
    :param Sequence[Union['GetPrecisionTimeServicesSortArgs', 'GetPrecisionTimeServicesSortArgsDict']] sorts: Filters for the Data Source Search Request
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['pagination'] = pagination
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getPrecisionTimeServices:getPrecisionTimeServices', __args__, opts=opts, typ=GetPrecisionTimeServicesResult)
    return __ret__.apply(lambda __response__: GetPrecisionTimeServicesResult(
        datas=pulumi.get(__response__, 'datas'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        pagination=pulumi.get(__response__, 'pagination'),
        sorts=pulumi.get(__response__, 'sorts')))
