# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ServiceProfileArgs', 'ServiceProfile']

@pulumi.input_type
class ServiceProfileArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 type: pulumi.Input[Union[str, 'ProfileType']],
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]] = None,
                 account: Optional[pulumi.Input['ServiceProfileAccountArgs']] = None,
                 allowed_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]] = None,
                 marketing_info: Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']] = None,
                 metros: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]] = None,
                 project: Optional[pulumi.Input['ServiceProfileProjectArgs']] = None,
                 self_profile: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[Union[str, 'ProfileState']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 virtual_devices: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]] = None,
                 visibility: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]] = None):
        """
        The set of arguments for constructing a ServiceProfile resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Union[str, 'ProfileType']] type: Type of access point type config - VD, COLO
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]] access_point_type_configs: Access point config information
        :param pulumi.Input['ServiceProfileAccountArgs'] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_emails: Array of contact emails
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]] custom_fields: Custom Fields
        :param pulumi.Input['ServiceProfileMarketingInfoArgs'] marketing_info: Marketing Info
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]] metros: Access point config information
        :param pulumi.Input[str] name: Metro Name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]] ports: Ports
        :param pulumi.Input['ServiceProfileProjectArgs'] project: Project information
        :param pulumi.Input[bool] self_profile: Self Profile
        :param pulumi.Input[Union[str, 'ProfileState']] state: Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags attached to the connection
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]] virtual_devices: Virtual Devices
        :param pulumi.Input[Union[str, 'ProfileVisibility']] visibility: Service profile visibility - PUBLIC, PRIVATE
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if allowed_emails is not None:
            pulumi.set(__self__, "allowed_emails", allowed_emails)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if marketing_info is not None:
            pulumi.set(__self__, "marketing_info", marketing_info)
        if metros is not None:
            pulumi.set(__self__, "metros", metros)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if self_profile is not None:
            pulumi.set(__self__, "self_profile", self_profile)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_devices is not None:
            pulumi.set(__self__, "virtual_devices", virtual_devices)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ProfileType']]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ProfileType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @access_point_type_configs.setter
    def access_point_type_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]]):
        pulumi.set(self, "access_point_type_configs", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ServiceProfileAccountArgs']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ServiceProfileAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="allowedEmails")
    def allowed_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "allowed_emails")

    @allowed_emails.setter
    def allowed_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_emails", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]]:
        """
        Custom Fields
        """
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter(name="marketingInfo")
    def marketing_info(self) -> Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']]:
        """
        Marketing Info
        """
        return pulumi.get(self, "marketing_info")

    @marketing_info.setter
    def marketing_info(self, value: Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']]):
        pulumi.set(self, "marketing_info", value)

    @property
    @pulumi.getter
    def metros(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "metros")

    @metros.setter
    def metros(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]]):
        pulumi.set(self, "metros", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]]:
        """
        Ports
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ServiceProfileProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ServiceProfileProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="selfProfile")
    def self_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Self Profile
        """
        return pulumi.get(self, "self_profile")

    @self_profile.setter
    def self_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_profile", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'ProfileState']]]:
        """
        Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'ProfileState']]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags attached to the connection
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]]:
        """
        Virtual Devices
        """
        return pulumi.get(self, "virtual_devices")

    @virtual_devices.setter
    def virtual_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]]):
        pulumi.set(self, "virtual_devices", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[Union[str, 'ProfileVisibility']]]:
        """
        Service profile visibility - PUBLIC, PRIVATE
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _ServiceProfileState:
    def __init__(__self__, *,
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]] = None,
                 account: Optional[pulumi.Input['ServiceProfileAccountArgs']] = None,
                 allowed_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 change_log: Optional[pulumi.Input['ServiceProfileChangeLogArgs']] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 marketing_info: Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']] = None,
                 metros: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]] = None,
                 project: Optional[pulumi.Input['ServiceProfileProjectArgs']] = None,
                 self_profile: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[Union[str, 'ProfileState']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 virtual_devices: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]] = None,
                 visibility: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]] = None):
        """
        Input properties used for looking up and filtering ServiceProfile resources.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]] access_point_type_configs: Access point config information
        :param pulumi.Input['ServiceProfileAccountArgs'] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_emails: Array of contact emails
        :param pulumi.Input['ServiceProfileChangeLogArgs'] change_log: Captures connection lifecycle change information
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]] custom_fields: Custom Fields
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input['ServiceProfileMarketingInfoArgs'] marketing_info: Marketing Info
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]] metros: Access point config information
        :param pulumi.Input[str] name: Metro Name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]] ports: Ports
        :param pulumi.Input['ServiceProfileProjectArgs'] project: Project information
        :param pulumi.Input[bool] self_profile: Self Profile
        :param pulumi.Input[Union[str, 'ProfileState']] state: Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags attached to the connection
        :param pulumi.Input[Union[str, 'ProfileType']] type: Type of access point type config - VD, COLO
        :param pulumi.Input[str] uuid: Colo/Port Uuid
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]] virtual_devices: Virtual Devices
        :param pulumi.Input[Union[str, 'ProfileVisibility']] visibility: Service profile visibility - PUBLIC, PRIVATE
        """
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if allowed_emails is not None:
            pulumi.set(__self__, "allowed_emails", allowed_emails)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if marketing_info is not None:
            pulumi.set(__self__, "marketing_info", marketing_info)
        if metros is not None:
            pulumi.set(__self__, "metros", metros)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if self_profile is not None:
            pulumi.set(__self__, "self_profile", self_profile)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if virtual_devices is not None:
            pulumi.set(__self__, "virtual_devices", virtual_devices)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @access_point_type_configs.setter
    def access_point_type_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileAccessPointTypeConfigArgs']]]]):
        pulumi.set(self, "access_point_type_configs", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ServiceProfileAccountArgs']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ServiceProfileAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="allowedEmails")
    def allowed_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "allowed_emails")

    @allowed_emails.setter
    def allowed_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_emails", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['ServiceProfileChangeLogArgs']]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['ServiceProfileChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]]:
        """
        Custom Fields
        """
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileCustomFieldArgs']]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="marketingInfo")
    def marketing_info(self) -> Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']]:
        """
        Marketing Info
        """
        return pulumi.get(self, "marketing_info")

    @marketing_info.setter
    def marketing_info(self, value: Optional[pulumi.Input['ServiceProfileMarketingInfoArgs']]):
        pulumi.set(self, "marketing_info", value)

    @property
    @pulumi.getter
    def metros(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "metros")

    @metros.setter
    def metros(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMetroArgs']]]]):
        pulumi.set(self, "metros", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]]:
        """
        Ports
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfilePortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ServiceProfileProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ServiceProfileProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="selfProfile")
    def self_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Self Profile
        """
        return pulumi.get(self, "self_profile")

    @self_profile.setter
    def self_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_profile", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'ProfileState']]]:
        """
        Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'ProfileState']]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags attached to the connection
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ProfileType']]]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ProfileType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]]:
        """
        Virtual Devices
        """
        return pulumi.get(self, "virtual_devices")

    @virtual_devices.setter
    def virtual_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileVirtualDeviceArgs']]]]):
        pulumi.set(self, "virtual_devices", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[Union[str, 'ProfileVisibility']]]:
        """
        Service profile visibility - PUBLIC, PRIVATE
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]]):
        pulumi.set(self, "visibility", value)


class ServiceProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileAccessPointTypeConfigArgs']]]]] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['ServiceProfileAccountArgs']]] = None,
                 allowed_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileCustomFieldArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 marketing_info: Optional[pulumi.Input[pulumi.InputType['ServiceProfileMarketingInfoArgs']]] = None,
                 metros: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileMetroArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileNotificationArgs']]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfilePortArgs']]]]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['ServiceProfileProjectArgs']]] = None,
                 self_profile: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[Union[str, 'ProfileState']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
                 virtual_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileVirtualDeviceArgs']]]]] = None,
                 visibility: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]] = None,
                 __props__=None):
        """
        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        profile = equinix.fabric.ServiceProfile("profile",
            name="Example Cloud Provider",
            description="50 to 500 Mbps Hosted Connection to Example Cloud",
            type="L2_PROFILE",
            access_point_type_configs=[equinix.fabric.ServiceProfileAccessPointTypeConfigArgs(
                type="COLO",
                supported_bandwidths=[
                    50,
                    100,
                    200,
                    500,
                ],
                allow_remote_connections=True,
                allow_custom_bandwidth=False,
                allow_bandwidth_auto_approval=False,
                link_protocol_config=equinix.fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs(
                    encapsulation_strategy="CTAGED",
                    reuse_vlan_s_tag=False,
                    encapsulation="DOT1Q",
                ),
                enable_auto_generate_service_key="false,",
                connection_redundancy_required="false,",
                api_config=equinix.fabric.ServiceProfileAccessPointTypeConfigApiConfigArgs(
                    api_available=True,
                    integration_id="Example-Connect-01",
                    bandwidth_from_api=False,
                ),
                connection_label="Virtual Circuit Name",
                authentication_key=equinix.fabric.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs(
                    required=True,
                    label="Example ACCOUNT ID",
                ),
            )],
            account=equinix.fabric.ServiceProfileAccountArgs(
                organization_name="Example Cloud",
                global_organization_name="Example Global",
            ),
            metros=None,
            visibility="PUBLIC",
            marketing_info=equinix.fabric.ServiceProfileMarketingInfoArgs(
                promotion=True,
            ))
        pulumi.export("profileId", profile.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileAccessPointTypeConfigArgs']]]] access_point_type_configs: Access point config information
        :param pulumi.Input[pulumi.InputType['ServiceProfileAccountArgs']] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_emails: Array of contact emails
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileCustomFieldArgs']]]] custom_fields: Custom Fields
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[pulumi.InputType['ServiceProfileMarketingInfoArgs']] marketing_info: Marketing Info
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileMetroArgs']]]] metros: Access point config information
        :param pulumi.Input[str] name: Metro Name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfilePortArgs']]]] ports: Ports
        :param pulumi.Input[pulumi.InputType['ServiceProfileProjectArgs']] project: Project information
        :param pulumi.Input[bool] self_profile: Self Profile
        :param pulumi.Input[Union[str, 'ProfileState']] state: Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags attached to the connection
        :param pulumi.Input[Union[str, 'ProfileType']] type: Type of access point type config - VD, COLO
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileVirtualDeviceArgs']]]] virtual_devices: Virtual Devices
        :param pulumi.Input[Union[str, 'ProfileVisibility']] visibility: Service profile visibility - PUBLIC, PRIVATE
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ```python
        import pulumi
        import pulumi_equinix as equinix

        profile = equinix.fabric.ServiceProfile("profile",
            name="Example Cloud Provider",
            description="50 to 500 Mbps Hosted Connection to Example Cloud",
            type="L2_PROFILE",
            access_point_type_configs=[equinix.fabric.ServiceProfileAccessPointTypeConfigArgs(
                type="COLO",
                supported_bandwidths=[
                    50,
                    100,
                    200,
                    500,
                ],
                allow_remote_connections=True,
                allow_custom_bandwidth=False,
                allow_bandwidth_auto_approval=False,
                link_protocol_config=equinix.fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs(
                    encapsulation_strategy="CTAGED",
                    reuse_vlan_s_tag=False,
                    encapsulation="DOT1Q",
                ),
                enable_auto_generate_service_key="false,",
                connection_redundancy_required="false,",
                api_config=equinix.fabric.ServiceProfileAccessPointTypeConfigApiConfigArgs(
                    api_available=True,
                    integration_id="Example-Connect-01",
                    bandwidth_from_api=False,
                ),
                connection_label="Virtual Circuit Name",
                authentication_key=equinix.fabric.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs(
                    required=True,
                    label="Example ACCOUNT ID",
                ),
            )],
            account=equinix.fabric.ServiceProfileAccountArgs(
                organization_name="Example Cloud",
                global_organization_name="Example Global",
            ),
            metros=None,
            visibility="PUBLIC",
            marketing_info=equinix.fabric.ServiceProfileMarketingInfoArgs(
                promotion=True,
            ))
        pulumi.export("profileId", profile.id)
        ```

        :param str resource_name: The name of the resource.
        :param ServiceProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileAccessPointTypeConfigArgs']]]]] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['ServiceProfileAccountArgs']]] = None,
                 allowed_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileCustomFieldArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 marketing_info: Optional[pulumi.Input[pulumi.InputType['ServiceProfileMarketingInfoArgs']]] = None,
                 metros: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileMetroArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileNotificationArgs']]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfilePortArgs']]]]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['ServiceProfileProjectArgs']]] = None,
                 self_profile: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[Union[str, 'ProfileState']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
                 virtual_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileVirtualDeviceArgs']]]]] = None,
                 visibility: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceProfileArgs.__new__(ServiceProfileArgs)

            __props__.__dict__["access_point_type_configs"] = access_point_type_configs
            __props__.__dict__["account"] = account
            __props__.__dict__["allowed_emails"] = allowed_emails
            __props__.__dict__["custom_fields"] = custom_fields
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["marketing_info"] = marketing_info
            __props__.__dict__["metros"] = metros
            __props__.__dict__["name"] = name
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["ports"] = ports
            __props__.__dict__["project"] = project
            __props__.__dict__["self_profile"] = self_profile
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["virtual_devices"] = virtual_devices
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["uuid"] = None
        super(ServiceProfile, __self__).__init__(
            'equinix:fabric/serviceProfile:ServiceProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileAccessPointTypeConfigArgs']]]]] = None,
            account: Optional[pulumi.Input[pulumi.InputType['ServiceProfileAccountArgs']]] = None,
            allowed_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            change_log: Optional[pulumi.Input[pulumi.InputType['ServiceProfileChangeLogArgs']]] = None,
            custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileCustomFieldArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            marketing_info: Optional[pulumi.Input[pulumi.InputType['ServiceProfileMarketingInfoArgs']]] = None,
            metros: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileMetroArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileNotificationArgs']]]]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfilePortArgs']]]]] = None,
            project: Optional[pulumi.Input[pulumi.InputType['ServiceProfileProjectArgs']]] = None,
            self_profile: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[Union[str, 'ProfileState']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[Union[str, 'ProfileType']]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            virtual_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileVirtualDeviceArgs']]]]] = None,
            visibility: Optional[pulumi.Input[Union[str, 'ProfileVisibility']]] = None) -> 'ServiceProfile':
        """
        Get an existing ServiceProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileAccessPointTypeConfigArgs']]]] access_point_type_configs: Access point config information
        :param pulumi.Input[pulumi.InputType['ServiceProfileAccountArgs']] account: Account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_emails: Array of contact emails
        :param pulumi.Input[pulumi.InputType['ServiceProfileChangeLogArgs']] change_log: Captures connection lifecycle change information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileCustomFieldArgs']]]] custom_fields: Custom Fields
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[pulumi.InputType['ServiceProfileMarketingInfoArgs']] marketing_info: Marketing Info
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileMetroArgs']]]] metros: Access point config information
        :param pulumi.Input[str] name: Metro Name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileNotificationArgs']]]] notifications: Preferences for notifications on connection configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfilePortArgs']]]] ports: Ports
        :param pulumi.Input[pulumi.InputType['ServiceProfileProjectArgs']] project: Project information
        :param pulumi.Input[bool] self_profile: Self Profile
        :param pulumi.Input[Union[str, 'ProfileState']] state: Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags attached to the connection
        :param pulumi.Input[Union[str, 'ProfileType']] type: Type of access point type config - VD, COLO
        :param pulumi.Input[str] uuid: Colo/Port Uuid
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceProfileVirtualDeviceArgs']]]] virtual_devices: Virtual Devices
        :param pulumi.Input[Union[str, 'ProfileVisibility']] visibility: Service profile visibility - PUBLIC, PRIVATE
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceProfileState.__new__(_ServiceProfileState)

        __props__.__dict__["access_point_type_configs"] = access_point_type_configs
        __props__.__dict__["account"] = account
        __props__.__dict__["allowed_emails"] = allowed_emails
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["marketing_info"] = marketing_info
        __props__.__dict__["metros"] = metros
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["ports"] = ports
        __props__.__dict__["project"] = project
        __props__.__dict__["self_profile"] = self_profile
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["virtual_devices"] = virtual_devices
        __props__.__dict__["visibility"] = visibility
        return ServiceProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfileAccessPointTypeConfig']]]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output[Optional['outputs.ServiceProfileAccount']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="allowedEmails")
    def allowed_emails(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "allowed_emails")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.ServiceProfileChangeLog']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfileCustomField']]]:
        """
        Custom Fields
        """
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="marketingInfo")
    def marketing_info(self) -> pulumi.Output[Optional['outputs.ServiceProfileMarketingInfo']]:
        """
        Marketing Info
        """
        return pulumi.get(self, "marketing_info")

    @property
    @pulumi.getter
    def metros(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfileMetro']]]:
        """
        Access point config information
        """
        return pulumi.get(self, "metros")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfileNotification']]]:
        """
        Preferences for notifications on connection configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfilePort']]]:
        """
        Ports
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional['outputs.ServiceProfileProject']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="selfProfile")
    def self_profile(self) -> pulumi.Output[Optional[bool]]:
        """
        Self Profile
        """
        return pulumi.get(self, "self_profile")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags attached to the connection
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="virtualDevices")
    def virtual_devices(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceProfileVirtualDevice']]]:
        """
        Virtual Devices
        """
        return pulumi.get(self, "virtual_devices")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        Service profile visibility - PUBLIC, PRIVATE
        """
        return pulumi.get(self, "visibility")

