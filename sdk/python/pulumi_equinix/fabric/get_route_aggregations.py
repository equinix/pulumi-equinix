# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRouteAggregationsResult',
    'AwaitableGetRouteAggregationsResult',
    'get_route_aggregations',
    'get_route_aggregations_output',
]

@pulumi.output_type
class GetRouteAggregationsResult:
    """
    A collection of values returned by getRouteAggregations.
    """
    def __init__(__self__, datas=None, filter=None, id=None, pagination=None, sort=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)
        if sort and not isinstance(sort, dict):
            raise TypeError("Expected argument 'sort' to be a dict")
        pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetRouteAggregationsDataResult']:
        """
        Returned list of route aggregation objects
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.GetRouteAggregationsFilterResult':
        """
        Filters for the Data Source Search Request
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetRouteAggregationsPaginationResult']:
        """
        Pagination details for the returned route aggregations list
        """
        return pulumi.get(self, "pagination")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.GetRouteAggregationsSortResult']:
        """
        Filters for the Data Source Search Request
        """
        return pulumi.get(self, "sort")


class AwaitableGetRouteAggregationsResult(GetRouteAggregationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteAggregationsResult(
            datas=self.datas,
            filter=self.filter,
            id=self.id,
            pagination=self.pagination,
            sort=self.sort)


def get_route_aggregations(filter: Optional[Union['GetRouteAggregationsFilterArgs', 'GetRouteAggregationsFilterArgsDict']] = None,
                           pagination: Optional[Union['GetRouteAggregationsPaginationArgs', 'GetRouteAggregationsPaginationArgsDict']] = None,
                           sort: Optional[Union['GetRouteAggregationsSortArgs', 'GetRouteAggregationsSortArgsDict']] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteAggregationsResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_policy = equinix.fabric.get_route_aggregations(filter={
            "property": "/project/projectId",
            "operator": "=",
            "values": ["<route_aggregation_project_id>"],
        },
        pagination={
            "limit": 2,
            "offset": 1,
        })
    pulumi.export("firstRouteAggregationName", ra_policy.datas[0].name)
    pulumi.export("firstRouteAggregationDescription", ra_policy.datas[0].description)
    pulumi.export("firstRouteAggregationConnectionsCount", ra_policy.datas[0].connections_count)
    pulumi.export("firstRouteAggregationRulesCount", ra_policy.datas[0].rules_count)
    ```


    :param Union['GetRouteAggregationsFilterArgs', 'GetRouteAggregationsFilterArgsDict'] filter: Filters for the Data Source Search Request
    :param Union['GetRouteAggregationsPaginationArgs', 'GetRouteAggregationsPaginationArgsDict'] pagination: Pagination details for the returned route aggregations list
    :param Union['GetRouteAggregationsSortArgs', 'GetRouteAggregationsSortArgsDict'] sort: Filters for the Data Source Search Request
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['pagination'] = pagination
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRouteAggregations:getRouteAggregations', __args__, opts=opts, typ=GetRouteAggregationsResult).value

    return AwaitableGetRouteAggregationsResult(
        datas=pulumi.get(__ret__, 'datas'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'),
        sort=pulumi.get(__ret__, 'sort'))
def get_route_aggregations_output(filter: Optional[pulumi.Input[Union['GetRouteAggregationsFilterArgs', 'GetRouteAggregationsFilterArgsDict']]] = None,
                                  pagination: Optional[pulumi.Input[Optional[Union['GetRouteAggregationsPaginationArgs', 'GetRouteAggregationsPaginationArgsDict']]]] = None,
                                  sort: Optional[pulumi.Input[Optional[Union['GetRouteAggregationsSortArgs', 'GetRouteAggregationsSortArgsDict']]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRouteAggregationsResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
    Additional Documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_policy = equinix.fabric.get_route_aggregations(filter={
            "property": "/project/projectId",
            "operator": "=",
            "values": ["<route_aggregation_project_id>"],
        },
        pagination={
            "limit": 2,
            "offset": 1,
        })
    pulumi.export("firstRouteAggregationName", ra_policy.datas[0].name)
    pulumi.export("firstRouteAggregationDescription", ra_policy.datas[0].description)
    pulumi.export("firstRouteAggregationConnectionsCount", ra_policy.datas[0].connections_count)
    pulumi.export("firstRouteAggregationRulesCount", ra_policy.datas[0].rules_count)
    ```


    :param Union['GetRouteAggregationsFilterArgs', 'GetRouteAggregationsFilterArgsDict'] filter: Filters for the Data Source Search Request
    :param Union['GetRouteAggregationsPaginationArgs', 'GetRouteAggregationsPaginationArgsDict'] pagination: Pagination details for the returned route aggregations list
    :param Union['GetRouteAggregationsSortArgs', 'GetRouteAggregationsSortArgsDict'] sort: Filters for the Data Source Search Request
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['pagination'] = pagination
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getRouteAggregations:getRouteAggregations', __args__, opts=opts, typ=GetRouteAggregationsResult)
    return __ret__.apply(lambda __response__: GetRouteAggregationsResult(
        datas=pulumi.get(__response__, 'datas'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        pagination=pulumi.get(__response__, 'pagination'),
        sort=pulumi.get(__response__, 'sort')))
