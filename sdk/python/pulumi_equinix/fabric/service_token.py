# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceTokenArgs', 'ServiceToken']

@pulumi.input_type
class ServiceTokenArgs:
    def __init__(__self__, *,
                 expiration_date_time: pulumi.Input[str],
                 notifications: pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]],
                 service_token_connections: pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input['ServiceTokenProjectArgs']] = None):
        """
        The set of arguments for constructing a ServiceToken resource.
        :param pulumi.Input[str] expiration_date_time: Expiration date and time of the service token; 2020-11-06T07:00:00Z
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]] notifications: Preferences for notifications on Service Token configuration or status changes
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]] service_token_connections: Service Token Connection Type Information
        :param pulumi.Input[str] type: Service Token Type; VC*TOKEN,EPL*TOKEN
        :param pulumi.Input[str] description: Optional Description to the Service Token you will be creating
        :param pulumi.Input[str] name: Name of the Service Token
        :param pulumi.Input['ServiceTokenProjectArgs'] project: Project information
        """
        pulumi.set(__self__, "expiration_date_time", expiration_date_time)
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "service_token_connections", service_token_connections)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="expirationDateTime")
    def expiration_date_time(self) -> pulumi.Input[str]:
        """
        Expiration date and time of the service token; 2020-11-06T07:00:00Z
        """
        return pulumi.get(self, "expiration_date_time")

    @expiration_date_time.setter
    def expiration_date_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "expiration_date_time", value)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]]:
        """
        Preferences for notifications on Service Token configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="serviceTokenConnections")
    def service_token_connections(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]]:
        """
        Service Token Connection Type Information
        """
        return pulumi.get(self, "service_token_connections")

    @service_token_connections.setter
    def service_token_connections(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]]):
        pulumi.set(self, "service_token_connections", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Service Token Type; VC*TOKEN,EPL*TOKEN
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional Description to the Service Token you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Service Token
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ServiceTokenProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ServiceTokenProjectArgs']]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _ServiceTokenState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenAccountArgs']]]] = None,
                 change_logs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenChangeLogArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiration_date_time: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 issuer_side: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]]] = None,
                 project: Optional[pulumi.Input['ServiceTokenProjectArgs']] = None,
                 service_token_connections: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceToken resources.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenAccountArgs']]] accounts: Customer account information that is associated with this service token
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenChangeLogArgs']]] change_logs: Captures connection lifecycle change information
        :param pulumi.Input[str] description: Optional Description to the Service Token you will be creating
        :param pulumi.Input[str] expiration_date_time: Expiration date and time of the service token; 2020-11-06T07:00:00Z
        :param pulumi.Input[str] href: An absolute URL that is the subject of the link's context.
        :param pulumi.Input[str] issuer_side: Information about token side; ASIDE, ZSIDE
        :param pulumi.Input[str] name: Name of the Service Token
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]] notifications: Preferences for notifications on Service Token configuration or status changes
        :param pulumi.Input['ServiceTokenProjectArgs'] project: Project information
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]] service_token_connections: Service Token Connection Type Information
        :param pulumi.Input[str] state: Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        :param pulumi.Input[str] type: Service Token Type; VC*TOKEN,EPL*TOKEN
        :param pulumi.Input[str] uuid: Equinix-assigned service token identifier
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if change_logs is not None:
            pulumi.set(__self__, "change_logs", change_logs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiration_date_time is not None:
            pulumi.set(__self__, "expiration_date_time", expiration_date_time)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if issuer_side is not None:
            pulumi.set(__self__, "issuer_side", issuer_side)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if service_token_connections is not None:
            pulumi.set(__self__, "service_token_connections", service_token_connections)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenAccountArgs']]]]:
        """
        Customer account information that is associated with this service token
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenAccountArgs']]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenChangeLogArgs']]]]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @change_logs.setter
    def change_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenChangeLogArgs']]]]):
        pulumi.set(self, "change_logs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional Description to the Service Token you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="expirationDateTime")
    def expiration_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expiration date and time of the service token; 2020-11-06T07:00:00Z
        """
        return pulumi.get(self, "expiration_date_time")

    @expiration_date_time.setter
    def expiration_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date_time", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        An absolute URL that is the subject of the link's context.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="issuerSide")
    def issuer_side(self) -> Optional[pulumi.Input[str]]:
        """
        Information about token side; ASIDE, ZSIDE
        """
        return pulumi.get(self, "issuer_side")

    @issuer_side.setter
    def issuer_side(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_side", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Service Token
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]]]:
        """
        Preferences for notifications on Service Token configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['ServiceTokenProjectArgs']]:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['ServiceTokenProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serviceTokenConnections")
    def service_token_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]]]:
        """
        Service Token Connection Type Information
        """
        return pulumi.get(self, "service_token_connections")

    @service_token_connections.setter
    def service_token_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTokenServiceTokenConnectionArgs']]]]):
        pulumi.set(self, "service_token_connections", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Service Token Type; VC*TOKEN,EPL*TOKEN
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class ServiceToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiration_date_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenNotificationArgs', 'ServiceTokenNotificationArgsDict']]]]] = None,
                 project: Optional[pulumi.Input[Union['ServiceTokenProjectArgs', 'ServiceTokenProjectArgsDict']]] = None,
                 service_token_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenServiceTokenConnectionArgs', 'ServiceTokenServiceTokenConnectionArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Service Token](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).

        Additional documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
        * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm

        ## Example Usage

        Aside Port Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Aside COLO Service Token",
            expiration_date_time="2025-01-18T06:43:49.981Z",
            notifications=[{
                "emails": [
                    "example@equinix.com",
                    "test1@equinix.com",
                ],
                "type": "ALL",
            }],
            service_token_connections=[{
                "a_sides": [{
                    "access_point_selectors": [{
                        "link_protocol": {
                            "type": "DOT1Q",
                            "vlan_tag": 2987,
                        },
                        "port": {
                            "uuid": "<port_uuid>",
                        },
                        "type": "COLO",
                    }],
                }],
                "bandwidth_limit": 1000,
                "type": "EVPL_VC",
            }],
            type="VC_TOKEN")
        ```

        Zside Port Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Zside COLO Service Token",
            expiration_date_time="2025-01-18T06:43:49.981Z",
            notifications=[{
                "emails": [
                    "example@equinix.com",
                    "test1@equinix.com",
                ],
                "type": "ALL",
            }],
            service_token_connections=[{
                "supported_bandwidths": [
                    50,
                    200,
                    10000,
                ],
                "type": "EVPL_VC",
                "z_sides": [{
                    "access_point_selectors": [{
                        "link_protocol": {
                            "type": "DOT1Q",
                            "vlan_tag": 2087,
                        },
                        "port": {
                            "uuid": "<port_uuid>",
                        },
                        "type": "COLO",
                    }],
                }],
            }],
            type="VC_TOKEN")
        ```

        Zside Virtual Device Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Zside VD Service Token",
            expiration_date_time="2025-01-18T06:43:49.986Z",
            notifications=[{
                "emails": ["example@equinix.com"],
                "type": "ALL",
            }],
            service_token_connections=[{
                "supported_bandwidths": [
                    50,
                    200,
                    10000,
                ],
                "type": "EVPL_VC",
                "z_sides": [{
                    "access_point_selectors": [{
                        "interface": {
                            "type": "NETWORK",
                        },
                        "type": "VD",
                        "virtual_device": {
                            "type": "EDGE",
                            "uuid": "<device_uuid>",
                        },
                    }],
                }],
            }],
            type="VC_TOKEN")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional Description to the Service Token you will be creating
        :param pulumi.Input[str] expiration_date_time: Expiration date and time of the service token; 2020-11-06T07:00:00Z
        :param pulumi.Input[str] name: Name of the Service Token
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenNotificationArgs', 'ServiceTokenNotificationArgsDict']]]] notifications: Preferences for notifications on Service Token configuration or status changes
        :param pulumi.Input[Union['ServiceTokenProjectArgs', 'ServiceTokenProjectArgsDict']] project: Project information
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenServiceTokenConnectionArgs', 'ServiceTokenServiceTokenConnectionArgsDict']]]] service_token_connections: Service Token Connection Type Information
        :param pulumi.Input[str] type: Service Token Type; VC*TOKEN,EPL*TOKEN
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Service Token](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).

        Additional documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
        * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm

        ## Example Usage

        Aside Port Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Aside COLO Service Token",
            expiration_date_time="2025-01-18T06:43:49.981Z",
            notifications=[{
                "emails": [
                    "example@equinix.com",
                    "test1@equinix.com",
                ],
                "type": "ALL",
            }],
            service_token_connections=[{
                "a_sides": [{
                    "access_point_selectors": [{
                        "link_protocol": {
                            "type": "DOT1Q",
                            "vlan_tag": 2987,
                        },
                        "port": {
                            "uuid": "<port_uuid>",
                        },
                        "type": "COLO",
                    }],
                }],
                "bandwidth_limit": 1000,
                "type": "EVPL_VC",
            }],
            type="VC_TOKEN")
        ```

        Zside Port Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Zside COLO Service Token",
            expiration_date_time="2025-01-18T06:43:49.981Z",
            notifications=[{
                "emails": [
                    "example@equinix.com",
                    "test1@equinix.com",
                ],
                "type": "ALL",
            }],
            service_token_connections=[{
                "supported_bandwidths": [
                    50,
                    200,
                    10000,
                ],
                "type": "EVPL_VC",
                "z_sides": [{
                    "access_point_selectors": [{
                        "link_protocol": {
                            "type": "DOT1Q",
                            "vlan_tag": 2087,
                        },
                        "port": {
                            "uuid": "<port_uuid>",
                        },
                        "type": "COLO",
                    }],
                }],
            }],
            type="VC_TOKEN")
        ```

        Zside Virtual Device Service Token
        ```python
        import pulumi
        import pulumi_equinix as equinix

        test = equinix.fabric.ServiceToken("test",
            description="Zside VD Service Token",
            expiration_date_time="2025-01-18T06:43:49.986Z",
            notifications=[{
                "emails": ["example@equinix.com"],
                "type": "ALL",
            }],
            service_token_connections=[{
                "supported_bandwidths": [
                    50,
                    200,
                    10000,
                ],
                "type": "EVPL_VC",
                "z_sides": [{
                    "access_point_selectors": [{
                        "interface": {
                            "type": "NETWORK",
                        },
                        "type": "VD",
                        "virtual_device": {
                            "type": "EDGE",
                            "uuid": "<device_uuid>",
                        },
                    }],
                }],
            }],
            type="VC_TOKEN")
        ```

        :param str resource_name: The name of the resource.
        :param ServiceTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expiration_date_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenNotificationArgs', 'ServiceTokenNotificationArgsDict']]]]] = None,
                 project: Optional[pulumi.Input[Union['ServiceTokenProjectArgs', 'ServiceTokenProjectArgsDict']]] = None,
                 service_token_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenServiceTokenConnectionArgs', 'ServiceTokenServiceTokenConnectionArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceTokenArgs.__new__(ServiceTokenArgs)

            __props__.__dict__["description"] = description
            if expiration_date_time is None and not opts.urn:
                raise TypeError("Missing required property 'expiration_date_time'")
            __props__.__dict__["expiration_date_time"] = expiration_date_time
            __props__.__dict__["name"] = name
            if notifications is None and not opts.urn:
                raise TypeError("Missing required property 'notifications'")
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["project"] = project
            if service_token_connections is None and not opts.urn:
                raise TypeError("Missing required property 'service_token_connections'")
            __props__.__dict__["service_token_connections"] = service_token_connections
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["accounts"] = None
            __props__.__dict__["change_logs"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["issuer_side"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(ServiceToken, __self__).__init__(
            'equinix:fabric/serviceToken:ServiceToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenAccountArgs', 'ServiceTokenAccountArgsDict']]]]] = None,
            change_logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenChangeLogArgs', 'ServiceTokenChangeLogArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            expiration_date_time: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            issuer_side: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenNotificationArgs', 'ServiceTokenNotificationArgsDict']]]]] = None,
            project: Optional[pulumi.Input[Union['ServiceTokenProjectArgs', 'ServiceTokenProjectArgsDict']]] = None,
            service_token_connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenServiceTokenConnectionArgs', 'ServiceTokenServiceTokenConnectionArgsDict']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'ServiceToken':
        """
        Get an existing ServiceToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenAccountArgs', 'ServiceTokenAccountArgsDict']]]] accounts: Customer account information that is associated with this service token
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenChangeLogArgs', 'ServiceTokenChangeLogArgsDict']]]] change_logs: Captures connection lifecycle change information
        :param pulumi.Input[str] description: Optional Description to the Service Token you will be creating
        :param pulumi.Input[str] expiration_date_time: Expiration date and time of the service token; 2020-11-06T07:00:00Z
        :param pulumi.Input[str] href: An absolute URL that is the subject of the link's context.
        :param pulumi.Input[str] issuer_side: Information about token side; ASIDE, ZSIDE
        :param pulumi.Input[str] name: Name of the Service Token
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenNotificationArgs', 'ServiceTokenNotificationArgsDict']]]] notifications: Preferences for notifications on Service Token configuration or status changes
        :param pulumi.Input[Union['ServiceTokenProjectArgs', 'ServiceTokenProjectArgsDict']] project: Project information
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceTokenServiceTokenConnectionArgs', 'ServiceTokenServiceTokenConnectionArgsDict']]]] service_token_connections: Service Token Connection Type Information
        :param pulumi.Input[str] state: Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        :param pulumi.Input[str] type: Service Token Type; VC*TOKEN,EPL*TOKEN
        :param pulumi.Input[str] uuid: Equinix-assigned service token identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceTokenState.__new__(_ServiceTokenState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["change_logs"] = change_logs
        __props__.__dict__["description"] = description
        __props__.__dict__["expiration_date_time"] = expiration_date_time
        __props__.__dict__["href"] = href
        __props__.__dict__["issuer_side"] = issuer_side
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["project"] = project
        __props__.__dict__["service_token_connections"] = service_token_connections
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return ServiceToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Sequence['outputs.ServiceTokenAccount']]:
        """
        Customer account information that is associated with this service token
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> pulumi.Output[Sequence['outputs.ServiceTokenChangeLog']]:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional Description to the Service Token you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirationDateTime")
    def expiration_date_time(self) -> pulumi.Output[str]:
        """
        Expiration date and time of the service token; 2020-11-06T07:00:00Z
        """
        return pulumi.get(self, "expiration_date_time")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        An absolute URL that is the subject of the link's context.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="issuerSide")
    def issuer_side(self) -> pulumi.Output[str]:
        """
        Information about token side; ASIDE, ZSIDE
        """
        return pulumi.get(self, "issuer_side")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Service Token
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.ServiceTokenNotification']]:
        """
        Preferences for notifications on Service Token configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['outputs.ServiceTokenProject']:
        """
        Project information
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceTokenConnections")
    def service_token_connections(self) -> pulumi.Output[Sequence['outputs.ServiceTokenServiceTokenConnection']]:
        """
        Service Token Connection Type Information
        """
        return pulumi.get(self, "service_token_connections")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Service Token Type; VC*TOKEN,EPL*TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")

