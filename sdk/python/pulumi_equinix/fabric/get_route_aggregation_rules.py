# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRouteAggregationRulesResult',
    'AwaitableGetRouteAggregationRulesResult',
    'get_route_aggregation_rules',
    'get_route_aggregation_rules_output',
]

@pulumi.output_type
class GetRouteAggregationRulesResult:
    """
    A collection of values returned by getRouteAggregationRules.
    """
    def __init__(__self__, datas=None, id=None, pagination=None, route_aggregation_id=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pagination and not isinstance(pagination, dict):
            raise TypeError("Expected argument 'pagination' to be a dict")
        pulumi.set(__self__, "pagination", pagination)
        if route_aggregation_id and not isinstance(route_aggregation_id, str):
            raise TypeError("Expected argument 'route_aggregation_id' to be a str")
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetRouteAggregationRulesDataResult']:
        """
        Returned list of route aggregation rule objects
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pagination(self) -> Optional['outputs.GetRouteAggregationRulesPaginationResult']:
        """
        Pagination details for the returned route aggregation rules list
        """
        return pulumi.get(self, "pagination")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> str:
        """
        The uuid of the route aggregation rule this data source should retrieve
        """
        return pulumi.get(self, "route_aggregation_id")


class AwaitableGetRouteAggregationRulesResult(GetRouteAggregationRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteAggregationRulesResult(
            datas=self.datas,
            id=self.id,
            pagination=self.pagination,
            route_aggregation_id=self.route_aggregation_id)


def get_route_aggregation_rules(pagination: Optional[Union['GetRouteAggregationRulesPaginationArgs', 'GetRouteAggregationRulesPaginationArgsDict']] = None,
                                route_aggregation_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteAggregationRulesResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_rules = equinix.fabric.get_route_aggregation_rules(route_aggregation_id="<route_aggregation_id>",
        pagination={
            "limit": 2,
            "offset": 1,
        })
    pulumi.export("routeAggregationRuleName", ra_rules.datas[0].name)
    pulumi.export("routeAggregationRuleDescription", ra_rules.datas[0].description)
    pulumi.export("routeAggregationRulePrefix", ra_rules.datas[0].prefix)
    pulumi.export("routeAggregationRuleState", ra_rules.datas[0].state)
    ```


    :param Union['GetRouteAggregationRulesPaginationArgs', 'GetRouteAggregationRulesPaginationArgsDict'] pagination: Pagination details for the returned route aggregation rules list
    :param str route_aggregation_id: The uuid of the route aggregation rule this data source should retrieve
    """
    __args__ = dict()
    __args__['pagination'] = pagination
    __args__['routeAggregationId'] = route_aggregation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRouteAggregationRules:getRouteAggregationRules', __args__, opts=opts, typ=GetRouteAggregationRulesResult).value

    return AwaitableGetRouteAggregationRulesResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        pagination=pulumi.get(__ret__, 'pagination'),
        route_aggregation_id=pulumi.get(__ret__, 'route_aggregation_id'))
def get_route_aggregation_rules_output(pagination: Optional[pulumi.Input[Optional[Union['GetRouteAggregationRulesPaginationArgs', 'GetRouteAggregationRulesPaginationArgsDict']]]] = None,
                                       route_aggregation_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRouteAggregationRulesResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregation Rules with pagination details
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    ra_rules = equinix.fabric.get_route_aggregation_rules(route_aggregation_id="<route_aggregation_id>",
        pagination={
            "limit": 2,
            "offset": 1,
        })
    pulumi.export("routeAggregationRuleName", ra_rules.datas[0].name)
    pulumi.export("routeAggregationRuleDescription", ra_rules.datas[0].description)
    pulumi.export("routeAggregationRulePrefix", ra_rules.datas[0].prefix)
    pulumi.export("routeAggregationRuleState", ra_rules.datas[0].state)
    ```


    :param Union['GetRouteAggregationRulesPaginationArgs', 'GetRouteAggregationRulesPaginationArgsDict'] pagination: Pagination details for the returned route aggregation rules list
    :param str route_aggregation_id: The uuid of the route aggregation rule this data source should retrieve
    """
    __args__ = dict()
    __args__['pagination'] = pagination
    __args__['routeAggregationId'] = route_aggregation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getRouteAggregationRules:getRouteAggregationRules', __args__, opts=opts, typ=GetRouteAggregationRulesResult)
    return __ret__.apply(lambda __response__: GetRouteAggregationRulesResult(
        datas=pulumi.get(__response__, 'datas'),
        id=pulumi.get(__response__, 'id'),
        pagination=pulumi.get(__response__, 'pagination'),
        route_aggregation_id=pulumi.get(__response__, 'route_aggregation_id')))
