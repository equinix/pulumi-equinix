# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceTokenResult',
    'AwaitableGetServiceTokenResult',
    'get_service_token',
    'get_service_token_output',
]

@pulumi.output_type
class GetServiceTokenResult:
    """
    A collection of values returned by getServiceToken.
    """
    def __init__(__self__, accounts=None, change_logs=None, description=None, expiration_date_time=None, href=None, id=None, issuer_side=None, name=None, notifications=None, projects=None, service_token_connections=None, state=None, type=None, uuid=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expiration_date_time and not isinstance(expiration_date_time, str):
            raise TypeError("Expected argument 'expiration_date_time' to be a str")
        pulumi.set(__self__, "expiration_date_time", expiration_date_time)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer_side and not isinstance(issuer_side, str):
            raise TypeError("Expected argument 'issuer_side' to be a str")
        pulumi.set(__self__, "issuer_side", issuer_side)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if service_token_connections and not isinstance(service_token_connections, list):
            raise TypeError("Expected argument 'service_token_connections' to be a list")
        pulumi.set(__self__, "service_token_connections", service_token_connections)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetServiceTokenAccountResult']:
        """
        Customer account information that is associated with this service token
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetServiceTokenChangeLogResult']:
        """
        Captures connection lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional Description to the Service Token you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirationDateTime")
    def expiration_date_time(self) -> str:
        """
        Expiration date and time of the service token; 2020-11-06T07:00:00Z
        """
        return pulumi.get(self, "expiration_date_time")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        An absolute URL that is the subject of the link's context.
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerSide")
    def issuer_side(self) -> str:
        """
        Information about token side; ASIDE, ZSIDE
        """
        return pulumi.get(self, "issuer_side")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Service Token
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetServiceTokenNotificationResult']:
        """
        Preferences for notifications on Service Token configuration or status changes
        """
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetServiceTokenProjectResult']:
        """
        Project information
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="serviceTokenConnections")
    def service_token_connections(self) -> Sequence['outputs.GetServiceTokenServiceTokenConnectionResult']:
        """
        Service Token Connection Type Information
        """
        return pulumi.get(self, "service_token_connections")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Service Token Type; VC*TOKEN,EPL*TOKEN
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned service token identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetServiceTokenResult(GetServiceTokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceTokenResult(
            accounts=self.accounts,
            change_logs=self.change_logs,
            description=self.description,
            expiration_date_time=self.expiration_date_time,
            href=self.href,
            id=self.id,
            issuer_side=self.issuer_side,
            name=self.name,
            notifications=self.notifications,
            projects=self.projects,
            service_token_connections=self.service_token_connections,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_service_token(uuid: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceTokenResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    service_token = equinix.fabric.get_service_token(uuid="<uuid_of_service_token>")
    pulumi.export("id", service_token.id)
    pulumi.export("type", service_token.type)
    pulumi.export("expirationDateTime", service_token.expiration_date_time)
    pulumi.export("supportedBandwidths", service_token.service_token_connections[0].supported_bandwidths)
    pulumi.export("virtualDeviceType", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].virtual_device.type)
    pulumi.export("virtualDeviceUuid", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].virtual_device.uuid)
    pulumi.export("interfaceType", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].interface.type)
    pulumi.export("interfaceUuid", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].interface.id)
    ```


    :param str uuid: Equinix-assigned service token identifier
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getServiceToken:getServiceToken', __args__, opts=opts, typ=GetServiceTokenResult).value

    return AwaitableGetServiceTokenResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        change_logs=pulumi.get(__ret__, 'change_logs'),
        description=pulumi.get(__ret__, 'description'),
        expiration_date_time=pulumi.get(__ret__, 'expiration_date_time'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        issuer_side=pulumi.get(__ret__, 'issuer_side'),
        name=pulumi.get(__ret__, 'name'),
        notifications=pulumi.get(__ret__, 'notifications'),
        projects=pulumi.get(__ret__, 'projects'),
        service_token_connections=pulumi.get(__ret__, 'service_token_connections'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_service_token)
def get_service_token_output(uuid: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceTokenResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch service token for a given UUID

    Additional documentation:
    * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
    * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    service_token = equinix.fabric.get_service_token(uuid="<uuid_of_service_token>")
    pulumi.export("id", service_token.id)
    pulumi.export("type", service_token.type)
    pulumi.export("expirationDateTime", service_token.expiration_date_time)
    pulumi.export("supportedBandwidths", service_token.service_token_connections[0].supported_bandwidths)
    pulumi.export("virtualDeviceType", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].virtual_device.type)
    pulumi.export("virtualDeviceUuid", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].virtual_device.uuid)
    pulumi.export("interfaceType", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].interface.type)
    pulumi.export("interfaceUuid", service_token.service_token_connections[0].z_sides[0].access_point_selectors[0].interface.id)
    ```


    :param str uuid: Equinix-assigned service token identifier
    """
    ...
