# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import _enums as _root_enums
from ._enums import *

__all__ = [
    'CloudRouterAccountArgs',
    'CloudRouterChangeLogArgs',
    'CloudRouterLocationArgs',
    'CloudRouterNotificationArgs',
    'CloudRouterOrderArgs',
    'CloudRouterPackageArgs',
    'CloudRouterProjectArgs',
    'ConnectionASideArgs',
    'ConnectionASideAccessPointArgs',
    'ConnectionASideAccessPointAccountArgs',
    'ConnectionASideAccessPointGatewayArgs',
    'ConnectionASideAccessPointInterfaceArgs',
    'ConnectionASideAccessPointLinkProtocolArgs',
    'ConnectionASideAccessPointLocationArgs',
    'ConnectionASideAccessPointNetworkArgs',
    'ConnectionASideAccessPointPortArgs',
    'ConnectionASideAccessPointPortRedundancyArgs',
    'ConnectionASideAccessPointProfileArgs',
    'ConnectionASideAccessPointProfileAccessPointTypeConfigArgs',
    'ConnectionASideAccessPointRouterArgs',
    'ConnectionASideAccessPointRoutingProtocolArgs',
    'ConnectionASideAccessPointVirtualDeviceArgs',
    'ConnectionASideAdditionalInfoArgs',
    'ConnectionASideServiceTokenArgs',
    'ConnectionAccountArgs',
    'ConnectionChangeLogArgs',
    'ConnectionNotificationArgs',
    'ConnectionOperationArgs',
    'ConnectionOperationErrorArgs',
    'ConnectionOperationErrorAdditionalInfoArgs',
    'ConnectionOrderArgs',
    'ConnectionProjectArgs',
    'ConnectionRedundancyArgs',
    'ConnectionZSideArgs',
    'ConnectionZSideAccessPointArgs',
    'ConnectionZSideAccessPointAccountArgs',
    'ConnectionZSideAccessPointGatewayArgs',
    'ConnectionZSideAccessPointInterfaceArgs',
    'ConnectionZSideAccessPointLinkProtocolArgs',
    'ConnectionZSideAccessPointLocationArgs',
    'ConnectionZSideAccessPointNetworkArgs',
    'ConnectionZSideAccessPointPortArgs',
    'ConnectionZSideAccessPointPortRedundancyArgs',
    'ConnectionZSideAccessPointProfileArgs',
    'ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs',
    'ConnectionZSideAccessPointRouterArgs',
    'ConnectionZSideAccessPointRoutingProtocolArgs',
    'ConnectionZSideAccessPointVirtualDeviceArgs',
    'ConnectionZSideAdditionalInfoArgs',
    'ConnectionZSideServiceTokenArgs',
    'RoutingProtocolBfdArgs',
    'RoutingProtocolBgpIpv4Args',
    'RoutingProtocolBgpIpv6Args',
    'RoutingProtocolChangeArgs',
    'RoutingProtocolChangeLogArgs',
    'RoutingProtocolDirectIpv4Args',
    'RoutingProtocolDirectIpv6Args',
    'RoutingProtocolOperationArgs',
    'RoutingProtocolOperationErrorArgs',
    'RoutingProtocolOperationErrorAdditionalInfoArgs',
    'ServiceProfileAccessPointTypeConfigArgs',
    'ServiceProfileAccessPointTypeConfigApiConfigArgs',
    'ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs',
    'ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs',
    'ServiceProfileAccountArgs',
    'ServiceProfileChangeLogArgs',
    'ServiceProfileCustomFieldArgs',
    'ServiceProfileMarketingInfoArgs',
    'ServiceProfileMarketingInfoProcessStepArgs',
    'ServiceProfileMetroArgs',
    'ServiceProfileNotificationArgs',
    'ServiceProfilePortArgs',
    'ServiceProfilePortLocationArgs',
    'ServiceProfileProjectArgs',
    'ServiceProfileVirtualDeviceArgs',
    'ServiceProfileVirtualDeviceLocationArgs',
    'GetCloudRouterProjectArgs',
    'GetConnectionProjectArgs',
    'GetPortsFilterArgs',
    'GetRoutingProtocolBfdArgs',
    'GetRoutingProtocolBgpIpv4Args',
    'GetRoutingProtocolBgpIpv6Args',
    'GetRoutingProtocolDirectIpv4Args',
    'GetRoutingProtocolDirectIpv6Args',
    'GetServiceProfilesFilterArgs',
    'GetServiceProfilesSortArgs',
]

@pulumi.input_type
class CloudRouterAccountArgs:
    def __init__(__self__, *,
                 account_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] account_number: Account Number
        """
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[pulumi.Input[int]]:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_number", value)


@pulumi.input_type
class CloudRouterChangeLogArgs:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_email: Optional[pulumi.Input[str]] = None,
                 created_by_full_name: Optional[pulumi.Input[str]] = None,
                 created_date_time: Optional[pulumi.Input[str]] = None,
                 deleted_by: Optional[pulumi.Input[str]] = None,
                 deleted_by_email: Optional[pulumi.Input[str]] = None,
                 deleted_by_full_name: Optional[pulumi.Input[str]] = None,
                 deleted_date_time: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_email: Optional[pulumi.Input[str]] = None,
                 updated_by_full_name: Optional[pulumi.Input[str]] = None,
                 updated_date_time: Optional[pulumi.Input[str]] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_email")

    @created_by_email.setter
    def created_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_email", value)

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_full_name")

    @created_by_full_name.setter
    def created_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_full_name", value)

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_date_time")

    @created_date_time.setter
    def created_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date_time", value)

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by", value)

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_email")

    @deleted_by_email.setter
    def deleted_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_email", value)

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_full_name")

    @deleted_by_full_name.setter
    def deleted_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_full_name", value)

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_date_time")

    @deleted_date_time.setter
    def deleted_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_date_time", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_email")

    @updated_by_email.setter
    def updated_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_email", value)

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_full_name")

    @updated_by_full_name.setter
    def updated_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_full_name", value)

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_date_time")

    @updated_date_time.setter
    def updated_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_date_time", value)


@pulumi.input_type
class CloudRouterLocationArgs:
    def __init__(__self__, *,
                 ibx: Optional[pulumi.Input[str]] = None,
                 metro_code: Optional[pulumi.Input[str]] = None,
                 metro_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ibx: IBX Code
        :param pulumi.Input[str] metro_code: Access point metro code
        :param pulumi.Input[str] metro_name: Access point metro name
        :param pulumi.Input[str] region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @metro_name.setter
    def metro_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class CloudRouterNotificationArgs:
    def __init__(__self__, *,
                 emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 send_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: Array of contact emails
        :param pulumi.Input[str] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")

    @send_interval.setter
    def send_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_interval", value)


@pulumi.input_type
class CloudRouterOrderArgs:
    def __init__(__self__, *,
                 billing_tier: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[str]] = None,
                 order_number: Optional[pulumi.Input[str]] = None,
                 purchase_order_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] billing_tier: Billing tier for connection bandwidth
        :param pulumi.Input[str] order_id: Order Identification
        :param pulumi.Input[str] order_number: Order Reference Number
        :param pulumi.Input[str] purchase_order_number: Purchase order number
        """
        if billing_tier is not None:
            pulumi.set(__self__, "billing_tier", billing_tier)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if purchase_order_number is not None:
            pulumi.set(__self__, "purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @billing_tier.setter
    def billing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_tier", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[str]]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_id", value)

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[pulumi.Input[str]]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @order_number.setter
    def order_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_number", value)

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[pulumi.Input[str]]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @purchase_order_number.setter
    def purchase_order_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purchase_order_number", value)


@pulumi.input_type
class CloudRouterPackageArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[str]):
        """
        :param pulumi.Input[str] code: Fabric Cloud Router package code
        """
        pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[str]:
        """
        Fabric Cloud Router package code
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[str]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class CloudRouterProjectArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[str] project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ConnectionASideArgs:
    def __init__(__self__, *,
                 access_point: Optional[pulumi.Input['ConnectionASideAccessPointArgs']] = None,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAdditionalInfoArgs']]]] = None,
                 service_token: Optional[pulumi.Input['ConnectionASideServiceTokenArgs']] = None):
        """
        :param pulumi.Input['ConnectionASideAccessPointArgs'] access_point: Point of access details
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideAdditionalInfoArgs']]] additional_info: Connection side additional information
        :param pulumi.Input['ConnectionASideServiceTokenArgs'] service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional[pulumi.Input['ConnectionASideAccessPointArgs']]:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @access_point.setter
    def access_point(self, value: Optional[pulumi.Input['ConnectionASideAccessPointArgs']]):
        pulumi.set(self, "access_point", value)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAdditionalInfoArgs']]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @additional_info.setter
    def additional_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_info", value)

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional[pulumi.Input['ConnectionASideServiceTokenArgs']]:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")

    @service_token.setter
    def service_token(self, value: Optional[pulumi.Input['ConnectionASideServiceTokenArgs']]):
        pulumi.set(self, "service_token", value)


@pulumi.input_type
class ConnectionASideAccessPointArgs:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['ConnectionASideAccessPointAccountArgs']] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input['ConnectionASideAccessPointGatewayArgs']] = None,
                 interface: Optional[pulumi.Input['ConnectionASideAccessPointInterfaceArgs']] = None,
                 link_protocol: Optional[pulumi.Input['ConnectionASideAccessPointLinkProtocolArgs']] = None,
                 location: Optional[pulumi.Input['ConnectionASideAccessPointLocationArgs']] = None,
                 network: Optional[pulumi.Input['ConnectionASideAccessPointNetworkArgs']] = None,
                 peering_type: Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]] = None,
                 port: Optional[pulumi.Input['ConnectionASideAccessPointPortArgs']] = None,
                 profile: Optional[pulumi.Input['ConnectionASideAccessPointProfileArgs']] = None,
                 provider_connection_id: Optional[pulumi.Input[str]] = None,
                 router: Optional[pulumi.Input['ConnectionASideAccessPointRouterArgs']] = None,
                 routing_protocols: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointRoutingProtocolArgs']]]] = None,
                 seller_region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'AccessPointType']]] = None,
                 virtual_device: Optional[pulumi.Input['ConnectionASideAccessPointVirtualDeviceArgs']] = None):
        """
        :param pulumi.Input['ConnectionASideAccessPointAccountArgs'] account: Account
        :param pulumi.Input[str] authentication_key: Authentication key for provider based connections
        :param pulumi.Input['ConnectionASideAccessPointInterfaceArgs'] interface: Virtual device interface
        :param pulumi.Input['ConnectionASideAccessPointLinkProtocolArgs'] link_protocol: Connection link protocol
        :param pulumi.Input['ConnectionASideAccessPointLocationArgs'] location: Access point location
        :param pulumi.Input[Union[str, 'AccessPointPeeringType']] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param pulumi.Input['ConnectionASideAccessPointPortArgs'] port: Port access point information
        :param pulumi.Input['ConnectionASideAccessPointProfileArgs'] profile: Service Profile
        :param pulumi.Input[str] provider_connection_id: Provider assigned Connection Id
        :param pulumi.Input['ConnectionASideAccessPointRouterArgs'] router: Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointRoutingProtocolArgs']]] routing_protocols: Access point routing protocols configuration
        :param pulumi.Input[str] seller_region: Access point seller region
        :param pulumi.Input[Union[str, 'AccessPointType']] type: Interface type
        :param pulumi.Input['ConnectionASideAccessPointVirtualDeviceArgs'] virtual_device: Virtual device
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
            pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if provider_connection_id is not None:
            pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if routing_protocols is not None:
            pulumi.set(__self__, "routing_protocols", routing_protocols)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ConnectionASideAccessPointAccountArgs']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ConnectionASideAccessPointAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key for provider based connections
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input['ConnectionASideAccessPointGatewayArgs']]:
        warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
        pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")

        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input['ConnectionASideAccessPointGatewayArgs']]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input['ConnectionASideAccessPointInterfaceArgs']]:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input['ConnectionASideAccessPointInterfaceArgs']]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional[pulumi.Input['ConnectionASideAccessPointLinkProtocolArgs']]:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @link_protocol.setter
    def link_protocol(self, value: Optional[pulumi.Input['ConnectionASideAccessPointLinkProtocolArgs']]):
        pulumi.set(self, "link_protocol", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['ConnectionASideAccessPointLocationArgs']]:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['ConnectionASideAccessPointLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ConnectionASideAccessPointNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ConnectionASideAccessPointNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @peering_type.setter
    def peering_type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]]):
        pulumi.set(self, "peering_type", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input['ConnectionASideAccessPointPortArgs']]:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input['ConnectionASideAccessPointPortArgs']]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input['ConnectionASideAccessPointProfileArgs']]:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input['ConnectionASideAccessPointProfileArgs']]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @provider_connection_id.setter
    def provider_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_connection_id", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input['ConnectionASideAccessPointRouterArgs']]:
        """
        Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        """
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input['ConnectionASideAccessPointRouterArgs']]):
        pulumi.set(self, "router", value)

    @property
    @pulumi.getter(name="routingProtocols")
    def routing_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointRoutingProtocolArgs']]]]:
        """
        Access point routing protocols configuration
        """
        return pulumi.get(self, "routing_protocols")

    @routing_protocols.setter
    def routing_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointRoutingProtocolArgs']]]]):
        pulumi.set(self, "routing_protocols", value)

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @seller_region.setter
    def seller_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seller_region", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional[pulumi.Input['ConnectionASideAccessPointVirtualDeviceArgs']]:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")

    @virtual_device.setter
    def virtual_device(self, value: Optional[pulumi.Input['ConnectionASideAccessPointVirtualDeviceArgs']]):
        pulumi.set(self, "virtual_device", value)


@pulumi.input_type
class ConnectionASideAccessPointAccountArgs:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_number: Optional[pulumi.Input[int]] = None,
                 global_cust_id: Optional[pulumi.Input[str]] = None,
                 global_org_id: Optional[pulumi.Input[str]] = None,
                 global_organization_name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None):
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_cust_id")

    @global_cust_id.setter
    def global_cust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cust_id", value)

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_org_id")

    @global_org_id.setter
    def global_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_org_id", value)

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_organization_name")

    @global_organization_name.setter
    def global_organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_organization_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)


@pulumi.input_type
class ConnectionASideAccessPointGatewayArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointInterfaceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: id
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointLinkProtocolArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]] = None,
                 vlan_c_tag: Optional[pulumi.Input[int]] = None,
                 vlan_s_tag: Optional[pulumi.Input[int]] = None,
                 vlan_tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Union[str, 'AccessPointLinkProtocolType']] type: Interface type
        :param pulumi.Input[int] vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param pulumi.Input[int] vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param pulumi.Input[int] vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @vlan_c_tag.setter
    def vlan_c_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_c_tag", value)

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @vlan_s_tag.setter
    def vlan_s_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_s_tag", value)

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @vlan_tag.setter
    def vlan_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_tag", value)


@pulumi.input_type
class ConnectionASideAccessPointLocationArgs:
    def __init__(__self__, *,
                 ibx: Optional[pulumi.Input[str]] = None,
                 metro_code: Optional[pulumi.Input[Union[str, '_root_enums.Metro']]] = None,
                 metro_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ibx: IBX Code
        :param pulumi.Input[Union[str, '_root_enums.Metro']] metro_code: Access point metro code
        :param pulumi.Input[str] metro_name: Access point metro name
        :param pulumi.Input[str] region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[pulumi.Input[Union[str, '_root_enums.Metro']]]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: Optional[pulumi.Input[Union[str, '_root_enums.Metro']]]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @metro_name.setter
    def metro_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ConnectionASideAccessPointNetworkArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointPortArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointPortRedundancyArgs']]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointPortRedundancyArgs']]] redundancies: Redundancy Information
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redundancies is not None:
            pulumi.set(__self__, "redundancies", redundancies)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointPortRedundancyArgs']]]]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @redundancies.setter
    def redundancies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointPortRedundancyArgs']]]]):
        pulumi.set(self, "redundancies", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointPortRedundancyArgs:
    def __init__(__self__, *,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] priority: Priority type- PRIMARY, SECONDARY
        """
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class ConnectionASideAccessPointProfileArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ProfileType']],
                 uuid: pulumi.Input[str],
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Union[str, 'ProfileType']] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs']]] access_point_type_configs: Access point config information
        :param pulumi.Input[str] description: User-provided service description
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] name: Port name
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ProfileType']]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ProfileType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @access_point_type_configs.setter
    def access_point_type_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionASideAccessPointProfileAccessPointTypeConfigArgs']]]]):
        pulumi.set(self, "access_point_type_configs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ConnectionASideAccessPointProfileAccessPointTypeConfigArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointRouterArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointRoutingProtocolArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] state: Routing protocol instance state
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAccessPointVirtualDeviceArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionASideAdditionalInfoArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Additional information key
        :param pulumi.Input[str] value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConnectionASideServiceTokenArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ServiceTokenType']]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: User-provided service description
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[Union[str, 'ServiceTokenType']] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ServiceTokenType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ServiceTokenType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionAccountArgs:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_number: Optional[pulumi.Input[int]] = None,
                 global_cust_id: Optional[pulumi.Input[str]] = None,
                 global_org_id: Optional[pulumi.Input[str]] = None,
                 global_organization_name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None):
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_cust_id")

    @global_cust_id.setter
    def global_cust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cust_id", value)

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_org_id")

    @global_org_id.setter
    def global_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_org_id", value)

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_organization_name")

    @global_organization_name.setter
    def global_organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_organization_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)


@pulumi.input_type
class ConnectionChangeLogArgs:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_email: Optional[pulumi.Input[str]] = None,
                 created_by_full_name: Optional[pulumi.Input[str]] = None,
                 created_date_time: Optional[pulumi.Input[str]] = None,
                 deleted_by: Optional[pulumi.Input[str]] = None,
                 deleted_by_email: Optional[pulumi.Input[str]] = None,
                 deleted_by_full_name: Optional[pulumi.Input[str]] = None,
                 deleted_date_time: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_email: Optional[pulumi.Input[str]] = None,
                 updated_by_full_name: Optional[pulumi.Input[str]] = None,
                 updated_date_time: Optional[pulumi.Input[str]] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_email")

    @created_by_email.setter
    def created_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_email", value)

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_full_name")

    @created_by_full_name.setter
    def created_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_full_name", value)

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_date_time")

    @created_date_time.setter
    def created_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date_time", value)

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by", value)

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_email")

    @deleted_by_email.setter
    def deleted_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_email", value)

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_full_name")

    @deleted_by_full_name.setter
    def deleted_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_full_name", value)

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_date_time")

    @deleted_date_time.setter
    def deleted_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_date_time", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_email")

    @updated_by_email.setter
    def updated_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_email", value)

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_full_name")

    @updated_by_full_name.setter
    def updated_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_full_name", value)

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_date_time")

    @updated_date_time.setter
    def updated_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_date_time", value)


@pulumi.input_type
class ConnectionNotificationArgs:
    def __init__(__self__, *,
                 emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[Union[str, 'NotificationsType']],
                 send_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: Array of contact emails
        :param pulumi.Input[Union[str, 'NotificationsType']] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'NotificationsType']]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'NotificationsType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")

    @send_interval.setter
    def send_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_interval", value)


@pulumi.input_type
class ConnectionOperationArgs:
    def __init__(__self__, *,
                 equinix_status: Optional[pulumi.Input[str]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorArgs']]]] = None,
                 provider_status: Optional[pulumi.Input[str]] = None):
        if equinix_status is not None:
            pulumi.set(__self__, "equinix_status", equinix_status)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if provider_status is not None:
            pulumi.set(__self__, "provider_status", provider_status)

    @property
    @pulumi.getter(name="equinixStatus")
    def equinix_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "equinix_status")

    @equinix_status.setter
    def equinix_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equinix_status", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorArgs']]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter(name="providerStatus")
    def provider_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_status")

    @provider_status.setter
    def provider_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_status", value)


@pulumi.input_type
class ConnectionOperationErrorArgs:
    def __init__(__self__, *,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorAdditionalInfoArgs']]]] = None,
                 correlation_id: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[str]] = None,
                 error_code: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 help: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorAdditionalInfoArgs']]] additional_info: Connection side additional information
        """
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if correlation_id is not None:
            pulumi.set(__self__, "correlation_id", correlation_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if help is not None:
            pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorAdditionalInfoArgs']]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @additional_info.setter
    def additional_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionOperationErrorAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_info", value)

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "correlation_id")

    @correlation_id.setter
    def correlation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "correlation_id", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help", value)


@pulumi.input_type
class ConnectionOperationErrorAdditionalInfoArgs:
    def __init__(__self__, *,
                 property: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        if property is not None:
            pulumi.set(__self__, "property", property)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ConnectionOrderArgs:
    def __init__(__self__, *,
                 billing_tier: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[str]] = None,
                 order_number: Optional[pulumi.Input[str]] = None,
                 purchase_order_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] billing_tier: Billing tier for connection bandwidth
        :param pulumi.Input[str] order_id: Order Identification
        :param pulumi.Input[str] order_number: Order Reference Number
        :param pulumi.Input[str] purchase_order_number: Purchase order number
        """
        if billing_tier is not None:
            pulumi.set(__self__, "billing_tier", billing_tier)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if purchase_order_number is not None:
            pulumi.set(__self__, "purchase_order_number", purchase_order_number)

    @property
    @pulumi.getter(name="billingTier")
    def billing_tier(self) -> Optional[pulumi.Input[str]]:
        """
        Billing tier for connection bandwidth
        """
        return pulumi.get(self, "billing_tier")

    @billing_tier.setter
    def billing_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_tier", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[str]]:
        """
        Order Identification
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_id", value)

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[pulumi.Input[str]]:
        """
        Order Reference Number
        """
        return pulumi.get(self, "order_number")

    @order_number.setter
    def order_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_number", value)

    @property
    @pulumi.getter(name="purchaseOrderNumber")
    def purchase_order_number(self) -> Optional[pulumi.Input[str]]:
        """
        Purchase order number
        """
        return pulumi.get(self, "purchase_order_number")

    @purchase_order_number.setter
    def purchase_order_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purchase_order_number", value)


@pulumi.input_type
class ConnectionProjectArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[str] project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ConnectionRedundancyArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group: Redundancy group identifier
        :param pulumi.Input[str] priority: Priority type- PRIMARY, SECONDARY
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Redundancy group identifier
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class ConnectionZSideArgs:
    def __init__(__self__, *,
                 access_point: Optional[pulumi.Input['ConnectionZSideAccessPointArgs']] = None,
                 additional_info: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAdditionalInfoArgs']]]] = None,
                 service_token: Optional[pulumi.Input['ConnectionZSideServiceTokenArgs']] = None):
        """
        :param pulumi.Input['ConnectionZSideAccessPointArgs'] access_point: Point of access details
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAdditionalInfoArgs']]] additional_info: Connection side additional information
        :param pulumi.Input['ConnectionZSideServiceTokenArgs'] service_token: For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        if access_point is not None:
            pulumi.set(__self__, "access_point", access_point)
        if additional_info is not None:
            pulumi.set(__self__, "additional_info", additional_info)
        if service_token is not None:
            pulumi.set(__self__, "service_token", service_token)

    @property
    @pulumi.getter(name="accessPoint")
    def access_point(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointArgs']]:
        """
        Point of access details
        """
        return pulumi.get(self, "access_point")

    @access_point.setter
    def access_point(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointArgs']]):
        pulumi.set(self, "access_point", value)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAdditionalInfoArgs']]]]:
        """
        Connection side additional information
        """
        return pulumi.get(self, "additional_info")

    @additional_info.setter
    def additional_info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_info", value)

    @property
    @pulumi.getter(name="serviceToken")
    def service_token(self) -> Optional[pulumi.Input['ConnectionZSideServiceTokenArgs']]:
        """
        For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
        """
        return pulumi.get(self, "service_token")

    @service_token.setter
    def service_token(self, value: Optional[pulumi.Input['ConnectionZSideServiceTokenArgs']]):
        pulumi.set(self, "service_token", value)


@pulumi.input_type
class ConnectionZSideAccessPointArgs:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['ConnectionZSideAccessPointAccountArgs']] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input['ConnectionZSideAccessPointGatewayArgs']] = None,
                 interface: Optional[pulumi.Input['ConnectionZSideAccessPointInterfaceArgs']] = None,
                 link_protocol: Optional[pulumi.Input['ConnectionZSideAccessPointLinkProtocolArgs']] = None,
                 location: Optional[pulumi.Input['ConnectionZSideAccessPointLocationArgs']] = None,
                 network: Optional[pulumi.Input['ConnectionZSideAccessPointNetworkArgs']] = None,
                 peering_type: Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]] = None,
                 port: Optional[pulumi.Input['ConnectionZSideAccessPointPortArgs']] = None,
                 profile: Optional[pulumi.Input['ConnectionZSideAccessPointProfileArgs']] = None,
                 provider_connection_id: Optional[pulumi.Input[str]] = None,
                 router: Optional[pulumi.Input['ConnectionZSideAccessPointRouterArgs']] = None,
                 routing_protocols: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointRoutingProtocolArgs']]]] = None,
                 seller_region: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'AccessPointType']]] = None,
                 virtual_device: Optional[pulumi.Input['ConnectionZSideAccessPointVirtualDeviceArgs']] = None):
        """
        :param pulumi.Input['ConnectionZSideAccessPointAccountArgs'] account: Account
        :param pulumi.Input[str] authentication_key: Authentication key for provider based connections
        :param pulumi.Input['ConnectionZSideAccessPointInterfaceArgs'] interface: Virtual device interface
        :param pulumi.Input['ConnectionZSideAccessPointLinkProtocolArgs'] link_protocol: Connection link protocol
        :param pulumi.Input['ConnectionZSideAccessPointLocationArgs'] location: Access point location
        :param pulumi.Input[Union[str, 'AccessPointPeeringType']] peering_type: Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        :param pulumi.Input['ConnectionZSideAccessPointPortArgs'] port: Port access point information
        :param pulumi.Input['ConnectionZSideAccessPointProfileArgs'] profile: Service Profile
        :param pulumi.Input[str] provider_connection_id: Provider assigned Connection Id
        :param pulumi.Input['ConnectionZSideAccessPointRouterArgs'] router: Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointRoutingProtocolArgs']]] routing_protocols: Access point routing protocols configuration
        :param pulumi.Input[str] seller_region: Access point seller region
        :param pulumi.Input[Union[str, 'AccessPointType']] type: Interface type
        :param pulumi.Input['ConnectionZSideAccessPointVirtualDeviceArgs'] virtual_device: Virtual device
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if gateway is not None:
            warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
            pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if link_protocol is not None:
            pulumi.set(__self__, "link_protocol", link_protocol)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if provider_connection_id is not None:
            pulumi.set(__self__, "provider_connection_id", provider_connection_id)
        if router is not None:
            pulumi.set(__self__, "router", router)
        if routing_protocols is not None:
            pulumi.set(__self__, "routing_protocols", routing_protocols)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_device is not None:
            pulumi.set(__self__, "virtual_device", virtual_device)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointAccountArgs']]:
        """
        Account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key for provider based connections
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointGatewayArgs']]:
        warnings.warn("""use router attribute instead; gateway is no longer a part of the supported backend""", DeprecationWarning)
        pulumi.log.warn("""gateway is deprecated: use router attribute instead; gateway is no longer a part of the supported backend""")

        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointGatewayArgs']]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointInterfaceArgs']]:
        """
        Virtual device interface
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointInterfaceArgs']]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="linkProtocol")
    def link_protocol(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointLinkProtocolArgs']]:
        """
        Connection link protocol
        """
        return pulumi.get(self, "link_protocol")

    @link_protocol.setter
    def link_protocol(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointLinkProtocolArgs']]):
        pulumi.set(self, "link_protocol", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointLocationArgs']]:
        """
        Access point location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]]:
        """
        Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
        """
        return pulumi.get(self, "peering_type")

    @peering_type.setter
    def peering_type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointPeeringType']]]):
        pulumi.set(self, "peering_type", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointPortArgs']]:
        """
        Port access point information
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointPortArgs']]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointProfileArgs']]:
        """
        Service Profile
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointProfileArgs']]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="providerConnectionId")
    def provider_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Provider assigned Connection Id
        """
        return pulumi.get(self, "provider_connection_id")

    @provider_connection_id.setter
    def provider_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_connection_id", value)

    @property
    @pulumi.getter
    def router(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointRouterArgs']]:
        """
        Cloud Router access point information that replaces `gateway` (refers to below for nested schema)
        """
        return pulumi.get(self, "router")

    @router.setter
    def router(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointRouterArgs']]):
        pulumi.set(self, "router", value)

    @property
    @pulumi.getter(name="routingProtocols")
    def routing_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointRoutingProtocolArgs']]]]:
        """
        Access point routing protocols configuration
        """
        return pulumi.get(self, "routing_protocols")

    @routing_protocols.setter
    def routing_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointRoutingProtocolArgs']]]]):
        pulumi.set(self, "routing_protocols", value)

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point seller region
        """
        return pulumi.get(self, "seller_region")

    @seller_region.setter
    def seller_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seller_region", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualDevice")
    def virtual_device(self) -> Optional[pulumi.Input['ConnectionZSideAccessPointVirtualDeviceArgs']]:
        """
        Virtual device
        """
        return pulumi.get(self, "virtual_device")

    @virtual_device.setter
    def virtual_device(self, value: Optional[pulumi.Input['ConnectionZSideAccessPointVirtualDeviceArgs']]):
        pulumi.set(self, "virtual_device", value)


@pulumi.input_type
class ConnectionZSideAccessPointAccountArgs:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_number: Optional[pulumi.Input[int]] = None,
                 global_cust_id: Optional[pulumi.Input[str]] = None,
                 global_org_id: Optional[pulumi.Input[str]] = None,
                 global_organization_name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None):
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_cust_id")

    @global_cust_id.setter
    def global_cust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cust_id", value)

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_org_id")

    @global_org_id.setter
    def global_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_org_id", value)

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_organization_name")

    @global_organization_name.setter
    def global_organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_organization_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)


@pulumi.input_type
class ConnectionZSideAccessPointGatewayArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointInterfaceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: id
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointLinkProtocolArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]] = None,
                 vlan_c_tag: Optional[pulumi.Input[int]] = None,
                 vlan_s_tag: Optional[pulumi.Input[int]] = None,
                 vlan_tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Union[str, 'AccessPointLinkProtocolType']] type: Interface type
        :param pulumi.Input[int] vlan_c_tag: Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        :param pulumi.Input[int] vlan_s_tag: Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        :param pulumi.Input[int] vlan_tag: Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_c_tag is not None:
            pulumi.set(__self__, "vlan_c_tag", vlan_c_tag)
        if vlan_s_tag is not None:
            pulumi.set(__self__, "vlan_s_tag", vlan_s_tag)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'AccessPointLinkProtocolType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vlanCTag")
    def vlan_c_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Customer Tag information, vlanCTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_c_tag")

    @vlan_c_tag.setter
    def vlan_c_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_c_tag", value)

    @property
    @pulumi.getter(name="vlanSTag")
    def vlan_s_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Provider Tag information, vlanSTag value specified for QINQ connections
        """
        return pulumi.get(self, "vlan_s_tag")

    @vlan_s_tag.setter
    def vlan_s_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_s_tag", value)

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan Tag information, vlanTag value specified for DOT1Q connections
        """
        return pulumi.get(self, "vlan_tag")

    @vlan_tag.setter
    def vlan_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_tag", value)


@pulumi.input_type
class ConnectionZSideAccessPointLocationArgs:
    def __init__(__self__, *,
                 ibx: Optional[pulumi.Input[str]] = None,
                 metro_code: Optional[pulumi.Input[Union[str, '_root_enums.Metro']]] = None,
                 metro_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ibx: IBX Code
        :param pulumi.Input[Union[str, '_root_enums.Metro']] metro_code: Access point metro code
        :param pulumi.Input[str] metro_name: Access point metro name
        :param pulumi.Input[str] region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[pulumi.Input[Union[str, '_root_enums.Metro']]]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: Optional[pulumi.Input[Union[str, '_root_enums.Metro']]]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @metro_name.setter
    def metro_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ConnectionZSideAccessPointNetworkArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointPortArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redundancies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointPortRedundancyArgs']]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] name: Port name
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointPortRedundancyArgs']]] redundancies: Redundancy Information
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redundancies is not None:
            pulumi.set(__self__, "redundancies", redundancies)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def redundancies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointPortRedundancyArgs']]]]:
        """
        Redundancy Information
        """
        return pulumi.get(self, "redundancies")

    @redundancies.setter
    def redundancies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointPortRedundancyArgs']]]]):
        pulumi.set(self, "redundancies", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointPortRedundancyArgs:
    def __init__(__self__, *,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] priority: Priority type- PRIMARY, SECONDARY
        """
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority type- PRIMARY, SECONDARY
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class ConnectionZSideAccessPointProfileArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ProfileType']],
                 uuid: pulumi.Input[str],
                 access_point_type_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Union[str, 'ProfileType']] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs']]] access_point_type_configs: Access point config information
        :param pulumi.Input[str] description: User-provided service description
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] name: Port name
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if access_point_type_configs is not None:
            pulumi.set(__self__, "access_point_type_configs", access_point_type_configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ProfileType']]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ProfileType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="accessPointTypeConfigs")
    def access_point_type_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs']]]]:
        """
        Access point config information
        """
        return pulumi.get(self, "access_point_type_configs")

    @access_point_type_configs.setter
    def access_point_type_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs']]]]):
        pulumi.set(self, "access_point_type_configs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Port name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ConnectionZSideAccessPointProfileAccessPointTypeConfigArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointRouterArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointRoutingProtocolArgs:
    def __init__(__self__, *,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] state: Routing protocol instance state
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Routing protocol instance state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAccessPointVirtualDeviceArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[str] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ConnectionZSideAdditionalInfoArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Additional information key
        :param pulumi.Input[str] value: Additional information value
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConnectionZSideServiceTokenArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ServiceTokenType']]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: User-provided service description
        :param pulumi.Input[str] href: Unique Resource Identifier
        :param pulumi.Input[Union[str, 'ServiceTokenType']] type: Interface type
        :param pulumi.Input[str] uuid: Equinix-assigned interface identifier
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-provided service description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource Identifier
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ServiceTokenType']]]:
        """
        Interface type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ServiceTokenType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix-assigned interface identifier
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class RoutingProtocolBfdArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Bidirectional Forwarding Detection enablement
        :param pulumi.Input[str] interval: Interval range between the received BFD control packets
        """
        pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class RoutingProtocolBgpIpv4Args:
    def __init__(__self__, *,
                 customer_peer_ip: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 equinix_peer_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] customer_peer_ip: Customer side peering ip
        :param pulumi.Input[bool] enabled: Admin status for the BGP session
        :param pulumi.Input[str] equinix_peer_ip: Equinix side peering ip
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if equinix_peer_ip is not None:
            pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> pulumi.Input[str]:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_peer_ip", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @equinix_peer_ip.setter
    def equinix_peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equinix_peer_ip", value)


@pulumi.input_type
class RoutingProtocolBgpIpv6Args:
    def __init__(__self__, *,
                 customer_peer_ip: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 equinix_peer_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] customer_peer_ip: Customer side peering ip
        :param pulumi.Input[bool] enabled: Admin status for the BGP session
        :param pulumi.Input[str] equinix_peer_ip: Equinix side peering ip
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if equinix_peer_ip is not None:
            pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> pulumi.Input[str]:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_peer_ip", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @equinix_peer_ip.setter
    def equinix_peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equinix_peer_ip", value)


@pulumi.input_type
class RoutingProtocolChangeArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class RoutingProtocolChangeLogArgs:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_email: Optional[pulumi.Input[str]] = None,
                 created_by_full_name: Optional[pulumi.Input[str]] = None,
                 created_date_time: Optional[pulumi.Input[str]] = None,
                 deleted_by: Optional[pulumi.Input[str]] = None,
                 deleted_by_email: Optional[pulumi.Input[str]] = None,
                 deleted_by_full_name: Optional[pulumi.Input[str]] = None,
                 deleted_date_time: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_email: Optional[pulumi.Input[str]] = None,
                 updated_by_full_name: Optional[pulumi.Input[str]] = None,
                 updated_date_time: Optional[pulumi.Input[str]] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_email")

    @created_by_email.setter
    def created_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_email", value)

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_full_name")

    @created_by_full_name.setter
    def created_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_full_name", value)

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_date_time")

    @created_date_time.setter
    def created_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date_time", value)

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by", value)

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_email")

    @deleted_by_email.setter
    def deleted_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_email", value)

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_full_name")

    @deleted_by_full_name.setter
    def deleted_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_full_name", value)

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_date_time")

    @deleted_date_time.setter
    def deleted_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_date_time", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_email")

    @updated_by_email.setter
    def updated_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_email", value)

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_full_name")

    @updated_by_full_name.setter
    def updated_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_full_name", value)

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_date_time")

    @updated_date_time.setter
    def updated_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_date_time", value)


@pulumi.input_type
class RoutingProtocolDirectIpv4Args:
    def __init__(__self__, *,
                 equinix_iface_ip: pulumi.Input[str]):
        """
        :param pulumi.Input[str] equinix_iface_ip: Equinix side Interface IP address
        """
        pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> pulumi.Input[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")

    @equinix_iface_ip.setter
    def equinix_iface_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "equinix_iface_ip", value)


@pulumi.input_type
class RoutingProtocolDirectIpv6Args:
    def __init__(__self__, *,
                 equinix_iface_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] equinix_iface_ip: Equinix side Interface IP address
        """
        if equinix_iface_ip is not None:
            pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")

    @equinix_iface_ip.setter
    def equinix_iface_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equinix_iface_ip", value)


@pulumi.input_type
class RoutingProtocolOperationArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorArgs']]]] = None):
        if errors is not None:
            pulumi.set(__self__, "errors", errors)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorArgs']]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorArgs']]]]):
        pulumi.set(self, "errors", value)


@pulumi.input_type
class RoutingProtocolOperationErrorArgs:
    def __init__(__self__, *,
                 additional_infos: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorAdditionalInfoArgs']]]] = None,
                 correlation_id: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[str]] = None,
                 error_code: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 help: Optional[pulumi.Input[str]] = None):
        if additional_infos is not None:
            pulumi.set(__self__, "additional_infos", additional_infos)
        if correlation_id is not None:
            pulumi.set(__self__, "correlation_id", correlation_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if help is not None:
            pulumi.set(__self__, "help", help)

    @property
    @pulumi.getter(name="additionalInfos")
    def additional_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorAdditionalInfoArgs']]]]:
        return pulumi.get(self, "additional_infos")

    @additional_infos.setter
    def additional_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingProtocolOperationErrorAdditionalInfoArgs']]]]):
        pulumi.set(self, "additional_infos", value)

    @property
    @pulumi.getter(name="correlationId")
    def correlation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "correlation_id")

    @correlation_id.setter
    def correlation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "correlation_id", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help", value)


@pulumi.input_type
class RoutingProtocolOperationErrorAdditionalInfoArgs:
    def __init__(__self__, *,
                 property: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        if property is not None:
            pulumi.set(__self__, "property", property)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ServiceProfileAccessPointTypeConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ProfileAccessPointType']],
                 allow_bandwidth_auto_approval: Optional[pulumi.Input[bool]] = None,
                 allow_bandwidth_upgrade: Optional[pulumi.Input[bool]] = None,
                 allow_custom_bandwidth: Optional[pulumi.Input[bool]] = None,
                 allow_remote_connections: Optional[pulumi.Input[bool]] = None,
                 api_config: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigApiConfigArgs']] = None,
                 authentication_key: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs']] = None,
                 bandwidth_alert_threshold: Optional[pulumi.Input[float]] = None,
                 connection_label: Optional[pulumi.Input[str]] = None,
                 connection_redundancy_required: Optional[pulumi.Input[bool]] = None,
                 enable_auto_generate_service_key: Optional[pulumi.Input[bool]] = None,
                 link_protocol_config: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs']] = None,
                 supported_bandwidths: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Union[str, 'ProfileAccessPointType']] type: Type of access point type config - VD, COLO
        :param pulumi.Input[bool] allow_bandwidth_auto_approval: Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        :param pulumi.Input[bool] allow_bandwidth_upgrade: Availability of a bandwidth upgrade. The default is false
        :param pulumi.Input[bool] allow_custom_bandwidth: Setting to enable or disable the ability of the buyer to customize the bandwidth
        :param pulumi.Input[bool] allow_remote_connections: Setting to allow or prohibit remote connections to the service profile
        :param pulumi.Input['ServiceProfileAccessPointTypeConfigApiConfigArgs'] api_config: Api configuration details
        :param pulumi.Input['ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs'] authentication_key: Authentication key details
        :param pulumi.Input[float] bandwidth_alert_threshold: Percentage of port bandwidth at which an allocation alert is generated
        :param pulumi.Input[str] connection_label: Custom name for Connection
        :param pulumi.Input[bool] connection_redundancy_required: Mandate redundant connections
        :param pulumi.Input[bool] enable_auto_generate_service_key: Enable auto generate service key
        :param pulumi.Input['ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs'] link_protocol_config: Link protocol configuration details
        :param pulumi.Input[Sequence[pulumi.Input[int]]] supported_bandwidths: Supported bandwidths
        :param pulumi.Input[str] uuid: Colo/Port Uuid
        """
        pulumi.set(__self__, "type", type)
        if allow_bandwidth_auto_approval is not None:
            pulumi.set(__self__, "allow_bandwidth_auto_approval", allow_bandwidth_auto_approval)
        if allow_bandwidth_upgrade is not None:
            pulumi.set(__self__, "allow_bandwidth_upgrade", allow_bandwidth_upgrade)
        if allow_custom_bandwidth is not None:
            pulumi.set(__self__, "allow_custom_bandwidth", allow_custom_bandwidth)
        if allow_remote_connections is not None:
            pulumi.set(__self__, "allow_remote_connections", allow_remote_connections)
        if api_config is not None:
            pulumi.set(__self__, "api_config", api_config)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bandwidth_alert_threshold is not None:
            pulumi.set(__self__, "bandwidth_alert_threshold", bandwidth_alert_threshold)
        if connection_label is not None:
            pulumi.set(__self__, "connection_label", connection_label)
        if connection_redundancy_required is not None:
            pulumi.set(__self__, "connection_redundancy_required", connection_redundancy_required)
        if enable_auto_generate_service_key is not None:
            pulumi.set(__self__, "enable_auto_generate_service_key", enable_auto_generate_service_key)
        if link_protocol_config is not None:
            pulumi.set(__self__, "link_protocol_config", link_protocol_config)
        if supported_bandwidths is not None:
            pulumi.set(__self__, "supported_bandwidths", supported_bandwidths)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ProfileAccessPointType']]:
        """
        Type of access point type config - VD, COLO
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ProfileAccessPointType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allowBandwidthAutoApproval")
    def allow_bandwidth_auto_approval(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
        """
        return pulumi.get(self, "allow_bandwidth_auto_approval")

    @allow_bandwidth_auto_approval.setter
    def allow_bandwidth_auto_approval(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_bandwidth_auto_approval", value)

    @property
    @pulumi.getter(name="allowBandwidthUpgrade")
    def allow_bandwidth_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        Availability of a bandwidth upgrade. The default is false
        """
        return pulumi.get(self, "allow_bandwidth_upgrade")

    @allow_bandwidth_upgrade.setter
    def allow_bandwidth_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_bandwidth_upgrade", value)

    @property
    @pulumi.getter(name="allowCustomBandwidth")
    def allow_custom_bandwidth(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to enable or disable the ability of the buyer to customize the bandwidth
        """
        return pulumi.get(self, "allow_custom_bandwidth")

    @allow_custom_bandwidth.setter
    def allow_custom_bandwidth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_custom_bandwidth", value)

    @property
    @pulumi.getter(name="allowRemoteConnections")
    def allow_remote_connections(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to allow or prohibit remote connections to the service profile
        """
        return pulumi.get(self, "allow_remote_connections")

    @allow_remote_connections.setter
    def allow_remote_connections(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_remote_connections", value)

    @property
    @pulumi.getter(name="apiConfig")
    def api_config(self) -> Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigApiConfigArgs']]:
        """
        Api configuration details
        """
        return pulumi.get(self, "api_config")

    @api_config.setter
    def api_config(self, value: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigApiConfigArgs']]):
        pulumi.set(self, "api_config", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs']]:
        """
        Authentication key details
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs']]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter(name="bandwidthAlertThreshold")
    def bandwidth_alert_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of port bandwidth at which an allocation alert is generated
        """
        return pulumi.get(self, "bandwidth_alert_threshold")

    @bandwidth_alert_threshold.setter
    def bandwidth_alert_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bandwidth_alert_threshold", value)

    @property
    @pulumi.getter(name="connectionLabel")
    def connection_label(self) -> Optional[pulumi.Input[str]]:
        """
        Custom name for Connection
        """
        return pulumi.get(self, "connection_label")

    @connection_label.setter
    def connection_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_label", value)

    @property
    @pulumi.getter(name="connectionRedundancyRequired")
    def connection_redundancy_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Mandate redundant connections
        """
        return pulumi.get(self, "connection_redundancy_required")

    @connection_redundancy_required.setter
    def connection_redundancy_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connection_redundancy_required", value)

    @property
    @pulumi.getter(name="enableAutoGenerateServiceKey")
    def enable_auto_generate_service_key(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable auto generate service key
        """
        return pulumi.get(self, "enable_auto_generate_service_key")

    @enable_auto_generate_service_key.setter
    def enable_auto_generate_service_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_generate_service_key", value)

    @property
    @pulumi.getter(name="linkProtocolConfig")
    def link_protocol_config(self) -> Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs']]:
        """
        Link protocol configuration details
        """
        return pulumi.get(self, "link_protocol_config")

    @link_protocol_config.setter
    def link_protocol_config(self, value: Optional[pulumi.Input['ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs']]):
        pulumi.set(self, "link_protocol_config", value)

    @property
    @pulumi.getter(name="supportedBandwidths")
    def supported_bandwidths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Supported bandwidths
        """
        return pulumi.get(self, "supported_bandwidths")

    @supported_bandwidths.setter
    def supported_bandwidths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "supported_bandwidths", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class ServiceProfileAccessPointTypeConfigApiConfigArgs:
    def __init__(__self__, *,
                 allow_over_subscription: Optional[pulumi.Input[bool]] = None,
                 api_available: Optional[pulumi.Input[bool]] = None,
                 bandwidth_from_api: Optional[pulumi.Input[bool]] = None,
                 equinix_managed_port: Optional[pulumi.Input[bool]] = None,
                 equinix_managed_vlan: Optional[pulumi.Input[bool]] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 over_subscription_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] allow_over_subscription: Setting showing that oversubscription support is available (true) or not (false). The default is false
        :param pulumi.Input[bool] api_available: Setting indicating whether the API is available (true) or not (false)
        :param pulumi.Input[bool] bandwidth_from_api: Bandwidth from api
        :param pulumi.Input[bool] equinix_managed_port: Setting indicating that the port is managed by Equinix (true) or not (false)
        :param pulumi.Input[bool] equinix_managed_vlan: Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        :param pulumi.Input[str] integration_id: Integration id
        :param pulumi.Input[int] over_subscription_limit: A cap on over subscription
        """
        if allow_over_subscription is not None:
            pulumi.set(__self__, "allow_over_subscription", allow_over_subscription)
        if api_available is not None:
            pulumi.set(__self__, "api_available", api_available)
        if bandwidth_from_api is not None:
            pulumi.set(__self__, "bandwidth_from_api", bandwidth_from_api)
        if equinix_managed_port is not None:
            pulumi.set(__self__, "equinix_managed_port", equinix_managed_port)
        if equinix_managed_vlan is not None:
            pulumi.set(__self__, "equinix_managed_vlan", equinix_managed_vlan)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if over_subscription_limit is not None:
            pulumi.set(__self__, "over_subscription_limit", over_subscription_limit)

    @property
    @pulumi.getter(name="allowOverSubscription")
    def allow_over_subscription(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting showing that oversubscription support is available (true) or not (false). The default is false
        """
        return pulumi.get(self, "allow_over_subscription")

    @allow_over_subscription.setter
    def allow_over_subscription(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_over_subscription", value)

    @property
    @pulumi.getter(name="apiAvailable")
    def api_available(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting indicating whether the API is available (true) or not (false)
        """
        return pulumi.get(self, "api_available")

    @api_available.setter
    def api_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_available", value)

    @property
    @pulumi.getter(name="bandwidthFromApi")
    def bandwidth_from_api(self) -> Optional[pulumi.Input[bool]]:
        """
        Bandwidth from api
        """
        return pulumi.get(self, "bandwidth_from_api")

    @bandwidth_from_api.setter
    def bandwidth_from_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bandwidth_from_api", value)

    @property
    @pulumi.getter(name="equinixManagedPort")
    def equinix_managed_port(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting indicating that the port is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_port")

    @equinix_managed_port.setter
    def equinix_managed_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "equinix_managed_port", value)

    @property
    @pulumi.getter(name="equinixManagedVlan")
    def equinix_managed_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting indicating that the VLAN is managed by Equinix (true) or not (false)
        """
        return pulumi.get(self, "equinix_managed_vlan")

    @equinix_managed_vlan.setter
    def equinix_managed_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "equinix_managed_vlan", value)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Integration id
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="overSubscriptionLimit")
    def over_subscription_limit(self) -> Optional[pulumi.Input[int]]:
        """
        A cap on over subscription
        """
        return pulumi.get(self, "over_subscription_limit")

    @over_subscription_limit.setter
    def over_subscription_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "over_subscription_limit", value)


@pulumi.input_type
class ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] label: Label
        :param pulumi.Input[bool] required: Required
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 encapsulation_strategy: Optional[pulumi.Input[str]] = None,
                 reuse_vlan_s_tag: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] encapsulation: Port Encapsulation
        :param pulumi.Input[str] encapsulation_strategy: Encapsulation strategy
        :param pulumi.Input[bool] reuse_vlan_s_tag: Reuse vlan sTag
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_strategy is not None:
            pulumi.set(__self__, "encapsulation_strategy", encapsulation_strategy)
        if reuse_vlan_s_tag is not None:
            pulumi.set(__self__, "reuse_vlan_s_tag", reuse_vlan_s_tag)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Port Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="encapsulationStrategy")
    def encapsulation_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Encapsulation strategy
        """
        return pulumi.get(self, "encapsulation_strategy")

    @encapsulation_strategy.setter
    def encapsulation_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_strategy", value)

    @property
    @pulumi.getter(name="reuseVlanSTag")
    def reuse_vlan_s_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Reuse vlan sTag
        """
        return pulumi.get(self, "reuse_vlan_s_tag")

    @reuse_vlan_s_tag.setter
    def reuse_vlan_s_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse_vlan_s_tag", value)


@pulumi.input_type
class ServiceProfileAccountArgs:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_number: Optional[pulumi.Input[int]] = None,
                 global_cust_id: Optional[pulumi.Input[str]] = None,
                 global_org_id: Optional[pulumi.Input[str]] = None,
                 global_organization_name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 organization_name: Optional[pulumi.Input[str]] = None,
                 ucm_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_name: Account Name
        :param pulumi.Input[int] account_number: Account Number
        :param pulumi.Input[str] global_cust_id: Global Customer organization identifier
        :param pulumi.Input[str] global_org_id: Global organization identifier
        :param pulumi.Input[str] global_organization_name: Global organization name
        :param pulumi.Input[int] org_id: Customer organization identifier
        :param pulumi.Input[str] organization_name: Customer organization name
        :param pulumi.Input[str] ucm_id: Enterprise datastore id
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if global_cust_id is not None:
            pulumi.set(__self__, "global_cust_id", global_cust_id)
        if global_org_id is not None:
            pulumi.set(__self__, "global_org_id", global_org_id)
        if global_organization_name is not None:
            pulumi.set(__self__, "global_organization_name", global_organization_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if ucm_id is not None:
            pulumi.set(__self__, "ucm_id", ucm_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Account Name
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[pulumi.Input[int]]:
        """
        Account Number
        """
        return pulumi.get(self, "account_number")

    @account_number.setter
    def account_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_number", value)

    @property
    @pulumi.getter(name="globalCustId")
    def global_cust_id(self) -> Optional[pulumi.Input[str]]:
        """
        Global Customer organization identifier
        """
        return pulumi.get(self, "global_cust_id")

    @global_cust_id.setter
    def global_cust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_cust_id", value)

    @property
    @pulumi.getter(name="globalOrgId")
    def global_org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Global organization identifier
        """
        return pulumi.get(self, "global_org_id")

    @global_org_id.setter
    def global_org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_org_id", value)

    @property
    @pulumi.getter(name="globalOrganizationName")
    def global_organization_name(self) -> Optional[pulumi.Input[str]]:
        """
        Global organization name
        """
        return pulumi.get(self, "global_organization_name")

    @global_organization_name.setter
    def global_organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_organization_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        """
        Customer organization identifier
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer organization name
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="ucmId")
    def ucm_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enterprise datastore id
        """
        return pulumi.get(self, "ucm_id")

    @ucm_id.setter
    def ucm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ucm_id", value)


@pulumi.input_type
class ServiceProfileChangeLogArgs:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_email: Optional[pulumi.Input[str]] = None,
                 created_by_full_name: Optional[pulumi.Input[str]] = None,
                 created_date_time: Optional[pulumi.Input[str]] = None,
                 deleted_by: Optional[pulumi.Input[str]] = None,
                 deleted_by_email: Optional[pulumi.Input[str]] = None,
                 deleted_by_full_name: Optional[pulumi.Input[str]] = None,
                 deleted_date_time: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_email: Optional[pulumi.Input[str]] = None,
                 updated_by_full_name: Optional[pulumi.Input[str]] = None,
                 updated_date_time: Optional[pulumi.Input[str]] = None):
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_email is not None:
            pulumi.set(__self__, "created_by_email", created_by_email)
        if created_by_full_name is not None:
            pulumi.set(__self__, "created_by_full_name", created_by_full_name)
        if created_date_time is not None:
            pulumi.set(__self__, "created_date_time", created_date_time)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if deleted_by_email is not None:
            pulumi.set(__self__, "deleted_by_email", deleted_by_email)
        if deleted_by_full_name is not None:
            pulumi.set(__self__, "deleted_by_full_name", deleted_by_full_name)
        if deleted_date_time is not None:
            pulumi.set(__self__, "deleted_date_time", deleted_date_time)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_email is not None:
            pulumi.set(__self__, "updated_by_email", updated_by_email)
        if updated_by_full_name is not None:
            pulumi.set(__self__, "updated_by_full_name", updated_by_full_name)
        if updated_date_time is not None:
            pulumi.set(__self__, "updated_date_time", updated_date_time)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByEmail")
    def created_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_email")

    @created_by_email.setter
    def created_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_email", value)

    @property
    @pulumi.getter(name="createdByFullName")
    def created_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by_full_name")

    @created_by_full_name.setter
    def created_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_full_name", value)

    @property
    @pulumi.getter(name="createdDateTime")
    def created_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_date_time")

    @created_date_time.setter
    def created_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date_time", value)

    @property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by", value)

    @property
    @pulumi.getter(name="deletedByEmail")
    def deleted_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_email")

    @deleted_by_email.setter
    def deleted_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_email", value)

    @property
    @pulumi.getter(name="deletedByFullName")
    def deleted_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_by_full_name")

    @deleted_by_full_name.setter
    def deleted_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_by_full_name", value)

    @property
    @pulumi.getter(name="deletedDateTime")
    def deleted_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deleted_date_time")

    @deleted_date_time.setter
    def deleted_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_date_time", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByEmail")
    def updated_by_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_email")

    @updated_by_email.setter
    def updated_by_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_email", value)

    @property
    @pulumi.getter(name="updatedByFullName")
    def updated_by_full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_by_full_name")

    @updated_by_full_name.setter
    def updated_by_full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_full_name", value)

    @property
    @pulumi.getter(name="updatedDateTime")
    def updated_date_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_date_time")

    @updated_date_time.setter
    def updated_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_date_time", value)


@pulumi.input_type
class ServiceProfileCustomFieldArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input[str],
                 label: pulumi.Input[str],
                 required: pulumi.Input[bool],
                 capture_in_email: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] data_type: Data type
        :param pulumi.Input[str] label: Label
        :param pulumi.Input[bool] required: Required field
        :param pulumi.Input[bool] capture_in_email: Required field
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] options: Options
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "required", required)
        if capture_in_email is not None:
            pulumi.set(__self__, "capture_in_email", capture_in_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        """
        Data type
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Label
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def required(self) -> pulumi.Input[bool]:
        """
        Required field
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="captureInEmail")
    def capture_in_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Required field
        """
        return pulumi.get(self, "capture_in_email")

    @capture_in_email.setter
    def capture_in_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "capture_in_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Options
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class ServiceProfileMarketingInfoArgs:
    def __init__(__self__, *,
                 logo: Optional[pulumi.Input[str]] = None,
                 process_steps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMarketingInfoProcessStepArgs']]]] = None,
                 promotion: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] logo: Logo
        :param pulumi.Input[Sequence[pulumi.Input['ServiceProfileMarketingInfoProcessStepArgs']]] process_steps: Process Step
        :param pulumi.Input[bool] promotion: Promotion
        """
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if process_steps is not None:
            pulumi.set(__self__, "process_steps", process_steps)
        if promotion is not None:
            pulumi.set(__self__, "promotion", promotion)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        Logo
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter(name="processSteps")
    def process_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMarketingInfoProcessStepArgs']]]]:
        """
        Process Step
        """
        return pulumi.get(self, "process_steps")

    @process_steps.setter
    def process_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceProfileMarketingInfoProcessStepArgs']]]]):
        pulumi.set(self, "process_steps", value)

    @property
    @pulumi.getter
    def promotion(self) -> Optional[pulumi.Input[bool]]:
        """
        Promotion
        """
        return pulumi.get(self, "promotion")

    @promotion.setter
    def promotion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "promotion", value)


@pulumi.input_type
class ServiceProfileMarketingInfoProcessStepArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 sub_title: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] sub_title: Sub Title
        :param pulumi.Input[str] title: Title
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sub_title is not None:
            pulumi.set(__self__, "sub_title", sub_title)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="subTitle")
    def sub_title(self) -> Optional[pulumi.Input[str]]:
        """
        Sub Title
        """
        return pulumi.get(self, "sub_title")

    @sub_title.setter
    def sub_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_title", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ServiceProfileMetroArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 ibxs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 in_trail: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 seller_regions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] code: Metro Code - Example SV
        :param pulumi.Input[str] display_name: Display Name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ibxs: IBX- Equinix International Business Exchange list
        :param pulumi.Input[bool] in_trail: In Trail
        :param pulumi.Input[str] name: Metro Name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] seller_regions: Seller Regions
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ibxs is not None:
            pulumi.set(__self__, "ibxs", ibxs)
        if in_trail is not None:
            pulumi.set(__self__, "in_trail", in_trail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if seller_regions is not None:
            pulumi.set(__self__, "seller_regions", seller_regions)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Metro Code - Example SV
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display Name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def ibxs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IBX- Equinix International Business Exchange list
        """
        return pulumi.get(self, "ibxs")

    @ibxs.setter
    def ibxs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ibxs", value)

    @property
    @pulumi.getter(name="inTrail")
    def in_trail(self) -> Optional[pulumi.Input[bool]]:
        """
        In Trail
        """
        return pulumi.get(self, "in_trail")

    @in_trail.setter
    def in_trail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "in_trail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Metro Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sellerRegions")
    def seller_regions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Seller Regions
        """
        return pulumi.get(self, "seller_regions")

    @seller_regions.setter
    def seller_regions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "seller_regions", value)


@pulumi.input_type
class ServiceProfileNotificationArgs:
    def __init__(__self__, *,
                 emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[Union[str, 'NotificationsType']],
                 send_interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: Array of contact emails
        :param pulumi.Input[Union[str, 'NotificationsType']] type: Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        :param pulumi.Input[str] send_interval: Send interval
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "type", type)
        if send_interval is not None:
            pulumi.set(__self__, "send_interval", send_interval)

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Array of contact emails
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'NotificationsType']]:
        """
        Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'NotificationsType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="sendInterval")
    def send_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Send interval
        """
        return pulumi.get(self, "send_interval")

    @send_interval.setter
    def send_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_interval", value)


@pulumi.input_type
class ServiceProfilePortArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 cross_connect_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input['ServiceProfilePortLocationArgs']] = None,
                 seller_region: Optional[pulumi.Input[str]] = None,
                 seller_region_description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Colo/Port Type
        :param pulumi.Input[str] uuid: Colo/Port Uuid
        :param pulumi.Input[str] cross_connect_id: Cross Connect Id
        :param pulumi.Input['ServiceProfilePortLocationArgs'] location: Colo/Port Location
        :param pulumi.Input[str] seller_region: Seller Region
        :param pulumi.Input[str] seller_region_description: Seller Region details
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if cross_connect_id is not None:
            pulumi.set(__self__, "cross_connect_id", cross_connect_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if seller_region is not None:
            pulumi.set(__self__, "seller_region", seller_region)
        if seller_region_description is not None:
            pulumi.set(__self__, "seller_region_description", seller_region_description)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Colo/Port Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        Colo/Port Uuid
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="crossConnectId")
    def cross_connect_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cross Connect Id
        """
        return pulumi.get(self, "cross_connect_id")

    @cross_connect_id.setter
    def cross_connect_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_connect_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['ServiceProfilePortLocationArgs']]:
        """
        Colo/Port Location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['ServiceProfilePortLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="sellerRegion")
    def seller_region(self) -> Optional[pulumi.Input[str]]:
        """
        Seller Region
        """
        return pulumi.get(self, "seller_region")

    @seller_region.setter
    def seller_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seller_region", value)

    @property
    @pulumi.getter(name="sellerRegionDescription")
    def seller_region_description(self) -> Optional[pulumi.Input[str]]:
        """
        Seller Region details
        """
        return pulumi.get(self, "seller_region_description")

    @seller_region_description.setter
    def seller_region_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seller_region_description", value)


@pulumi.input_type
class ServiceProfilePortLocationArgs:
    def __init__(__self__, *,
                 ibx: Optional[pulumi.Input[str]] = None,
                 metro_code: Optional[pulumi.Input[str]] = None,
                 metro_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ibx: IBX Code
        :param pulumi.Input[str] metro_code: Access point metro code
        :param pulumi.Input[str] metro_name: Access point metro name
        :param pulumi.Input[str] region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @metro_name.setter
    def metro_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ServiceProfileProjectArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] href: Unique Resource URL
        :param pulumi.Input[str] project_id: Project Id
        """
        if href is not None:
            pulumi.set(__self__, "href", href)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ServiceProfileVirtualDeviceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 interface_uuid: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input['ServiceProfileVirtualDeviceLocationArgs']] = None):
        """
        :param pulumi.Input[str] type: Virtual Device Type
        :param pulumi.Input[str] uuid: Virtual Device Uuid
        :param pulumi.Input[str] interface_uuid: Device Interface Uuid
        :param pulumi.Input['ServiceProfileVirtualDeviceLocationArgs'] location: Device Location
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uuid", uuid)
        if interface_uuid is not None:
            pulumi.set(__self__, "interface_uuid", interface_uuid)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Virtual Device Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        Virtual Device Uuid
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter(name="interfaceUuid")
    def interface_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Device Interface Uuid
        """
        return pulumi.get(self, "interface_uuid")

    @interface_uuid.setter
    def interface_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_uuid", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['ServiceProfileVirtualDeviceLocationArgs']]:
        """
        Device Location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['ServiceProfileVirtualDeviceLocationArgs']]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class ServiceProfileVirtualDeviceLocationArgs:
    def __init__(__self__, *,
                 ibx: Optional[pulumi.Input[str]] = None,
                 metro_code: Optional[pulumi.Input[str]] = None,
                 metro_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ibx: IBX Code
        :param pulumi.Input[str] metro_code: Access point metro code
        :param pulumi.Input[str] metro_name: Access point metro name
        :param pulumi.Input[str] region: Access point region
        """
        if ibx is not None:
            pulumi.set(__self__, "ibx", ibx)
        if metro_code is not None:
            pulumi.set(__self__, "metro_code", metro_code)
        if metro_name is not None:
            pulumi.set(__self__, "metro_name", metro_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def ibx(self) -> Optional[pulumi.Input[str]]:
        """
        IBX Code
        """
        return pulumi.get(self, "ibx")

    @ibx.setter
    def ibx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibx", value)

    @property
    @pulumi.getter(name="metroCode")
    def metro_code(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro code
        """
        return pulumi.get(self, "metro_code")

    @metro_code.setter
    def metro_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_code", value)

    @property
    @pulumi.getter(name="metroName")
    def metro_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access point metro name
        """
        return pulumi.get(self, "metro_name")

    @metro_name.setter
    def metro_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metro_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Access point region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class GetCloudRouterProjectArgs:
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: str):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class GetConnectionProjectArgs:
    def __init__(__self__, *,
                 href: str,
                 project_id: str):
        """
        :param str href: Unique Resource URL
        :param str project_id: Project Id
        """
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Unique Resource URL
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: str):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project Id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: str):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class GetPortsFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Query Parameter to Get Ports By Name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Query Parameter to Get Ports By Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetRoutingProtocolBfdArgs:
    def __init__(__self__, *,
                 enabled: bool,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Bidirectional Forwarding Detection enablement
        :param str interval: Interval range between the received BFD control packets
        """
        pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Bidirectional Forwarding Detection enablement
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Interval range between the received BFD control packets
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[str]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class GetRoutingProtocolBgpIpv4Args:
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param bool enabled: Admin status for the BGP session
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: str):
        pulumi.set(self, "customer_peer_ip", value)

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @equinix_peer_ip.setter
    def equinix_peer_ip(self, value: str):
        pulumi.set(self, "equinix_peer_ip", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetRoutingProtocolBgpIpv6Args:
    def __init__(__self__, *,
                 customer_peer_ip: str,
                 equinix_peer_ip: str,
                 enabled: Optional[bool] = None):
        """
        :param str customer_peer_ip: Customer side peering ip
        :param str equinix_peer_ip: Equinix side peering ip
        :param bool enabled: Admin status for the BGP session
        """
        pulumi.set(__self__, "customer_peer_ip", customer_peer_ip)
        pulumi.set(__self__, "equinix_peer_ip", equinix_peer_ip)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="customerPeerIp")
    def customer_peer_ip(self) -> str:
        """
        Customer side peering ip
        """
        return pulumi.get(self, "customer_peer_ip")

    @customer_peer_ip.setter
    def customer_peer_ip(self, value: str):
        pulumi.set(self, "customer_peer_ip", value)

    @property
    @pulumi.getter(name="equinixPeerIp")
    def equinix_peer_ip(self) -> str:
        """
        Equinix side peering ip
        """
        return pulumi.get(self, "equinix_peer_ip")

    @equinix_peer_ip.setter
    def equinix_peer_ip(self, value: str):
        pulumi.set(self, "equinix_peer_ip", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Admin status for the BGP session
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetRoutingProtocolDirectIpv4Args:
    def __init__(__self__, *,
                 equinix_iface_ip: str):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> str:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")

    @equinix_iface_ip.setter
    def equinix_iface_ip(self, value: str):
        pulumi.set(self, "equinix_iface_ip", value)


@pulumi.input_type
class GetRoutingProtocolDirectIpv6Args:
    def __init__(__self__, *,
                 equinix_iface_ip: Optional[str] = None):
        """
        :param str equinix_iface_ip: Equinix side Interface IP address
        """
        if equinix_iface_ip is not None:
            pulumi.set(__self__, "equinix_iface_ip", equinix_iface_ip)

    @property
    @pulumi.getter(name="equinixIfaceIp")
    def equinix_iface_ip(self) -> Optional[str]:
        """
        Equinix side Interface IP address
        """
        return pulumi.get(self, "equinix_iface_ip")

    @equinix_iface_ip.setter
    def equinix_iface_ip(self, value: Optional[str]):
        pulumi.set(self, "equinix_iface_ip", value)


@pulumi.input_type
class GetServiceProfilesFilterArgs:
    def __init__(__self__, *,
                 operator: Optional[str] = None,
                 property: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str operator: Possible operator to use on filters = - equal
        :param str property: Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
        :param Sequence[str] values: Values
        """
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Possible operator to use on filters = - equal
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Values
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class GetServiceProfilesSortArgs:
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str direction: Priority type- DESC, ASC
        :param str property: Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Priority type- DESC, ASC
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[str]):
        pulumi.set(self, "property", value)


