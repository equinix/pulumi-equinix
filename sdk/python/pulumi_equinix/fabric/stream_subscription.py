# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamSubscriptionArgs', 'StreamSubscription']

@pulumi.input_type
class StreamSubscriptionArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 sink: pulumi.Input['StreamSubscriptionSinkArgs'],
                 stream_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 event_selector: Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']] = None,
                 metric_selector: Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a StreamSubscription resource.
        :param pulumi.Input[str] description: Customer-provided stream subscription description
        :param pulumi.Input[bool] enabled: Stream subscription enabled status
        :param pulumi.Input['StreamSubscriptionSinkArgs'] sink: The details of the subscriber to the Equinix Stream
        :param pulumi.Input[str] stream_id: The uuid of the stream that is the target of the stream subscription
        :param pulumi.Input[str] type: Type of the stream subscription request
        :param pulumi.Input['StreamSubscriptionEventSelectorArgs'] event_selector: Lists of events to be included/excluded on the stream subscription
        :param pulumi.Input['StreamSubscriptionMetricSelectorArgs'] metric_selector: Lists of metrics to be included/excluded on the stream subscription
        :param pulumi.Input[str] name: Customer-provided stream subscription name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sink", sink)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "type", type)
        if event_selector is not None:
            pulumi.set(__self__, "event_selector", event_selector)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Customer-provided stream subscription description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def sink(self) -> pulumi.Input['StreamSubscriptionSinkArgs']:
        """
        The details of the subscriber to the Equinix Stream
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: pulumi.Input['StreamSubscriptionSinkArgs']):
        pulumi.set(self, "sink", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Input[str]:
        """
        The uuid of the stream that is the target of the stream subscription
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="eventSelector")
    def event_selector(self) -> Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']]:
        """
        Lists of events to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "event_selector")

    @event_selector.setter
    def event_selector(self, value: Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']]):
        pulumi.set(self, "event_selector", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']]:
        """
        Lists of metrics to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream subscription name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _StreamSubscriptionState:
    def __init__(__self__, *,
                 change_log: Optional[pulumi.Input['StreamSubscriptionChangeLogArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_selector: Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sink: Optional[pulumi.Input['StreamSubscriptionSinkArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamSubscription resources.
        :param pulumi.Input['StreamSubscriptionChangeLogArgs'] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided stream subscription description
        :param pulumi.Input[bool] enabled: Stream subscription enabled status
        :param pulumi.Input['StreamSubscriptionEventSelectorArgs'] event_selector: Lists of events to be included/excluded on the stream subscription
        :param pulumi.Input[str] href: Equinix assigned URI of the stream subscription resource
        :param pulumi.Input['StreamSubscriptionMetricSelectorArgs'] metric_selector: Lists of metrics to be included/excluded on the stream subscription
        :param pulumi.Input[str] name: Customer-provided stream subscription name
        :param pulumi.Input['StreamSubscriptionSinkArgs'] sink: The details of the subscriber to the Equinix Stream
        :param pulumi.Input[str] state: Value representing provisioning status for the stream resource
        :param pulumi.Input[str] stream_id: The uuid of the stream that is the target of the stream subscription
        :param pulumi.Input[str] type: Type of the stream subscription request
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier of the stream subscription resource
        """
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event_selector is not None:
            pulumi.set(__self__, "event_selector", event_selector)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sink is not None:
            pulumi.set(__self__, "sink", sink)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input['StreamSubscriptionChangeLogArgs']]:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input['StreamSubscriptionChangeLogArgs']]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream subscription description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventSelector")
    def event_selector(self) -> Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']]:
        """
        Lists of events to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "event_selector")

    @event_selector.setter
    def event_selector(self, value: Optional[pulumi.Input['StreamSubscriptionEventSelectorArgs']]):
        pulumi.set(self, "event_selector", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned URI of the stream subscription resource
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']]:
        """
        Lists of metrics to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input['StreamSubscriptionMetricSelectorArgs']]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Customer-provided stream subscription name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sink(self) -> Optional[pulumi.Input['StreamSubscriptionSinkArgs']]:
        """
        The details of the subscriber to the Equinix Stream
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: Optional[pulumi.Input['StreamSubscriptionSinkArgs']]):
        pulumi.set(self, "sink", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        The uuid of the stream that is the target of the stream subscription
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StreamSubscriptionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix assigned unique identifier of the stream subscription resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class StreamSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_selector: Optional[pulumi.Input[Union['StreamSubscriptionEventSelectorArgs', 'StreamSubscriptionEventSelectorArgsDict']]] = None,
                 metric_selector: Optional[pulumi.Input[Union['StreamSubscriptionMetricSelectorArgs', 'StreamSubscriptionMetricSelectorArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sink: Optional[pulumi.Input[Union['StreamSubscriptionSinkArgs', 'StreamSubscriptionSinkArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamSubscriptionTimeoutsArgs', 'StreamSubscriptionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Subscriptions

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Customer-provided stream subscription description
        :param pulumi.Input[bool] enabled: Stream subscription enabled status
        :param pulumi.Input[Union['StreamSubscriptionEventSelectorArgs', 'StreamSubscriptionEventSelectorArgsDict']] event_selector: Lists of events to be included/excluded on the stream subscription
        :param pulumi.Input[Union['StreamSubscriptionMetricSelectorArgs', 'StreamSubscriptionMetricSelectorArgsDict']] metric_selector: Lists of metrics to be included/excluded on the stream subscription
        :param pulumi.Input[str] name: Customer-provided stream subscription name
        :param pulumi.Input[Union['StreamSubscriptionSinkArgs', 'StreamSubscriptionSinkArgsDict']] sink: The details of the subscriber to the Equinix Stream
        :param pulumi.Input[str] stream_id: The uuid of the stream that is the target of the stream subscription
        :param pulumi.Input[str] type: Type of the stream subscription request
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Subscriptions

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
        * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Subscriptions

        :param str resource_name: The name of the resource.
        :param StreamSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_selector: Optional[pulumi.Input[Union['StreamSubscriptionEventSelectorArgs', 'StreamSubscriptionEventSelectorArgsDict']]] = None,
                 metric_selector: Optional[pulumi.Input[Union['StreamSubscriptionMetricSelectorArgs', 'StreamSubscriptionMetricSelectorArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sink: Optional[pulumi.Input[Union['StreamSubscriptionSinkArgs', 'StreamSubscriptionSinkArgsDict']]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['StreamSubscriptionTimeoutsArgs', 'StreamSubscriptionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamSubscriptionArgs.__new__(StreamSubscriptionArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["event_selector"] = event_selector
            __props__.__dict__["metric_selector"] = metric_selector
            __props__.__dict__["name"] = name
            if sink is None and not opts.urn:
                raise TypeError("Missing required property 'sink'")
            __props__.__dict__["sink"] = sink
            if stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'stream_id'")
            __props__.__dict__["stream_id"] = stream_id
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["change_log"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(StreamSubscription, __self__).__init__(
            'equinix:fabric/streamSubscription:StreamSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_log: Optional[pulumi.Input[Union['StreamSubscriptionChangeLogArgs', 'StreamSubscriptionChangeLogArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            event_selector: Optional[pulumi.Input[Union['StreamSubscriptionEventSelectorArgs', 'StreamSubscriptionEventSelectorArgsDict']]] = None,
            href: Optional[pulumi.Input[str]] = None,
            metric_selector: Optional[pulumi.Input[Union['StreamSubscriptionMetricSelectorArgs', 'StreamSubscriptionMetricSelectorArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sink: Optional[pulumi.Input[Union['StreamSubscriptionSinkArgs', 'StreamSubscriptionSinkArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            stream_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['StreamSubscriptionTimeoutsArgs', 'StreamSubscriptionTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'StreamSubscription':
        """
        Get an existing StreamSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['StreamSubscriptionChangeLogArgs', 'StreamSubscriptionChangeLogArgsDict']] change_log: Details of the last change on the stream resource
        :param pulumi.Input[str] description: Customer-provided stream subscription description
        :param pulumi.Input[bool] enabled: Stream subscription enabled status
        :param pulumi.Input[Union['StreamSubscriptionEventSelectorArgs', 'StreamSubscriptionEventSelectorArgsDict']] event_selector: Lists of events to be included/excluded on the stream subscription
        :param pulumi.Input[str] href: Equinix assigned URI of the stream subscription resource
        :param pulumi.Input[Union['StreamSubscriptionMetricSelectorArgs', 'StreamSubscriptionMetricSelectorArgsDict']] metric_selector: Lists of metrics to be included/excluded on the stream subscription
        :param pulumi.Input[str] name: Customer-provided stream subscription name
        :param pulumi.Input[Union['StreamSubscriptionSinkArgs', 'StreamSubscriptionSinkArgsDict']] sink: The details of the subscriber to the Equinix Stream
        :param pulumi.Input[str] state: Value representing provisioning status for the stream resource
        :param pulumi.Input[str] stream_id: The uuid of the stream that is the target of the stream subscription
        :param pulumi.Input[str] type: Type of the stream subscription request
        :param pulumi.Input[str] uuid: Equinix assigned unique identifier of the stream subscription resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamSubscriptionState.__new__(_StreamSubscriptionState)

        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["event_selector"] = event_selector
        __props__.__dict__["href"] = href
        __props__.__dict__["metric_selector"] = metric_selector
        __props__.__dict__["name"] = name
        __props__.__dict__["sink"] = sink
        __props__.__dict__["state"] = state
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return StreamSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output['outputs.StreamSubscriptionChangeLog']:
        """
        Details of the last change on the stream resource
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Customer-provided stream subscription description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Stream subscription enabled status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventSelector")
    def event_selector(self) -> pulumi.Output['outputs.StreamSubscriptionEventSelector']:
        """
        Lists of events to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "event_selector")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Equinix assigned URI of the stream subscription resource
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Output['outputs.StreamSubscriptionMetricSelector']:
        """
        Lists of metrics to be included/excluded on the stream subscription
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Customer-provided stream subscription name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sink(self) -> pulumi.Output['outputs.StreamSubscriptionSink']:
        """
        The details of the subscriber to the Equinix Stream
        """
        return pulumi.get(self, "sink")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Value representing provisioning status for the stream resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[str]:
        """
        The uuid of the stream that is the target of the stream subscription
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StreamSubscriptionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the stream subscription request
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix assigned unique identifier of the stream subscription resource
        """
        return pulumi.get(self, "uuid")

