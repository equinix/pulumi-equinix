# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteFilterArgs', 'RouteFilter']

@pulumi.input_type
class RouteFilterArgs:
    def __init__(__self__, *,
                 project: pulumi.Input['RouteFilterProjectArgs'],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouteFilter resource.
        :param pulumi.Input['RouteFilterProjectArgs'] project: The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] name: Name of the Route Filter
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input['RouteFilterProjectArgs']:
        """
        The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input['RouteFilterProjectArgs']):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RouteFilterState:
    def __init__(__self__, *,
                 change_logs: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeLogArgs']]]] = None,
                 changes: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeArgs']]]] = None,
                 connections_count: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 not_matched_rule_action: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input['RouteFilterProjectArgs']] = None,
                 rules_count: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteFilter resources.
        :param pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeArgs']]] changes: An object with the details of the previous change applied on the Route Filter
        :param pulumi.Input[int] connections_count: The number of Fabric Connections that this Route Filter is attached to
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] href: Route filter URI
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] not_matched_rule_action: The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        :param pulumi.Input['RouteFilterProjectArgs'] project: The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        :param pulumi.Input[int] rules_count: The number of Route Filter Rules attached to this Route Filter
        :param pulumi.Input[str] state: State of the Route Filter in its lifecycle
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter
        """
        if change_logs is not None:
            pulumi.set(__self__, "change_logs", change_logs)
        if changes is not None:
            pulumi.set(__self__, "changes", changes)
        if connections_count is not None:
            pulumi.set(__self__, "connections_count", connections_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if not_matched_rule_action is not None:
            pulumi.set(__self__, "not_matched_rule_action", not_matched_rule_action)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if rules_count is not None:
            pulumi.set(__self__, "rules_count", rules_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeLogArgs']]]]:
        return pulumi.get(self, "change_logs")

    @change_logs.setter
    def change_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeLogArgs']]]]):
        pulumi.set(self, "change_logs", value)

    @property
    @pulumi.getter
    def changes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeArgs']]]]:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @changes.setter
    def changes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteFilterChangeArgs']]]]):
        pulumi.set(self, "changes", value)

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of Fabric Connections that this Route Filter is attached to
        """
        return pulumi.get(self, "connections_count")

    @connections_count.setter
    def connections_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connections_count", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        """
        Route filter URI
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notMatchedRuleAction")
    def not_matched_rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        """
        return pulumi.get(self, "not_matched_rule_action")

    @not_matched_rule_action.setter
    def not_matched_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_matched_rule_action", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input['RouteFilterProjectArgs']]:
        """
        The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input['RouteFilterProjectArgs']]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="rulesCount")
    def rules_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of Route Filter Rules attached to this Route Filter
        """
        return pulumi.get(self, "rules_count")

    @rules_count.setter
    def rules_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rules_count", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the Route Filter in its lifecycle
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Equinix Assigned ID for Route Filter
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class RouteFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[Union['RouteFilterProjectArgs', 'RouteFilterProjectArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Policy

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[Union['RouteFilterProjectArgs', 'RouteFilterProjectArgsDict']] project: The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Filter Policy

        Additional Documentation:
        * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
        * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters

        :param str resource_name: The name of the resource.
        :param RouteFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[Union['RouteFilterProjectArgs', 'RouteFilterProjectArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteFilterArgs.__new__(RouteFilterArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["change_logs"] = None
            __props__.__dict__["changes"] = None
            __props__.__dict__["connections_count"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["not_matched_rule_action"] = None
            __props__.__dict__["rules_count"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uuid"] = None
        super(RouteFilter, __self__).__init__(
            'equinix:fabric/routeFilter:RouteFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            change_logs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterChangeLogArgs', 'RouteFilterChangeLogArgsDict']]]]] = None,
            changes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterChangeArgs', 'RouteFilterChangeArgsDict']]]]] = None,
            connections_count: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            href: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            not_matched_rule_action: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[Union['RouteFilterProjectArgs', 'RouteFilterProjectArgsDict']]] = None,
            rules_count: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'RouteFilter':
        """
        Get an existing RouteFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RouteFilterChangeArgs', 'RouteFilterChangeArgsDict']]]] changes: An object with the details of the previous change applied on the Route Filter
        :param pulumi.Input[int] connections_count: The number of Fabric Connections that this Route Filter is attached to
        :param pulumi.Input[str] description: Optional description to add to the Route Filter you will be creating
        :param pulumi.Input[str] href: Route filter URI
        :param pulumi.Input[str] name: Name of the Route Filter
        :param pulumi.Input[str] not_matched_rule_action: The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        :param pulumi.Input[Union['RouteFilterProjectArgs', 'RouteFilterProjectArgsDict']] project: The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        :param pulumi.Input[int] rules_count: The number of Route Filter Rules attached to this Route Filter
        :param pulumi.Input[str] state: State of the Route Filter in its lifecycle
        :param pulumi.Input[str] type: Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        :param pulumi.Input[str] uuid: Equinix Assigned ID for Route Filter
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteFilterState.__new__(_RouteFilterState)

        __props__.__dict__["change_logs"] = change_logs
        __props__.__dict__["changes"] = changes
        __props__.__dict__["connections_count"] = connections_count
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["not_matched_rule_action"] = not_matched_rule_action
        __props__.__dict__["project"] = project
        __props__.__dict__["rules_count"] = rules_count
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["uuid"] = uuid
        return RouteFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> pulumi.Output[Sequence['outputs.RouteFilterChangeLog']]:
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> pulumi.Output[Sequence['outputs.RouteFilterChange']]:
        """
        An object with the details of the previous change applied on the Route Filter
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="connectionsCount")
    def connections_count(self) -> pulumi.Output[int]:
        """
        The number of Fabric Connections that this Route Filter is attached to
        """
        return pulumi.get(self, "connections_count")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Optional description to add to the Route Filter you will be creating
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> pulumi.Output[str]:
        """
        Route filter URI
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Route Filter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notMatchedRuleAction")
    def not_matched_rule_action(self) -> pulumi.Output[str]:
        """
        The action that will be taken on ip ranges that don't match the rules present within the Route Filter
        """
        return pulumi.get(self, "not_matched_rule_action")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['outputs.RouteFilterProject']:
        """
        The Project object that contains project_id and href that is related to the Fabric Project containing connections the Route Filter can be attached to
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="rulesCount")
    def rules_count(self) -> pulumi.Output[int]:
        """
        The number of Route Filter Rules attached to this Route Filter
        """
        return pulumi.get(self, "rules_count")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the Route Filter in its lifecycle
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Equinix Assigned ID for Route Filter
        """
        return pulumi.get(self, "uuid")

