# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRoutingProtocolResult',
    'AwaitableGetRoutingProtocolResult',
    'get_routing_protocol',
    'get_routing_protocol_output',
]

@pulumi.output_type
class GetRoutingProtocolResult:
    """
    A collection of values returned by getRoutingProtocol.
    """
    def __init__(__self__, bfd=None, bgp_auth_key=None, bgp_ipv4=None, bgp_ipv6=None, change_logs=None, changes=None, connection_uuid=None, customer_asn=None, description=None, direct_ipv4=None, direct_ipv6=None, equinix_asn=None, href=None, id=None, name=None, operations=None, state=None, type=None, uuid=None):
        if bfd and not isinstance(bfd, dict):
            raise TypeError("Expected argument 'bfd' to be a dict")
        pulumi.set(__self__, "bfd", bfd)
        if bgp_auth_key and not isinstance(bgp_auth_key, str):
            raise TypeError("Expected argument 'bgp_auth_key' to be a str")
        pulumi.set(__self__, "bgp_auth_key", bgp_auth_key)
        if bgp_ipv4 and not isinstance(bgp_ipv4, dict):
            raise TypeError("Expected argument 'bgp_ipv4' to be a dict")
        pulumi.set(__self__, "bgp_ipv4", bgp_ipv4)
        if bgp_ipv6 and not isinstance(bgp_ipv6, dict):
            raise TypeError("Expected argument 'bgp_ipv6' to be a dict")
        pulumi.set(__self__, "bgp_ipv6", bgp_ipv6)
        if change_logs and not isinstance(change_logs, list):
            raise TypeError("Expected argument 'change_logs' to be a list")
        pulumi.set(__self__, "change_logs", change_logs)
        if changes and not isinstance(changes, list):
            raise TypeError("Expected argument 'changes' to be a list")
        pulumi.set(__self__, "changes", changes)
        if connection_uuid and not isinstance(connection_uuid, str):
            raise TypeError("Expected argument 'connection_uuid' to be a str")
        pulumi.set(__self__, "connection_uuid", connection_uuid)
        if customer_asn and not isinstance(customer_asn, int):
            raise TypeError("Expected argument 'customer_asn' to be a int")
        pulumi.set(__self__, "customer_asn", customer_asn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if direct_ipv4 and not isinstance(direct_ipv4, dict):
            raise TypeError("Expected argument 'direct_ipv4' to be a dict")
        pulumi.set(__self__, "direct_ipv4", direct_ipv4)
        if direct_ipv6 and not isinstance(direct_ipv6, dict):
            raise TypeError("Expected argument 'direct_ipv6' to be a dict")
        pulumi.set(__self__, "direct_ipv6", direct_ipv6)
        if equinix_asn and not isinstance(equinix_asn, int):
            raise TypeError("Expected argument 'equinix_asn' to be a int")
        pulumi.set(__self__, "equinix_asn", equinix_asn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def bfd(self) -> Optional['outputs.GetRoutingProtocolBfdResult']:
        """
        Bidirectional Forwarding Detection
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="bgpAuthKey")
    def bgp_auth_key(self) -> Optional[str]:
        """
        BGP authorization key
        """
        return pulumi.get(self, "bgp_auth_key")

    @property
    @pulumi.getter(name="bgpIpv4")
    def bgp_ipv4(self) -> Optional['outputs.GetRoutingProtocolBgpIpv4Result']:
        """
        Routing Protocol BGP IPv4
        """
        return pulumi.get(self, "bgp_ipv4")

    @property
    @pulumi.getter(name="bgpIpv6")
    def bgp_ipv6(self) -> Optional['outputs.GetRoutingProtocolBgpIpv6Result']:
        """
        Routing Protocol BGP IPv6
        """
        return pulumi.get(self, "bgp_ipv6")

    @property
    @pulumi.getter(name="changeLogs")
    def change_logs(self) -> Sequence['outputs.GetRoutingProtocolChangeLogResult']:
        """
        Captures Routing Protocol lifecycle change information
        """
        return pulumi.get(self, "change_logs")

    @property
    @pulumi.getter
    def changes(self) -> Sequence['outputs.GetRoutingProtocolChangeResult']:
        """
        Routing Protocol configuration Changes
        """
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="connectionUuid")
    def connection_uuid(self) -> str:
        """
        Connection URI associated with Routing Protocol
        """
        return pulumi.get(self, "connection_uuid")

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[int]:
        """
        Customer-provided ASN
        """
        return pulumi.get(self, "customer_asn")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Customer-provided Fabric Routing Protocol description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directIpv4")
    def direct_ipv4(self) -> Optional['outputs.GetRoutingProtocolDirectIpv4Result']:
        """
        Routing Protocol Direct IPv4
        """
        return pulumi.get(self, "direct_ipv4")

    @property
    @pulumi.getter(name="directIpv6")
    def direct_ipv6(self) -> Optional['outputs.GetRoutingProtocolDirectIpv6Result']:
        """
        Routing Protocol Direct IPv6
        """
        return pulumi.get(self, "direct_ipv6")

    @property
    @pulumi.getter(name="equinixAsn")
    def equinix_asn(self) -> int:
        """
        Equinix ASN
        """
        return pulumi.get(self, "equinix_asn")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        Routing Protocol URI information
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetRoutingProtocolOperationResult']:
        """
        Routing Protocol type-specific operational data
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Routing Protocol overall state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Defines the routing protocol type like BGP or DIRECT
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix-assigned routing protocol identifier
        """
        return pulumi.get(self, "uuid")


class AwaitableGetRoutingProtocolResult(GetRoutingProtocolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoutingProtocolResult(
            bfd=self.bfd,
            bgp_auth_key=self.bgp_auth_key,
            bgp_ipv4=self.bgp_ipv4,
            bgp_ipv6=self.bgp_ipv6,
            change_logs=self.change_logs,
            changes=self.changes,
            connection_uuid=self.connection_uuid,
            customer_asn=self.customer_asn,
            description=self.description,
            direct_ipv4=self.direct_ipv4,
            direct_ipv6=self.direct_ipv6,
            equinix_asn=self.equinix_asn,
            href=self.href,
            id=self.id,
            name=self.name,
            operations=self.operations,
            state=self.state,
            type=self.type,
            uuid=self.uuid)


def get_routing_protocol(bfd: Optional[pulumi.InputType['GetRoutingProtocolBfdArgs']] = None,
                         bgp_auth_key: Optional[str] = None,
                         bgp_ipv4: Optional[pulumi.InputType['GetRoutingProtocolBgpIpv4Args']] = None,
                         bgp_ipv6: Optional[pulumi.InputType['GetRoutingProtocolBgpIpv6Args']] = None,
                         connection_uuid: Optional[str] = None,
                         customer_asn: Optional[int] = None,
                         description: Optional[str] = None,
                         direct_ipv4: Optional[pulumi.InputType['GetRoutingProtocolDirectIpv4Args']] = None,
                         direct_ipv6: Optional[pulumi.InputType['GetRoutingProtocolDirectIpv6Args']] = None,
                         name: Optional[str] = None,
                         type: Optional[str] = None,
                         uuid: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoutingProtocolResult:
    """
    Use this data source to access information about an existing resource.

    :param pulumi.InputType['GetRoutingProtocolBfdArgs'] bfd: Bidirectional Forwarding Detection
    :param str bgp_auth_key: BGP authorization key
    :param pulumi.InputType['GetRoutingProtocolBgpIpv4Args'] bgp_ipv4: Routing Protocol BGP IPv4
    :param pulumi.InputType['GetRoutingProtocolBgpIpv6Args'] bgp_ipv6: Routing Protocol BGP IPv6
    :param str connection_uuid: Connection URI associated with Routing Protocol
    :param int customer_asn: Customer-provided ASN
    :param str description: Customer-provided Fabric Routing Protocol description
    :param pulumi.InputType['GetRoutingProtocolDirectIpv4Args'] direct_ipv4: Routing Protocol Direct IPv4
    :param pulumi.InputType['GetRoutingProtocolDirectIpv6Args'] direct_ipv6: Routing Protocol Direct IPv6
    :param str name: Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
    """
    __args__ = dict()
    __args__['bfd'] = bfd
    __args__['bgpAuthKey'] = bgp_auth_key
    __args__['bgpIpv4'] = bgp_ipv4
    __args__['bgpIpv6'] = bgp_ipv6
    __args__['connectionUuid'] = connection_uuid
    __args__['customerAsn'] = customer_asn
    __args__['description'] = description
    __args__['directIpv4'] = direct_ipv4
    __args__['directIpv6'] = direct_ipv6
    __args__['name'] = name
    __args__['type'] = type
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getRoutingProtocol:getRoutingProtocol', __args__, opts=opts, typ=GetRoutingProtocolResult).value

    return AwaitableGetRoutingProtocolResult(
        bfd=pulumi.get(__ret__, 'bfd'),
        bgp_auth_key=pulumi.get(__ret__, 'bgp_auth_key'),
        bgp_ipv4=pulumi.get(__ret__, 'bgp_ipv4'),
        bgp_ipv6=pulumi.get(__ret__, 'bgp_ipv6'),
        change_logs=pulumi.get(__ret__, 'change_logs'),
        changes=pulumi.get(__ret__, 'changes'),
        connection_uuid=pulumi.get(__ret__, 'connection_uuid'),
        customer_asn=pulumi.get(__ret__, 'customer_asn'),
        description=pulumi.get(__ret__, 'description'),
        direct_ipv4=pulumi.get(__ret__, 'direct_ipv4'),
        direct_ipv6=pulumi.get(__ret__, 'direct_ipv6'),
        equinix_asn=pulumi.get(__ret__, 'equinix_asn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operations=pulumi.get(__ret__, 'operations'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_routing_protocol)
def get_routing_protocol_output(bfd: Optional[pulumi.Input[Optional[pulumi.InputType['GetRoutingProtocolBfdArgs']]]] = None,
                                bgp_auth_key: Optional[pulumi.Input[Optional[str]]] = None,
                                bgp_ipv4: Optional[pulumi.Input[Optional[pulumi.InputType['GetRoutingProtocolBgpIpv4Args']]]] = None,
                                bgp_ipv6: Optional[pulumi.Input[Optional[pulumi.InputType['GetRoutingProtocolBgpIpv6Args']]]] = None,
                                connection_uuid: Optional[pulumi.Input[str]] = None,
                                customer_asn: Optional[pulumi.Input[Optional[int]]] = None,
                                description: Optional[pulumi.Input[Optional[str]]] = None,
                                direct_ipv4: Optional[pulumi.Input[Optional[pulumi.InputType['GetRoutingProtocolDirectIpv4Args']]]] = None,
                                direct_ipv6: Optional[pulumi.Input[Optional[pulumi.InputType['GetRoutingProtocolDirectIpv6Args']]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                uuid: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoutingProtocolResult]:
    """
    Use this data source to access information about an existing resource.

    :param pulumi.InputType['GetRoutingProtocolBfdArgs'] bfd: Bidirectional Forwarding Detection
    :param str bgp_auth_key: BGP authorization key
    :param pulumi.InputType['GetRoutingProtocolBgpIpv4Args'] bgp_ipv4: Routing Protocol BGP IPv4
    :param pulumi.InputType['GetRoutingProtocolBgpIpv6Args'] bgp_ipv6: Routing Protocol BGP IPv6
    :param str connection_uuid: Connection URI associated with Routing Protocol
    :param int customer_asn: Customer-provided ASN
    :param str description: Customer-provided Fabric Routing Protocol description
    :param pulumi.InputType['GetRoutingProtocolDirectIpv4Args'] direct_ipv4: Routing Protocol Direct IPv4
    :param pulumi.InputType['GetRoutingProtocolDirectIpv6Args'] direct_ipv6: Routing Protocol Direct IPv6
    :param str name: Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores
    """
    ...
