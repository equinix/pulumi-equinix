# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetConnectionRouteAggregationResult',
    'AwaitableGetConnectionRouteAggregationResult',
    'get_connection_route_aggregation',
    'get_connection_route_aggregation_output',
]

@pulumi.output_type
class GetConnectionRouteAggregationResult:
    """
    A collection of values returned by getConnectionRouteAggregation.
    """
    def __init__(__self__, attachment_status=None, connection_id=None, href=None, id=None, route_aggregation_id=None, type=None, uuid=None):
        if attachment_status and not isinstance(attachment_status, str):
            raise TypeError("Expected argument 'attachment_status' to be a str")
        pulumi.set(__self__, "attachment_status", attachment_status)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if route_aggregation_id and not isinstance(route_aggregation_id, str):
            raise TypeError("Expected argument 'route_aggregation_id' to be a str")
        pulumi.set(__self__, "route_aggregation_id", route_aggregation_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="attachmentStatus")
    def attachment_status(self) -> str:
        """
        Status of the Route Aggregation Policy attachment lifecycle
        """
        return pulumi.get(self, "attachment_status")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The uuid of the connection this data source should retrieve
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        URI to the attached Route Aggregation Policy on the Connection
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeAggregationId")
    def route_aggregation_id(self) -> str:
        """
        The uuid of the route aggregation this data source should retrieve
        """
        return pulumi.get(self, "route_aggregation_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Equinix Assigned ID for Route Aggregation Policy
        """
        return pulumi.get(self, "uuid")


class AwaitableGetConnectionRouteAggregationResult(GetConnectionRouteAggregationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionRouteAggregationResult(
            attachment_status=self.attachment_status,
            connection_id=self.connection_id,
            href=self.href,
            id=self.id,
            route_aggregation_id=self.route_aggregation_id,
            type=self.type,
            uuid=self.uuid)


def get_connection_route_aggregation(connection_id: Optional[str] = None,
                                     route_aggregation_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionRouteAggregationResult:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policy = equinix.fabric.get_connection_route_aggregation(route_aggregation_id="<route_aggregation_id>",
        connection_id="<connection_id>")
    pulumi.export("connectionRouteAggregationId", attached_policy.id)
    pulumi.export("connectionRouteAggregationConnectionId", attached_policy.connection_id)
    pulumi.export("connectionRouteAggregationType", attached_policy.type)
    pulumi.export("connectionRouteAggregationAttachmentStatus", attached_policy.attachment_status)
    ```


    :param str connection_id: The uuid of the connection this data source should retrieve
    :param str route_aggregation_id: The uuid of the route aggregation this data source should retrieve
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['routeAggregationId'] = route_aggregation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation', __args__, opts=opts, typ=GetConnectionRouteAggregationResult).value

    return AwaitableGetConnectionRouteAggregationResult(
        attachment_status=pulumi.get(__ret__, 'attachment_status'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        route_aggregation_id=pulumi.get(__ret__, 'route_aggregation_id'),
        type=pulumi.get(__ret__, 'type'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_connection_route_aggregation_output(connection_id: Optional[pulumi.Input[str]] = None,
                                            route_aggregation_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConnectionRouteAggregationResult]:
    """
    Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
    Additional Documentation:
    * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations

    ## Example Usage

    ```python
    import pulumi
    import pulumi_equinix as equinix

    attached_policy = equinix.fabric.get_connection_route_aggregation(route_aggregation_id="<route_aggregation_id>",
        connection_id="<connection_id>")
    pulumi.export("connectionRouteAggregationId", attached_policy.id)
    pulumi.export("connectionRouteAggregationConnectionId", attached_policy.connection_id)
    pulumi.export("connectionRouteAggregationType", attached_policy.type)
    pulumi.export("connectionRouteAggregationAttachmentStatus", attached_policy.attachment_status)
    ```


    :param str connection_id: The uuid of the connection this data source should retrieve
    :param str route_aggregation_id: The uuid of the route aggregation this data source should retrieve
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['routeAggregationId'] = route_aggregation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation', __args__, opts=opts, typ=GetConnectionRouteAggregationResult)
    return __ret__.apply(lambda __response__: GetConnectionRouteAggregationResult(
        attachment_status=pulumi.get(__response__, 'attachment_status'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        route_aggregation_id=pulumi.get(__response__, 'route_aggregation_id'),
        type=pulumi.get(__response__, 'type'),
        uuid=pulumi.get(__response__, 'uuid')))
