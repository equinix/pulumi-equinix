// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclTemplateArgs, AclTemplateState } from "./aclTemplate";
export type AclTemplate = import("./aclTemplate").AclTemplate;
export const AclTemplate: typeof import("./aclTemplate").AclTemplate = null as any;
utilities.lazyLoad(exports, ["AclTemplate"], () => require("./aclTemplate"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceLinkArgs, DeviceLinkState } from "./deviceLink";
export type DeviceLink = import("./deviceLink").DeviceLink;
export const DeviceLink: typeof import("./deviceLink").DeviceLink = null as any;
utilities.lazyLoad(exports, ["DeviceLink"], () => require("./deviceLink"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDevicePlatformArgs, GetDevicePlatformResult, GetDevicePlatformOutputArgs } from "./getDevicePlatform";
export const getDevicePlatform: typeof import("./getDevicePlatform").getDevicePlatform = null as any;
export const getDevicePlatformOutput: typeof import("./getDevicePlatform").getDevicePlatformOutput = null as any;
utilities.lazyLoad(exports, ["getDevicePlatform","getDevicePlatformOutput"], () => require("./getDevicePlatform"));

export { GetDeviceSoftwareArgs, GetDeviceSoftwareResult, GetDeviceSoftwareOutputArgs } from "./getDeviceSoftware";
export const getDeviceSoftware: typeof import("./getDeviceSoftware").getDeviceSoftware = null as any;
export const getDeviceSoftwareOutput: typeof import("./getDeviceSoftware").getDeviceSoftwareOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceSoftware","getDeviceSoftwareOutput"], () => require("./getDeviceSoftware"));

export { GetDeviceTypeArgs, GetDeviceTypeResult, GetDeviceTypeOutputArgs } from "./getDeviceType";
export const getDeviceType: typeof import("./getDeviceType").getDeviceType = null as any;
export const getDeviceTypeOutput: typeof import("./getDeviceType").getDeviceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceType","getDeviceTypeOutput"], () => require("./getDeviceType"));

export { NetworkFileArgs, NetworkFileState } from "./networkFile";
export type NetworkFile = import("./networkFile").NetworkFile;
export const NetworkFile: typeof import("./networkFile").NetworkFile = null as any;
utilities.lazyLoad(exports, ["NetworkFile"], () => require("./networkFile"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { SshUserArgs, SshUserState } from "./sshUser";
export type SshUser = import("./sshUser").SshUser;
export const SshUser: typeof import("./sshUser").SshUser = null as any;
utilities.lazyLoad(exports, ["SshUser"], () => require("./sshUser"));


// Export enums:
export * from "../types/enums/networkedge";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:networkedge/aclTemplate:AclTemplate":
                return new AclTemplate(name, <any>undefined, { urn })
            case "equinix:networkedge/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "equinix:networkedge/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "equinix:networkedge/deviceLink:DeviceLink":
                return new DeviceLink(name, <any>undefined, { urn })
            case "equinix:networkedge/networkFile:NetworkFile":
                return new NetworkFile(name, <any>undefined, { urn })
            case "equinix:networkedge/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "equinix:networkedge/sshUser:SshUser":
                return new SshUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "networkedge/aclTemplate", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/bgp", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/device", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/deviceLink", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/networkFile", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/sshKey", _module)
pulumi.runtime.registerResourceModule("equinix", "networkedge/sshUser", _module)
