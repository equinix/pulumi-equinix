// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CloudRouterArgs, CloudRouterState } from "./cloudRouter";
export type CloudRouter = import("./cloudRouter").CloudRouter;
export const CloudRouter: typeof import("./cloudRouter").CloudRouter = null as any;
utilities.lazyLoad(exports, ["CloudRouter"], () => require("./cloudRouter"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { GetCloudRouterArgs, GetCloudRouterResult, GetCloudRouterOutputArgs } from "./getCloudRouter";
export const getCloudRouter: typeof import("./getCloudRouter").getCloudRouter = null as any;
export const getCloudRouterOutput: typeof import("./getCloudRouter").getCloudRouterOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouter","getCloudRouterOutput"], () => require("./getCloudRouter"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetPortsArgs, GetPortsResult, GetPortsOutputArgs } from "./getPorts";
export const getPorts: typeof import("./getPorts").getPorts = null as any;
export const getPortsOutput: typeof import("./getPorts").getPortsOutput = null as any;
utilities.lazyLoad(exports, ["getPorts","getPortsOutput"], () => require("./getPorts"));

export { GetRoutingProtocolArgs, GetRoutingProtocolResult, GetRoutingProtocolOutputArgs } from "./getRoutingProtocol";
export const getRoutingProtocol: typeof import("./getRoutingProtocol").getRoutingProtocol = null as any;
export const getRoutingProtocolOutput: typeof import("./getRoutingProtocol").getRoutingProtocolOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingProtocol","getRoutingProtocolOutput"], () => require("./getRoutingProtocol"));

export { GetServiceProfileArgs, GetServiceProfileResult, GetServiceProfileOutputArgs } from "./getServiceProfile";
export const getServiceProfile: typeof import("./getServiceProfile").getServiceProfile = null as any;
export const getServiceProfileOutput: typeof import("./getServiceProfile").getServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfile","getServiceProfileOutput"], () => require("./getServiceProfile"));

export { GetServiceProfilesArgs, GetServiceProfilesResult, GetServiceProfilesOutputArgs } from "./getServiceProfiles";
export const getServiceProfiles: typeof import("./getServiceProfiles").getServiceProfiles = null as any;
export const getServiceProfilesOutput: typeof import("./getServiceProfiles").getServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfiles","getServiceProfilesOutput"], () => require("./getServiceProfiles"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { RoutingProtocolArgs, RoutingProtocolState } from "./routingProtocol";
export type RoutingProtocol = import("./routingProtocol").RoutingProtocol;
export const RoutingProtocol: typeof import("./routingProtocol").RoutingProtocol = null as any;
utilities.lazyLoad(exports, ["RoutingProtocol"], () => require("./routingProtocol"));

export { ServiceProfileArgs, ServiceProfileState } from "./serviceProfile";
export type ServiceProfile = import("./serviceProfile").ServiceProfile;
export const ServiceProfile: typeof import("./serviceProfile").ServiceProfile = null as any;
utilities.lazyLoad(exports, ["ServiceProfile"], () => require("./serviceProfile"));


// Export enums:
export * from "../types/enums/fabric";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:fabric/cloudRouter:CloudRouter":
                return new CloudRouter(name, <any>undefined, { urn })
            case "equinix:fabric/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "equinix:fabric/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "equinix:fabric/routingProtocol:RoutingProtocol":
                return new RoutingProtocol(name, <any>undefined, { urn })
            case "equinix:fabric/serviceProfile:ServiceProfile":
                return new ServiceProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "fabric/cloudRouter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connection", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/network", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routingProtocol", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/serviceProfile", _module)
