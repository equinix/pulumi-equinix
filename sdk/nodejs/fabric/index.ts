// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CloudRouterArgs, CloudRouterState } from "./cloudRouter";
export type CloudRouter = import("./cloudRouter").CloudRouter;
export const CloudRouter: typeof import("./cloudRouter").CloudRouter = null as any;
utilities.lazyLoad(exports, ["CloudRouter"], () => require("./cloudRouter"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionRouteAggregationArgs, ConnectionRouteAggregationState } from "./connectionRouteAggregation";
export type ConnectionRouteAggregation = import("./connectionRouteAggregation").ConnectionRouteAggregation;
export const ConnectionRouteAggregation: typeof import("./connectionRouteAggregation").ConnectionRouteAggregation = null as any;
utilities.lazyLoad(exports, ["ConnectionRouteAggregation"], () => require("./connectionRouteAggregation"));

export { ConnectionRouteFilterArgs, ConnectionRouteFilterState } from "./connectionRouteFilter";
export type ConnectionRouteFilter = import("./connectionRouteFilter").ConnectionRouteFilter;
export const ConnectionRouteFilter: typeof import("./connectionRouteFilter").ConnectionRouteFilter = null as any;
utilities.lazyLoad(exports, ["ConnectionRouteFilter"], () => require("./connectionRouteFilter"));

export { GetCloudRouterArgs, GetCloudRouterResult, GetCloudRouterOutputArgs } from "./getCloudRouter";
export const getCloudRouter: typeof import("./getCloudRouter").getCloudRouter = null as any;
export const getCloudRouterOutput: typeof import("./getCloudRouter").getCloudRouterOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouter","getCloudRouterOutput"], () => require("./getCloudRouter"));

export { GetCloudRoutersArgs, GetCloudRoutersResult, GetCloudRoutersOutputArgs } from "./getCloudRouters";
export const getCloudRouters: typeof import("./getCloudRouters").getCloudRouters = null as any;
export const getCloudRoutersOutput: typeof import("./getCloudRouters").getCloudRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouters","getCloudRoutersOutput"], () => require("./getCloudRouters"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectionRouteAggregationArgs, GetConnectionRouteAggregationResult, GetConnectionRouteAggregationOutputArgs } from "./getConnectionRouteAggregation";
export const getConnectionRouteAggregation: typeof import("./getConnectionRouteAggregation").getConnectionRouteAggregation = null as any;
export const getConnectionRouteAggregationOutput: typeof import("./getConnectionRouteAggregation").getConnectionRouteAggregationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteAggregation","getConnectionRouteAggregationOutput"], () => require("./getConnectionRouteAggregation"));

export { GetConnectionRouteAggregationsArgs, GetConnectionRouteAggregationsResult, GetConnectionRouteAggregationsOutputArgs } from "./getConnectionRouteAggregations";
export const getConnectionRouteAggregations: typeof import("./getConnectionRouteAggregations").getConnectionRouteAggregations = null as any;
export const getConnectionRouteAggregationsOutput: typeof import("./getConnectionRouteAggregations").getConnectionRouteAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteAggregations","getConnectionRouteAggregationsOutput"], () => require("./getConnectionRouteAggregations"));

export { GetConnectionRouteFilterArgs, GetConnectionRouteFilterResult, GetConnectionRouteFilterOutputArgs } from "./getConnectionRouteFilter";
export const getConnectionRouteFilter: typeof import("./getConnectionRouteFilter").getConnectionRouteFilter = null as any;
export const getConnectionRouteFilterOutput: typeof import("./getConnectionRouteFilter").getConnectionRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteFilter","getConnectionRouteFilterOutput"], () => require("./getConnectionRouteFilter"));

export { GetConnectionRouteFiltersArgs, GetConnectionRouteFiltersResult, GetConnectionRouteFiltersOutputArgs } from "./getConnectionRouteFilters";
export const getConnectionRouteFilters: typeof import("./getConnectionRouteFilters").getConnectionRouteFilters = null as any;
export const getConnectionRouteFiltersOutput: typeof import("./getConnectionRouteFilters").getConnectionRouteFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteFilters","getConnectionRouteFiltersOutput"], () => require("./getConnectionRouteFilters"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetMarketplaceSubscriptionArgs, GetMarketplaceSubscriptionResult, GetMarketplaceSubscriptionOutputArgs } from "./getMarketplaceSubscription";
export const getMarketplaceSubscription: typeof import("./getMarketplaceSubscription").getMarketplaceSubscription = null as any;
export const getMarketplaceSubscriptionOutput: typeof import("./getMarketplaceSubscription").getMarketplaceSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceSubscription","getMarketplaceSubscriptionOutput"], () => require("./getMarketplaceSubscription"));

export { GetMetroArgs, GetMetroResult, GetMetroOutputArgs } from "./getMetro";
export const getMetro: typeof import("./getMetro").getMetro = null as any;
export const getMetroOutput: typeof import("./getMetro").getMetroOutput = null as any;
utilities.lazyLoad(exports, ["getMetro","getMetroOutput"], () => require("./getMetro"));

export { GetMetrosArgs, GetMetrosResult, GetMetrosOutputArgs } from "./getMetros";
export const getMetros: typeof import("./getMetros").getMetros = null as any;
export const getMetrosOutput: typeof import("./getMetros").getMetrosOutput = null as any;
utilities.lazyLoad(exports, ["getMetros","getMetrosOutput"], () => require("./getMetros"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworksArgs, GetNetworksResult, GetNetworksOutputArgs } from "./getNetworks";
export const getNetworks: typeof import("./getNetworks").getNetworks = null as any;
export const getNetworksOutput: typeof import("./getNetworks").getNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworks","getNetworksOutput"], () => require("./getNetworks"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetPortsArgs, GetPortsResult, GetPortsOutputArgs } from "./getPorts";
export const getPorts: typeof import("./getPorts").getPorts = null as any;
export const getPortsOutput: typeof import("./getPorts").getPortsOutput = null as any;
utilities.lazyLoad(exports, ["getPorts","getPortsOutput"], () => require("./getPorts"));

export { GetPrecisionTimeServiceArgs, GetPrecisionTimeServiceResult, GetPrecisionTimeServiceOutputArgs } from "./getPrecisionTimeService";
export const getPrecisionTimeService: typeof import("./getPrecisionTimeService").getPrecisionTimeService = null as any;
export const getPrecisionTimeServiceOutput: typeof import("./getPrecisionTimeService").getPrecisionTimeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrecisionTimeService","getPrecisionTimeServiceOutput"], () => require("./getPrecisionTimeService"));

export { GetPrecisionTimeServicesArgs, GetPrecisionTimeServicesResult, GetPrecisionTimeServicesOutputArgs } from "./getPrecisionTimeServices";
export const getPrecisionTimeServices: typeof import("./getPrecisionTimeServices").getPrecisionTimeServices = null as any;
export const getPrecisionTimeServicesOutput: typeof import("./getPrecisionTimeServices").getPrecisionTimeServicesOutput = null as any;
utilities.lazyLoad(exports, ["getPrecisionTimeServices","getPrecisionTimeServicesOutput"], () => require("./getPrecisionTimeServices"));

export { GetRouteAggregationArgs, GetRouteAggregationResult, GetRouteAggregationOutputArgs } from "./getRouteAggregation";
export const getRouteAggregation: typeof import("./getRouteAggregation").getRouteAggregation = null as any;
export const getRouteAggregationOutput: typeof import("./getRouteAggregation").getRouteAggregationOutput = null as any;
utilities.lazyLoad(exports, ["getRouteAggregation","getRouteAggregationOutput"], () => require("./getRouteAggregation"));

export { GetRouteAggregationRuleArgs, GetRouteAggregationRuleResult, GetRouteAggregationRuleOutputArgs } from "./getRouteAggregationRule";
export const getRouteAggregationRule: typeof import("./getRouteAggregationRule").getRouteAggregationRule = null as any;
export const getRouteAggregationRuleOutput: typeof import("./getRouteAggregationRule").getRouteAggregationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouteAggregationRule","getRouteAggregationRuleOutput"], () => require("./getRouteAggregationRule"));

export { GetRouteAggregationRulesArgs, GetRouteAggregationRulesResult, GetRouteAggregationRulesOutputArgs } from "./getRouteAggregationRules";
export const getRouteAggregationRules: typeof import("./getRouteAggregationRules").getRouteAggregationRules = null as any;
export const getRouteAggregationRulesOutput: typeof import("./getRouteAggregationRules").getRouteAggregationRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteAggregationRules","getRouteAggregationRulesOutput"], () => require("./getRouteAggregationRules"));

export { GetRouteAggregationsArgs, GetRouteAggregationsResult, GetRouteAggregationsOutputArgs } from "./getRouteAggregations";
export const getRouteAggregations: typeof import("./getRouteAggregations").getRouteAggregations = null as any;
export const getRouteAggregationsOutput: typeof import("./getRouteAggregations").getRouteAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getRouteAggregations","getRouteAggregationsOutput"], () => require("./getRouteAggregations"));

export { GetRouteFilterArgs, GetRouteFilterResult, GetRouteFilterOutputArgs } from "./getRouteFilter";
export const getRouteFilter: typeof import("./getRouteFilter").getRouteFilter = null as any;
export const getRouteFilterOutput: typeof import("./getRouteFilter").getRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilter","getRouteFilterOutput"], () => require("./getRouteFilter"));

export { GetRouteFilterRuleArgs, GetRouteFilterRuleResult, GetRouteFilterRuleOutputArgs } from "./getRouteFilterRule";
export const getRouteFilterRule: typeof import("./getRouteFilterRule").getRouteFilterRule = null as any;
export const getRouteFilterRuleOutput: typeof import("./getRouteFilterRule").getRouteFilterRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilterRule","getRouteFilterRuleOutput"], () => require("./getRouteFilterRule"));

export { GetRouteFilterRulesArgs, GetRouteFilterRulesResult, GetRouteFilterRulesOutputArgs } from "./getRouteFilterRules";
export const getRouteFilterRules: typeof import("./getRouteFilterRules").getRouteFilterRules = null as any;
export const getRouteFilterRulesOutput: typeof import("./getRouteFilterRules").getRouteFilterRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilterRules","getRouteFilterRulesOutput"], () => require("./getRouteFilterRules"));

export { GetRouteFiltersArgs, GetRouteFiltersResult, GetRouteFiltersOutputArgs } from "./getRouteFilters";
export const getRouteFilters: typeof import("./getRouteFilters").getRouteFilters = null as any;
export const getRouteFiltersOutput: typeof import("./getRouteFilters").getRouteFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilters","getRouteFiltersOutput"], () => require("./getRouteFilters"));

export { GetRoutingProtocolArgs, GetRoutingProtocolResult, GetRoutingProtocolOutputArgs } from "./getRoutingProtocol";
export const getRoutingProtocol: typeof import("./getRoutingProtocol").getRoutingProtocol = null as any;
export const getRoutingProtocolOutput: typeof import("./getRoutingProtocol").getRoutingProtocolOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingProtocol","getRoutingProtocolOutput"], () => require("./getRoutingProtocol"));

export { GetServiceProfileArgs, GetServiceProfileResult, GetServiceProfileOutputArgs } from "./getServiceProfile";
export const getServiceProfile: typeof import("./getServiceProfile").getServiceProfile = null as any;
export const getServiceProfileOutput: typeof import("./getServiceProfile").getServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfile","getServiceProfileOutput"], () => require("./getServiceProfile"));

export { GetServiceProfilesArgs, GetServiceProfilesResult, GetServiceProfilesOutputArgs } from "./getServiceProfiles";
export const getServiceProfiles: typeof import("./getServiceProfiles").getServiceProfiles = null as any;
export const getServiceProfilesOutput: typeof import("./getServiceProfiles").getServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfiles","getServiceProfilesOutput"], () => require("./getServiceProfiles"));

export { GetServiceTokenArgs, GetServiceTokenResult, GetServiceTokenOutputArgs } from "./getServiceToken";
export const getServiceToken: typeof import("./getServiceToken").getServiceToken = null as any;
export const getServiceTokenOutput: typeof import("./getServiceToken").getServiceTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceToken","getServiceTokenOutput"], () => require("./getServiceToken"));

export { GetServiceTokensArgs, GetServiceTokensResult, GetServiceTokensOutputArgs } from "./getServiceTokens";
export const getServiceTokens: typeof import("./getServiceTokens").getServiceTokens = null as any;
export const getServiceTokensOutput: typeof import("./getServiceTokens").getServiceTokensOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTokens","getServiceTokensOutput"], () => require("./getServiceTokens"));

export { GetStreamArgs, GetStreamResult, GetStreamOutputArgs } from "./getStream";
export const getStream: typeof import("./getStream").getStream = null as any;
export const getStreamOutput: typeof import("./getStream").getStreamOutput = null as any;
utilities.lazyLoad(exports, ["getStream","getStreamOutput"], () => require("./getStream"));

export { GetStreamAlertRuleArgs, GetStreamAlertRuleResult, GetStreamAlertRuleOutputArgs } from "./getStreamAlertRule";
export const getStreamAlertRule: typeof import("./getStreamAlertRule").getStreamAlertRule = null as any;
export const getStreamAlertRuleOutput: typeof import("./getStreamAlertRule").getStreamAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getStreamAlertRule","getStreamAlertRuleOutput"], () => require("./getStreamAlertRule"));

export { GetStreamAlertRulesArgs, GetStreamAlertRulesResult, GetStreamAlertRulesOutputArgs } from "./getStreamAlertRules";
export const getStreamAlertRules: typeof import("./getStreamAlertRules").getStreamAlertRules = null as any;
export const getStreamAlertRulesOutput: typeof import("./getStreamAlertRules").getStreamAlertRulesOutput = null as any;
utilities.lazyLoad(exports, ["getStreamAlertRules","getStreamAlertRulesOutput"], () => require("./getStreamAlertRules"));

export { GetStreamAttachmentArgs, GetStreamAttachmentResult, GetStreamAttachmentOutputArgs } from "./getStreamAttachment";
export const getStreamAttachment: typeof import("./getStreamAttachment").getStreamAttachment = null as any;
export const getStreamAttachmentOutput: typeof import("./getStreamAttachment").getStreamAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getStreamAttachment","getStreamAttachmentOutput"], () => require("./getStreamAttachment"));

export { GetStreamAttachmentsArgs, GetStreamAttachmentsResult, GetStreamAttachmentsOutputArgs } from "./getStreamAttachments";
export const getStreamAttachments: typeof import("./getStreamAttachments").getStreamAttachments = null as any;
export const getStreamAttachmentsOutput: typeof import("./getStreamAttachments").getStreamAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamAttachments","getStreamAttachmentsOutput"], () => require("./getStreamAttachments"));

export { GetStreamSubscriptionArgs, GetStreamSubscriptionResult, GetStreamSubscriptionOutputArgs } from "./getStreamSubscription";
export const getStreamSubscription: typeof import("./getStreamSubscription").getStreamSubscription = null as any;
export const getStreamSubscriptionOutput: typeof import("./getStreamSubscription").getStreamSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getStreamSubscription","getStreamSubscriptionOutput"], () => require("./getStreamSubscription"));

export { GetStreamSubscriptionsArgs, GetStreamSubscriptionsResult, GetStreamSubscriptionsOutputArgs } from "./getStreamSubscriptions";
export const getStreamSubscriptions: typeof import("./getStreamSubscriptions").getStreamSubscriptions = null as any;
export const getStreamSubscriptionsOutput: typeof import("./getStreamSubscriptions").getStreamSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamSubscriptions","getStreamSubscriptionsOutput"], () => require("./getStreamSubscriptions"));

export { GetStreamsArgs, GetStreamsResult, GetStreamsOutputArgs } from "./getStreams";
export const getStreams: typeof import("./getStreams").getStreams = null as any;
export const getStreamsOutput: typeof import("./getStreams").getStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getStreams","getStreamsOutput"], () => require("./getStreams"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { PrecisionTimeServiceArgs, PrecisionTimeServiceState } from "./precisionTimeService";
export type PrecisionTimeService = import("./precisionTimeService").PrecisionTimeService;
export const PrecisionTimeService: typeof import("./precisionTimeService").PrecisionTimeService = null as any;
utilities.lazyLoad(exports, ["PrecisionTimeService"], () => require("./precisionTimeService"));

export { RouteAggregationArgs, RouteAggregationState } from "./routeAggregation";
export type RouteAggregation = import("./routeAggregation").RouteAggregation;
export const RouteAggregation: typeof import("./routeAggregation").RouteAggregation = null as any;
utilities.lazyLoad(exports, ["RouteAggregation"], () => require("./routeAggregation"));

export { RouteAggregationRuleArgs, RouteAggregationRuleState } from "./routeAggregationRule";
export type RouteAggregationRule = import("./routeAggregationRule").RouteAggregationRule;
export const RouteAggregationRule: typeof import("./routeAggregationRule").RouteAggregationRule = null as any;
utilities.lazyLoad(exports, ["RouteAggregationRule"], () => require("./routeAggregationRule"));

export { RouteFilterArgs, RouteFilterState } from "./routeFilter";
export type RouteFilter = import("./routeFilter").RouteFilter;
export const RouteFilter: typeof import("./routeFilter").RouteFilter = null as any;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));

export { RouteFilterRuleArgs, RouteFilterRuleState } from "./routeFilterRule";
export type RouteFilterRule = import("./routeFilterRule").RouteFilterRule;
export const RouteFilterRule: typeof import("./routeFilterRule").RouteFilterRule = null as any;
utilities.lazyLoad(exports, ["RouteFilterRule"], () => require("./routeFilterRule"));

export { RoutingProtocolArgs, RoutingProtocolState } from "./routingProtocol";
export type RoutingProtocol = import("./routingProtocol").RoutingProtocol;
export const RoutingProtocol: typeof import("./routingProtocol").RoutingProtocol = null as any;
utilities.lazyLoad(exports, ["RoutingProtocol"], () => require("./routingProtocol"));

export { ServiceProfileArgs, ServiceProfileState } from "./serviceProfile";
export type ServiceProfile = import("./serviceProfile").ServiceProfile;
export const ServiceProfile: typeof import("./serviceProfile").ServiceProfile = null as any;
utilities.lazyLoad(exports, ["ServiceProfile"], () => require("./serviceProfile"));

export { ServiceTokenArgs, ServiceTokenState } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));

export { StreamArgs, StreamState } from "./stream";
export type Stream = import("./stream").Stream;
export const Stream: typeof import("./stream").Stream = null as any;
utilities.lazyLoad(exports, ["Stream"], () => require("./stream"));

export { StreamAlertRuleArgs, StreamAlertRuleState } from "./streamAlertRule";
export type StreamAlertRule = import("./streamAlertRule").StreamAlertRule;
export const StreamAlertRule: typeof import("./streamAlertRule").StreamAlertRule = null as any;
utilities.lazyLoad(exports, ["StreamAlertRule"], () => require("./streamAlertRule"));

export { StreamAttachmentArgs, StreamAttachmentState } from "./streamAttachment";
export type StreamAttachment = import("./streamAttachment").StreamAttachment;
export const StreamAttachment: typeof import("./streamAttachment").StreamAttachment = null as any;
utilities.lazyLoad(exports, ["StreamAttachment"], () => require("./streamAttachment"));

export { StreamSubscriptionArgs, StreamSubscriptionState } from "./streamSubscription";
export type StreamSubscription = import("./streamSubscription").StreamSubscription;
export const StreamSubscription: typeof import("./streamSubscription").StreamSubscription = null as any;
utilities.lazyLoad(exports, ["StreamSubscription"], () => require("./streamSubscription"));


// Export enums:
export * from "../types/enums/fabric";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:fabric/cloudRouter:CloudRouter":
                return new CloudRouter(name, <any>undefined, { urn })
            case "equinix:fabric/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "equinix:fabric/connectionRouteAggregation:ConnectionRouteAggregation":
                return new ConnectionRouteAggregation(name, <any>undefined, { urn })
            case "equinix:fabric/connectionRouteFilter:ConnectionRouteFilter":
                return new ConnectionRouteFilter(name, <any>undefined, { urn })
            case "equinix:fabric/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "equinix:fabric/precisionTimeService:PrecisionTimeService":
                return new PrecisionTimeService(name, <any>undefined, { urn })
            case "equinix:fabric/routeAggregation:RouteAggregation":
                return new RouteAggregation(name, <any>undefined, { urn })
            case "equinix:fabric/routeAggregationRule:RouteAggregationRule":
                return new RouteAggregationRule(name, <any>undefined, { urn })
            case "equinix:fabric/routeFilter:RouteFilter":
                return new RouteFilter(name, <any>undefined, { urn })
            case "equinix:fabric/routeFilterRule:RouteFilterRule":
                return new RouteFilterRule(name, <any>undefined, { urn })
            case "equinix:fabric/routingProtocol:RoutingProtocol":
                return new RoutingProtocol(name, <any>undefined, { urn })
            case "equinix:fabric/serviceProfile:ServiceProfile":
                return new ServiceProfile(name, <any>undefined, { urn })
            case "equinix:fabric/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            case "equinix:fabric/stream:Stream":
                return new Stream(name, <any>undefined, { urn })
            case "equinix:fabric/streamAlertRule:StreamAlertRule":
                return new StreamAlertRule(name, <any>undefined, { urn })
            case "equinix:fabric/streamAttachment:StreamAttachment":
                return new StreamAttachment(name, <any>undefined, { urn })
            case "equinix:fabric/streamSubscription:StreamSubscription":
                return new StreamSubscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "fabric/cloudRouter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connection", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connectionRouteAggregation", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connectionRouteFilter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/network", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/precisionTimeService", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeAggregation", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeAggregationRule", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeFilter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeFilterRule", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routingProtocol", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/serviceProfile", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/serviceToken", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/stream", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/streamAlertRule", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/streamAttachment", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/streamSubscription", _module)
