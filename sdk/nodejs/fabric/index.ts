// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CloudRouterArgs, CloudRouterState } from "./cloudRouter";
export type CloudRouter = import("./cloudRouter").CloudRouter;
export const CloudRouter: typeof import("./cloudRouter").CloudRouter = null as any;
utilities.lazyLoad(exports, ["CloudRouter"], () => require("./cloudRouter"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionRouteFilterArgs, ConnectionRouteFilterState } from "./connectionRouteFilter";
export type ConnectionRouteFilter = import("./connectionRouteFilter").ConnectionRouteFilter;
export const ConnectionRouteFilter: typeof import("./connectionRouteFilter").ConnectionRouteFilter = null as any;
utilities.lazyLoad(exports, ["ConnectionRouteFilter"], () => require("./connectionRouteFilter"));

export { GetCloudRouterArgs, GetCloudRouterResult, GetCloudRouterOutputArgs } from "./getCloudRouter";
export const getCloudRouter: typeof import("./getCloudRouter").getCloudRouter = null as any;
export const getCloudRouterOutput: typeof import("./getCloudRouter").getCloudRouterOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouter","getCloudRouterOutput"], () => require("./getCloudRouter"));

export { GetCloudRoutersArgs, GetCloudRoutersResult, GetCloudRoutersOutputArgs } from "./getCloudRouters";
export const getCloudRouters: typeof import("./getCloudRouters").getCloudRouters = null as any;
export const getCloudRoutersOutput: typeof import("./getCloudRouters").getCloudRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouters","getCloudRoutersOutput"], () => require("./getCloudRouters"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectionRouteFilterArgs, GetConnectionRouteFilterResult, GetConnectionRouteFilterOutputArgs } from "./getConnectionRouteFilter";
export const getConnectionRouteFilter: typeof import("./getConnectionRouteFilter").getConnectionRouteFilter = null as any;
export const getConnectionRouteFilterOutput: typeof import("./getConnectionRouteFilter").getConnectionRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteFilter","getConnectionRouteFilterOutput"], () => require("./getConnectionRouteFilter"));

export { GetConnectionRouteFiltersArgs, GetConnectionRouteFiltersResult, GetConnectionRouteFiltersOutputArgs } from "./getConnectionRouteFilters";
export const getConnectionRouteFilters: typeof import("./getConnectionRouteFilters").getConnectionRouteFilters = null as any;
export const getConnectionRouteFiltersOutput: typeof import("./getConnectionRouteFilters").getConnectionRouteFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionRouteFilters","getConnectionRouteFiltersOutput"], () => require("./getConnectionRouteFilters"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetMarketplaceSubscriptionArgs, GetMarketplaceSubscriptionResult, GetMarketplaceSubscriptionOutputArgs } from "./getMarketplaceSubscription";
export const getMarketplaceSubscription: typeof import("./getMarketplaceSubscription").getMarketplaceSubscription = null as any;
export const getMarketplaceSubscriptionOutput: typeof import("./getMarketplaceSubscription").getMarketplaceSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceSubscription","getMarketplaceSubscriptionOutput"], () => require("./getMarketplaceSubscription"));

export { GetMetroArgs, GetMetroResult, GetMetroOutputArgs } from "./getMetro";
export const getMetro: typeof import("./getMetro").getMetro = null as any;
export const getMetroOutput: typeof import("./getMetro").getMetroOutput = null as any;
utilities.lazyLoad(exports, ["getMetro","getMetroOutput"], () => require("./getMetro"));

export { GetMetrosArgs, GetMetrosResult, GetMetrosOutputArgs } from "./getMetros";
export const getMetros: typeof import("./getMetros").getMetros = null as any;
export const getMetrosOutput: typeof import("./getMetros").getMetrosOutput = null as any;
utilities.lazyLoad(exports, ["getMetros","getMetrosOutput"], () => require("./getMetros"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworksArgs, GetNetworksResult, GetNetworksOutputArgs } from "./getNetworks";
export const getNetworks: typeof import("./getNetworks").getNetworks = null as any;
export const getNetworksOutput: typeof import("./getNetworks").getNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworks","getNetworksOutput"], () => require("./getNetworks"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetPortsArgs, GetPortsResult, GetPortsOutputArgs } from "./getPorts";
export const getPorts: typeof import("./getPorts").getPorts = null as any;
export const getPortsOutput: typeof import("./getPorts").getPortsOutput = null as any;
utilities.lazyLoad(exports, ["getPorts","getPortsOutput"], () => require("./getPorts"));

export { GetRouteFilterArgs, GetRouteFilterResult, GetRouteFilterOutputArgs } from "./getRouteFilter";
export const getRouteFilter: typeof import("./getRouteFilter").getRouteFilter = null as any;
export const getRouteFilterOutput: typeof import("./getRouteFilter").getRouteFilterOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilter","getRouteFilterOutput"], () => require("./getRouteFilter"));

export { GetRouteFilterRuleArgs, GetRouteFilterRuleResult, GetRouteFilterRuleOutputArgs } from "./getRouteFilterRule";
export const getRouteFilterRule: typeof import("./getRouteFilterRule").getRouteFilterRule = null as any;
export const getRouteFilterRuleOutput: typeof import("./getRouteFilterRule").getRouteFilterRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilterRule","getRouteFilterRuleOutput"], () => require("./getRouteFilterRule"));

export { GetRouteFilterRulesArgs, GetRouteFilterRulesResult, GetRouteFilterRulesOutputArgs } from "./getRouteFilterRules";
export const getRouteFilterRules: typeof import("./getRouteFilterRules").getRouteFilterRules = null as any;
export const getRouteFilterRulesOutput: typeof import("./getRouteFilterRules").getRouteFilterRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilterRules","getRouteFilterRulesOutput"], () => require("./getRouteFilterRules"));

export { GetRouteFiltersArgs, GetRouteFiltersResult, GetRouteFiltersOutputArgs } from "./getRouteFilters";
export const getRouteFilters: typeof import("./getRouteFilters").getRouteFilters = null as any;
export const getRouteFiltersOutput: typeof import("./getRouteFilters").getRouteFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getRouteFilters","getRouteFiltersOutput"], () => require("./getRouteFilters"));

export { GetRoutingProtocolArgs, GetRoutingProtocolResult, GetRoutingProtocolOutputArgs } from "./getRoutingProtocol";
export const getRoutingProtocol: typeof import("./getRoutingProtocol").getRoutingProtocol = null as any;
export const getRoutingProtocolOutput: typeof import("./getRoutingProtocol").getRoutingProtocolOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingProtocol","getRoutingProtocolOutput"], () => require("./getRoutingProtocol"));

export { GetServiceProfileArgs, GetServiceProfileResult, GetServiceProfileOutputArgs } from "./getServiceProfile";
export const getServiceProfile: typeof import("./getServiceProfile").getServiceProfile = null as any;
export const getServiceProfileOutput: typeof import("./getServiceProfile").getServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfile","getServiceProfileOutput"], () => require("./getServiceProfile"));

export { GetServiceProfilesArgs, GetServiceProfilesResult, GetServiceProfilesOutputArgs } from "./getServiceProfiles";
export const getServiceProfiles: typeof import("./getServiceProfiles").getServiceProfiles = null as any;
export const getServiceProfilesOutput: typeof import("./getServiceProfiles").getServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProfiles","getServiceProfilesOutput"], () => require("./getServiceProfiles"));

export { GetServiceTokenArgs, GetServiceTokenResult, GetServiceTokenOutputArgs } from "./getServiceToken";
export const getServiceToken: typeof import("./getServiceToken").getServiceToken = null as any;
export const getServiceTokenOutput: typeof import("./getServiceToken").getServiceTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceToken","getServiceTokenOutput"], () => require("./getServiceToken"));

export { GetServiceTokensArgs, GetServiceTokensResult, GetServiceTokensOutputArgs } from "./getServiceTokens";
export const getServiceTokens: typeof import("./getServiceTokens").getServiceTokens = null as any;
export const getServiceTokensOutput: typeof import("./getServiceTokens").getServiceTokensOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTokens","getServiceTokensOutput"], () => require("./getServiceTokens"));

export { GetStreamArgs, GetStreamResult, GetStreamOutputArgs } from "./getStream";
export const getStream: typeof import("./getStream").getStream = null as any;
export const getStreamOutput: typeof import("./getStream").getStreamOutput = null as any;
utilities.lazyLoad(exports, ["getStream","getStreamOutput"], () => require("./getStream"));

export { GetStreamsArgs, GetStreamsResult, GetStreamsOutputArgs } from "./getStreams";
export const getStreams: typeof import("./getStreams").getStreams = null as any;
export const getStreamsOutput: typeof import("./getStreams").getStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getStreams","getStreamsOutput"], () => require("./getStreams"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { RouteFilterArgs, RouteFilterState } from "./routeFilter";
export type RouteFilter = import("./routeFilter").RouteFilter;
export const RouteFilter: typeof import("./routeFilter").RouteFilter = null as any;
utilities.lazyLoad(exports, ["RouteFilter"], () => require("./routeFilter"));

export { RouteFilterRuleArgs, RouteFilterRuleState } from "./routeFilterRule";
export type RouteFilterRule = import("./routeFilterRule").RouteFilterRule;
export const RouteFilterRule: typeof import("./routeFilterRule").RouteFilterRule = null as any;
utilities.lazyLoad(exports, ["RouteFilterRule"], () => require("./routeFilterRule"));

export { RoutingProtocolArgs, RoutingProtocolState } from "./routingProtocol";
export type RoutingProtocol = import("./routingProtocol").RoutingProtocol;
export const RoutingProtocol: typeof import("./routingProtocol").RoutingProtocol = null as any;
utilities.lazyLoad(exports, ["RoutingProtocol"], () => require("./routingProtocol"));

export { ServiceProfileArgs, ServiceProfileState } from "./serviceProfile";
export type ServiceProfile = import("./serviceProfile").ServiceProfile;
export const ServiceProfile: typeof import("./serviceProfile").ServiceProfile = null as any;
utilities.lazyLoad(exports, ["ServiceProfile"], () => require("./serviceProfile"));

export { ServiceTokenArgs, ServiceTokenState } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));

export { StreamArgs, StreamState } from "./stream";
export type Stream = import("./stream").Stream;
export const Stream: typeof import("./stream").Stream = null as any;
utilities.lazyLoad(exports, ["Stream"], () => require("./stream"));


// Export enums:
export * from "../types/enums/fabric";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:fabric/cloudRouter:CloudRouter":
                return new CloudRouter(name, <any>undefined, { urn })
            case "equinix:fabric/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "equinix:fabric/connectionRouteFilter:ConnectionRouteFilter":
                return new ConnectionRouteFilter(name, <any>undefined, { urn })
            case "equinix:fabric/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "equinix:fabric/routeFilter:RouteFilter":
                return new RouteFilter(name, <any>undefined, { urn })
            case "equinix:fabric/routeFilterRule:RouteFilterRule":
                return new RouteFilterRule(name, <any>undefined, { urn })
            case "equinix:fabric/routingProtocol:RoutingProtocol":
                return new RoutingProtocol(name, <any>undefined, { urn })
            case "equinix:fabric/serviceProfile:ServiceProfile":
                return new ServiceProfile(name, <any>undefined, { urn })
            case "equinix:fabric/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            case "equinix:fabric/stream:Stream":
                return new Stream(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "fabric/cloudRouter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connection", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/connectionRouteFilter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/network", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeFilter", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routeFilterRule", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/routingProtocol", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/serviceProfile", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/serviceToken", _module)
pulumi.runtime.registerResourceModule("equinix", "fabric/stream", _module)
