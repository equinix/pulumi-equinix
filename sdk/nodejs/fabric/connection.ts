// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const config = new pulumi.Config();
 * const metro = config.get("metro") || "FR";
 * const speedInMbps = config.getNumber("speedInMbps") || 50;
 * const fabricPortName = config.require("fabricPortName");
 * const awsRegion = config.get("awsRegion") || "eu-central-1";
 * const awsAccountId = config.require("awsAccountId");
 * const serviceProfileId = equinix.fabric.getServiceProfiles({
 *     filter: {
 *         property: "/name",
 *         operator: "=",
 *         values: ["AWS Direct Connect"],
 *     },
 * }).then(invoke => invoke.data?.[0]?.uuid!);
 * const portId = equinix.fabric.getPorts({
 *     filter: {
 *         name: fabricPortName,
 *     },
 * }).then(invoke => invoke.data?.[0]?.uuid!);
 * const colo2Aws = new equinix.fabric.Connection("colo2Aws", {
 *     name: "Pulumi-colo2Aws",
 *     type: "EVPL_VC",
 *     notifications: [{
 *         type: "ALL",
 *         emails: ["example@equinix.com"],
 *     }],
 *     bandwidth: speedInMbps,
 *     redundancy: {
 *         priority: "PRIMARY",
 *     },
 *     aSide: {
 *         accessPoint: {
 *             type: "COLO",
 *             port: {
 *                 uuid: portId,
 *             },
 *             linkProtocol: {
 *                 type: "DOT1Q",
 *                 vlanTag: 1234,
 *             },
 *         },
 *     },
 *     zSide: {
 *         accessPoint: {
 *             type: "SP",
 *             authenticationKey: awsAccountId,
 *             sellerRegion: awsRegion,
 *             profile: {
 *                 type: "L2_PROFILE",
 *                 uuid: serviceProfileId,
 *             },
 *             location: {
 *                 metroCode: metro,
 *             },
 *         },
 *     },
 * });
 * export const connectionId = colo2Aws.id;
 * export const connectionStatus = colo2Aws.operation.apply(operation => operation.equinixStatus);
 * export const connectionProviderStatus = colo2Aws.operation.apply(operation => operation.providerStatus);
 * export const awsDirectConnectId = colo2Aws.zSide.apply(zSide => zSide.accessPoint?.providerConnectionId);
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    public readonly aSide!: pulumi.Output<outputs.fabric.ConnectionASide>;
    /**
     * Account
     */
    public /*out*/ readonly account!: pulumi.Output<outputs.fabric.ConnectionAccount>;
    /**
     * Connection side additional information
     */
    public readonly additionalInfo!: pulumi.Output<{[key: string]: any}[] | undefined>;
    /**
     * Connection bandwidth in Mbps
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * Captures connection lifecycle change information
     */
    public /*out*/ readonly changeLog!: pulumi.Output<outputs.fabric.ConnectionChangeLog>;
    /**
     * Connection directionality from the requester point of view
     */
    public /*out*/ readonly direction!: pulumi.Output<string>;
    /**
     * Unique Resource Identifier
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Connection property derived from access point locations
     */
    public /*out*/ readonly isRemote!: pulumi.Output<boolean>;
    /**
     * Port name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    public readonly notifications!: pulumi.Output<outputs.fabric.ConnectionNotification[]>;
    /**
     * Connection type-specific operational data
     */
    public /*out*/ readonly operation!: pulumi.Output<outputs.fabric.ConnectionOperation>;
    /**
     * Order related to this connection information
     */
    public readonly order!: pulumi.Output<outputs.fabric.ConnectionOrder | undefined>;
    /**
     * Project information
     */
    public readonly project!: pulumi.Output<outputs.fabric.ConnectionProject | undefined>;
    /**
     * Redundancy Information
     */
    public readonly redundancy!: pulumi.Output<outputs.fabric.ConnectionRedundancy | undefined>;
    /**
     * Routing protocol instance state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Interface type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    public readonly zSide!: pulumi.Output<outputs.fabric.ConnectionZSide>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["aSide"] = state ? state.aSide : undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["changeLog"] = state ? state.changeLog : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isRemote"] = state ? state.isRemote : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zSide"] = state ? state.zSide : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.aSide === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aSide'");
            }
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zSide === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zSide'");
            }
            resourceInputs["aSide"] = args ? args.aSide : undefined;
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zSide"] = args ? args.zSide : undefined;
            resourceInputs["account"] = undefined /*out*/;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["direction"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isRemote"] = undefined /*out*/;
            resourceInputs["operation"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    aSide?: pulumi.Input<inputs.fabric.ConnectionASide>;
    /**
     * Account
     */
    account?: pulumi.Input<inputs.fabric.ConnectionAccount>;
    /**
     * Connection side additional information
     */
    additionalInfo?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    /**
     * Connection bandwidth in Mbps
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Captures connection lifecycle change information
     */
    changeLog?: pulumi.Input<inputs.fabric.ConnectionChangeLog>;
    /**
     * Connection directionality from the requester point of view
     */
    direction?: pulumi.Input<string>;
    /**
     * Unique Resource Identifier
     */
    href?: pulumi.Input<string>;
    /**
     * Connection property derived from access point locations
     */
    isRemote?: pulumi.Input<boolean>;
    /**
     * Port name
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionNotification>[]>;
    /**
     * Connection type-specific operational data
     */
    operation?: pulumi.Input<inputs.fabric.ConnectionOperation>;
    /**
     * Order related to this connection information
     */
    order?: pulumi.Input<inputs.fabric.ConnectionOrder>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.fabric.ConnectionProject>;
    /**
     * Redundancy Information
     */
    redundancy?: pulumi.Input<inputs.fabric.ConnectionRedundancy>;
    /**
     * Routing protocol instance state
     */
    state?: pulumi.Input<string>;
    /**
     * Interface type
     */
    type?: pulumi.Input<string | enums.fabric.ConnectionType>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    zSide?: pulumi.Input<inputs.fabric.ConnectionZSide>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    aSide: pulumi.Input<inputs.fabric.ConnectionASide>;
    /**
     * Connection side additional information
     */
    additionalInfo?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
    /**
     * Connection bandwidth in Mbps
     */
    bandwidth: pulumi.Input<number>;
    /**
     * Port name
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionNotification>[]>;
    /**
     * Order related to this connection information
     */
    order?: pulumi.Input<inputs.fabric.ConnectionOrder>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.fabric.ConnectionProject>;
    /**
     * Redundancy Information
     */
    redundancy?: pulumi.Input<inputs.fabric.ConnectionRedundancy>;
    /**
     * Interface type
     */
    type: pulumi.Input<string | enums.fabric.ConnectionType>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    zSide: pulumi.Input<inputs.fabric.ConnectionZSide>;
}
