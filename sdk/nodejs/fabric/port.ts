// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class Port extends pulumi.CustomResource {
    /**
     * Get an existing Port resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortState, opts?: pulumi.CustomResourceOptions): Port {
        return new Port(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/port:Port';

    /**
     * Returns true if the given object is an instance of Port.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Port {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Port.__pulumiType;
    }

    /**
     * Port order account details
     */
    public readonly account!: pulumi.Output<outputs.fabric.PortAccount>;
    /**
     * List of key/value objects to provide additional context to the Port order
     */
    public readonly additionalInfos!: pulumi.Output<outputs.fabric.PortAdditionalInfo[] | undefined>;
    /**
     * Details of the last change on the port resource
     */
    public /*out*/ readonly changeLog!: pulumi.Output<outputs.fabric.PortChangeLog>;
    /**
     * Connection type that is used from the port after creation
     */
    public readonly connectivitySourceType!: pulumi.Output<string>;
    /**
     * IBX code where the port will be located
     */
    public readonly demarcationPointIbx!: pulumi.Output<string>;
    /**
     * Port device configuration
     */
    public readonly device!: pulumi.Output<outputs.fabric.PortDevice | undefined>;
    /**
     * Port encapsulation settings
     */
    public readonly encapsulation!: pulumi.Output<outputs.fabric.PortEncapsulation>;
    /**
     * Equinix assigned URI of the port resource
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     */
    public readonly lagEnabled!: pulumi.Output<boolean>;
    /**
     * Location details for the port order
     */
    public readonly location!: pulumi.Output<outputs.fabric.PortLocation>;
    /**
     * Designated name of the port
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of notification types and the registered users to receive those notification types
     */
    public readonly notifications!: pulumi.Output<outputs.fabric.PortNotification[]>;
    /**
     * Details of the Port Order such as purchaseOrder details and signature
     */
    public readonly order!: pulumi.Output<outputs.fabric.PortOrder>;
    /**
     * Physical ports that will implement this port order
     */
    public readonly physicalPorts!: pulumi.Output<outputs.fabric.PortPhysicalPort[]>;
    /**
     * Number of physical ports in the Port Order
     */
    public readonly physicalPortsCount!: pulumi.Output<number>;
    /**
     * Physical Ports Speed in Mbps
     */
    public readonly physicalPortsSpeed!: pulumi.Output<number>;
    /**
     * Physical Ports Type
     */
    public readonly physicalPortsType!: pulumi.Output<string>;
    /**
     * Port order project details
     */
    public readonly project!: pulumi.Output<outputs.fabric.PortProject>;
    /**
     * Port redundancy settings
     */
    public readonly redundancy!: pulumi.Output<outputs.fabric.PortRedundancy>;
    /**
     * Port order configuration settings
     */
    public readonly settings!: pulumi.Output<outputs.fabric.PortSettings>;
    /**
     * Value representing provisioning status for the port resource
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.fabric.PortTimeouts | undefined>;
    /**
     * Type of the port order request
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Equinix assigned unique identifier of the port resource
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Port resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortArgs | PortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["additionalInfos"] = state ? state.additionalInfos : undefined;
            resourceInputs["changeLog"] = state ? state.changeLog : undefined;
            resourceInputs["connectivitySourceType"] = state ? state.connectivitySourceType : undefined;
            resourceInputs["demarcationPointIbx"] = state ? state.demarcationPointIbx : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["encapsulation"] = state ? state.encapsulation : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["lagEnabled"] = state ? state.lagEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["physicalPorts"] = state ? state.physicalPorts : undefined;
            resourceInputs["physicalPortsCount"] = state ? state.physicalPortsCount : undefined;
            resourceInputs["physicalPortsSpeed"] = state ? state.physicalPortsSpeed : undefined;
            resourceInputs["physicalPortsType"] = state ? state.physicalPortsType : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as PortArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.connectivitySourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectivitySourceType'");
            }
            if ((!args || args.demarcationPointIbx === undefined) && !opts.urn) {
                throw new Error("Missing required property 'demarcationPointIbx'");
            }
            if ((!args || args.encapsulation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encapsulation'");
            }
            if ((!args || args.lagEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lagEnabled'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.physicalPorts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalPorts'");
            }
            if ((!args || args.physicalPortsCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalPortsCount'");
            }
            if ((!args || args.physicalPortsSpeed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalPortsSpeed'");
            }
            if ((!args || args.physicalPortsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalPortsType'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.redundancy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redundancy'");
            }
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["additionalInfos"] = args ? args.additionalInfos : undefined;
            resourceInputs["connectivitySourceType"] = args ? args.connectivitySourceType : undefined;
            resourceInputs["demarcationPointIbx"] = args ? args.demarcationPointIbx : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["encapsulation"] = args ? args.encapsulation : undefined;
            resourceInputs["lagEnabled"] = args ? args.lagEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["physicalPorts"] = args ? args.physicalPorts : undefined;
            resourceInputs["physicalPortsCount"] = args ? args.physicalPortsCount : undefined;
            resourceInputs["physicalPortsSpeed"] = args ? args.physicalPortsSpeed : undefined;
            resourceInputs["physicalPortsType"] = args ? args.physicalPortsType : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Port.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Port resources.
 */
export interface PortState {
    /**
     * Port order account details
     */
    account?: pulumi.Input<inputs.fabric.PortAccount>;
    /**
     * List of key/value objects to provide additional context to the Port order
     */
    additionalInfos?: pulumi.Input<pulumi.Input<inputs.fabric.PortAdditionalInfo>[]>;
    /**
     * Details of the last change on the port resource
     */
    changeLog?: pulumi.Input<inputs.fabric.PortChangeLog>;
    /**
     * Connection type that is used from the port after creation
     */
    connectivitySourceType?: pulumi.Input<string>;
    /**
     * IBX code where the port will be located
     */
    demarcationPointIbx?: pulumi.Input<string>;
    /**
     * Port device configuration
     */
    device?: pulumi.Input<inputs.fabric.PortDevice>;
    /**
     * Port encapsulation settings
     */
    encapsulation?: pulumi.Input<inputs.fabric.PortEncapsulation>;
    /**
     * Equinix assigned URI of the port resource
     */
    href?: pulumi.Input<string>;
    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     */
    lagEnabled?: pulumi.Input<boolean>;
    /**
     * Location details for the port order
     */
    location?: pulumi.Input<inputs.fabric.PortLocation>;
    /**
     * Designated name of the port
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification types and the registered users to receive those notification types
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.fabric.PortNotification>[]>;
    /**
     * Details of the Port Order such as purchaseOrder details and signature
     */
    order?: pulumi.Input<inputs.fabric.PortOrder>;
    /**
     * Physical ports that will implement this port order
     */
    physicalPorts?: pulumi.Input<pulumi.Input<inputs.fabric.PortPhysicalPort>[]>;
    /**
     * Number of physical ports in the Port Order
     */
    physicalPortsCount?: pulumi.Input<number>;
    /**
     * Physical Ports Speed in Mbps
     */
    physicalPortsSpeed?: pulumi.Input<number>;
    /**
     * Physical Ports Type
     */
    physicalPortsType?: pulumi.Input<string>;
    /**
     * Port order project details
     */
    project?: pulumi.Input<inputs.fabric.PortProject>;
    /**
     * Port redundancy settings
     */
    redundancy?: pulumi.Input<inputs.fabric.PortRedundancy>;
    /**
     * Port order configuration settings
     */
    settings?: pulumi.Input<inputs.fabric.PortSettings>;
    /**
     * Value representing provisioning status for the port resource
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.fabric.PortTimeouts>;
    /**
     * Type of the port order request
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix assigned unique identifier of the port resource
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Port resource.
 */
export interface PortArgs {
    /**
     * Port order account details
     */
    account: pulumi.Input<inputs.fabric.PortAccount>;
    /**
     * List of key/value objects to provide additional context to the Port order
     */
    additionalInfos?: pulumi.Input<pulumi.Input<inputs.fabric.PortAdditionalInfo>[]>;
    /**
     * Connection type that is used from the port after creation
     */
    connectivitySourceType: pulumi.Input<string>;
    /**
     * IBX code where the port will be located
     */
    demarcationPointIbx: pulumi.Input<string>;
    /**
     * Port device configuration
     */
    device?: pulumi.Input<inputs.fabric.PortDevice>;
    /**
     * Port encapsulation settings
     */
    encapsulation: pulumi.Input<inputs.fabric.PortEncapsulation>;
    /**
     * Boolean value to enable the created port with Link Aggregation Groups
     */
    lagEnabled: pulumi.Input<boolean>;
    /**
     * Location details for the port order
     */
    location: pulumi.Input<inputs.fabric.PortLocation>;
    /**
     * Designated name of the port
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification types and the registered users to receive those notification types
     */
    notifications: pulumi.Input<pulumi.Input<inputs.fabric.PortNotification>[]>;
    /**
     * Details of the Port Order such as purchaseOrder details and signature
     */
    order?: pulumi.Input<inputs.fabric.PortOrder>;
    /**
     * Physical ports that will implement this port order
     */
    physicalPorts: pulumi.Input<pulumi.Input<inputs.fabric.PortPhysicalPort>[]>;
    /**
     * Number of physical ports in the Port Order
     */
    physicalPortsCount: pulumi.Input<number>;
    /**
     * Physical Ports Speed in Mbps
     */
    physicalPortsSpeed: pulumi.Input<number>;
    /**
     * Physical Ports Type
     */
    physicalPortsType: pulumi.Input<string>;
    /**
     * Port order project details
     */
    project: pulumi.Input<inputs.fabric.PortProject>;
    /**
     * Port redundancy settings
     */
    redundancy: pulumi.Input<inputs.fabric.PortRedundancy>;
    /**
     * Port order configuration settings
     */
    settings: pulumi.Input<inputs.fabric.PortSettings>;
    timeouts?: pulumi.Input<inputs.fabric.PortTimeouts>;
    /**
     * Type of the port order request
     */
    type: pulumi.Input<string>;
}
