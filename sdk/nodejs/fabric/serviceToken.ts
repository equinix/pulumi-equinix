// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Service Token](https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm).
 *
 * Additional documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/service%20tokens/Fabric-Service-Tokens.htm
 * * API: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/ConnectUsingServiceToken.htm
 *
 * ## Example Usage
 *
 * Aside Port Service Token
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const test = new equinix.fabric.ServiceToken("test", {
 *     description: "Aside COLO Service Token",
 *     expirationDateTime: "2025-01-18T06:43:49.981Z",
 *     notifications: [{
 *         emails: [
 *             "example@equinix.com",
 *             "test1@equinix.com",
 *         ],
 *         type: "ALL",
 *     }],
 *     serviceTokenConnections: [{
 *         aSides: [{
 *             accessPointSelectors: [{
 *                 linkProtocol: {
 *                     type: "DOT1Q",
 *                     vlanTag: 2987,
 *                 },
 *                 port: {
 *                     uuid: "<port_uuid>",
 *                 },
 *                 type: "COLO",
 *             }],
 *         }],
 *         bandwidthLimit: 1000,
 *         type: "EVPL_VC",
 *     }],
 *     type: "VC_TOKEN",
 * });
 * ```
 *
 * Zside Port Service Token
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const test = new equinix.fabric.ServiceToken("test", {
 *     description: "Zside COLO Service Token",
 *     expirationDateTime: "2025-01-18T06:43:49.981Z",
 *     notifications: [{
 *         emails: [
 *             "example@equinix.com",
 *             "test1@equinix.com",
 *         ],
 *         type: "ALL",
 *     }],
 *     serviceTokenConnections: [{
 *         supportedBandwidths: [
 *             50,
 *             200,
 *             10000,
 *         ],
 *         type: "EVPL_VC",
 *         zSides: [{
 *             accessPointSelectors: [{
 *                 linkProtocol: {
 *                     type: "DOT1Q",
 *                     vlanTag: 2087,
 *                 },
 *                 port: {
 *                     uuid: "<port_uuid>",
 *                 },
 *                 type: "COLO",
 *             }],
 *         }],
 *     }],
 *     type: "VC_TOKEN",
 * });
 * ```
 *
 * Zside Network Service Token
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const test = new equinix.fabric.ServiceToken("test", {
 *     description: "Zside Network Service Token",
 *     expirationDateTime: "2025-01-18T06:43:49.986Z",
 *     notifications: [{
 *         emails: ["example@equinix.com"],
 *         type: "ALL",
 *     }],
 *     serviceTokenConnections: [{
 *         supportedBandwidths: [
 *             50,
 *             200,
 *             10000,
 *         ],
 *         type: "EVPL_VC",
 *         zSides: [{
 *             accessPointSelectors: [{
 *                 network: {
 *                     uuid: "<network_uuid>",
 *                 },
 *                 type: "NETWORK",
 *             }],
 *         }],
 *     }],
 *     type: "VC_TOKEN",
 * });
 * ```
 *
 * Zside Virtual Device Service Token
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const test = new equinix.fabric.ServiceToken("test", {
 *     description: "Zside VD Service Token",
 *     expirationDateTime: "2025-01-18T06:43:49.986Z",
 *     notifications: [{
 *         emails: ["example@equinix.com"],
 *         type: "ALL",
 *     }],
 *     serviceTokenConnections: [{
 *         supportedBandwidths: [
 *             50,
 *             200,
 *             10000,
 *         ],
 *         type: "EVPL_VC",
 *         zSides: [{
 *             accessPointSelectors: [{
 *                 "interface": {
 *                     type: "NETWORK",
 *                 },
 *                 type: "VD",
 *                 virtualDevice: {
 *                     type: "EDGE",
 *                     uuid: "<device_uuid>",
 *                 },
 *             }],
 *         }],
 *     }],
 *     type: "VC_TOKEN",
 * });
 * ```
 */
export class ServiceToken extends pulumi.CustomResource {
    /**
     * Get an existing ServiceToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceTokenState, opts?: pulumi.CustomResourceOptions): ServiceToken {
        return new ServiceToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/serviceToken:ServiceToken';

    /**
     * Returns true if the given object is an instance of ServiceToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceToken.__pulumiType;
    }

    /**
     * Customer account information that is associated with this service token
     */
    public /*out*/ readonly accounts!: pulumi.Output<outputs.fabric.ServiceTokenAccount[]>;
    /**
     * Captures connection lifecycle change information
     */
    public /*out*/ readonly changeLogs!: pulumi.Output<outputs.fabric.ServiceTokenChangeLog[]>;
    /**
     * Optional Description to the Service Token you will be creating
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Expiration date and time of the service token; 2020-11-06T07:00:00Z
     */
    public readonly expirationDateTime!: pulumi.Output<string>;
    /**
     * An absolute URL that is the subject of the link's context.
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Information about token side; ASIDE, ZSIDE
     */
    public /*out*/ readonly issuerSide!: pulumi.Output<string>;
    /**
     * Name of the Service Token
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Preferences for notifications on Service Token configuration or status changes
     */
    public readonly notifications!: pulumi.Output<outputs.fabric.ServiceTokenNotification[]>;
    /**
     * Project information
     */
    public readonly project!: pulumi.Output<outputs.fabric.ServiceTokenProject>;
    /**
     * Service Token Connection Type Information
     */
    public readonly serviceTokenConnections!: pulumi.Output<outputs.fabric.ServiceTokenServiceTokenConnection[]>;
    /**
     * Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Service Token Type; VC*TOKEN,EPL*TOKEN
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Equinix-assigned service token identifier
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ServiceToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceTokenArgs | ServiceTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceTokenState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["changeLogs"] = state ? state.changeLogs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expirationDateTime"] = state ? state.expirationDateTime : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["issuerSide"] = state ? state.issuerSide : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceTokenConnections"] = state ? state.serviceTokenConnections : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ServiceTokenArgs | undefined;
            if ((!args || args.expirationDateTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expirationDateTime'");
            }
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.serviceTokenConnections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceTokenConnections'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expirationDateTime"] = args ? args.expirationDateTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceTokenConnections"] = args ? args.serviceTokenConnections : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["accounts"] = undefined /*out*/;
            resourceInputs["changeLogs"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["issuerSide"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceToken resources.
 */
export interface ServiceTokenState {
    /**
     * Customer account information that is associated with this service token
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenAccount>[]>;
    /**
     * Captures connection lifecycle change information
     */
    changeLogs?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenChangeLog>[]>;
    /**
     * Optional Description to the Service Token you will be creating
     */
    description?: pulumi.Input<string>;
    /**
     * Expiration date and time of the service token; 2020-11-06T07:00:00Z
     */
    expirationDateTime?: pulumi.Input<string>;
    /**
     * An absolute URL that is the subject of the link's context.
     */
    href?: pulumi.Input<string>;
    /**
     * Information about token side; ASIDE, ZSIDE
     */
    issuerSide?: pulumi.Input<string>;
    /**
     * Name of the Service Token
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Service Token configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenNotification>[]>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.fabric.ServiceTokenProject>;
    /**
     * Service Token Connection Type Information
     */
    serviceTokenConnections?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenServiceTokenConnection>[]>;
    /**
     * Service token state; ACTIVE, INACTIVE, EXPIRED, DELETED
     */
    state?: pulumi.Input<string>;
    /**
     * Service Token Type; VC*TOKEN,EPL*TOKEN
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned service token identifier
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceToken resource.
 */
export interface ServiceTokenArgs {
    /**
     * Optional Description to the Service Token you will be creating
     */
    description?: pulumi.Input<string>;
    /**
     * Expiration date and time of the service token; 2020-11-06T07:00:00Z
     */
    expirationDateTime: pulumi.Input<string>;
    /**
     * Name of the Service Token
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Service Token configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenNotification>[]>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.fabric.ServiceTokenProject>;
    /**
     * Service Token Connection Type Information
     */
    serviceTokenConnections: pulumi.Input<pulumi.Input<inputs.fabric.ServiceTokenServiceTokenConnection>[]>;
    /**
     * Service Token Type; VC*TOKEN,EPL*TOKEN
     */
    type: pulumi.Input<string>;
}
