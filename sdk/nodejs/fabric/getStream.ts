// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const dataStream = equinix.fabric.getStream({
 *     streamId: "<uuid_of_stream>",
 * });
 * export const streamState = dataStream.then(dataStream => dataStream.state);
 * ```
 */
export function getStream(args: GetStreamArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getStream:getStream", {
        "streamId": args.streamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStream.
 */
export interface GetStreamArgs {
    /**
     * The uuid of the stream this data source should retrieve
     */
    streamId: string;
}

/**
 * A collection of values returned by getStream.
 */
export interface GetStreamResult {
    /**
     * Count of the streaming assets attached to the stream resource
     */
    readonly assetsCount: number;
    /**
     * Details of the last change on the stream resource
     */
    readonly changeLog: outputs.fabric.GetStreamChangeLog;
    /**
     * Customer-provided description of the stream resource
     */
    readonly description: string;
    /**
     * Equinix auto generated URI to the stream resource in Equinix Portal
     */
    readonly href: string;
    /**
     * The unique identifier of the resource
     */
    readonly id: string;
    /**
     * Customer-provided name of the stream resource
     */
    readonly name: string;
    /**
     * Equinix Project attribute object
     */
    readonly project: outputs.fabric.GetStreamProject;
    /**
     * Value representing provisioning status for the stream resource
     */
    readonly state: string;
    /**
     * The uuid of the stream this data source should retrieve
     */
    readonly streamId: string;
    /**
     * Count of the client subscriptions on the stream resource
     */
    readonly streamSubscriptionsCount: number;
    /**
     * Equinix defined Streaming Type
     */
    readonly type: string;
    /**
     * Equinix-assigned unique id for the stream resource
     */
    readonly uuid: string;
}
/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Stream by UUID
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const dataStream = equinix.fabric.getStream({
 *     streamId: "<uuid_of_stream>",
 * });
 * export const streamState = dataStream.then(dataStream => dataStream.state);
 * ```
 */
export function getStreamOutput(args: GetStreamOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:fabric/getStream:getStream", {
        "streamId": args.streamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStream.
 */
export interface GetStreamOutputArgs {
    /**
     * The uuid of the stream this data source should retrieve
     */
    streamId: pulumi.Input<string>;
}
