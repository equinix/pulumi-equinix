// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
 * Additional Documentation:
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const attachedPolicy = equinix.fabric.getConnectionRouteAggregation({
 *     routeAggregationId: "<route_aggregation_id>",
 *     connectionId: "<connection_id>",
 * });
 * export const connectionRouteAggregationId = attachedPolicy.then(attachedPolicy => attachedPolicy.id);
 * export const connectionRouteAggregationConnectionId = attachedPolicy.then(attachedPolicy => attachedPolicy.connectionId);
 * export const connectionRouteAggregationType = attachedPolicy.then(attachedPolicy => attachedPolicy.type);
 * export const connectionRouteAggregationAttachmentStatus = attachedPolicy.then(attachedPolicy => attachedPolicy.attachmentStatus);
 * ```
 */
export function getConnectionRouteAggregation(args: GetConnectionRouteAggregationArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionRouteAggregationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", {
        "connectionId": args.connectionId,
        "routeAggregationId": args.routeAggregationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectionRouteAggregation.
 */
export interface GetConnectionRouteAggregationArgs {
    /**
     * The uuid of the connection this data source should retrieve
     */
    connectionId: string;
    /**
     * The uuid of the route aggregation this data source should retrieve
     */
    routeAggregationId: string;
}

/**
 * A collection of values returned by getConnectionRouteAggregation.
 */
export interface GetConnectionRouteAggregationResult {
    /**
     * Status of the Route Aggregation Policy attachment lifecycle
     */
    readonly attachmentStatus: string;
    /**
     * The uuid of the connection this data source should retrieve
     */
    readonly connectionId: string;
    /**
     * URI to the attached Route Aggregation Policy on the Connection
     */
    readonly href: string;
    /**
     * The unique identifier of the resource
     */
    readonly id: string;
    /**
     * The uuid of the route aggregation this data source should retrieve
     */
    readonly routeAggregationId: string;
    /**
     * Route Aggregation Type. One of ["BGP*IPv4*PREFIX_AGGREGATION"]
     */
    readonly type: string;
    /**
     * Equinix Assigned ID for Route Aggregation Policy
     */
    readonly uuid: string;
}
/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Connection Route Aggregation by UUID
 * Additional Documentation:
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const attachedPolicy = equinix.fabric.getConnectionRouteAggregation({
 *     routeAggregationId: "<route_aggregation_id>",
 *     connectionId: "<connection_id>",
 * });
 * export const connectionRouteAggregationId = attachedPolicy.then(attachedPolicy => attachedPolicy.id);
 * export const connectionRouteAggregationConnectionId = attachedPolicy.then(attachedPolicy => attachedPolicy.connectionId);
 * export const connectionRouteAggregationType = attachedPolicy.then(attachedPolicy => attachedPolicy.type);
 * export const connectionRouteAggregationAttachmentStatus = attachedPolicy.then(attachedPolicy => attachedPolicy.attachmentStatus);
 * ```
 */
export function getConnectionRouteAggregationOutput(args: GetConnectionRouteAggregationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConnectionRouteAggregationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:fabric/getConnectionRouteAggregation:getConnectionRouteAggregation", {
        "connectionId": args.connectionId,
        "routeAggregationId": args.routeAggregationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectionRouteAggregation.
 */
export interface GetConnectionRouteAggregationOutputArgs {
    /**
     * The uuid of the connection this data source should retrieve
     */
    connectionId: pulumi.Input<string>;
    /**
     * The uuid of the route aggregation this data source should retrieve
     */
    routeAggregationId: pulumi.Input<string>;
}
