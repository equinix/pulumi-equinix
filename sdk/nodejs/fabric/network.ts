// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Network
 *
 * Additional documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm
 * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const newNetwork = new equinix.fabric.Network("new_network", {
 *     name: "Network-SV",
 *     type: "EVPLAN",
 *     scope: "GLOBAL",
 *     notifications: [{
 *         type: "ALL",
 *         emails: [
 *             "example@equinix.com",
 *             "test1@equinix.com",
 *         ],
 *     }],
 *     project: {
 *         projectId: "776847000642406",
 *     },
 * });
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Information on asset change operation
     */
    declare public /*out*/ readonly change: pulumi.Output<outputs.fabric.NetworkChange>;
    /**
     * A permanent record of asset creation, modification, or deletion
     */
    declare public /*out*/ readonly changeLog: pulumi.Output<outputs.fabric.NetworkChangeLog>;
    /**
     * Number of connections associated with this network
     */
    declare public /*out*/ readonly connectionsCount: pulumi.Output<number>;
    /**
     * Fabric Network URI information
     */
    declare public /*out*/ readonly href: pulumi.Output<string>;
    /**
     * Fabric Network location
     */
    declare public readonly location: pulumi.Output<outputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    declare public readonly notifications: pulumi.Output<outputs.fabric.NetworkNotification[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    declare public /*out*/ readonly operation: pulumi.Output<outputs.fabric.NetworkOperation>;
    /**
     * Fabric Network project
     */
    declare public readonly project: pulumi.Output<outputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * Fabric Network overall state
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Equinix-assigned network identifier
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["change"] = state?.change;
            resourceInputs["changeLog"] = state?.changeLog;
            resourceInputs["connectionsCount"] = state?.connectionsCount;
            resourceInputs["href"] = state?.href;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["notifications"] = state?.notifications;
            resourceInputs["operation"] = state?.operation;
            resourceInputs["project"] = state?.project;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["state"] = state?.state;
            resourceInputs["type"] = state?.type;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if (args?.notifications === undefined && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["notifications"] = args?.notifications;
            resourceInputs["project"] = args?.project;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["type"] = args?.type;
            resourceInputs["change"] = undefined /*out*/;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["connectionsCount"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["operation"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Information on asset change operation
     */
    change?: pulumi.Input<inputs.fabric.NetworkChange>;
    /**
     * A permanent record of asset creation, modification, or deletion
     */
    changeLog?: pulumi.Input<inputs.fabric.NetworkChangeLog>;
    /**
     * Number of connections associated with this network
     */
    connectionsCount?: pulumi.Input<number>;
    /**
     * Fabric Network URI information
     */
    href?: pulumi.Input<string>;
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.fabric.NetworkNotification>[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    operation?: pulumi.Input<inputs.fabric.NetworkOperation>;
    /**
     * Fabric Network project
     */
    project?: pulumi.Input<inputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
     */
    scope?: pulumi.Input<string>;
    /**
     * Fabric Network overall state
     */
    state?: pulumi.Input<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned network identifier
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.fabric.NetworkNotification>[]>;
    /**
     * Fabric Network project
     */
    project: pulumi.Input<inputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope. Valid values: [REGIONAL GLOBAL LOCAL]. Note: When scope is REGIONAL, the location.region field is required.
     */
    scope: pulumi.Input<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN, EVPTREE, EPTREE
     */
    type: pulumi.Input<string>;
}
