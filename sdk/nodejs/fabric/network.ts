// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Network
 *
 * Additional documentation:
 * * Getting Started: <https://docs.equinix.com/en-us/Content/Interconnection/Fabric/IMPLEMENTATION/fabric-networks-implement.htm>
 * * API: <https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-networks>
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const newNetwork = new equinix.fabric.Network("newNetwork", {
 *     notifications: [{
 *         emails: [
 *             "example@equinix.com",
 *             "test1@equinix.com",
 *         ],
 *         type: "ALL",
 *     }],
 *     project: {
 *         projectId: "776847000642406",
 *     },
 *     scope: "GLOBAL",
 *     type: "EVPLAN",
 * });
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Information on asset change operation
     */
    public /*out*/ readonly change!: pulumi.Output<outputs.fabric.NetworkChange>;
    /**
     * A permanent record of asset creation, modification, or deletion
     */
    public /*out*/ readonly changeLog!: pulumi.Output<outputs.fabric.NetworkChangeLog>;
    /**
     * Number of connections associated with this network
     */
    public /*out*/ readonly connectionsCount!: pulumi.Output<number>;
    /**
     * Fabric Network URI information
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Fabric Network location
     */
    public readonly location!: pulumi.Output<outputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    public readonly notifications!: pulumi.Output<outputs.fabric.NetworkNotification[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    public /*out*/ readonly operation!: pulumi.Output<outputs.fabric.NetworkOperation>;
    /**
     * Fabric Network project
     */
    public readonly project!: pulumi.Output<outputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Fabric Network overall state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Equinix-assigned network identifier
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["change"] = state ? state.change : undefined;
            resourceInputs["changeLog"] = state ? state.changeLog : undefined;
            resourceInputs["connectionsCount"] = state ? state.connectionsCount : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["change"] = undefined /*out*/;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["connectionsCount"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["operation"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Information on asset change operation
     */
    change?: pulumi.Input<inputs.fabric.NetworkChange>;
    /**
     * A permanent record of asset creation, modification, or deletion
     */
    changeLog?: pulumi.Input<inputs.fabric.NetworkChangeLog>;
    /**
     * Number of connections associated with this network
     */
    connectionsCount?: pulumi.Input<number>;
    /**
     * Fabric Network URI information
     */
    href?: pulumi.Input<string>;
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.fabric.NetworkNotification>[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    operation?: pulumi.Input<inputs.fabric.NetworkOperation>;
    /**
     * Fabric Network project
     */
    project?: pulumi.Input<inputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope
     */
    scope?: pulumi.Input<string>;
    /**
     * Fabric Network overall state
     */
    state?: pulumi.Input<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned network identifier
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.fabric.NetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.fabric.NetworkNotification>[]>;
    /**
     * Fabric Network project
     */
    project: pulumi.Input<inputs.fabric.NetworkProject>;
    /**
     * Fabric Network scope
     */
    scope: pulumi.Input<string>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    type: pulumi.Input<string>;
}
