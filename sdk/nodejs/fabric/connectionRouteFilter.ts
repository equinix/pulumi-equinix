// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows attachment of Route Filter Polices to Fabric Connections
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
 * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filters
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const policyAttachment = new equinix.fabric.ConnectionRouteFilter("policy_attachment", {
 *     connectionId: "<connection_uuid>",
 *     routeFilterId: "<route_filter_policy_uuid>",
 *     direction: "INBOUND",
 * });
 * export const connectionRouteFilterId = policyAttachment.id;
 * export const connectionRouteFilterConnectionId = policyAttachment.connectionId;
 * export const connectionRouteFilterDirection = policyAttachment.direction;
 * export const connectionRouteFilterType = policyAttachment.type;
 * export const connectionRouteFilterAttachmentStatus = policyAttachment.attachmentStatus;
 * ```
 */
export class ConnectionRouteFilter extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionRouteFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionRouteFilterState, opts?: pulumi.CustomResourceOptions): ConnectionRouteFilter {
        return new ConnectionRouteFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/connectionRouteFilter:ConnectionRouteFilter';

    /**
     * Returns true if the given object is an instance of ConnectionRouteFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionRouteFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionRouteFilter.__pulumiType;
    }

    /**
     * Status of the Route Filter Policy attachment lifecycle
     */
    declare public /*out*/ readonly attachmentStatus: pulumi.Output<string>;
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    declare public readonly connectionId: pulumi.Output<string>;
    /**
     * Direction of the filtering of the attached Route Filter Policy
     */
    declare public readonly direction: pulumi.Output<string>;
    /**
     * URI to the attached Route Filter Policy on the Connection
     */
    declare public /*out*/ readonly href: pulumi.Output<string>;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    declare public readonly routeFilterId: pulumi.Output<string>;
    /**
     * Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Equinix Assigned ID for Route Filter Policy
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a ConnectionRouteFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionRouteFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionRouteFilterArgs | ConnectionRouteFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionRouteFilterState | undefined;
            resourceInputs["attachmentStatus"] = state?.attachmentStatus;
            resourceInputs["connectionId"] = state?.connectionId;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["href"] = state?.href;
            resourceInputs["routeFilterId"] = state?.routeFilterId;
            resourceInputs["type"] = state?.type;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as ConnectionRouteFilterArgs | undefined;
            if (args?.connectionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.routeFilterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routeFilterId'");
            }
            resourceInputs["connectionId"] = args?.connectionId;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["routeFilterId"] = args?.routeFilterId;
            resourceInputs["attachmentStatus"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionRouteFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionRouteFilter resources.
 */
export interface ConnectionRouteFilterState {
    /**
     * Status of the Route Filter Policy attachment lifecycle
     */
    attachmentStatus?: pulumi.Input<string>;
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    connectionId?: pulumi.Input<string>;
    /**
     * Direction of the filtering of the attached Route Filter Policy
     */
    direction?: pulumi.Input<string>;
    /**
     * URI to the attached Route Filter Policy on the Connection
     */
    href?: pulumi.Input<string>;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    routeFilterId?: pulumi.Input<string>;
    /**
     * Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix Assigned ID for Route Filter Policy
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionRouteFilter resource.
 */
export interface ConnectionRouteFilterArgs {
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    connectionId: pulumi.Input<string>;
    /**
     * Direction of the filtering of the attached Route Filter Policy
     */
    direction: pulumi.Input<string>;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    routeFilterId: pulumi.Input<string>;
}
