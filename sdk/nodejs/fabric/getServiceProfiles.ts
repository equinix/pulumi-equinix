// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const serviceProfilesDataName = equinix.fabric.getServiceProfiles({
 *     filter: {
 *         property: "/name",
 *         operator: "=",
 *         values: ["<list_of_profiles_to_return>"],
 *     },
 * });
 * export const id = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].id;
 * export const name = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].name;
 * export const type = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].type;
 * export const visibility = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].visibility;
 * export const orgName = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].account[0].organization_name;
 * export const accessPointTypeConfigsType = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].type;
 * export const allowRemoteConnections = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].allow_remote_connections;
 * export const supportedBandwidth0 = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].supported_bandwidths[0];
 * export const supportedBandwidth1 = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].supported_bandwidths[1];
 * export const redundandyRequired = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].connection_redundancy_required;
 * export const allowOverSubscription = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].api_config[0].allow_over_subscription;
 * ```
 */
export function getServiceProfiles(args?: GetServiceProfilesArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceProfilesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getServiceProfiles:getServiceProfiles", {
        "filter": args.filter,
        "sort": args.sort,
        "viewPoint": args.viewPoint,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceProfiles.
 */
export interface GetServiceProfilesArgs {
    /**
     * Service Profile Search Filter
     */
    filter?: inputs.fabric.GetServiceProfilesFilter;
    /**
     * Service Profile Sort criteria for Search Request response payload
     */
    sort?: inputs.fabric.GetServiceProfilesSort[];
    /**
     * flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     */
    viewPoint?: string;
}

/**
 * A collection of values returned by getServiceProfiles.
 */
export interface GetServiceProfilesResult {
    /**
     * List of Service Profiles
     */
    readonly data: outputs.fabric.GetServiceProfilesDatum[];
    /**
     * Service Profile Search Filter
     */
    readonly filter?: outputs.fabric.GetServiceProfilesFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Service Profile Sort criteria for Search Request response payload
     */
    readonly sort?: outputs.fabric.GetServiceProfilesSort[];
    /**
     * flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     */
    readonly viewPoint?: string;
}
/**
 * Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const serviceProfilesDataName = equinix.fabric.getServiceProfiles({
 *     filter: {
 *         property: "/name",
 *         operator: "=",
 *         values: ["<list_of_profiles_to_return>"],
 *     },
 * });
 * export const id = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].id;
 * export const name = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].name;
 * export const type = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].type;
 * export const visibility = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].visibility;
 * export const orgName = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].account[0].organization_name;
 * export const accessPointTypeConfigsType = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].type;
 * export const allowRemoteConnections = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].allow_remote_connections;
 * export const supportedBandwidth0 = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].supported_bandwidths[0];
 * export const supportedBandwidth1 = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].supported_bandwidths[1];
 * export const redundandyRequired = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].connection_redundancy_required;
 * export const allowOverSubscription = data.equinix_fabric_service_profile.service_profiles_data_name.data[0].access_point_type_configs[0].api_config[0].allow_over_subscription;
 * ```
 */
export function getServiceProfilesOutput(args?: GetServiceProfilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceProfilesResult> {
    return pulumi.output(args).apply((a: any) => getServiceProfiles(a, opts))
}

/**
 * A collection of arguments for invoking getServiceProfiles.
 */
export interface GetServiceProfilesOutputArgs {
    /**
     * Service Profile Search Filter
     */
    filter?: pulumi.Input<inputs.fabric.GetServiceProfilesFilterArgs>;
    /**
     * Service Profile Sort criteria for Search Request response payload
     */
    sort?: pulumi.Input<pulumi.Input<inputs.fabric.GetServiceProfilesSortArgs>[]>;
    /**
     * flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
     */
    viewPoint?: pulumi.Input<string>;
}
