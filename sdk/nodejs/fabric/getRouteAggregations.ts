// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const raPolicy = equinix.fabric.getRouteAggregations({
 *     filter: {
 *         property: "/project/projectId",
 *         operator: "=",
 *         values: ["<route_aggregation_project_id>"],
 *     },
 *     pagination: {
 *         limit: 2,
 *         offset: 1,
 *     },
 * });
 * export const firstRouteAggregationName = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.name);
 * export const firstRouteAggregationDescription = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.description);
 * export const firstRouteAggregationConnectionsCount = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.connectionsCount);
 * export const firstRouteAggregationRulesCount = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.rulesCount);
 * ```
 */
export function getRouteAggregations(args: GetRouteAggregationsArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteAggregationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getRouteAggregations:getRouteAggregations", {
        "filter": args.filter,
        "pagination": args.pagination,
        "sort": args.sort,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouteAggregations.
 */
export interface GetRouteAggregationsArgs {
    /**
     * Filters for the Data Source Search Request
     */
    filter: inputs.fabric.GetRouteAggregationsFilter;
    /**
     * Pagination details for the returned route aggregations list
     */
    pagination?: inputs.fabric.GetRouteAggregationsPagination;
    /**
     * Filters for the Data Source Search Request
     */
    sort?: inputs.fabric.GetRouteAggregationsSort;
}

/**
 * A collection of values returned by getRouteAggregations.
 */
export interface GetRouteAggregationsResult {
    /**
     * Returned list of route aggregation objects
     */
    readonly datas: outputs.fabric.GetRouteAggregationsData[];
    /**
     * Filters for the Data Source Search Request
     */
    readonly filter: outputs.fabric.GetRouteAggregationsFilter;
    /**
     * The unique identifier of the resource
     */
    readonly id: string;
    /**
     * Pagination details for the returned route aggregations list
     */
    readonly pagination?: outputs.fabric.GetRouteAggregationsPagination;
    /**
     * Filters for the Data Source Search Request
     */
    readonly sort?: outputs.fabric.GetRouteAggregationsSort;
}
/**
 * Fabric V4 API compatible data resource that allow user to fetch Equinix Fabric Route Aggregations with pagination details
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Streams
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const raPolicy = equinix.fabric.getRouteAggregations({
 *     filter: {
 *         property: "/project/projectId",
 *         operator: "=",
 *         values: ["<route_aggregation_project_id>"],
 *     },
 *     pagination: {
 *         limit: 2,
 *         offset: 1,
 *     },
 * });
 * export const firstRouteAggregationName = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.name);
 * export const firstRouteAggregationDescription = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.description);
 * export const firstRouteAggregationConnectionsCount = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.connectionsCount);
 * export const firstRouteAggregationRulesCount = raPolicy.then(raPolicy => raPolicy.datas?.[0]?.rulesCount);
 * ```
 */
export function getRouteAggregationsOutput(args: GetRouteAggregationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRouteAggregationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:fabric/getRouteAggregations:getRouteAggregations", {
        "filter": args.filter,
        "pagination": args.pagination,
        "sort": args.sort,
    }, opts);
}

/**
 * A collection of arguments for invoking getRouteAggregations.
 */
export interface GetRouteAggregationsOutputArgs {
    /**
     * Filters for the Data Source Search Request
     */
    filter: pulumi.Input<inputs.fabric.GetRouteAggregationsFilterArgs>;
    /**
     * Pagination details for the returned route aggregations list
     */
    pagination?: pulumi.Input<inputs.fabric.GetRouteAggregationsPaginationArgs>;
    /**
     * Filters for the Data Source Search Request
     */
    sort?: pulumi.Input<inputs.fabric.GetRouteAggregationsSortArgs>;
}
