// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Alert Rules with pagination
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const dataStreamAlertRules = equinix.fabric.getStreamAlertRules({
 *     streamId: "<uuid_of_stream>",
 *     pagination: {
 *         limit: 5,
 *         offset: 1,
 *     },
 * });
 * export const streamAlertRulesType = alertRules.data[0].type;
 * export const streamAlertRulesId = alertRules.data[0].uuid;
 * export const streamAlertRulesState = alertRules.data[0].state;
 * export const streamAlertRulesStreamId = alertRules.data[0].streamId;
 * ```
 */
export function getStreamAlertRules(args: GetStreamAlertRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamAlertRulesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getStreamAlertRules:getStreamAlertRules", {
        "pagination": args.pagination,
        "streamId": args.streamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamAlertRules.
 */
export interface GetStreamAlertRulesArgs {
    /**
     * Pagination details for the returned stream alert rules list
     */
    pagination: inputs.fabric.GetStreamAlertRulesPagination;
    /**
     * The uuid of the stream that is the target of the stream alert rule
     */
    streamId: string;
}

/**
 * A collection of values returned by getStreamAlertRules.
 */
export interface GetStreamAlertRulesResult {
    /**
     * Returned list of stream objects
     */
    readonly datas: outputs.fabric.GetStreamAlertRulesData[];
    /**
     * The unique identifier of the resource
     */
    readonly id: string;
    /**
     * Pagination details for the returned stream alert rules list
     */
    readonly pagination: outputs.fabric.GetStreamAlertRulesPagination;
    /**
     * The uuid of the stream that is the target of the stream alert rule
     */
    readonly streamId: string;
}
/**
 * Fabric V4 API compatible data source that allows user to fetch Equinix Fabric Stream Alert Rules with pagination
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const dataStreamAlertRules = equinix.fabric.getStreamAlertRules({
 *     streamId: "<uuid_of_stream>",
 *     pagination: {
 *         limit: 5,
 *         offset: 1,
 *     },
 * });
 * export const streamAlertRulesType = alertRules.data[0].type;
 * export const streamAlertRulesId = alertRules.data[0].uuid;
 * export const streamAlertRulesState = alertRules.data[0].state;
 * export const streamAlertRulesStreamId = alertRules.data[0].streamId;
 * ```
 */
export function getStreamAlertRulesOutput(args: GetStreamAlertRulesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamAlertRulesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:fabric/getStreamAlertRules:getStreamAlertRules", {
        "pagination": args.pagination,
        "streamId": args.streamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamAlertRules.
 */
export interface GetStreamAlertRulesOutputArgs {
    /**
     * Pagination details for the returned stream alert rules list
     */
    pagination: pulumi.Input<inputs.fabric.GetStreamAlertRulesPaginationArgs>;
    /**
     * The uuid of the stream that is the target of the stream alert rule
     */
    streamId: pulumi.Input<string>;
}
