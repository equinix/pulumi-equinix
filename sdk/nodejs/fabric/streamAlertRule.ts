// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Stream Alert Rules'
 * }
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/KnowledgeCenter/Fabric/GettingStarted/Integrating-with-Fabric-V4-APIs/IntegrateWithSink.htm
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Stream-Alert-Rules
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const newStreamAlertRule = new equinix.fabric.StreamAlertRule("new_stream_alert_rule", {
 *     streamId: "<stream_id>",
 *     name: "<name>",
 *     type: "METRIC_ALERT",
 *     description: "<description>",
 *     enabled: true,
 *     operand: "ABOVE",
 *     windowSize: "<window_size>",
 *     warningThreshold: "<warning_threshold>",
 *     criticalThreshold: "<critical_threshold>",
 *     metricName: "equinix.fabric.connection.bandwidth_tx.usage",
 *     resourceSelector: {
 *         includes: ["*&#47;connections/<connection_id>"],
 *     },
 * });
 * export const streamAlertRuleType = newStreamAlertRule.type;
 * export const streamAlertRuleId = newStreamAlertRule.uuid;
 * export const streamAlertRuleStreamId = newStreamAlertRule.streamId;
 * export const streamAlertRuleState = newStreamAlertRule.state;
 * ```
 */
export class StreamAlertRule extends pulumi.CustomResource {
    /**
     * Get an existing StreamAlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamAlertRuleState, opts?: pulumi.CustomResourceOptions): StreamAlertRule {
        return new StreamAlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/streamAlertRule:StreamAlertRule';

    /**
     * Returns true if the given object is an instance of StreamAlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamAlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamAlertRule.__pulumiType;
    }

    /**
     * Details of the last change on the stream resource
     */
    declare public /*out*/ readonly changeLog: pulumi.Output<outputs.fabric.StreamAlertRuleChangeLog>;
    /**
     * Stream alert rule metric critical threshold
     */
    declare public readonly criticalThreshold: pulumi.Output<string>;
    /**
     * Customer-provided stream alert rule description
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Stream alert rule enabled status
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Equinix assigned URI of the stream alert rule
     */
    declare public /*out*/ readonly href: pulumi.Output<string>;
    /**
     * Stream alert rule metric name
     */
    declare public readonly metricName: pulumi.Output<string>;
    /**
     * Customer-provided stream alert rule name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Stream alert rule metric operand
     */
    declare public readonly operand: pulumi.Output<string>;
    /**
     * Resource selector for the stream alert rule
     */
    declare public readonly resourceSelector: pulumi.Output<outputs.fabric.StreamAlertRuleResourceSelector>;
    /**
     * Value representing provisioning status for the stream alert rule
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The stream UUID that contains this alert rule
     */
    declare public readonly streamId: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.fabric.StreamAlertRuleTimeouts | undefined>;
    /**
     * Type of the stream alert rule
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Equinix assigned unique identifier for the stream alert rule
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;
    /**
     * Stream alert rule metric warning threshold
     */
    declare public readonly warningThreshold: pulumi.Output<string>;
    /**
     * Stream alert rule metric window size
     */
    declare public readonly windowSize: pulumi.Output<string>;

    /**
     * Create a StreamAlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamAlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamAlertRuleArgs | StreamAlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamAlertRuleState | undefined;
            resourceInputs["changeLog"] = state?.changeLog;
            resourceInputs["criticalThreshold"] = state?.criticalThreshold;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["href"] = state?.href;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["name"] = state?.name;
            resourceInputs["operand"] = state?.operand;
            resourceInputs["resourceSelector"] = state?.resourceSelector;
            resourceInputs["state"] = state?.state;
            resourceInputs["streamId"] = state?.streamId;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["uuid"] = state?.uuid;
            resourceInputs["warningThreshold"] = state?.warningThreshold;
            resourceInputs["windowSize"] = state?.windowSize;
        } else {
            const args = argsOrState as StreamAlertRuleArgs | undefined;
            if (args?.criticalThreshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'criticalThreshold'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.metricName === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if (args?.operand === undefined && !opts.urn) {
                throw new Error("Missing required property 'operand'");
            }
            if (args?.streamId === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.warningThreshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'warningThreshold'");
            }
            if (args?.windowSize === undefined && !opts.urn) {
                throw new Error("Missing required property 'windowSize'");
            }
            resourceInputs["criticalThreshold"] = args?.criticalThreshold;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["name"] = args?.name;
            resourceInputs["operand"] = args?.operand;
            resourceInputs["resourceSelector"] = args?.resourceSelector;
            resourceInputs["streamId"] = args?.streamId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["warningThreshold"] = args?.warningThreshold;
            resourceInputs["windowSize"] = args?.windowSize;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamAlertRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamAlertRule resources.
 */
export interface StreamAlertRuleState {
    /**
     * Details of the last change on the stream resource
     */
    changeLog?: pulumi.Input<inputs.fabric.StreamAlertRuleChangeLog>;
    /**
     * Stream alert rule metric critical threshold
     */
    criticalThreshold?: pulumi.Input<string>;
    /**
     * Customer-provided stream alert rule description
     */
    description?: pulumi.Input<string>;
    /**
     * Stream alert rule enabled status
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Equinix assigned URI of the stream alert rule
     */
    href?: pulumi.Input<string>;
    /**
     * Stream alert rule metric name
     */
    metricName?: pulumi.Input<string>;
    /**
     * Customer-provided stream alert rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Stream alert rule metric operand
     */
    operand?: pulumi.Input<string>;
    /**
     * Resource selector for the stream alert rule
     */
    resourceSelector?: pulumi.Input<inputs.fabric.StreamAlertRuleResourceSelector>;
    /**
     * Value representing provisioning status for the stream alert rule
     */
    state?: pulumi.Input<string>;
    /**
     * The stream UUID that contains this alert rule
     */
    streamId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.fabric.StreamAlertRuleTimeouts>;
    /**
     * Type of the stream alert rule
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix assigned unique identifier for the stream alert rule
     */
    uuid?: pulumi.Input<string>;
    /**
     * Stream alert rule metric warning threshold
     */
    warningThreshold?: pulumi.Input<string>;
    /**
     * Stream alert rule metric window size
     */
    windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamAlertRule resource.
 */
export interface StreamAlertRuleArgs {
    /**
     * Stream alert rule metric critical threshold
     */
    criticalThreshold: pulumi.Input<string>;
    /**
     * Customer-provided stream alert rule description
     */
    description: pulumi.Input<string>;
    /**
     * Stream alert rule enabled status
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Stream alert rule metric name
     */
    metricName: pulumi.Input<string>;
    /**
     * Customer-provided stream alert rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Stream alert rule metric operand
     */
    operand: pulumi.Input<string>;
    /**
     * Resource selector for the stream alert rule
     */
    resourceSelector?: pulumi.Input<inputs.fabric.StreamAlertRuleResourceSelector>;
    /**
     * The stream UUID that contains this alert rule
     */
    streamId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.fabric.StreamAlertRuleTimeouts>;
    /**
     * Type of the stream alert rule
     */
    type: pulumi.Input<string>;
    /**
     * Stream alert rule metric warning threshold
     */
    warningThreshold: pulumi.Input<string>;
    /**
     * Stream alert rule metric window size
     */
    windowSize: pulumi.Input<string>;
}
