// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible resource allows creation and management of Equinix Fabric Route Aggregation
 *
 * Additional Documentation:
 * * API: https://developer.equinix.com/catalog/fabricv4#tag/Route-Aggregations
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const new_ra = new equinix.fabric.RouteAggregation("new-ra", {
 *     type: "BGP_IPv4_PREFIX_AGGREGATION",
 *     name: "new-ra",
 *     description: "Test aggregation",
 *     project: {
 *         projectId: "776847000642406",
 *     },
 * });
 * ```
 */
export class RouteAggregation extends pulumi.CustomResource {
    /**
     * Get an existing RouteAggregation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteAggregationState, opts?: pulumi.CustomResourceOptions): RouteAggregation {
        return new RouteAggregation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:fabric/routeAggregation:RouteAggregation';

    /**
     * Returns true if the given object is an instance of RouteAggregation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteAggregation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteAggregation.__pulumiType;
    }

    /**
     * Current state of latest Route Aggregation change
     */
    declare public /*out*/ readonly change: pulumi.Output<outputs.fabric.RouteAggregationChange>;
    /**
     * Details of the last change on the route aggregation resource
     */
    declare public /*out*/ readonly changeLog: pulumi.Output<outputs.fabric.RouteAggregationChangeLog>;
    /**
     * Number of Connections attached to route aggregation
     */
    declare public /*out*/ readonly connectionsCount: pulumi.Output<number>;
    /**
     * Customer-provided route aggregation description
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Equinix auto generated URI to the route aggregation resource
     */
    declare public /*out*/ readonly href: pulumi.Output<string>;
    /**
     * Customer provided name of the route aggregation
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Equinix Project attribute object
     */
    declare public readonly project: pulumi.Output<outputs.fabric.RouteAggregationProject>;
    /**
     * Number of Rules attached to route aggregation
     */
    declare public /*out*/ readonly rulesCount: pulumi.Output<number>;
    /**
     * Value representing provisioning status for the route aggregation resource
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.fabric.RouteAggregationTimeouts | undefined>;
    /**
     * Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Equinix-assigned unique id for the route aggregation resource
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a RouteAggregation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteAggregationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteAggregationArgs | RouteAggregationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteAggregationState | undefined;
            resourceInputs["change"] = state?.change;
            resourceInputs["changeLog"] = state?.changeLog;
            resourceInputs["connectionsCount"] = state?.connectionsCount;
            resourceInputs["description"] = state?.description;
            resourceInputs["href"] = state?.href;
            resourceInputs["name"] = state?.name;
            resourceInputs["project"] = state?.project;
            resourceInputs["rulesCount"] = state?.rulesCount;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as RouteAggregationArgs | undefined;
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["project"] = args?.project;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["change"] = undefined /*out*/;
            resourceInputs["changeLog"] = undefined /*out*/;
            resourceInputs["connectionsCount"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["rulesCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteAggregation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteAggregation resources.
 */
export interface RouteAggregationState {
    /**
     * Current state of latest Route Aggregation change
     */
    change?: pulumi.Input<inputs.fabric.RouteAggregationChange>;
    /**
     * Details of the last change on the route aggregation resource
     */
    changeLog?: pulumi.Input<inputs.fabric.RouteAggregationChangeLog>;
    /**
     * Number of Connections attached to route aggregation
     */
    connectionsCount?: pulumi.Input<number>;
    /**
     * Customer-provided route aggregation description
     */
    description?: pulumi.Input<string>;
    /**
     * Equinix auto generated URI to the route aggregation resource
     */
    href?: pulumi.Input<string>;
    /**
     * Customer provided name of the route aggregation
     */
    name?: pulumi.Input<string>;
    /**
     * Equinix Project attribute object
     */
    project?: pulumi.Input<inputs.fabric.RouteAggregationProject>;
    /**
     * Number of Rules attached to route aggregation
     */
    rulesCount?: pulumi.Input<number>;
    /**
     * Value representing provisioning status for the route aggregation resource
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.fabric.RouteAggregationTimeouts>;
    /**
     * Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned unique id for the route aggregation resource
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteAggregation resource.
 */
export interface RouteAggregationArgs {
    /**
     * Customer-provided route aggregation description
     */
    description?: pulumi.Input<string>;
    /**
     * Customer provided name of the route aggregation
     */
    name?: pulumi.Input<string>;
    /**
     * Equinix Project attribute object
     */
    project: pulumi.Input<inputs.fabric.RouteAggregationProject>;
    timeouts?: pulumi.Input<inputs.fabric.RouteAggregationTimeouts>;
    /**
     * Equinix defined Route Aggregation Type; BGP*IPv4*PREFIX*AGGREGATION, BGP*IPv6*PREFIX*AGGREGATION
     */
    type: pulumi.Input<string>;
}
