// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
 * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const attachedPolicy = equinix.fabric.getConnectionRouteFilter({
 *     connectionId: "<connection_uuid>",
 *     routeFilterId: "<route_filter_uuid>",
 * });
 * export const connectionRouteFilterId = attachedPolicy.then(attachedPolicy => attachedPolicy.id);
 * export const connectionRouteFilterConnectionId = attachedPolicy.then(attachedPolicy => attachedPolicy.connectionId);
 * export const connectionRouteFilterDirection = attachedPolicy.then(attachedPolicy => attachedPolicy.direction);
 * export const connectionRouteFilterType = attachedPolicy.then(attachedPolicy => attachedPolicy.type);
 * export const connectionRouteFilterAttachmentStatus = attachedPolicy.then(attachedPolicy => attachedPolicy.attachmentStatus);
 * ```
 */
export function getConnectionRouteFilter(args: GetConnectionRouteFilterArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionRouteFilterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", {
        "connectionId": args.connectionId,
        "routeFilterId": args.routeFilterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectionRouteFilter.
 */
export interface GetConnectionRouteFilterArgs {
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    connectionId: string;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    routeFilterId: string;
}

/**
 * A collection of values returned by getConnectionRouteFilter.
 */
export interface GetConnectionRouteFilterResult {
    /**
     * Status of the Route Filter Policy attachment lifecycle
     */
    readonly attachmentStatus: string;
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    readonly connectionId: string;
    /**
     * Direction of the filtering of the attached Route Filter Policy
     */
    readonly direction: string;
    /**
     * URI to the attached Route Filter Policy on the Connection
     */
    readonly href: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    readonly routeFilterId: string;
    /**
     * Route Filter Type. One of [ "BGP*IPv4*PREFIX*FILTER", "BGP*IPv6*PREFIX*FILTER" ]
     */
    readonly type: string;
    /**
     * Equinix Assigned ID for Route Filter Policy
     */
    readonly uuid: string;
}
/**
 * Fabric V4 API compatible data resource that allow user to fetch route filter policy attachment to a fabric connection
 *
 * Additional Documentation:
 * * Getting Started: https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-route-filters.htm
 * * API: https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#route-filter-rules
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 *
 * const attachedPolicy = equinix.fabric.getConnectionRouteFilter({
 *     connectionId: "<connection_uuid>",
 *     routeFilterId: "<route_filter_uuid>",
 * });
 * export const connectionRouteFilterId = attachedPolicy.then(attachedPolicy => attachedPolicy.id);
 * export const connectionRouteFilterConnectionId = attachedPolicy.then(attachedPolicy => attachedPolicy.connectionId);
 * export const connectionRouteFilterDirection = attachedPolicy.then(attachedPolicy => attachedPolicy.direction);
 * export const connectionRouteFilterType = attachedPolicy.then(attachedPolicy => attachedPolicy.type);
 * export const connectionRouteFilterAttachmentStatus = attachedPolicy.then(attachedPolicy => attachedPolicy.attachmentStatus);
 * ```
 */
export function getConnectionRouteFilterOutput(args: GetConnectionRouteFilterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionRouteFilterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:fabric/getConnectionRouteFilter:getConnectionRouteFilter", {
        "connectionId": args.connectionId,
        "routeFilterId": args.routeFilterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnectionRouteFilter.
 */
export interface GetConnectionRouteFilterOutputArgs {
    /**
     * Equinix Assigned UUID of the Equinix Connection to attach the Route Filter Policy to
     */
    connectionId: pulumi.Input<string>;
    /**
     * Equinix Assigned UUID of the Route Filter Policy to attach to the Equinix Connection
     */
    routeFilterId: pulumi.Input<string>;
}
