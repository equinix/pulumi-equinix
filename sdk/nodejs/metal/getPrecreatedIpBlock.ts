// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal. You can then use the cidrsubnet TF builtin function to derive subnets.
 *
 * > For backward compatibility, this data source will also return reserved (elastic) IP blocks.
 *
 * > Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
 *
 * > Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 * import * as std from "@pulumi/std";
 *
 * const projectId = "<UUID_of_your_project>";
 * const web1 = new equinix.metal.Device("web1", {
 *     hostname: "web1",
 *     plan: equinix.metal.Plan.C3SmallX86,
 *     metro: "sv",
 *     operatingSystem: "ubuntu_24_04",
 *     billingCycle: equinix.metal.BillingCycle.Hourly,
 *     projectId: projectId,
 * });
 * const test = equinix.metal.getPrecreatedIpBlock({
 *     metro: "sv",
 *     projectId: projectId,
 *     addressFamily: 6,
 *     "public": true,
 * });
 * // The precreated IPv6 blocks are /56, so to get /64, we specify 8 more bits for network.
 * // The cirdsubnet interpolation will pick second /64 subnet from the precreated block.
 * const fromIpv6Block = new equinix.metal.IpAttachment("from_ipv6_block", {
 *     deviceId: web1.id,
 *     cidrNotation: test.then(test => std.cidrsubnet({
 *         input: test.cidrNotation,
 *         newbits: 8,
 *         netnum: 2,
 *     })).then(invoke => invoke.result),
 * });
 * ```
 */
export function getPrecreatedIpBlock(args: GetPrecreatedIpBlockArgs, opts?: pulumi.InvokeOptions): Promise<GetPrecreatedIpBlockResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock", {
        "addressFamily": args.addressFamily,
        "facility": args.facility,
        "global": args.global,
        "metro": args.metro,
        "projectId": args.projectId,
        "public": args.public,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrecreatedIpBlock.
 */
export interface GetPrecreatedIpBlockArgs {
    /**
     * 4 or 6, depending on which block you are looking for.
     */
    addressFamily: number;
    /**
     * Facility of the searched block. (for non-global blocks). Use metro instead; read the facility to metro migration guide
     */
    facility?: string;
    /**
     * Whether to look for global block. Default is false for backward compatibility.
     */
    global?: boolean;
    /**
     * Metro of the searched block (for non-global blocks).
     */
    metro?: string;
    /**
     * ID of the project where the searched block should be.
     */
    projectId: string;
    /**
     * Whether to look for public or private block.
     */
    public: boolean;
}

/**
 * A collection of values returned by getPrecreatedIpBlock.
 */
export interface GetPrecreatedIpBlockResult {
    readonly address: string;
    readonly addressFamily: number;
    readonly cidr: number;
    /**
     * CIDR notation of the looked up block.
     */
    readonly cidrNotation: string;
    readonly facility?: string;
    readonly gateway: string;
    readonly global?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly manageable: boolean;
    readonly management: boolean;
    readonly metro?: string;
    readonly netmask: string;
    readonly network: string;
    readonly projectId: string;
    readonly public: boolean;
    readonly quantity: number;
    readonly type: string;
    readonly vrfId: string;
}
/**
 * Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal. You can then use the cidrsubnet TF builtin function to derive subnets.
 *
 * > For backward compatibility, this data source will also return reserved (elastic) IP blocks.
 *
 * > Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.
 *
 * > Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@equinix-labs/pulumi-equinix";
 * import * as std from "@pulumi/std";
 *
 * const projectId = "<UUID_of_your_project>";
 * const web1 = new equinix.metal.Device("web1", {
 *     hostname: "web1",
 *     plan: equinix.metal.Plan.C3SmallX86,
 *     metro: "sv",
 *     operatingSystem: "ubuntu_24_04",
 *     billingCycle: equinix.metal.BillingCycle.Hourly,
 *     projectId: projectId,
 * });
 * const test = equinix.metal.getPrecreatedIpBlock({
 *     metro: "sv",
 *     projectId: projectId,
 *     addressFamily: 6,
 *     "public": true,
 * });
 * // The precreated IPv6 blocks are /56, so to get /64, we specify 8 more bits for network.
 * // The cirdsubnet interpolation will pick second /64 subnet from the precreated block.
 * const fromIpv6Block = new equinix.metal.IpAttachment("from_ipv6_block", {
 *     deviceId: web1.id,
 *     cidrNotation: test.then(test => std.cidrsubnet({
 *         input: test.cidrNotation,
 *         newbits: 8,
 *         netnum: 2,
 *     })).then(invoke => invoke.result),
 * });
 * ```
 */
export function getPrecreatedIpBlockOutput(args: GetPrecreatedIpBlockOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPrecreatedIpBlockResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock", {
        "addressFamily": args.addressFamily,
        "facility": args.facility,
        "global": args.global,
        "metro": args.metro,
        "projectId": args.projectId,
        "public": args.public,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrecreatedIpBlock.
 */
export interface GetPrecreatedIpBlockOutputArgs {
    /**
     * 4 or 6, depending on which block you are looking for.
     */
    addressFamily: pulumi.Input<number>;
    /**
     * Facility of the searched block. (for non-global blocks). Use metro instead; read the facility to metro migration guide
     */
    facility?: pulumi.Input<string>;
    /**
     * Whether to look for global block. Default is false for backward compatibility.
     */
    global?: pulumi.Input<boolean>;
    /**
     * Metro of the searched block (for non-global blocks).
     */
    metro?: pulumi.Input<string>;
    /**
     * ID of the project where the searched block should be.
     */
    projectId: pulumi.Input<string>;
    /**
     * Whether to look for public or private block.
     */
    public: pulumi.Input<boolean>;
}
