// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an Equinix Metal metro datasource.
 */
export function getMetro(args: GetMetroArgs, opts?: pulumi.InvokeOptions): Promise<GetMetroResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("equinix:metal/getMetro:getMetro", {
        "capacities": args.capacities,
        "code": args.code,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetro.
 */
export interface GetMetroArgs {
    /**
     * One or more device plans for which the facility must have capacity.
     */
    capacities?: inputs.metal.GetMetroCapacity[];
    /**
     * The facility code to search for facilities.
     */
    code: string;
}

/**
 * A collection of values returned by getMetro.
 */
export interface GetMetroResult {
    readonly capacities?: outputs.metal.GetMetroCapacity[];
    readonly code: string;
    /**
     * The country of the metro.
     */
    readonly country: string;
    /**
     * The ID of the metro.
     */
    readonly id: string;
    /**
     * The name of the metro.
     */
    readonly name: string;
}

export function getMetroOutput(args: GetMetroOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetroResult> {
    return pulumi.output(args).apply(a => getMetro(a, opts))
}

/**
 * A collection of arguments for invoking getMetro.
 */
export interface GetMetroOutputArgs {
    /**
     * One or more device plans for which the facility must have capacity.
     */
    capacities?: pulumi.Input<pulumi.Input<inputs.metal.GetMetroCapacityArgs>[]>;
    /**
     * The facility code to search for facilities.
     */
    code: pulumi.Input<string>;
}
