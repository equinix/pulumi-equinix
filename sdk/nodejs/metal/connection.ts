// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:metal/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Description for the connection resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Facility where the connection will be created.
     */
    public readonly facility!: pulumi.Output<string>;
    /**
     * Metro where the connection will be created.
     */
    public readonly metro!: pulumi.Output<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Name of the connection resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the organization where the connection is scoped to.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of
     * port is described in documentation of the
     * equinix.metal.Connection datasource.
     */
    public /*out*/ readonly ports!: pulumi.Output<outputs.metal.ConnectionPort[]>;
    /**
     * ID of the project where the connection is scoped to, must be set for.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Connection redundancy - redundant or primary.
     */
    public readonly redundancy!: pulumi.Output<string>;
    /**
     * Only used with shared connection. Type of service token to use for the connection, a_side or z_side
     */
    public readonly serviceTokenType!: pulumi.Output<string | undefined>;
    /**
     * List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of serviceToken is described in documentation of the equinix.metal.Connection datasource.
     */
    public /*out*/ readonly serviceTokens!: pulumi.Output<outputs.metal.ConnectionServiceToken[]>;
    /**
     * Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
     */
    public readonly speed!: pulumi.Output<string>;
    /**
     * Status of the connection resource.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * String list of tags.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
     *
     * @deprecated If your organization already has connection service tokens enabled, use `service_tokens` instead
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Connection type - dedicated or shared.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
     */
    public readonly vlans!: pulumi.Output<number[] | undefined>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["facility"] = state ? state.facility : undefined;
            resourceInputs["metro"] = state ? state.metro : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["serviceTokenType"] = state ? state.serviceTokenType : undefined;
            resourceInputs["serviceTokens"] = state ? state.serviceTokens : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.redundancy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redundancy'");
            }
            if ((!args || args.speed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'speed'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["facility"] = args ? args.facility : undefined;
            resourceInputs["metro"] = args ? args.metro : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["serviceTokenType"] = args ? args.serviceTokenType : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["ports"] = undefined /*out*/;
            resourceInputs["serviceTokens"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Description for the connection resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Facility where the connection will be created.
     */
    facility?: pulumi.Input<string>;
    /**
     * Metro where the connection will be created.
     */
    metro?: pulumi.Input<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the connection resource
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization where the connection is scoped to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of
     * port is described in documentation of the
     * equinix.metal.Connection datasource.
     */
    ports?: pulumi.Input<pulumi.Input<inputs.metal.ConnectionPort>[]>;
    /**
     * ID of the project where the connection is scoped to, must be set for.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Connection redundancy - redundant or primary.
     */
    redundancy?: pulumi.Input<string>;
    /**
     * Only used with shared connection. Type of service token to use for the connection, a_side or z_side
     */
    serviceTokenType?: pulumi.Input<string>;
    /**
     * List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of serviceToken is described in documentation of the equinix.metal.Connection datasource.
     */
    serviceTokens?: pulumi.Input<pulumi.Input<inputs.metal.ConnectionServiceToken>[]>;
    /**
     * Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
     */
    speed?: pulumi.Input<string>;
    /**
     * Status of the connection resource.
     */
    status?: pulumi.Input<string>;
    /**
     * String list of tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinixEcxL2Connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `serviceTokens` instead.
     *
     * @deprecated If your organization already has connection service tokens enabled, use `service_tokens` instead
     */
    token?: pulumi.Input<string>;
    /**
     * Connection type - dedicated or shared.
     */
    type?: pulumi.Input<string>;
    /**
     * Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
     */
    vlans?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Description for the connection resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Facility where the connection will be created.
     */
    facility?: pulumi.Input<string>;
    /**
     * Metro where the connection will be created.
     */
    metro?: pulumi.Input<string>;
    /**
     * Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the connection resource
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization where the connection is scoped to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * ID of the project where the connection is scoped to, must be set for.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Connection redundancy - redundant or primary.
     */
    redundancy: pulumi.Input<string>;
    /**
     * Only used with shared connection. Type of service token to use for the connection, a_side or z_side
     */
    serviceTokenType?: pulumi.Input<string>;
    /**
     * Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
     */
    speed: pulumi.Input<string>;
    /**
     * String list of tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection type - dedicated or shared.
     */
    type: pulumi.Input<string>;
    /**
     * Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
     */
    vlans?: pulumi.Input<pulumi.Input<number>[]>;
}
