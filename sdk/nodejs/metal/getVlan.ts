// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be
 * searched by VLAN UUID, or project UUID and vxlan number.
 *
 * ## Example Usage
 *
 * Fetch a vlan by ID:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const foovlan = new equinix.metal.Vlan("foovlan", {
 *     projectId: local.project_id,
 *     metro: "sv",
 *     vxlan: 5,
 * });
 * const dsvlan = equinix.metal.getVlanOutput({
 *     vlanId: foovlan.id,
 * });
 * ```
 *
 * Fetch a vlan by project ID, vxlan and metro
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 *
 * const dsvlan = equinix.metal.getVlan({
 *     projectId: local.project_id,
 *     vxlan: 5,
 *     metro: "sv",
 * });
 * ```
 */
export function getVlan(args?: GetVlanArgs, opts?: pulumi.InvokeOptions): Promise<GetVlanResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("equinix:metal/getVlan:getVlan", {
        "facility": args.facility,
        "metro": args.metro,
        "projectId": args.projectId,
        "vlanId": args.vlanId,
        "vxlan": args.vxlan,
    }, opts);
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanArgs {
    /**
     * Facility where the VLAN is deployed.
     */
    facility?: string;
    /**
     * Metro where the VLAN is deployed.
     */
    metro?: string;
    /**
     * UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.
     */
    projectId?: string;
    /**
     * Metal UUID of the VLAN resource to look up.
     */
    vlanId?: string;
    /**
     * vxlan number of the VLAN to look up. Use together with the projectId and metro or facility.
     */
    vxlan?: number;
}

/**
 * A collection of values returned by getVlan.
 */
export interface GetVlanResult {
    /**
     * List of device ID to which this VLAN is assigned.
     */
    readonly assignedDevicesIds: string[];
    /**
     * Description text of the VLAN resource.
     */
    readonly description: string;
    readonly facility: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly metro: string;
    readonly projectId: string;
    readonly vlanId: string;
    readonly vxlan: number;
}

export function getVlanOutput(args?: GetVlanOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVlanResult> {
    return pulumi.output(args).apply(a => getVlan(a, opts))
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanOutputArgs {
    /**
     * Facility where the VLAN is deployed.
     */
    facility?: pulumi.Input<string>;
    /**
     * Metro where the VLAN is deployed.
     */
    metro?: pulumi.Input<string>;
    /**
     * UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Metal UUID of the VLAN resource to look up.
     */
    vlanId?: pulumi.Input<string>;
    /**
     * vxlan number of the VLAN to look up. Use together with the projectId and metro or facility.
     */
    vxlan?: pulumi.Input<number>;
}
