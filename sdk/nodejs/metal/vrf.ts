// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to manage a VRF.
 *
 * > VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.
 *
 * ## Example Usage
 *
 * Create a VRF in your desired metro and project with any IP ranges that you want the VRF to route and forward.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi_equinix from "@equinix/pulumi-equinix";
 *
 * const exampleProject = new equinix.metal.Project("exampleProject", {});
 * const exampleVrf = new equinix.metal.Vrf("exampleVrf", {
 *     description: "VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25",
 *     metro: "da",
 *     localAsn: 65000,
 *     ipRanges: [
 *         "192.168.100.0/25",
 *         "192.168.200.0/25",
 *     ],
 *     projectId: exampleProject.id,
 * });
 * ```
 *
 * Create IP reservations and assign them to a Metal Gateway resources. The Gateway will be assigned the first address in the block.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi_equinix from "@equinix/pulumi-equinix";
 *
 * const exampleReservedIpBlock = new equinix.metal.ReservedIpBlock("exampleReservedIpBlock", {
 *     description: "Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.",
 *     projectId: equinix_metal_project.example.id,
 *     metro: equinix_metal_vrf.example.metro,
 *     type: "vrf",
 *     vrfId: equinix_metal_vrf.example.id,
 *     cidr: 29,
 *     network: "192.168.100.0",
 * });
 * const exampleVlan = new equinix.metal.Vlan("exampleVlan", {
 *     description: "A VLAN for Layer2 and Hybrid Metal devices",
 *     metro: equinix_metal_vrf.example.metro,
 *     projectId: equinix_metal_project.example.id,
 * });
 * const exampleGateway = new equinix.metal.Gateway("exampleGateway", {
 *     projectId: equinix_metal_project.example.id,
 *     vlanId: exampleVlan.id,
 *     ipReservationId: exampleReservedIpBlock.id,
 * });
 * ```
 *
 * Attach a Virtual Circuit from a Dedicated Metal Connection to the Metal Gateway.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as equinix from "@pulumi/equinix";
 * import * as pulumi_equinix from "@equinix/pulumi-equinix";
 *
 * const exampleConnection = equinix.metal.getConnection({
 *     connectionId: _var.metal_dedicated_connection_id,
 * });
 * const exampleVirtualCircuit = new equinix.metal.VirtualCircuit("exampleVirtualCircuit", {
 *     description: "Virtual Circuit",
 *     connectionId: exampleConnection.then(exampleConnection => exampleConnection.id),
 *     projectId: equinix_metal_project.example.id,
 *     portId: exampleConnection.then(exampleConnection => exampleConnection.ports?[0]?.id),
 *     nniVlan: 1024,
 *     vrfId: equinix_metal_vrf.example.id,
 *     peerAsn: 65530,
 *     subnet: "192.168.100.16/31",
 *     metalIp: "192.168.100.16",
 *     customerIp: "192.168.100.17",
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using an existing VRF ID
 *
 * ```sh
 *  $ pulumi import equinix:metal/vrf:Vrf equinix_metal_vrf {existing_id}
 * ```
 */
export class Vrf extends pulumi.CustomResource {
    /**
     * Get an existing Vrf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrfState, opts?: pulumi.CustomResourceOptions): Vrf {
        return new Vrf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:metal/vrf:Vrf';

    /**
     * Returns true if the given object is an instance of Vrf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vrf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vrf.__pulumiType;
    }

    /**
     * Description of the VRF.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    public readonly ipRanges!: pulumi.Output<string[] | undefined>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    public readonly localAsn!: pulumi.Output<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    public readonly metro!: pulumi.Output<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a Vrf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrfArgs | VrfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrfState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["localAsn"] = state ? state.localAsn : undefined;
            resourceInputs["metro"] = state ? state.metro : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as VrfArgs | undefined;
            if ((!args || args.metro === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metro'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["localAsn"] = args ? args.localAsn : undefined;
            resourceInputs["metro"] = args ? args.metro : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vrf.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vrf resources.
 */
export interface VrfState {
    /**
     * Description of the VRF.
     */
    description?: pulumi.Input<string>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    localAsn?: pulumi.Input<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    metro?: pulumi.Input<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vrf resource.
 */
export interface VrfArgs {
    /**
     * Description of the VRF.
     */
    description?: pulumi.Input<string>;
    /**
     * All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.
     */
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The 4-byte ASN set on the VRF.
     */
    localAsn?: pulumi.Input<number>;
    /**
     * Metro ID or Code where the VRF will be deployed.
     */
    metro: pulumi.Input<string>;
    /**
     * User-supplied name of the VRF, unique to the project
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID where the VRF will be deployed.
     */
    projectId: pulumi.Input<string>;
}
