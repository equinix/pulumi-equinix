// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace fabric {
    export interface ConnectionASide {
        /**
         * Point of access details
         */
        accessPoint?: pulumi.Input<inputs.fabric.ConnectionASideAccessPoint>;
        /**
         * Connection side additional information
         */
        additionalInfo?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionASideAdditionalInfo>[]>;
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: pulumi.Input<inputs.fabric.ConnectionASideServiceToken>;
    }

    export interface ConnectionASideAccessPoint {
        /**
         * Customer account information that is associated with this connection
         */
        account?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointAccount>;
        authenticationKey?: pulumi.Input<string>;
        gateway?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointGateway>;
        interface?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointInterface>;
        linkProtocol?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointLinkProtocol>;
        location?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointLocation>;
        peeringType?: pulumi.Input<string | enums.fabric.AccessPointPeeringType>;
        port?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointPort>;
        profile?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointProfile>;
        providerConnectionId?: pulumi.Input<string>;
        routingProtocols?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionASideAccessPointRoutingProtocol>[]>;
        sellerRegion?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.AccessPointType>;
        virtualDevice?: pulumi.Input<inputs.fabric.ConnectionASideAccessPointVirtualDevice>;
    }

    export interface ConnectionASideAccessPointAccount {
        accountName?: pulumi.Input<string>;
        accountNumber?: pulumi.Input<number>;
        globalCustId?: pulumi.Input<string>;
        globalOrgId?: pulumi.Input<string>;
        globalOrganizationName?: pulumi.Input<string>;
        orgId?: pulumi.Input<number>;
        organizationName?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointGateway {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointInterface {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointLinkProtocol {
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.AccessPointLinkProtocolType>;
        vlanCTag?: pulumi.Input<number>;
        vlanSTag?: pulumi.Input<number>;
        vlanTag?: pulumi.Input<number>;
    }

    export interface ConnectionASideAccessPointLocation {
        ibx?: pulumi.Input<string>;
        metroCode?: pulumi.Input<string | enums.Metro>;
        metroName?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointPort {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name?: pulumi.Input<string>;
        /**
         * Redundancy Information
         */
        redundancies?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionASideAccessPointPortRedundancy>[]>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointPortRedundancy {
        /**
         * Priority type- PRIMARY, SECONDARY
         */
        priority?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointProfile {
        accessPointTypeConfigs?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionASideAccessPointProfileAccessPointTypeConfig>[]>;
        description?: pulumi.Input<string>;
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type: pulumi.Input<string | enums.fabric.ProfileType>;
        uuid: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointProfileAccessPointTypeConfig {
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointRoutingProtocol {
        /**
         * Connection overall state
         */
        state?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAccessPointVirtualDevice {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionASideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: pulumi.Input<string>;
        /**
         * Additional information value
         */
        value?: pulumi.Input<string>;
    }

    export interface ConnectionASideServiceToken {
        description?: pulumi.Input<string>;
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.ServiceTokenType>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionAccount {
        accountName?: pulumi.Input<string>;
        accountNumber?: pulumi.Input<number>;
        globalCustId?: pulumi.Input<string>;
        globalOrgId?: pulumi.Input<string>;
        globalOrganizationName?: pulumi.Input<string>;
        orgId?: pulumi.Input<number>;
        organizationName?: pulumi.Input<string>;
    }

    export interface ConnectionAdditionalInfo {
        /**
         * Additional information key
         */
        key?: pulumi.Input<string>;
        /**
         * Additional information value
         */
        value?: pulumi.Input<string>;
    }

    export interface ConnectionChangeLog {
        createdBy?: pulumi.Input<string>;
        createdByEmail?: pulumi.Input<string>;
        createdByFullName?: pulumi.Input<string>;
        createdDateTime?: pulumi.Input<string>;
        deletedBy?: pulumi.Input<string>;
        deletedByEmail?: pulumi.Input<string>;
        deletedByFullName?: pulumi.Input<string>;
        deletedDateTime?: pulumi.Input<string>;
        updatedBy?: pulumi.Input<string>;
        updatedByEmail?: pulumi.Input<string>;
        updatedByFullName?: pulumi.Input<string>;
        updatedDateTime?: pulumi.Input<string>;
    }

    export interface ConnectionNotification {
        /**
         * Array of contact emails
         */
        emails: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Send interval
         */
        sendInterval?: pulumi.Input<string>;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: pulumi.Input<string | enums.fabric.NotificationsType>;
    }

    export interface ConnectionOperation {
        equinixStatus?: pulumi.Input<string>;
        errors?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionOperationError>[]>;
        providerStatus?: pulumi.Input<string>;
    }

    export interface ConnectionOperationError {
        /**
         * Connection additional information
         */
        additionalInfo?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionOperationErrorAdditionalInfo>[]>;
        correlationId?: pulumi.Input<string>;
        details?: pulumi.Input<string>;
        errorCode?: pulumi.Input<string>;
        errorMessage?: pulumi.Input<string>;
        help?: pulumi.Input<string>;
    }

    export interface ConnectionOperationErrorAdditionalInfo {
        property?: pulumi.Input<string>;
        reason?: pulumi.Input<string>;
    }

    export interface ConnectionOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier?: pulumi.Input<string>;
        /**
         * Order Identification
         */
        orderId?: pulumi.Input<string>;
        /**
         * Order Reference Number
         */
        orderNumber?: pulumi.Input<string>;
        /**
         * Purchase order number
         */
        purchaseOrderNumber?: pulumi.Input<string>;
    }

    export interface ConnectionProject {
        /**
         * Unique Resource URL
         */
        href?: pulumi.Input<string>;
        /**
         * Project Id
         */
        projectId?: pulumi.Input<string>;
    }

    export interface ConnectionRedundancy {
        /**
         * Redundancy group identifier
         */
        group?: pulumi.Input<string>;
        /**
         * Priority type- PRIMARY, SECONDARY
         */
        priority?: pulumi.Input<string>;
    }

    export interface ConnectionZSide {
        /**
         * Point of access details
         */
        accessPoint?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPoint>;
        /**
         * Connection side additional information
         */
        additionalInfo?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionZSideAdditionalInfo>[]>;
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: pulumi.Input<inputs.fabric.ConnectionZSideServiceToken>;
    }

    export interface ConnectionZSideAccessPoint {
        /**
         * Customer account information that is associated with this connection
         */
        account?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointAccount>;
        authenticationKey?: pulumi.Input<string>;
        gateway?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointGateway>;
        interface?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointInterface>;
        linkProtocol?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointLinkProtocol>;
        location?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointLocation>;
        peeringType?: pulumi.Input<string | enums.fabric.AccessPointPeeringType>;
        port?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointPort>;
        profile?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointProfile>;
        providerConnectionId?: pulumi.Input<string>;
        routingProtocols?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionZSideAccessPointRoutingProtocol>[]>;
        sellerRegion?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.AccessPointType>;
        virtualDevice?: pulumi.Input<inputs.fabric.ConnectionZSideAccessPointVirtualDevice>;
    }

    export interface ConnectionZSideAccessPointAccount {
        accountName?: pulumi.Input<string>;
        accountNumber?: pulumi.Input<number>;
        globalCustId?: pulumi.Input<string>;
        globalOrgId?: pulumi.Input<string>;
        globalOrganizationName?: pulumi.Input<string>;
        orgId?: pulumi.Input<number>;
        organizationName?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointGateway {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointInterface {
        /**
         * The ID of this resource.
         */
        id?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointLinkProtocol {
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.AccessPointLinkProtocolType>;
        vlanCTag?: pulumi.Input<number>;
        vlanSTag?: pulumi.Input<number>;
        vlanTag?: pulumi.Input<number>;
    }

    export interface ConnectionZSideAccessPointLocation {
        ibx?: pulumi.Input<string>;
        metroCode?: pulumi.Input<string | enums.Metro>;
        metroName?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointPort {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name?: pulumi.Input<string>;
        /**
         * Redundancy Information
         */
        redundancies?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionZSideAccessPointPortRedundancy>[]>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointPortRedundancy {
        /**
         * Priority type- PRIMARY, SECONDARY
         */
        priority?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointProfile {
        accessPointTypeConfigs?: pulumi.Input<pulumi.Input<inputs.fabric.ConnectionZSideAccessPointProfileAccessPointTypeConfig>[]>;
        description?: pulumi.Input<string>;
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type: pulumi.Input<string | enums.fabric.ProfileType>;
        uuid: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointProfileAccessPointTypeConfig {
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointRoutingProtocol {
        /**
         * Connection overall state
         */
        state?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAccessPointVirtualDevice {
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string>;
        uuid?: pulumi.Input<string>;
    }

    export interface ConnectionZSideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: pulumi.Input<string>;
        /**
         * Additional information value
         */
        value?: pulumi.Input<string>;
    }

    export interface ConnectionZSideServiceToken {
        description?: pulumi.Input<string>;
        /**
         * Connection URI information
         */
        href?: pulumi.Input<string>;
        /**
         * Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC
         */
        type?: pulumi.Input<string | enums.fabric.ServiceTokenType>;
        uuid?: pulumi.Input<string>;
    }

    export interface GetConnectionProject {
        /**
         * Unique Resource URL
         */
        href?: string;
        /**
         * Project Id
         */
        projectId?: string;
    }

    export interface GetConnectionProjectArgs {
        /**
         * Unique Resource URL
         */
        href?: pulumi.Input<string>;
        /**
         * Project Id
         */
        projectId?: pulumi.Input<string>;
    }

    export interface GetPortsFilter {
        /**
         * Query Parameter to Get Ports By Name
         */
        name?: string;
    }

    export interface GetPortsFilterArgs {
        /**
         * Query Parameter to Get Ports By Name
         */
        name?: pulumi.Input<string>;
    }

    export interface GetServiceProfilesFilter {
        /**
         * Possible operator to use on filters = - equal
         */
        operator?: string;
        /**
         * Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
         */
        property?: string;
        /**
         * Values
         */
        values?: string[];
    }

    export interface GetServiceProfilesFilterArgs {
        /**
         * Possible operator to use on filters = - equal
         */
        operator?: pulumi.Input<string>;
        /**
         * Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type
         */
        property?: pulumi.Input<string>;
        /**
         * Values
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetServiceProfilesSort {
        /**
         * Priority type- DESC, ASC
         */
        direction?: string;
        /**
         * Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
         */
        property?: string;
    }

    export interface GetServiceProfilesSortArgs {
        /**
         * Priority type- DESC, ASC
         */
        direction?: pulumi.Input<string>;
        /**
         * Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime
         */
        property?: pulumi.Input<string>;
    }

    export interface ServiceProfileAccessPointTypeConfig {
        /**
         * Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
         */
        allowBandwidthAutoApproval?: pulumi.Input<boolean>;
        /**
         * Availability of a bandwidth upgrade. The default is false
         */
        allowBandwidthUpgrade?: pulumi.Input<boolean>;
        /**
         * Setting to enable or disable the ability of the buyer to customize the bandwidth
         */
        allowCustomBandwidth?: pulumi.Input<boolean>;
        /**
         * Setting to allow or prohibit remote connections to the service profile
         */
        allowRemoteConnections?: pulumi.Input<boolean>;
        /**
         * Api configuration details
         */
        apiConfig?: pulumi.Input<inputs.fabric.ServiceProfileAccessPointTypeConfigApiConfig>;
        /**
         * Authentication key details
         */
        authenticationKey?: pulumi.Input<inputs.fabric.ServiceProfileAccessPointTypeConfigAuthenticationKey>;
        /**
         * Percentage of port bandwidth at which an allocation alert is generated
         */
        bandwidthAlertThreshold?: pulumi.Input<number>;
        /**
         * Custom name for Connection
         */
        connectionLabel?: pulumi.Input<string>;
        /**
         * Mandate redundant connections
         */
        connectionRedundancyRequired?: pulumi.Input<boolean>;
        /**
         * Enable auto generate service key
         */
        enableAutoGenerateServiceKey?: pulumi.Input<boolean>;
        /**
         * Link protocol configuration details
         */
        linkProtocolConfig?: pulumi.Input<inputs.fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfig>;
        /**
         * Supported bandwidths
         */
        supportedBandwidths?: pulumi.Input<pulumi.Input<number>[]>;
        /**
         * Type of access point type config - VD, COLO
         */
        type: pulumi.Input<string | enums.fabric.ProfileAccessPointType>;
        /**
         * Colo/Port Uuid
         */
        uuid?: pulumi.Input<string>;
    }

    export interface ServiceProfileAccessPointTypeConfigApiConfig {
        allowOverSubscription?: pulumi.Input<boolean>;
        apiAvailable?: pulumi.Input<boolean>;
        bandwidthFromApi?: pulumi.Input<boolean>;
        equinixManagedPort?: pulumi.Input<boolean>;
        equinixManagedVlan?: pulumi.Input<boolean>;
        integrationId?: pulumi.Input<string>;
        overSubscriptionLimit?: pulumi.Input<number>;
    }

    export interface ServiceProfileAccessPointTypeConfigAuthenticationKey {
        /**
         * User-provided service description
         */
        description?: pulumi.Input<string>;
        label?: pulumi.Input<string>;
        required?: pulumi.Input<boolean>;
    }

    export interface ServiceProfileAccessPointTypeConfigLinkProtocolConfig {
        encapsulation?: pulumi.Input<string>;
        encapsulationStrategy?: pulumi.Input<string>;
        reuseVlanSTag?: pulumi.Input<boolean>;
    }

    export interface ServiceProfileAccount {
        /**
         * Account Name
         */
        accountName?: pulumi.Input<string>;
        /**
         * Account Number
         */
        accountNumber?: pulumi.Input<number>;
        /**
         * Global Customer organization identifier
         */
        globalCustId?: pulumi.Input<string>;
        /**
         * Global organization identifier
         */
        globalOrgId?: pulumi.Input<string>;
        /**
         * Global organization name
         */
        globalOrganizationName?: pulumi.Input<string>;
        /**
         * Customer organization identifier
         */
        orgId?: pulumi.Input<number>;
        /**
         * Customer organization name
         */
        organizationName?: pulumi.Input<string>;
        /**
         * Enterprise datastore id
         */
        ucmId?: pulumi.Input<string>;
    }

    export interface ServiceProfileChangeLog {
        createdBy?: pulumi.Input<string>;
        createdByEmail?: pulumi.Input<string>;
        createdByFullName?: pulumi.Input<string>;
        createdDateTime?: pulumi.Input<string>;
        deletedBy?: pulumi.Input<string>;
        deletedByEmail?: pulumi.Input<string>;
        deletedByFullName?: pulumi.Input<string>;
        deletedDateTime?: pulumi.Input<string>;
        updatedBy?: pulumi.Input<string>;
        updatedByEmail?: pulumi.Input<string>;
        updatedByFullName?: pulumi.Input<string>;
        updatedDateTime?: pulumi.Input<string>;
    }

    export interface ServiceProfileCustomField {
        /**
         * Required field
         */
        captureInEmail?: pulumi.Input<boolean>;
        /**
         * Data type
         */
        dataType: pulumi.Input<string>;
        /**
         * Description
         */
        description?: pulumi.Input<string>;
        /**
         * Label
         */
        label: pulumi.Input<string>;
        /**
         * Options
         */
        options?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Required field
         */
        required: pulumi.Input<boolean>;
    }

    export interface ServiceProfileMarketingInfo {
        /**
         * Logo
         */
        logo?: pulumi.Input<string>;
        /**
         * Process Step
         */
        processSteps?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceProfileMarketingInfoProcessStep>[]>;
        /**
         * Promotion
         */
        promotion?: pulumi.Input<boolean>;
    }

    export interface ServiceProfileMarketingInfoProcessStep {
        /**
         * User-provided service description
         */
        description?: pulumi.Input<string>;
        subTitle?: pulumi.Input<string>;
        title?: pulumi.Input<string>;
    }

    export interface ServiceProfileMetro {
        /**
         * Metro Code - Example SV
         */
        code?: pulumi.Input<string>;
        /**
         * Display Name
         */
        displayName?: pulumi.Input<string>;
        /**
         * IBX- Equinix International Business Exchange list
         */
        ibxs?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * In Trail
         */
        inTrail?: pulumi.Input<boolean>;
        /**
         * Metro Name
         */
        name?: pulumi.Input<string>;
        /**
         * Seller Regions
         */
        sellerRegions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    export interface ServiceProfileNotification {
        /**
         * Array of contact emails
         */
        emails: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Send interval
         */
        sendInterval?: pulumi.Input<string>;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: pulumi.Input<string | enums.fabric.NotificationsType>;
    }

    export interface ServiceProfilePort {
        /**
         * Cross Connect Id
         */
        crossConnectId?: pulumi.Input<string>;
        /**
         * Colo/Port Location
         */
        locations?: pulumi.Input<pulumi.Input<inputs.fabric.ServiceProfilePortLocation>[]>;
        /**
         * Seller Region
         */
        sellerRegion?: pulumi.Input<string>;
        /**
         * Seller Region details
         */
        sellerRegionDescription?: pulumi.Input<string>;
        /**
         * Colo/Port Type
         */
        type: pulumi.Input<string>;
        /**
         * Colo/Port Uuid
         */
        uuid: pulumi.Input<string>;
    }

    export interface ServiceProfilePortLocation {
        ibx?: pulumi.Input<string>;
        metroCode?: pulumi.Input<string>;
        metroName?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }

    export interface ServiceProfileProject {
        /**
         * Unique Resource URL
         */
        href?: pulumi.Input<string>;
        /**
         * Project Id
         */
        projectId?: pulumi.Input<string>;
    }

    export interface ServiceProfileVirtualDevice {
        /**
         * Device Interface Uuid
         */
        interfaceUuid?: pulumi.Input<string>;
        /**
         * Device Location
         */
        location?: pulumi.Input<inputs.fabric.ServiceProfileVirtualDeviceLocation>;
        /**
         * Virtual Device Type
         */
        type: pulumi.Input<string>;
        /**
         * Virtual Device Uuid
         */
        uuid: pulumi.Input<string>;
    }

    export interface ServiceProfileVirtualDeviceLocation {
        ibx?: pulumi.Input<string>;
        metroCode?: pulumi.Input<string>;
        metroName?: pulumi.Input<string>;
        region?: pulumi.Input<string>;
    }
}

export namespace metal {
    export interface DeviceBehavior {
        /**
         * List of attributes that are allowed to change without recreating the instance. Supported attributes: `customData`, `userData`"
         */
        allowChanges?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface DeviceIpAddress {
        /**
         * CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
         */
        cidr?: pulumi.Input<number>;
        /**
         * List of UUIDs of IP block reservations
         * from which the public IPv4 address should be taken.
         */
        reservationIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
         */
        type: pulumi.Input<string>;
    }

    export interface DeviceNetwork {
        /**
         * IPv4 or IPv6 address string.
         */
        address?: pulumi.Input<string>;
        /**
         * CIDR suffix for IP address block to be assigned, i.e. amount of addresses.
         */
        cidr?: pulumi.Input<number>;
        /**
         * IP version. One of `4`, `6`.
         */
        family?: pulumi.Input<number>;
        /**
         * Address of router.
         */
        gateway?: pulumi.Input<string>;
        /**
         * Whether the address is routable from the Internet.
         */
        public?: pulumi.Input<boolean>;
    }

    export interface DevicePort {
        /**
         * Whether this port is part of a bond in bonded network setup.
         */
        bonded?: pulumi.Input<boolean>;
        /**
         * ID of the port.
         */
        id?: pulumi.Input<string>;
        /**
         * MAC address assigned to the port.
         */
        mac?: pulumi.Input<string>;
        /**
         * Name of the port (e.g. `eth0`, or `bond0`).
         */
        name?: pulumi.Input<string>;
        /**
         * One of `privateIpv4`, `publicIpv4`, `publicIpv6`.
         */
        type?: pulumi.Input<string>;
    }

    export interface DeviceReinstall {
        /**
         * Whether the OS disk should be filled with `00h` bytes before reinstall.
         * Defaults to `false`.
         */
        deprovisionFast?: pulumi.Input<boolean>;
        /**
         * Whether the provider should favour reinstall over destroy and create. Defaults to
         * `false`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Whether the non-OS disks should be kept or wiped during reinstall.
         * Defaults to `false`.
         */
        preserveData?: pulumi.Input<boolean>;
    }

    export interface GetFacilityCapacity {
        /**
         * Device plan that must be available in selected location.
         */
        plan: string;
        /**
         * Minimun number of devices that must be available in selected location.
         * Default is `1`.
         */
        quantity?: number;
    }

    export interface GetFacilityCapacityArgs {
        /**
         * Device plan that must be available in selected location.
         */
        plan: pulumi.Input<string>;
        /**
         * Minimun number of devices that must be available in selected location.
         * Default is `1`.
         */
        quantity?: pulumi.Input<number>;
    }

    export interface GetMetroCapacity {
        /**
         * Device plan that must be available in selected location.
         */
        plan: string;
        /**
         * Minimun number of devices that must be available in selected location.
         * Default is `1`.
         */
        quantity?: number;
    }

    export interface GetMetroCapacityArgs {
        /**
         * Device plan that must be available in selected location.
         */
        plan: pulumi.Input<string>;
        /**
         * Minimun number of devices that must be available in selected location.
         * Default is `1`.
         */
        quantity?: pulumi.Input<number>;
    }

    export interface GetPlansFilter {
        /**
         * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
         */
        all?: boolean;
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: string;
        /**
         * The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
         */
        matchBy?: string;
        /**
         * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
         */
        values: string[];
    }

    export interface GetPlansFilterArgs {
        /**
         * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
         */
        all?: pulumi.Input<boolean>;
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: pulumi.Input<string>;
        /**
         * The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
         */
        matchBy?: pulumi.Input<string>;
        /**
         * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetPlansSort {
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: string;
        /**
         * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
         */
        direction?: string;
    }

    export interface GetPlansSortArgs {
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: pulumi.Input<string>;
        /**
         * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
         */
        direction?: pulumi.Input<string>;
    }

    export interface InterconnectionPort {
        id?: pulumi.Input<string>;
        linkStatus?: pulumi.Input<string>;
        /**
         * Name of the connection resource
         */
        name?: pulumi.Input<string>;
        role?: pulumi.Input<string>;
        /**
         * Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.
         */
        speed?: pulumi.Input<number>;
        /**
         * Status of the connection resource.
         */
        status?: pulumi.Input<string>;
        virtualCircuitIds?: pulumi.Input<any[]>;
    }

    export interface InterconnectionServiceToken {
        expiresAt?: pulumi.Input<string>;
        id?: pulumi.Input<string>;
        maxAllowedSpeed?: pulumi.Input<string>;
        role?: pulumi.Input<string>;
        state?: pulumi.Input<string>;
        /**
         * Connection type - dedicated or shared.
         */
        type?: pulumi.Input<string>;
    }

    export interface OrganizationAddress {
        /**
         * Postal address.
         */
        address: pulumi.Input<string>;
        /**
         * City name.
         */
        city: pulumi.Input<string>;
        /**
         * Two letter country code (ISO 3166-1 alpha-2), e.g. US.
         */
        country: pulumi.Input<string>;
        /**
         * State name.
         */
        state?: pulumi.Input<string>;
        /**
         * Zip Code.
         */
        zipCode: pulumi.Input<string>;
    }

    export interface ProjectBgpConfig {
        /**
         * Autonomous System Number for local BGP deployment.
         */
        asn: pulumi.Input<number>;
        /**
         * `private` or `public`, the `private` is likely to be usable immediately, the
         * `public` will need to be reviewed by Equinix Metal engineers.
         */
        deploymentType: pulumi.Input<string>;
        /**
         * The maximum number of route filters allowed per server.
         */
        maxPrefix?: pulumi.Input<number>;
        /**
         * Password for BGP session in plaintext (not a checksum).
         */
        md5?: pulumi.Input<string>;
        /**
         * status of BGP configuration in the project.
         */
        status?: pulumi.Input<string>;
    }

    export interface SpotMarketRequestInstanceParameters {
        alwaysPxe?: pulumi.Input<boolean>;
        billingCycle: pulumi.Input<string>;
        customdata?: pulumi.Input<string>;
        description?: pulumi.Input<string>;
        features?: pulumi.Input<pulumi.Input<string>[]>;
        hostname: pulumi.Input<string>;
        ipxeScriptUrl?: pulumi.Input<string>;
        /**
         * Blocks deletion of the SpotMarketRequest device until the lock is disabled.
         */
        locked?: pulumi.Input<boolean>;
        operatingSystem: pulumi.Input<string>;
        plan: pulumi.Input<string>;
        projectSshKeys?: pulumi.Input<pulumi.Input<string>[]>;
        tags?: pulumi.Input<pulumi.Input<string>[]>;
        termintationTime?: pulumi.Input<string>;
        userSshKeys?: pulumi.Input<pulumi.Input<string>[]>;
        userdata?: pulumi.Input<string>;
    }
}

export namespace networkedge {
    export interface AclTemplateDeviceDetail {
        /**
         * Device ACL provisioning status where template was applied. One of `PROVISIONING`,
         * `PROVISIONED`.
         */
        aclStatus?: pulumi.Input<string>;
        /**
         * ACL template name.
         */
        name?: pulumi.Input<string>;
        /**
         * Device uuid.
         */
        uuid?: pulumi.Input<string>;
    }

    export interface AclTemplateInboundRule {
        /**
         * Inbound rule description, up to 200 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * Inbound traffic destination ports. Allowed values are a comma separated
         * list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         */
        dstPort: pulumi.Input<string>;
        /**
         * Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         */
        protocol: pulumi.Input<string | enums.networkedge.AclRuleProtocolType>;
        sequenceNumber?: pulumi.Input<number>;
        /**
         * @deprecated Source Type will not be returned
         */
        sourceType?: pulumi.Input<string>;
        /**
         * Inbound traffic source ports. Allowed values are a comma separated list
         * of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         */
        srcPort: pulumi.Input<string>;
        /**
         * Inbound traffic source IP subnet in CIDR format.
         */
        subnet?: pulumi.Input<string>;
        /**
         * Inbound traffic source IP subnets in CIDR format.
         *
         * @deprecated Use Subnet instead
         */
        subnets?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface DeviceClusterDetails {
        /**
         * The ID of the cluster.
         */
        clusterId?: pulumi.Input<string>;
        /**
         * The name of the cluster device
         */
        clusterName: pulumi.Input<string>;
        /**
         * An object that has `node0` configuration.
         * See Cluster Details - Nodes below for more details.
         */
        node0: pulumi.Input<inputs.networkedge.DeviceClusterDetailsNode0>;
        /**
         * An object that has `node1` configuration.
         * See Cluster Details - Nodes below for more details.
         */
        node1: pulumi.Input<inputs.networkedge.DeviceClusterDetailsNode1>;
        /**
         * The number of nodes in the cluster.
         */
        numOfNodes?: pulumi.Input<number>;
    }

    export interface DeviceClusterDetailsNode0 {
        /**
         * Identifier of a license file that will be applied on the device.
         */
        licenseFileId?: pulumi.Input<string>;
        /**
         * License Token applicable for some device types in BYOL licensing
         * mode.
         */
        licenseToken?: pulumi.Input<string>;
        /**
         * Device name.
         */
        name?: pulumi.Input<string>;
        /**
         * Device unique identifier.
         */
        uuid?: pulumi.Input<string>;
        /**
         * Map of vendor specific configuration parameters for a device
         * (controller1, activationKey, managementType, siteId, systemIpAddress)
         * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
         * on a device (max one key).  See SSH Key below for more details.
         */
        vendorConfiguration?: pulumi.Input<inputs.networkedge.DeviceClusterDetailsNode0VendorConfiguration>;
    }

    export interface DeviceClusterDetailsNode0VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters.
         */
        activationKey?: pulumi.Input<string>;
        /**
         * The administrative password of the device. You can use it to log in
         * to the console. This field is not available for all device types.
         */
        adminPassword?: pulumi.Input<string>;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device.
         */
        controller1?: pulumi.Input<string>;
        /**
         * Controller fqdn. This is required for Velocloud clusters.
         */
        controllerFqdn?: pulumi.Input<string>;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
         */
        hostname?: pulumi.Input<string>;
        /**
         * The CLI password of the device. This field is relevant only for the
         * Velocloud SDWAN cluster.
         */
        rootPassword?: pulumi.Input<string>;
    }

    export interface DeviceClusterDetailsNode1 {
        /**
         * Identifier of a license file that will be applied on the device.
         */
        licenseFileId?: pulumi.Input<string>;
        /**
         * License Token applicable for some device types in BYOL licensing
         * mode.
         */
        licenseToken?: pulumi.Input<string>;
        /**
         * Device name.
         */
        name?: pulumi.Input<string>;
        /**
         * Device unique identifier.
         */
        uuid?: pulumi.Input<string>;
        /**
         * Map of vendor specific configuration parameters for a device
         * (controller1, activationKey, managementType, siteId, systemIpAddress)
         * * `ssh-key` - (Optional) Definition of SSH key that will be provisioned
         * on a device (max one key).  See SSH Key below for more details.
         */
        vendorConfiguration?: pulumi.Input<inputs.networkedge.DeviceClusterDetailsNode1VendorConfiguration>;
    }

    export interface DeviceClusterDetailsNode1VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters.
         */
        activationKey?: pulumi.Input<string>;
        /**
         * The administrative password of the device. You can use it to log in
         * to the console. This field is not available for all device types.
         */
        adminPassword?: pulumi.Input<string>;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device.
         */
        controller1?: pulumi.Input<string>;
        /**
         * Controller fqdn. This is required for Velocloud clusters.
         */
        controllerFqdn?: pulumi.Input<string>;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
         */
        hostname?: pulumi.Input<string>;
        /**
         * The CLI password of the device. This field is relevant only for the
         * Velocloud SDWAN cluster.
         */
        rootPassword?: pulumi.Input<string>;
    }

    export interface DeviceInterface {
        /**
         * interface management type (Equinix Managed or empty).
         */
        assignedType?: pulumi.Input<string>;
        /**
         * interface identifier.
         */
        id?: pulumi.Input<number>;
        /**
         * interface IP address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * interface MAC address.
         */
        macAddress?: pulumi.Input<string>;
        /**
         * Device name.
         */
        name?: pulumi.Input<string>;
        /**
         * interface operational status. One of `up`, `down`.
         */
        operationalStatus?: pulumi.Input<string>;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status?: pulumi.Input<string>;
        /**
         * interface type.
         */
        type?: pulumi.Input<string>;
    }

    export interface DeviceLinkDevice {
        /**
         * Device ASN number. Not required for self configured devices.
         */
        asn?: pulumi.Input<number>;
        /**
         * Device identifier.
         */
        id: pulumi.Input<string>;
        /**
         * Device network interface identifier to use for device link
         * connection.
         */
        interfaceId?: pulumi.Input<number>;
        /**
         * IP address from device link subnet that was assigned to the device
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * device link provisioning status on a given device. One of `PROVISIONING`,
         * `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
         */
        status?: pulumi.Input<string>;
    }

    export interface DeviceLinkLink {
        /**
         * billing account number to be used for
         * connection charges
         */
        accountNumber: pulumi.Input<string>;
        /**
         * connection destination metro code.
         */
        dstMetroCode: pulumi.Input<string>;
        /**
         * connection destination zone code is not required.
         *
         * @deprecated DestinationZoneCode is not required
         */
        dstZoneCode?: pulumi.Input<string>;
        /**
         * connection source metro code.
         */
        srcMetroCode: pulumi.Input<string>;
        /**
         * connection source zone code is not required.
         *
         * @deprecated SourceZoneCode is not required
         */
        srcZoneCode?: pulumi.Input<string>;
        /**
         * connection throughput.
         */
        throughput: pulumi.Input<string>;
        /**
         * connection throughput unit (Mbps or Gbps).
         */
        throughputUnit: pulumi.Input<string>;
    }

    export interface DeviceSecondaryDevice {
        /**
         * Billing account number for secondary device.
         */
        accountNumber: pulumi.Input<string>;
        /**
         * Identifier of a WAN interface ACL template that will be applied
         * on a secondary device.
         */
        aclTemplateId?: pulumi.Input<string>;
        /**
         * Additional Internet bandwidth, in Mbps, for a secondary
         * device.
         */
        additionalBandwidth?: pulumi.Input<number>;
        /**
         * (Autonomous System Number) Unique identifier for a network on the internet.
         */
        asn?: pulumi.Input<number>;
        /**
         * Identifier of a cloud init file that will be applied on a secondary device.
         */
        cloudInitFileId?: pulumi.Input<string>;
        /**
         * Secondary device hostname.
         */
        hostname?: pulumi.Input<string>;
        /**
         * Device location Equinix Business Exchange name.
         */
        ibx?: pulumi.Input<string>;
        /**
         * List of device interfaces. See Interface Attribute below
         * for more details.
         */
        interfaces?: pulumi.Input<pulumi.Input<inputs.networkedge.DeviceSecondaryDeviceInterface>[]>;
        /**
         * Path to the license file that will be uploaded and applied on a
         * secondary device. Applicable for some device types in BYOL licensing mode.
         */
        licenseFile?: pulumi.Input<string>;
        /**
         * Identifier of a license file that will be applied on a secondary device.
         */
        licenseFileId?: pulumi.Input<string>;
        /**
         * Device license registration status. Possible values are `APPLYING_LICENSE`,
         * `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
         */
        licenseStatus?: pulumi.Input<string>;
        /**
         * License Token can be provided for some device types o the device.
         */
        licenseToken?: pulumi.Input<string>;
        /**
         * Metro location of a secondary device.
         */
        metroCode: pulumi.Input<string>;
        /**
         * Identifier of an MGMT interface ACL template that will be
         * applied on a secondary device.
         * * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary
         * device.
         */
        mgmtAclTemplateUuid?: pulumi.Input<string>;
        /**
         * Secondary device name.
         */
        name: pulumi.Input<string>;
        /**
         * List of email addresses that will receive notifications about
         * secondary device.
         */
        notifications: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Device redundancy type applicable for HA devices, either
         * primary or secondary.
         */
        redundancyType?: pulumi.Input<string>;
        /**
         * Unique identifier for a redundant device applicable for HA devices.
         */
        redundantId?: pulumi.Input<string>;
        /**
         * Device location region.
         */
        region?: pulumi.Input<string>;
        /**
         * IP address of SSH enabled interface on the device.
         */
        sshIpAddress?: pulumi.Input<string>;
        /**
         * FQDN of SSH enabled interface on the device.
         */
        sshIpFqdn?: pulumi.Input<string>;
        sshKey?: pulumi.Input<inputs.networkedge.DeviceSecondaryDeviceSshKey>;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status?: pulumi.Input<string>;
        /**
         * Device unique identifier.
         */
        uuid?: pulumi.Input<string>;
        /**
         * Key/Value pairs of vendor specific configuration parameters
         * for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,
         * `systemIpAddress`.
         */
        vendorConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        wanInterfaceId?: pulumi.Input<string>;
        /**
         * Device location zone code.
         */
        zoneCode?: pulumi.Input<string>;
    }

    export interface DeviceSecondaryDeviceInterface {
        /**
         * interface management type (Equinix Managed or empty).
         */
        assignedType?: pulumi.Input<string>;
        /**
         * interface identifier.
         */
        id?: pulumi.Input<number>;
        /**
         * interface IP address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * interface MAC address.
         */
        macAddress?: pulumi.Input<string>;
        /**
         * Device name.
         */
        name?: pulumi.Input<string>;
        /**
         * interface operational status. One of `up`, `down`.
         */
        operationalStatus?: pulumi.Input<string>;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status?: pulumi.Input<string>;
        /**
         * interface type.
         */
        type?: pulumi.Input<string>;
    }

    export interface DeviceSecondaryDeviceSshKey {
        keyName: pulumi.Input<string>;
        /**
         * username associated with given key.
         */
        username: pulumi.Input<string>;
    }

    export interface DeviceSshKey {
        keyName: pulumi.Input<string>;
        /**
         * username associated with given key.
         */
        username: pulumi.Input<string>;
    }

}
