// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace fabric {
    export interface CloudRouterAccount {
        /**
         * Account Number
         */
        accountNumber: number;
    }

    export interface CloudRouterChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface CloudRouterLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface CloudRouterMarketplaceSubscription {
        /**
         * Marketplace Subscription type like; AWS*MARKETPLACE*SUBSCRIPTION
         */
        type: string;
        /**
         * Equinix-assigned Marketplace Subscription identifier
         */
        uuid: string;
    }

    export interface CloudRouterNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface CloudRouterOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface CloudRouterPackage {
        /**
         * Fabric Cloud Router package code
         */
        code: string;
    }

    export interface CloudRouterProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface ConnectionASide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.ConnectionASideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfo?: outputs.fabric.ConnectionASideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.ConnectionASideServiceToken;
    }

    export interface ConnectionASideAccessPoint {
        /**
         * Account
         */
        account: outputs.fabric.ConnectionASideAccessPointAccount;
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.ConnectionASideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.ConnectionASideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.ConnectionASideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.ConnectionASideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.ConnectionASideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.ConnectionASideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.ConnectionASideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.ConnectionASideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.ConnectionASideAccessPointVirtualDevice;
    }

    export interface ConnectionASideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface ConnectionASideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface ConnectionASideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface ConnectionASideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface ConnectionASideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface ConnectionASideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface ConnectionASideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancy: outputs.fabric.ConnectionASideAccessPointPortRedundancy;
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface ConnectionASideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface ConnectionASideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.ConnectionASideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface ConnectionASideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface ConnectionASideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface ConnectionASideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface ConnectionASideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface ConnectionASideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface ConnectionAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface ConnectionChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface ConnectionNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface ConnectionOperation {
        /**
         * Connection status
         */
        equinixStatus: string;
        /**
         * Errors occurred
         */
        errors: outputs.fabric.ConnectionOperationError[];
        /**
         * Connection provider readiness status
         */
        providerStatus: string;
    }

    export interface ConnectionOperationError {
        /**
         * Pricing error additional Info
         */
        additionalInfo: outputs.fabric.ConnectionOperationErrorAdditionalInfo[];
        /**
         * CorrelationId
         */
        correlationId: string;
        /**
         * Details
         */
        details: string;
        /**
         * Error  code
         */
        errorCode: string;
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Help
         */
        help: string;
    }

    export interface ConnectionOperationErrorAdditionalInfo {
        /**
         * Property at which the error potentially occurred
         */
        property: string;
        /**
         * Reason for the error
         */
        reason: string;
    }

    export interface ConnectionOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface ConnectionProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface ConnectionRedundancy {
        /**
         * Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)
         */
        group: string;
        /**
         * Connection priority in redundancy group - PRIMARY, SECONDARY
         */
        priority: string;
    }

    export interface ConnectionZSide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.ConnectionZSideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfo?: outputs.fabric.ConnectionZSideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.ConnectionZSideServiceToken;
    }

    export interface ConnectionZSideAccessPoint {
        /**
         * Account
         */
        account: outputs.fabric.ConnectionZSideAccessPointAccount;
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.ConnectionZSideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.ConnectionZSideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.ConnectionZSideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.ConnectionZSideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.ConnectionZSideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.ConnectionZSideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.ConnectionZSideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.ConnectionZSideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD*ROUTER, NETWORK, METAL*NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.ConnectionZSideAccessPointVirtualDevice;
    }

    export interface ConnectionZSideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface ConnectionZSideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface ConnectionZSideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface ConnectionZSideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface ConnectionZSideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface ConnectionZSideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface ConnectionZSideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancy: outputs.fabric.ConnectionZSideAccessPointPortRedundancy;
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface ConnectionZSideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface ConnectionZSideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.ConnectionZSideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface ConnectionZSideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface ConnectionZSideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface ConnectionZSideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface ConnectionZSideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface ConnectionZSideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface GetCloudRouterAccount {
        /**
         * Account Number
         */
        accountNumber: number;
    }

    export interface GetCloudRouterChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetCloudRouterLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetCloudRouterMarketplaceSubscription {
        /**
         * Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
         */
        type: string;
        /**
         * Equinix-assigned Marketplace Subscription identifier
         */
        uuid: string;
    }

    export interface GetCloudRouterNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetCloudRouterOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface GetCloudRouterPackage {
        /**
         * Fabric Cloud Router package code
         */
        code: string;
    }

    export interface GetCloudRouterProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetCloudRoutersData {
        /**
         * Customer account information that is associated with this Fabric Cloud Router
         */
        accounts: outputs.fabric.GetCloudRoutersDataAccount[];
        /**
         * Number of IPv4 BGP routes in use (including non-distinct prefixes)
         */
        bgpIpv4RoutesCount: number;
        /**
         * Number of IPv6 BGP routes in use (including non-distinct prefixes)
         */
        bgpIpv6RoutesCount: number;
        /**
         * Captures Fabric Cloud Router lifecycle change information
         */
        changeLogs: outputs.fabric.GetCloudRoutersDataChangeLog[];
        /**
         * Number of connections associated with this Fabric Cloud Router instance
         */
        connectionsCount: number;
        /**
         * Customer-provided Fabric Cloud Router description
         */
        description: string;
        /**
         * Number of distinct IPv4 routes
         */
        distinctIpv4PrefixesCount: number;
        /**
         * Number of distinct IPv6 routes
         */
        distinctIpv6PrefixesCount: number;
        /**
         * Equinix ASN
         */
        equinixAsn: number;
        /**
         * Fabric Cloud Router URI information
         */
        href: string;
        /**
         * Fabric Cloud Router location
         */
        locations: outputs.fabric.GetCloudRoutersDataLocation[];
        /**
         * Equinix Fabric Entity for Marketplace Subscription
         */
        marketplaceSubscriptions: outputs.fabric.GetCloudRoutersDataMarketplaceSubscription[];
        /**
         * Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name: string;
        /**
         * Preferences for notifications on Fabric Cloud Router configuration or status changes
         */
        notifications: outputs.fabric.GetCloudRoutersDataNotification[];
        /**
         * Order information related to this Fabric Cloud Router
         */
        orders: outputs.fabric.GetCloudRoutersDataOrder[];
        /**
         * Fabric Cloud Router Package Type
         */
        packages: outputs.fabric.GetCloudRoutersDataPackage[];
        /**
         * Customer resource hierarchy project information. Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects
         */
        projects: outputs.fabric.GetCloudRoutersDataProject[];
        /**
         * Fabric Cloud Router overall state
         */
        state: string;
        /**
         * Defines the FCR type like; XF_ROUTER
         */
        type: string;
        /**
         * Equinix-assigned Fabric Cloud Router identifier
         */
        uuid: string;
    }

    export interface GetCloudRoutersDataAccount {
        /**
         * Account Number
         */
        accountNumber: number;
    }

    export interface GetCloudRoutersDataChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetCloudRoutersDataLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetCloudRoutersDataMarketplaceSubscription {
        /**
         * Marketplace Subscription type like; AWS_MARKETPLACE_SUBSCRIPTION
         */
        type: string;
        /**
         * Equinix-assigned Marketplace Subscription identifier
         */
        uuid: string;
    }

    export interface GetCloudRoutersDataNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetCloudRoutersDataOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface GetCloudRoutersDataPackage {
        /**
         * Fabric Cloud Router package code
         */
        code: string;
    }

    export interface GetCloudRoutersDataProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetCloudRoutersFilter {
        /**
         * Possible operators to use on the filter property. Can be one of the following: [= - equal, != - not equal, > - greater than, >= - greater than or equal to, < - less than, <= - less than or equal to, [NOT] BETWEEN - (not) between, [NOT] LIKE - (not) like, [NOT] IN - (not) in
         */
        operator: string;
        /**
         * Boolean flag indicating whether this filter is included in the OR group. There can only be one OR group and it can have a maximum of 3 filters. The OR group only counts as 1 of the 8 possible filters
         */
        or?: boolean;
        /**
         * The API response property which you want to filter your request on. Can be one of the following: "/project/projectId", "/name", "/uuid", "/state", "/location/metroCode", "/location/metroName", "/package/code", "/*"
         */
        property: string;
        /**
         * The values that you want to apply the property+operator combination to in order to filter your data search
         */
        values: string[];
    }

    export interface GetCloudRoutersPagination {
        /**
         * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
         */
        limit?: number;
        /**
         * The page offset for the pagination request. Index of the first element. Default is 0.
         */
        offset?: number;
    }

    export interface GetCloudRoutersSort {
        /**
         * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
         */
        direction?: string;
        /**
         * The property name to use in sorting. Can be one of the following: [/name, /uuid, /state, /location/metroCode, /location/metroName, /package/code, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
         */
        property?: string;
    }

    export interface GetConnectionASide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.GetConnectionASideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfos?: outputs.fabric.GetConnectionASideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.GetConnectionASideServiceToken;
    }

    export interface GetConnectionASideAccessPoint {
        /**
         * Account
         */
        accounts: outputs.fabric.GetConnectionASideAccessPointAccount[];
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.GetConnectionASideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.GetConnectionASideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.GetConnectionASideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.GetConnectionASideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.GetConnectionASideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.GetConnectionASideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.GetConnectionASideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.GetConnectionASideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.GetConnectionASideAccessPointVirtualDevice;
    }

    export interface GetConnectionASideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionASideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionASideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface GetConnectionASideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface GetConnectionASideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetConnectionASideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface GetConnectionASideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancies: outputs.fabric.GetConnectionASideAccessPointPortRedundancy[];
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface GetConnectionASideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetConnectionASideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.GetConnectionASideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface GetConnectionASideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface GetConnectionASideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionASideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface GetConnectionASideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface GetConnectionASideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface GetConnectionAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetConnectionNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetConnectionOperation {
        /**
         * Connection status
         */
        equinixStatus: string;
        /**
         * Errors occurred
         */
        errors: outputs.fabric.GetConnectionOperationError[];
        /**
         * Connection provider readiness status
         */
        providerStatus: string;
    }

    export interface GetConnectionOperationError {
        /**
         * Pricing error additional Info
         */
        additionalInfos: outputs.fabric.GetConnectionOperationErrorAdditionalInfo[];
        /**
         * CorrelationId
         */
        correlationId: string;
        /**
         * Details
         */
        details: string;
        /**
         * Error  code
         */
        errorCode: string;
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Help
         */
        help: string;
    }

    export interface GetConnectionOperationErrorAdditionalInfo {
        /**
         * Property at which the error potentially occurred
         */
        property: string;
        /**
         * Reason for the error
         */
        reason: string;
    }

    export interface GetConnectionOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface GetConnectionProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetConnectionRedundancy {
        /**
         * Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
         */
        group: string;
        /**
         * Connection priority in redundancy group - PRIMARY, SECONDARY
         */
        priority: string;
    }

    export interface GetConnectionZSide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.GetConnectionZSideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfos?: outputs.fabric.GetConnectionZSideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.GetConnectionZSideServiceToken;
    }

    export interface GetConnectionZSideAccessPoint {
        /**
         * Account
         */
        accounts: outputs.fabric.GetConnectionZSideAccessPointAccount[];
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.GetConnectionZSideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.GetConnectionZSideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.GetConnectionZSideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.GetConnectionZSideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.GetConnectionZSideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.GetConnectionZSideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.GetConnectionZSideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.GetConnectionZSideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.GetConnectionZSideAccessPointVirtualDevice;
    }

    export interface GetConnectionZSideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionZSideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionZSideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface GetConnectionZSideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface GetConnectionZSideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetConnectionZSideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface GetConnectionZSideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancies: outputs.fabric.GetConnectionZSideAccessPointPortRedundancy[];
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface GetConnectionZSideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetConnectionZSideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.GetConnectionZSideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface GetConnectionZSideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface GetConnectionZSideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionZSideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface GetConnectionZSideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface GetConnectionZSideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsData {
        /**
         * Requester or Customer side connection configuration object of the multi-segment connection
         */
        aSides: outputs.fabric.GetConnectionsDataASide[];
        /**
         * Customer account information that is associated with this connection
         */
        accounts: outputs.fabric.GetConnectionsDataAccount[];
        /**
         * Connection additional information
         */
        additionalInfos: {[key: string]: string}[];
        /**
         * Connection bandwidth in Mbps
         */
        bandwidth: number;
        /**
         * Captures connection lifecycle change information
         */
        changeLogs: outputs.fabric.GetConnectionsDataChangeLog[];
        /**
         * Customer-provided connection description
         */
        description: string;
        /**
         * Connection directionality from the requester point of view
         */
        direction: string;
        /**
         * Connection URI information
         */
        href: string;
        /**
         * Connection property derived from access point locations
         */
        isRemote: boolean;
        /**
         * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name: string;
        /**
         * Preferences for notifications on connection configuration or status changes
         */
        notifications: outputs.fabric.GetConnectionsDataNotification[];
        /**
         * Connection type-specific operational data
         */
        operations: outputs.fabric.GetConnectionsDataOperation[];
        /**
         * Order details
         */
        orders: outputs.fabric.GetConnectionsDataOrder[];
        /**
         * Project information
         */
        projects: outputs.fabric.GetConnectionsDataProject[];
        /**
         * Connection Redundancy Configuration
         */
        redundancies: outputs.fabric.GetConnectionsDataRedundancy[];
        /**
         * Connection overall state
         */
        state: string;
        /**
         * Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC, EC_VC
         */
        type: string;
        /**
         * Equinix-assigned connection identifier
         */
        uuid: string;
        /**
         * Destination or Provider side connection configuration object of the multi-segment connection
         */
        zSides: outputs.fabric.GetConnectionsDataZSide[];
    }

    export interface GetConnectionsDataASide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.GetConnectionsDataASideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfos?: outputs.fabric.GetConnectionsDataASideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.GetConnectionsDataASideServiceToken;
    }

    export interface GetConnectionsDataASideAccessPoint {
        /**
         * Account
         */
        accounts: outputs.fabric.GetConnectionsDataASideAccessPointAccount[];
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.GetConnectionsDataASideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.GetConnectionsDataASideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.GetConnectionsDataASideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.GetConnectionsDataASideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.GetConnectionsDataASideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.GetConnectionsDataASideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.GetConnectionsDataASideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.GetConnectionsDataASideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.GetConnectionsDataASideAccessPointVirtualDevice;
    }

    export interface GetConnectionsDataASideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionsDataASideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataASideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataASideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface GetConnectionsDataASideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetConnectionsDataASideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataASideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancies: outputs.fabric.GetConnectionsDataASideAccessPointPortRedundancy[];
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataASideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetConnectionsDataASideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.GetConnectionsDataASideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataASideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataASideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataASideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataASideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface GetConnectionsDataASideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionsDataChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetConnectionsDataNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetConnectionsDataOperation {
        /**
         * Connection status
         */
        equinixStatus: string;
        /**
         * Errors occurred
         */
        errors: outputs.fabric.GetConnectionsDataOperationError[];
        /**
         * Connection provider readiness status
         */
        providerStatus: string;
    }

    export interface GetConnectionsDataOperationError {
        /**
         * Pricing error additional Info
         */
        additionalInfos: outputs.fabric.GetConnectionsDataOperationErrorAdditionalInfo[];
        /**
         * CorrelationId
         */
        correlationId: string;
        /**
         * Details
         */
        details: string;
        /**
         * Error  code
         */
        errorCode: string;
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Help
         */
        help: string;
    }

    export interface GetConnectionsDataOperationErrorAdditionalInfo {
        /**
         * Property at which the error potentially occurred
         */
        property: string;
        /**
         * Reason for the error
         */
        reason: string;
    }

    export interface GetConnectionsDataOrder {
        /**
         * Billing tier for connection bandwidth
         */
        billingTier: string;
        /**
         * Order Identification
         */
        orderId: string;
        /**
         * Order Reference Number
         */
        orderNumber: string;
        /**
         * Purchase order number
         */
        purchaseOrderNumber: string;
    }

    export interface GetConnectionsDataProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetConnectionsDataRedundancy {
        /**
         * Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
         */
        group: string;
        /**
         * Connection priority in redundancy group - PRIMARY, SECONDARY
         */
        priority: string;
    }

    export interface GetConnectionsDataZSide {
        /**
         * Point of access details
         */
        accessPoint?: outputs.fabric.GetConnectionsDataZSideAccessPoint;
        /**
         * Connection side additional information
         */
        additionalInfos?: outputs.fabric.GetConnectionsDataZSideAdditionalInfo[];
        /**
         * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
         */
        serviceToken?: outputs.fabric.GetConnectionsDataZSideServiceToken;
    }

    export interface GetConnectionsDataZSideAccessPoint {
        /**
         * Account
         */
        accounts: outputs.fabric.GetConnectionsDataZSideAccessPointAccount[];
        /**
         * Authentication key for provider based connections or Metal-Fabric Integration connections
         */
        authenticationKey?: string;
        /**
         * **Deprecated** `gateway` Use `router` attribute instead
         *
         * @deprecated use router attribute instead; gateway is no longer a part of the supported backend
         */
        gateway?: outputs.fabric.GetConnectionsDataZSideAccessPointGateway;
        /**
         * Virtual device interface
         */
        interface?: outputs.fabric.GetConnectionsDataZSideAccessPointInterface;
        /**
         * Connection link protocol
         */
        linkProtocol?: outputs.fabric.GetConnectionsDataZSideAccessPointLinkProtocol;
        /**
         * Access point location
         */
        location: outputs.fabric.GetConnectionsDataZSideAccessPointLocation;
        /**
         * network access point information
         */
        network?: outputs.fabric.GetConnectionsDataZSideAccessPointNetwork;
        /**
         * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
         */
        peeringType?: string;
        /**
         * Port access point information
         */
        port?: outputs.fabric.GetConnectionsDataZSideAccessPointPort;
        /**
         * Service Profile
         */
        profile?: outputs.fabric.GetConnectionsDataZSideAccessPointProfile;
        /**
         * Provider assigned Connection Id
         */
        providerConnectionId: string;
        /**
         * Cloud Router access point information that replaces `gateway`
         */
        router?: outputs.fabric.GetConnectionsDataZSideAccessPointRouter;
        /**
         * Access point seller region
         */
        sellerRegion?: string;
        /**
         * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
         */
        type?: string;
        /**
         * Virtual device
         */
        virtualDevice?: outputs.fabric.GetConnectionsDataZSideAccessPointVirtualDevice;
    }

    export interface GetConnectionsDataZSideAccessPointAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetConnectionsDataZSideAccessPointGateway {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataZSideAccessPointInterface {
        /**
         * id
         */
        id: number;
        /**
         * Interface type
         */
        type?: string;
        /**
         * Equinix-assigned interface identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataZSideAccessPointLinkProtocol {
        /**
         * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
         */
        type?: string;
        /**
         * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
         */
        vlanCTag: number;
        /**
         * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
         */
        vlanSTag: number;
        /**
         * Vlan Tag information, vlanTag value specified for DOT1Q connections
         */
        vlanTag: number;
    }

    export interface GetConnectionsDataZSideAccessPointLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetConnectionsDataZSideAccessPointNetwork {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned Network identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataZSideAccessPointPort {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Port name
         */
        name: string;
        /**
         * Redundancy Information
         */
        redundancies: outputs.fabric.GetConnectionsDataZSideAccessPointPortRedundancy[];
        /**
         * Equinix-assigned Port identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataZSideAccessPointPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetConnectionsDataZSideAccessPointProfile {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfig[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataZSideAccessPointProfileAccessPointTypeConfig {
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Equinix-assigned access point type config identifier
         */
        uuid: string;
    }

    export interface GetConnectionsDataZSideAccessPointRouter {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Equinix-assigned virtual gateway identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataZSideAccessPointVirtualDevice {
        /**
         * Unique Resource Identifier
         */
        href: string;
        /**
         * Customer-assigned Virtual Device Name
         */
        name?: string;
        /**
         * Virtual Device type
         */
        type?: string;
        /**
         * Equinix-assigned Virtual Device identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsDataZSideAdditionalInfo {
        /**
         * Additional information key
         */
        key?: string;
        /**
         * Additional information value
         */
        value?: string;
    }

    export interface GetConnectionsDataZSideServiceToken {
        /**
         * Service token description
         */
        description: string;
        /**
         * An absolute URL that is the subject of the link's context
         */
        href: string;
        /**
         * Token type - VC_TOKEN
         */
        type?: string;
        /**
         * Equinix-assigned service token identifier
         */
        uuid?: string;
    }

    export interface GetConnectionsFilter {
        /**
         * Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
         */
        group?: string;
        /**
         * Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
         */
        operator: string;
        /**
         * Possible field names to use on filters. One of [/isRemote /name /uuid /type /geoScope /account/orgId /aSide/accessPoint/account/accountName /aSide/accessPoint/account/accountNumber /aSide/accessPoint/router/uuid /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /aSide/accessPoint/linkProtocol/vlanTagMin /aSide/accessPoint/linkProtocol/vlanTagMax /aSide/accessPoint/location/metroCode /aSide/accessPoint/location/metroName /aSide/accessPoint/name /aSide/accessPoint/port/uuid /aSide/accessPoint/port/name /aSide/accessPoint/type /aSide/accessPoint/virtualDevice/name /aSide/accessPoint/virtualDevice/uuid /aSide/serviceToken/uuid /change/status /operation/equinixStatus /operation/providerStatus /project/projectId /redundancy/group /redundancy/priority /zSide/accessPoint/account/accountName /zSide/accessPoint/authenticationKey /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/linkProtocol/vlanTagMin /zSide/accessPoint/linkProtocol/vlanTagMax /zSide/accessPoint/location/metroCode /zSide/accessPoint/location/metroName /zSide/accessPoint/name /zSide/accessPoint/port/uuid /zSide/accessPoint/network/uuid /zSide/accessPoint/port/name /zSide/accessPoint/profile/uuid /zSide/accessPoint/type /zSide/accessPoint/virtualDevice/name /zSide/accessPoint/virtualDevice/uuid /zSide/serviceToken/uuid /zSide/internetAccess/uuid *]
         */
        property: string;
        /**
         * The values that you want to apply the property+operator combination to in order to filter your data search
         */
        values: string[];
    }

    export interface GetConnectionsPagination {
        /**
         * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
         */
        limit?: number;
        /**
         * The page offset for the pagination request. Index of the first element. Default is 0.
         */
        offset?: number;
    }

    export interface GetConnectionsSort {
        /**
         * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
         */
        direction?: string;
        /**
         * The property name to use in sorting. One of [/name /direction /aSide/accessPoint/name /aSide/accessPoint/type /aSide/accessPoint/account/accountName /aSide/accessPoint/location/metroName /aSide/accessPoint/location/metroCode /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/name /zSide/accessPoint/type /zSide/accessPoint/account/accountName /zSide/accessPoint/location/metroName /zSide/accessPoint/location/metroCode /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/authenticationKey /bandwidth /geoScope /uuid /changeLog/createdDateTime /changeLog/updatedDateTime /operation/equinixStatus /operation/providerStatus /redundancy/priority]. Defaults to /changeLog/updatedDateTime
         */
        property?: string;
    }

    export interface GetMarketplaceSubscriptionEntitlement {
        /**
         * Asset information
         */
        assets: outputs.fabric.GetMarketplaceSubscriptionEntitlementAsset[];
        /**
         * Available Quantity
         */
        quantityAvailable: number;
        /**
         * Consumed Quantity
         */
        quantityConsumed: number;
        /**
         * Entitled Quantity
         */
        quantityEntitled: number;
        /**
         * Subscription Entitlement Id
         */
        uuid: string;
    }

    export interface GetMarketplaceSubscriptionEntitlementAsset {
        /**
         * Fabric Cloud Router Package Type
         */
        packages: outputs.fabric.GetMarketplaceSubscriptionEntitlementAssetPackage[];
        /**
         * Defines the FCR type like; XF_ROUTER
         */
        type: string;
    }

    export interface GetMarketplaceSubscriptionEntitlementAssetPackage {
        /**
         * Cloud Router package code
         */
        code: string;
    }

    export interface GetMarketplaceSubscriptionTrial {
        /**
         * Marketplace Subscription Trial Enabled
         */
        enabled: boolean;
    }

    export interface GetNetworkChange {
        /**
         * Absolute URL that returns the details of the given change.
         * Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
         */
        href: string;
        /**
         * Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
         */
        type: string;
        /**
         * Asset change request identifier.
         */
        uuid: string;
    }

    export interface GetNetworkChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetNetworkLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetNetworkNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetNetworkOperation {
        /**
         * Progress towards provisioning a given asset.
         */
        equinixStatus: string;
    }

    export interface GetNetworkProject {
        /**
         * Customer project identifier
         */
        projectId: string;
    }

    export interface GetNetworksData {
        /**
         * A permanent record of asset creation, modification, or deletion
         */
        changeLogs: outputs.fabric.GetNetworksDataChangeLog[];
        /**
         * Information on asset change operation
         */
        changes: outputs.fabric.GetNetworksDataChange[];
        /**
         * Number of connections associated with this network
         */
        connectionsCount: number;
        /**
         * Fabric Network URI information
         */
        href: string;
        /**
         * Fabric Network location
         */
        locations: outputs.fabric.GetNetworksDataLocation[];
        /**
         * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
         */
        name: string;
        /**
         * Preferences for notifications on Fabric Network configuration or status changes
         */
        notifications: outputs.fabric.GetNetworksDataNotification[];
        /**
         * Network operation information that is associated with this Fabric Network
         */
        operations: outputs.fabric.GetNetworksDataOperation[];
        /**
         * Fabric Network project
         */
        projects: outputs.fabric.GetNetworksDataProject[];
        /**
         * Fabric Network scope
         */
        scope: string;
        /**
         * Fabric Network overall state
         */
        state: string;
        /**
         * Supported Network types - EVPLAN, EPLAN, IPWAN
         */
        type: string;
        /**
         * Equinix-assigned network identifier
         */
        uuid: string;
    }

    export interface GetNetworksDataChange {
        /**
         * Absolute URL that returns the details of the given change.
         * Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
         */
        href: string;
        /**
         * Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
         */
        type: string;
        /**
         * Asset change request identifier.
         */
        uuid: string;
    }

    export interface GetNetworksDataChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetNetworksDataLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetNetworksDataNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetNetworksDataOperation {
        /**
         * Progress towards provisioning a given asset.
         */
        equinixStatus: string;
    }

    export interface GetNetworksDataProject {
        /**
         * Customer project identifier
         */
        projectId: string;
    }

    export interface GetNetworksFilter {
        /**
         * Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
         */
        group?: string;
        /**
         * Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, ILIKE, NOT ILIKE, IN, NOT IN]
         */
        operator: string;
        /**
         * Possible field names to use on filters. One of [/name /uuid /scope /type /operation/equinixStatus /location/region /project/projectId /account/globalCustId /account/orgId /deletedDate /_*]
         */
        property: string;
        /**
         * The values that you want to apply the property+operator combination to in order to filter your data search
         */
        values: string[];
    }

    export interface GetNetworksPagination {
        /**
         * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
         */
        limit?: number;
        /**
         * The page offset for the pagination request. Index of the first element. Default is 0.
         */
        offset?: number;
    }

    export interface GetNetworksSort {
        /**
         * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
         */
        direction?: string;
        /**
         * The property name to use in sorting. One of [/name /uuid /scope /operation/equinixStatus /location/region /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
         */
        property?: string;
    }

    export interface GetPortAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetPortChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetPortDevice {
        /**
         * Port name
         */
        name: string;
        /**
         * Port device redundancy
         */
        redundancies: outputs.fabric.GetPortDeviceRedundancy[];
    }

    export interface GetPortDeviceRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetPortEncapsulation {
        /**
         * Port encapsulation Tag Protocol Identifier
         */
        tagProtocolId: string;
        /**
         * Port encapsulation protocol type
         */
        type: string;
    }

    export interface GetPortLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetPortOperation {
        /**
         * Total number of current connections
         */
        connectionCount: number;
        /**
         * Date and time at which port availability changed
         */
        opStatusChangedAt: string;
        /**
         * Port operation status
         */
        operationalStatus: string;
    }

    export interface GetPortRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetPortsDatum {
        /**
         * Customer account information that is associated with this port
         */
        accounts: outputs.fabric.GetPortsDatumAccount[];
        /**
         * Port available bandwidth in Mbps
         */
        availableBandwidth: number;
        /**
         * Port bandwidth in Mbps
         */
        bandwidth: number;
        /**
         * Captures port lifecycle change information
         */
        changeLogs: outputs.fabric.GetPortsDatumChangeLog[];
        /**
         * Port description
         */
        description: string;
        /**
         * Port device
         */
        devices: outputs.fabric.GetPortsDatumDevice[];
        /**
         * Port encapsulation protocol
         */
        encapsulations: outputs.fabric.GetPortsDatumEncapsulation[];
        /**
         * Port URI information
         */
        href: string;
        /**
         * Port Lag
         */
        lagEnabled: boolean;
        /**
         * Port location information
         */
        locations: outputs.fabric.GetPortsDatumLocation[];
        /**
         * Port name
         */
        name: string;
        /**
         * Port specific operational data
         */
        operations: outputs.fabric.GetPortsDatumOperation[];
        /**
         * Port redundancy information
         */
        redundancies: outputs.fabric.GetPortsDatumRedundancy[];
        /**
         * Port service type
         */
        serviceType: string;
        /**
         * Port state
         */
        state: string;
        /**
         * Port type
         */
        type: string;
        /**
         * Port used bandwidth in Mbps
         */
        usedBandwidth: number;
        /**
         * Equinix-assigned port identifier
         */
        uuid: string;
    }

    export interface GetPortsDatumAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetPortsDatumChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetPortsDatumDevice {
        /**
         * Port name
         */
        name: string;
        /**
         * Port device redundancy
         */
        redundancies: outputs.fabric.GetPortsDatumDeviceRedundancy[];
    }

    export interface GetPortsDatumDeviceRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetPortsDatumEncapsulation {
        /**
         * Port encapsulation Tag Protocol Identifier
         */
        tagProtocolId: string;
        /**
         * Port encapsulation protocol type
         */
        type: string;
    }

    export interface GetPortsDatumLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetPortsDatumOperation {
        /**
         * Total number of current connections
         */
        connectionCount: number;
        /**
         * Date and time at which port availability changed
         */
        opStatusChangedAt: string;
        /**
         * Port operation status
         */
        operationalStatus: string;
    }

    export interface GetPortsDatumRedundancy {
        /**
         * Access point redundancy
         */
        enabled: boolean;
        /**
         * Port redundancy group
         */
        group: string;
        /**
         * Priority type-Primary or Secondary
         */
        priority: string;
    }

    export interface GetPortsFilter {
        /**
         * Query Parameter to Get Ports By Name
         */
        name: string;
    }

    export interface GetRoutingProtocolBfd {
        /**
         * Bidirectional Forwarding Detection enablement
         */
        enabled: boolean;
        /**
         * Interval range between the received BFD control packets
         */
        interval?: string;
    }

    export interface GetRoutingProtocolBgpIpv4 {
        /**
         * Customer side peering ip
         */
        customerPeerIp: string;
        /**
         * Admin status for the BGP session
         */
        enabled?: boolean;
        /**
         * Equinix side peering ip
         */
        equinixPeerIp: string;
    }

    export interface GetRoutingProtocolBgpIpv6 {
        /**
         * Customer side peering ip
         */
        customerPeerIp: string;
        /**
         * Admin status for the BGP session
         */
        enabled?: boolean;
        /**
         * Equinix side peering ip
         */
        equinixPeerIp: string;
    }

    export interface GetRoutingProtocolChange {
        /**
         * Routing Protocol Change URI
         */
        href: string;
        /**
         * Type of change
         */
        type: string;
        /**
         * Uniquely identifies a change
         */
        uuid: string;
    }

    export interface GetRoutingProtocolChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetRoutingProtocolDirectIpv4 {
        /**
         * Equinix side Interface IP address
         */
        equinixIfaceIp: string;
    }

    export interface GetRoutingProtocolDirectIpv6 {
        /**
         * Equinix side Interface IP address
         */
        equinixIfaceIp?: string;
    }

    export interface GetRoutingProtocolOperation {
        /**
         * Errors occurred
         */
        errors: outputs.fabric.GetRoutingProtocolOperationError[];
    }

    export interface GetRoutingProtocolOperationError {
        /**
         * Pricing error additional Info
         */
        additionalInfos: outputs.fabric.GetRoutingProtocolOperationErrorAdditionalInfo[];
        /**
         * CorrelationId
         */
        correlationId: string;
        /**
         * Details
         */
        details: string;
        /**
         * Error  code
         */
        errorCode: string;
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Help
         */
        help: string;
    }

    export interface GetRoutingProtocolOperationErrorAdditionalInfo {
        /**
         * Property at which the error potentially occurred
         */
        property: string;
        /**
         * Reason for the error
         */
        reason: string;
    }

    export interface GetServiceProfileAccessPointTypeConfig {
        /**
         * Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
         */
        allowBandwidthAutoApproval?: boolean;
        /**
         * Availability of a bandwidth upgrade. The default is false
         */
        allowBandwidthUpgrade?: boolean;
        /**
         * Setting to enable or disable the ability of the buyer to customize the bandwidth
         */
        allowCustomBandwidth?: boolean;
        /**
         * Setting to allow or prohibit remote connections to the service profile
         */
        allowRemoteConnections?: boolean;
        /**
         * Api configuration details
         */
        apiConfig?: outputs.fabric.GetServiceProfileAccessPointTypeConfigApiConfig;
        /**
         * Authentication key details
         */
        authenticationKey?: outputs.fabric.GetServiceProfileAccessPointTypeConfigAuthenticationKey;
        /**
         * Percentage of port bandwidth at which an allocation alert is generated
         */
        bandwidthAlertThreshold?: number;
        /**
         * Custom name for Connection
         */
        connectionLabel?: string;
        /**
         * Mandate redundant connections
         */
        connectionRedundancyRequired?: boolean;
        /**
         * Enable auto generate service key
         */
        enableAutoGenerateServiceKey?: boolean;
        /**
         * Link protocol configuration details
         */
        linkProtocolConfig?: outputs.fabric.GetServiceProfileAccessPointTypeConfigLinkProtocolConfig;
        /**
         * Supported bandwidths
         */
        supportedBandwidths?: number[];
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfileAccessPointTypeConfigApiConfig {
        /**
         * Setting showing that oversubscription support is available (true) or not (false). The default is false
         */
        allowOverSubscription?: boolean;
        /**
         * Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
         */
        apiAvailable?: boolean;
        /**
         * Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
         */
        bandwidthFromApi?: boolean;
        /**
         * Setting indicating that the port is managed by Equinix (true) or not (false)
         */
        equinixManagedPort?: boolean;
        /**
         * Setting indicating that the VLAN is managed by Equinix (true) or not (false)
         */
        equinixManagedVlan?: boolean;
        /**
         * A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
         */
        integrationId?: string;
        /**
         * Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
         */
        overSubscriptionLimit?: number;
    }

    export interface GetServiceProfileAccessPointTypeConfigAuthenticationKey {
        /**
         * Description of authorization key
         */
        description?: string;
        /**
         * Name of the parameter that must be provided to authorize the connection.
         */
        label?: string;
        /**
         * Requirement to configure an authentication key.
         */
        required?: boolean;
    }

    export interface GetServiceProfileAccessPointTypeConfigLinkProtocolConfig {
        /**
         * Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
         */
        encapsulation?: string;
        /**
         * Additional tagging information required by the seller profile.
         */
        encapsulationStrategy?: string;
        /**
         * Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
         */
        reuseVlanSTag?: boolean;
    }

    export interface GetServiceProfileAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetServiceProfileChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetServiceProfileCustomField {
        /**
         * Required field
         */
        captureInEmail?: boolean;
        /**
         * Data type
         */
        dataType: string;
        /**
         * Description
         */
        description?: string;
        /**
         * Label
         */
        label: string;
        /**
         * Options
         */
        options?: string[];
        /**
         * Required field
         */
        required: boolean;
    }

    export interface GetServiceProfileMarketingInfo {
        /**
         * Logo
         */
        logo?: string;
        /**
         * Process Step
         */
        processSteps?: outputs.fabric.GetServiceProfileMarketingInfoProcessStep[];
        /**
         * Promotion
         */
        promotion?: boolean;
    }

    export interface GetServiceProfileMarketingInfoProcessStep {
        /**
         * Description
         */
        description?: string;
        /**
         * Sub Title
         */
        subTitle?: string;
        /**
         * Title
         */
        title?: string;
    }

    export interface GetServiceProfileMetro {
        /**
         * Metro Code - Example SV
         */
        code?: string;
        /**
         * Display Name
         */
        displayName?: string;
        /**
         * IBX- Equinix International Business Exchange list
         */
        ibxs?: string[];
        /**
         * In Trail
         */
        inTrail?: boolean;
        /**
         * Metro Name
         */
        name?: string;
        /**
         * Seller Regions
         */
        sellerRegions?: {[key: string]: string};
    }

    export interface GetServiceProfileNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetServiceProfilePort {
        /**
         * Cross Connect Id
         */
        crossConnectId?: string;
        /**
         * Colo/Port Location
         */
        location?: outputs.fabric.GetServiceProfilePortLocation;
        /**
         * Seller Region
         */
        sellerRegion?: string;
        /**
         * Seller Region details
         */
        sellerRegionDescription?: string;
        /**
         * Colo/Port Type
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfilePortLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetServiceProfileProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetServiceProfileVirtualDevice {
        /**
         * Device Interface Uuid
         */
        interfaceUuid?: string;
        /**
         * Device Location
         */
        location?: outputs.fabric.GetServiceProfileVirtualDeviceLocation;
        /**
         * Virtual Device Type
         */
        type: string;
        /**
         * Virtual Device Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfileVirtualDeviceLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetServiceProfilesDatum {
        /**
         * Access point config information
         */
        accessPointTypeConfigs: outputs.fabric.GetServiceProfilesDatumAccessPointTypeConfig[];
        /**
         * Service Profile Owner Account Information
         */
        accounts: outputs.fabric.GetServiceProfilesDatumAccount[];
        /**
         * Array of contact emails
         */
        allowedEmails: string[];
        /**
         * Captures connection lifecycle change information
         */
        changeLogs: outputs.fabric.GetServiceProfilesDatumChangeLog[];
        /**
         * Custom Fields
         */
        customFields: outputs.fabric.GetServiceProfilesDatumCustomField[];
        /**
         * User-provided service description
         */
        description: string;
        /**
         * Service Profile URI response attribute
         */
        href: string;
        /**
         * Marketing Info
         */
        marketingInfos: outputs.fabric.GetServiceProfilesDatumMarketingInfo[];
        /**
         * Access point config information
         */
        metros: outputs.fabric.GetServiceProfilesDatumMetro[];
        /**
         * Customer-assigned service profile name
         */
        name: string;
        /**
         * Preferences for notifications on connection configuration or status changes
         */
        notifications: outputs.fabric.GetServiceProfilesDatumNotification[];
        /**
         * Ports
         */
        ports: outputs.fabric.GetServiceProfilesDatumPort[];
        /**
         * Project information
         */
        projects: outputs.fabric.GetServiceProfilesDatumProject[];
        /**
         * Self Profile indicating if the profile is created for customer's  self use
         */
        selfProfile: boolean;
        /**
         * Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED
         */
        state: string;
        /**
         * Tags attached to the connection
         */
        tags: string[];
        /**
         * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
         */
        type: string;
        /**
         * Equinix assigned service profile identifier
         */
        uuid: string;
        /**
         * Flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide
         */
        viewPoint: string;
        /**
         * Virtual Devices
         */
        virtualDevices: outputs.fabric.GetServiceProfilesDatumVirtualDevice[];
        /**
         * Service profile visibility - PUBLIC, PRIVATE
         */
        visibility: string;
    }

    export interface GetServiceProfilesDatumAccessPointTypeConfig {
        /**
         * Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
         */
        allowBandwidthAutoApproval?: boolean;
        /**
         * Availability of a bandwidth upgrade. The default is false
         */
        allowBandwidthUpgrade?: boolean;
        /**
         * Setting to enable or disable the ability of the buyer to customize the bandwidth
         */
        allowCustomBandwidth?: boolean;
        /**
         * Setting to allow or prohibit remote connections to the service profile
         */
        allowRemoteConnections?: boolean;
        /**
         * Api configuration details
         */
        apiConfig?: outputs.fabric.GetServiceProfilesDatumAccessPointTypeConfigApiConfig;
        /**
         * Authentication key details
         */
        authenticationKey?: outputs.fabric.GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKey;
        /**
         * Percentage of port bandwidth at which an allocation alert is generated
         */
        bandwidthAlertThreshold?: number;
        /**
         * Custom name for Connection
         */
        connectionLabel?: string;
        /**
         * Mandate redundant connections
         */
        connectionRedundancyRequired?: boolean;
        /**
         * Enable auto generate service key
         */
        enableAutoGenerateServiceKey?: boolean;
        /**
         * Link protocol configuration details
         */
        linkProtocolConfig?: outputs.fabric.GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig;
        /**
         * Supported bandwidths
         */
        supportedBandwidths?: number[];
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfilesDatumAccessPointTypeConfigApiConfig {
        /**
         * Setting showing that oversubscription support is available (true) or not (false). The default is false
         */
        allowOverSubscription?: boolean;
        /**
         * Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
         */
        apiAvailable?: boolean;
        /**
         * Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
         */
        bandwidthFromApi?: boolean;
        /**
         * Setting indicating that the port is managed by Equinix (true) or not (false)
         */
        equinixManagedPort?: boolean;
        /**
         * Setting indicating that the VLAN is managed by Equinix (true) or not (false)
         */
        equinixManagedVlan?: boolean;
        /**
         * A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
         */
        integrationId?: string;
        /**
         * Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
         */
        overSubscriptionLimit?: number;
    }

    export interface GetServiceProfilesDatumAccessPointTypeConfigAuthenticationKey {
        /**
         * Description of authorization key
         */
        description?: string;
        /**
         * Name of the parameter that must be provided to authorize the connection.
         */
        label?: string;
        /**
         * Requirement to configure an authentication key.
         */
        required?: boolean;
    }

    export interface GetServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig {
        /**
         * Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
         */
        encapsulation?: string;
        /**
         * Additional tagging information required by the seller profile.
         */
        encapsulationStrategy?: string;
        /**
         * Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
         */
        reuseVlanSTag?: boolean;
    }

    export interface GetServiceProfilesDatumAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface GetServiceProfilesDatumChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface GetServiceProfilesDatumCustomField {
        /**
         * Required field
         */
        captureInEmail?: boolean;
        /**
         * Data type
         */
        dataType: string;
        /**
         * Description
         */
        description?: string;
        /**
         * Label
         */
        label: string;
        /**
         * Options
         */
        options?: string[];
        /**
         * Required field
         */
        required: boolean;
    }

    export interface GetServiceProfilesDatumMarketingInfo {
        /**
         * Logo
         */
        logo?: string;
        /**
         * Process Step
         */
        processSteps?: outputs.fabric.GetServiceProfilesDatumMarketingInfoProcessStep[];
        /**
         * Promotion
         */
        promotion?: boolean;
    }

    export interface GetServiceProfilesDatumMarketingInfoProcessStep {
        /**
         * Description
         */
        description?: string;
        /**
         * Sub Title
         */
        subTitle?: string;
        /**
         * Title
         */
        title?: string;
    }

    export interface GetServiceProfilesDatumMetro {
        /**
         * Metro Code - Example SV
         */
        code?: string;
        /**
         * Display Name
         */
        displayName?: string;
        /**
         * IBX- Equinix International Business Exchange list
         */
        ibxs?: string[];
        /**
         * In Trail
         */
        inTrail?: boolean;
        /**
         * Metro Name
         */
        name?: string;
        /**
         * Seller Regions
         */
        sellerRegions?: {[key: string]: string};
    }

    export interface GetServiceProfilesDatumNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface GetServiceProfilesDatumPort {
        /**
         * Cross Connect Id
         */
        crossConnectId?: string;
        /**
         * Colo/Port Location
         */
        location?: outputs.fabric.GetServiceProfilesDatumPortLocation;
        /**
         * Seller Region
         */
        sellerRegion?: string;
        /**
         * Seller Region details
         */
        sellerRegionDescription?: string;
        /**
         * Colo/Port Type
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfilesDatumPortLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetServiceProfilesDatumProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface GetServiceProfilesDatumVirtualDevice {
        /**
         * Device Interface Uuid
         */
        interfaceUuid?: string;
        /**
         * Device Location
         */
        location?: outputs.fabric.GetServiceProfilesDatumVirtualDeviceLocation;
        /**
         * Virtual Device Type
         */
        type: string;
        /**
         * Virtual Device Uuid
         */
        uuid: string;
    }

    export interface GetServiceProfilesDatumVirtualDeviceLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface GetServiceProfilesFilter {
        /**
         * Operators to use on your filtered field with the values given. One of [=]
         */
        operator: string;
        /**
         * Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
         */
        property: string;
        /**
         * The values that you want to apply the property+operator combination to in order to filter your data search
         */
        values: string[];
    }

    export interface GetServiceProfilesPagination {
        /**
         * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
         */
        limit?: number;
        /**
         * The page offset for the pagination request. Index of the first element. Default is 0.
         */
        offset?: number;
    }

    export interface GetServiceProfilesSort {
        /**
         * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
         */
        direction?: string;
        /**
         * The property name to use in sorting. One of [/name /uuid /state /location/metroCode /location/metroName /package/code /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
         */
        property?: string;
    }

    export interface NetworkChange {
        /**
         * Absolute URL that returns the details of the given change.
         * Example: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784
         */
        href: string;
        /**
         * Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION
         */
        type: string;
        /**
         * Asset change request identifier.
         */
        uuid: string;
    }

    export interface NetworkChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface NetworkLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface NetworkNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface NetworkOperation {
        /**
         * Progress towards provisioning a given asset.
         */
        equinixStatus: string;
    }

    export interface NetworkProject {
        /**
         * Customer project identifier
         */
        projectId: string;
    }

    export interface RoutingProtocolBfd {
        /**
         * Bidirectional Forwarding Detection enablement
         */
        enabled: boolean;
        /**
         * Interval range between the received BFD control packets
         */
        interval?: string;
    }

    export interface RoutingProtocolBgpIpv4 {
        /**
         * Customer side peering ip
         */
        customerPeerIp: string;
        /**
         * Admin status for the BGP session
         */
        enabled?: boolean;
        /**
         * Equinix side peering ip
         */
        equinixPeerIp: string;
    }

    export interface RoutingProtocolBgpIpv6 {
        /**
         * Customer side peering ip
         */
        customerPeerIp: string;
        /**
         * Admin status for the BGP session
         */
        enabled?: boolean;
        /**
         * Equinix side peering ip
         */
        equinixPeerIp: string;
    }

    export interface RoutingProtocolChange {
        /**
         * Routing Protocol Change URI
         */
        href: string;
        /**
         * Type of change
         */
        type: string;
        /**
         * Uniquely identifies a change
         */
        uuid: string;
    }

    export interface RoutingProtocolChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface RoutingProtocolDirectIpv4 {
        /**
         * Equinix side Interface IP address
         */
        equinixIfaceIp: string;
    }

    export interface RoutingProtocolDirectIpv6 {
        /**
         * Equinix side Interface IP address
         */
        equinixIfaceIp?: string;
    }

    export interface RoutingProtocolOperation {
        /**
         * Errors occurred
         */
        errors: outputs.fabric.RoutingProtocolOperationError[];
    }

    export interface RoutingProtocolOperationError {
        /**
         * Pricing error additional Info
         */
        additionalInfos: outputs.fabric.RoutingProtocolOperationErrorAdditionalInfo[];
        /**
         * CorrelationId
         */
        correlationId: string;
        /**
         * Details
         */
        details: string;
        /**
         * Error  code
         */
        errorCode: string;
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Help
         */
        help: string;
    }

    export interface RoutingProtocolOperationErrorAdditionalInfo {
        /**
         * Property at which the error potentially occurred
         */
        property: string;
        /**
         * Reason for the error
         */
        reason: string;
    }

    export interface ServiceProfileAccessPointTypeConfig {
        /**
         * Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
         */
        allowBandwidthAutoApproval?: boolean;
        /**
         * Availability of a bandwidth upgrade. The default is false
         */
        allowBandwidthUpgrade?: boolean;
        /**
         * Setting to enable or disable the ability of the buyer to customize the bandwidth
         */
        allowCustomBandwidth?: boolean;
        /**
         * Setting to allow or prohibit remote connections to the service profile
         */
        allowRemoteConnections?: boolean;
        /**
         * Api configuration details
         */
        apiConfig?: outputs.fabric.ServiceProfileAccessPointTypeConfigApiConfig;
        /**
         * Authentication key details
         */
        authenticationKey?: outputs.fabric.ServiceProfileAccessPointTypeConfigAuthenticationKey;
        /**
         * Percentage of port bandwidth at which an allocation alert is generated
         */
        bandwidthAlertThreshold?: number;
        /**
         * Custom name for Connection
         */
        connectionLabel?: string;
        /**
         * Mandate redundant connections
         */
        connectionRedundancyRequired?: boolean;
        /**
         * Enable auto generate service key
         */
        enableAutoGenerateServiceKey?: boolean;
        /**
         * Link protocol configuration details
         */
        linkProtocolConfig?: outputs.fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfig;
        /**
         * Supported bandwidths
         */
        supportedBandwidths?: number[];
        /**
         * Type of access point type config - VD, COLO
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface ServiceProfileAccessPointTypeConfigApiConfig {
        /**
         * Setting showing that oversubscription support is available (true) or not (false). The default is false
         */
        allowOverSubscription?: boolean;
        /**
         * Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
         */
        apiAvailable?: boolean;
        /**
         * Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
         */
        bandwidthFromApi?: boolean;
        /**
         * Setting indicating that the port is managed by Equinix (true) or not (false)
         */
        equinixManagedPort?: boolean;
        /**
         * Setting indicating that the VLAN is managed by Equinix (true) or not (false)
         */
        equinixManagedVlan?: boolean;
        /**
         * A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
         */
        integrationId?: string;
        /**
         * Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
         */
        overSubscriptionLimit?: number;
    }

    export interface ServiceProfileAccessPointTypeConfigAuthenticationKey {
        /**
         * Description of authorization key
         */
        description?: string;
        /**
         * Name of the parameter that must be provided to authorize the connection.
         */
        label?: string;
        /**
         * Requirement to configure an authentication key.
         */
        required?: boolean;
    }

    export interface ServiceProfileAccessPointTypeConfigLinkProtocolConfig {
        /**
         * Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
         */
        encapsulation?: string;
        /**
         * Additional tagging information required by the seller profile.
         */
        encapsulationStrategy?: string;
        /**
         * Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
         */
        reuseVlanSTag?: boolean;
    }

    export interface ServiceProfileAccount {
        /**
         * Legal name of the accountholder.
         */
        accountName: string;
        /**
         * Equinix-assigned account number.
         */
        accountNumber: number;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalCustId: string;
        /**
         * Equinix-assigned ID of the subscriber's parent organization.
         */
        globalOrgId: string;
        /**
         * Equinix-assigned name of the subscriber's parent organization.
         */
        globalOrganizationName: string;
        /**
         * Equinix-assigned ID of the subscriber's organization.
         */
        orgId: number;
        /**
         * Equinix-assigned name of the subscriber's organization.
         */
        organizationName: string;
        /**
         * Enterprise datastore id
         */
        ucmId: string;
    }

    export interface ServiceProfileChangeLog {
        /**
         * Created by User Key
         */
        createdBy: string;
        /**
         * Created by User Email Address
         */
        createdByEmail: string;
        /**
         * Created by User Full Name
         */
        createdByFullName: string;
        /**
         * Created by Date and Time
         */
        createdDateTime: string;
        /**
         * Deleted by User Key
         */
        deletedBy: string;
        /**
         * Deleted by User Email Address
         */
        deletedByEmail: string;
        /**
         * Deleted by User Full Name
         */
        deletedByFullName: string;
        /**
         * Deleted by Date and Time
         */
        deletedDateTime: string;
        /**
         * Updated by User Key
         */
        updatedBy: string;
        /**
         * Updated by User Email Address
         */
        updatedByEmail: string;
        /**
         * Updated by User Full Name
         */
        updatedByFullName: string;
        /**
         * Updated by Date and Time
         */
        updatedDateTime: string;
    }

    export interface ServiceProfileCustomField {
        /**
         * Required field
         */
        captureInEmail?: boolean;
        /**
         * Data type
         */
        dataType: string;
        /**
         * Description
         */
        description?: string;
        /**
         * Label
         */
        label: string;
        /**
         * Options
         */
        options?: string[];
        /**
         * Required field
         */
        required: boolean;
    }

    export interface ServiceProfileMarketingInfo {
        /**
         * Logo
         */
        logo?: string;
        /**
         * Process Step
         */
        processSteps?: outputs.fabric.ServiceProfileMarketingInfoProcessStep[];
        /**
         * Promotion
         */
        promotion?: boolean;
    }

    export interface ServiceProfileMarketingInfoProcessStep {
        /**
         * Description
         */
        description?: string;
        /**
         * Sub Title
         */
        subTitle?: string;
        /**
         * Title
         */
        title?: string;
    }

    export interface ServiceProfileMetro {
        /**
         * Metro Code - Example SV
         */
        code?: string;
        /**
         * Display Name
         */
        displayName?: string;
        /**
         * IBX- Equinix International Business Exchange list
         */
        ibxs?: string[];
        /**
         * In Trail
         */
        inTrail?: boolean;
        /**
         * Metro Name
         */
        name?: string;
        /**
         * Seller Regions
         */
        sellerRegions?: {[key: string]: string};
    }

    export interface ServiceProfileNotification {
        /**
         * Array of contact emails
         */
        emails: string[];
        /**
         * Send interval
         */
        sendInterval?: string;
        /**
         * Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS
         */
        type: string;
    }

    export interface ServiceProfilePort {
        /**
         * Cross Connect Id
         */
        crossConnectId?: string;
        /**
         * Colo/Port Location
         */
        location?: outputs.fabric.ServiceProfilePortLocation;
        /**
         * Seller Region
         */
        sellerRegion?: string;
        /**
         * Seller Region details
         */
        sellerRegionDescription?: string;
        /**
         * Colo/Port Type
         */
        type: string;
        /**
         * Colo/Port Uuid
         */
        uuid: string;
    }

    export interface ServiceProfilePortLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

    export interface ServiceProfileProject {
        /**
         * Unique Resource URL
         */
        href: string;
        /**
         * Project Id
         */
        projectId: string;
    }

    export interface ServiceProfileVirtualDevice {
        /**
         * Device Interface Uuid
         */
        interfaceUuid?: string;
        /**
         * Device Location
         */
        location?: outputs.fabric.ServiceProfileVirtualDeviceLocation;
        /**
         * Virtual Device Type
         */
        type: string;
        /**
         * Virtual Device Uuid
         */
        uuid: string;
    }

    export interface ServiceProfileVirtualDeviceLocation {
        /**
         * IBX Code
         */
        ibx: string;
        /**
         * Access point metro code
         */
        metroCode: string;
        /**
         * Access point metro name
         */
        metroName: string;
        /**
         * Access point region
         */
        region: string;
    }

}

export namespace metal {
    export interface DeviceBehavior {
        /**
         * List of attributes that are allowed to change without recreating the instance. Supported attributes: `customData`, `userData`
         */
        allowChanges?: string[];
    }

    export interface DeviceIpAddress {
        /**
         * CIDR suffix for IP block assigned to this device
         */
        cidr?: number;
        /**
         * IDs of reservations to pick the blocks from
         */
        reservationIds?: string[];
        /**
         * one of public*ipv4,private*ipv4,public_ipv6
         */
        type: string;
    }

    export interface DeviceNetwork {
        /**
         * IPv4 or IPv6 address string
         */
        address: string;
        /**
         * CIDR suffix for IP address block to be assigned, i.e. amount of addresses
         */
        cidr: number;
        /**
         * IP version - "4" or "6"
         */
        family: number;
        /**
         * Address of router
         */
        gateway: string;
        /**
         * Whether the address is routable from the Internet
         */
        public: boolean;
    }

    export interface DevicePort {
        /**
         * Whether this port is part of a bond in bonded network setup
         */
        bonded: boolean;
        /**
         * The ID of the device
         */
        id: string;
        /**
         * MAC address assigned to the port
         */
        mac: string;
        /**
         * Name of the port (e.g. eth0, or bond0)
         */
        name: string;
        /**
         * One of [private_ipv4, public_ipv4, publicIpv6]
         */
        type: string;
    }

    export interface DeviceReinstall {
        /**
         * Whether the OS disk should be filled with `00h` bytes before reinstall
         */
        deprovisionFast?: boolean;
        /**
         * Whether the device should be reinstalled instead of destroyed
         */
        enabled?: boolean;
        /**
         * Whether the non-OS disks should be kept or wiped during reinstall
         */
        preserveData?: boolean;
    }

    export interface GatewayTimeouts {
        /**
         * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
         */
        delete?: string;
    }

    export interface GetDeviceBgpNeighborsBgpNeighbor {
        /**
         * IP address version, 4 or 6.
         */
        addressFamily: number;
        /**
         * Local autonomous system number.
         */
        customerAs: number;
        /**
         * Local used peer IP address.
         */
        customerIp: string;
        /**
         * Whether BGP session is password enabled.
         */
        md5Enabled: boolean;
        /**
         * BGP session password in plaintext (not a checksum).
         */
        md5Password: string;
        /**
         * Whether the neighbor is in EBGP multihop session.
         */
        multihop: boolean;
        /**
         * Peer AS number (different than customerAs for EBGP).
         */
        peerAs: number;
        /**
         * Array of IP addresses of this neighbor's peers.
         */
        peerIps?: string[];
        /**
         * Array of incoming routes.
         */
        routesIns: outputs.metal.GetDeviceBgpNeighborsBgpNeighborRoutesIn[];
        /**
         * Array of outgoing routes in the same format.
         */
        routesOuts: outputs.metal.GetDeviceBgpNeighborsBgpNeighborRoutesOut[];
    }

    export interface GetDeviceBgpNeighborsBgpNeighborRoutesIn {
        /**
         * (bool) Whether the route is exact.
         */
        exact: boolean;
        /**
         * CIDR expression of route (IP/mask).
         */
        route: string;
    }

    export interface GetDeviceBgpNeighborsBgpNeighborRoutesOut {
        /**
         * (bool) Whether the route is exact.
         */
        exact: boolean;
        /**
         * CIDR expression of route (IP/mask).
         */
        route: string;
    }

    export interface GetDeviceNetwork {
        /**
         * IPv4 or IPv6 address string
         */
        address: string;
        /**
         * Bit length of the network mask of the address
         */
        cidr: number;
        /**
         * IP version - "4" or "6"
         */
        family: number;
        /**
         * Address of router
         */
        gateway: string;
        /**
         * Whether the address is routable from the Internet
         */
        public: boolean;
    }

    export interface GetDevicePort {
        /**
         * Whether this port is part of a bond in bonded network setup
         */
        bonded: boolean;
        /**
         * The ID of the device
         */
        id: string;
        /**
         * MAC address assigned to the port
         */
        mac: string;
        /**
         * Name of the port (e.g. eth0, or bond0)
         */
        name: string;
        /**
         * Type of the port (e.g. NetworkPort or NetworkBondPort)
         */
        type: string;
    }

    export interface GetDevicesDevice {
        /**
         * The ipv4 private IP assigned to the device
         */
        accessPrivateIpv4: string;
        /**
         * The ipv4 management IP assigned to the device
         */
        accessPublicIpv4: string;
        /**
         * The ipv6 management IP assigned to the device
         */
        accessPublicIpv6: string;
        alwaysPxe: boolean;
        /**
         * The billing cycle of the device (monthly or hourly)
         */
        billingCycle: string;
        /**
         * Description string for the device
         */
        description: string;
        /**
         * Device ID
         */
        deviceId: string;
        /**
         * The facility where the device is deployed
         *
         * @deprecated Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
         */
        facility: string;
        /**
         * The id of hardware reservation which this device occupies
         */
        hardwareReservationId: string;
        /**
         * The device name
         */
        hostname: string;
        ipxeScriptUrl: string;
        /**
         * The metro where the device is deployed
         */
        metro: string;
        /**
         * L2 network type of the device, one oflayer3, hybrid, layer2-individual, layer2-bonded
         */
        networkType: string;
        /**
         * The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 networks: ublic IPv4 at equinix_metal_device.name.network.0, IPv6 at equinix_metal_device.name.network.1 and private IPv4 at equinix_metal_device.name.network.2. Elastic addresses then stack by type - an assigned public IPv4 will go after the management public IPv4 (to index 1), and will then shift the indices of the IPv6 and private IPv4. Assigned private IPv4 will go after the management private IPv4 (to the end of the network list).
         */
        networks: outputs.metal.GetDevicesDeviceNetwork[];
        /**
         * The operating system running on the device
         */
        operatingSystem: string;
        /**
         * The hardware config of the device
         */
        plan: string;
        /**
         * Ports assigned to the device
         */
        ports: outputs.metal.GetDevicesDevicePort[];
        /**
         * ID of project containing the devices. Exactly one of `projectId` and `organizationId` must be set.
         */
        projectId: string;
        /**
         * Root password to the server (if still available)
         */
        rootPassword: string;
        /**
         * The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device
         */
        sosHostname: string;
        /**
         * List of IDs of SSH keys deployed in the device, can be both user or project SSH keys
         */
        sshKeyIds: string[];
        /**
         * The state of the device
         */
        state: string;
        storage: string;
        /**
         * Tags attached to the device
         */
        tags: string[];
    }

    export interface GetDevicesDeviceNetwork {
        /**
         * IPv4 or IPv6 address string
         */
        address: string;
        /**
         * Bit length of the network mask of the address
         */
        cidr: number;
        /**
         * IP version - "4" or "6"
         */
        family: number;
        /**
         * Address of router
         */
        gateway: string;
        /**
         * Whether the address is routable from the Internet
         */
        public: boolean;
    }

    export interface GetDevicesDevicePort {
        /**
         * Whether this port is part of a bond in bonded network setup
         */
        bonded: boolean;
        /**
         * The ID of the device
         */
        id: string;
        /**
         * MAC address assigned to the port
         */
        mac: string;
        /**
         * Name of the port (e.g. eth0, or bond0)
         */
        name: string;
        /**
         * Type of the port (e.g. NetworkPort or NetworkBondPort)
         */
        type: string;
    }

    export interface GetDevicesFilter {
        /**
         * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
         *
         * All fields in the `devices` block defined below can be used as attribute for both `sort` and `filter` blocks.
         */
        all?: boolean;
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: string;
        /**
         * The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
         */
        matchBy?: string;
        /**
         * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
         */
        values: string[];
    }

    export interface GetDevicesSort {
        /**
         * The attribute used to sort the results. Sort attributes are case-sensitive
         */
        attribute: string;
        /**
         * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
         */
        direction?: string;
    }

    export interface GetFacilityCapacity {
        /**
         * Device plan that must be available in selected location.
         */
        plan: string;
        /**
         * Minimun number of devices that must be available in selected location. Default is `1`.
         */
        quantity?: number;
    }

    export interface GetInterconnectionPort {
        /**
         * Port UUID.
         */
        id: string;
        /**
         * Port link status.
         */
        linkStatus: string;
        /**
         * Port name.
         */
        name: string;
        /**
         * Port role - primary or secondary.
         */
        role: string;
        /**
         * Port speed in bits per second.
         */
        speed: number;
        /**
         * Port status.
         */
        status: string;
        /**
         * List of IDs of virtual cicruits attached to this port.
         */
        virtualCircuitIds: string[];
    }

    export interface GetInterconnectionServiceToken {
        /**
         * Expiration date of the service token.
         */
        expiresAt: string;
        /**
         * Port UUID.
         */
        id: string;
        /**
         * Maximum allowed speed for the service token, string like in the `speed` attribute.
         */
        maxAllowedSpeed: string;
        /**
         * Port role - primary or secondary.
         */
        role: string;
        state: string;
        /**
         * Token type, `aSide` or `zSide`.
         */
        type: string;
    }

    export interface GetMetroCapacity {
        /**
         * Device plan that must be available in selected location.
         */
        plan: string;
        /**
         * Minimum number of devices that must be available in selected location. Default is `1`.
         */
        quantity?: number;
    }

    export interface GetOrganizationAddress {
        /**
         * Postal address.
         */
        address: string;
        /**
         * City name.
         */
        city: string;
        /**
         * Two letter country code (ISO 3166-1 alpha-2), e.g. US.
         */
        country: string;
        /**
         * State name.
         */
        state: string;
        /**
         * Zip Code.
         */
        zipCode: string;
    }

    export interface GetPlansFilter {
        /**
         * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.
         *
         * All fields in the `plans` block defined below can be used as attribute for both `sort` and `filter` blocks.
         */
        all?: boolean;
        /**
         * The attribute used to filter. Filter attributes are case-sensitive
         */
        attribute: string;
        /**
         * The type of comparison to apply. One of: `in` , `re`, `substring`, `lessThan`, `lessThanOrEqual`, `greaterThan`, `greaterThanOrEqual`. Default is `in`.
         */
        matchBy?: string;
        /**
         * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
         */
        values: string[];
    }

    export interface GetPlansPlan {
        /**
         * list of metros where the plan is available
         */
        availableInMetros: string[];
        /**
         * (**Deprecated**) list of facilities where the plan is available
         *
         * @deprecated Use availableInMetros instead.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices
         */
        availableIns: string[];
        /**
         * plan class
         */
        class: string;
        /**
         * list of deployment types, e.g. on_demand, spot_market
         */
        deploymentTypes: string[];
        /**
         * description of the plan
         */
        description: string;
        /**
         * id of the plan
         */
        id: string;
        /**
         * flag showing if it's a legacy plan
         */
        legacy: boolean;
        /**
         * plan line, e.g. baremetal
         */
        line: string;
        /**
         * name of the plan
         */
        name: string;
        /**
         * plan hourly price
         */
        pricingHour: number;
        /**
         * plan monthly price
         */
        pricingMonth: number;
        /**
         * plan slug
         */
        slug: string;
    }

    export interface GetPlansSort {
        /**
         * The attribute used to sort the results. Sort attributes are case-sensitive
         */
        attribute: string;
        /**
         * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
         */
        direction?: string;
    }

    export interface GetProjectBgpConfig {
        /**
         * Autonomous System Number for local BGP deployment.
         */
        asn: number;
        /**
         * One of `private`, `public`.
         */
        deploymentType: string;
        /**
         * The maximum number of route filters allowed per server.
         */
        maxPrefix: number;
        /**
         * Password for BGP session in plaintext (not a checksum).
         */
        md5: string;
        /**
         * Status of BGP configuration in the project.
         */
        status: string;
    }

    export interface InterconnectionPort {
        id: string;
        linkStatus: string;
        name: string;
        role: string;
        speed: number;
        status: string;
        virtualCircuitIds: string[];
    }

    export interface InterconnectionServiceToken {
        expiresAt: string;
        id: string;
        maxAllowedSpeed: string;
        role: string;
        state: string;
        type: string;
    }

    export interface OrganizationAddress {
        /**
         * Postal address.
         */
        address: string;
        /**
         * City name.
         */
        city: string;
        /**
         * Two letter country code (ISO 3166-1 alpha-2), e.g. US.
         */
        country: string;
        /**
         * State name.
         */
        state: string;
        /**
         * Zip Code.
         */
        zipCode: string;
    }

    export interface ProjectBgpConfig {
        /**
         * Autonomous System Number for local BGP deployment.
         */
        asn: number;
        /**
         * `local` or `global`, the `local` is likely to be usable immediately, the `global` will need to be reviewed by Equinix Metal engineers.
         */
        deploymentType: string;
        /**
         * The maximum number of route filters allowed per server.
         */
        maxPrefix: number;
        /**
         * Password for BGP session in plaintext (not a checksum).
         */
        md5?: string;
        /**
         * status of BGP configuration in the project.
         */
        status: string;
    }

    export interface SpotMarketRequestInstanceParameters {
        alwaysPxe?: boolean;
        billingCycle: string;
        customdata?: string;
        description?: string;
        features?: string[];
        hostname: string;
        ipxeScriptUrl?: string;
        /**
         * Blocks deletion of the SpotMarketRequest device until the lock is disabled.
         */
        locked?: boolean;
        operatingSystem: string;
        plan: string;
        projectSshKeys?: string[];
        tags?: string[];
        terminationTime: string;
        /**
         * @deprecated Use instance_parameters.termination_time instead
         */
        termintationTime: string;
        userSshKeys?: string[];
        userdata?: string;
    }

}

export namespace networkedge {
    export interface AclTemplateDeviceDetail {
        /**
         * Device ACL provisioning status where template was applied. One of `PROVISIONING`, `PROVISIONED`.
         */
        aclStatus: string;
        /**
         * ACL template name.
         */
        name: string;
        /**
         * Device uuid.
         */
        uuid: string;
    }

    export interface AclTemplateInboundRule {
        /**
         * Inbound rule description, up to 200 characters.
         */
        description?: string;
        /**
         * Inbound traffic destination ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         */
        dstPort: string;
        /**
         * Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.
         */
        protocol: string;
        /**
         * Inbound rule sequence number
         */
        sequenceNumber: number;
        /**
         * Type of traffic source used in a given inbound rule
         *
         * @deprecated Source Type will not be returned
         */
        sourceType: string;
        /**
         * Inbound traffic source ports. Allowed values are a comma separated list of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.
         */
        srcPort: string;
        /**
         * Inbound traffic source IP subnet in CIDR format.
         */
        subnet?: string;
        /**
         * Inbound traffic source IP subnets in CIDR format.
         *
         * @deprecated Use Subnet instead
         */
        subnets?: string[];
    }

    export interface DeviceClusterDetails {
        /**
         * The ID of the cluster.
         */
        clusterId: string;
        /**
         * The name of the cluster device
         */
        clusterName: string;
        /**
         * An object that has `node0` configuration. See Cluster Details - Nodes below for more details.
         */
        node0: outputs.networkedge.DeviceClusterDetailsNode0;
        /**
         * An object that has `node1` configuration. See Cluster Details - Nodes below for more details.
         */
        node1: outputs.networkedge.DeviceClusterDetailsNode1;
        /**
         * The number of nodes in the cluster.
         */
        numOfNodes: number;
    }

    export interface DeviceClusterDetailsNode0 {
        /**
         * License file id. This is necessary for Fortinet and Juniper clusters.
         */
        licenseFileId?: string;
        /**
         * License token. This is necessary for Palo Alto clusters.
         */
        licenseToken?: string;
        /**
         * Device name.
         */
        name: string;
        /**
         * Device unique identifier.
         */
        uuid: string;
        /**
         * An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
         */
        vendorConfiguration?: outputs.networkedge.DeviceClusterDetailsNode0VendorConfiguration;
    }

    export interface DeviceClusterDetailsNode0VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters.
         */
        activationKey?: string;
        /**
         * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
         */
        adminPassword: string;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device.
         */
        controller1?: string;
        /**
         * Controller fqdn. This is required for Velocloud clusters.
         */
        controllerFqdn?: string;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
         */
        hostname?: string;
        /**
         * License id. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseId?: string;
        /**
         * License key. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseKey?: string;
        /**
         * Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
         */
        panoramaAuthKey?: string;
        /**
         * Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
         */
        panoramaIpAddress?: string;
        /**
         * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateAddress?: string;
        /**
         * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateCidrMask?: string;
        /**
         * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateGateway?: string;
        /**
         * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
         */
        rootPassword?: string;
    }

    export interface DeviceClusterDetailsNode1 {
        /**
         * License file id. This is necessary for Fortinet and Juniper clusters.
         */
        licenseFileId?: string;
        /**
         * License token. This is necessary for Palo Alto clusters.
         */
        licenseToken?: string;
        /**
         * Device name.
         */
        name: string;
        /**
         * Device unique identifier.
         */
        uuid: string;
        /**
         * An object that has fields relevant to the vendor of the cluster device. See Cluster Details - Nodes - Vendor Configuration below for more details.
         */
        vendorConfiguration?: outputs.networkedge.DeviceClusterDetailsNode1VendorConfiguration;
    }

    export interface DeviceClusterDetailsNode1VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters.
         */
        activationKey?: string;
        /**
         * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types.
         */
        adminPassword: string;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device.
         */
        controller1?: string;
        /**
         * Controller fqdn. This is required for Velocloud clusters.
         */
        controllerFqdn?: string;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
         */
        hostname?: string;
        /**
         * License id. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseId?: string;
        /**
         * License key. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseKey?: string;
        /**
         * Panorama Server Auth Key. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
         */
        panoramaAuthKey?: string;
        /**
         * Panorama Server IP Address. This field is relevant only for the PA-VM firewall devices to have integration with Panorama Server.
         */
        panoramaIpAddress?: string;
        /**
         * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateAddress?: string;
        /**
         * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateCidrMask?: string;
        /**
         * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateGateway?: string;
        /**
         * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster.
         */
        rootPassword?: string;
    }

    export interface DeviceInterface {
        /**
         * interface management type (Equinix Managed or empty).
         */
        assignedType: string;
        /**
         * interface identifier.
         */
        id: number;
        /**
         * interface IP address.
         */
        ipAddress: string;
        /**
         * interface MAC address.
         */
        macAddress: string;
        /**
         * Device name.
         */
        name: string;
        /**
         * interface operational status. One of `up`, `down`.
         */
        operationalStatus: string;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status: string;
        /**
         * interface type.
         */
        type: string;
    }

    export interface DeviceLinkDevice {
        /**
         * Device ASN number. Not required for self configured devices.
         */
        asn?: number;
        /**
         * Device identifier.
         */
        id: string;
        /**
         * Device network interface identifier to use for device link connection.
         */
        interfaceId?: number;
        /**
         * IP address from device link subnet that was assigned to the device
         */
        ipAddress: string;
        /**
         * device link provisioning status on a given device. One of `PROVISIONING`, `PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.
         */
        status: string;
    }

    export interface DeviceLinkLink {
        /**
         * billing account number to be used for connection charges
         */
        accountNumber: string;
        /**
         * connection destination metro code.
         */
        dstMetroCode: string;
        /**
         * connection destination zone code is not required.
         *
         * @deprecated DestinationZoneCode is not required
         */
        dstZoneCode?: string;
        /**
         * connection source metro code.
         */
        srcMetroCode: string;
        /**
         * connection source zone code is not required.
         *
         * @deprecated SourceZoneCode is not required
         */
        srcZoneCode?: string;
        /**
         * connection throughput.
         */
        throughput: string;
        /**
         * connection throughput unit (Mbps or Gbps).
         */
        throughputUnit: string;
    }

    export interface DeviceLinkMetroLink {
        /**
         * billing account number to be used for connection charges
         */
        accountNumber: string;
        /**
         * connection metro code.
         */
        metroCode: string;
        /**
         * connection throughput.
         */
        throughput: string;
        /**
         * connection throughput unit (Mbps or Gbps).
         */
        throughputUnit: string;
    }

    export interface DeviceSecondaryDevice {
        /**
         * Billing account number for secondary device.
         */
        accountNumber: string;
        /**
         * Identifier of a WAN interface ACL template that will be applied on a secondary device.
         */
        aclTemplateId?: string;
        /**
         * Additional Internet bandwidth, in Mbps, for a secondary device.
         */
        additionalBandwidth: number;
        /**
         * (Autonomous System Number) Unique identifier for a network on the internet.
         */
        asn: number;
        /**
         * Identifier of a cloud init file that will be applied on a secondary device.
         */
        cloudInitFileId?: string;
        /**
         * Secondary device hostname.
         */
        hostname?: string;
        /**
         * Device location Equinix Business Exchange name.
         */
        ibx: string;
        /**
         * List of device interfaces. See Interface Attribute below for more details.
         */
        interfaces: outputs.networkedge.DeviceSecondaryDeviceInterface[];
        /**
         * Path to the license file that will be uploaded and applied on a secondary device. Applicable for some device types in BYOL licensing mode.
         */
        licenseFile?: string;
        /**
         * Identifier of a license file that will be applied on a secondary device.
         */
        licenseFileId: string;
        /**
         * Device license registration status. Possible values are `APPLYING_LICENSE`, `REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.
         */
        licenseStatus: string;
        /**
         * License Token can be provided for some device types o the device.
         */
        licenseToken?: string;
        /**
         * Metro location of a secondary device.
         */
        metroCode: string;
        /**
         * Identifier of an MGMT interface ACL template that will be applied on a secondary device.
         * * `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary device.
         */
        mgmtAclTemplateUuid?: string;
        /**
         * Secondary device name.
         */
        name: string;
        /**
         * List of email addresses that will receive notifications about secondary device.
         */
        notifications: string[];
        /**
         * Unique Identifier for the project resource where the device is scoped to.If you leave it out, the device will be created under the default project id of your organization.
         */
        projectId: string;
        /**
         * Device redundancy type applicable for HA devices, either primary or secondary.
         */
        redundancyType: string;
        /**
         * Unique identifier for a redundant device applicable for HA devices.
         */
        redundantId: string;
        /**
         * Device location region.
         */
        region: string;
        /**
         * IP address of SSH enabled interface on the device.
         */
        sshIpAddress: string;
        /**
         * FQDN of SSH enabled interface on the device.
         */
        sshIpFqdn: string;
        /**
         * Definition of SSH key that will be provisioned on a device
         */
        sshKey?: outputs.networkedge.DeviceSecondaryDeviceSshKey;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status: string;
        /**
         * Device unique identifier.
         */
        uuid: string;
        /**
         * Key/Value pairs of vendor specific configuration parameters for a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`, `systemIpAddress`, `privateAddress`, `privateCidrMask`, `privateGateway`, `licenseKey`, `licenseId`, `panoramaAuthKey`, `panoramaIpAddress`.
         */
        vendorConfiguration: {[key: string]: string};
        /**
         * device interface id picked for WAN
         */
        wanInterfaceId?: string;
        /**
         * Device location zone code.
         */
        zoneCode: string;
    }

    export interface DeviceSecondaryDeviceInterface {
        /**
         * interface management type (Equinix Managed or empty).
         */
        assignedType: string;
        /**
         * interface identifier.
         */
        id: number;
        /**
         * interface IP address.
         */
        ipAddress: string;
        /**
         * interface MAC address.
         */
        macAddress: string;
        /**
         * Device name.
         */
        name: string;
        /**
         * interface operational status. One of `up`, `down`.
         */
        operationalStatus: string;
        /**
         * interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.
         */
        status: string;
        /**
         * interface type.
         */
        type: string;
    }

    export interface DeviceSecondaryDeviceSshKey {
        /**
         * Reference by name to previously provisioned public SSH key
         */
        keyName: string;
        /**
         * username associated with given key.
         */
        username: string;
    }

    export interface DeviceSshKey {
        /**
         * Reference by name to previously provisioned public SSH key
         */
        keyName: string;
        /**
         * username associated with given key.
         */
        username: string;
    }

    export interface GetDeviceClusterDetail {
        /**
         * The id of the cluster
         */
        clusterId: string;
        /**
         * The name of the cluster device
         */
        clusterName: string;
        /**
         * An object that has node0 details
         */
        node0s: outputs.networkedge.GetDeviceClusterDetailNode0[];
        /**
         * An object that has node1 details
         */
        node1s: outputs.networkedge.GetDeviceClusterDetailNode1[];
        /**
         * The number of nodes in the cluster
         */
        numOfNodes: number;
    }

    export interface GetDeviceClusterDetailNode0 {
        /**
         * Unique identifier of applied license file
         */
        licenseFileId: string;
        /**
         * License token. This is necessary for Palo Alto clusters
         */
        licenseToken: string;
        /**
         * Name of an existing Equinix Network Edge device
         */
        name: string;
        /**
         * UUID of an existing Equinix Network Edge device
         */
        uuid: string;
        /**
         * An object that has fields relevant to the vendor of the cluster device
         */
        vendorConfigurations: outputs.networkedge.GetDeviceClusterDetailNode0VendorConfiguration[];
    }

    export interface GetDeviceClusterDetailNode0VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters
         */
        activationKey: string;
        /**
         * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
         */
        adminPassword: string;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device
         */
        controller1: string;
        /**
         * Controller fqdn. This is required for Velocloud clusters
         */
        controllerFqdn: string;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
         */
        hostname: string;
        /**
         * License id. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseId: string;
        /**
         * License key. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseKey: string;
        /**
         * Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
         */
        panoramaAuthKey: string;
        /**
         * Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
         */
        panoramaIpAddress: string;
        /**
         * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateAddress: string;
        /**
         * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateCidrMask: string;
        /**
         * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateGateway: string;
        /**
         * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
         */
        rootPassword: string;
    }

    export interface GetDeviceClusterDetailNode1 {
        /**
         * Unique identifier of applied license file
         */
        licenseFileId: string;
        /**
         * License token. This is necessary for Palo Alto clusters
         */
        licenseToken: string;
        /**
         * Name of an existing Equinix Network Edge device
         */
        name: string;
        /**
         * UUID of an existing Equinix Network Edge device
         */
        uuid: string;
        /**
         * An object that has fields relevant to the vendor of the cluster device
         */
        vendorConfigurations: outputs.networkedge.GetDeviceClusterDetailNode1VendorConfiguration[];
    }

    export interface GetDeviceClusterDetailNode1VendorConfiguration {
        /**
         * Activation key. This is required for Velocloud clusters
         */
        activationKey: string;
        /**
         * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
         */
        adminPassword: string;
        /**
         * System IP Address. Mandatory for the Fortinet SDWAN cluster device
         */
        controller1: string;
        /**
         * Controller fqdn. This is required for Velocloud clusters
         */
        controllerFqdn: string;
        /**
         * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
         */
        hostname: string;
        /**
         * License id. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseId: string;
        /**
         * License key. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        licenseKey: string;
        /**
         * Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
         */
        panoramaAuthKey: string;
        /**
         * Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
         */
        panoramaIpAddress: string;
        /**
         * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateAddress: string;
        /**
         * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateCidrMask: string;
        /**
         * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
         */
        privateGateway: string;
        /**
         * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
         */
        rootPassword: string;
    }

    export interface GetDeviceInterface {
        /**
         * Interface management type (Equinix Managed or empty)
         */
        assignedType: string;
        /**
         * Interface identifier
         */
        id: number;
        /**
         * interface IP address
         */
        ipAddress: string;
        /**
         * Interface MAC addres
         */
        macAddress: string;
        /**
         * Name of an existing Equinix Network Edge device
         */
        name: string;
        /**
         * Interface operational status (up or down)
         */
        operationalStatus: string;
        /**
         * Device provisioning status
         * * INITIALIZING
         * * PROVISIONING
         * * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `validStateList`**)
         * * WAITING_FOR_PRIMARY
         * * WAITING_FOR_SECONDARY
         * * WAITING_FOR_REPLICA_CLUSTER_NODES
         * * CLUSTER_SETUP_IN_PROGRESS
         * * FAILED
         * * DEPROVISIONING
         * * DEPROVISIONED
         * * RESOURCE_UPGRADE_IN_PROGRESS
         * * RESOURCE_UPGRADE_FAILED
         */
        status: string;
        /**
         * Interface type
         */
        type: string;
    }

    export interface GetDeviceSecondaryDevice {
        /**
         * Device billing account number
         */
        accountNumber: string;
        /**
         * Unique identifier of applied ACL template
         */
        aclTemplateId: string;
        /**
         * Additional Internet bandwidth, in Mbps, that will be allocated to the device
         */
        additionalBandwidth: number;
        /**
         * Autonomous system number
         */
        asn: number;
        /**
         * Unique identifier of applied cloud init file
         */
        cloudInitFileId: string;
        /**
         * Device hostname prefix
         */
        hostname: string;
        /**
         * Device location Equinix Business Exchange name
         */
        ibx: string;
        /**
         * List of device interfaces
         * * `interface.#.id` - interface identifier
         * * `interface.#.name` - interface name
         * * `interface.#.status` - interface status (AVAILABLE, RESERVED, ASSIGNED)
         * * `interface.#.operational_status` - interface operational status (up or down)
         * * `interface.#.mac_address` - interface MAC address
         * * `interface.#.ip_address` - interface IP address
         * * `interface.#.assigned_type` - interface management type (Equinix Managed or empty)
         * * `interface.#.type` - interface type
         */
        interfaces: outputs.networkedge.GetDeviceSecondaryDeviceInterface[];
        /**
         * Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
         */
        licenseFile: string;
        /**
         * Unique identifier of applied license file
         */
        licenseFileId: string;
        /**
         * Device license registration status
         * * APPLYING_LICENSE
         * * REGISTERED
         * * APPLIED
         * * WAITING_FOR_CLUSTER_SETUP
         * * REGISTRATION_FAILED
         * * NA
         */
        licenseStatus: string;
        /**
         * License Token applicable for some device types in BYOL licensing mode
         */
        licenseToken: string;
        /**
         * Device location metro code
         */
        metroCode: string;
        /**
         * Unique identifier of applied MGMT ACL template
         */
        mgmtAclTemplateUuid: string;
        /**
         * Name of an existing Equinix Network Edge device
         */
        name: string;
        /**
         * List of email addresses that will receive device status notifications
         */
        notifications: string[];
        /**
         * The unique identifier of Project Resource to which device is scoped to
         */
        projectId: string;
        /**
         * Device redundancy type applicable for HA devices, either primary or secondary
         */
        redundancyType: string;
        /**
         * Unique identifier for a redundant device applicable for HA devices
         */
        redundantId: string;
        /**
         * Device location region
         */
        region: string;
        /**
         * IP address of SSH enabled interface on the device
         */
        sshIpAddress: string;
        /**
         * FQDN of SSH enabled interface on the device
         */
        sshIpFqdn: string;
        /**
         * Definition of SSH key that will be provisioned on a device
         */
        sshKeys: outputs.networkedge.GetDeviceSecondaryDeviceSshKey[];
        /**
         * Device provisioning status
         * * INITIALIZING
         * * PROVISIONING
         * * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `validStateList`**)
         * * WAITING_FOR_PRIMARY
         * * WAITING_FOR_SECONDARY
         * * WAITING_FOR_REPLICA_CLUSTER_NODES
         * * CLUSTER_SETUP_IN_PROGRESS
         * * FAILED
         * * DEPROVISIONING
         * * DEPROVISIONED
         * * RESOURCE_UPGRADE_IN_PROGRESS
         * * RESOURCE_UPGRADE_FAILED
         */
        status: string;
        /**
         * UUID of an existing Equinix Network Edge device
         */
        uuid: string;
        /**
         * Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
         */
        vendorConfiguration: {[key: string]: string};
        /**
         * device interface id picked for WAN
         */
        wanInterfaceId: string;
        /**
         * Device location zone code
         */
        zoneCode: string;
    }

    export interface GetDeviceSecondaryDeviceInterface {
        /**
         * Interface management type (Equinix Managed or empty)
         */
        assignedType: string;
        /**
         * Interface identifier
         */
        id: number;
        /**
         * interface IP address
         */
        ipAddress: string;
        /**
         * Interface MAC addres
         */
        macAddress: string;
        /**
         * Name of an existing Equinix Network Edge device
         */
        name: string;
        /**
         * Interface operational status (up or down)
         */
        operationalStatus: string;
        /**
         * Device provisioning status
         * * INITIALIZING
         * * PROVISIONING
         * * PROVISIONED (**NOTE: By default data source will only return devices in this state. To include other states see `validStateList`**)
         * * WAITING_FOR_PRIMARY
         * * WAITING_FOR_SECONDARY
         * * WAITING_FOR_REPLICA_CLUSTER_NODES
         * * CLUSTER_SETUP_IN_PROGRESS
         * * FAILED
         * * DEPROVISIONING
         * * DEPROVISIONED
         * * RESOURCE_UPGRADE_IN_PROGRESS
         * * RESOURCE_UPGRADE_FAILED
         */
        status: string;
        /**
         * Interface type
         */
        type: string;
    }

    export interface GetDeviceSecondaryDeviceSshKey {
        /**
         * Reference by name to previously provisioned public SSH key
         */
        keyName: string;
        /**
         * Username associated with given key
         */
        username: string;
    }

    export interface GetDeviceSshKey {
        /**
         * Reference by name to previously provisioned public SSH key
         */
        keyName: string;
        /**
         * Username associated with given key
         */
        username: string;
    }

}
