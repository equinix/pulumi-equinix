{
    "name": "equinix",
    "displayName": "Equinix",
    "description": "A Pulumi package for creating and managing equinix cloud resources.",
    "keywords": [
        "pulumi",
        "equinix",
        "category/cloud"
    ],
    "homepage": "https://deploy.equinix.com/",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`equinix` Terraform Provider](https://github.com/equinix/terraform-provider-equinix).",
    "repository": "https://github.com/equinix/pulumi-equinix",
    "logoUrl": "https://raw.githubusercontent.com/equinix/pulumi-equinix/main/assets/logo.png",
    "pluginDownloadURL": "github://api.github.com/equinix",
    "publisher": "Equinix",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "equinix": "Equinix",
                "fabric": "Fabric",
                "metal": "Metal",
                "networkedge": "NetworkEdge"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumi"
        },
        "go": {
            "importBasePath": "github.com/equinix/pulumi-equinix/sdk/go/equinix",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.equinix",
            "buildFiles": "gradle",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@equinix-labs/pulumi-equinix",
            "packageDescription": "A Pulumi package for creating and managing equinix cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-equinix` repo](https://github.com/equinix/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumi_equinix",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-equinix` repo](https://github.com/equinix/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries.\n"
            },
            "maxRetryWaitSeconds": {
                "type": "integer",
                "description": "Maximum number of seconds to wait before retrying a request.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "types": {
        "equinix:fabric/CloudRouterAccount:CloudRouterAccount": {
            "properties": {
                "accountNumber": {
                    "type": "integer",
                    "description": "Account Number\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountNumber"
                    ]
                }
            }
        },
        "equinix:fabric/CloudRouterChangeLog:CloudRouterChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/CloudRouterLocation:CloudRouterLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/CloudRouterNotification:CloudRouterNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/CloudRouterOrder:CloudRouterOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "description": "Billing tier for connection bandwidth\n"
                },
                "orderId": {
                    "type": "string",
                    "description": "Order Identification\n"
                },
                "orderNumber": {
                    "type": "string",
                    "description": "Order Reference Number\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "billingTier",
                        "orderId",
                        "orderNumber",
                        "purchaseOrderNumber"
                    ]
                }
            }
        },
        "equinix:fabric/CloudRouterPackage:CloudRouterPackage": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Fabric Cloud Router package code\n"
                }
            },
            "type": "object",
            "required": [
                "code"
            ]
        },
        "equinix:fabric/CloudRouterProject:CloudRouterProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "projectId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASide:ConnectionASide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPoint:ConnectionASideAccessPoint",
                    "description": "Point of access details\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAdditionalInfo:ConnectionASideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n"
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideServiceToken:ConnectionASideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionASideAccessPoint:ConnectionASideAccessPoint": {
            "properties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointAccount:ConnectionASideAccessPointAccount",
                    "description": "Account\n"
                },
                "authenticationKey": {
                    "type": "string",
                    "description": "Authentication key for provider based connections\n"
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointGateway:ConnectionASideAccessPointGateway",
                    "description": "**Deprecated** `gateway` Use `router` attribute instead\n",
                    "deprecationMessage": "use router attribute instead; gateway is no longer a part of the supported backend"
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointInterface:ConnectionASideAccessPointInterface",
                    "description": "Virtual device interface\n"
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointLinkProtocol:ConnectionASideAccessPointLinkProtocol",
                    "description": "Connection link protocol\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointLocation:ConnectionASideAccessPointLocation",
                    "description": "Access point location\n"
                },
                "network": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointNetwork:ConnectionASideAccessPointNetwork",
                    "description": "network access point information\n"
                },
                "peeringType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointPeeringType:AccessPointPeeringType"
                        }
                    ],
                    "description": "Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL\n"
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointPort:ConnectionASideAccessPointPort",
                    "description": "Port access point information\n"
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointProfile:ConnectionASideAccessPointProfile",
                    "description": "Service Profile\n"
                },
                "providerConnectionId": {
                    "type": "string",
                    "description": "Provider assigned Connection Id\n"
                },
                "router": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointRouter:ConnectionASideAccessPointRouter",
                    "description": "Cloud Router access point information that replaces `gateway`\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Access point seller region\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointType:AccessPointType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointVirtualDevice:ConnectionASideAccessPointVirtualDevice",
                    "description": "Virtual device\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "location"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointAccount:ConnectionASideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName",
                        "ucmId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointGateway:ConnectionASideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointInterface:ConnectionASideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointLinkProtocol:ConnectionASideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "vlanCTag": {
                    "type": "integer",
                    "description": "Vlan Customer Tag information, vlanCTag value specified for QINQ connections\n"
                },
                "vlanSTag": {
                    "type": "integer",
                    "description": "Vlan Provider Tag information, vlanSTag value specified for QINQ connections\n"
                },
                "vlanTag": {
                    "type": "integer",
                    "description": "Vlan Tag information, vlanTag value specified for DOT1Q connections\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanCTag",
                        "vlanSTag",
                        "vlanTag"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointLocation:ConnectionASideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointNetwork:ConnectionASideAccessPointNetwork": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointPort:ConnectionASideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointPortRedundancy:ConnectionASideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "name",
                        "redundancies",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointPortRedundancy:ConnectionASideAccessPointPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Connection priority in redundancy group - PRIMARY, SECONDARY\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "group",
                        "priority"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointProfile:ConnectionASideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointProfileAccessPointTypeConfig:ConnectionASideAccessPointProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessPointTypeConfigs",
                        "description",
                        "href",
                        "name",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointProfileAccessPointTypeConfig:ConnectionASideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointRouter:ConnectionASideAccessPointRouter": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointVirtualDevice:ConnectionASideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAdditionalInfo:ConnectionASideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionASideServiceToken:ConnectionASideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/serviceTokenType:ServiceTokenType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionAccount:ConnectionAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName",
                        "ucmId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionChangeLog:ConnectionChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionNotification:ConnectionNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/notificationsType:NotificationsType"
                        }
                    ],
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/ConnectionOperation:ConnectionOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "description": "Connection status\n"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperationError:ConnectionOperationError"
                    },
                    "description": "Errors occurred\n"
                },
                "providerStatus": {
                    "type": "string",
                    "description": "Connection provider readiness status\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "equinixStatus",
                        "errors",
                        "providerStatus"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOperationError:ConnectionOperationError": {
            "properties": {
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperationErrorAdditionalInfo:ConnectionOperationErrorAdditionalInfo"
                    },
                    "description": "Connection side additional information\n"
                },
                "correlationId": {
                    "type": "string",
                    "description": "CorrelationId\n"
                },
                "details": {
                    "type": "string",
                    "description": "Details\n"
                },
                "errorCode": {
                    "type": "string",
                    "description": "Error  code\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error Message\n"
                },
                "help": {
                    "type": "string",
                    "description": "Help\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalInfo",
                        "correlationId",
                        "details",
                        "errorCode",
                        "errorMessage",
                        "help"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOperationErrorAdditionalInfo:ConnectionOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "Property at which the error potentially occurred\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the error\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "property",
                        "reason"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOrder:ConnectionOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "description": "Billing tier for connection bandwidth\n"
                },
                "orderId": {
                    "type": "string",
                    "description": "Order Identification\n"
                },
                "orderNumber": {
                    "type": "string",
                    "description": "Order Reference Number\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "billingTier",
                        "orderId",
                        "orderNumber",
                        "purchaseOrderNumber"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionProject:ConnectionProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "projectId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionRedundancy:ConnectionRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Connection priority in redundancy group - PRIMARY, SECONDARY\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "group",
                        "priority"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSide:ConnectionZSide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPoint:ConnectionZSideAccessPoint",
                    "description": "Point of access details\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAdditionalInfo:ConnectionZSideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n"
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideServiceToken:ConnectionZSideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionZSideAccessPoint:ConnectionZSideAccessPoint": {
            "properties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointAccount:ConnectionZSideAccessPointAccount",
                    "description": "Account\n"
                },
                "authenticationKey": {
                    "type": "string",
                    "description": "Authentication key for provider based connections\n"
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointGateway:ConnectionZSideAccessPointGateway",
                    "description": "**Deprecated** `gateway` Use `router` attribute instead\n",
                    "deprecationMessage": "use router attribute instead; gateway is no longer a part of the supported backend"
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointInterface:ConnectionZSideAccessPointInterface",
                    "description": "Virtual device interface\n"
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointLinkProtocol:ConnectionZSideAccessPointLinkProtocol",
                    "description": "Connection link protocol\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointLocation:ConnectionZSideAccessPointLocation",
                    "description": "Access point location\n"
                },
                "network": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointNetwork:ConnectionZSideAccessPointNetwork",
                    "description": "network access point information\n"
                },
                "peeringType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointPeeringType:AccessPointPeeringType"
                        }
                    ],
                    "description": "Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL\n"
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointPort:ConnectionZSideAccessPointPort",
                    "description": "Port access point information\n"
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointProfile:ConnectionZSideAccessPointProfile",
                    "description": "Service Profile\n"
                },
                "providerConnectionId": {
                    "type": "string",
                    "description": "Provider assigned Connection Id\n"
                },
                "router": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointRouter:ConnectionZSideAccessPointRouter",
                    "description": "Cloud Router access point information that replaces `gateway`\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Access point seller region\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointType:AccessPointType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointVirtualDevice:ConnectionZSideAccessPointVirtualDevice",
                    "description": "Virtual device\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "location"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointAccount:ConnectionZSideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName",
                        "ucmId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointGateway:ConnectionZSideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointInterface:ConnectionZSideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointLinkProtocol:ConnectionZSideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "vlanCTag": {
                    "type": "integer",
                    "description": "Vlan Customer Tag information, vlanCTag value specified for QINQ connections\n"
                },
                "vlanSTag": {
                    "type": "integer",
                    "description": "Vlan Provider Tag information, vlanSTag value specified for QINQ connections\n"
                },
                "vlanTag": {
                    "type": "integer",
                    "description": "Vlan Tag information, vlanTag value specified for DOT1Q connections\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanCTag",
                        "vlanSTag",
                        "vlanTag"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointLocation:ConnectionZSideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointNetwork:ConnectionZSideAccessPointNetwork": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointPort:ConnectionZSideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointPortRedundancy:ConnectionZSideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "name",
                        "redundancies",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointPortRedundancy:ConnectionZSideAccessPointPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix*fabric*connection.primary*port*connection.redundancy).group or equinix*fabric*connection.primary*port*connection.redundancy.0.group)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Connection priority in redundancy group - PRIMARY, SECONDARY\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "group",
                        "priority"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointProfile:ConnectionZSideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointProfileAccessPointTypeConfig:ConnectionZSideAccessPointProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessPointTypeConfigs",
                        "description",
                        "href",
                        "name",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointProfileAccessPointTypeConfig:ConnectionZSideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointRouter:ConnectionZSideAccessPointRouter": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointVirtualDevice:ConnectionZSideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAdditionalInfo:ConnectionZSideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionZSideServiceToken:ConnectionZSideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/serviceTokenType:ServiceTokenType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/NetworkChange:NetworkChange": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Absolute URL that returns the details of the given change.\nExample: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784\n"
                },
                "type": {
                    "type": "string",
                    "description": "Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Asset change request identifier.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/NetworkChangeLog:NetworkChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/NetworkLocation:NetworkLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/NetworkNotification:NetworkNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/NetworkOperation:NetworkOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "description": "Progress towards provisioning a given asset.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "equinixStatus"
                    ]
                }
            }
        },
        "equinix:fabric/NetworkProject:NetworkProject": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "Customer project identifier\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "equinix:fabric/RoutingProtocolBfd:RoutingProtocolBfd": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Bidirectional Forwarding Detection enablement\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Interval range between the received BFD control packets\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "equinix:fabric/RoutingProtocolBgpIpv4:RoutingProtocolBgpIpv4": {
            "properties": {
                "customerPeerIp": {
                    "type": "string",
                    "description": "Customer side peering ip\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Admin status for the BGP session\n"
                },
                "equinixPeerIp": {
                    "type": "string",
                    "description": "Equinix side peering ip\n"
                }
            },
            "type": "object",
            "required": [
                "customerPeerIp"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customerPeerIp",
                        "equinixPeerIp"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolBgpIpv6:RoutingProtocolBgpIpv6": {
            "properties": {
                "customerPeerIp": {
                    "type": "string",
                    "description": "Customer side peering ip\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Admin status for the BGP session\n"
                },
                "equinixPeerIp": {
                    "type": "string",
                    "description": "Equinix side peering ip\n"
                }
            },
            "type": "object",
            "required": [
                "customerPeerIp"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customerPeerIp",
                        "equinixPeerIp"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolChange:RoutingProtocolChange": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Routing Protocol Change URI\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of change\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Uniquely identifies a change\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolChangeLog:RoutingProtocolChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolDirectIpv4:RoutingProtocolDirectIpv4": {
            "properties": {
                "equinixIfaceIp": {
                    "type": "string",
                    "description": "Equinix side Interface IP address\n"
                }
            },
            "type": "object",
            "required": [
                "equinixIfaceIp"
            ]
        },
        "equinix:fabric/RoutingProtocolDirectIpv6:RoutingProtocolDirectIpv6": {
            "properties": {
                "equinixIfaceIp": {
                    "type": "string",
                    "description": "Equinix side Interface IP address\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/RoutingProtocolOperation:RoutingProtocolOperation": {
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolOperationError:RoutingProtocolOperationError"
                    },
                    "description": "Errors occurred\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "errors"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolOperationError:RoutingProtocolOperationError": {
            "properties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolOperationErrorAdditionalInfo:RoutingProtocolOperationErrorAdditionalInfo"
                    },
                    "description": "Pricing error additional Info\n"
                },
                "correlationId": {
                    "type": "string",
                    "description": "CorrelationId\n"
                },
                "details": {
                    "type": "string",
                    "description": "Details\n"
                },
                "errorCode": {
                    "type": "string",
                    "description": "Error  code\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error Message\n"
                },
                "help": {
                    "type": "string",
                    "description": "Help\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalInfos",
                        "correlationId",
                        "details",
                        "errorCode",
                        "errorMessage",
                        "help"
                    ]
                }
            }
        },
        "equinix:fabric/RoutingProtocolOperationErrorAdditionalInfo:RoutingProtocolOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "Property at which the error potentially occurred\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the error\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "property",
                        "reason"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller\n"
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "description": "Availability of a bandwidth upgrade. The default is false\n"
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to customize the bandwidth\n"
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "description": "Setting to allow or prohibit remote connections to the service profile\n"
                },
                "apiConfig": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigApiConfig:ServiceProfileAccessPointTypeConfigApiConfig",
                    "description": "Api configuration details\n"
                },
                "authenticationKey": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigAuthenticationKey:ServiceProfileAccessPointTypeConfigAuthenticationKey",
                    "description": "Authentication key details\n"
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Percentage of port bandwidth at which an allocation alert is generated\n"
                },
                "connectionLabel": {
                    "type": "string",
                    "description": "Custom name for Connection\n"
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "description": "Mandate redundant connections\n"
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "description": "Enable auto generate service key\n"
                },
                "linkProtocolConfig": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigLinkProtocolConfig:ServiceProfileAccessPointTypeConfigLinkProtocolConfig",
                    "description": "Link protocol configuration details\n"
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Supported bandwidths\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileAccessPointType:ProfileAccessPointType"
                        }
                    ],
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigApiConfig:ServiceProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "description": "Setting showing that oversubscription support is available (true) or not (false). The default is false\n"
                },
                "apiAvailable": {
                    "type": "boolean",
                    "description": "Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.\n"
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "description": "Indicates if the connection bandwidth can be obtained directly from the cloud service provider.\n"
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "description": "Setting indicating that the port is managed by Equinix (true) or not (false)\n"
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "description": "Setting indicating that the VLAN is managed by Equinix (true) or not (false)\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.\n"
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "description": "Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigAuthenticationKey:ServiceProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name of the parameter that must be provided to authorize the connection.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Requirement to configure an authentication key.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigLinkProtocolConfig:ServiceProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "description": "Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.\n"
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "description": "Additional tagging information required by the seller profile.\n"
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "description": "Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccount:ServiceProfileAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName",
                        "ucmId"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "description": "Required field\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "Data type\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required field\n"
                }
            },
            "type": "object",
            "required": [
                "dataType",
                "label",
                "required"
            ]
        },
        "equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "description": "Logo\n"
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfoProcessStep:ServiceProfileMarketingInfoProcessStep"
                    },
                    "description": "Process Step\n"
                },
                "promotion": {
                    "type": "boolean",
                    "description": "Promotion\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileMarketingInfoProcessStep:ServiceProfileMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "subTitle": {
                    "type": "string",
                    "description": "Sub Title\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileMetro:ServiceProfileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Metro Code - Example SV\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display Name\n"
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IBX- Equinix International Business Exchange list\n"
                },
                "inTrail": {
                    "type": "boolean",
                    "description": "In Trail\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n"
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Seller Regions\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileNotification:ServiceProfileNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/notificationsType:NotificationsType"
                        }
                    ],
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/ServiceProfilePort:ServiceProfilePort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "description": "Cross Connect Id\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ServiceProfilePortLocation:ServiceProfilePortLocation",
                    "description": "Colo/Port Location\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Seller Region\n"
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "description": "Seller Region details\n"
                },
                "type": {
                    "type": "string",
                    "description": "Colo/Port Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ]
        },
        "equinix:fabric/ServiceProfilePortLocation:ServiceProfilePortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileProject:ServiceProfileProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "projectId"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice": {
            "properties": {
                "interfaceUuid": {
                    "type": "string",
                    "description": "Device Interface Uuid\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDeviceLocation:ServiceProfileVirtualDeviceLocation",
                    "description": "Device Location\n"
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Virtual Device Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ]
        },
        "equinix:fabric/ServiceProfileVirtualDeviceLocation:ServiceProfileVirtualDeviceLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType": {
            "type": "string",
            "enum": [
                {
                    "name": "Untagged",
                    "value": "UNTAGGED"
                },
                {
                    "name": "Dot1q",
                    "value": "DOT1Q"
                },
                {
                    "name": "QinQ",
                    "value": "QINQ"
                },
                {
                    "name": "EVPN_VXLAN",
                    "value": "EVPN_VXLAN"
                }
            ]
        },
        "equinix:fabric/accessPointPeeringType:AccessPointPeeringType": {
            "type": "string",
            "enum": [
                {
                    "name": "Private",
                    "value": "PRIVATE"
                },
                {
                    "name": "Microsoft",
                    "value": "MICROSOFT"
                },
                {
                    "name": "Public",
                    "value": "PUBLIC"
                }
            ]
        },
        "equinix:fabric/accessPointType:AccessPointType": {
            "type": "string",
            "enum": [
                {
                    "name": "Colo",
                    "description": "Colocation",
                    "value": "COLO"
                },
                {
                    "name": "VD",
                    "description": "Virtual Device",
                    "value": "VD"
                },
                {
                    "name": "SP",
                    "description": "Service Profile",
                    "value": "SP"
                },
                {
                    "name": "IGW",
                    "description": "Internet Gateway",
                    "value": "IGW"
                },
                {
                    "name": "Subnet",
                    "description": "Subnet",
                    "value": "SUBNET"
                },
                {
                    "name": "GW",
                    "description": "Gateway",
                    "value": "GW"
                },
                {
                    "name": "Network",
                    "description": "Network",
                    "value": "NETWORK"
                }
            ]
        },
        "equinix:fabric/connectionType:ConnectionType": {
            "type": "string",
            "enum": [
                {
                    "name": "VG",
                    "description": "Virtual Gateway",
                    "value": "VG_VC"
                },
                {
                    "name": "EVPL",
                    "description": "Ethernet Virtual Private Line",
                    "value": "EVPL_VC"
                },
                {
                    "name": "EPL",
                    "description": "Ethernet Private Line",
                    "value": "EPL_VC"
                },
                {
                    "name": "GW",
                    "description": "Fabric Gateway virtual connection",
                    "value": "GW_VC"
                },
                {
                    "name": "AccessEPL",
                    "description": "E-access, layer 2 connection between a QINQ port and an EPL port.",
                    "value": "ACCESS_EPL_VC"
                }
            ]
        },
        "equinix:fabric/getCloudRouterAccount:getCloudRouterAccount": {
            "properties": {
                "accountNumber": {
                    "type": "integer",
                    "description": "Account Number\n"
                }
            },
            "type": "object",
            "required": [
                "accountNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterChangeLog:getCloudRouterChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterLocation:getCloudRouterLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterNotification:getCloudRouterNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterOrder:getCloudRouterOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "description": "Billing tier for connection bandwidth\n"
                },
                "orderId": {
                    "type": "string",
                    "description": "Order Identification\n"
                },
                "orderNumber": {
                    "type": "string",
                    "description": "Order Reference Number\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number\n"
                }
            },
            "type": "object",
            "required": [
                "billingTier",
                "orderId",
                "orderNumber",
                "purchaseOrderNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterPackage:getCloudRouterPackage": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Fabric Cloud Router package code\n"
                }
            },
            "type": "object",
            "required": [
                "code"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getCloudRouterProject:getCloudRouterProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASide:getConnectionASide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPoint:getConnectionASideAccessPoint",
                    "description": "Point of access details\n"
                },
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAdditionalInfo:getConnectionASideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n"
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideServiceToken:getConnectionASideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getConnectionASideAccessPoint:getConnectionASideAccessPoint": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointAccount:getConnectionASideAccessPointAccount"
                    },
                    "description": "Account\n"
                },
                "authenticationKey": {
                    "type": "string",
                    "description": "Authentication key for provider based connections\n"
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointGateway:getConnectionASideAccessPointGateway",
                    "description": "**Deprecated** `gateway` Use `router` attribute instead\n",
                    "deprecationMessage": "use router attribute instead; gateway is no longer a part of the supported backend"
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointInterface:getConnectionASideAccessPointInterface",
                    "description": "Virtual device interface\n"
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointLinkProtocol:getConnectionASideAccessPointLinkProtocol",
                    "description": "Connection link protocol\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointLocation:getConnectionASideAccessPointLocation",
                    "description": "Access point location\n"
                },
                "network": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointNetwork:getConnectionASideAccessPointNetwork",
                    "description": "network access point information\n"
                },
                "peeringType": {
                    "type": "string",
                    "description": "Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL\n"
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointPort:getConnectionASideAccessPointPort",
                    "description": "Port access point information\n"
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfile:getConnectionASideAccessPointProfile",
                    "description": "Service Profile\n"
                },
                "providerConnectionId": {
                    "type": "string",
                    "description": "Provider assigned Connection Id\n"
                },
                "router": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointRouter:getConnectionASideAccessPointRouter",
                    "description": "Cloud Router access point information that replaces `gateway`\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Access point seller region\n"
                },
                "type": {
                    "type": "string",
                    "description": "Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK\n"
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointVirtualDevice:getConnectionASideAccessPointVirtualDevice",
                    "description": "Virtual device\n"
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "location"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointAccount:getConnectionASideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointGateway:getConnectionASideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointInterface:getConnectionASideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned interface identifier\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointLinkProtocol:getConnectionASideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN\n"
                },
                "vlanCTag": {
                    "type": "integer",
                    "description": "Vlan Customer Tag information, vlanCTag value specified for QINQ connections\n"
                },
                "vlanSTag": {
                    "type": "integer",
                    "description": "Vlan Provider Tag information, vlanSTag value specified for QINQ connections\n"
                },
                "vlanTag": {
                    "type": "integer",
                    "description": "Vlan Tag information, vlanTag value specified for DOT1Q connections\n"
                }
            },
            "type": "object",
            "required": [
                "vlanCTag",
                "vlanSTag",
                "vlanTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointLocation:getConnectionASideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointNetwork:getConnectionASideAccessPointNetwork": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Network identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointPort:getConnectionASideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointPortRedundancy:getConnectionASideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Port identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "name",
                "redundancies",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointPortRedundancy:getConnectionASideAccessPointPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfile:getConnectionASideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfig:getConnectionASideAccessPointProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Service Profile URI response attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfig:getConnectionASideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned access point type config identifier\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointRouter:getConnectionASideAccessPointRouter": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointVirtualDevice:getConnectionASideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned Virtual Device Name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Virtual Device identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAdditionalInfo:getConnectionASideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getConnectionASideServiceToken:getConnectionASideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Service token description\n"
                },
                "href": {
                    "type": "string",
                    "description": "An absolute URL that is the subject of the link's context\n"
                },
                "type": {
                    "type": "string",
                    "description": "Token type - VC_TOKEN\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned service token identifier\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionAccount:getConnectionAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionChangeLog:getConnectionChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionNotification:getConnectionNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperation:getConnectionOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "description": "Connection status\n"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperationError:getConnectionOperationError"
                    },
                    "description": "Errors occurred\n"
                },
                "providerStatus": {
                    "type": "string",
                    "description": "Connection provider readiness status\n"
                }
            },
            "type": "object",
            "required": [
                "equinixStatus",
                "errors",
                "providerStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperationError:getConnectionOperationError": {
            "properties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperationErrorAdditionalInfo:getConnectionOperationErrorAdditionalInfo"
                    },
                    "description": "Pricing error additional Info\n"
                },
                "correlationId": {
                    "type": "string",
                    "description": "CorrelationId\n"
                },
                "details": {
                    "type": "string",
                    "description": "Details\n"
                },
                "errorCode": {
                    "type": "string",
                    "description": "Error  code\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error Message\n"
                },
                "help": {
                    "type": "string",
                    "description": "Help\n"
                }
            },
            "type": "object",
            "required": [
                "additionalInfos",
                "correlationId",
                "details",
                "errorCode",
                "errorMessage",
                "help"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperationErrorAdditionalInfo:getConnectionOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "Property at which the error potentially occurred\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the error\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOrder:getConnectionOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "description": "Billing tier for connection bandwidth\n"
                },
                "orderId": {
                    "type": "string",
                    "description": "Order Identification\n"
                },
                "orderNumber": {
                    "type": "string",
                    "description": "Order Reference Number\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number\n"
                }
            },
            "type": "object",
            "required": [
                "billingTier",
                "orderId",
                "orderNumber",
                "purchaseOrderNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionProject:getConnectionProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionRedundancy:getConnectionRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Connection priority in redundancy group - PRIMARY, SECONDARY\n"
                }
            },
            "type": "object",
            "required": [
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSide:getConnectionZSide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPoint:getConnectionZSideAccessPoint",
                    "description": "Point of access details\n"
                },
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAdditionalInfo:getConnectionZSideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n"
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideServiceToken:getConnectionZSideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getConnectionZSideAccessPoint:getConnectionZSideAccessPoint": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointAccount:getConnectionZSideAccessPointAccount"
                    },
                    "description": "Account\n"
                },
                "authenticationKey": {
                    "type": "string",
                    "description": "Authentication key for provider based connections\n"
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointGateway:getConnectionZSideAccessPointGateway",
                    "description": "**Deprecated** `gateway` Use `router` attribute instead\n",
                    "deprecationMessage": "use router attribute instead; gateway is no longer a part of the supported backend"
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointInterface:getConnectionZSideAccessPointInterface",
                    "description": "Virtual device interface\n"
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointLinkProtocol:getConnectionZSideAccessPointLinkProtocol",
                    "description": "Connection link protocol\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointLocation:getConnectionZSideAccessPointLocation",
                    "description": "Access point location\n"
                },
                "network": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointNetwork:getConnectionZSideAccessPointNetwork",
                    "description": "network access point information\n"
                },
                "peeringType": {
                    "type": "string",
                    "description": "Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL\n"
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointPort:getConnectionZSideAccessPointPort",
                    "description": "Port access point information\n"
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfile:getConnectionZSideAccessPointProfile",
                    "description": "Service Profile\n"
                },
                "providerConnectionId": {
                    "type": "string",
                    "description": "Provider assigned Connection Id\n"
                },
                "router": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointRouter:getConnectionZSideAccessPointRouter",
                    "description": "Cloud Router access point information that replaces `gateway`\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Access point seller region\n"
                },
                "type": {
                    "type": "string",
                    "description": "Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK\n"
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointVirtualDevice:getConnectionZSideAccessPointVirtualDevice",
                    "description": "Virtual device\n"
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "location"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointAccount:getConnectionZSideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointGateway:getConnectionZSideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointInterface:getConnectionZSideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned interface identifier\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointLinkProtocol:getConnectionZSideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN\n"
                },
                "vlanCTag": {
                    "type": "integer",
                    "description": "Vlan Customer Tag information, vlanCTag value specified for QINQ connections\n"
                },
                "vlanSTag": {
                    "type": "integer",
                    "description": "Vlan Provider Tag information, vlanSTag value specified for QINQ connections\n"
                },
                "vlanTag": {
                    "type": "integer",
                    "description": "Vlan Tag information, vlanTag value specified for DOT1Q connections\n"
                }
            },
            "type": "object",
            "required": [
                "vlanCTag",
                "vlanSTag",
                "vlanTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointLocation:getConnectionZSideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointNetwork:getConnectionZSideAccessPointNetwork": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Network identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointPort:getConnectionZSideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointPortRedundancy:getConnectionZSideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Port identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "name",
                "redundancies",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointPortRedundancy:getConnectionZSideAccessPointPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfile:getConnectionZSideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Service Profile URI response attribute\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned access point type config identifier\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointRouter:getConnectionZSideAccessPointRouter": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointVirtualDevice:getConnectionZSideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned Virtual Device Name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Virtual Device identifier\n"
                }
            },
            "type": "object",
            "required": [
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAdditionalInfo:getConnectionZSideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n"
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getConnectionZSideServiceToken:getConnectionZSideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Service token description\n"
                },
                "href": {
                    "type": "string",
                    "description": "An absolute URL that is the subject of the link's context\n"
                },
                "type": {
                    "type": "string",
                    "description": "Token type - VC_TOKEN\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned service token identifier\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "href"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkChange:getNetworkChange": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Absolute URL that returns the details of the given change.\nExample: https://api.equinix.com/fabric/v4/networks/92dc376a-a932-43aa-a6a2-c806dedbd784\n"
                },
                "type": {
                    "type": "string",
                    "description": "Asset instance change request type.: NETWORK_CREATION, NETWORK_UPDATE, NETWORK_DELETION\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Asset change request identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkChangeLog:getNetworkChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkLocation:getNetworkLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkNotification:getNetworkNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkOperation:getNetworkOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "description": "Progress towards provisioning a given asset.\n"
                }
            },
            "type": "object",
            "required": [
                "equinixStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getNetworkProject:getNetworkProject": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "Customer project identifier\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortAccount:getPortAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortChangeLog:getPortChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortDevice:getPortDevice": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortDeviceRedundancy:getPortDeviceRedundancy"
                    },
                    "description": "Port device redundancy\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "redundancies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortDeviceRedundancy:getPortDeviceRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortEncapsulation:getPortEncapsulation": {
            "properties": {
                "tagProtocolId": {
                    "type": "string",
                    "description": "Port encapsulation Tag Protocol Identifier\n"
                },
                "type": {
                    "type": "string",
                    "description": "Port encapsulation protocol type\n"
                }
            },
            "type": "object",
            "required": [
                "tagProtocolId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortLocation:getPortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortOperation:getPortOperation": {
            "properties": {
                "connectionCount": {
                    "type": "integer",
                    "description": "Total number of current connections\n"
                },
                "opStatusChangedAt": {
                    "type": "string",
                    "description": "Date and time at which port availability changed\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "Port operation status\n"
                }
            },
            "type": "object",
            "required": [
                "connectionCount",
                "opStatusChangedAt",
                "operationalStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortRedundancy:getPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatum:getPortsDatum": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumAccount:getPortsDatumAccount"
                    },
                    "description": "Customer account information that is associated with this port\n"
                },
                "availableBandwidth": {
                    "type": "integer",
                    "description": "Port available bandwidth in Mbps\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Port bandwidth in Mbps\n"
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumChangeLog:getPortsDatumChangeLog"
                    },
                    "description": "Captures port lifecycle change information\n"
                },
                "description": {
                    "type": "string",
                    "description": "Port description\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumDevice:getPortsDatumDevice"
                    },
                    "description": "Port device\n"
                },
                "encapsulations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumEncapsulation:getPortsDatumEncapsulation"
                    },
                    "description": "Port encapsulation protocol\n"
                },
                "href": {
                    "type": "string",
                    "description": "Port URI information\n"
                },
                "lagEnabled": {
                    "type": "boolean",
                    "description": "Port Lag\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumLocation:getPortsDatumLocation"
                    },
                    "description": "Port location information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumOperation:getPortsDatumOperation"
                    },
                    "description": "Port specific operational data\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumRedundancy:getPortsDatumRedundancy"
                    },
                    "description": "Port redundancy information\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Port service type\n"
                },
                "state": {
                    "type": "string",
                    "description": "Port state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Port type\n"
                },
                "usedBandwidth": {
                    "type": "integer",
                    "description": "Port used bandwidth in Mbps\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned port identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "availableBandwidth",
                "bandwidth",
                "changeLogs",
                "description",
                "devices",
                "encapsulations",
                "href",
                "lagEnabled",
                "locations",
                "name",
                "operations",
                "redundancies",
                "serviceType",
                "state",
                "type",
                "usedBandwidth",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumAccount:getPortsDatumAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumChangeLog:getPortsDatumChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumDevice:getPortsDatumDevice": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumDeviceRedundancy:getPortsDatumDeviceRedundancy"
                    },
                    "description": "Port device redundancy\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "redundancies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumDeviceRedundancy:getPortsDatumDeviceRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumEncapsulation:getPortsDatumEncapsulation": {
            "properties": {
                "tagProtocolId": {
                    "type": "string",
                    "description": "Port encapsulation Tag Protocol Identifier\n"
                },
                "type": {
                    "type": "string",
                    "description": "Port encapsulation protocol type\n"
                }
            },
            "type": "object",
            "required": [
                "tagProtocolId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumLocation:getPortsDatumLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumOperation:getPortsDatumOperation": {
            "properties": {
                "connectionCount": {
                    "type": "integer",
                    "description": "Total number of current connections\n"
                },
                "opStatusChangedAt": {
                    "type": "string",
                    "description": "Date and time at which port availability changed\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "Port operation status\n"
                }
            },
            "type": "object",
            "required": [
                "connectionCount",
                "opStatusChangedAt",
                "operationalStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumRedundancy:getPortsDatumRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Access point redundancy\n"
                },
                "group": {
                    "type": "string",
                    "description": "Port redundancy group\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type-Primary or Secondary\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsFilter:getPortsFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Query Parameter to Get Ports By Name\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "equinix:fabric/getRoutingProtocolBfd:getRoutingProtocolBfd": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Bidirectional Forwarding Detection enablement\n"
                },
                "interval": {
                    "type": "string",
                    "description": "Interval range between the received BFD control packets\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolBgpIpv4:getRoutingProtocolBgpIpv4": {
            "properties": {
                "customerPeerIp": {
                    "type": "string",
                    "description": "Customer side peering ip\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Admin status for the BGP session\n"
                },
                "equinixPeerIp": {
                    "type": "string",
                    "description": "Equinix side peering ip\n"
                }
            },
            "type": "object",
            "required": [
                "customerPeerIp",
                "equinixPeerIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolBgpIpv6:getRoutingProtocolBgpIpv6": {
            "properties": {
                "customerPeerIp": {
                    "type": "string",
                    "description": "Customer side peering ip\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Admin status for the BGP session\n"
                },
                "equinixPeerIp": {
                    "type": "string",
                    "description": "Equinix side peering ip\n"
                }
            },
            "type": "object",
            "required": [
                "customerPeerIp",
                "equinixPeerIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolChange:getRoutingProtocolChange": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Routing Protocol Change URI\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of change\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Uniquely identifies a change\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolChangeLog:getRoutingProtocolChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolDirectIpv4:getRoutingProtocolDirectIpv4": {
            "properties": {
                "equinixIfaceIp": {
                    "type": "string",
                    "description": "Equinix side Interface IP address\n"
                }
            },
            "type": "object",
            "required": [
                "equinixIfaceIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolDirectIpv6:getRoutingProtocolDirectIpv6": {
            "properties": {
                "equinixIfaceIp": {
                    "type": "string",
                    "description": "Equinix side Interface IP address\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getRoutingProtocolOperation:getRoutingProtocolOperation": {
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolOperationError:getRoutingProtocolOperationError"
                    },
                    "description": "Errors occurred\n"
                }
            },
            "type": "object",
            "required": [
                "errors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolOperationError:getRoutingProtocolOperationError": {
            "properties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolOperationErrorAdditionalInfo:getRoutingProtocolOperationErrorAdditionalInfo"
                    },
                    "description": "Pricing error additional Info\n"
                },
                "correlationId": {
                    "type": "string",
                    "description": "CorrelationId\n"
                },
                "details": {
                    "type": "string",
                    "description": "Details\n"
                },
                "errorCode": {
                    "type": "string",
                    "description": "Error  code\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error Message\n"
                },
                "help": {
                    "type": "string",
                    "description": "Help\n"
                }
            },
            "type": "object",
            "required": [
                "additionalInfos",
                "correlationId",
                "details",
                "errorCode",
                "errorMessage",
                "help"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getRoutingProtocolOperationErrorAdditionalInfo:getRoutingProtocolOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "description": "Property at which the error potentially occurred\n"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for the error\n"
                }
            },
            "type": "object",
            "required": [
                "property",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfig:getServiceProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller\n"
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "description": "Availability of a bandwidth upgrade. The default is false\n"
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to customize the bandwidth\n"
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "description": "Setting to allow or prohibit remote connections to the service profile\n"
                },
                "apiConfig": {
                    "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigApiConfig:getServiceProfileAccessPointTypeConfigApiConfig",
                    "description": "Api configuration details\n"
                },
                "authenticationKey": {
                    "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigAuthenticationKey:getServiceProfileAccessPointTypeConfigAuthenticationKey",
                    "description": "Authentication key details\n"
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Percentage of port bandwidth at which an allocation alert is generated\n"
                },
                "connectionLabel": {
                    "type": "string",
                    "description": "Custom name for Connection\n"
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "description": "Mandate redundant connections\n"
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "description": "Enable auto generate service key\n"
                },
                "linkProtocolConfig": {
                    "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigLinkProtocolConfig:getServiceProfileAccessPointTypeConfigLinkProtocolConfig",
                    "description": "Link protocol configuration details\n"
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Supported bandwidths\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigApiConfig:getServiceProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "description": "Setting showing that oversubscription support is available (true) or not (false). The default is false\n"
                },
                "apiAvailable": {
                    "type": "boolean",
                    "description": "Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.\n"
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "description": "Indicates if the connection bandwidth can be obtained directly from the cloud service provider.\n"
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "description": "Setting indicating that the port is managed by Equinix (true) or not (false)\n"
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "description": "Setting indicating that the VLAN is managed by Equinix (true) or not (false)\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.\n"
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "description": "Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigAuthenticationKey:getServiceProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name of the parameter that must be provided to authorize the connection.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Requirement to configure an authentication key.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigLinkProtocolConfig:getServiceProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "description": "Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.\n"
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "description": "Additional tagging information required by the seller profile.\n"
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "description": "Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileAccount:getServiceProfileAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileChangeLog:getServiceProfileChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileCustomField:getServiceProfileCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "description": "Required field\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "Data type\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required field\n"
                }
            },
            "type": "object",
            "required": [
                "dataType",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileMarketingInfo:getServiceProfileMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "description": "Logo\n"
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileMarketingInfoProcessStep:getServiceProfileMarketingInfoProcessStep"
                    },
                    "description": "Process Step\n"
                },
                "promotion": {
                    "type": "boolean",
                    "description": "Promotion\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileMarketingInfoProcessStep:getServiceProfileMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "subTitle": {
                    "type": "string",
                    "description": "Sub Title\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileMetro:getServiceProfileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Metro Code - Example SV\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display Name\n"
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IBX- Equinix International Business Exchange list\n"
                },
                "inTrail": {
                    "type": "boolean",
                    "description": "In Trail\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n"
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Seller Regions\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileNotification:getServiceProfileNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilePort:getServiceProfilePort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "description": "Cross Connect Id\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilePortLocation:getServiceProfilePortLocation",
                    "description": "Colo/Port Location\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Seller Region\n"
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "description": "Seller Region details\n"
                },
                "type": {
                    "type": "string",
                    "description": "Colo/Port Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilePortLocation:getServiceProfilePortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileProject:getServiceProfileProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileVirtualDevice:getServiceProfileVirtualDevice": {
            "properties": {
                "interfaceUuid": {
                    "type": "string",
                    "description": "Device Interface Uuid\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getServiceProfileVirtualDeviceLocation:getServiceProfileVirtualDeviceLocation",
                    "description": "Device Location\n"
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Virtual Device Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileVirtualDeviceLocation:getServiceProfileVirtualDeviceLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatum:getServiceProfilesDatum": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfig:getServiceProfilesDatumAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccount:getServiceProfilesDatumAccount"
                    },
                    "description": "Service Profile Owner Account Information\n"
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumChangeLog:getServiceProfilesDatumChangeLog"
                    },
                    "description": "Captures connection lifecycle change information\n"
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumCustomField:getServiceProfilesDatumCustomField"
                    },
                    "description": "Custom Fields\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Service Profile URI response attribute\n"
                },
                "marketingInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMarketingInfo:getServiceProfilesDatumMarketingInfo"
                    },
                    "description": "Marketing Info\n"
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMetro:getServiceProfilesDatumMetro"
                    },
                    "description": "Access point config information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumNotification:getServiceProfilesDatumNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumPort:getServiceProfilesDatumPort"
                    },
                    "description": "Ports\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumProject:getServiceProfilesDatumProject"
                    },
                    "description": "Project information\n"
                },
                "selfProfile": {
                    "type": "boolean",
                    "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                },
                "state": {
                    "type": "string",
                    "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the connection\n"
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n"
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumVirtualDevice:getServiceProfilesDatumVirtualDevice"
                    },
                    "description": "Virtual Devices\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "accounts",
                "allowedEmails",
                "changeLogs",
                "customFields",
                "description",
                "href",
                "marketingInfos",
                "metros",
                "name",
                "notifications",
                "ports",
                "projects",
                "selfProfile",
                "state",
                "tags",
                "type",
                "uuid",
                "virtualDevices",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfig:getServiceProfilesDatumAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller\n"
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "description": "Availability of a bandwidth upgrade. The default is false\n"
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to customize the bandwidth\n"
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "description": "Setting to allow or prohibit remote connections to the service profile\n"
                },
                "apiConfig": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigApiConfig:getServiceProfilesDatumAccessPointTypeConfigApiConfig",
                    "description": "Api configuration details\n"
                },
                "authenticationKey": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey:getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey",
                    "description": "Authentication key details\n"
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Percentage of port bandwidth at which an allocation alert is generated\n"
                },
                "connectionLabel": {
                    "type": "string",
                    "description": "Custom name for Connection\n"
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "description": "Mandate redundant connections\n"
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "description": "Enable auto generate service key\n"
                },
                "linkProtocolConfig": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig:getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig",
                    "description": "Link protocol configuration details\n"
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Supported bandwidths\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigApiConfig:getServiceProfilesDatumAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "description": "Setting showing that oversubscription support is available (true) or not (false). The default is false\n"
                },
                "apiAvailable": {
                    "type": "boolean",
                    "description": "Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.\n"
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "description": "Indicates if the connection bandwidth can be obtained directly from the cloud service provider.\n"
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "description": "Setting indicating that the port is managed by Equinix (true) or not (false)\n"
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "description": "Setting indicating that the VLAN is managed by Equinix (true) or not (false)\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.\n"
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "description": "Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey:getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name of the parameter that must be provided to authorize the connection.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Requirement to configure an authentication key.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig:getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "description": "Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.\n"
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "description": "Additional tagging information required by the seller profile.\n"
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "description": "Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumAccount:getServiceProfilesDatumAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Legal name of the accountholder.\n"
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Equinix-assigned account number.\n"
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Equinix-assigned ID of the subscriber's parent organization.\n"
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's parent organization.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Equinix-assigned ID of the subscriber's organization.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "Equinix-assigned name of the subscriber's organization.\n"
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumChangeLog:getServiceProfilesDatumChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Created by User Key\n"
                },
                "createdByEmail": {
                    "type": "string",
                    "description": "Created by User Email Address\n"
                },
                "createdByFullName": {
                    "type": "string",
                    "description": "Created by User Full Name\n"
                },
                "createdDateTime": {
                    "type": "string",
                    "description": "Created by Date and Time\n"
                },
                "deletedBy": {
                    "type": "string",
                    "description": "Deleted by User Key\n"
                },
                "deletedByEmail": {
                    "type": "string",
                    "description": "Deleted by User Email Address\n"
                },
                "deletedByFullName": {
                    "type": "string",
                    "description": "Deleted by User Full Name\n"
                },
                "deletedDateTime": {
                    "type": "string",
                    "description": "Deleted by Date and Time\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Updated by User Key\n"
                },
                "updatedByEmail": {
                    "type": "string",
                    "description": "Updated by User Email Address\n"
                },
                "updatedByFullName": {
                    "type": "string",
                    "description": "Updated by User Full Name\n"
                },
                "updatedDateTime": {
                    "type": "string",
                    "description": "Updated by Date and Time\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumCustomField:getServiceProfilesDatumCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "description": "Required field\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "Data type\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required field\n"
                }
            },
            "type": "object",
            "required": [
                "dataType",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumMarketingInfo:getServiceProfilesDatumMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "description": "Logo\n"
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMarketingInfoProcessStep:getServiceProfilesDatumMarketingInfoProcessStep"
                    },
                    "description": "Process Step\n"
                },
                "promotion": {
                    "type": "boolean",
                    "description": "Promotion\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumMarketingInfoProcessStep:getServiceProfilesDatumMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "subTitle": {
                    "type": "string",
                    "description": "Sub Title\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumMetro:getServiceProfilesDatumMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Metro Code - Example SV\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display Name\n"
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IBX- Equinix International Business Exchange list\n"
                },
                "inTrail": {
                    "type": "boolean",
                    "description": "In Trail\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n"
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Seller Regions\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesDatumNotification:getServiceProfilesDatumNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS\n"
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumPort:getServiceProfilesDatumPort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "description": "Cross Connect Id\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilesDatumPortLocation:getServiceProfilesDatumPortLocation",
                    "description": "Colo/Port Location\n"
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Seller Region\n"
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "description": "Seller Region details\n"
                },
                "type": {
                    "type": "string",
                    "description": "Colo/Port Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumPortLocation:getServiceProfilesDatumPortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumProject:getServiceProfilesDatumProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n"
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumVirtualDevice:getServiceProfilesDatumVirtualDevice": {
            "properties": {
                "interfaceUuid": {
                    "type": "string",
                    "description": "Device Interface Uuid\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/getServiceProfilesDatumVirtualDeviceLocation:getServiceProfilesDatumVirtualDeviceLocation",
                    "description": "Device Location\n"
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device Type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Virtual Device Uuid\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumVirtualDeviceLocation:getServiceProfilesDatumVirtualDeviceLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "description": "IBX Code\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Access point metro code\n"
                },
                "metroName": {
                    "type": "string",
                    "description": "Access point metro name\n"
                },
                "region": {
                    "type": "string",
                    "description": "Access point region\n"
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Possible operator to use on filters = - equal\n"
                },
                "property": {
                    "type": "string",
                    "description": "Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesSort:getServiceProfilesSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "Priority type- DESC, ASC\n"
                },
                "property": {
                    "type": "string",
                    "description": "Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime\n"
                }
            },
            "type": "object"
        },
        "equinix:fabric/notificationsType:NotificationsType": {
            "type": "string",
            "enum": [
                {
                    "name": "All",
                    "value": "ALL"
                },
                {
                    "name": "ConnectionApproval",
                    "value": "CONNECTION_APPROVAL"
                },
                {
                    "name": "SalesNotifications",
                    "value": "SALES_REP_NOTIFICATIONS"
                },
                {
                    "name": "Notifications",
                    "value": "NOTIFICATIONS"
                }
            ]
        },
        "equinix:fabric/profileAccessPointType:ProfileAccessPointType": {
            "type": "string",
            "enum": [
                {
                    "name": "Colo",
                    "description": "Colocation",
                    "value": "COLO"
                },
                {
                    "name": "VD",
                    "description": "Virtual Device",
                    "value": "VD"
                }
            ]
        },
        "equinix:fabric/profileState:ProfileState": {
            "type": "string",
            "enum": [
                {
                    "name": "Active",
                    "value": "ACTIVE"
                },
                {
                    "name": "PendingApproval",
                    "value": "PENDING_APPROVAL"
                },
                {
                    "name": "Deleted",
                    "value": "DELETED"
                },
                {
                    "name": "Rejected",
                    "value": "REJECTED"
                }
            ]
        },
        "equinix:fabric/profileType:ProfileType": {
            "type": "string",
            "enum": [
                {
                    "name": "L2Profile",
                    "value": "L2_PROFILE"
                },
                {
                    "name": "L3Profile",
                    "value": "L3_PROFILE"
                }
            ]
        },
        "equinix:fabric/profileVisibility:ProfileVisibility": {
            "type": "string",
            "enum": [
                {
                    "name": "Public",
                    "value": "PUBLIC"
                },
                {
                    "name": "Private",
                    "value": "PRIVATE"
                }
            ]
        },
        "equinix:fabric/serviceTokenType:ServiceTokenType": {
            "type": "string",
            "enum": [
                {
                    "name": "VCToken",
                    "value": "VC_TOKEN"
                }
            ]
        },
        "equinix:index/metro:Metro": {
            "type": "string",
            "enum": [
                {
                    "name": "Amsterdam",
                    "value": "AM"
                },
                {
                    "name": "Ashburn",
                    "value": "DC"
                },
                {
                    "name": "Atlanta",
                    "value": "AT"
                },
                {
                    "name": "Barcelona",
                    "value": "BA"
                },
                {
                    "name": "Bogota",
                    "value": "BG"
                },
                {
                    "name": "Bordeaux",
                    "value": "BX"
                },
                {
                    "name": "Boston",
                    "value": "BO"
                },
                {
                    "name": "Brussels",
                    "value": "BL"
                },
                {
                    "name": "Calgary",
                    "value": "CL"
                },
                {
                    "name": "Canberra",
                    "value": "CA"
                },
                {
                    "name": "Chicago",
                    "value": "CH"
                },
                {
                    "name": "Dallas",
                    "value": "DA"
                },
                {
                    "name": "Denver",
                    "value": "DE"
                },
                {
                    "name": "Dubai",
                    "value": "DX"
                },
                {
                    "name": "Dublin",
                    "value": "DB"
                },
                {
                    "name": "Frankfurt",
                    "value": "FR"
                },
                {
                    "name": "Geneva",
                    "value": "GV"
                },
                {
                    "name": "Hamburg",
                    "value": "HH"
                },
                {
                    "name": "Helsinki",
                    "value": "HE"
                },
                {
                    "name": "HongKong",
                    "value": "HK"
                },
                {
                    "name": "Istanbul",
                    "value": "IL"
                },
                {
                    "name": "Kamloops",
                    "value": "KA"
                },
                {
                    "name": "Lisbon",
                    "value": "LS"
                },
                {
                    "name": "London",
                    "value": "LD"
                },
                {
                    "name": "LosAngeles",
                    "value": "LA"
                },
                {
                    "name": "Madrid",
                    "value": "MD"
                },
                {
                    "name": "Manchester",
                    "value": "MA"
                },
                {
                    "name": "Melbourne",
                    "value": "ME"
                },
                {
                    "name": "MexicoCity",
                    "value": "MX"
                },
                {
                    "name": "Miami",
                    "value": "MI"
                },
                {
                    "name": "Milan",
                    "value": "ML"
                },
                {
                    "name": "Montreal",
                    "value": "MT"
                },
                {
                    "name": "Mumbai",
                    "value": "MB"
                },
                {
                    "name": "Munich",
                    "value": "MU"
                },
                {
                    "name": "NewYork",
                    "value": "NY"
                },
                {
                    "name": "Osaka",
                    "value": "OS"
                },
                {
                    "name": "Paris",
                    "value": "PA"
                },
                {
                    "name": "Perth",
                    "value": "PE"
                },
                {
                    "name": "Philadelphia",
                    "value": "PH"
                },
                {
                    "name": "RioDeJaneiro",
                    "value": "RJ"
                },
                {
                    "name": "SaoPaulo",
                    "value": "SP"
                },
                {
                    "name": "Seattle",
                    "value": "SE"
                },
                {
                    "name": "Seoul",
                    "value": "SL"
                },
                {
                    "name": "SiliconValley",
                    "value": "SV"
                },
                {
                    "name": "Singapore",
                    "value": "SG"
                },
                {
                    "name": "Sofia",
                    "value": "SO"
                },
                {
                    "name": "Stockholm",
                    "value": "SK"
                },
                {
                    "name": "Sydney",
                    "value": "SY"
                },
                {
                    "name": "Tokyo",
                    "value": "TY"
                },
                {
                    "name": "Toronto",
                    "value": "TR"
                },
                {
                    "name": "Vancouver",
                    "value": "VA"
                },
                {
                    "name": "Warsaw",
                    "value": "WA"
                },
                {
                    "name": "Winnipeg",
                    "value": "WI"
                },
                {
                    "name": "Zurich",
                    "value": "ZH"
                }
            ]
        },
        "equinix:metal/DeviceBehavior:DeviceBehavior": {
            "properties": {
                "allowChanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`\"\n"
                }
            },
            "type": "object"
        },
        "equinix:metal/DeviceIpAddress:DeviceIpAddress": {
            "properties": {
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n"
                },
                "reservationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of UUIDs of IP block reservations\nfrom which the public IPv4 address should be taken.\n\nYou can supply one `ip_address` block per IP address type. If you use the `ip_address` you must\nalways pass a block for `private_ipv4`.\n\nTo learn more about using the reserved IP addresses for new devices, see the examples in the\nequinix.metal.ReservedIpBlock documentation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "equinix:metal/DeviceNetwork:DeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n"
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "cidr",
                        "family",
                        "gateway",
                        "public"
                    ]
                }
            }
        },
        "equinix:metal/DevicePort:DevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bonded",
                        "id",
                        "mac",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "equinix:metal/DeviceReinstall:DeviceReinstall": {
            "properties": {
                "deprovisionFast": {
                    "type": "boolean",
                    "description": "Whether the OS disk should be filled with `00h` bytes before reinstall.\nDefaults to `false`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provider should favour reinstall over destroy and create. Defaults to\n`false`.\n"
                },
                "preserveData": {
                    "type": "boolean",
                    "description": "Whether the non-OS disks should be kept or wiped during reinstall.\nDefaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "equinix:metal/GatewayTimeouts:GatewayTimeouts": {
            "properties": {
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                }
            },
            "type": "object"
        },
        "equinix:metal/InterconnectionPort:InterconnectionPort": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "linkStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n"
                },
                "role": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer",
                    "description": "Connection speed -  Values must be in the format '\u003cnumber\u003eMbps' or '\u003cnumber\u003eGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n"
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "linkStatus",
                "name",
                "role",
                "speed",
                "status",
                "virtualCircuitIds"
            ]
        },
        "equinix:metal/InterconnectionServiceToken:InterconnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxAllowedSpeed": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n"
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "maxAllowedSpeed",
                "role",
                "state",
                "type"
            ]
        },
        "equinix:metal/OrganizationAddress:OrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n"
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n"
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "zipCode"
            ]
        },
        "equinix:metal/ProjectBgpConfig:ProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "`local` or `global`, the `local` is likely to be usable immediately, the\n`global` will need to be reviewed by Equinix Metal engineers.\n"
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "status of BGP configuration in the project.\n"
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asn",
                        "deploymentType",
                        "maxPrefix",
                        "status"
                    ]
                }
            }
        },
        "equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters": {
            "properties": {
                "alwaysPxe": {
                    "type": "boolean"
                },
                "billingCycle": {
                    "type": "string"
                },
                "customdata": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hostname": {
                    "type": "string"
                },
                "ipxeScriptUrl": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Blocks deletion of the SpotMarketRequest device until the lock is disabled.\n"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "plan": {
                    "type": "string"
                },
                "projectSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "terminationTime": {
                    "type": "string"
                },
                "termintationTime": {
                    "type": "string",
                    "deprecationMessage": "Use instance_parameters.termination_time instead"
                },
                "userSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userdata": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "billingCycle",
                "hostname",
                "operatingSystem",
                "plan"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "billingCycle",
                        "hostname",
                        "operatingSystem",
                        "plan",
                        "terminationTime",
                        "termintationTime"
                    ]
                }
            }
        },
        "equinix:metal/billingCycle:BillingCycle": {
            "type": "string",
            "enum": [
                {
                    "name": "Hourly",
                    "value": "hourly"
                },
                {
                    "name": "Monthly",
                    "value": "monthly"
                }
            ]
        },
        "equinix:metal/facility:Facility": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/Facilities/operation/findFacilities",
            "type": "string",
            "enum": [
                {
                    "name": "AM2",
                    "description": "Amsterdam 2",
                    "value": "am2"
                },
                {
                    "name": "AM6",
                    "description": "Amsterdam 6",
                    "value": "am6"
                },
                {
                    "name": "MA5",
                    "description": "Manchester 5",
                    "value": "ma5"
                },
                {
                    "name": "NRT1",
                    "description": "Tokio 1",
                    "value": "nrt1"
                },
                {
                    "name": "PA4",
                    "description": "Paris 4",
                    "value": "pa4"
                },
                {
                    "name": "SK2",
                    "description": "Stockholm 2",
                    "value": "sk2"
                },
                {
                    "name": "ME2",
                    "description": "Melbourne 2",
                    "value": "me2"
                },
                {
                    "name": "HK2",
                    "description": "Hong Kong 2",
                    "value": "hk2"
                },
                {
                    "name": "TY11",
                    "description": "Tokyo 11",
                    "value": "ty11"
                },
                {
                    "name": "LA4",
                    "description": "Los Angeles 4",
                    "value": "la4"
                },
                {
                    "name": "DA6",
                    "description": "Dallas 6",
                    "value": "da6"
                },
                {
                    "name": "DA11",
                    "description": "Dallas 11",
                    "value": "da11"
                },
                {
                    "name": "DA3",
                    "description": "Dallas 3",
                    "value": "da3"
                },
                {
                    "name": "SP4",
                    "description": "Sao Paulo 4",
                    "value": "sp4"
                },
                {
                    "name": "MT1",
                    "description": "Montreal 1",
                    "value": "mt1"
                },
                {
                    "name": "SV16",
                    "description": "Silicon Valley 16",
                    "value": "sv16"
                },
                {
                    "name": "SJC1",
                    "description": "Sunnyvale, CA 1",
                    "value": "sjc1"
                },
                {
                    "name": "FRA2",
                    "description": "Frankfurt 2",
                    "value": "fra2"
                },
                {
                    "name": "FRA8",
                    "description": "Frankfurt 8",
                    "value": "fr8"
                },
                {
                    "name": "NY5",
                    "description": "New York 5",
                    "value": "ny5"
                },
                {
                    "name": "NY6",
                    "description": "New York 6",
                    "value": "ny6"
                },
                {
                    "name": "NY7",
                    "description": "New York 7",
                    "value": "ny7"
                },
                {
                    "name": "CH3",
                    "description": "Chicago 3",
                    "value": "ch3"
                },
                {
                    "name": "SL1",
                    "description": "Seoul 1",
                    "value": "sl1"
                },
                {
                    "name": "SY5",
                    "description": "Sydney 5",
                    "value": "sy5"
                },
                {
                    "name": "OS3",
                    "description": "Osaka 3",
                    "value": "os3"
                },
                {
                    "name": "LD7",
                    "description": "London 7",
                    "value": "ld7"
                },
                {
                    "name": "DC10",
                    "description": "Washington DC 10",
                    "value": "dc10"
                },
                {
                    "name": "AMS1",
                    "description": "Amsterdam 1",
                    "value": "ams1"
                },
                {
                    "name": "SG4",
                    "description": "Singapore 4",
                    "value": "sg4"
                },
                {
                    "name": "SE4",
                    "description": "Seattle 4",
                    "value": "se4"
                },
                {
                    "name": "SY4",
                    "description": "Sydney 4",
                    "value": "sy4"
                },
                {
                    "name": "AT4",
                    "description": "Atlanta 4",
                    "value": "at4"
                },
                {
                    "name": "DFW2",
                    "description": "Dallas 2",
                    "value": "dfw2"
                },
                {
                    "name": "TR2",
                    "description": "Toronto",
                    "value": "tr2"
                },
                {
                    "name": "DC13",
                    "description": "Washington DC",
                    "value": "dc13"
                },
                {
                    "name": "HE7",
                    "description": "Helsinki",
                    "value": "he7"
                },
                {
                    "name": "EWR1",
                    "description": "Parsippany, NJ 1",
                    "value": "ewr1"
                },
                {
                    "name": "SG5",
                    "description": "Singapore 5",
                    "value": "sg5"
                },
                {
                    "name": "SG1",
                    "description": "Singapore 1",
                    "value": "sg1"
                },
                {
                    "name": "MD2",
                    "description": "Madrid 2",
                    "value": "md2"
                },
                {
                    "name": "SV15",
                    "description": "Silicon Valley 15",
                    "value": "sv15"
                }
            ]
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighbor:getDeviceBgpNeighborsBgpNeighbor": {
            "properties": {
                "addressFamily": {
                    "type": "integer",
                    "description": "IP address version, 4 or 6.\n"
                },
                "customerAs": {
                    "type": "integer",
                    "description": "Local autonomous system number.\n"
                },
                "customerIp": {
                    "type": "string",
                    "description": "Local used peer IP address.\n"
                },
                "md5Enabled": {
                    "type": "boolean",
                    "description": "Whether BGP session is password enabled.\n"
                },
                "md5Password": {
                    "type": "string",
                    "description": "BGP session password in plaintext (not a checksum).\n",
                    "secret": true
                },
                "multihop": {
                    "type": "boolean",
                    "description": "Whether the neighbor is in EBGP multihop session.\n"
                },
                "peerAs": {
                    "type": "integer",
                    "description": "Peer AS number (different than customer_as for EBGP).\n"
                },
                "peerIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses of this neighbor's peers.\n"
                },
                "routesIns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesIn:getDeviceBgpNeighborsBgpNeighborRoutesIn"
                    },
                    "description": "Array of incoming routes.\n"
                },
                "routesOuts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesOut:getDeviceBgpNeighborsBgpNeighborRoutesOut"
                    },
                    "description": "Array of outgoing routes in the same format.\n"
                }
            },
            "type": "object",
            "required": [
                "addressFamily",
                "customerAs",
                "customerIp",
                "md5Enabled",
                "md5Password",
                "multihop",
                "peerAs",
                "routesIns",
                "routesOuts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesIn:getDeviceBgpNeighborsBgpNeighborRoutesIn": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n"
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n"
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesOut:getDeviceBgpNeighborsBgpNeighborRoutesOut": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n"
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n"
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceNetwork:getDeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Bit length of the network mask of the address.\n"
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "cidr",
                "family",
                "gateway",
                "public"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicePort:getDevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).\n"
                }
            },
            "type": "object",
            "required": [
                "bonded",
                "id",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicesDevice:getDevicesDevice": {
            "properties": {
                "accessPrivateIpv4": {
                    "type": "string",
                    "description": "The ipv4 private IP assigned to the device\n"
                },
                "accessPublicIpv4": {
                    "type": "string",
                    "description": "The ipv4 management IP assigned to the device\n"
                },
                "accessPublicIpv6": {
                    "type": "string",
                    "description": "The ipv6 management IP assigned to the device\n"
                },
                "alwaysPxe": {
                    "type": "boolean"
                },
                "billingCycle": {
                    "type": "string",
                    "description": "The billing cycle of the device (monthly or hourly)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string for the device\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "Device ID\n"
                },
                "facility": {
                    "type": "string",
                    "description": "The facility where the device is deployed\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The id of hardware reservation which this device occupies\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The device name\n"
                },
                "ipxeScriptUrl": {
                    "type": "string"
                },
                "metro": {
                    "type": "string",
                    "description": "The metro where the device is deployed\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "L2 network type of the device, one oflayer3, hybrid, layer2-individual, layer2-bonded\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDevicesDeviceNetwork:getDevicesDeviceNetwork"
                    },
                    "description": "The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 networks: ublic IPv4 at equinix_metal_device.name.network.0, IPv6 at equinix_metal_device.name.network.1 and private IPv4 at equinix_metal_device.name.network.2. Elastic addresses then stack by type - an assigned public IPv4 will go after the management public IPv4 (to index 1), and will then shift the indices of the IPv6 and private IPv4. Assigned private IPv4 will go after the management private IPv4 (to the end of the network list).\n"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "The operating system running on the device\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The hardware config of the device\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDevicesDevicePort:getDevicesDevicePort"
                    },
                    "description": "Ports assigned to the device\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project containing the devices. Exactly one of `project_id` and `organization_id` must be set.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Root password to the server (if still available)\n",
                    "secret": true
                },
                "sosHostname": {
                    "type": "string",
                    "description": "The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of SSH keys deployed in the device, can be both user or project SSH keys\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the device\n"
                },
                "storage": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device\n"
                }
            },
            "type": "object",
            "required": [
                "accessPrivateIpv4",
                "accessPublicIpv4",
                "accessPublicIpv6",
                "alwaysPxe",
                "billingCycle",
                "description",
                "deviceId",
                "facility",
                "hardwareReservationId",
                "hostname",
                "ipxeScriptUrl",
                "metro",
                "networks",
                "networkType",
                "operatingSystem",
                "plan",
                "ports",
                "projectId",
                "rootPassword",
                "sosHostname",
                "sshKeyIds",
                "state",
                "storage",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicesDeviceNetwork:getDevicesDeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Bit length of the network mask of the address\n"
                },
                "family": {
                    "type": "integer",
                    "description": "IP version - \"4\" or \"6\"\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "cidr",
                "family",
                "gateway",
                "public"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicesDevicePort:getDevicesDevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the device\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. eth0, or bond0)\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the port (e.g. NetworkPort or NetworkBondPort)\n"
                }
            },
            "type": "object",
            "required": [
                "bonded",
                "id",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicesFilter:getDevicesFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.\n\nAll fields in the `devices` block defined below can be used as attribute for both `sort` and `filter` blocks.\n"
                },
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values\n"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "values"
            ]
        },
        "equinix:metal/getDevicesSort:getDevicesSort": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc\n"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "equinix:metal/getFacilityCapacity:getFacilityCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimun number of devices that must be available in selected location.\nDefault is `1`.\n"
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:metal/getInterconnectionPort:getInterconnectionPort": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n"
                },
                "linkStatus": {
                    "type": "string",
                    "description": "Port link status.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n"
                },
                "speed": {
                    "type": "integer",
                    "description": "Port speed in bits per second.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Port status.\n"
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of IDs of virtual cicruits attached to this port.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "linkStatus",
                "name",
                "role",
                "speed",
                "status",
                "virtualCircuitIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getInterconnectionServiceToken:getInterconnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date of the service token.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n"
                },
                "maxAllowedSpeed": {
                    "type": "string",
                    "description": "Maximum allowed speed for the service token, string like in the `speed` attribute.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Token type, `a_side` or `z_side`.\n"
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "maxAllowedSpeed",
                "role",
                "state",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getMetroCapacity:getMetroCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimum number of devices that must be available in selected location.\nDefault is `1`.\n"
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:metal/getOrganizationAddress:getOrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n"
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n"
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "state",
                "zipCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getPlansFilter:getPlansFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.\n\nAll fields in the `plans` block defined below can be used as attribute for both `sort` and `filter` blocks.\n"
                },
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n"
                },
                "matchBy": {
                    "type": "string",
                    "description": "The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values\n"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "values"
            ]
        },
        "equinix:metal/getPlansPlan:getPlansPlan": {
            "properties": {
                "availableInMetros": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of metros where the plan is available\n"
                },
                "availableIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(**Deprecated**) list of facilities where the plan is available\n",
                    "deprecationMessage": "Use available_in_metros instead.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "class": {
                    "type": "string",
                    "description": "plan class\n"
                },
                "deploymentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of deployment types, e.g. on_demand, spot_market\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of the plan\n"
                },
                "id": {
                    "type": "string",
                    "description": "id of the plan\n"
                },
                "legacy": {
                    "type": "boolean",
                    "description": "flag showing if it's a legacy plan\n"
                },
                "line": {
                    "type": "string",
                    "description": "plan line, e.g. baremetal\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the plan\n"
                },
                "pricingHour": {
                    "type": "number",
                    "description": "plan hourly price\n"
                },
                "pricingMonth": {
                    "type": "number",
                    "description": "plan monthly price\n"
                },
                "slug": {
                    "type": "string",
                    "description": "plan slug\n"
                }
            },
            "type": "object",
            "required": [
                "availableIns",
                "availableInMetros",
                "class",
                "deploymentTypes",
                "description",
                "id",
                "legacy",
                "line",
                "name",
                "pricingHour",
                "pricingMonth",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getPlansSort:getPlansSort": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc\n"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "equinix:metal/getProjectBgpConfig:getProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "One of `private`, `public`.\n"
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "Status of BGP configuration in the project.\n"
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType",
                "maxPrefix",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/ipBlockType:IpBlockType": {
            "type": "string",
            "enum": [
                {
                    "name": "GlobalIPv4",
                    "value": "global_ipv4"
                },
                {
                    "name": "PublicIPv4",
                    "value": "public_ipv4"
                }
            ]
        },
        "equinix:metal/networkType:NetworkType": {
            "type": "string",
            "enum": [
                {
                    "name": "Layer3",
                    "value": "layer3"
                },
                {
                    "name": "Layer2Individual",
                    "value": "layer2-individual"
                },
                {
                    "name": "Layer2Bonded",
                    "value": "layer2-bonded"
                },
                {
                    "name": "Hybrid",
                    "value": "hybrid"
                }
            ]
        },
        "equinix:metal/operatingSystem:OperatingSystem": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/OperatingSystems/operation/findOperatingSystems",
            "type": "string",
            "enum": [
                {
                    "name": "Alma8",
                    "value": "alma_8"
                },
                {
                    "name": "Alma9",
                    "value": "alma_9"
                },
                {
                    "name": "Alpine3",
                    "value": "alpine_3"
                },
                {
                    "name": "CentOS6",
                    "value": "centos_6"
                },
                {
                    "name": "CentOS7",
                    "value": "centos_7"
                },
                {
                    "name": "CentOS8",
                    "value": "centos_8"
                },
                {
                    "name": "CoreOSAlpha",
                    "value": "coreos_alpha"
                },
                {
                    "name": "CoreOSBeta",
                    "value": "coreos_beta"
                },
                {
                    "name": "CoreOSStable",
                    "value": "coreos_stable"
                },
                {
                    "name": "CustomIPXE",
                    "value": "custom_ipxe"
                },
                {
                    "name": "Debian10",
                    "value": "debian_10"
                },
                {
                    "name": "Debian11",
                    "value": "debian_11"
                },
                {
                    "name": "Debian7",
                    "value": "debian_7"
                },
                {
                    "name": "Debian8",
                    "value": "debian_8"
                },
                {
                    "name": "Debian9",
                    "value": "debian_9"
                },
                {
                    "name": "Fedora31",
                    "value": "fedora_31"
                },
                {
                    "name": "Fedora34",
                    "value": "fedora_34"
                },
                {
                    "name": "FlatcarAlpha",
                    "value": "flatcar_alpha"
                },
                {
                    "name": "FlatcarBeta",
                    "value": "flatcar_beta"
                },
                {
                    "name": "FlatcarEdge",
                    "value": "flatcar_edge"
                },
                {
                    "name": "FlatcarLTS",
                    "value": "flatcar_lts"
                },
                {
                    "name": "FlatcarStable",
                    "value": "flatcar_stable"
                },
                {
                    "name": "FreeBSD10_3",
                    "value": "freebsd_10_3"
                },
                {
                    "name": "FreeBSD10_4",
                    "value": "freebsd_10_4"
                },
                {
                    "name": "FreeBSD11_0",
                    "value": "freebsd_11_0"
                },
                {
                    "name": "FreeBSD11_1",
                    "value": "freebsd_11_1"
                },
                {
                    "name": "FreeBSD11_2",
                    "value": "freebsd_11_2"
                },
                {
                    "name": "FreeBSD11_3",
                    "value": "freebsd_11_3"
                },
                {
                    "name": "FreeBSD11_4",
                    "value": "freebsd_11_4"
                },
                {
                    "name": "FreeBSD12Testing",
                    "value": "freebsd_12_testing"
                },
                {
                    "name": "FreeBSD12_1",
                    "value": "freebsd_12_1"
                },
                {
                    "name": "FreeBSD13_0",
                    "value": "freebsd_13_0"
                },
                {
                    "name": "FreeBSD13_1",
                    "value": "freebsd_13_1"
                },
                {
                    "name": "FreeBSD13_testing",
                    "value": "freebsd_13_testing"
                },
                {
                    "name": "HookEsxi7",
                    "value": "hook_esxi7"
                },
                {
                    "name": "NixOS17_03",
                    "value": "nixos_17_03"
                },
                {
                    "name": "NixOS18_03",
                    "value": "nixos_18_03"
                },
                {
                    "name": "NixOS19_03",
                    "value": "nixos_19_03"
                },
                {
                    "name": "NixOS20_09",
                    "value": "nixos_20_09"
                },
                {
                    "name": "NixOS21_11",
                    "value": "nixos_21_11"
                },
                {
                    "name": "NixOS22_05",
                    "value": "nixos_22_05"
                },
                {
                    "name": "NixOS22_11",
                    "value": "nixos_22_11"
                },
                {
                    "name": "Nixos21_05",
                    "value": "nixos_21_05"
                },
                {
                    "name": "NutanixCentos",
                    "value": "nutanix_centos"
                },
                {
                    "name": "NutanixLTS5_19_1",
                    "value": "nutanix_lts_5_19_1"
                },
                {
                    "name": "NutanixLTS5_20",
                    "value": "nutanix_lts_5_20"
                },
                {
                    "name": "OpenSUSE42_3",
                    "value": "opensuse_42_3"
                },
                {
                    "name": "RHEL7",
                    "value": "rhel_7"
                },
                {
                    "name": "RHEL8",
                    "value": "rhel_8"
                },
                {
                    "name": "RHEL9",
                    "value": "rhel_9"
                },
                {
                    "name": "RancherOS",
                    "value": "rancher"
                },
                {
                    "name": "Rocky8",
                    "value": "rocky_8"
                },
                {
                    "name": "Rocky9",
                    "value": "rocky_9"
                },
                {
                    "name": "SLES12SP3",
                    "value": "suse_sles12_sp3"
                },
                {
                    "name": "ScientificLinux6",
                    "value": "scientific_6"
                },
                {
                    "name": "TalosV1",
                    "value": "talos_v1"
                },
                {
                    "name": "Ubuntu1710",
                    "value": "ubuntu_17_10"
                },
                {
                    "name": "Ubuntu18_04",
                    "value": "ubuntu_18_04"
                },
                {
                    "name": "Ubuntu1904",
                    "value": "ubuntu_19_04"
                },
                {
                    "name": "Ubuntu19_10",
                    "value": "ubuntu_19_10"
                },
                {
                    "name": "Ubuntu20_04",
                    "value": "ubuntu_20_04"
                },
                {
                    "name": "Ubuntu20_04_legacy",
                    "value": "ubuntu_20_04_legacy"
                },
                {
                    "name": "Ubuntu20_10",
                    "value": "ubuntu_20_10"
                },
                {
                    "name": "Ubuntu2204",
                    "value": "ubuntu_22_04"
                },
                {
                    "name": "VMWareAlloyVcf",
                    "value": "vmware_alloy_vcf"
                },
                {
                    "name": "VMWareEsxi5_5",
                    "value": "vmware_esxi_5_5"
                },
                {
                    "name": "VMWareEsxi6_0",
                    "value": "vmware_esxi_6_0"
                },
                {
                    "name": "VMWareEsxi6_5",
                    "value": "vmware_esxi_6_5"
                },
                {
                    "name": "VMWareEsxi6_7",
                    "value": "vmware_esxi_6_7"
                },
                {
                    "name": "VMWareEsxi6_7_vcf",
                    "value": "vmware_esxi_6_7_vcf"
                },
                {
                    "name": "VMWareEsxi7_0",
                    "value": "vmware_esxi_7_0"
                },
                {
                    "name": "VMWareEsxi7_0U2a",
                    "value": "vmware_esxi_7_0U2a"
                },
                {
                    "name": "VMWareEsxi7_0_vcf",
                    "value": "vmware_esxi_7_0_vcf"
                },
                {
                    "name": "VMWareNsx2_5_0",
                    "value": "vmware_nsx_2_5_0"
                },
                {
                    "name": "VMWareNsx3_0_0",
                    "value": "vmware_nsx_3_0_0"
                },
                {
                    "name": "Virtuozzo7",
                    "value": "virtuozzo_7"
                },
                {
                    "name": "Windows2012R2",
                    "value": "windows_2012_r2"
                },
                {
                    "name": "Windows2016",
                    "value": "windows_2016"
                },
                {
                    "name": "Windows2019",
                    "value": "windows_2019"
                },
                {
                    "name": "Windows2022",
                    "value": "windows_2022"
                }
            ]
        },
        "equinix:metal/plan:Plan": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/Plans/operation/findPlans",
            "type": "string",
            "enum": [
                {
                    "name": "A3LargeX86",
                    "value": "a3.large.x86"
                },
                {
                    "name": "C2LargeARM",
                    "value": "c2.large.arm"
                },
                {
                    "name": "C2MediumX86",
                    "value": "c2.medium.x86"
                },
                {
                    "name": "C3LargeARM",
                    "value": "c3.large.arm64"
                },
                {
                    "name": "C3MediumX86",
                    "value": "c3.medium.x86"
                },
                {
                    "name": "C3SmallX86",
                    "value": "c3.small.x86"
                },
                {
                    "name": "F3LargeX86",
                    "value": "f3.large.x86"
                },
                {
                    "name": "F3MediumX86",
                    "value": "f3.medium.x86"
                },
                {
                    "name": "G2LargeX86",
                    "value": "g2.large.x86"
                },
                {
                    "name": "M2XLargeX86",
                    "value": "m2.xlarge.x86"
                },
                {
                    "name": "M3LargeX86",
                    "value": "m3.large.x86"
                },
                {
                    "name": "M3SmallX86",
                    "value": "m3.small.x86"
                },
                {
                    "name": "N2XLargeX86",
                    "value": "n2.xlarge.x86"
                },
                {
                    "name": "N3XLargeX86",
                    "value": "n3.xlarge.x86"
                },
                {
                    "name": "S3XLargeX86",
                    "value": "s3.xlarge.x86"
                },
                {
                    "name": "T3SmallX86",
                    "value": "t3.small.x86"
                },
                {
                    "name": "X2XLargeX86",
                    "value": "x2.xlarge.x86"
                },
                {
                    "name": "X3XLargeX86",
                    "value": "x3.xlarge.x86"
                }
            ]
        },
        "equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail": {
            "properties": {
                "aclStatus": {
                    "type": "string",
                    "description": "Device ACL provisioning status where template was applied. One of `PROVISIONING`,\n`PROVISIONED`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aclStatus",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n"
                },
                "dstPort": {
                    "type": "string",
                    "description": "Inbound traffic destination ports. Allowed values are a comma separated\nlist of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n"
                },
                "protocol": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/aclRuleProtocolType:AclRuleProtocolType"
                        }
                    ],
                    "description": "Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "Inbound rule sequence number\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of traffic source used in a given inbound rule\n",
                    "deprecationMessage": "Source Type will not be returned"
                },
                "srcPort": {
                    "type": "string",
                    "description": "Inbound traffic source ports. Allowed values are a comma separated list\nof ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Inbound traffic source IP subnet in CIDR format.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inbound traffic source IP subnets in CIDR format.\n",
                    "deprecationMessage": "Use Subnet instead"
                }
            },
            "type": "object",
            "required": [
                "dstPort",
                "protocol",
                "srcPort"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dstPort",
                        "protocol",
                        "sequenceNumber",
                        "sourceType",
                        "srcPort"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster device\n"
                },
                "node0": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode0:DeviceClusterDetailsNode0",
                    "description": "An object that has `node0` configuration.\nSee Cluster Details - Nodes below for more details.\n"
                },
                "node1": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode1:DeviceClusterDetailsNode1",
                    "description": "An object that has `node1` configuration.\nSee Cluster Details - Nodes below for more details.\n"
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "node0",
                "node1"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "clusterName",
                        "node0",
                        "node1",
                        "numOfNodes"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode0:DeviceClusterDetailsNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode0VendorConfiguration:DeviceClusterDetailsNode0VendorConfiguration",
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode0VendorConfiguration:DeviceClusterDetailsNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode1:DeviceClusterDetailsNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode1VendorConfiguration:DeviceClusterDetailsNode1VendorConfiguration",
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode1VendorConfiguration:DeviceClusterDetailsNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceInterface:DeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Device ASN number. Not required for self configured devices.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Device identifier.\n"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Device network interface identifier to use for device link\nconnection.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address from device link subnet that was assigned to the device\n"
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ipAddress",
                        "status"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceLinkLink:DeviceLinkLink": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "billing account number to be used for\nconnection charges\n"
                },
                "dstMetroCode": {
                    "type": "string",
                    "description": "connection destination metro code.\n"
                },
                "dstZoneCode": {
                    "type": "string",
                    "description": "connection destination zone code is not required.\n",
                    "deprecationMessage": "DestinationZoneCode is not required"
                },
                "srcMetroCode": {
                    "type": "string",
                    "description": "connection source metro code.\n"
                },
                "srcZoneCode": {
                    "type": "string",
                    "description": "connection source zone code is not required.\n",
                    "deprecationMessage": "SourceZoneCode is not required"
                },
                "throughput": {
                    "type": "string",
                    "description": "connection throughput.\n"
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "connection throughput unit (Mbps or Gbps).\n"
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "dstMetroCode",
                "srcMetroCode",
                "throughput",
                "throughputUnit"
            ]
        },
        "equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for secondary device.\n",
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied\non a secondary device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, for a secondary\ndevice.\n"
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on a secondary device.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Secondary device hostname.\n",
                    "willReplaceOnChanges": true
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceSecondaryDeviceInterface:DeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\nsecondary device. Applicable for some device types in BYOL licensing mode.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on a secondary device.\n",
                    "willReplaceOnChanges": true
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token can be provided for some device types o the device.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Metro location of a secondary device.\n",
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on a secondary device.\n* `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary\ndevice.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Secondary device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive notifications about\nsecondary device.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the device is scoped to.If you\nleave it out, the device will be created under the default project id of your organization.\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n"
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n"
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n"
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDeviceSshKey:DeviceSecondaryDeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/Value pairs of vendor specific configuration parameters\nfor a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,\n`systemIpAddress`.\n",
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n",
                    "willReplaceOnChanges": true
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n"
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "metroCode",
                "name",
                "notifications"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountNumber",
                        "additionalBandwidth",
                        "asn",
                        "ibx",
                        "interfaces",
                        "licenseFileId",
                        "licenseStatus",
                        "metroCode",
                        "name",
                        "notifications",
                        "projectId",
                        "redundancyType",
                        "redundantId",
                        "region",
                        "sshIpAddress",
                        "sshIpFqdn",
                        "status",
                        "uuid",
                        "vendorConfiguration",
                        "zoneCode"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceSecondaryDeviceInterface:DeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceSecondaryDeviceSshKey:DeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "description": "Reference by name to previously provisioned public SSH key\n"
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n"
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        },
        "equinix:networkedge/DeviceSshKey:DeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "description": "Reference by name to previously provisioned public SSH key\n"
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n"
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        },
        "equinix:networkedge/aclRuleProtocolType:AclRuleProtocolType": {
            "type": "string",
            "enum": [
                {
                    "name": "IP",
                    "value": "IP"
                },
                {
                    "name": "TCP",
                    "value": "TCP"
                },
                {
                    "name": "UDP",
                    "value": "UDP"
                }
            ]
        },
        "equinix:networkedge/fileType:FileType": {
            "type": "string",
            "enum": [
                {
                    "name": "License",
                    "value": "LICENSE"
                },
                {
                    "name": "CloudInit",
                    "value": "CLOUD_INIT"
                }
            ]
        },
        "equinix:networkedge/getDeviceClusterDetail:getDeviceClusterDetail": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the cluster\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster device\n"
                },
                "node0s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode0:getDeviceClusterDetailNode0"
                    },
                    "description": "An object that has node0 details\n"
                },
                "node1s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode1:getDeviceClusterDetailNode1"
                    },
                    "description": "An object that has node1 details\n"
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster\n"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "node0s",
                "node1s",
                "numOfNodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode0:getDeviceClusterDetailNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "secret": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n"
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode0VendorConfiguration:getDeviceClusterDetailNode0VendorConfiguration"
                    },
                    "description": "An object that has fields relevant to the vendor of the cluster device\n"
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode0VendorConfiguration:getDeviceClusterDetailNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters\n",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in to the console. This field is not available for all device types\n",
                    "secret": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device\n"
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode1:getDeviceClusterDetailNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "secret": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License token. This is necessary for Palo Alto clusters\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n"
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode1VendorConfiguration:getDeviceClusterDetailNode1VendorConfiguration"
                    },
                    "description": "An object that has fields relevant to the vendor of the cluster device\n"
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode1VendorConfiguration:getDeviceClusterDetailNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters\n",
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in to the console. This field is not available for all device types\n",
                    "secret": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device\n"
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceInterface:getDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "Interface management type (Equinix Managed or empty)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Interface identifier\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "Interface MAC addres\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "Interface operational status (up or down)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n* RESOURCE_UPGRADE_IN_PROGRESS\n* RESOURCE_UPGRADE_FAILED\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDevice:getDeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Device billing account number\n"
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Unique identifier of applied ACL template\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be allocated to the device\n"
                },
                "asn": {
                    "type": "integer",
                    "description": "Autonomous system number\n"
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied cloud init file\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix\n"
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDeviceInterface:getDeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n"
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode\n"
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n"
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n* NA\n"
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing mode\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code\n"
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Unique identifier of applied MGMT ACL template\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status notifications\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of Project Resource to which device is scoped to\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n"
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices\n"
                },
                "region": {
                    "type": "string",
                    "description": "Device location region\n"
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device\n"
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDeviceSshKey:getDeviceSecondaryDeviceSshKey"
                    },
                    "description": "Definition of SSH key that will be provisioned on a device\n"
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n* RESOURCE_UPGRADE_IN_PROGRESS\n* RESOURCE_UPGRADE_FAILED\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n"
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)\n"
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n"
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code\n"
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "aclTemplateId",
                "additionalBandwidth",
                "asn",
                "cloudInitFileId",
                "hostname",
                "ibx",
                "interfaces",
                "licenseFile",
                "licenseFileId",
                "licenseStatus",
                "licenseToken",
                "metroCode",
                "mgmtAclTemplateUuid",
                "name",
                "notifications",
                "projectId",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "sshKeys",
                "status",
                "uuid",
                "vendorConfiguration",
                "wanInterfaceId",
                "zoneCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDeviceInterface:getDeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "Interface management type (Equinix Managed or empty)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Interface identifier\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "Interface MAC addres\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n"
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "Interface operational status (up or down)\n"
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n* RESOURCE_UPGRADE_IN_PROGRESS\n* RESOURCE_UPGRADE_FAILED\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDeviceSshKey:getDeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "description": "Reference by name to previously provisioned public SSH key\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username associated with given key\n"
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSshKey:getDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "description": "Reference by name to previously provisioned public SSH key\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username associated with given key\n"
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/throughputUnit:ThroughputUnit": {
            "type": "string",
            "enum": [
                {
                    "name": "Mbps",
                    "value": "Mbps"
                },
                {
                    "name": "Gbps",
                    "value": "Gbps"
                }
            ]
        }
    },
    "provider": {
        "description": "The provider type for the equinix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries.\n"
            },
            "maxRetryWaitSeconds": {
                "type": "integer",
                "description": "Maximum number of seconds to wait before retrying a request.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        },
        "inputProperties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of retries.\n"
            },
            "maxRetryWaitSeconds": {
                "type": "integer",
                "description": "Maximum number of seconds to wait before retrying a request.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "resources": {
        "equinix:fabric/cloudRouter:CloudRouter": {
            "description": "Fabric V4 API compatible resource allows creation and management of [Equinix Fabric Cloud Router](https://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks).\n\nAdditional Fabric Cloud Router documentation:\n* Getting Started: \u003chttps://docs.equinix.com/en-us/Content/Interconnection/FCR/FCR-intro.htm#HowItWorks\u003e\n* API: \u003chttps://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers\u003e\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst metro = config.get(\"metro\") || \"FR\";\nconst accountNum = config.requireNumber(\"accountNum\");\nconst router = new equinix.fabric.CloudRouter(\"router\", {\n    name: \"My-Fabric-Cloud-Router\",\n    type: \"XF_ROUTER\",\n    location: {\n        metroCode: metro,\n    },\n    \"package\": {\n        code: \"BASIC\",\n    },\n    notifications: [{\n        type: \"ALL\",\n        emails: [\"example@equinix.com\"],\n    }],\n    account: {\n        accountNumber: 272010,\n    },\n});\nexport const routerId = router.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"FR\"\naccount_num = config.require_int(\"accountNum\")\nrouter = equinix.fabric.CloudRouter(\"router\",\n    name=\"My-Fabric-Cloud-Router\",\n    type=\"XF_ROUTER\",\n    location=equinix.fabric.CloudRouterLocationArgs(\n        metro_code=metro,\n    ),\n    package=equinix.fabric.CloudRouterPackageArgs(\n        code=\"BASIC\",\n    ),\n    notifications=[equinix.fabric.CloudRouterNotificationArgs(\n        type=\"ALL\",\n        emails=[\"example@equinix.com\"],\n    )],\n    account=equinix.fabric.CloudRouterAccountArgs(\n        account_number=272010,\n    ))\npulumi.export(\"routerId\", router.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tmetro := \"FR\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\taccountNum := cfg.RequireInt(\"accountNum\")\n\t\trouter, err := fabric.NewCloudRouter(ctx, \"router\", \u0026fabric.CloudRouterArgs{\n\t\t\tName: pulumi.String(\"My-Fabric-Cloud-Router\"),\n\t\t\tType: pulumi.String(\"XF_ROUTER\"),\n\t\t\tLocation: \u0026fabric.CloudRouterLocationArgs{\n\t\t\t\tMetroCode: pulumi.String(metro),\n\t\t\t},\n\t\t\tPackage: \u0026fabric.CloudRouterPackageArgs{\n\t\t\t\tCode: pulumi.String(\"BASIC\"),\n\t\t\t},\n\t\t\tNotifications: fabric.CloudRouterNotificationArray{\n\t\t\t\t\u0026fabric.CloudRouterNotificationArgs{\n\t\t\t\t\tType: pulumi.String(\"ALL\"),\n\t\t\t\t\tEmails: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"example@equinix.com\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAccount: \u0026fabric.CloudRouterAccountArgs{\n\t\t\t\tAccountNumber: pulumi.Int(272010),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"routerId\", router.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var metro = config.Get(\"metro\") ?? \"FR\";\n    var accountNum = config.RequireInt32(\"accountNum\");\n    var router = new Equinix.Fabric.CloudRouter(\"router\", new()\n    {\n        Name = \"My-Fabric-Cloud-Router\",\n        Type = \"XF_ROUTER\",\n        Location = new Equinix.Fabric.Inputs.CloudRouterLocationArgs\n        {\n            MetroCode = metro,\n        },\n        Package = new Equinix.Fabric.Inputs.CloudRouterPackageArgs\n        {\n            Code = \"BASIC\",\n        },\n        Notifications = new[]\n        {\n            new Equinix.Fabric.Inputs.CloudRouterNotificationArgs\n            {\n                Type = \"ALL\",\n                Emails = new[]\n                {\n                    \"example@equinix.com\",\n                },\n            },\n        },\n        Account = new Equinix.Fabric.Inputs.CloudRouterAccountArgs\n        {\n            AccountNumber = 272010,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"routerId\"] = router.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.CloudRouter;\nimport com.pulumi.equinix.fabric.CloudRouterArgs;\nimport com.pulumi.equinix.fabric.inputs.CloudRouterLocationArgs;\nimport com.pulumi.equinix.fabric.inputs.CloudRouterPackageArgs;\nimport com.pulumi.equinix.fabric.inputs.CloudRouterNotificationArgs;\nimport com.pulumi.equinix.fabric.inputs.CloudRouterAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var metro = config.get(\"metro\").orElse(\"FR\");\n        final var accountNum = config.get(\"accountNum\");\n        var router = new CloudRouter(\"router\", CloudRouterArgs.builder()        \n            .name(\"My-Fabric-Cloud-Router\")\n            .type(\"XF_ROUTER\")\n            .location(CloudRouterLocationArgs.builder()\n                .metroCode(metro)\n                .build())\n            .package_(CloudRouterPackageArgs.builder()\n                .code(\"BASIC\")\n                .build())\n            .notifications(CloudRouterNotificationArgs.builder()\n                .type(\"ALL\")\n                .emails(\"example@equinix.com\")\n                .build())\n            .account(CloudRouterAccountArgs.builder()\n                .accountNumber(272010)\n                .build())\n            .build());\n\n        ctx.export(\"routerId\", router.id());\n    }\n}\n```\n```yaml\nconfig:\n  metro:\n    type: string\n    default: FR\n  accountNum:\n    type: integer\nresources:\n  router:\n    type: equinix:fabric:CloudRouter\n    properties:\n      name: My-Fabric-Cloud-Router\n      type: XF_ROUTER\n      location:\n        metroCode: ${metro}\n      package:\n        code: BASIC\n      notifications:\n      - type: ALL\n        emails:\n        - example@equinix.com\n      account:\n        accountNumber: 272010\noutputs:\n  routerId: ${router.id}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/CloudRouterAccount:CloudRouterAccount",
                    "description": "Customer account information that is associated with this Fabric Cloud Router\n"
                },
                "bgpIpv4RoutesCount": {
                    "type": "integer",
                    "description": "Number of IPv4 BGP routes in use (including non-distinct prefixes)\n"
                },
                "bgpIpv6RoutesCount": {
                    "type": "integer",
                    "description": "Number of IPv6 BGP routes in use (including non-distinct prefixes)\n"
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/CloudRouterChangeLog:CloudRouterChangeLog"
                    },
                    "description": "Captures Fabric Cloud Router lifecycle change information\n"
                },
                "connectionsCount": {
                    "type": "integer",
                    "description": "Number of connections associated with this Fabric Cloud Router instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided Fabric Cloud Router description\n"
                },
                "distinctIpv4PrefixesCount": {
                    "type": "integer",
                    "description": "Number of distinct IPv4 routes\n"
                },
                "distinctIpv6PrefixesCount": {
                    "type": "integer",
                    "description": "Number of distinct IPv6 routes\n"
                },
                "equinixAsn": {
                    "type": "integer",
                    "description": "Equinix ASN\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/CloudRouterLocation:CloudRouterLocation",
                    "description": "Fabric Cloud Router location\n"
                },
                "name": {
                    "type": "string",
                    "description": "Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/CloudRouterNotification:CloudRouterNotification"
                    },
                    "description": "Preferences for notifications on Fabric Cloud Router configuration or status changes\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/CloudRouterOrder:CloudRouterOrder",
                    "description": "Order information related to this Fabric Cloud Router\n"
                },
                "package": {
                    "$ref": "#/types/equinix:fabric/CloudRouterPackage:CloudRouterPackage",
                    "description": "Fabric Cloud Router Package Type\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/CloudRouterProject:CloudRouterProject",
                    "description": "Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects\n"
                },
                "state": {
                    "type": "string",
                    "description": "Fabric Cloud Router overall state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Fabric Cloud Router identifier\n"
                }
            },
            "required": [
                "account",
                "bgpIpv4RoutesCount",
                "bgpIpv6RoutesCount",
                "changeLogs",
                "connectionsCount",
                "distinctIpv4PrefixesCount",
                "distinctIpv6PrefixesCount",
                "equinixAsn",
                "href",
                "location",
                "name",
                "notifications",
                "order",
                "package",
                "project",
                "state",
                "type",
                "uuid"
            ],
            "inputProperties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/CloudRouterAccount:CloudRouterAccount",
                    "description": "Customer account information that is associated with this Fabric Cloud Router\n"
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided Fabric Cloud Router description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/CloudRouterLocation:CloudRouterLocation",
                    "description": "Fabric Cloud Router location\n"
                },
                "name": {
                    "type": "string",
                    "description": "Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/CloudRouterNotification:CloudRouterNotification"
                    },
                    "description": "Preferences for notifications on Fabric Cloud Router configuration or status changes\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/CloudRouterOrder:CloudRouterOrder",
                    "description": "Order information related to this Fabric Cloud Router\n"
                },
                "package": {
                    "$ref": "#/types/equinix:fabric/CloudRouterPackage:CloudRouterPackage",
                    "description": "Fabric Cloud Router Package Type\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/CloudRouterProject:CloudRouterProject",
                    "description": "Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned Fabric Cloud Router identifier\n"
                }
            },
            "requiredInputs": [
                "account",
                "location",
                "notifications",
                "order",
                "package",
                "project",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudRouter resources.\n",
                "properties": {
                    "account": {
                        "$ref": "#/types/equinix:fabric/CloudRouterAccount:CloudRouterAccount",
                        "description": "Customer account information that is associated with this Fabric Cloud Router\n"
                    },
                    "bgpIpv4RoutesCount": {
                        "type": "integer",
                        "description": "Number of IPv4 BGP routes in use (including non-distinct prefixes)\n"
                    },
                    "bgpIpv6RoutesCount": {
                        "type": "integer",
                        "description": "Number of IPv6 BGP routes in use (including non-distinct prefixes)\n"
                    },
                    "changeLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/CloudRouterChangeLog:CloudRouterChangeLog"
                        },
                        "description": "Captures Fabric Cloud Router lifecycle change information\n"
                    },
                    "connectionsCount": {
                        "type": "integer",
                        "description": "Number of connections associated with this Fabric Cloud Router instance\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided Fabric Cloud Router description\n"
                    },
                    "distinctIpv4PrefixesCount": {
                        "type": "integer",
                        "description": "Number of distinct IPv4 routes\n"
                    },
                    "distinctIpv6PrefixesCount": {
                        "type": "integer",
                        "description": "Number of distinct IPv6 routes\n"
                    },
                    "equinixAsn": {
                        "type": "integer",
                        "description": "Equinix ASN\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Unique Resource URL\n"
                    },
                    "location": {
                        "$ref": "#/types/equinix:fabric/CloudRouterLocation:CloudRouterLocation",
                        "description": "Fabric Cloud Router location\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/CloudRouterNotification:CloudRouterNotification"
                        },
                        "description": "Preferences for notifications on Fabric Cloud Router configuration or status changes\n"
                    },
                    "order": {
                        "$ref": "#/types/equinix:fabric/CloudRouterOrder:CloudRouterOrder",
                        "description": "Order information related to this Fabric Cloud Router\n"
                    },
                    "package": {
                        "$ref": "#/types/equinix:fabric/CloudRouterPackage:CloudRouterPackage",
                        "description": "Fabric Cloud Router Package Type\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/CloudRouterProject:CloudRouterProject",
                        "description": "Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Fabric Cloud Router overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned Fabric Cloud Router identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:fabric/connection:Connection": {
            "description": "Fabric V4 API compatible resource allows creation and management of Equinix Fabric connection\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst metro = config.get(\"metro\") || \"FR\";\nconst speedInMbps = config.getNumber(\"speedInMbps\") || 50;\nconst fabricPortName = config.require(\"fabricPortName\");\nconst awsRegion = config.get(\"awsRegion\") || \"eu-central-1\";\nconst awsAccountId = config.require(\"awsAccountId\");\nconst serviceProfileId = equinix.fabric.getServiceProfiles({\n    filter: {\n        property: \"/name\",\n        operator: \"=\",\n        values: [\"AWS Direct Connect\"],\n    },\n}).then(invoke =\u003e invoke.data?.[0]?.uuid!);\nconst portId = equinix.fabric.getPorts({\n    filter: {\n        name: fabricPortName,\n    },\n}).then(invoke =\u003e invoke.data?.[0]?.uuid!);\nconst colo2Aws = new equinix.fabric.Connection(\"colo2Aws\", {\n    name: \"Pulumi-colo2Aws\",\n    type: \"EVPL_VC\",\n    notifications: [{\n        type: \"ALL\",\n        emails: [\"example@equinix.com\"],\n    }],\n    bandwidth: speedInMbps,\n    redundancy: {\n        priority: \"PRIMARY\",\n    },\n    aSide: {\n        accessPoint: {\n            type: \"COLO\",\n            port: {\n                uuid: portId,\n            },\n            linkProtocol: {\n                type: \"DOT1Q\",\n                vlanTag: 1234,\n            },\n        },\n    },\n    zSide: {\n        accessPoint: {\n            type: \"SP\",\n            authenticationKey: awsAccountId,\n            sellerRegion: awsRegion,\n            profile: {\n                type: \"L2_PROFILE\",\n                uuid: serviceProfileId,\n            },\n            location: {\n                metroCode: metro,\n            },\n        },\n    },\n});\nexport const connectionId = colo2Aws.id;\nexport const connectionStatus = colo2Aws.operation.apply(operation =\u003e operation.equinixStatus);\nexport const connectionProviderStatus = colo2Aws.operation.apply(operation =\u003e operation.providerStatus);\nexport const awsDirectConnectId = colo2Aws.zSide.apply(zSide =\u003e zSide.accessPoint?.providerConnectionId);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"FR\"\nspeed_in_mbps = config.get_int(\"speedInMbps\")\nif speed_in_mbps is None:\n    speed_in_mbps = 50\nfabric_port_name = config.require(\"fabricPortName\")\naws_region = config.get(\"awsRegion\")\nif aws_region is None:\n    aws_region = \"eu-central-1\"\naws_account_id = config.require(\"awsAccountId\")\nservice_profile_id = equinix.fabric.get_service_profiles(filter=equinix.fabric.GetServiceProfilesFilterArgs(\n    property=\"/name\",\n    operator=\"=\",\n    values=[\"AWS Direct Connect\"],\n)).data[0].uuid\nport_id = equinix.fabric.get_ports(filter=equinix.fabric.GetPortsFilterArgs(\n    name=fabric_port_name,\n)).data[0].uuid\ncolo2_aws = equinix.fabric.Connection(\"colo2Aws\",\n    name=\"Pulumi-colo2Aws\",\n    type=\"EVPL_VC\",\n    notifications=[equinix.fabric.ConnectionNotificationArgs(\n        type=\"ALL\",\n        emails=[\"example@equinix.com\"],\n    )],\n    bandwidth=speed_in_mbps,\n    redundancy=equinix.fabric.ConnectionRedundancyArgs(\n        priority=\"PRIMARY\",\n    ),\n    a_side=equinix.fabric.ConnectionASideArgs(\n        access_point=equinix.fabric.ConnectionASideAccessPointArgs(\n            type=\"COLO\",\n            port=equinix.fabric.ConnectionASideAccessPointPortArgs(\n                uuid=port_id,\n            ),\n            link_protocol=equinix.fabric.ConnectionASideAccessPointLinkProtocolArgs(\n                type=\"DOT1Q\",\n                vlan_tag=1234,\n            ),\n        ),\n    ),\n    z_side=equinix.fabric.ConnectionZSideArgs(\n        access_point=equinix.fabric.ConnectionZSideAccessPointArgs(\n            type=\"SP\",\n            authentication_key=aws_account_id,\n            seller_region=aws_region,\n            profile=equinix.fabric.ConnectionZSideAccessPointProfileArgs(\n                type=\"L2_PROFILE\",\n                uuid=service_profile_id,\n            ),\n            location=equinix.fabric.ConnectionZSideAccessPointLocationArgs(\n                metro_code=metro,\n            ),\n        ),\n    ))\npulumi.export(\"connectionId\", colo2_aws.id)\npulumi.export(\"connectionStatus\", colo2_aws.operation.equinix_status)\npulumi.export(\"connectionProviderStatus\", colo2_aws.operation.provider_status)\npulumi.export(\"awsDirectConnectId\", colo2_aws.z_side.access_point.provider_connection_id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tmetro := \"FR\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tspeedInMbps := 50\n\t\tif param := cfg.GetInt(\"speedInMbps\"); param != 0 {\n\t\t\tspeedInMbps = param\n\t\t}\n\t\tfabricPortName := cfg.Require(\"fabricPortName\")\n\t\tawsRegion := \"eu-central-1\"\n\t\tif param := cfg.Get(\"awsRegion\"); param != \"\" {\n\t\t\tawsRegion = param\n\t\t}\n\t\tawsAccountId := cfg.Require(\"awsAccountId\")\n\t\tserviceProfileId := fabric.GetServiceProfiles(ctx, \u0026fabric.GetServiceProfilesArgs{\n\t\t\tFilter: fabric.GetServiceProfilesFilter{\n\t\t\t\tProperty: pulumi.StringRef(\"/name\"),\n\t\t\t\tOperator: pulumi.StringRef(\"=\"),\n\t\t\t\tValues: []string{\n\t\t\t\t\t\"AWS Direct Connect\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil).Data[0].Uuid\n\t\tportId := fabric.GetPorts(ctx, \u0026fabric.GetPortsArgs{\n\t\t\tFilter: fabric.GetPortsFilter{\n\t\t\t\tName: pulumi.StringRef(fabricPortName),\n\t\t\t},\n\t\t}, nil).Data[0].Uuid\n\t\tcolo2Aws, err := fabric.NewConnection(ctx, \"colo2Aws\", \u0026fabric.ConnectionArgs{\n\t\t\tName: pulumi.String(\"Pulumi-colo2Aws\"),\n\t\t\tType: pulumi.String(\"EVPL_VC\"),\n\t\t\tNotifications: fabric.ConnectionNotificationArray{\n\t\t\t\t\u0026fabric.ConnectionNotificationArgs{\n\t\t\t\t\tType: pulumi.String(\"ALL\"),\n\t\t\t\t\tEmails: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"example@equinix.com\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tBandwidth: pulumi.Int(speedInMbps),\n\t\t\tRedundancy: \u0026fabric.ConnectionRedundancyArgs{\n\t\t\t\tPriority: pulumi.String(\"PRIMARY\"),\n\t\t\t},\n\t\t\tASide: \u0026fabric.ConnectionASideArgs{\n\t\t\t\tAccessPoint: \u0026fabric.ConnectionASideAccessPointArgs{\n\t\t\t\t\tType: pulumi.String(\"COLO\"),\n\t\t\t\t\tPort: \u0026fabric.ConnectionASideAccessPointPortArgs{\n\t\t\t\t\t\tUuid: *pulumi.String(portId),\n\t\t\t\t\t},\n\t\t\t\t\tLinkProtocol: \u0026fabric.ConnectionASideAccessPointLinkProtocolArgs{\n\t\t\t\t\t\tType:    pulumi.String(\"DOT1Q\"),\n\t\t\t\t\t\tVlanTag: pulumi.Int(1234),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tZSide: \u0026fabric.ConnectionZSideArgs{\n\t\t\t\tAccessPoint: \u0026fabric.ConnectionZSideAccessPointArgs{\n\t\t\t\t\tType:              pulumi.String(\"SP\"),\n\t\t\t\t\tAuthenticationKey: pulumi.String(awsAccountId),\n\t\t\t\t\tSellerRegion:      pulumi.String(awsRegion),\n\t\t\t\t\tProfile: \u0026fabric.ConnectionZSideAccessPointProfileArgs{\n\t\t\t\t\t\tType: pulumi.String(\"L2_PROFILE\"),\n\t\t\t\t\t\tUuid: *pulumi.String(serviceProfileId),\n\t\t\t\t\t},\n\t\t\t\t\tLocation: \u0026fabric.ConnectionZSideAccessPointLocationArgs{\n\t\t\t\t\t\tMetroCode: pulumi.String(metro),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"connectionId\", colo2Aws.ID())\n\t\tctx.Export(\"connectionStatus\", colo2Aws.Operation.ApplyT(func(operation fabric.ConnectionOperation) (*string, error) {\n\t\t\treturn \u0026operation.EquinixStatus, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\tctx.Export(\"connectionProviderStatus\", colo2Aws.Operation.ApplyT(func(operation fabric.ConnectionOperation) (*string, error) {\n\t\t\treturn \u0026operation.ProviderStatus, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\tctx.Export(\"awsDirectConnectId\", colo2Aws.ZSide.ApplyT(func(zSide fabric.ConnectionZSide) (*string, error) {\n\t\t\treturn \u0026zSide.AccessPoint.ProviderConnectionId, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var metro = config.Get(\"metro\") ?? \"FR\";\n    var speedInMbps = config.GetNumber(\"speedInMbps\") ?? 50;\n    var fabricPortName = config.Require(\"fabricPortName\");\n    var awsRegion = config.Get(\"awsRegion\") ?? \"eu-central-1\";\n    var awsAccountId = config.Require(\"awsAccountId\");\n    var serviceProfileId = Equinix.Fabric.GetServiceProfiles.Invoke(new()\n    {\n        Filter = new Equinix.Fabric.Inputs.GetServiceProfilesFilterInputArgs\n        {\n            Property = \"/name\",\n            Operator = \"=\",\n            Values = new[]\n            {\n                \"AWS Direct Connect\",\n            },\n        },\n    }).Apply(invoke =\u003e invoke.Data[0]?.Uuid);\n\n    var portId = Equinix.Fabric.GetPorts.Invoke(new()\n    {\n        Filter = new Equinix.Fabric.Inputs.GetPortsFilterInputArgs\n        {\n            Name = fabricPortName,\n        },\n    }).Apply(invoke =\u003e invoke.Data[0]?.Uuid);\n\n    var colo2Aws = new Equinix.Fabric.Connection(\"colo2Aws\", new()\n    {\n        Name = \"Pulumi-colo2Aws\",\n        Type = \"EVPL_VC\",\n        Notifications = new[]\n        {\n            new Equinix.Fabric.Inputs.ConnectionNotificationArgs\n            {\n                Type = \"ALL\",\n                Emails = new[]\n                {\n                    \"example@equinix.com\",\n                },\n            },\n        },\n        Bandwidth = speedInMbps,\n        Redundancy = new Equinix.Fabric.Inputs.ConnectionRedundancyArgs\n        {\n            Priority = \"PRIMARY\",\n        },\n        ASide = new Equinix.Fabric.Inputs.ConnectionASideArgs\n        {\n            AccessPoint = new Equinix.Fabric.Inputs.ConnectionASideAccessPointArgs\n            {\n                Type = \"COLO\",\n                Port = new Equinix.Fabric.Inputs.ConnectionASideAccessPointPortArgs\n                {\n                    Uuid = portId,\n                },\n                LinkProtocol = new Equinix.Fabric.Inputs.ConnectionASideAccessPointLinkProtocolArgs\n                {\n                    Type = \"DOT1Q\",\n                    VlanTag = 1234,\n                },\n            },\n        },\n        ZSide = new Equinix.Fabric.Inputs.ConnectionZSideArgs\n        {\n            AccessPoint = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointArgs\n            {\n                Type = \"SP\",\n                AuthenticationKey = awsAccountId,\n                SellerRegion = awsRegion,\n                Profile = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointProfileArgs\n                {\n                    Type = \"L2_PROFILE\",\n                    Uuid = serviceProfileId,\n                },\n                Location = new Equinix.Fabric.Inputs.ConnectionZSideAccessPointLocationArgs\n                {\n                    MetroCode = metro,\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"connectionId\"] = colo2Aws.Id,\n        [\"connectionStatus\"] = colo2Aws.Operation.Apply(operation =\u003e operation.EquinixStatus),\n        [\"connectionProviderStatus\"] = colo2Aws.Operation.Apply(operation =\u003e operation.ProviderStatus),\n        [\"awsDirectConnectId\"] = colo2Aws.ZSide.Apply(zSide =\u003e zSide.AccessPoint?.ProviderConnectionId),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.fabric.Connection;\nimport com.equinix.pulumi.fabric.ConnectionArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionNotificationArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionRedundancyArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionASideArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionASideAccessPointArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionASideAccessPointPortArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionASideAccessPointLinkProtocolArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionZSideArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointProfileArgs;\nimport com.equinix.pulumi.fabric.inputs.ConnectionZSideAccessPointLocationArgs;\nimport com.equinix.pulumi.fabric.inputs.GetServiceProfilesArgs;\nimport com.equinix.pulumi.fabric.inputs.GetServiceProfilesFilterArgs;\nimport com.equinix.pulumi.fabric.inputs.GetPortsArgs;\nimport com.equinix.pulumi.fabric.inputs.GetPortsFilterArgs;\nimport com.equinix.pulumi.fabric.FabricFunctions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var metro = config.get(\"metro\").orElse(\"FR\");\n        final var speedInMbps = Integer.parseInt(config.get(\"speedInMbps\").orElse(\"50\"));\n        final var fabricPortName = config.get(\"fabricPortName\").get().toString();\n        final var awsRegion = config.get(\"awsRegion\").orElse(\"eu-central-1\");\n        final var awsAccountId = config.get(\"awsAccountId\").get().toString();\n        System.out.println(System.getProperty(\"java.classpath\"));\n        final var serviceProfileId = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()\n            .filter(GetServiceProfilesFilterArgs.builder()\n                .property(\"/name\")\n                .operator(\"=\")\n                .values(\"AWS Direct Connect\")\n                .build())\n            .build()).applyValue(data -\u003e data.data().get(0).uuid().get());\n\n        final var portId = FabricFunctions.getPorts(GetPortsArgs.builder()\n            .filter(GetPortsFilterArgs.builder()\n                .name(fabricPortName)\n                .build())\n            .build()).applyValue(data -\u003e data.data().get(0).uuid().get());\n\n        var colo2Aws = new Connection(\"colo2Aws\", ConnectionArgs.builder()        \n            .name(\"Pulumi-colo2Aws\")\n            .type(\"EVPL_VC\")\n            .notifications(ConnectionNotificationArgs.builder()\n                .type(\"ALL\")\n                .emails(\"example@equinix.com\")\n                .build())\n            .bandwidth(speedInMbps)\n            .redundancy(ConnectionRedundancyArgs.builder()\n                .priority(\"PRIMARY\")\n                .build())\n            .aSide(ConnectionASideArgs.builder()\n                .accessPoint(ConnectionASideAccessPointArgs.builder()\n                    .type(\"COLO\")\n                    .port(ConnectionASideAccessPointPortArgs.builder()\n                        .uuid(portId)\n                        .build())\n                    .linkProtocol(ConnectionASideAccessPointLinkProtocolArgs.builder()\n                        .type(\"DOT1Q\")\n                        .vlanTag(1234)\n                        .build())\n                    .build())\n                .build())\n            .zSide(ConnectionZSideArgs.builder()\n                .accessPoint(ConnectionZSideAccessPointArgs.builder()\n                    .type(\"SP\")\n                    .authenticationKey(awsAccountId)\n                    .sellerRegion(awsRegion)\n                    .profile(ConnectionZSideAccessPointProfileArgs.builder()\n                        .type(\"L2_PROFILE\")\n                        .uuid(serviceProfileId)\n                        .build())\n                    .location(ConnectionZSideAccessPointLocationArgs.builder()\n                        .metroCode(metro)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        ctx.export(\"connectionId\", colo2Aws.id());\n        ctx.export(\"connectionStatus\", colo2Aws.operation().applyValue(operation -\u003e operation.equinixStatus()));\n        ctx.export(\"connectionProviderStatus\", colo2Aws.operation().applyValue(operation -\u003e operation.providerStatus()));\n        ctx.export(\"awsDirectConnectId\", colo2Aws.zSide().applyValue(zSide -\u003e zSide.accessPoint().get().providerConnectionId()));\n    }\n}\n```\n```yaml\nconfig:\n  metro:\n    type: string\n    default: FR\n  speedInMbps:\n    type: integer\n    default: 50\n  fabricPortName:\n    type: string\n  awsRegion:\n    type: string\n    default: eu-central-1\n  awsAccountId:\n    type: string\nvariables:\n  serviceProfileId:\n    fn::invoke:\n      function: equinix:fabric:getServiceProfiles\n      arguments:\n        filter:\n          property: /name\n          operator: \"=\"\n          values:\n          - AWS Direct Connect\n      return: data[0].uuid\n  portId:\n    fn::invoke:\n      function: equinix:fabric:getPorts\n      arguments:\n        filter:\n          name: ${fabricPortName}\n      return: data[0].uuid\nresources:\n  colo2Aws:\n    type: equinix:fabric:Connection\n    properties:\n      name: Pulumi-colo2Aws\n      type: EVPL_VC\n      notifications:\n      - type: ALL\n        emails:\n        - example@equinix.com\n      bandwidth: ${speedInMbps}\n      redundancy:\n        priority: PRIMARY\n      aSide:\n        accessPoint:\n          type: COLO\n          port:\n            uuid: ${portId}\n          linkProtocol:\n            type: DOT1Q\n            vlanTag: 1234\n      zSide:\n        accessPoint:\n          type: SP\n          authenticationKey: ${awsAccountId}\n          sellerRegion: ${awsRegion}\n          profile:\n            type: L2_PROFILE\n            uuid: ${serviceProfileId}\n          location:\n            metroCode: ${metro}\noutputs:\n  connectionId: ${colo2Aws.id}\n  connectionStatus: ${colo2Aws.operation.equinixStatus}\n  connectionProviderStatus: ${colo2Aws.operation.providerStatus}\n  awsDirectConnectId: ${colo2Aws.zSide.accessPoint.providerConnectionId}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "aSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                    "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                },
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionAccount:ConnectionAccount",
                    "description": "Account\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "Connection side additional information\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Connection bandwidth in Mbps\n"
                },
                "changeLog": {
                    "$ref": "#/types/equinix:fabric/ConnectionChangeLog:ConnectionChangeLog",
                    "description": "Captures connection lifecycle change information\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Connection directionality from the requester point of view\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource Identifier\n"
                },
                "isRemote": {
                    "type": "boolean",
                    "description": "Connection property derived from access point locations\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "operation": {
                    "$ref": "#/types/equinix:fabric/ConnectionOperation:ConnectionOperation",
                    "description": "Connection type-specific operational data\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                    "description": "Order details\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                    "description": "Project information\n"
                },
                "redundancy": {
                    "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                    "description": "Redundancy Information\n"
                },
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Interface type\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned virtual gateway identifier\n"
                },
                "zSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                    "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                }
            },
            "required": [
                "aSide",
                "account",
                "bandwidth",
                "changeLog",
                "direction",
                "href",
                "isRemote",
                "name",
                "notifications",
                "operation",
                "order",
                "project",
                "state",
                "type",
                "uuid",
                "zSide"
            ],
            "inputProperties": {
                "aSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                    "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "Connection side additional information\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Connection bandwidth in Mbps\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                    "description": "Order details\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                    "description": "Project information\n"
                },
                "redundancy": {
                    "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                    "description": "Redundancy Information\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/connectionType:ConnectionType"
                        }
                    ],
                    "description": "Interface type\n"
                },
                "zSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                    "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                }
            },
            "requiredInputs": [
                "aSide",
                "bandwidth",
                "notifications",
                "order",
                "type",
                "zSide"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "aSide": {
                        "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                        "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/ConnectionAccount:ConnectionAccount",
                        "description": "Account\n"
                    },
                    "additionalInfo": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "Connection side additional information\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Connection bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/ConnectionChangeLog:ConnectionChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "User-provided service description\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Connection directionality from the requester point of view\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Unique Resource Identifier\n"
                    },
                    "isRemote": {
                        "type": "boolean",
                        "description": "Connection property derived from access point locations\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperation:ConnectionOperation",
                        "description": "Connection type-specific operational data\n"
                    },
                    "order": {
                        "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                        "description": "Order details\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                        "description": "Project information\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                        "description": "Redundancy Information\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Connection overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/connectionType:ConnectionType"
                            }
                        ],
                        "description": "Interface type\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned virtual gateway identifier\n"
                    },
                    "zSide": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                        "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:fabric/network:Network": {
            "description": "Fabric V4 API compatible resource allows creation and management of Equinix Fabric Network\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst newNetwork = new equinix.fabric.Network(\"newNetwork\", {\n    notifications: [{\n        emails: [\n            \"example@equinix.com\",\n            \"test1@equinix.com\",\n        ],\n        type: \"ALL\",\n    }],\n    project: {\n        projectId: \"776847000642406\",\n    },\n    scope: \"GLOBAL\",\n    type: \"EVPLAN\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nnew_network = equinix.fabric.Network(\"newNetwork\",\n    notifications=[equinix.fabric.NetworkNotificationArgs(\n        emails=[\n            \"example@equinix.com\",\n            \"test1@equinix.com\",\n        ],\n        type=\"ALL\",\n    )],\n    project=equinix.fabric.NetworkProjectArgs(\n        project_id=\"776847000642406\",\n    ),\n    scope=\"GLOBAL\",\n    type=\"EVPLAN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var newNetwork = new Equinix.Fabric.Network(\"newNetwork\", new()\n    {\n        Notifications = new[]\n        {\n            new Equinix.Fabric.Inputs.NetworkNotificationArgs\n            {\n                Emails = new[]\n                {\n                    \"example@equinix.com\",\n                    \"test1@equinix.com\",\n                },\n                Type = \"ALL\",\n            },\n        },\n        Project = new Equinix.Fabric.Inputs.NetworkProjectArgs\n        {\n            ProjectId = \"776847000642406\",\n        },\n        Scope = \"GLOBAL\",\n        Type = \"EVPLAN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.NewNetwork(ctx, \"newNetwork\", \u0026fabric.NetworkArgs{\n\t\t\tNotifications: fabric.NetworkNotificationArray{\n\t\t\t\t\u0026fabric.NetworkNotificationArgs{\n\t\t\t\t\tEmails: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"example@equinix.com\"),\n\t\t\t\t\t\tpulumi.String(\"test1@equinix.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"ALL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tProject: \u0026fabric.NetworkProjectArgs{\n\t\t\t\tProjectId: pulumi.String(\"776847000642406\"),\n\t\t\t},\n\t\t\tScope: pulumi.String(\"GLOBAL\"),\n\t\t\tType:  pulumi.String(\"EVPLAN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.Network;\nimport com.pulumi.equinix.fabric.NetworkArgs;\nimport com.pulumi.equinix.fabric.inputs.NetworkNotificationArgs;\nimport com.pulumi.equinix.fabric.inputs.NetworkProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var newNetwork = new Network(\"newNetwork\", NetworkArgs.builder()        \n            .notifications(NetworkNotificationArgs.builder()\n                .emails(                \n                    \"example@equinix.com\",\n                    \"test1@equinix.com\")\n                .type(\"ALL\")\n                .build())\n            .project(NetworkProjectArgs.builder()\n                .projectId(\"776847000642406\")\n                .build())\n            .scope(\"GLOBAL\")\n            .type(\"EVPLAN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  newNetwork:\n    type: equinix:fabric:Network\n    properties:\n      notifications:\n        - emails:\n            - example@equinix.com\n            - test1@equinix.com\n          type: ALL\n      project:\n        projectId: '776847000642406'\n      scope: GLOBAL\n      type: EVPLAN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "change": {
                    "$ref": "#/types/equinix:fabric/NetworkChange:NetworkChange",
                    "description": "Information on asset change operation\n"
                },
                "changeLog": {
                    "$ref": "#/types/equinix:fabric/NetworkChangeLog:NetworkChangeLog",
                    "description": "A permanent record of asset creation, modification, or deletion\n"
                },
                "connectionsCount": {
                    "type": "integer",
                    "description": "Number of connections associated with this network\n"
                },
                "href": {
                    "type": "string",
                    "description": "Fabric Network URI information\n"
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/NetworkLocation:NetworkLocation",
                    "description": "Fabric Network location\n"
                },
                "name": {
                    "type": "string",
                    "description": "Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/NetworkNotification:NetworkNotification"
                    },
                    "description": "Preferences for notifications on Fabric Network configuration or status changes\n"
                },
                "operation": {
                    "$ref": "#/types/equinix:fabric/NetworkOperation:NetworkOperation",
                    "description": "Network operation information that is associated with this Fabric Network\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/NetworkProject:NetworkProject",
                    "description": "Fabric Network project\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Fabric Network scope\n"
                },
                "state": {
                    "type": "string",
                    "description": "Fabric Network overall state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Supported Network types - EVPLAN, EPLAN, IPWAN\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned network identifier\n"
                }
            },
            "required": [
                "change",
                "changeLog",
                "connectionsCount",
                "href",
                "location",
                "name",
                "notifications",
                "operation",
                "project",
                "scope",
                "state",
                "type",
                "uuid"
            ],
            "inputProperties": {
                "location": {
                    "$ref": "#/types/equinix:fabric/NetworkLocation:NetworkLocation",
                    "description": "Fabric Network location\n"
                },
                "name": {
                    "type": "string",
                    "description": "Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/NetworkNotification:NetworkNotification"
                    },
                    "description": "Preferences for notifications on Fabric Network configuration or status changes\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/NetworkProject:NetworkProject",
                    "description": "Fabric Network project\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Fabric Network scope\n"
                },
                "type": {
                    "type": "string",
                    "description": "Supported Network types - EVPLAN, EPLAN, IPWAN\n"
                }
            },
            "requiredInputs": [
                "notifications",
                "project",
                "scope",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "change": {
                        "$ref": "#/types/equinix:fabric/NetworkChange:NetworkChange",
                        "description": "Information on asset change operation\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/NetworkChangeLog:NetworkChangeLog",
                        "description": "A permanent record of asset creation, modification, or deletion\n"
                    },
                    "connectionsCount": {
                        "type": "integer",
                        "description": "Number of connections associated with this network\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Fabric Network URI information\n"
                    },
                    "location": {
                        "$ref": "#/types/equinix:fabric/NetworkLocation:NetworkLocation",
                        "description": "Fabric Network location\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/NetworkNotification:NetworkNotification"
                        },
                        "description": "Preferences for notifications on Fabric Network configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/NetworkOperation:NetworkOperation",
                        "description": "Network operation information that is associated with this Fabric Network\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/NetworkProject:NetworkProject",
                        "description": "Fabric Network project\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Fabric Network scope\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Fabric Network overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Supported Network types - EVPLAN, EPLAN, IPWAN\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned network identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:fabric/routingProtocol:RoutingProtocol": {
            "description": "Fabric V4 API compatible resource allows creation and management of Equinix Fabric connection\n\nAPI documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst connectionId = config.require(\"connectionId\");\nconst routingProtocol = new equinix.fabric.RoutingProtocol(\"RoutingProtocol\", {\n    connectionUuid: connectionId,\n    name: \"My-Direct-route-1\",\n    type: \"DIRECT\",\n    directIpv4: {\n        equinixIfaceIp: \"192.168.100.1/30\",\n    },\n});\nexport const routingProtocolId = routingProtocol.id;\nexport const routingProtocolState = routingProtocol.state;\nexport const routingProtocolEquinixAsn = routingProtocol.equinixAsn;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nconnection_id = config.require(\"connectionId\")\nrouting_protocol = equinix.fabric.RoutingProtocol(\"RoutingProtocol\",\n    connection_uuid=connection_id,\n    name=\"My-Direct-route-1\",\n    type=\"DIRECT\",\n    direct_ipv4=equinix.fabric.RoutingProtocolDirectIpv4Args(\n        equinix_iface_ip=\"192.168.100.1/30\",\n    ))\npulumi.export(\"routingProtocolId\", routing_protocol.id)\npulumi.export(\"routingProtocolState\", routing_protocol.state)\npulumi.export(\"routingProtocolEquinixAsn\", routing_protocol.equinix_asn)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tconnectionId := cfg.Require(\"connectionId\")\n\t\troutingProtocol, err := fabric.NewRoutingProtocol(ctx, \"RoutingProtocol\", \u0026fabric.RoutingProtocolArgs{\n\t\t\tConnectionUuid: pulumi.String(connectionId),\n\t\t\tName:           pulumi.String(\"My-Direct-route-1\"),\n\t\t\tType:           pulumi.String(\"DIRECT\"),\n\t\t\tDirectIpv4: \u0026fabric.RoutingProtocolDirectIpv4Args{\n\t\t\t\tEquinixIfaceIp: pulumi.String(\"192.168.100.1/30\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"routingProtocolId\", routingProtocol.ID())\n\t\tctx.Export(\"routingProtocolState\", routingProtocol.State)\n\t\tctx.Export(\"routingProtocolEquinixAsn\", routingProtocol.EquinixAsn)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var connectionId = config.Require(\"connectionId\");\n    var routingProtocol = new Equinix.Fabric.RoutingProtocol(\"RoutingProtocol\", new()\n    {\n        ConnectionUuid = connectionId,\n        Name = \"My-Direct-route-1\",\n        Type = \"DIRECT\",\n        DirectIpv4 = new Equinix.Fabric.Inputs.RoutingProtocolDirectIpv4Args\n        {\n            EquinixIfaceIp = \"192.168.100.1/30\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"routingProtocolId\"] = routingProtocol.Id,\n        [\"routingProtocolState\"] = routingProtocol.State,\n        [\"routingProtocolEquinixAsn\"] = routingProtocol.EquinixAsn,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.RoutingProtocol;\nimport com.pulumi.equinix.fabric.RoutingProtocolArgs;\nimport com.pulumi.equinix.fabric.inputs.RoutingProtocolDirectIpv4Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var connectionId = config.get(\"connectionId\");\n        var routingProtocol = new RoutingProtocol(\"routingProtocol\", RoutingProtocolArgs.builder()        \n            .connectionUuid(connectionId)\n            .name(\"My-Direct-route-1\")\n            .type(\"DIRECT\")\n            .directIpv4(RoutingProtocolDirectIpv4Args.builder()\n                .equinixIfaceIp(\"192.168.100.1/30\")\n                .build())\n            .build());\n\n        ctx.export(\"routingProtocolId\", routingProtocol.id());\n        ctx.export(\"routingProtocolState\", routingProtocol.state());\n        ctx.export(\"routingProtocolEquinixAsn\", routingProtocol.equinixAsn());\n    }\n}\n```\n```yaml\nconfig:\n  connectionId:\n    type: string\nresources:\n  RoutingProtocol:\n    type: equinix:fabric:RoutingProtocol\n    properties:\n      connectionUuid: ${connectionId}\n      name: My-Direct-route-1\n      type: DIRECT\n      directIpv4:\n        equinixIfaceIp: 192.168.100.1/30\noutputs:\n  routingProtocolId: ${RoutingProtocol.id}\n  routingProtocolState: ${RoutingProtocol.state}\n  routingProtocolEquinixAsn: ${RoutingProtocol.equinixAsn}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "bfd": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBfd:RoutingProtocolBfd",
                    "description": "Bidirectional Forwarding Detection\n"
                },
                "bgpAuthKey": {
                    "type": "string",
                    "description": "BGP authorization key\n"
                },
                "bgpIpv4": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv4:RoutingProtocolBgpIpv4",
                    "description": "Routing Protocol BGP IPv4\n"
                },
                "bgpIpv6": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv6:RoutingProtocolBgpIpv6",
                    "description": "Routing Protocol BGP IPv6\n"
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolChangeLog:RoutingProtocolChangeLog"
                    },
                    "description": "Captures Routing Protocol lifecycle change information\n"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolChange:RoutingProtocolChange"
                    },
                    "description": "Routing Protocol configuration Changes\n"
                },
                "connectionUuid": {
                    "type": "string",
                    "description": "Connection URI associated with Routing Protocol\n"
                },
                "customerAsn": {
                    "type": "integer",
                    "description": "Customer-provided ASN\n"
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided Fabric Routing Protocol description\n"
                },
                "directIpv4": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv4:RoutingProtocolDirectIpv4",
                    "description": "Routing Protocol Direct IPv4\n"
                },
                "directIpv6": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv6:RoutingProtocolDirectIpv6",
                    "description": "Routing Protocol Direct IPv6\n"
                },
                "equinixAsn": {
                    "type": "integer",
                    "description": "Equinix ASN\n"
                },
                "href": {
                    "type": "string",
                    "description": "Routing Protocol URI information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolOperation:RoutingProtocolOperation"
                    },
                    "description": "Routing Protocol type-specific operational data\n"
                },
                "state": {
                    "type": "string",
                    "description": "Routing Protocol overall state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the routing protocol type like BGP or DIRECT\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned routing protocol identifier\n"
                }
            },
            "required": [
                "changes",
                "changeLogs",
                "connectionUuid",
                "equinixAsn",
                "href",
                "name",
                "operations",
                "state",
                "uuid"
            ],
            "inputProperties": {
                "bfd": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBfd:RoutingProtocolBfd",
                    "description": "Bidirectional Forwarding Detection\n"
                },
                "bgpAuthKey": {
                    "type": "string",
                    "description": "BGP authorization key\n"
                },
                "bgpIpv4": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv4:RoutingProtocolBgpIpv4",
                    "description": "Routing Protocol BGP IPv4\n"
                },
                "bgpIpv6": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv6:RoutingProtocolBgpIpv6",
                    "description": "Routing Protocol BGP IPv6\n"
                },
                "connectionUuid": {
                    "type": "string",
                    "description": "Connection URI associated with Routing Protocol\n"
                },
                "customerAsn": {
                    "type": "integer",
                    "description": "Customer-provided ASN\n"
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided Fabric Routing Protocol description\n"
                },
                "directIpv4": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv4:RoutingProtocolDirectIpv4",
                    "description": "Routing Protocol Direct IPv4\n"
                },
                "directIpv6": {
                    "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv6:RoutingProtocolDirectIpv6",
                    "description": "Routing Protocol Direct IPv6\n"
                },
                "name": {
                    "type": "string",
                    "description": "Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the routing protocol type like BGP or DIRECT\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned routing protocol identifier\n"
                }
            },
            "requiredInputs": [
                "connectionUuid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoutingProtocol resources.\n",
                "properties": {
                    "bfd": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolBfd:RoutingProtocolBfd",
                        "description": "Bidirectional Forwarding Detection\n"
                    },
                    "bgpAuthKey": {
                        "type": "string",
                        "description": "BGP authorization key\n"
                    },
                    "bgpIpv4": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv4:RoutingProtocolBgpIpv4",
                        "description": "Routing Protocol BGP IPv4\n"
                    },
                    "bgpIpv6": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolBgpIpv6:RoutingProtocolBgpIpv6",
                        "description": "Routing Protocol BGP IPv6\n"
                    },
                    "changeLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/RoutingProtocolChangeLog:RoutingProtocolChangeLog"
                        },
                        "description": "Captures Routing Protocol lifecycle change information\n"
                    },
                    "changes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/RoutingProtocolChange:RoutingProtocolChange"
                        },
                        "description": "Routing Protocol configuration Changes\n"
                    },
                    "connectionUuid": {
                        "type": "string",
                        "description": "Connection URI associated with Routing Protocol\n"
                    },
                    "customerAsn": {
                        "type": "integer",
                        "description": "Customer-provided ASN\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided Fabric Routing Protocol description\n"
                    },
                    "directIpv4": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv4:RoutingProtocolDirectIpv4",
                        "description": "Routing Protocol Direct IPv4\n"
                    },
                    "directIpv6": {
                        "$ref": "#/types/equinix:fabric/RoutingProtocolDirectIpv6:RoutingProtocolDirectIpv6",
                        "description": "Routing Protocol Direct IPv6\n"
                    },
                    "equinixAsn": {
                        "type": "integer",
                        "description": "Equinix ASN\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Routing Protocol URI information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/RoutingProtocolOperation:RoutingProtocolOperation"
                        },
                        "description": "Routing Protocol type-specific operational data\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Routing Protocol overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the routing protocol type like BGP or DIRECT\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned routing protocol identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:fabric/serviceProfile:ServiceProfile": {
            "description": "Fabric V4 API compatible resource allows creation and management of Equinix Fabric Service Profile\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst profile = new equinix.fabric.ServiceProfile(\"profile\", {\n    name: \"Example Cloud Provider\",\n    description: \"50 to 500 Mbps Hosted Connection to Example Cloud\",\n    type: \"L2_PROFILE\",\n    accessPointTypeConfigs: [{\n        type: \"COLO\",\n        supportedBandwidths: [\n            50,\n            100,\n            200,\n            500,\n        ],\n        allowRemoteConnections: true,\n        allowCustomBandwidth: false,\n        allowBandwidthAutoApproval: false,\n        linkProtocolConfig: {\n            encapsulationStrategy: \"CTAGED\",\n            reuseVlanSTag: false,\n            encapsulation: \"DOT1Q\",\n        },\n        enableAutoGenerateServiceKey: \"false,\",\n        connectionRedundancyRequired: \"false,\",\n        apiConfig: {\n            apiAvailable: true,\n            integrationId: \"Example-Connect-01\",\n            bandwidthFromApi: false,\n        },\n        connectionLabel: \"Virtual Circuit Name\",\n        authenticationKey: {\n            required: true,\n            label: \"Example ACCOUNT ID\",\n        },\n    }],\n    account: {\n        organizationName: \"Example Cloud\",\n        globalOrganizationName: \"Example Global\",\n    },\n    metros: undefined,\n    visibility: \"PUBLIC\",\n    marketingInfo: {\n        promotion: true,\n    },\n});\nexport const profileId = profile.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nprofile = equinix.fabric.ServiceProfile(\"profile\",\n    name=\"Example Cloud Provider\",\n    description=\"50 to 500 Mbps Hosted Connection to Example Cloud\",\n    type=\"L2_PROFILE\",\n    access_point_type_configs=[equinix.fabric.ServiceProfileAccessPointTypeConfigArgs(\n        type=\"COLO\",\n        supported_bandwidths=[\n            50,\n            100,\n            200,\n            500,\n        ],\n        allow_remote_connections=True,\n        allow_custom_bandwidth=False,\n        allow_bandwidth_auto_approval=False,\n        link_protocol_config=equinix.fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs(\n            encapsulation_strategy=\"CTAGED\",\n            reuse_vlan_s_tag=False,\n            encapsulation=\"DOT1Q\",\n        ),\n        enable_auto_generate_service_key=\"false,\",\n        connection_redundancy_required=\"false,\",\n        api_config=equinix.fabric.ServiceProfileAccessPointTypeConfigApiConfigArgs(\n            api_available=True,\n            integration_id=\"Example-Connect-01\",\n            bandwidth_from_api=False,\n        ),\n        connection_label=\"Virtual Circuit Name\",\n        authentication_key=equinix.fabric.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs(\n            required=True,\n            label=\"Example ACCOUNT ID\",\n        ),\n    )],\n    account=equinix.fabric.ServiceProfileAccountArgs(\n        organization_name=\"Example Cloud\",\n        global_organization_name=\"Example Global\",\n    ),\n    metros=None,\n    visibility=\"PUBLIC\",\n    marketing_info=equinix.fabric.ServiceProfileMarketingInfoArgs(\n        promotion=True,\n    ))\npulumi.export(\"profileId\", profile.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprofile, err := fabric.NewServiceProfile(ctx, \"profile\", \u0026fabric.ServiceProfileArgs{\n\t\t\tName:        pulumi.String(\"Example Cloud Provider\"),\n\t\t\tDescription: pulumi.String(\"50 to 500 Mbps Hosted Connection to Example Cloud\"),\n\t\t\tType:        pulumi.String(\"L2_PROFILE\"),\n\t\t\tAccessPointTypeConfigs: fabric.ServiceProfileAccessPointTypeConfigArray{\n\t\t\t\t\u0026fabric.ServiceProfileAccessPointTypeConfigArgs{\n\t\t\t\t\tType: pulumi.String(\"COLO\"),\n\t\t\t\t\tSupportedBandwidths: pulumi.IntArray{\n\t\t\t\t\t\tpulumi.Int(50),\n\t\t\t\t\t\tpulumi.Int(100),\n\t\t\t\t\t\tpulumi.Int(200),\n\t\t\t\t\t\tpulumi.Int(500),\n\t\t\t\t\t},\n\t\t\t\t\tAllowRemoteConnections:     pulumi.Bool(true),\n\t\t\t\t\tAllowCustomBandwidth:       pulumi.Bool(false),\n\t\t\t\t\tAllowBandwidthAutoApproval: pulumi.Bool(false),\n\t\t\t\t\tLinkProtocolConfig: \u0026fabric.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs{\n\t\t\t\t\t\tEncapsulationStrategy: pulumi.String(\"CTAGED\"),\n\t\t\t\t\t\tReuseVlanSTag:         pulumi.Bool(false),\n\t\t\t\t\t\tEncapsulation:         pulumi.String(\"DOT1Q\"),\n\t\t\t\t\t},\n\t\t\t\t\tEnableAutoGenerateServiceKey: pulumi.Bool(\"false,\"),\n\t\t\t\t\tConnectionRedundancyRequired: pulumi.Bool(\"false,\"),\n\t\t\t\t\tApiConfig: \u0026fabric.ServiceProfileAccessPointTypeConfigApiConfigArgs{\n\t\t\t\t\t\tApiAvailable:     pulumi.Bool(true),\n\t\t\t\t\t\tIntegrationId:    pulumi.String(\"Example-Connect-01\"),\n\t\t\t\t\t\tBandwidthFromApi: pulumi.Bool(false),\n\t\t\t\t\t},\n\t\t\t\t\tConnectionLabel: pulumi.String(\"Virtual Circuit Name\"),\n\t\t\t\t\tAuthenticationKey: \u0026fabric.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs{\n\t\t\t\t\t\tRequired: pulumi.Bool(true),\n\t\t\t\t\t\tLabel:    pulumi.String(\"Example ACCOUNT ID\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAccount: \u0026fabric.ServiceProfileAccountArgs{\n\t\t\t\tOrganizationName:       pulumi.String(\"Example Cloud\"),\n\t\t\t\tGlobalOrganizationName: pulumi.String(\"Example Global\"),\n\t\t\t},\n\t\t\tMetros:     nil,\n\t\t\tVisibility: pulumi.String(\"PUBLIC\"),\n\t\t\tMarketingInfo: \u0026fabric.ServiceProfileMarketingInfoArgs{\n\t\t\t\tPromotion: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"profileId\", profile.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var profile = new Equinix.Fabric.ServiceProfile(\"profile\", new()\n    {\n        Name = \"Example Cloud Provider\",\n        Description = \"50 to 500 Mbps Hosted Connection to Example Cloud\",\n        Type = \"L2_PROFILE\",\n        AccessPointTypeConfigs = new[]\n        {\n            new Equinix.Fabric.Inputs.ServiceProfileAccessPointTypeConfigArgs\n            {\n                Type = \"COLO\",\n                SupportedBandwidths = new[]\n                {\n                    50,\n                    100,\n                    200,\n                    500,\n                },\n                AllowRemoteConnections = true,\n                AllowCustomBandwidth = false,\n                AllowBandwidthAutoApproval = false,\n                LinkProtocolConfig = new Equinix.Fabric.Inputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs\n                {\n                    EncapsulationStrategy = \"CTAGED\",\n                    ReuseVlanSTag = false,\n                    Encapsulation = \"DOT1Q\",\n                },\n                EnableAutoGenerateServiceKey = \"false,\",\n                ConnectionRedundancyRequired = \"false,\",\n                ApiConfig = new Equinix.Fabric.Inputs.ServiceProfileAccessPointTypeConfigApiConfigArgs\n                {\n                    ApiAvailable = true,\n                    IntegrationId = \"Example-Connect-01\",\n                    BandwidthFromApi = false,\n                },\n                ConnectionLabel = \"Virtual Circuit Name\",\n                AuthenticationKey = new Equinix.Fabric.Inputs.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs\n                {\n                    Required = true,\n                    Label = \"Example ACCOUNT ID\",\n                },\n            },\n        },\n        Account = new Equinix.Fabric.Inputs.ServiceProfileAccountArgs\n        {\n            OrganizationName = \"Example Cloud\",\n            GlobalOrganizationName = \"Example Global\",\n        },\n        Metros = null,\n        Visibility = \"PUBLIC\",\n        MarketingInfo = new Equinix.Fabric.Inputs.ServiceProfileMarketingInfoArgs\n        {\n            Promotion = true,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"profileId\"] = profile.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.fabric.ServiceProfile;\nimport com.equinix.pulumi.fabric.ServiceProfileArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileAccessPointTypeConfigArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileAccessPointTypeConfigApiConfigArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileAccountArgs;\nimport com.equinix.pulumi.fabric.inputs.ServiceProfileMarketingInfoArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var profile = new ServiceProfile(\"profile\", ServiceProfileArgs.builder()        \n            .name(\"Example Cloud Provider\")\n            .description(\"50 to 500 Mbps Hosted Connection to Example Cloud\")\n            .type(\"L2_PROFILE\")\n            .accessPointTypeConfigs(ServiceProfileAccessPointTypeConfigArgs.builder()\n                .type(\"COLO\")\n                .supportedBandwidths(                \n                    50,\n                    100,\n                    200,\n                    500)\n                .allowRemoteConnections(true)\n                .allowCustomBandwidth(false)\n                .allowBandwidthAutoApproval(false)\n                .linkProtocolConfig(ServiceProfileAccessPointTypeConfigLinkProtocolConfigArgs.builder()\n                    .encapsulationStrategy(\"CTAGED\")\n                    .reuseVlanSTag(false)\n                    .encapsulation(\"DOT1Q\")\n                    .build())\n                .enableAutoGenerateServiceKey(false)\n                .connectionRedundancyRequired(false)\n                .apiConfig(ServiceProfileAccessPointTypeConfigApiConfigArgs.builder()\n                    .apiAvailable(true)\n                    .integrationId(\"Example-Connect-01\")\n                    .bandwidthFromApi(false)\n                    .build())\n                .connectionLabel(\"Virtual Circuit Name\")\n                .authenticationKey(ServiceProfileAccessPointTypeConfigAuthenticationKeyArgs.builder()\n                    .required(true)\n                    .label(\"Example ACCOUNT ID\")\n                    .build())\n                .build())\n            .account(ServiceProfileAccountArgs.builder()\n                .organizationName(\"Example Cloud\")\n                .globalOrganizationName(\"Example Global\")\n                .build())\n            .visibility(\"PUBLIC\")\n            .marketingInfo(ServiceProfileMarketingInfoArgs.builder()\n                .promotion(true)\n                .build())\n            .build());\n\n        ctx.export(\"profileId\", profile.id());\n    }\n}\n```\n```yaml\nresources:\n  profile:\n    type: equinix:fabric:ServiceProfile\n    properties:\n      name: Example Cloud Provider\n      description: 50 to 500 Mbps Hosted Connection to Example Cloud\n      type: L2_PROFILE\n      accessPointTypeConfigs:\n      - type: COLO\n        supportedBandwidths: [ 50, 100, 200, 500]\n        allowRemoteConnections: true\n        allowCustomBandwidth: false\n        allowBandwidthAutoApproval: false\n        linkProtocolConfig:\n          encapsulationStrategy: CTAGED\n          reuseVlanSTag: false\n          encapsulation: DOT1Q\n        enableAutoGenerateServiceKey: false,\n        connectionRedundancyRequired: false,\n        apiConfig:\n          apiAvailable: true\n          integrationId: Example-Connect-01\n          bandwidthFromApi: false\n        connectionLabel: Virtual Circuit Name\n        authenticationKey:\n          required: true\n          label: Example ACCOUNT ID\n      account:\n        organizationName: Example Cloud\n        globalOrganizationName: Example Global\n      metros:\n      visibility: PUBLIC\n      marketingInfo:\n        promotion: true\noutputs:\n  profileId: ${profile.id}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "account": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccount:ServiceProfileAccount",
                    "description": "Service Profile Owner Account Information\n"
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "changeLog": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog",
                    "description": "Captures connection lifecycle change information\n"
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                    },
                    "description": "Custom Fields\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n"
                },
                "marketingInfo": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                    "description": "Marketing Info\n"
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                    },
                    "description": "Access point config information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                    },
                    "description": "Ports\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                    "description": "Project information\n"
                },
                "selfProfile": {
                    "type": "boolean",
                    "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                },
                "state": {
                    "type": "string",
                    "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the connection\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n"
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                    },
                    "description": "Virtual Devices\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                }
            },
            "required": [
                "account",
                "changeLog",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "inputProperties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                    },
                    "description": "Custom Fields\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of authorization key\n"
                },
                "marketingInfo": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                    "description": "Marketing Info\n"
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                    },
                    "description": "Access point config information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                    },
                    "description": "Ports\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                    "description": "Project information\n"
                },
                "selfProfile": {
                    "type": "boolean",
                    "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                },
                "state": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileState:ProfileState"
                        }
                    ],
                    "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the connection\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Type of access point type config - VD, COLO\n"
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                    },
                    "description": "Virtual Devices\n"
                },
                "visibility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileVisibility:ProfileVisibility"
                        }
                    ],
                    "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                }
            },
            "requiredInputs": [
                "description",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceProfile resources.\n",
                "properties": {
                    "accessPointTypeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                        },
                        "description": "Access point config information\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccount:ServiceProfileAccount",
                        "description": "Service Profile Owner Account Information\n"
                    },
                    "allowedEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of contact emails\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                        },
                        "description": "Custom Fields\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of authorization key\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Unique Resource URL\n"
                    },
                    "marketingInfo": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                        "description": "Marketing Info\n"
                    },
                    "metros": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                        },
                        "description": "Access point config information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metro Name\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                        },
                        "description": "Ports\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                        "description": "Project information\n"
                    },
                    "selfProfile": {
                        "type": "boolean",
                        "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                    },
                    "state": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileState:ProfileState"
                            }
                        ],
                        "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the connection\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                            }
                        ],
                        "description": "Type of access point type config - VD, COLO\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Colo/Port Uuid\n"
                    },
                    "virtualDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                        },
                        "description": "Virtual Devices\n"
                    },
                    "visibility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileVisibility:ProfileVisibility"
                            }
                        ],
                        "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/bgpSession:BgpSession": {
            "description": "Provides a resource to manage BGP sessions in Equinix Metal Host. Refer to [Equinix Metal BGP documentation](https://metal.equinix.com/developers/docs/networking/local-global-bgp/) for more details.\n\nYou need to have BGP config enabled in your project.\n\nBGP session must be linked to a device running [BIRD](https://bird.network.cz) or other BGP routing daemon which will control route advertisements via the session to Equinix Metal's upstream routers.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst deviceId = config.require(\"deviceId\");\nconst bgp = new equinix.metal.BgpSession(\"bgp\", {\n    deviceId: deviceId,\n    addressFamily: \"ipv4\",\n});\nexport const bgpSessionStatus = bgp.status;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndevice_id = config.require(\"deviceId\")\nbgp = equinix.metal.BgpSession(\"bgp\",\n    device_id=device_id,\n    address_family=\"ipv4\")\npulumi.export(\"bgpSessionStatus\", bgp.status)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdeviceId := cfg.Require(\"deviceId\")\n\t\tbgp, err := metal.NewBgpSession(ctx, \"bgp\", \u0026metal.BgpSessionArgs{\n\t\t\tDeviceId:      pulumi.String(deviceId),\n\t\t\tAddressFamily: pulumi.String(\"ipv4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"bgpSessionStatus\", bgp.Status)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var deviceId = config.Require(\"deviceId\");\n    var bgp = new Equinix.Metal.BgpSession(\"bgp\", new()\n    {\n        DeviceId = deviceId,\n        AddressFamily = \"ipv4\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"bgpSessionStatus\"] = bgp.Status,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.BgpSession;\nimport com.equinix.pulumi.metal.BgpSessionArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var deviceId = config.get(\"deviceId\").get();\n        var bgp = new BgpSession(\"bgp\", BgpSessionArgs.builder()        \n            .deviceId(deviceId)\n            .addressFamily(\"ipv4\")\n            .build());\n\n        ctx.export(\"bgpSessionStatus\", bgp.status());\n    }\n}\n```\n```yaml\nconfig:\n  deviceId:\n    type: string\nresources:\n  bgp:\n    type: equinix:metal:BgpSession\n    properties:\n      deviceId: ${deviceId}\n      addressFamily: ipv4\noutputs:\n  bgpSessionStatus: ${bgp.status}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n"
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the session - `up` or `down`\n"
                }
            },
            "required": [
                "addressFamily",
                "deviceId",
                "status"
            ],
            "inputProperties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n",
                    "willReplaceOnChanges": true
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "addressFamily",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BgpSession resources.\n",
                "properties": {
                    "addressFamily": {
                        "type": "string",
                        "description": "`ipv4` or `ipv6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRoute": {
                        "type": "boolean",
                        "description": "Boolean flag to set the default route policy. False by default.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the session - `up` or `down`\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/device:Device": {
            "description": "Provides an Equinix Metal device resource. This can be used to create,\nmodify, and delete devices.\n\n\u003e **NOTE:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\nRead more about sensitive data in state.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst web = new equinix.metal.Device(\"web\", {\n    hostname: \"webserver1\",\n    plan: \"c3.small.x86\",\n    operatingSystem: \"ubuntu_20_04\",\n    metro: \"sv\",\n    billingCycle: \"hourly\",\n    projectId: projectId,\n});\nexport const webPublicIp = pulumi.interpolate`http://${web.accessPublicIpv4}`;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nweb = equinix.metal.Device(\"web\",\n    hostname=\"webserver1\",\n    plan=\"c3.small.x86\",\n    operating_system=\"ubuntu_20_04\",\n    metro=\"sv\",\n    billing_cycle=\"hourly\",\n    project_id=project_id)\npulumi.export(\"webPublicIp\", web.access_public_ipv4.apply(lambda access_public_ipv4: f\"http://{access_public_ipv4}\"))\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tweb, err := metal.NewDevice(ctx, \"web\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"webserver1\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"webPublicIp\", web.AccessPublicIpv4.ApplyT(func(accessPublicIpv4 string) (string, error) {\n\t\t\treturn fmt.Sprintf(\"http://%v\", accessPublicIpv4), nil\n\t\t}).(pulumi.StringOutput))\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var web = new Equinix.Metal.Device(\"web\", new()\n    {\n        Hostname = \"webserver1\",\n        Plan = \"c3.small.x86\",\n        OperatingSystem = \"ubuntu_20_04\",\n        Metro = \"sv\",\n        BillingCycle = \"hourly\",\n        ProjectId = projectId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"webPublicIp\"] = web.AccessPublicIpv4.Apply(accessPublicIpv4 =\u003e $\"http://{accessPublicIpv4}\"),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.Device;\nimport com.equinix.pulumi.metal.DeviceArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        var web = new Device(\"web\", DeviceArgs.builder()        \n            .hostname(\"webserver1\")\n            .plan(\"c3.small.x86\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .metro(\"sv\")\n            .billingCycle(\"hourly\")\n            .projectId(projectId)\n            .build());\n\n        ctx.export(\"webPublicIp\", web.accessPublicIpv4().applyValue(accessPublicIpv4 -\u003e String.format(\"http://%s\", accessPublicIpv4)));\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\nresources:\n  web:\n    type: equinix:metal:Device\n    properties:\n      hostname: webserver1\n      plan: c3.small.x86\n      operatingSystem: ubuntu_20_04\n      metro: sv\n      billingCycle: hourly\n      projectId: ${projectId}\noutputs:\n  webPublicIp: http://${web.accessPublicIpv4}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing device ID:\n\n```sh\n$ pulumi import equinix:metal/device:Device equinix_metal_device {existing_device_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "accessPrivateIpv4": {
                    "type": "string",
                    "description": "The ipv4 private IP assigned to the device.\n"
                },
                "accessPublicIpv4": {
                    "type": "string",
                    "description": "The ipv4 maintenance IP assigned to the device.\n"
                },
                "accessPublicIpv6": {
                    "type": "string",
                    "description": "The ipv6 maintenance IP assigned to the device.\n"
                },
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "behavior": {
                    "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                    "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "description": "monthly or hourly\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the device was created.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "deployedFacility": {
                    "type": "string",
                    "description": "(**Deprecated**) The facility where the device is deployed. Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "deployedHardwareReservationId": {
                    "type": "string",
                    "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.  Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facilities.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this\ndevice deployed, or `next-available` if you want to pick your next available reservation\nautomatically. Changing this from a reservation UUID to `next-available` will re-create the device\nin another reservation. Please be careful when using hardware reservation UUID and `next-available`\ntogether for the same pool of reservations. It might happen that the reservation which Equinix\nMetal API will pick as `next-available` is the reservation which you refer with UUID in another\nequinix.metal.Device resource. If that happens, and the equinix.metal.Device with the UUID is\ncreated later, resource creation will fail because the reservation is already in use (by the\nresource created with `next-available`). To workaround this, have the `next-available` resource\nexplicitly depend_on\nthe resource with hardware reservation UUID, so that the latter is created first. For more details,\nsee issue #176.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n"
                },
                "network": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceNetwork:DeviceNetwork"
                    },
                    "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.metal.DeviceNetworkType resources or\nequinix.metal.Port datasource.\nSee network_types guide for more info.\n",
                    "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DevicePort:DevicePort"
                    },
                    "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n"
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix.metal.ProjectSshKey resource.\n"
                },
                "reinstall": {
                    "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Root password to the server (disabled after 24 hours).\n",
                    "secret": true
                },
                "sosHostname": {
                    "type": "string",
                    "description": "The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The status of the device.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the device was updated.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix.metal.SshKey resource.\n"
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "required": [
                "accessPrivateIpv4",
                "accessPublicIpv4",
                "accessPublicIpv6",
                "billingCycle",
                "created",
                "deployedFacility",
                "deployedHardwareReservationId",
                "hostname",
                "locked",
                "network",
                "networkType",
                "operatingSystem",
                "plan",
                "ports",
                "projectId",
                "rootPassword",
                "sosHostname",
                "sshKeyIds",
                "state",
                "updated"
            ],
            "inputProperties": {
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "behavior": {
                    "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                    "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/billingCycle:BillingCycle"
                        }
                    ],
                    "description": "monthly or hourly\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ]
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.  Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facilities.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                    "willReplaceOnChanges": true
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this\ndevice deployed, or `next-available` if you want to pick your next available reservation\nautomatically. Changing this from a reservation UUID to `next-available` will re-create the device\nin another reservation. Please be careful when using hardware reservation UUID and `next-available`\ntogether for the same pool of reservations. It might happen that the reservation which Equinix\nMetal API will pick as `next-available` is the reservation which you refer with UUID in another\nequinix.metal.Device resource. If that happens, and the equinix.metal.Device with the UUID is\ncreated later, resource creation will fail because the reservation is already in use (by the\nresource created with `next-available`). To workaround this, have the `next-available` resource\nexplicitly depend_on\nthe resource with hardware reservation UUID, so that the latter is created first. For more details,\nsee issue #176.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                    "willReplaceOnChanges": true
                },
                "operatingSystem": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/operatingSystem:OperatingSystem"
                        }
                    ],
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                },
                "plan": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/plan:Plan"
                        }
                    ],
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n",
                    "willReplaceOnChanges": true
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix.metal.ProjectSshKey resource.\n",
                    "willReplaceOnChanges": true
                },
                "reinstall": {
                    "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix.metal.SshKey resource.\n",
                    "willReplaceOnChanges": true
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "requiredInputs": [
                "operatingSystem",
                "plan",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 maintenance IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 maintenance IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean",
                        "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                    },
                    "behavior": {
                        "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                        "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                    },
                    "billingCycle": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/billingCycle:BillingCycle"
                            }
                        ],
                        "description": "monthly or hourly\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the device was created.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                        "secret": true
                    },
                    "deployedFacility": {
                        "type": "string",
                        "description": "(**Deprecated**) The facility where the device is deployed. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "deployedHardwareReservationId": {
                        "type": "string",
                        "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The device description.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string",
                                    "$ref": "#/types/equinix:metal/facility:Facility"
                                }
                            ]
                        },
                        "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.  Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facilities.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                        "willReplaceOnChanges": true
                    },
                    "forceDetachVolumes": {
                        "type": "boolean",
                        "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The UUID of the hardware reservation where you want this\ndevice deployed, or `next-available` if you want to pick your next available reservation\nautomatically. Changing this from a reservation UUID to `next-available` will re-create the device\nin another reservation. Please be careful when using hardware reservation UUID and `next-available`\ntogether for the same pool of reservations. It might happen that the reservation which Equinix\nMetal API will pick as `next-available` is the reservation which you refer with UUID in another\nequinix.metal.Device resource. If that happens, and the equinix.metal.Device with the UUID is\ncreated later, resource creation will fail because the reservation is already in use (by the\nresource created with `next-available`). To workaround this, have the `next-available` resource\nexplicitly depend_on\nthe resource with hardware reservation UUID, so that the latter is created first. For more details,\nsee issue #176.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                        },
                        "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string",
                        "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DeviceNetwork:DeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/networkType:NetworkType"
                            }
                        ],
                        "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.metal.DeviceNetworkType resources or\nequinix.metal.Port datasource.\nSee network_types guide for more info.\n",
                        "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/operatingSystem:OperatingSystem"
                            }
                        ],
                        "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                    },
                    "plan": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/plan:Plan"
                            }
                        ],
                        "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                        "willReplaceOnChanges": true
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DevicePort:DevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the device\n",
                        "willReplaceOnChanges": true
                    },
                    "projectSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix.metal.ProjectSshKey resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstall": {
                        "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                        "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (disabled after 24 hours).\n",
                        "secret": true
                    },
                    "sosHostname": {
                        "type": "string",
                        "description": "The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The status of the device.\n"
                    },
                    "storage": {
                        "type": "string",
                        "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    },
                    "terminationTime": {
                        "type": "string",
                        "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the device was updated.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                        "secret": true
                    },
                    "userSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix.metal.SshKey resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForReservationDeprovision": {
                        "type": "boolean",
                        "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/deviceNetworkType:DeviceNetworkType": {
            "description": "\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst deviceId = config.require(\"deviceId\");\nconst networkType = config.get(\"networkType\") || \"hybrid\";\nconst deviceNetwork = new equinix.metal.DeviceNetworkType(\"deviceNetwork\", {\n    deviceId: deviceId,\n    type: networkType,\n});\nexport const deviceNetworkId = deviceNetwork.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndevice_id = config.require(\"deviceId\")\nnetwork_type = config.get(\"networkType\")\nif network_type is None:\n    network_type = \"hybrid\"\ndevice_network = equinix.metal.DeviceNetworkType(\"deviceNetwork\",\n    device_id=device_id,\n    type=network_type)\npulumi.export(\"deviceNetworkId\", device_network.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdeviceId := cfg.Require(\"deviceId\")\n\t\tnetworkType := \"hybrid\"\n\t\tif param := cfg.Get(\"networkType\"); param != \"\" {\n\t\t\tnetworkType = param\n\t\t}\n\t\tdeviceNetwork, err := metal.NewDeviceNetworkType(ctx, \"deviceNetwork\", \u0026metal.DeviceNetworkTypeArgs{\n\t\t\tDeviceId: pulumi.String(deviceId),\n\t\t\tType:     pulumi.String(networkType),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"deviceNetworkId\", deviceNetwork.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var deviceId = config.Require(\"deviceId\");\n    var networkType = config.Get(\"networkType\") ?? \"hybrid\";\n    var deviceNetwork = new Equinix.Metal.DeviceNetworkType(\"deviceNetwork\", new()\n    {\n        DeviceId = deviceId,\n        Type = networkType,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"deviceNetworkId\"] = deviceNetwork.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.DeviceNetworkType;\nimport com.equinix.pulumi.metal.DeviceNetworkTypeArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var deviceId = config.get(\"deviceId\").get();\n        final var networkType = config.get(\"networkType\").orElse(\"hybrid\");\n        var deviceNetwork = new DeviceNetworkType(\"deviceNetwork\", DeviceNetworkTypeArgs.builder()        \n            .deviceId(deviceId)\n            .type(networkType)\n            .build());\n\n        ctx.export(\"deviceNetworkId\", deviceNetwork.id());\n    }\n}\n```\n```yaml\nconfig:\n  deviceId:\n    type: string\n  networkType:\n    type: string\n    default: hybrid\nresources:\n  deviceNetwork:\n    type: equinix:metal:DeviceNetworkType\n    properties:\n      deviceId: ${deviceId}\n      type: ${networkType}\noutputs:\n  deviceNetworkId: ${deviceNetwork.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can also be imported using existing device ID:\n\n```sh\n$ pulumi import equinix:metal/deviceNetworkType:DeviceNetworkType equinix_metal_device_network_type {existing device_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "required": [
                "deviceId",
                "type"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceNetworkType resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The ID of the device on which the network type should be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/gateway:Gateway": {
            "description": "Use this resource to create Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst vlanId = config.require(\"vlanId\");\nconst gateway = new equinix.metal.Gateway(\"gateway\", {\n    projectId: projectId,\n    vlanId: vlanId,\n    privateIpv4SubnetSize: 8,\n});\nexport const gatewayState = gateway.state;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nvlan_id = config.require(\"vlanId\")\ngateway = equinix.metal.Gateway(\"gateway\",\n    project_id=project_id,\n    vlan_id=vlan_id,\n    private_ipv4_subnet_size=8)\npulumi.export(\"gatewayState\", gateway.state)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tvlanId := cfg.Require(\"vlanId\")\n\t\tgateway, err := metal.NewGateway(ctx, \"gateway\", \u0026metal.GatewayArgs{\n\t\t\tProjectId:             pulumi.String(projectId),\n\t\t\tVlanId:                pulumi.String(vlanId),\n\t\t\tPrivateIpv4SubnetSize: pulumi.Int(8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"gatewayState\", gateway.State)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var vlanId = config.Require(\"vlanId\");\n    var gateway = new Equinix.Metal.Gateway(\"gateway\", new()\n    {\n        ProjectId = projectId,\n        VlanId = vlanId,\n        PrivateIpv4SubnetSize = 8,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"gatewayState\"] = gateway.State,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.Gateway;\nimport com.equinix.pulumi.metal.GatewayArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var vlanId = config.get(\"vlanId\").get();\n        var gateway = new Gateway(\"gateway\", GatewayArgs.builder()        \n            .projectId(projectId)\n            .vlanId(vlanId)\n            .privateIpv4SubnetSize(8)\n            .build());\n\n        ctx.export(\"gatewayState\", gateway.state());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  vlanId:\n    type: string\nresources:\n  gateway:\n    type: equinix:metal:Gateway\n    properties:\n      projectId: ${projectId}\n      vlanId: ${vlanId}\n      privateIpv4SubnetSize: 8\noutputs:\n  gatewayState: ${gateway.state}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n"
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Status of the gateway resource.\n"
                },
                "timeouts": {
                    "$ref": "#/types/equinix:metal/GatewayTimeouts:GatewayTimeouts"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF associated with the IP Reservation\n"
                }
            },
            "required": [
                "ipReservationId",
                "privateIpv4SubnetSize",
                "projectId",
                "state",
                "vlanId",
                "vrfId"
            ],
            "inputProperties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n"
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/equinix:metal/GatewayTimeouts:GatewayTimeouts"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "vlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n"
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/equinix:metal/GatewayTimeouts:GatewayTimeouts"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/interconnection:Interconnection": {
            "description": "Use this resource to request the creation an Interconnection asset to connect with other parties using [Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/).\n\n\u003e Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst metro = config.get(\"metro\") || \"SV\";\nconst speedInMbps = config.getNumber(\"speedInMbps\") || 200;\nconst connection = new equinix.metal.Interconnection(\"connection\", {\n    name: \"fabric-port-to-metal\",\n    projectId: projectId,\n    type: \"shared\",\n    redundancy: \"primary\",\n    metro: metro,\n    speed: `${speedInMbps}Mbps`,\n    serviceTokenType: \"z_side\",\n});\nexport const connectionStatus = connection.status;\nexport const connectionTokens = connection.serviceTokens;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"SV\"\nspeed_in_mbps = config.get_int(\"speedInMbps\")\nif speed_in_mbps is None:\n    speed_in_mbps = 200\nconnection = equinix.metal.Interconnection(\"connection\",\n    name=\"fabric-port-to-metal\",\n    project_id=project_id,\n    type=\"shared\",\n    redundancy=\"primary\",\n    metro=metro,\n    speed=f\"{speed_in_mbps}Mbps\",\n    service_token_type=\"z_side\")\npulumi.export(\"connectionStatus\", connection.status)\npulumi.export(\"connectionTokens\", connection.service_tokens)\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tmetro := \"SV\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tspeedInMbps := 200\n\t\tif param := cfg.GetInt(\"speedInMbps\"); param != 0 {\n\t\t\tspeedInMbps = param\n\t\t}\n\t\tconnection, err := metal.NewInterconnection(ctx, \"connection\", \u0026metal.InterconnectionArgs{\n\t\t\tName:             pulumi.String(\"fabric-port-to-metal\"),\n\t\t\tProjectId:        pulumi.String(projectId),\n\t\t\tType:             pulumi.String(\"shared\"),\n\t\t\tRedundancy:       pulumi.String(\"primary\"),\n\t\t\tMetro:            pulumi.String(metro),\n\t\t\tSpeed:            pulumi.String(fmt.Sprintf(\"%vMbps\", speedInMbps)),\n\t\t\tServiceTokenType: pulumi.String(\"z_side\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"connectionStatus\", connection.Status)\n\t\tctx.Export(\"connectionTokens\", connection.ServiceTokens)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var metro = config.Get(\"metro\") ?? \"SV\";\n    var speedInMbps = config.GetNumber(\"speedInMbps\") ?? 200;\n    var connection = new Equinix.Metal.Interconnection(\"connection\", new()\n    {\n        Name = \"fabric-port-to-metal\",\n        ProjectId = projectId,\n        Type = \"shared\",\n        Redundancy = \"primary\",\n        Metro = metro,\n        Speed = $\"{speedInMbps}Mbps\",\n        ServiceTokenType = \"z_side\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"connectionStatus\"] = connection.Status,\n        [\"connectionTokens\"] = connection.ServiceTokens,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.metal.Interconnection;\nimport com.equinix.pulumi.metal.InterconnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var metro = config.get(\"metro\").orElse(\"SV\");\n        final var speedInMbps = Integer.parseInt(config.get(\"speedInMbps\").orElse(\"200\"));\n        var connection = new Interconnection(\"connection\", InterconnectionArgs.builder()        \n            .name(\"fabric-port-to-metal\")\n            .projectId(projectId)\n            .type(\"shared\")\n            .redundancy(\"primary\")\n            .metro(metro)\n            .speed(String.format(\"%sMbps\", speedInMbps))\n            .serviceTokenType(\"z_side\")\n            .build());\n\n        ctx.export(\"connectionStatus\", connection.status());\n        ctx.export(\"connectionTokens\", connection.serviceTokens());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  metro:\n    type: string\n    default: SV\n  speedInMbps:\n    type: integer\n    default: 200\nresources:\n  connection:\n    type: equinix:metal:Interconnection\n    properties:\n      name: fabric-port-to-metal\n      projectId: ${projectId}\n      type: shared\n      redundancy: primary\n      metro: ${metro}\n      speed: ${speedInMbps}Mbps\n      serviceTokenType: z_side\noutputs:\n  connectionStatus: ${connection.status}\n  connectionTokens: ${connection.serviceTokens}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "contactEmail": {
                    "type": "string",
                    "description": "The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.   Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility. For more information, read the migration guide."
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/InterconnectionPort:InterconnectionPort"
                    },
                    "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.metal.Interconnection datasource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                },
                "serviceTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/InterconnectionServiceToken:InterconnectionServiceToken"
                    },
                    "description": "List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Interconnection datasource.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed -  Values must be in the format '\u003cnumber\u003eMbps' or '\u003cnumber\u003eGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                    "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "required": [
                "contactEmail",
                "description",
                "facility",
                "metro",
                "mode",
                "name",
                "organizationId",
                "ports",
                "redundancy",
                "serviceTokens",
                "speed",
                "status",
                "token",
                "type"
            ],
            "inputProperties": {
                "contactEmail": {
                    "type": "string",
                    "description": "The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.   Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility. For more information, read the migration guide."
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed -  Values must be in the format '\u003cnumber\u003eMbps' or '\u003cnumber\u003eGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "requiredInputs": [
                "redundancy",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Interconnection resources.\n",
                "properties": {
                    "contactEmail": {
                        "type": "string",
                        "description": "The preferred email used for communication and notifications about the Equinix Fabric interconnection. Required when using a Project API key. Optional and defaults to the primary user email address when using a User API key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility where the connection will be created.   Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility. For more information, read the migration guide."
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the connection will be created.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the connection resource\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/InterconnectionPort:InterconnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.metal.Interconnection datasource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the connection is scoped to, must be set for.\n"
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy - redundant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/InterconnectionServiceToken:InterconnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Interconnection datasource.\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Connection speed -  Values must be in the format '\u003cnumber\u003eMbps' or '\u003cnumber\u003eGpbs', for example '100Mbps' or '50Gbps'.  Actual supported values will depend on the connection type and whether the connection uses VLANs or VRF.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the connection resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                        "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "Connection type - dedicated or shared.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/ipAttachment:IpAttachment": {
            "description": "Provides a resource to attach elastic IP subnets to devices.\n\nTo attach an IP subnet from a reserved block to a provisioned device, you must derive a subnet CIDR\nbelonging to one of your reserved blocks in the same project and metro as the target device.\n\nFor example, you have reserved IPv4 address block `147.229.10.152/30`, you can choose to assign\neither the whole block as one subnet to a device; or 2 subnets with CIDRs `147.229.10.152/31` and\n`147.229.10.154/31`; or 4 subnets with mask prefix length `32`. More about the elastic IP subnets\nis [here](https://metal.equinix.com/developers/docs/networking/elastic-ips/).\n\nDevice and reserved block must be in the same metro.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst deviceId = config.require(\"deviceId\");\nconst subnetCidr = config.get(\"subnetCidr\") || \"147.229.10.152/31\";\nconst ipAttachResource = new equinix.metal.IpAttachment(\"ipAttach\", {\n    deviceId: deviceId,\n    cidrNotation: subnetCidr,\n});\nexport const ipAttach = ipAttachResource.id;\nexport const ipNetmask = ipAttachResource.netmask;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndevice_id = config.require(\"deviceId\")\nsubnet_cidr = config.get(\"subnetCidr\")\nif subnet_cidr is None:\n    subnet_cidr = \"147.229.10.152/31\"\nip_attach_resource = equinix.metal.IpAttachment(\"ipAttach\",\n    device_id=device_id,\n    cidr_notation=subnet_cidr)\npulumi.export(\"ipAttach\", ip_attach_resource.id)\npulumi.export(\"ipNetmask\", ip_attach_resource.netmask)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdeviceId := cfg.Require(\"deviceId\")\n\t\tsubnetCidr := \"147.229.10.152/31\"\n\t\tif param := cfg.Get(\"subnetCidr\"); param != \"\" {\n\t\t\tsubnetCidr = param\n\t\t}\n\t\tipAttachResource, err := metal.NewIpAttachment(ctx, \"ipAttach\", \u0026metal.IpAttachmentArgs{\n\t\t\tDeviceId:     pulumi.String(deviceId),\n\t\t\tCidrNotation: pulumi.String(subnetCidr),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ipAttach\", ipAttachResource.ID())\n\t\tctx.Export(\"ipNetmask\", ipAttachResource.Netmask)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var deviceId = config.Require(\"deviceId\");\n    var subnetCidr = config.Get(\"subnetCidr\") ?? \"147.229.10.152/31\";\n    var ipAttachResource = new Equinix.Metal.IpAttachment(\"ipAttach\", new()\n    {\n        DeviceId = deviceId,\n        CidrNotation = subnetCidr,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ipAttach\"] = ipAttachResource.Id,\n        [\"ipNetmask\"] = ipAttachResource.Netmask,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.IpAttachment;\nimport com.equinix.pulumi.metal.IpAttachmentArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var deviceId = config.get(\"deviceId\").get();\n        final var subnetCidr = config.get(\"subnetCidr\").orElse(\"147.229.10.152/31\");\n        var ipAttachResource = new IpAttachment(\"ipAttachResource\", IpAttachmentArgs.builder()        \n            .deviceId(deviceId)\n            .cidrNotation(subnetCidr)\n            .build());\n\n        ctx.export(\"ipAttach\", ipAttachResource.id());\n        ctx.export(\"ipNetmask\", ipAttachResource.netmask());\n    }\n}\n```\n```yaml\nconfig:\n  deviceId:\n    type: string\n  subnetCidr:\n    type: string\n    default: 147.229.10.152/31\nresources:\n  ipAttach:\n    type: equinix:metal:IpAttachment\n    properties:\n      deviceId: ${deviceId}\n      cidrNotation: ${subnetCidr}\noutputs:\n  ipAttach: ${ipAttach.id}\n  ipNetmask: ${ipAttach.netmask}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Length of CIDR prefix of the subnet as integer.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand metro as the device.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "IP address of gateway for the subnet.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "netmask": {
                    "type": "string",
                    "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Subnet network address.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                },
                "vrfId": {
                    "type": "string"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "deviceId",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "public",
                "vrfId"
            ],
            "inputProperties": {
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand metro as the device.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrNotation",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAttachment resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Length of CIDR prefix of the subnet as integer.\n"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of subnet from block reserved in the same project\nand metro as the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to which to assign the subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "IP address of gateway for the subnet.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Subnet network address.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/organization:Organization": {
            "description": "Provides a resource to manage organization resource in Equinix Metal.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst orgResource = new equinix.metal.Organization(\"org\", {\n    name: \"Foo Organization\",\n    address: {\n        address: \"org street\",\n        city: \"london\",\n        country: \"GB\",\n        zipCode: \"12345\",\n    },\n    description: \"An organization\",\n});\nexport const org = orgResource.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\norg_resource = equinix.metal.Organization(\"org\",\n    name=\"Foo Organization\",\n    address=equinix.metal.OrganizationAddressArgs(\n        address=\"org street\",\n        city=\"london\",\n        country=\"GB\",\n        zip_code=\"12345\",\n    ),\n    description=\"An organization\")\npulumi.export(\"org\", org_resource.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\torgResource, err := metal.NewOrganization(ctx, \"org\", \u0026metal.OrganizationArgs{\n\t\t\tName: pulumi.String(\"Foo Organization\"),\n\t\t\tAddress: \u0026metal.OrganizationAddressArgs{\n\t\t\t\tAddress: pulumi.String(\"org street\"),\n\t\t\t\tCity:    pulumi.String(\"london\"),\n\t\t\t\tCountry: pulumi.String(\"GB\"),\n\t\t\t\tZipCode: pulumi.String(\"12345\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"An organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"org\", orgResource.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var orgResource = new Equinix.Metal.Organization(\"org\", new()\n    {\n        Name = \"Foo Organization\",\n        Address = new Equinix.Metal.Inputs.OrganizationAddressArgs\n        {\n            Address = \"org street\",\n            City = \"london\",\n            Country = \"GB\",\n            ZipCode = \"12345\",\n        },\n        Description = \"An organization\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"org\"] = orgResource.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.metal.Organization;\nimport com.equinix.pulumi.metal.OrganizationArgs;\nimport com.equinix.pulumi.metal.inputs.OrganizationAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var orgResource = new Organization(\"orgResource\", OrganizationArgs.builder()        \n            .name(\"Foo Organization\")\n            .address(OrganizationAddressArgs.builder()\n                .address(\"org street\")\n                .city(\"london\")\n                .country(\"GB\")\n                .zipCode(\"12345\")\n                .build())\n            .description(\"An organization\")\n            .build());\n\n        ctx.export(\"org\", orgResource.id());\n    }\n}\n```\n```yaml\nresources:\n  org:\n    type: equinix:metal:Organization\n    properties:\n      name: Foo Organization\n      address:\n        address: org street\n        city: london\n        country: GB\n        zipCode: \"12345\"\n      description: An organization\noutputs:\n  org: ${org.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing organization ID:\n\n```sh\n$ pulumi import equinix:metal/organization:Organization equinix_metal_organization {existing_organization_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "address": {
                    "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                    "description": "An object that has the address information. See Address\nbelow for more details.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the organization was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the organization was updated.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "required": [
                "address",
                "created",
                "name",
                "updated"
            ],
            "inputProperties": {
                "address": {
                    "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                    "description": "An object that has the address information. See Address\nbelow for more details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "address": {
                        "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                        "description": "An object that has the address information. See Address\nbelow for more details.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the organization was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the organization was updated.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/organizationMember:OrganizationMember": {
            "description": "Manage the membership of existing and new invitees within an Equinix Metal organization and its projects.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst organizationId = config.require(\"organizationId\");\nconst projectId = config.require(\"projectId\");\nconst userEmailAddress = config.require(\"userEmailAddress\");\nconst member = new equinix.metal.OrganizationMember(\"member\", {\n    invitee: userEmailAddress,\n    roles: [\"limited_collaborator\"],\n    projectsIds: [projectId],\n    organizationId: organizationId,\n});\nexport const memberId = member.id;\nexport const memberState = member.state;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\norganization_id = config.require(\"organizationId\")\nproject_id = config.require(\"projectId\")\nuser_email_address = config.require(\"userEmailAddress\")\nmember = equinix.metal.OrganizationMember(\"member\",\n    invitee=user_email_address,\n    roles=[\"limited_collaborator\"],\n    projects_ids=[project_id],\n    organization_id=organization_id)\npulumi.export(\"memberId\", member.id)\npulumi.export(\"memberState\", member.state)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\torganizationId := cfg.Require(\"organizationId\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tuserEmailAddress := cfg.Require(\"userEmailAddress\")\n\t\tmember, err := metal.NewOrganizationMember(ctx, \"member\", \u0026metal.OrganizationMemberArgs{\n\t\t\tInvitee: pulumi.String(userEmailAddress),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"limited_collaborator\"),\n\t\t\t},\n\t\t\tProjectsIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(projectId),\n\t\t\t},\n\t\t\tOrganizationId: pulumi.String(organizationId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"memberId\", member.ID())\n\t\tctx.Export(\"memberState\", member.State)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var organizationId = config.Require(\"organizationId\");\n    var projectId = config.Require(\"projectId\");\n    var userEmailAddress = config.Require(\"userEmailAddress\");\n    var member = new Equinix.Metal.OrganizationMember(\"member\", new()\n    {\n        Invitee = userEmailAddress,\n        Roles = new[]\n        {\n            \"limited_collaborator\",\n        },\n        ProjectsIds = new[]\n        {\n            projectId,\n        },\n        OrganizationId = organizationId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"memberId\"] = member.Id,\n        [\"memberState\"] = member.State,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.OrganizationMember;\nimport com.equinix.pulumi.metal.OrganizationMemberArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var organizationId = config.get(\"organizationId\").get();\n        final var projectId = config.get(\"projectId\").get();\n        final var userEmailAddress = config.get(\"userEmailAddress\").get();\n        var member = new OrganizationMember(\"member\", OrganizationMemberArgs.builder()        \n            .invitee(userEmailAddress)\n            .roles(\"limited_collaborator\")\n            .projectsIds(projectId)\n            .organizationId(organizationId)\n            .build());\n\n        ctx.export(\"memberId\", member.id());\n        ctx.export(\"memberState\", member.state());\n    }\n}\n```\n```yaml\nconfig:\n  organizationId:\n    type: string\n  projectId:\n    type: string\n  userEmailAddress:\n    type: string\nresources:\n  member:\n    type: equinix:metal:OrganizationMember\n    properties:\n      invitee: ${userEmailAddress}\n      roles:\n      - limited_collaborator\n      projectsIds:\n      - ${projectId}\n      organizationId: ${organizationId}\noutputs:\n  memberId: ${member.id}\n  memberState: ${member.state}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using the `invitee` and `organization_id` as colon separated arguments:\n\n```sh\n$ pulumi import equinix:metal/organizationMember:OrganizationMember resource_name {invitee}:{organization_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the invitation was created (only known in the invitation stage)\n"
                },
                "invitedBy": {
                    "type": "string",
                    "description": "The user_id of the user that sent the invitation (only known in the invitation stage)\n"
                },
                "invitee": {
                    "type": "string",
                    "description": "The email address of the user to invite\n"
                },
                "message": {
                    "type": "string",
                    "description": "A message to include in the emailed invitation.\n"
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce for the invitation (only known in the invitation stage)\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to invite the user to\n"
                },
                "projectsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the membership ('invited' when an invitation is open, 'active' when the user is an organization member)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When the invitation was updated (only known in the invitation stage)\n"
                }
            },
            "required": [
                "created",
                "invitedBy",
                "invitee",
                "nonce",
                "organizationId",
                "projectsIds",
                "roles",
                "state",
                "updated"
            ],
            "inputProperties": {
                "invitee": {
                    "type": "string",
                    "description": "The email address of the user to invite\n",
                    "willReplaceOnChanges": true
                },
                "message": {
                    "type": "string",
                    "description": "A message to include in the emailed invitation.\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to invite the user to\n",
                    "willReplaceOnChanges": true
                },
                "projectsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "invitee",
                "organizationId",
                "projectsIds",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMember resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When the invitation was created (only known in the invitation stage)\n"
                    },
                    "invitedBy": {
                        "type": "string",
                        "description": "The user_id of the user that sent the invitation (only known in the invitation stage)\n"
                    },
                    "invitee": {
                        "type": "string",
                        "description": "The email address of the user to invite\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "A message to include in the emailed invitation.\n",
                        "willReplaceOnChanges": true
                    },
                    "nonce": {
                        "type": "string",
                        "description": "The nonce for the invitation (only known in the invitation stage)\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization to invite the user to\n",
                        "willReplaceOnChanges": true
                    },
                    "projectsIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the membership ('invited' when an invitation is open, 'active' when the user is an organization member)\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When the invitation was updated (only known in the invitation stage)\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/port:Port": {
            "description": "\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst portId = config.require(\"portId\");\nconst org = new equinix.metal.Port(\"org\", {\n    portId: portId,\n    bonded: true,\n    layer2: true,\n});\nexport const portType = port.type;\nexport const portBondedNetworkType = port.networkType;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nport_id = config.require(\"portId\")\norg = equinix.metal.Port(\"org\",\n    port_id=port_id,\n    bonded=True,\n    layer2=True)\npulumi.export(\"portType\", port[\"type\"])\npulumi.export(\"portBondedNetworkType\", port[\"networkType\"])\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tportId := cfg.Require(\"portId\")\n\t\t_, err := metal.NewPort(ctx, \"org\", \u0026metal.PortArgs{\n\t\t\tPortId: pulumi.String(portId),\n\t\t\tBonded: pulumi.Bool(true),\n\t\t\tLayer2: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"portType\", port.Type)\n\t\tctx.Export(\"portBondedNetworkType\", port.NetworkType)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var portId = config.Require(\"portId\");\n    var org = new Equinix.Metal.Port(\"org\", new()\n    {\n        PortId = portId,\n        Bonded = true,\n        Layer2 = true,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"portType\"] = port.Type,\n        [\"portBondedNetworkType\"] = port.NetworkType,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.metal.Port;\nimport com.equinix.pulumi.metal.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var portId = config.get(\"portId\").get();\n        final var vlanId = config.get(\"vlanId\").get();\n        var port = new Port(\"port\", PortArgs.builder()        \n            .portId(portId)\n            .bonded(true)\n            .layer2(false)\n            .vlanIds(vlanId)\n            .build());\n\n        ctx.export(\"portType\", port.type());\n        ctx.export(\"portBondedNetworkType\", port.networkType());\n    }\n}\n```\n```yaml\nconfig:\n  portId:\n    type: string\nresources:\n  org:\n    type: equinix:metal:Port\n    properties:\n      portId: ${portId}\n      bonded: true\n      layer2: true\noutputs:\n  portType: ${port.type}\n  portBondedNetworkType: ${port.networkType}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "bondId": {
                    "type": "string",
                    "description": "UUID of the bond port.\n"
                },
                "bondName": {
                    "type": "string",
                    "description": "Name of the bond port.\n"
                },
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "disbondSupported": {
                    "type": "boolean",
                    "description": "Flag indicating whether the port can be removed from a bond.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address of the port.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n"
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "required": [
                "bondId",
                "bondName",
                "bonded",
                "disbondSupported",
                "mac",
                "name",
                "networkType",
                "portId",
                "type",
                "vlanIds",
                "vxlanIds"
            ],
            "inputProperties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n",
                    "willReplaceOnChanges": true
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "requiredInputs": [
                "bonded",
                "portId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Whether the port should be bonded.\n"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "layer2": {
                        "type": "boolean",
                        "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read.\n",
                        "willReplaceOnChanges": true
                    },
                    "resetOnDelete": {
                        "type": "boolean",
                        "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/portVlanAttachment:PortVlanAttachment": {
            "description": "Provides a resource to attach device ports to VLANs.\n\nDevice and VLAN must be in the same metro.\n\nIf you need this resource to add the port back to bond on removal, set `force_bond = true`.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n## Attribute Referece\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - UUID of device port used in the assignment.\n* `vlan_id` - UUID of VLAN API resource.\n* `port_id` - UUID of device port.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst deviceId = config.require(\"deviceId\");\nconst portName = config.get(\"portName\") || \"eth1\";\nconst vxlanId = config.getNumber(\"vxlanId\") || 1004;\nconst attach = new equinix.metal.PortVlanAttachment(\"attach\", {\n    deviceId: deviceId,\n    portName: portName,\n    vlanVnid: vxlanId,\n});\nexport const attachId = attach.id;\nexport const portId = attach.portId;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndevice_id = config.require(\"deviceId\")\nport_name = config.get(\"portName\")\nif port_name is None:\n    port_name = \"eth1\"\nvxlan_id = config.get_int(\"vxlanId\")\nif vxlan_id is None:\n    vxlan_id = 1004\nattach = equinix.metal.PortVlanAttachment(\"attach\",\n    device_id=device_id,\n    port_name=port_name,\n    vlan_vnid=vxlan_id)\npulumi.export(\"attachId\", attach.id)\npulumi.export(\"portId\", attach.port_id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdeviceId := cfg.Require(\"deviceId\")\n\t\tportName := \"eth1\"\n\t\tif param := cfg.Get(\"portName\"); param != \"\" {\n\t\t\tportName = param\n\t\t}\n\t\tvxlanId := 1004\n\t\tif param := cfg.GetInt(\"vxlanId\"); param != 0 {\n\t\t\tvxlanId = param\n\t\t}\n\t\tattach, err := metal.NewPortVlanAttachment(ctx, \"attach\", \u0026metal.PortVlanAttachmentArgs{\n\t\t\tDeviceId: pulumi.String(deviceId),\n\t\t\tPortName: pulumi.String(portName),\n\t\t\tVlanVnid: pulumi.Int(vxlanId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"attachId\", attach.ID())\n\t\tctx.Export(\"portId\", attach.PortId)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var deviceId = config.Require(\"deviceId\");\n    var portName = config.Get(\"portName\") ?? \"eth1\";\n    var vxlanId = config.GetNumber(\"vxlanId\") ?? 1004;\n    var attach = new Equinix.Metal.PortVlanAttachment(\"attach\", new()\n    {\n        DeviceId = deviceId,\n        PortName = portName,\n        VlanVnid = vxlanId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"attachId\"] = attach.Id,\n        [\"portId\"] = attach.PortId,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.PortVlanAttachment;\nimport com.equinix.pulumi.metal.PortVlanAttachmentArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var deviceId = config.get(\"deviceId\").get();\n        final var portName = config.get(\"portName\").orElse(\"eth1\");\n        final var vxlanId = Integer.parseInt(config.get(\"vxlanId\").orElse(\"1004\"));\n\n        var attach = new PortVlanAttachment(\"attach\", PortVlanAttachmentArgs.builder()        \n            .deviceId(deviceId)\n            .portName(portName)\n            .vlanVnid(vxlanId)\n            .build());\n\n        ctx.export(\"attachId\", attach.id());\n        ctx.export(\"portId\", attach.portId());\n    }\n}\n```\n```yaml\nconfig:\n  deviceId:\n    type: string\n  portName:\n    type: string\n    default: eth1\n  vxlanId:\n    type: integer\n    default: 1004\nresources:\n  attach:\n    type: equinix:metal:PortVlanAttachment\n    properties:\n      deviceId: ${deviceId}\n      portName: ${portName}\n      vlanVnid: ${vxlanId}\noutputs:\n  attachId: ${attach.id}\n  portId: ${attach.portId}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n"
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n"
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of device port\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of VLAN API resource\n"
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n"
                }
            },
            "required": [
                "deviceId",
                "portId",
                "portName",
                "vlanId",
                "vlanVnid"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                    "willReplaceOnChanges": true
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceId",
                "portName",
                "vlanVnid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PortVlanAttachment resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceBond": {
                        "type": "boolean",
                        "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "native": {
                        "type": "boolean",
                        "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of device port\n"
                    },
                    "portName": {
                        "type": "string",
                        "description": "Name of network port to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of VLAN API resource\n"
                    },
                    "vlanVnid": {
                        "type": "integer",
                        "description": "VXLAN Network Identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/project:Project": {
            "description": "Provides an Equinix Metal project resource to allow you manage devices\nin your projects.\n\n\u003e **NOTE:** Keep in mind that Equinix Metal invoicing is per project, so creating many\n`equinix.metal.Project` resources will affect the rendered invoice. If you want to keep your\nEquinix Metal bill simple and easy to review, please re-use your existing projects.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst organizationId = config.require(\"organizationId\");\nconst name = config.get(\"name\") || \"Default Project\";\nconst projectResource = new equinix.metal.Project(\"project\", {\n    name: name,\n    organizationId: organizationId,\n});\nexport const projectId = projectResource.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\norganization_id = config.require(\"organizationId\")\nname = config.get(\"name\")\nif name is None:\n    name = \"Default Project\"\nproject_resource = equinix.metal.Project(\"project\",\n    name=name,\n    organization_id=organization_id)\npulumi.export(\"projectId\", project_resource.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\torganizationId := cfg.Require(\"organizationId\")\n\t\tname := \"Default Project\"\n\t\tif param := cfg.Get(\"name\"); param != \"\" {\n\t\t\tname = param\n\t\t}\n\t\tprojectResource, err := metal.NewProject(ctx, \"project\", \u0026metal.ProjectArgs{\n\t\t\tName:           pulumi.String(name),\n\t\t\tOrganizationId: pulumi.String(organizationId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectId\", projectResource.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var organizationId = config.Require(\"organizationId\");\n    var name = config.Get(\"name\") ?? \"Default Project\";\n    var projectResource = new Equinix.Metal.Project(\"project\", new()\n    {\n        Name = name,\n        OrganizationId = organizationId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = projectResource.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.Project;\nimport com.equinix.pulumi.metal.ProjectArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var organizationId = config.get(\"organizationId\").get();\n        final var name = config.get(\"name\").orElse(\"Default Project\");\n        var projectResource = new Project(\"projectResource\", ProjectArgs.builder()        \n            .name(name)\n            .organizationId(organizationId)\n            .build());\n\n        ctx.export(\"projectId\", projectResource.id());\n    }\n}\n```\n```yaml\nconfig:\n  organizationId:\n    type: string\n  name:\n    type: string\n    default: Default Project\nresources:\n  project:\n    type: equinix:metal:Project\n    properties:\n      name: ${name}\n      organizationId: ${organizationId}\noutputs:\n  projectId: ${project.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing project ID:\n\n```sh\n$ pulumi import equinix:metal/project:Project equinix_metal_project {existing_project_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n\n\u003e **NOTE:** Once you set the BGP config in a project, it can't be removed (due to a limitation in\nthe Equinix Metal API). It can be updated.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the project was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.  The maximum length is 80 characters\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be created under your the default organization of your account.\n"
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the project was updated.\n"
                }
            },
            "required": [
                "created",
                "name",
                "organizationId",
                "paymentMethodId",
                "updated"
            ],
            "inputProperties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n\n\u003e **NOTE:** Once you set the BGP config in a project, it can't be removed (due to a limitation in\nthe Equinix Metal API). It can be updated.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.  The maximum length is 80 characters\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be created under your the default organization of your account.\n",
                    "willReplaceOnChanges": true
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                    },
                    "bgpConfig": {
                        "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n\n\u003e **NOTE:** Once you set the BGP config in a project, it can't be removed (due to a limitation in\nthe Equinix Metal API). It can be updated.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.  The maximum length is 80 characters\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be created under your the default organization of your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/projectApiKey:ProjectApiKey": {
            "description": "Use this resource to create Metal Project API Key resources in Equinix Metal. Project API keys can\nbe used to create and read resources in a single project. Each API key contains a token which can\nbe used for authentication in Equinix Metal HTTP API (in HTTP request header `X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst readOnly = config.getBoolean(\"readOnly\") || false;\nconst apiKey = new equinix.metal.ProjectApiKey(\"apiKey\", {\n    projectId: projectId,\n    description: \"A project level API Key\",\n    readOnly: readOnly,\n});\nexport const apiKeyToken = apiKey.token;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nread_only = config.get_bool(\"readOnly\")\nif read_only is None:\n    read_only = False\napi_key = equinix.metal.ProjectApiKey(\"apiKey\",\n    project_id=project_id,\n    description=\"A project level API Key\",\n    read_only=read_only)\npulumi.export(\"apiKeyToken\", api_key.token)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\treadOnly := false\n\t\tif param := cfg.GetBool(\"readOnly\"); param {\n\t\t\treadOnly = param\n\t\t}\n\t\tapiKey, err := metal.NewProjectApiKey(ctx, \"apiKey\", \u0026metal.ProjectApiKeyArgs{\n\t\t\tProjectId:   pulumi.String(projectId),\n\t\t\tDescription: pulumi.String(\"A project level API Key\"),\n\t\t\tReadOnly:    pulumi.Bool(readOnly),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiKeyToken\", apiKey.Token)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var readOnly = config.GetBoolean(\"readOnly\") ?? false;\n    var apiKey = new Equinix.Metal.ProjectApiKey(\"apiKey\", new()\n    {\n        ProjectId = projectId,\n        Description = \"A project level API Key\",\n        ReadOnly = readOnly,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiKeyToken\"] = apiKey.Token,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.ProjectApiKey;\nimport com.equinix.pulumi.metal.ProjectApiKeyArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var readOnly = config.getBoolean(\"readOnly\").orElse(false);\n        var apiKey = new ProjectApiKey(\"apiKey\", ProjectApiKeyArgs.builder()        \n            .projectId(projectId)\n            .description(\"A project level API Key\")\n            .readOnly(readOnly)\n            .build());\n\n        ctx.export(\"apiKeyToken\", apiKey.token());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  readOnly:\n    type: boolean\n    default: false\nresources:\n  apiKey:\n    type: equinix:metal:ProjectApiKey\n    properties:\n      projectId: ${projectId}\n      description: A project level API Key\n      readOnly: ${readOnly}\noutputs:\n  apiKeyToken: ${apiKey.token}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients\n",
                    "secret": true
                }
            },
            "required": [
                "description",
                "projectId",
                "readOnly",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "projectId",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the API key is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/projectSshKey:ProjectSshKey": {
            "description": "Provides an Equinix Metal project SSH key resource to manage project-specific SSH keys.\nProject SSH keys will only be populated onto servers that belong to that project, in contrast to\nUser SSH Keys.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as fs from \"fs\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst sshKey = new equinix.metal.ProjectSshKey(\"sshKey\", {\n    projectId: projectId,\n    name: \"johnKent\",\n    publicKey: fs.readFileSync(\"/Users/John/.ssh/metal_rsa.pub\"),\n});\nexport const sshKeyId = sshKey.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nssh_key = equinix.metal.ProjectSshKey(\"sshKey\",\n    project_id=project_id,\n    name=\"johnKent\",\n    public_key=(lambda path: open(path).read())(\"/Users/John/.ssh/metal_rsa.pub\"))\npulumi.export(\"sshKeyId\", ssh_key.id)\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tsshKey, err := metal.NewProjectSshKey(ctx, \"sshKey\", \u0026metal.ProjectSshKeyArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tName:      pulumi.String(\"johnKent\"),\n\t\t\tPublicKey: readFileOrPanic(\"/Users/John/.ssh/metal_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sshKeyId\", sshKey.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var sshKey = new Equinix.Metal.ProjectSshKey(\"sshKey\", new()\n    {\n        ProjectId = projectId,\n        Name = \"johnKent\",\n        PublicKey = File.ReadAllText(\"/Users/John/.ssh/metal_rsa.pub\"),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sshKeyId\"] = sshKey.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.ProjectSshKey;\nimport com.equinix.pulumi.metal.ProjectSshKeyArgs;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n\n        String content = null;\n        try {\n            content = Files.readString(Paths.get(\"/Users/John/.ssh/metal_rsa.pub\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        var sshKey = new ProjectSshKey(\"sshKey\", ProjectSshKeyArgs.builder()        \n            .projectId(projectId)\n            .name(\"johnKent\")\n            .publicKey(content)\n            .build());\n\n        ctx.export(\"sshKeyId\", sshKey.id());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\nresources:\n  sshKey:\n    type: equinix:metal:ProjectSshKey\n    properties:\n      projectId: ${projectId}\n      name: johnKent\n      publicKey:\n        fn::readFile: /Users/John/.ssh/metal_rsa.pub\noutputs:\n  sshKeyId: ${sshKey.id}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of parent project (same as project_id).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "projectId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectSshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/reservedIpBlock:ReservedIpBlock": {
            "description": "Provides a resource to create and manage blocks of reserved IP addresses in a project.\n\nWhen a user provisions first device in a metro, Equinix Metal API automatically allocates IPv6/56 and private IPv4/25 blocks.\nThe new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.\nEvery new device in the project and metro will automatically get IPv6 and private IPv4 addresses from these pre-allocated blocks.\nThe IPv6 and private IPv4 blocks can't be created, only imported. With this resource, it's possible to create either public IPv4 blocks or global IPv4 blocks.\n\nPublic blocks are allocated in a metro. Addresses from public blocks can only be assigned to devices in the metro. Public blocks can have mask from /24 (256 addresses) to /32 (1 address). If you create public block with this resource, you must fill the metro argument.\n\nAddresses from global blocks can be assigned in any metro. Global blocks can have mask from /30 (4 addresses), to /32 (1 address). If you create global block with this resource, you must specify type = \"global_ipv4\" and you must omit the metro argument.\n\nOnce IP block is allocated or imported, an address from it can be assigned to device with the `equinix.metal.IpAttachment` resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst metro = config.get(\"metro\") || \"FR\";\nconst type = config.get(\"type\") || \"public_ipv4\";\nconst quantity = config.getNumber(\"quantity\") || 1;\nconst ipBlock = new equinix.metal.ReservedIpBlock(\"ipBlock\", {\n    projectId: projectId,\n    type: \"public_ipv4\",\n    quantity: quantity,\n    metro: metro,\n});\nexport const ipBlockId = ipBlock.id;\nexport const ipBlockSubent = ipBlock.cidrNotation;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"FR\"\ntype = config.get(\"type\")\nif type is None:\n    type = \"public_ipv4\"\nquantity = config.get_int(\"quantity\")\nif quantity is None:\n    quantity = 1\nip_block = equinix.metal.ReservedIpBlock(\"ipBlock\",\n    project_id=project_id,\n    type=\"public_ipv4\",\n    quantity=quantity,\n    metro=metro)\npulumi.export(\"ipBlockId\", ip_block.id)\npulumi.export(\"ipBlockSubent\", ip_block.cidr_notation)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tmetro := \"FR\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\t_type := \"public_ipv4\"\n\t\tif param := cfg.Get(\"type\"); param != \"\" {\n\t\t\t_type = param\n\t\t}\n\t\tquantity := 1\n\t\tif param := cfg.GetInt(\"quantity\"); param != 0 {\n\t\t\tquantity = param\n\t\t}\n\t\tipBlock, err := metal.NewReservedIpBlock(ctx, \"ipBlock\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tType:      pulumi.String(\"public_ipv4\"),\n\t\t\tQuantity:  pulumi.Int(quantity),\n\t\t\tMetro:     pulumi.String(metro),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ipBlockId\", ipBlock.ID())\n\t\tctx.Export(\"ipBlockSubent\", ipBlock.CidrNotation)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var metro = config.Get(\"metro\") ?? \"FR\";\n    var type = config.Get(\"type\") ?? \"public_ipv4\";\n    var quantity = config.GetNumber(\"quantity\") ?? 1;\n    var ipBlock = new Equinix.Metal.ReservedIpBlock(\"ipBlock\", new()\n    {\n        ProjectId = projectId,\n        Type = \"public_ipv4\",\n        Quantity = quantity,\n        Metro = metro,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ipBlockId\"] = ipBlock.Id,\n        [\"ipBlockSubent\"] = ipBlock.CidrNotation,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.ReservedIpBlock;\nimport com.equinix.pulumi.metal.ReservedIpBlockArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var metro = config.get(\"metro\").orElse(\"FR\");\n        final var type = config.get(\"type\").orElse(\"public_ipv4\");\n        final var quantity = Integer.parseInt(config.get(\"quantity\").orElse(\"1\"));\n        var ipBlock = new ReservedIpBlock(\"ipBlock\", ReservedIpBlockArgs.builder()        \n            .projectId(projectId)\n            .type(type)\n            .quantity(quantity)\n            .metro(metro)\n            .build());\n\n        ctx.export(\"ipBlockId\", ipBlock.id());\n        ctx.export(\"ipBlockSubent\", ipBlock.cidrNotation());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  metro:\n    type: string\n    default: FR\n  type:\n    type: string\n    default: public_ipv4\n  quantity:\n    type: integer\n    default: 1\nresources:\n  ipBlock:\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${projectId}\n      type: public_ipv4\n      quantity: ${quantity}\n      metro: ${metro}\noutputs:\n  ipBlockId: ${ipBlock.id}\n  ipBlockSubent: ${ipBlock.cidrNotation}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing IP reservation ID:\n\n```sh\n$ pulumi import equinix:metal/reservedIpBlock:ReservedIpBlock equinix_metal_reserved_ip_block {existing_ip_reservation_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide\n"
                },
                "gateway": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nmetro).\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are public.\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n"
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "projectId",
                "public",
                "quantity"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/facility:Facility"
                        }
                    ],
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n",
                    "willReplaceOnChanges": true
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/ipBlockType:IpBlockType"
                        }
                    ],
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                    "willReplaceOnChanges": true
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                    "willReplaceOnChanges": true
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReservedIpBlock resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Arbitrary description.\n"
                    },
                    "facility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ],
                        "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`. Use metro instead; read the facility to metro migration guide\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nmetro).\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                        "willReplaceOnChanges": true
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The metal project ID where to allocate the address block.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are public.\n"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/ipBlockType:IpBlockType"
                            }
                        ],
                        "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForState": {
                        "type": "string",
                        "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/spotMarketRequest:SpotMarketRequest": {
            "description": "Provides an Equinix Metal Spot Market Request resource to allow you to\nmanage spot market requests on your account. For more detail on Spot Market,\nsee [this article in Equinix Metal documentation](https://metal.equinix.com/developers/docs/deploy/spot-market/).\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst metro = config.get(\"metro\") || \"FR\";\nconst request = new equinix.metal.SpotMarketRequest(\"request\", {\n    projectId: projectId,\n    metro: metro,\n    maxBidPrice: 0.75,\n    devicesMin: 1,\n    devicesMax: 1,\n    instanceParameters: {\n        hostname: \"testspot\",\n        billingCycle: \"hourly\",\n        operatingSystem: \"ubuntu_20_04\",\n        plan: \"c3.small.x86\",\n    },\n});\nexport const requestId = request.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"FR\"\nrequest = equinix.metal.SpotMarketRequest(\"request\",\n    project_id=project_id,\n    metro=metro,\n    max_bid_price=0.75,\n    devices_min=1,\n    devices_max=1,\n    instance_parameters=equinix.metal.SpotMarketRequestInstanceParametersArgs(\n        hostname=\"testspot\",\n        billing_cycle=\"hourly\",\n        operating_system=\"ubuntu_20_04\",\n        plan=\"c3.small.x86\",\n    ))\npulumi.export(\"requestId\", request.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tmetro := \"FR\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\trequest, err := metal.NewSpotMarketRequest(ctx, \"request\", \u0026metal.SpotMarketRequestArgs{\n\t\t\tProjectId:   pulumi.String(projectId),\n\t\t\tMetro:       pulumi.String(metro),\n\t\t\tMaxBidPrice: pulumi.Float64(0.75),\n\t\t\tDevicesMin:  pulumi.Int(1),\n\t\t\tDevicesMax:  pulumi.Int(1),\n\t\t\tInstanceParameters: \u0026metal.SpotMarketRequestInstanceParametersArgs{\n\t\t\t\tHostname:        pulumi.String(\"testspot\"),\n\t\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"requestId\", request.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var metro = config.Get(\"metro\") ?? \"FR\";\n    var request = new Equinix.Metal.SpotMarketRequest(\"request\", new()\n    {\n        ProjectId = projectId,\n        Metro = metro,\n        MaxBidPrice = 0.75,\n        DevicesMin = 1,\n        DevicesMax = 1,\n        InstanceParameters = new Equinix.Metal.Inputs.SpotMarketRequestInstanceParametersArgs\n        {\n            Hostname = \"testspot\",\n            BillingCycle = \"hourly\",\n            OperatingSystem = \"ubuntu_20_04\",\n            Plan = \"c3.small.x86\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"requestId\"] = request.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.SpotMarketRequest;\nimport com.equinix.pulumi.metal.SpotMarketRequestArgs;\nimport com.equinix.pulumi.metal.inputs.SpotMarketRequestInstanceParametersArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var metro = config.get(\"metro\").orElse(\"FR\");\n        var request = new SpotMarketRequest(\"request\", SpotMarketRequestArgs.builder()        \n            .projectId(projectId)\n            .metro(metro)\n            .maxBidPrice(0.75)\n            .devicesMin(1)\n            .devicesMax(1)\n            .instanceParameters(SpotMarketRequestInstanceParametersArgs.builder()\n                .hostname(\"testspot\")\n                .billingCycle(\"hourly\")\n                .operatingSystem(\"ubuntu_20_04\")\n                .plan(\"c3.small.x86\")\n                .build())\n            .build());\n\n        ctx.export(\"requestId\", request.id());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  metro:\n    type: string\n    default: FR\nresources:\n  request:\n    type: equinix:metal:SpotMarketRequest\n    properties:\n      projectId: ${projectId}\n      metro: ${metro}\n      maxBidPrice: 0.75\n      devicesMin: 1\n      devicesMax: 1\n      instanceParameters:\n        hostname: testspot\n        billingCycle: hourly\n        operatingSystem: ubuntu_20_04\n        plan: c3.small.x86\noutputs:\n  requestId: ${request.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing spot market request ID:\n\n```sh\n$ pulumi import equinix:metal/spotMarketRequest:SpotMarketRequest equinix_metal_spot_market_request {existing_spot_market_request_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n"
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created. Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termination_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n"
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n"
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n"
                }
            },
            "required": [
                "devicesMax",
                "devicesMin",
                "facilities",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "inputProperties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created. Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                    "willReplaceOnChanges": true
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termination_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n",
                    "willReplaceOnChanges": true
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "devicesMax",
                "devicesMin",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpotMarketRequest resources.\n",
                "properties": {
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Facility IDs where devices should be created. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                        "willReplaceOnChanges": true
                    },
                    "instanceParameters": {
                        "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                        "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termination_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDevices": {
                        "type": "boolean",
                        "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/sshKey:SshKey": {
            "description": "Provides a resource to manage User SSH keys on your Equinix Metal user account. If you create a new device in a project, all the keys of the project's collaborators will be injected to the device.\n\nThe link between User SSH key and device is implicit. If you want to make sure that a key will be copied to a device, you must ensure that the device resource `depends_on` the key resource.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as fs from \"fs\";\n\nconst sshKey = new equinix.metal.SshKey(\"sshKey\", {\n    name: \"johnKent\",\n    publicKey: fs.readFileSync(\"/Users/John/.ssh/metal_rsa.pub\"),\n});\nexport const sshKeyId = sshKey.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nssh_key = equinix.metal.SshKey(\"sshKey\",\n    name=\"johnKent\",\n    public_key=(lambda path: open(path).read())(\"/Users/John/.ssh/metal_rsa.pub\"))\npulumi.export(\"sshKeyId\", ssh_key.id)\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsshKey, err := metal.NewSshKey(ctx, \"sshKey\", \u0026metal.SshKeyArgs{\n\t\t\tName:      pulumi.String(\"johnKent\"),\n\t\t\tPublicKey: readFileOrPanic(\"/Users/John/.ssh/metal_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sshKeyId\", sshKey.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshKey = new Equinix.Metal.SshKey(\"sshKey\", new()\n    {\n        Name = \"johnKent\",\n        PublicKey = File.ReadAllText(\"/Users/John/.ssh/metal_rsa.pub\"),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sshKeyId\"] = sshKey.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.SshKey;\nimport com.equinix.pulumi.metal.SshKeyArgs;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        String content = null;\n        try {\n            content = Files.readString(Paths.get(\"/Users/John/.ssh/metal_rsa.pub\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        var sshKey = new SshKey(\"sshKey\", SshKeyArgs.builder()        \n            .name(\"johnKent\")\n            .publicKey(content)\n            .build());\n\n        ctx.export(\"sshKeyId\", sshKey.id());\n    }\n}\n```\n```yaml\nresources:\n  sshKey:\n    type: equinix:metal:SshKey\n    properties:\n      name: johnKent\n      publicKey:\n        fn::readFile: /Users/John/.ssh/metal_rsa.pub\noutputs:\n  sshKeyId: ${sshKey.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing SSH Key ID:\n\n```sh\n$ pulumi import equinix:metal/sshKey:SshKey equinix_metal_ssh_key {existing_sshkey_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/userApiKey:UserApiKey": {
            "description": "Use this resource to create Metal User API Key resources in Equinix Metal. Each API key contains a\ntoken which can be used for authentication in Equinix Metal HTTP API (in HTTP request header\n`X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst description = config.get(\"description\") || \"An user level API Key\";\nconst readOnly = config.getBoolean(\"readOnly\") || false;\nconst apiKey = new equinix.metal.UserApiKey(\"apiKey\", {\n    description: description,\n    readOnly: readOnly,\n});\nexport const apiKeyToken = apiKey.token;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndescription = config.get(\"description\")\nif description is None:\n    description = \"An user level API Key\"\nread_only = config.get_bool(\"readOnly\")\nif read_only is None:\n    read_only = False\napi_key = equinix.metal.UserApiKey(\"apiKey\",\n    description=description,\n    read_only=read_only)\npulumi.export(\"apiKeyToken\", api_key.token)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdescription := \"An user level API Key\"\n\t\tif param := cfg.Get(\"description\"); param != \"\" {\n\t\t\tdescription = param\n\t\t}\n\t\treadOnly := false\n\t\tif param := cfg.GetBool(\"readOnly\"); param {\n\t\t\treadOnly = param\n\t\t}\n\t\tapiKey, err := metal.NewUserApiKey(ctx, \"apiKey\", \u0026metal.UserApiKeyArgs{\n\t\t\tDescription: pulumi.String(description),\n\t\t\tReadOnly:    pulumi.Bool(readOnly),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiKeyToken\", apiKey.Token)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var description = config.Get(\"description\") ?? \"An user level API Key\";\n    var readOnly = config.GetBoolean(\"readOnly\") ?? false;\n    var apiKey = new Equinix.Metal.UserApiKey(\"apiKey\", new()\n    {\n        Description = description,\n        ReadOnly = readOnly,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiKeyToken\"] = apiKey.Token,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.UserApiKey;\nimport com.equinix.pulumi.metal.UserApiKeyArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var description = config.get(\"description\").orElse(\"An user level API Key\");\n        final var readOnly = config.getBoolean(\"readOnly\").orElse(false);\n        var apiKey = new UserApiKey(\"apiKey\", UserApiKeyArgs.builder()        \n            .description(description)\n            .readOnly(readOnly)\n            .build());\n\n        ctx.export(\"apiKeyToken\", apiKey.token());\n    }\n}\n```\n```yaml\nconfig:\n  description:\n    type: string\n    default: An user level API Key\n  readOnly:\n    type: boolean\n    default: false\nresources:\n  apiKey:\n    type: equinix:metal:UserApiKey\n    properties:\n      description: ${description}\n      readOnly: ${readOnly}\noutputs:\n  apiKeyToken: ${apiKey.token}\n```\n{{% /example %}}\n\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients.\n",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "UUID of the owner of the API key.\n"
                }
            },
            "required": [
                "description",
                "readOnly",
                "token",
                "userId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients.\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "UUID of the owner of the API key.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/virtualCircuit:VirtualCircuit": {
            "description": "Use this resource to associate VLAN with a Dedicated Port from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/#associating-a-vlan-with-a-dedicated-port).\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst connectionId = config.require(\"connectionId\");\nconst vlanId = config.require(\"vlanId\");\nconst portId = equinix.metal.getInterconnection({\n    connectionId: connectionId,\n}).then(invoke =\u003e invoke.ports?.[0]?.id);\nconst vc = new equinix.metal.VirtualCircuit(\"vc\", {\n    connectionId: connectionId,\n    projectId: projectId,\n    portId: portId,\n    vlanId: vlanId,\n    nniVlan: 1056,\n});\nexport const vcStatus = vc.status;\nexport const vcVnid = vc.vnid;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nconnection_id = config.require(\"connectionId\")\nvlan_id = config.require(\"vlanId\")\nport_id = equinix.metal.get_interconnection(connection_id=connection_id).ports[0].id\nvc = equinix.metal.VirtualCircuit(\"vc\",\n    connection_id=connection_id,\n    project_id=project_id,\n    port_id=port_id,\n    vlan_id=vlan_id,\n    nni_vlan=1056)\npulumi.export(\"vcStatus\", vc.status)\npulumi.export(\"vcVnid\", vc.vnid)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tconnectionId := cfg.Require(\"connectionId\")\n\t\tvlanId := cfg.Require(\"vlanId\")\n\t\tportId := metal.LookupInterconnection(ctx, \u0026metal.LookupInterconnectionArgs{\n\t\t\tConnectionId: connectionId,\n\t\t}, nil).Ports[0].Id\n\t\tvc, err := metal.NewVirtualCircuit(ctx, \"vc\", \u0026metal.VirtualCircuitArgs{\n\t\t\tConnectionId: pulumi.String(connectionId),\n\t\t\tProjectId:    pulumi.String(projectId),\n\t\t\tPortId:       *pulumi.String(portId),\n\t\t\tVlanId:       pulumi.String(vlanId),\n\t\t\tNniVlan:      pulumi.Int(1056),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vcStatus\", vc.Status)\n\t\tctx.Export(\"vcVnid\", vc.Vnid)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var connectionId = config.Require(\"connectionId\");\n    var vlanId = config.Require(\"vlanId\");\n    var portId = Equinix.Metal.GetInterconnection.Invoke(new()\n    {\n        ConnectionId = connectionId,\n    }).Apply(invoke =\u003e invoke.Ports[0]?.Id);\n\n    var vc = new Equinix.Metal.VirtualCircuit(\"vc\", new()\n    {\n        ConnectionId = connectionId,\n        ProjectId = projectId,\n        PortId = portId,\n        VlanId = vlanId,\n        NniVlan = 1056,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vcStatus\"] = vc.Status,\n        [\"vcVnid\"] = vc.Vnid,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.inputs.GetInterconnectionArgs;\nimport com.equinix.pulumi.metal.MetalFunctions;\nimport com.equinix.pulumi.metal.VirtualCircuit;\nimport com.equinix.pulumi.metal.VirtualCircuitArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var connectionId = config.get(\"connectionId\").get();\n        final var vlanId = config.get(\"vlanId\").get();\n        final var portId = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()\n            .connectionId(connectionId)\n            .build()).applyValue(data -\u003e data.ports().get(0).id());\n\n        var vc = new VirtualCircuit(\"vc\", VirtualCircuitArgs.builder()        \n            .connectionId(connectionId)\n            .projectId(projectId)\n            .portId(portId)\n            .vlanId(vlanId)\n            .nniVlan(1056)\n            .build());\n\n        ctx.export(\"vcStatus\", vc.status());\n        ctx.export(\"vcVnid\", vc.vnid());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  connectionId:\n    type: string\n  vlanId:\n    type: string\nvariables:\n  portId:\n    fn::invoke:\n      function: equinix:metal:getInterconnection\n      arguments:\n        connectionId: ${connectionId}\n      return: ports[0].id\nresources:\n  vc:\n    type: equinix:metal:VirtualCircuit\n    properties:\n      connectionId: ${connectionId}\n      projectId: ${projectId}\n      portId: ${portId}\n      vlanId: ${vlanId}\n      nniVlan: 1056\noutputs:\n  vcStatus: ${vc.status}\n  vcVnid: ${vc.vnid}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing Virtual Circuit ID:\n\n```sh\n$ pulumi import equinix:metal/virtualCircuit:VirtualCircuit equinix_metal_virtual_circuit {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n"
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n",
                    "secret": true
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n"
                },
                "nniVnid": {
                    "type": "integer",
                    "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the virtal circuit.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n"
                },
                "vnid": {
                    "type": "integer",
                    "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n"
                }
            },
            "required": [
                "connectionId",
                "name",
                "nniVnid",
                "portId",
                "projectId",
                "speed",
                "status",
                "vnid"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n",
                    "secret": true
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n",
                    "willReplaceOnChanges": true
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                    "willReplaceOnChanges": true
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionId",
                "portId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualCircuit resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n",
                        "secret": true
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Virtual Circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer",
                        "description": "Equinix Metal network-to-network VLAN ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "nniVnid": {
                        "type": "integer",
                        "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the Project where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n"
                    },
                    "vnid": {
                        "type": "integer",
                        "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF to associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/vlan:Vlan": {
            "description": "Provides a resource to allow users to manage Virtual Networks in their projects.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst metro = config.get(\"metro\") || \"DA\";\nconst vxlan = config.requireNumber(\"vxlan\");\nconst vlan = new equinix.metal.Vlan(\"vlan\", {\n    description: \"VLAN in Dallas\",\n    projectId: projectId,\n    metro: metro,\n    vxlan: vxlan,\n});\nexport const vlanId = vlan.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"DA\"\nvxlan = config.require_int(\"vxlan\")\nvlan = equinix.metal.Vlan(\"vlan\",\n    description=\"VLAN in Dallas\",\n    project_id=project_id,\n    metro=metro,\n    vxlan=vxlan)\npulumi.export(\"vlanId\", vlan.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tmetro := \"DA\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tvxlan := cfg.RequireInt(\"vxlan\")\n\t\tvlan, err := metal.NewVlan(ctx, \"vlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in Dallas\"),\n\t\t\tProjectId:   pulumi.String(projectId),\n\t\t\tMetro:       pulumi.String(metro),\n\t\t\tVxlan:       pulumi.Int(vxlan),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vlanId\", vlan.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var metro = config.Get(\"metro\") ?? \"DA\";\n    var vxlan = config.RequireNumber(\"vxlan\");\n    var vlan = new Equinix.Metal.Vlan(\"vlan\", new()\n    {\n        Description = \"VLAN in Dallas\",\n        ProjectId = projectId,\n        Metro = metro,\n        Vxlan = vxlan,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vlanId\"] = vlan.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.Vlan;\nimport com.equinix.pulumi.metal.VlanArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var metro = config.get(\"metro\").orElse(\"DA\");\n        final var vxlan = Integer.parseInt(config.get(\"vxlan\").get());\n        var vlan = new Vlan(\"vlan\", VlanArgs.builder()        \n            .description(\"VLAN in Dallas\")\n            .projectId(projectId)\n            .metro(metro)\n            .vxlan(vxlan)\n            .build());\n\n        ctx.export(\"vlanId\", vlan.id());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  metro:\n    type: string\n    default: DA\n  vxlan:\n    type: integer\nresources:\n  vlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in Dallas\n      projectId: ${projectId}\n      metro: ${metro}\n      vxlan: ${vxlan}\noutputs:\n  vlanId: ${vlan.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing VLAN ID (UUID):\n\n```sh\n$ pulumi import equinix:metal/vlan:Vlan equinix_metal_vlan {existing_vlan_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro in which to create the VLAN\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n"
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n"
                }
            },
            "required": [
                "projectId",
                "vxlan"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n",
                    "willReplaceOnChanges": true
                },
                "facility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/facility:Facility"
                        }
                    ],
                    "description": "Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide\n",
                    "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro in which to create the VLAN\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n",
                    "willReplaceOnChanges": true
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string.\n",
                        "willReplaceOnChanges": true
                    },
                    "facility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ],
                        "description": "Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro in which to create the VLAN\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of parent project.\n",
                        "willReplaceOnChanges": true
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "VLAN ID, must be unique in metro.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/vrf:Vrf": {
            "description": "Use this resource to manage a VRF.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst metro = config.get(\"metro\") || \"DA\";\nconst vrf = new equinix.metal.Vrf(\"vrf\", {\n    description: \"VRF with ASN 65000 and a pool of address space\",\n    name: \"example-vrf\",\n    metro: metro,\n    localAsn: 65000,\n    ipRanges: [\n        \"192.168.100.0/25\",\n        \"192.168.200.0/25\",\n    ],\n    projectId: projectId,\n});\nexport const vrfId = vrf.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"DA\"\nvrf = equinix.metal.Vrf(\"vrf\",\n    description=\"VRF with ASN 65000 and a pool of address space\",\n    name=\"example-vrf\",\n    metro=metro,\n    local_asn=65000,\n    ip_ranges=[\n        \"192.168.100.0/25\",\n        \"192.168.200.0/25\",\n    ],\n    project_id=project_id)\npulumi.export(\"vrfId\", vrf.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tmetro := \"DA\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tvrf, err := metal.NewVrf(ctx, \"vrf\", \u0026metal.VrfArgs{\n\t\t\tDescription: pulumi.String(\"VRF with ASN 65000 and a pool of address space\"),\n\t\t\tName:        pulumi.String(\"example-vrf\"),\n\t\t\tMetro:       pulumi.String(metro),\n\t\t\tLocalAsn:    pulumi.Int(65000),\n\t\t\tIpRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.100.0/25\"),\n\t\t\t\tpulumi.String(\"192.168.200.0/25\"),\n\t\t\t},\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vrfId\", vrf.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var metro = config.Get(\"metro\") ?? \"DA\";\n    var vrf = new Equinix.Metal.Vrf(\"vrf\", new()\n    {\n        Description = \"VRF with ASN 65000 and a pool of address space\",\n        Name = \"example-vrf\",\n        Metro = metro,\n        LocalAsn = 65000,\n        IpRanges = new[]\n        {\n            \"192.168.100.0/25\",\n            \"192.168.200.0/25\",\n        },\n        ProjectId = projectId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vrfId\"] = vrf.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.equinix.pulumi.metal.Vrf;\nimport com.equinix.pulumi.metal.VrfArgs;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\").get();\n        final var metro = config.get(\"metro\").orElse(\"DA\");\n        var vrf = new Vrf(\"vrf\", VrfArgs.builder()        \n            .description(\"VRF with ASN 65000 and a pool of address space\")\n            .name(\"example-vrf\")\n            .metro(metro)\n            .localAsn(65000)\n            .ipRanges(            \n                \"192.168.100.0/25\",\n                \"192.168.200.0/25\")\n            .projectId(projectId)\n            .build());\n\n        ctx.export(\"vrfId\", vrf.id());\n    }\n}\n```\n```yaml\nconfig:\n  projectId:\n    type: string\n  metro:\n    type: string\n    default: DA\nresources:\n  vrf:\n    type: equinix:metal:Vrf\n    properties:\n      description: VRF with ASN 65000 and a pool of address space\n      name: example-vrf\n      metro: ${metro}\n      localAsn: \"65000\"\n      ipRanges:\n      - 192.168.100.0/25\n      - 192.168.200.0/25\n      projectId: ${projectId}\noutputs:\n  vrfId: ${vrf.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing VRF ID:\n\n```sh\n$ pulumi import equinix:metal/vrf:Vrf equinix_metal_vrf {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "required": [
                "localAsn",
                "metro",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "requiredInputs": [
                "metro",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vrf resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/aclTemplate:AclTemplate": {
            "description": "Resource `equinix.networkedge.AclTemplate` allows creation and management of\nEquinix Network Edge device Access Control List templates.\n\nDevice ACL templates give possibility to define set of rules will allowed inbound\ntraffic. Templates can be assigned to the network devices.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst aclTemplate = new equinix.networkedge.AclTemplate(\"aclTemplate\", {\n    name: \"test\",\n    description: \"Test ACL template\",\n    inboundRules: [\n        {\n            subnet: \"1.1.1.1/32\",\n            protocol: \"IP\",\n            srcPort: \"any\",\n            dstPort: \"any\",\n            description: \"inbound rule description\",\n        },\n        {\n            subnet: \"2.2.2.2/28\",\n            protocol: \"TCP\",\n            srcPort: \"any\",\n            dstPort: \"any\",\n            description: \"inbound rule description\",\n        },\n    ],\n});\nexport const templateId = aclTemplate.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nacl_template = equinix.networkedge.AclTemplate(\"aclTemplate\",\n    name=\"test\",\n    description=\"Test ACL template\",\n    inbound_rules=[\n        equinix.networkedge.AclTemplateInboundRuleArgs(\n            subnet=\"1.1.1.1/32\",\n            protocol=\"IP\",\n            src_port=\"any\",\n            dst_port=\"any\",\n            description=\"inbound rule description\",\n        ),\n        equinix.networkedge.AclTemplateInboundRuleArgs(\n            subnet=\"2.2.2.2/28\",\n            protocol=\"TCP\",\n            src_port=\"any\",\n            dst_port=\"any\",\n            description=\"inbound rule description\",\n        ),\n    ])\npulumi.export(\"templateId\", acl_template.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taclTemplate, err := networkedge.NewAclTemplate(ctx, \"aclTemplate\", \u0026networkedge.AclTemplateArgs{\n\t\t\tName:        pulumi.String(\"test\"),\n\t\t\tDescription: pulumi.String(\"Test ACL template\"),\n\t\t\tInboundRules: networkedge.AclTemplateInboundRuleArray{\n\t\t\t\t\u0026networkedge.AclTemplateInboundRuleArgs{\n\t\t\t\t\tSubnet:      pulumi.String(\"1.1.1.1/32\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"IP\"),\n\t\t\t\t\tSrcPort:     pulumi.String(\"any\"),\n\t\t\t\t\tDstPort:     pulumi.String(\"any\"),\n\t\t\t\t\tDescription: pulumi.String(\"inbound rule description\"),\n\t\t\t\t},\n\t\t\t\t\u0026networkedge.AclTemplateInboundRuleArgs{\n\t\t\t\t\tSubnet:      pulumi.String(\"2.2.2.2/28\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"TCP\"),\n\t\t\t\t\tSrcPort:     pulumi.String(\"any\"),\n\t\t\t\t\tDstPort:     pulumi.String(\"any\"),\n\t\t\t\t\tDescription: pulumi.String(\"inbound rule description\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"templateId\", aclTemplate.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aclTemplate = new Equinix.NetworkEdge.AclTemplate(\"aclTemplate\", new()\n    {\n        Name = \"test\",\n        Description = \"Test ACL template\",\n        InboundRules = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.AclTemplateInboundRuleArgs\n            {\n                Subnet = \"1.1.1.1/32\",\n                Protocol = \"IP\",\n                SrcPort = \"any\",\n                DstPort = \"any\",\n                Description = \"inbound rule description\",\n            },\n            new Equinix.NetworkEdge.Inputs.AclTemplateInboundRuleArgs\n            {\n                Subnet = \"2.2.2.2/28\",\n                Protocol = \"TCP\",\n                SrcPort = \"any\",\n                DstPort = \"any\",\n                Description = \"inbound rule description\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"templateId\"] = aclTemplate.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.AclTemplate;\nimport com.equinix.pulumi.networkedge.AclTemplateArgs;\nimport com.equinix.pulumi.networkedge.inputs.AclTemplateInboundRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aclTemplate = new AclTemplate(\"aclTemplate\", AclTemplateArgs.builder()        \n            .name(\"test\")\n            .description(\"Test ACL template\")\n            .inboundRules(            \n                AclTemplateInboundRuleArgs.builder()\n                    .subnet(\"1.1.1.1/32\")\n                    .protocol(\"IP\")\n                    .srcPort(\"any\")\n                    .dstPort(\"any\")\n                    .description(\"inbound rule description\")\n                    .build(),\n                AclTemplateInboundRuleArgs.builder()\n                    .subnet(\"2.2.2.2/28\")\n                    .protocol(\"TCP\")\n                    .srcPort(\"any\")\n                    .dstPort(\"any\")\n                    .description(\"inbound rule description\")\n                    .build())\n            .build());\n\n        ctx.export(\"templateId\", aclTemplate.id());\n    }\n}\n```\n```yaml\nresources:\n  aclTemplate:\n    type: equinix:networkedge:AclTemplate\n    properties:\n      name: test\n      description: Test ACL template\n      inboundRules:\n      - subnet: 1.1.1.1/32\n        protocol: IP\n        srcPort: any\n        dstPort: any\n        description: inbound rule description\n      - subnet: 2.2.2.2/28\n        protocol: TCP\n        srcPort: any\n        dstPort: any\n        description: inbound rule description\noutputs:\n  templateId: ${aclTemplate.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/aclTemplate:AclTemplate example {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n"
                },
                "deviceAclStatus": {
                    "type": "string",
                    "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                },
                "deviceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail"
                    },
                    "description": "List of the devices where the ACL template is applied.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                    "deprecationMessage": "Refer to device details get device information"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n\nThe `inbound_rule` block has below fields:\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the acl template is scoped to.If you\nleave it out, the ACL template will be created under the default project id of your organization.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n"
                }
            },
            "required": [
                "deviceAclStatus",
                "deviceDetails",
                "deviceId",
                "inboundRules",
                "name",
                "projectId",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n\nThe `inbound_rule` block has below fields:\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the acl template is scoped to.If you\nleave it out, the ACL template will be created under the default project id of your organization.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "inboundRules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclTemplate resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Inbound rule description, up to 200 characters.\n"
                    },
                    "deviceAclStatus": {
                        "type": "string",
                        "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                    },
                    "deviceDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail"
                        },
                        "description": "List of the devices where the ACL template is applied.\n"
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                        "deprecationMessage": "Refer to device details get device information"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                        },
                        "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n\nThe `inbound_rule` block has below fields:\n"
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "ACL template location metro code.\n",
                        "deprecationMessage": "Metro Code is no longer required"
                    },
                    "name": {
                        "type": "string",
                        "description": "ACL template name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique Identifier for the project resource where the acl template is scoped to.If you\nleave it out, the ACL template will be created under the default project id of your organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device uuid.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/bgp:Bgp": {
            "description": "Resource `equinix.networkedge.Bgp` allows creation and management of Equinix Network\nEdge BGP peering configurations.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst bgp = new equinix.networkedge.Bgp(\"bgp\", {\n    connectionId: \"54014acf-9730-4b55-a791-459283d05fb1\",\n    localIpAddress: \"10.1.1.1/30\",\n    localAsn: 12345,\n    remoteIpAddress: \"10.1.1.2\",\n    remoteAsn: 66123,\n    authenticationKey: \"secret\",\n});\nexport const state = bgp.state;\nexport const provisioningStatus = bgp.provisioningStatus;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nbgp = equinix.networkedge.Bgp(\"bgp\",\n    connection_id=\"54014acf-9730-4b55-a791-459283d05fb1\",\n    local_ip_address=\"10.1.1.1/30\",\n    local_asn=12345,\n    remote_ip_address=\"10.1.1.2\",\n    remote_asn=66123,\n    authentication_key=\"secret\")\npulumi.export(\"state\", bgp.state)\npulumi.export(\"provisioningStatus\", bgp.provisioning_status)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbgp, err := networkedge.NewBgp(ctx, \"bgp\", \u0026networkedge.BgpArgs{\n\t\t\tConnectionId:      pulumi.String(\"54014acf-9730-4b55-a791-459283d05fb1\"),\n\t\t\tLocalIpAddress:    pulumi.String(\"10.1.1.1/30\"),\n\t\t\tLocalAsn:          pulumi.Int(12345),\n\t\t\tRemoteIpAddress:   pulumi.String(\"10.1.1.2\"),\n\t\t\tRemoteAsn:         pulumi.Int(66123),\n\t\t\tAuthenticationKey: pulumi.String(\"secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"state\", bgp.State)\n\t\tctx.Export(\"provisioningStatus\", bgp.ProvisioningStatus)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bgp = new Equinix.NetworkEdge.Bgp(\"bgp\", new()\n    {\n        ConnectionId = \"54014acf-9730-4b55-a791-459283d05fb1\",\n        LocalIpAddress = \"10.1.1.1/30\",\n        LocalAsn = 12345,\n        RemoteIpAddress = \"10.1.1.2\",\n        RemoteAsn = 66123,\n        AuthenticationKey = \"secret\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"state\"] = bgp.State,\n        [\"provisioningStatus\"] = bgp.ProvisioningStatus,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.Bgp;\nimport com.equinix.pulumi.networkedge.BgpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bgp = new Bgp(\"bgp\", BgpArgs.builder()        \n            .connectionId(\"54014acf-9730-4b55-a791-459283d05fb1\")\n            .localIpAddress(\"10.1.1.1/30\")\n            .localAsn(12345)\n            .remoteIpAddress(\"10.1.1.2\")\n            .remoteAsn(66123)\n            .authenticationKey(\"secret\")\n            .build());\n\n        ctx.export(\"state\", bgp.state());\n        ctx.export(\"provisioningStatus\", bgp.provisioningStatus());\n    }\n}\n```\n```yaml\nresources:\n  bgp:\n    type: equinix:networkedge:Bgp\n    properties:\n      connectionId: 54014acf-9730-4b55-a791-459283d05fb1\n      localIpAddress: 10.1.1.1/30\n      localAsn: 12345\n      remoteIpAddress: 10.1.1.2\n      remoteAsn: 66123\n      authenticationKey: secret\noutputs:\n  state: ${bgp.state}\n  provisioningStatus: ${bgp.provisioningStatus}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/bgp:Bgp example {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n",
                    "secret": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "provisioningStatus": {
                    "type": "string",
                    "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                },
                "state": {
                    "type": "string",
                    "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "BGP peering configuration unique identifier.\n"
                }
            },
            "required": [
                "connectionId",
                "deviceId",
                "localAsn",
                "localIpAddress",
                "provisioningStatus",
                "remoteAsn",
                "remoteIpAddress",
                "state",
                "uuid"
            ],
            "inputProperties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n",
                    "secret": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                    "willReplaceOnChanges": true
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "localAsn",
                "localIpAddress",
                "remoteAsn",
                "remoteIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bgp resources.\n",
                "properties": {
                    "authenticationKey": {
                        "type": "string",
                        "description": "shared key used for BGP peer authentication.\n",
                        "secret": true
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "Local ASN number.\n"
                    },
                    "localIpAddress": {
                        "type": "string",
                        "description": "IP address in CIDR format of a local device.\n"
                    },
                    "provisioningStatus": {
                        "type": "string",
                        "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                    },
                    "remoteAsn": {
                        "type": "integer",
                        "description": "Remote ASN number.\n"
                    },
                    "remoteIpAddress": {
                        "type": "string",
                        "description": "IP address of remote peer.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "BGP peering configuration unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/device:Device": {
            "description": "Resource `equinix.networkedge.Device` allows creation and management of Equinix Network Edge virtual\nnetwork devices.\n\nNetwork Edge virtual network devices can be created in two modes:\n\n* **managed** - (default) Where Equinix manages connectivity and services in the device and\ncustomer gets limited access to the device.\n* **self-configured** - Where customer provisions and manages own services in the device with less\nrestricted access. Some device types are offered only in this mode.\n\nIn addition to management modes, there are two software license modes available:\n\n* **subscription** - Where Equinix provides software license, including end-to-end support, and\nbills for the service respectively.\n* **BYOL** - [bring your own license] Where customer brings his own, already procured device\nsoftware license. There are no charges associated with such license. It is the only licensing mode\nfor `self-configured` devices.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst accountName = config.require(\"accountName\");\nconst licenseToken = config.require(\"licenseToken\");\nconst sshUserName = config.require(\"sshUserName\");\nconst sshKeyName = config.require(\"sshKeyName\");\nconst aclTemplateId = config.require(\"aclTemplateId\");\nconst metro = config.get(\"metro\") || \"SV\";\nconst devicePackageCode = config.get(\"devicePackageCode\") || \"network-essentials\";\nconst deviceVersion = config.get(\"deviceVersion\") || \"17.06.01a\";\nconst sizeInCores = config.getNumber(\"sizeInCores\") || 2;\nconst termLength = config.getNumber(\"termLength\") || 6;\nconst additionalBandwidth = config.getNumber(\"additionalBandwidth\") || 5;\nconst accountNum = equinix.networkedge.getAccount({\n    name: accountName,\n    metroCode: metro,\n}).then(invoke =\u003e invoke.number);\nconst c8KRouter = new equinix.networkedge.Device(\"c8kRouter\", {\n    name: \"catalystRouter\",\n    metroCode: metro,\n    typeCode: \"C8000V\",\n    selfManaged: true,\n    byol: true,\n    packageCode: devicePackageCode,\n    notifications: [\"example@equinix.com\"],\n    hostname: \"C8KV\",\n    accountNumber: accountNum,\n    version: deviceVersion,\n    coreCount: sizeInCores,\n    termLength: termLength,\n    licenseToken: licenseToken,\n    additionalBandwidth: additionalBandwidth,\n    sshKey: {\n        username: sshUserName,\n        keyName: sshKeyName,\n    },\n    aclTemplateId: aclTemplateId,\n});\nexport const routerId = c8KRouter.id;\nexport const provisionStatus = c8KRouter.status;\nexport const licenseStatus = c8KRouter.licenseStatus;\nexport const sshIpAddress = c8KRouter.sshIpAddress;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\naccount_name = config.require(\"accountName\")\nlicense_token = config.require(\"licenseToken\")\nssh_user_name = config.require(\"sshUserName\")\nssh_key_name = config.require(\"sshKeyName\")\nacl_template_id = config.require(\"aclTemplateId\")\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"SV\"\ndevice_package_code = config.get(\"devicePackageCode\")\nif device_package_code is None:\n    device_package_code = \"network-essentials\"\ndevice_version = config.get(\"deviceVersion\")\nif device_version is None:\n    device_version = \"17.06.01a\"\nsize_in_cores = config.get_int(\"sizeInCores\")\nif size_in_cores is None:\n    size_in_cores = 2\nterm_length = config.get_int(\"termLength\")\nif term_length is None:\n    term_length = 6\nadditional_bandwidth = config.get_int(\"additionalBandwidth\")\nif additional_bandwidth is None:\n    additional_bandwidth = 5\naccount_num = equinix.networkedge.get_account(name=account_name,\n    metro_code=metro).number\nc8_k_router = equinix.networkedge.Device(\"c8kRouter\",\n    name=\"catalystRouter\",\n    metro_code=metro,\n    type_code=\"C8000V\",\n    self_managed=True,\n    byol=True,\n    package_code=device_package_code,\n    notifications=[\"example@equinix.com\"],\n    hostname=\"C8KV\",\n    account_number=account_num,\n    version=device_version,\n    core_count=size_in_cores,\n    term_length=term_length,\n    license_token=license_token,\n    additional_bandwidth=additional_bandwidth,\n    ssh_key=equinix.networkedge.DeviceSshKeyArgs(\n        username=ssh_user_name,\n        key_name=ssh_key_name,\n    ),\n    acl_template_id=acl_template_id)\npulumi.export(\"routerId\", c8_k_router.id)\npulumi.export(\"provisionStatus\", c8_k_router.status)\npulumi.export(\"licenseStatus\", c8_k_router.license_status)\npulumi.export(\"sshIpAddress\", c8_k_router.ssh_ip_address)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\taccountName := cfg.Require(\"accountName\")\n\t\tlicenseToken := cfg.Require(\"licenseToken\")\n\t\tsshUserName := cfg.Require(\"sshUserName\")\n\t\tsshKeyName := cfg.Require(\"sshKeyName\")\n\t\taclTemplateId := cfg.Require(\"aclTemplateId\")\n\t\tmetro := \"SV\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tdevicePackageCode := \"network-essentials\"\n\t\tif param := cfg.Get(\"devicePackageCode\"); param != \"\" {\n\t\t\tdevicePackageCode = param\n\t\t}\n\t\tdeviceVersion := \"17.06.01a\"\n\t\tif param := cfg.Get(\"deviceVersion\"); param != \"\" {\n\t\t\tdeviceVersion = param\n\t\t}\n\t\tsizeInCores := 2\n\t\tif param := cfg.GetInt(\"sizeInCores\"); param != 0 {\n\t\t\tsizeInCores = param\n\t\t}\n\t\ttermLength := 6\n\t\tif param := cfg.GetInt(\"termLength\"); param != 0 {\n\t\t\ttermLength = param\n\t\t}\n\t\tadditionalBandwidth := 5\n\t\tif param := cfg.GetInt(\"additionalBandwidth\"); param != 0 {\n\t\t\tadditionalBandwidth = param\n\t\t}\n\t\taccountNum := networkedge.GetAccount(ctx, \u0026networkedge.GetAccountArgs{\n\t\t\tName:      pulumi.StringRef(accountName),\n\t\t\tMetroCode: metro,\n\t\t}, nil).Number\n\t\tc8KRouter, err := networkedge.NewDevice(ctx, \"c8kRouter\", \u0026networkedge.DeviceArgs{\n\t\t\tName:        pulumi.String(\"catalystRouter\"),\n\t\t\tMetroCode:   pulumi.String(metro),\n\t\t\tTypeCode:    pulumi.String(\"C8000V\"),\n\t\t\tSelfManaged: pulumi.Bool(true),\n\t\t\tByol:        pulumi.Bool(true),\n\t\t\tPackageCode: pulumi.String(devicePackageCode),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"example@equinix.com\"),\n\t\t\t},\n\t\t\tHostname:            pulumi.String(\"C8KV\"),\n\t\t\tAccountNumber:       *pulumi.String(accountNum),\n\t\t\tVersion:             pulumi.Any(deviceVersion),\n\t\t\tCoreCount:           pulumi.Int(sizeInCores),\n\t\t\tTermLength:          pulumi.Int(termLength),\n\t\t\tLicenseToken:        pulumi.String(licenseToken),\n\t\t\tAdditionalBandwidth: pulumi.Int(additionalBandwidth),\n\t\t\tSshKey: \u0026networkedge.DeviceSshKeyArgs{\n\t\t\t\tUsername: pulumi.String(sshUserName),\n\t\t\t\tKeyName:  pulumi.String(sshKeyName),\n\t\t\t},\n\t\t\tAclTemplateId: pulumi.String(aclTemplateId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"routerId\", c8KRouter.ID())\n\t\tctx.Export(\"provisionStatus\", c8KRouter.Status)\n\t\tctx.Export(\"licenseStatus\", c8KRouter.LicenseStatus)\n\t\tctx.Export(\"sshIpAddress\", c8KRouter.SshIpAddress)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var accountName = config.Require(\"accountName\");\n    var licenseToken = config.Require(\"licenseToken\");\n    var sshUserName = config.Require(\"sshUserName\");\n    var sshKeyName = config.Require(\"sshKeyName\");\n    var aclTemplateId = config.Require(\"aclTemplateId\");\n    var metro = config.Get(\"metro\") ?? \"SV\";\n    var devicePackageCode = config.Get(\"devicePackageCode\") ?? \"network-essentials\";\n    var deviceVersion = config.Get(\"deviceVersion\") ?? \"17.06.01a\";\n    var sizeInCores = config.GetNumber(\"sizeInCores\") ?? 2;\n    var termLength = config.GetNumber(\"termLength\") ?? 6;\n    var additionalBandwidth = config.GetNumber(\"additionalBandwidth\") ?? 5;\n    var accountNum = Equinix.NetworkEdge.GetAccount.Invoke(new()\n    {\n        Name = accountName,\n        MetroCode = metro,\n    }).Apply(invoke =\u003e invoke.Number);\n\n    var c8KRouter = new Equinix.NetworkEdge.Device(\"c8kRouter\", new()\n    {\n        Name = \"catalystRouter\",\n        MetroCode = metro,\n        TypeCode = \"C8000V\",\n        SelfManaged = true,\n        Byol = true,\n        PackageCode = devicePackageCode,\n        Notifications = new[]\n        {\n            \"example@equinix.com\",\n        },\n        Hostname = \"C8KV\",\n        AccountNumber = accountNum,\n        Version = deviceVersion,\n        CoreCount = sizeInCores,\n        TermLength = termLength,\n        LicenseToken = licenseToken,\n        AdditionalBandwidth = additionalBandwidth,\n        SshKey = new Equinix.NetworkEdge.Inputs.DeviceSshKeyArgs\n        {\n            Username = sshUserName,\n            KeyName = sshKeyName,\n        },\n        AclTemplateId = aclTemplateId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"routerId\"] = c8KRouter.Id,\n        [\"provisionStatus\"] = c8KRouter.Status,\n        [\"licenseStatus\"] = c8KRouter.LicenseStatus,\n        [\"sshIpAddress\"] = c8KRouter.SshIpAddress,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.Device;\nimport com.equinix.pulumi.networkedge.DeviceArgs;\nimport com.equinix.pulumi.networkedge.inputs.DeviceSshKeyArgs;\nimport com.equinix.pulumi.networkedge.inputs.GetAccountArgs;\nimport com.equinix.pulumi.networkedge.NetworkedgeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var accountName = config.get(\"accountName\").get();\n        final var licenseToken = config.get(\"licenseToken\").get();\n        final var sshUserName = config.get(\"sshUserName\").get();\n        final var sshKeyName = config.get(\"sshKeyName\").get();\n        final var aclTemplateId = config.get(\"aclTemplateId\").get();\n        final var metro = config.get(\"metro\").orElse(\"SV\");\n        final var devicePackageCode = config.get(\"devicePackageCode\").orElse(\"network-essentials\");\n        final var deviceVersion = config.get(\"deviceVersion\").orElse(\"17.06.01a\");\n        final var sizeInCores = Integer.parseInt(config.get(\"sizeInCores\").orElse(\"2\"));\n        final var termLength = Integer.parseInt(config.get(\"termLength\").orElse(\"6\"));\n        final var additionalBandwidth = Integer.parseInt(config.get(\"additionalBandwidth\").orElse(\"5\"));\n        final var accountNum = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()\n            .name(accountName)\n            .metroCode(metro)\n            .build()).applyValue(account -\u003e account.number());\n\n        var c8KRouter = new Device(\"c8KRouter\", DeviceArgs.builder()        \n            .name(\"catalystRouter\")\n            .metroCode(metro)\n            .typeCode(\"C8000V\")\n            .selfManaged(true)\n            .byol(true)\n            .packageCode(devicePackageCode)\n            .notifications(\"example@equinix.com\")\n            .hostname(\"C8KV\")\n            .accountNumber(accountNum)\n            .version(deviceVersion)\n            .coreCount(sizeInCores)\n            .termLength(termLength)\n            .licenseToken(licenseToken)\n            .additionalBandwidth(additionalBandwidth)\n            .sshKey(DeviceSshKeyArgs.builder()\n                .username(sshUserName)\n                .keyName(sshKeyName)\n                .build())\n            .aclTemplateId(aclTemplateId)\n            .build());\n\n        ctx.export(\"routerId\", c8KRouter.id());\n        ctx.export(\"provisionStatus\", c8KRouter.status());\n        ctx.export(\"licenseStatus\", c8KRouter.licenseStatus());\n        ctx.export(\"sshIpAddress\", c8KRouter.sshIpAddress());\n    }\n}\n```\n```yaml\nconfig:\n  accountName:\n    type: string\n  licenseToken:\n    type: string\n  sshUserName:\n    type: string\n  sshKeyName:\n    type: string\n  aclTemplateId:\n    type: string\n  metro:\n    type: string\n    default: SV\n  devicePackageCode:\n    type: string\n    default: network-essentials\n  deviceVersion:\n    type: string\n    default: 17.06.01a\n  sizeInCores:\n    type: integer\n    default: 2\n  termLength:\n    type: integer\n    default: 6\n  additionalBandwidth:\n    type: integer\n    default: 5\nvariables:\n  accountNum:\n    fn::invoke:\n      function: equinix:networkedge:getAccount\n      arguments:\n        name: ${accountName}\n        metroCode: ${metro}\n      return: number\nresources:\n  c8kRouter:\n    type: equinix:networkedge:Device\n    properties:\n      name: catalystRouter\n      metroCode: ${metro}\n      typeCode: C8000V\n      selfManaged: true\n      byol: true\n      packageCode: ${devicePackageCode}\n      notifications:\n      - \"example@equinix.com\"\n      hostname: C8KV\n      accountNumber: ${accountNum}\n      version: ${deviceVersion}\n      coreCount: ${sizeInCores}\n      termLength: ${termLength}\n      licenseToken: ${licenseToken}\n      additionalBandwidth: ${additionalBandwidth}\n      sshKey:\n        username: ${sshUserName}\n        keyName: ${sshKeyName}\n      aclTemplateId: ${aclTemplateId}\noutputs:\n  routerId: ${c8kRouter.id}\n  provisionStatus: ${c8kRouter.status}\n  licenseStatus: ${c8kRouter.licenseStatus}\n  sshIpAddress: ${c8kRouter.sshIpAddress}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/device:Device example {existing_id}\n```\n\nThe `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported.\n\n\n{{% /examples %}}",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n"
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n"
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on the device.\n"
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n"
                },
                "connectivity": {
                    "type": "string",
                    "description": "Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT).\nIf not specified, default will be INTERNET-ACCESS\n"
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)\n"
                },
                "diverseDeviceId": {
                    "type": "string",
                    "description": "Unique ID of an existing device.\nUse this field to let Equinix know if you want your new device to be in a different location from any existing virtual\ndevice. This field is only meaningful for single devices.\n"
                },
                "diverseDeviceName": {
                    "type": "string",
                    "description": "Name of the device with diverse device UUID. This field is returned in device details if the\ndevice is created by passing diverse_device_id.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n"
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n"
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceInterface:DeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n"
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n"
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n"
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n"
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the device is scoped to.If you\nleave it out, the device will be created under the default project id of your organization.\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n"
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n"
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n"
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n"
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n"
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n"
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n"
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n"
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n"
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n"
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n"
                }
            },
            "required": [
                "accountNumber",
                "additionalBandwidth",
                "asn",
                "coreCount",
                "diverseDeviceId",
                "diverseDeviceName",
                "hostname",
                "ibx",
                "interfaces",
                "interfaceCount",
                "licenseFileId",
                "licenseStatus",
                "metroCode",
                "name",
                "notifications",
                "packageCode",
                "projectId",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "status",
                "termLength",
                "typeCode",
                "uuid",
                "vendorConfiguration",
                "version",
                "zoneCode"
            ],
            "inputProperties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n",
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                    "willReplaceOnChanges": true
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "connectivity": {
                    "type": "string",
                    "description": "Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT).\nIf not specified, default will be INTERNET-ACCESS\n",
                    "willReplaceOnChanges": true
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)\n"
                },
                "diverseDeviceId": {
                    "type": "string",
                    "description": "Unique ID of an existing device.\nUse this field to let Equinix know if you want your new device to be in a different location from any existing virtual\ndevice. This field is only meaningful for single devices.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n",
                    "willReplaceOnChanges": true
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n",
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n",
                    "willReplaceOnChanges": true
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the device is scoped to.If you\nleave it out, the device will be created under the default project id of your organization.\n",
                    "willReplaceOnChanges": true
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n",
                    "willReplaceOnChanges": true
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n",
                    "willReplaceOnChanges": true
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n",
                    "willReplaceOnChanges": true
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n",
                    "willReplaceOnChanges": true
                },
                "throughputUnit": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/throughputUnit:ThroughputUnit"
                        }
                    ],
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                    "willReplaceOnChanges": true
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n",
                    "willReplaceOnChanges": true
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n",
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountNumber",
                "coreCount",
                "metroCode",
                "notifications",
                "packageCode",
                "termLength",
                "typeCode",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string",
                        "description": "Billing account number for a device.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer",
                        "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                    },
                    "byol": {
                        "type": "boolean",
                        "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudInitFileId": {
                        "type": "string",
                        "description": "Identifier of a cloud init file that will be applied on the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterDetails": {
                        "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                        "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectivity": {
                        "type": "string",
                        "description": "Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT).\nIf not specified, default will be INTERNET-ACCESS\n",
                        "willReplaceOnChanges": true
                    },
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used by device. (**NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.**)\n"
                    },
                    "diverseDeviceId": {
                        "type": "string",
                        "description": "Unique ID of an existing device.\nUse this field to let Equinix know if you want your new device to be in a different location from any existing virtual\ndevice. This field is only meaningful for single devices.\n"
                    },
                    "diverseDeviceName": {
                        "type": "string",
                        "description": "Name of the device with diverse device UUID. This field is returned in device details if the\ndevice is created by passing diverse_device_id.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Device hostname prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name.\n"
                    },
                    "interfaceCount": {
                        "type": "integer",
                        "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceInterface:DeviceInterface"
                        },
                        "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                    },
                    "licenseFile": {
                        "type": "string",
                        "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "Identifier of a license file that will be applied on the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                    },
                    "licenseToken": {
                        "type": "string",
                        "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                        "willReplaceOnChanges": true
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "Device location metro code.\n",
                        "willReplaceOnChanges": true
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string",
                        "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that will receive device status\nnotifications.\n"
                    },
                    "orderReference": {
                        "type": "string",
                        "description": "Name/number used to identify device order on the invoice.\n",
                        "willReplaceOnChanges": true
                    },
                    "packageCode": {
                        "type": "string",
                        "description": "Device software package code.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique Identifier for the project resource where the device is scoped to.If you\nleave it out, the device will be created under the default project id of your organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Purchase order number associated with a device order.\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region.\n"
                    },
                    "secondaryDevice": {
                        "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                        "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfManaged": {
                        "type": "boolean",
                        "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device.\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device.\n"
                    },
                    "sshKey": {
                        "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                        "description": "Definition of SSH key that will be provisioned on a device\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                    },
                    "termLength": {
                        "type": "integer",
                        "description": "Device term length.\n"
                    },
                    "throughput": {
                        "type": "integer",
                        "description": "Device license throughput.\n",
                        "willReplaceOnChanges": true
                    },
                    "throughputUnit": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:networkedge/throughputUnit:ThroughputUnit"
                            }
                        ],
                        "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeCode": {
                        "type": "string",
                        "description": "Device type code.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Device software software version.\n",
                        "willReplaceOnChanges": true
                    },
                    "wanInterfaceId": {
                        "type": "string",
                        "description": "device interface id picked for WAN\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/deviceLink:DeviceLink": {
            "description": "Resource `equinix.networkedge.DeviceLink` allows creation and management of Equinix\nNetwork Edge virtual network device links.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst accountName = config.require(\"accountName\");\nconst accountMetro = config.require(\"accountMetro\");\nconst device1Id = config.require(\"device1Id\");\nconst device2Id = config.require(\"device2Id\");\nconst accountfNum = equinix.networkedge.getAccount({\n    name: accountName,\n    metroCode: accountMetro,\n}).then(invoke =\u003e invoke.number);\nconst device1Metro = equinix.networkedge.getDevice({\n    uuid: device1Id,\n}).then(invoke =\u003e invoke.metroCode);\nconst device2Metro = equinix.networkedge.getDevice({\n    uuid: device2Id,\n}).then(invoke =\u003e invoke.metroCode);\nconst deviceLink = new equinix.networkedge.DeviceLink(\"deviceLink\", {\n    name: \"test-link\",\n    subnet: \"192.168.40.64/27\",\n    devices: [\n        {\n            id: \"device1Id\",\n            asn: 22111,\n            interfaceId: 6,\n        },\n        {\n            id: \"device2Id\",\n            asn: 22333,\n            interfaceId: 7,\n        },\n    ],\n    links: [{\n        accountNumber: accountfNum,\n        srcMetroCode: device1Metro,\n        dstMetroCode: device2Metro,\n        throughput: \"50\",\n        throughputUnit: \"Mbps\",\n    }],\n});\nexport const status = deviceLink.status;\nexport const devices = deviceLink.devices;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\naccount_name = config.require(\"accountName\")\naccount_metro = config.require(\"accountMetro\")\ndevice1_id = config.require(\"device1Id\")\ndevice2_id = config.require(\"device2Id\")\naccountf_num = equinix.networkedge.get_account(name=account_name,\n    metro_code=account_metro).number\ndevice1_metro = equinix.networkedge.get_device(uuid=device1_id).metro_code\ndevice2_metro = equinix.networkedge.get_device(uuid=device2_id).metro_code\ndevice_link = equinix.networkedge.DeviceLink(\"deviceLink\",\n    name=\"test-link\",\n    subnet=\"192.168.40.64/27\",\n    devices=[\n        equinix.networkedge.DeviceLinkDeviceArgs(\n            id=\"device1Id\",\n            asn=22111,\n            interface_id=6,\n        ),\n        equinix.networkedge.DeviceLinkDeviceArgs(\n            id=\"device2Id\",\n            asn=22333,\n            interface_id=7,\n        ),\n    ],\n    links=[equinix.networkedge.DeviceLinkLinkArgs(\n        account_number=accountf_num,\n        src_metro_code=device1_metro,\n        dst_metro_code=device2_metro,\n        throughput=\"50\",\n        throughput_unit=\"Mbps\",\n    )])\npulumi.export(\"status\", device_link.status)\npulumi.export(\"devices\", device_link.devices)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\taccountName := cfg.Require(\"accountName\")\n\t\taccountMetro := cfg.Require(\"accountMetro\")\n\t\tdevice1Id := cfg.Require(\"device1Id\")\n\t\tdevice2Id := cfg.Require(\"device2Id\")\n\t\taccountfNum := networkedge.GetAccount(ctx, \u0026networkedge.GetAccountArgs{\n\t\t\tName:      pulumi.StringRef(accountName),\n\t\t\tMetroCode: accountMetro,\n\t\t}, nil).Number\n\t\tdevice1Metro := networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tUuid: pulumi.StringRef(device1Id),\n\t\t}, nil).MetroCode\n\t\tdevice2Metro := networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tUuid: pulumi.StringRef(device2Id),\n\t\t}, nil).MetroCode\n\t\tdeviceLink, err := networkedge.NewDeviceLink(ctx, \"deviceLink\", \u0026networkedge.DeviceLinkArgs{\n\t\t\tName:   pulumi.String(\"test-link\"),\n\t\t\tSubnet: pulumi.String(\"192.168.40.64/27\"),\n\t\t\tDevices: networkedge.DeviceLinkDeviceArray{\n\t\t\t\t\u0026networkedge.DeviceLinkDeviceArgs{\n\t\t\t\t\tId:          pulumi.String(\"device1Id\"),\n\t\t\t\t\tAsn:         pulumi.Int(22111),\n\t\t\t\t\tInterfaceId: pulumi.Int(6),\n\t\t\t\t},\n\t\t\t\t\u0026networkedge.DeviceLinkDeviceArgs{\n\t\t\t\t\tId:          pulumi.String(\"device2Id\"),\n\t\t\t\t\tAsn:         pulumi.Int(22333),\n\t\t\t\t\tInterfaceId: pulumi.Int(7),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLinks: networkedge.DeviceLinkLinkArray{\n\t\t\t\t\u0026networkedge.DeviceLinkLinkArgs{\n\t\t\t\t\tAccountNumber:  *pulumi.String(accountfNum),\n\t\t\t\t\tSrcMetroCode:   *pulumi.String(device1Metro),\n\t\t\t\t\tDstMetroCode:   *pulumi.String(device2Metro),\n\t\t\t\t\tThroughput:     pulumi.String(\"50\"),\n\t\t\t\t\tThroughputUnit: pulumi.String(\"Mbps\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"status\", deviceLink.Status)\n\t\tctx.Export(\"devices\", deviceLink.Devices)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var accountName = config.Require(\"accountName\");\n    var accountMetro = config.Require(\"accountMetro\");\n    var device1Id = config.Require(\"device1Id\");\n    var device2Id = config.Require(\"device2Id\");\n    var accountfNum = Equinix.NetworkEdge.GetAccount.Invoke(new()\n    {\n        Name = accountName,\n        MetroCode = accountMetro,\n    }).Apply(invoke =\u003e invoke.Number);\n\n    var device1Metro = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Uuid = device1Id,\n    }).Apply(invoke =\u003e invoke.MetroCode);\n\n    var device2Metro = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Uuid = device2Id,\n    }).Apply(invoke =\u003e invoke.MetroCode);\n\n    var deviceLink = new Equinix.NetworkEdge.DeviceLink(\"deviceLink\", new()\n    {\n        Name = \"test-link\",\n        Subnet = \"192.168.40.64/27\",\n        Devices = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs\n            {\n                Id = \"device1Id\",\n                Asn = 22111,\n                InterfaceId = 6,\n            },\n            new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs\n            {\n                Id = \"device2Id\",\n                Asn = 22333,\n                InterfaceId = 7,\n            },\n        },\n        Links = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.DeviceLinkLinkArgs\n            {\n                AccountNumber = accountfNum,\n                SrcMetroCode = device1Metro,\n                DstMetroCode = device2Metro,\n                Throughput = \"50\",\n                ThroughputUnit = \"Mbps\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"status\"] = deviceLink.Status,\n        [\"devices\"] = deviceLink.Devices,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.DeviceLink;\nimport com.equinix.pulumi.networkedge.DeviceLinkArgs;\nimport com.equinix.pulumi.networkedge.inputs.DeviceLinkDeviceArgs;\nimport com.equinix.pulumi.networkedge.inputs.DeviceLinkLinkArgs;\nimport com.equinix.pulumi.networkedge.inputs.GetAccountArgs;\nimport com.equinix.pulumi.networkedge.inputs.GetDeviceArgs;\nimport com.equinix.pulumi.networkedge.NetworkedgeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var accountName = config.get(\"accountName\").get();\n        final var accountMetro = config.get(\"accountMetro\").get();\n        final var device1Id = config.get(\"device1Id\").get();\n        final var device2Id = config.get(\"device2Id\").get();\n        final var accountfNum = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()\n            .name(accountName)\n            .metroCode(accountMetro)\n            .build()).applyValue(account -\u003e account.number());\n\n        final var device1Metro = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .uuid(device1Id)\n            .build()).applyValue(device -\u003e device.metroCode());\n\n        final var device2Metro = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .uuid(device2Id)\n            .build()).applyValue(device -\u003e device.metroCode());\n\n        var deviceLink = new DeviceLink(\"deviceLink\", DeviceLinkArgs.builder()        \n            .name(\"test-link\")\n            .subnet(\"192.168.40.64/27\")\n            .devices(            \n                DeviceLinkDeviceArgs.builder()\n                    .id(\"device1Id\")\n                    .asn(22111)\n                    .interfaceId(6)\n                    .build(),\n                DeviceLinkDeviceArgs.builder()\n                    .id(\"device2Id\")\n                    .asn(22333)\n                    .interfaceId(7)\n                    .build())\n            .links(DeviceLinkLinkArgs.builder()\n                .accountNumber(accountfNum)\n                .srcMetroCode(device1Metro)\n                .dstMetroCode(device2Metro)\n                .throughput(\"50\")\n                .throughputUnit(\"Mbps\")\n                .build())\n            .build());\n\n        ctx.export(\"status\", deviceLink.status());\n        ctx.export(\"devices\", deviceLink.devices());\n    }\n}\n```\n```yaml\nconfig:\n  accountName:\n    type: string\n  accountMetro:\n    type: string\n  device1Id:\n    type: string\n  device2Id:\n    type: string\nvariables:\n  accountfNum:\n    fn::invoke:\n      function: equinix:networkedge:getAccount\n      arguments:\n        name: ${accountName}\n        metroCode: ${accountMetro}\n      return: number\n  device1Metro:\n    fn::invoke:\n      function: equinix:networkedge:getDevice\n      arguments:\n        uuid: ${device1Id}\n      return: metroCode\n  device2Metro:\n    fn::invoke:\n      function: equinix:networkedge:getDevice\n      arguments:\n        uuid: ${device2Id}\n      return: metroCode\nresources:\n  deviceLink:\n    type: equinix:networkedge:DeviceLink\n    properties:\n      name: test-link\n      subnet: 192.168.40.64/27\n      devices:\n      - id: device1Id\n        asn: 22111\n        interfaceId: 6\n      - id: device2Id\n        asn: 22333\n        interfaceId: 7\n      links:\n      - accountNumber: ${accountfNum}\n        srcMetroCode: ${device1Metro}\n        dstMetroCode: ${device2Metro}\n        throughput: 50\n        throughputUnit: Mbps\noutputs:\n  status: ${deviceLink.status}\n  devices: ${deviceLink.devices}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/deviceLink:DeviceLink example {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the device link is scoped to.If you\nleave it out, the device link will be created under the default project id of your organization.\n"
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device link unique identifier.\n"
                }
            },
            "required": [
                "devices",
                "name",
                "projectId",
                "status",
                "uuid"
            ],
            "inputProperties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the device link is scoped to.If you\nleave it out, the device link will be created under the default project id of your organization.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                }
            },
            "requiredInputs": [
                "devices"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceLink resources.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                        },
                        "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                        },
                        "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "device link name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique Identifier for the project resource where the device link is scoped to.If you\nleave it out, the device link will be created under the default project id of your organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device link unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/networkFile:NetworkFile": {
            "description": "Resource `equinix.networkedge.NetworkFile` allows creation and management of Equinix Network Edge files.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as fs from \"fs\";\n\nconst config = new pulumi.Config();\nconst metro = config.get(\"metro\") || \"SV\";\nconst networkFile = new equinix.networkedge.NetworkFile(\"networkFile\", {\n    fileName: \"Aviatrix-ZTP-file\",\n    content: fs.readFileSync(\"./../assets/aviatrix-cloud-init.txt\"),\n    metroCode: metro,\n    deviceTypeCode: \"AVIATRIX_EDGE\",\n    processType: \"CLOUD_INIT\",\n    selfManaged: true,\n    byol: true,\n});\nexport const networkFileId = networkFile.id;\nexport const networkFileStatus = networkFile.status;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nmetro = config.get(\"metro\")\nif metro is None:\n    metro = \"SV\"\nnetwork_file = equinix.networkedge.NetworkFile(\"networkFile\",\n    file_name=\"Aviatrix-ZTP-file\",\n    content=(lambda path: open(path).read())(\"./../assets/aviatrix-cloud-init.txt\"),\n    metro_code=metro,\n    device_type_code=\"AVIATRIX_EDGE\",\n    process_type=\"CLOUD_INIT\",\n    self_managed=True,\n    byol=True)\npulumi.export(\"networkFileId\", network_file.id)\npulumi.export(\"networkFileStatus\", network_file.status)\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tmetro := \"SV\"\n\t\tif param := cfg.Get(\"metro\"); param != \"\" {\n\t\t\tmetro = param\n\t\t}\n\t\tnetworkFile, err := networkedge.NewNetworkFile(ctx, \"networkFile\", \u0026networkedge.NetworkFileArgs{\n\t\t\tFileName:       pulumi.String(\"Aviatrix-ZTP-file\"),\n\t\t\tContent:        readFileOrPanic(\"./../assets/aviatrix-cloud-init.txt\"),\n\t\t\tMetroCode:      pulumi.String(metro),\n\t\t\tDeviceTypeCode: pulumi.String(\"AVIATRIX_EDGE\"),\n\t\t\tProcessType:    pulumi.String(\"CLOUD_INIT\"),\n\t\t\tSelfManaged:    pulumi.Bool(true),\n\t\t\tByol:           pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkFileId\", networkFile.ID())\n\t\tctx.Export(\"networkFileStatus\", networkFile.Status)\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var metro = config.Get(\"metro\") ?? \"SV\";\n    var networkFile = new Equinix.NetworkEdge.NetworkFile(\"networkFile\", new()\n    {\n        FileName = \"Aviatrix-ZTP-file\",\n        Content = File.ReadAllText(\"./../assets/aviatrix-cloud-init.txt\"),\n        MetroCode = metro,\n        DeviceTypeCode = \"AVIATRIX_EDGE\",\n        ProcessType = \"CLOUD_INIT\",\n        SelfManaged = true,\n        Byol = true,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkFileId\"] = networkFile.Id,\n        [\"networkFileStatus\"] = networkFile.Status,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.NetworkFile;\nimport com.equinix.pulumi.networkedge.NetworkFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var metro = config.get(\"metro\").orElse(\"SV\");\n\n        String content = null;\n        try {\n            content = Files.readString(Paths.get(\"./../assets/aviatrix-cloud-init.txt\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        var networkFile = new NetworkFile(\"networkFile\", NetworkFileArgs.builder()        \n            .fileName(\"Aviatrix-ZTP-file\")\n            .content(content)\n            .metroCode(metro)\n            .deviceTypeCode(\"AVIATRIX_EDGE\")\n            .processType(\"CLOUD_INIT\")\n            .selfManaged(true)\n            .byol(true)\n            .build());\n\n        ctx.export(\"networkFileId\", networkFile.id());\n        ctx.export(\"networkFileStatus\", networkFile.status());\n    }\n}\n```\n```yaml\nconfig:\n  metro:\n    type: string\n    default: SV\nresources:\n  networkFile:\n    type: equinix:networkedge:NetworkFile\n    properties:\n      fileName: Aviatrix-ZTP-file\n      content:\n        fn::readFile: ./../assets/aviatrix-cloud-init.txt\n      metroCode: ${metro}\n      deviceTypeCode: AVIATRIX_EDGE\n      processType: CLOUD_INIT\n      selfManaged: true\n      byol: true\noutputs:\n  networkFileId: ${networkFile.id}\n  networkFileStatus: ${networkFile.status}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/networkFile:NetworkFile example {existing_id}\n```\n\nThe `content`, `self_managed` and `byol` fields can not be imported.\n\n\n{{% /examples %}}",
            "properties": {
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                    "secret": true
                },
                "deviceTypeCode": {
                    "type": "string",
                    "description": "Device type code\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "File name.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "File upload location metro code. It should match the device location metro code.\n"
                },
                "processType": {
                    "type": "string",
                    "description": "File process type (LICENSE or CLOUD_INIT).\n"
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "File upload status.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of file resource.\n"
                }
            },
            "required": [
                "byol",
                "content",
                "deviceTypeCode",
                "fileName",
                "metroCode",
                "processType",
                "selfManaged",
                "status",
                "uuid"
            ],
            "inputProperties": {
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "deviceTypeCode": {
                    "type": "string",
                    "description": "Device type code\n",
                    "willReplaceOnChanges": true
                },
                "fileName": {
                    "type": "string",
                    "description": "File name.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "description": "File upload location metro code. It should match the device location metro code.\n",
                    "willReplaceOnChanges": true
                },
                "processType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/fileType:FileType"
                        }
                    ],
                    "description": "File process type (LICENSE or CLOUD_INIT).\n",
                    "willReplaceOnChanges": true
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "byol",
                "content",
                "deviceTypeCode",
                "fileName",
                "metroCode",
                "processType",
                "selfManaged"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkFile resources.\n",
                "properties": {
                    "byol": {
                        "type": "boolean",
                        "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "deviceTypeCode": {
                        "type": "string",
                        "description": "Device type code\n",
                        "willReplaceOnChanges": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "File name.\n",
                        "willReplaceOnChanges": true
                    },
                    "metroCode": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:index/metro:Metro"
                            }
                        ],
                        "description": "File upload location metro code. It should match the device location metro code.\n",
                        "willReplaceOnChanges": true
                    },
                    "processType": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:networkedge/fileType:FileType"
                            }
                        ],
                        "description": "File process type (LICENSE or CLOUD_INIT).\n",
                        "willReplaceOnChanges": true
                    },
                    "selfManaged": {
                        "type": "boolean",
                        "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "File upload status.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of file resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/sshKey:SshKey": {
            "description": "Resource `equinix.networkedge.SshKey` allows creation and management of Equinix Network Edge SSH keys.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as fs from \"fs\";\n\nconst sshKey = new equinix.networkedge.SshKey(\"sshKey\", {\n    name: \"johnKent\",\n    publicKey: fs.readFileSync(\"/Users/John/.ssh/ne_rsa.pub\"),\n});\nexport const sshKeyId = sshKey.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nssh_key = equinix.networkedge.SshKey(\"sshKey\",\n    name=\"johnKent\",\n    public_key=(lambda path: open(path).read())(\"/Users/John/.ssh/ne_rsa.pub\"))\npulumi.export(\"sshKeyId\", ssh_key.id)\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsshKey, err := networkedge.NewSshKey(ctx, \"sshKey\", \u0026networkedge.SshKeyArgs{\n\t\t\tName:      pulumi.String(\"johnKent\"),\n\t\t\tPublicKey: readFileOrPanic(\"/Users/John/.ssh/ne_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sshKeyId\", sshKey.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshKey = new Equinix.NetworkEdge.SshKey(\"sshKey\", new()\n    {\n        Name = \"johnKent\",\n        PublicKey = File.ReadAllText(\"/Users/John/.ssh/ne_rsa.pub\"),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sshKeyId\"] = sshKey.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.SshKey;\nimport com.equinix.pulumi.networkedge.SshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.IOException;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        String key = null;\n        try {\n            key = Files.readString(Paths.get(\"/Users/John/.ssh/ne_rsa.pub\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        var sshKey = new SshKey(\"sshKey\", SshKeyArgs.builder()        \n            .name(\"johnKent\")\n            .publicKey(key)\n            .build());\n\n        ctx.export(\"sshKeyId\", sshKey.id());\n    }\n}\n```\n```yaml\nresources:\n  sshKey:\n    type: equinix:networkedge:SshKey\n    properties:\n      name: johnKent\n      publicKey:\n        fn::readFile: /Users/John/.ssh/ne_rsa.pub\noutputs:\n  sshKeyId: ${sshKey.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/sshKey:SshKey example {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the SSH key is scoped to.If you\nleave it out, the ssh key will be created under the default project id of your organization.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of SSH key: `RSA` (default) or `DSA`.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The unique identifier of the key\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "publicKey",
                "uuid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique Identifier for the project resource where the SSH key is scoped to.If you\nleave it out, the ssh key will be created under the default project id of your organization.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of SSH key: `RSA` (default) or `DSA`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of SSH key used for identification.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique Identifier for the project resource where the SSH key is scoped to.If you\nleave it out, the ssh key will be created under the default project id of your organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of SSH key: `RSA` (default) or `DSA`.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The unique identifier of the key\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/sshUser:SshUser": {
            "description": "Resource `equinix.networkedge.SshUser` allows creation and management of Equinix Network\nEdge SSH users.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\n\nconst config = new pulumi.Config();\nconst device1Id = config.require(\"device1Id\");\nconst device2Id = config.require(\"device2Id\");\nconst sshUser = new equinix.networkedge.SshUser(\"sshUser\", {\n    username: \"johnKent\",\n    deviceIds: [\n        device1Id,\n        device2Id,\n    ],\n});\nexport const sshUserId = sshUser.id;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\ndevice1_id = config.require(\"device1Id\")\ndevice2_id = config.require(\"device2Id\")\nssh_user = equinix.networkedge.SshUser(\"sshUser\",\n    username=\"johnKent\",\n    device_ids=[\n        device1_id,\n        device2_id,\n    ])\npulumi.export(\"sshUserId\", ssh_user.id)\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdevice1Id := cfg.Require(\"device1Id\")\n\t\tdevice2Id := cfg.Require(\"device2Id\")\n\t\tsshUser, err := networkedge.NewSshUser(ctx, \"sshUser\", \u0026networkedge.SshUserArgs{\n\t\t\tUsername: pulumi.String(\"johnKent\"),\n\t\t\tDeviceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(device1Id),\n\t\t\t\tpulumi.String(device2Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"sshUserId\", sshUser.ID())\n\t\treturn nil\n\t})\n}\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var device1Id = config.Require(\"device1Id\");\n    var device2Id = config.Require(\"device2Id\");\n    var sshUser = new Equinix.NetworkEdge.SshUser(\"sshUser\", new()\n    {\n        Username = \"johnKent\",\n        DeviceIds = new[]\n        {\n            device1Id,\n            device2Id,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"sshUserId\"] = sshUser.Id,\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.equinix.pulumi.networkedge.SshUser;\nimport com.equinix.pulumi.networkedge.SshUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var device1Id = config.get(\"device1Id\").get();\n        final var device2Id = config.get(\"device2Id\").get();\n        var sshUser = new SshUser(\"sshUser\", SshUserArgs.builder()        \n            .username(\"johnKent\")\n            .deviceIds(            \n                device1Id,\n                device2Id)\n            .build());\n\n        ctx.export(\"sshUserId\", sshUser.id());\n    }\n}\n```\n```yaml\nconfig:\n  device1Id:\n    type: string\n  device2Id:\n    type: string\nresources:\n  sshUser:\n    type: equinix:networkedge:SshUser\n    properties:\n      username: johnKent\n      deviceIds:\n      - ${device1Id}\n      - ${device2Id}\noutputs:\n  sshUserId: ${sshUser.id}\n```\n{{% /example %}}\n\n## Import\n\nThis resource can be imported using an existing ID:\n\n```sh\n$ pulumi import equinix:networkedge/sshUser:SshUser example {existing_id}\n```\n\n\n{{% /examples %}}",
            "properties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "SSH user unique identifier.\n"
                }
            },
            "required": [
                "deviceIds",
                "password",
                "username",
                "uuid"
            ],
            "inputProperties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceIds",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshUser resources.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of device identifiers to which user will have access.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "SSH user password.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "SSH user login name.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "SSH user unique identifier.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "equinix:fabric/getCloudRouter:getCloudRouter": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch Fabric Cloud Router for a given UUID\n\nAPI documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#fabric-cloud-routers\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst cloudRouterDataName = equinix.fabric.getCloudRouter({\n    uuid: \"\u003cuuid_of_cloud_router\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncloud_router_data_name = equinix.fabric.get_cloud_router(uuid=\"\u003cuuid_of_cloud_router\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cloudRouterDataName = Equinix.Fabric.GetCloudRouter.Invoke(new()\n    {\n        Uuid = \"\u003cuuid_of_cloud_router\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupCloudRouter(ctx, \u0026fabric.LookupCloudRouterArgs{\n\t\t\tUuid: \"\u003cuuid_of_cloud_router\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetCloudRouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cloudRouterDataName = FabricFunctions.getCloudRouter(GetCloudRouterArgs.builder()\n            .uuid(\"\u003cuuid_of_cloud_router\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  cloudRouterDataName:\n    fn::invoke:\n      Function: equinix:fabric:getCloudRouter\n      Arguments:\n        uuid: \u003cuuid_of_cloud_router\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudRouter.\n",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned Fabric Cloud Router identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudRouter.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterAccount:getCloudRouterAccount"
                        },
                        "description": "Customer account information that is associated with this Fabric Cloud Router\n"
                    },
                    "bgpIpv4RoutesCount": {
                        "type": "integer",
                        "description": "Number of IPv4 BGP routes in use (including non-distinct prefixes)\n"
                    },
                    "bgpIpv6RoutesCount": {
                        "type": "integer",
                        "description": "Number of IPv6 BGP routes in use (including non-distinct prefixes)\n"
                    },
                    "changeLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterChangeLog:getCloudRouterChangeLog"
                        },
                        "description": "Captures Fabric Cloud Router lifecycle change information\n"
                    },
                    "connectionsCount": {
                        "type": "integer",
                        "description": "Number of connections associated with this Fabric Cloud Router instance\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided Fabric Cloud Router description\n"
                    },
                    "distinctIpv4PrefixesCount": {
                        "type": "integer",
                        "description": "Number of distinct IPv4 routes\n"
                    },
                    "distinctIpv6PrefixesCount": {
                        "type": "integer",
                        "description": "Number of distinct IPv6 routes\n"
                    },
                    "equinixAsn": {
                        "type": "integer",
                        "description": "Equinix ASN\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Fabric Cloud Router URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterLocation:getCloudRouterLocation"
                        },
                        "description": "Fabric Cloud Router location\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fabric Cloud Router name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterNotification:getCloudRouterNotification"
                        },
                        "description": "Preferences for notifications on Fabric Cloud Router configuration or status changes\n"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterOrder:getCloudRouterOrder"
                        },
                        "description": "Order information related to this Fabric Cloud Router\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterPackage:getCloudRouterPackage"
                        },
                        "description": "Fabric Cloud Router Package Type\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getCloudRouterProject:getCloudRouterProject"
                        },
                        "description": "Customer resource hierarchy project information.Applicable to customers onboarded to Equinix Identity and Access Management. For more information see Identity and Access Management: Projects\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Fabric Cloud Router overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the FCR type like; XF_ROUTER\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned Fabric Cloud Router identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "bgpIpv4RoutesCount",
                    "bgpIpv6RoutesCount",
                    "changeLogs",
                    "connectionsCount",
                    "description",
                    "distinctIpv4PrefixesCount",
                    "distinctIpv6PrefixesCount",
                    "equinixAsn",
                    "href",
                    "locations",
                    "name",
                    "notifications",
                    "orders",
                    "packages",
                    "projects",
                    "state",
                    "type",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:fabric/getConnection:getConnection": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch connection for a given UUID\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst connectionDataName = equinix.fabric.getConnection({\n    uuid: \"\u003cuuid_of_connection\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconnection_data_name = equinix.fabric.get_connection(uuid=\"\u003cuuid_of_connection\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var connectionDataName = Equinix.Fabric.GetConnection.Invoke(new()\n    {\n        Uuid = \"\u003cuuid_of_connection\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupConnection(ctx, \u0026fabric.LookupConnectionArgs{\n\t\t\tUuid: \"\u003cuuid_of_connection\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var connectionDataName = FabricFunctions.getConnection(GetConnectionArgs.builder()\n            .uuid(\"\u003cuuid_of_connection\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  connectionDataName:\n    fn::invoke:\n      Function: equinix:fabric:getConnection\n      Arguments:\n        uuid: \u003cuuid_of_connection\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "aSide": {
                        "$ref": "#/types/equinix:fabric/getConnectionASide:getConnectionASide",
                        "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/getConnectionAccount:getConnectionAccount",
                        "description": "Customer account information that is associated with this connection\n"
                    },
                    "additionalInfo": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "Connection additional information\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Connection bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getConnectionChangeLog:getConnectionChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided connection description\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Connection directionality from the requester point of view\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Connection URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isRemote": {
                        "type": "boolean",
                        "description": "Connection property derived from access point locations\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getConnectionNotification:getConnectionNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperation:getConnectionOperation",
                        "description": "Connection type-specific operational data\n"
                    },
                    "order": {
                        "$ref": "#/types/equinix:fabric/getConnectionOrder:getConnectionOrder",
                        "description": "Order details\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/getConnectionProject:getConnectionProject",
                        "description": "Project information\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/getConnectionRedundancy:getConnectionRedundancy",
                        "description": "Connection Redundancy Configuration\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Connection overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the connection type like EVPL*VC, EPL*VC, IPWAN*VC, IP*VC, ACCESS*EPL*VC, EVPLAN*VC, EPLAN*VC, EIA*VC, EC*VC\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned connection identifier\n"
                    },
                    "zSide": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSide:getConnectionZSide",
                        "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                    }
                },
                "type": "object",
                "required": [
                    "aSide",
                    "account",
                    "additionalInfo",
                    "bandwidth",
                    "changeLog",
                    "description",
                    "direction",
                    "href",
                    "isRemote",
                    "name",
                    "notifications",
                    "operation",
                    "order",
                    "project",
                    "redundancy",
                    "state",
                    "type",
                    "uuid",
                    "zSide",
                    "id"
                ]
            }
        },
        "equinix:fabric/getNetwork:getNetwork": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch Fabric Network for a given UUID\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst networkDataName = equinix.fabric.getNetwork({\n    uuid: \"\u003cuuid_of_network\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nnetwork_data_name = equinix.fabric.get_network(uuid=\"\u003cuuid_of_network\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networkDataName = Equinix.Fabric.GetNetwork.Invoke(new()\n    {\n        Uuid = \"\u003cuuid_of_network\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupNetwork(ctx, \u0026fabric.LookupNetworkArgs{\n\t\t\tUuid: \"\u003cuuid_of_network\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var networkDataName = FabricFunctions.getNetwork(GetNetworkArgs.builder()\n            .uuid(\"\u003cuuid_of_network\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  networkDataName:\n    fn::invoke:\n      Function: equinix:fabric:getNetwork\n      Arguments:\n        uuid: \u003cuuid_of_network\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "change": {
                        "$ref": "#/types/equinix:fabric/getNetworkChange:getNetworkChange",
                        "description": "Information on asset change operation\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getNetworkChangeLog:getNetworkChangeLog",
                        "description": "A permanent record of asset creation, modification, or deletion\n"
                    },
                    "connectionsCount": {
                        "type": "integer",
                        "description": "Number of connections associated with this network\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Fabric Network URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getNetworkLocation:getNetworkLocation"
                        },
                        "description": "Fabric Network location\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getNetworkNotification:getNetworkNotification"
                        },
                        "description": "Preferences for notifications on Fabric Network configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/getNetworkOperation:getNetworkOperation",
                        "description": "Network operation information that is associated with this Fabric Network\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/getNetworkProject:getNetworkProject",
                        "description": "Fabric Network project\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Fabric Network scope\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Fabric Network overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Supported Network types - EVPLAN, EPLAN, IPWAN\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned network identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "change",
                    "changeLog",
                    "connectionsCount",
                    "href",
                    "locations",
                    "name",
                    "notifications",
                    "operation",
                    "project",
                    "scope",
                    "state",
                    "type",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:fabric/getPort:getPort": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch port by uuid\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst portDataName = equinix.fabric.getPort({\n    uuid: \"\u003cuuid_of_port\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nport_data_name = equinix.fabric.get_port(uuid=\"\u003cuuid_of_port\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var portDataName = Equinix.Fabric.GetPort.Invoke(new()\n    {\n        Uuid = \"\u003cuuid_of_port\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetPort(ctx, \u0026fabric.GetPortArgs{\n\t\t\tUuid: \"\u003cuuid_of_port\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetPortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var portDataName = FabricFunctions.getPort(GetPortArgs.builder()\n            .uuid(\"\u003cuuid_of_port\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  portDataName:\n    fn::invoke:\n      Function: equinix:fabric:getPort\n      Arguments:\n        uuid: \u003cuuid_of_port\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPort.\n",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned port identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPort.\n",
                "properties": {
                    "account": {
                        "$ref": "#/types/equinix:fabric/getPortAccount:getPortAccount",
                        "description": "Customer account information that is associated with this port\n"
                    },
                    "availableBandwidth": {
                        "type": "integer",
                        "description": "Port available bandwidth in Mbps\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Port bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getPortChangeLog:getPortChangeLog",
                        "description": "Captures port lifecycle change information\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Port description\n"
                    },
                    "device": {
                        "$ref": "#/types/equinix:fabric/getPortDevice:getPortDevice",
                        "description": "Port device\n"
                    },
                    "encapsulation": {
                        "$ref": "#/types/equinix:fabric/getPortEncapsulation:getPortEncapsulation",
                        "description": "Port encapsulation protocol\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Port URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lagEnabled": {
                        "type": "boolean",
                        "description": "Port Lag\n"
                    },
                    "location": {
                        "$ref": "#/types/equinix:fabric/getPortLocation:getPortLocation",
                        "description": "Port location information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/getPortOperation:getPortOperation",
                        "description": "Port specific operational data\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/getPortRedundancy:getPortRedundancy",
                        "description": "Port redundancy information\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "Port service type\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Port state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Port type\n"
                    },
                    "usedBandwidth": {
                        "type": "integer",
                        "description": "Port used bandwidth in Mbps\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned port identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "availableBandwidth",
                    "bandwidth",
                    "changeLog",
                    "description",
                    "device",
                    "encapsulation",
                    "href",
                    "lagEnabled",
                    "location",
                    "name",
                    "operation",
                    "redundancy",
                    "serviceType",
                    "state",
                    "type",
                    "usedBandwidth",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:fabric/getPorts:getPorts": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch port by name\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst portsDataName = equinix.fabric.getPorts({\n    filter: {\n        name: \"\u003cname_of_port||port_prefix\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nports_data_name = equinix.fabric.get_ports(filter=equinix.fabric.GetPortsFilterArgs(\n    name=\"\u003cname_of_port||port_prefix\u003e\",\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var portsDataName = Equinix.Fabric.GetPorts.Invoke(new()\n    {\n        Filter = new Equinix.Fabric.Inputs.GetPortsFilterInputArgs\n        {\n            Name = \"\u003cname_of_port||port_prefix\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetPorts(ctx, \u0026fabric.GetPortsArgs{\n\t\t\tFilter: fabric.GetPortsFilter{\n\t\t\t\tName: \"\u003cname_of_port||port_prefix\u003e\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetPortsArgs;\nimport com.pulumi.equinix.fabric.inputs.GetPortsFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var portsDataName = FabricFunctions.getPorts(GetPortsArgs.builder()\n            .filter(GetPortsFilterArgs.builder()\n                .name(\"\u003cname_of_port||port_prefix\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  portsDataName:\n    fn::invoke:\n      Function: equinix:fabric:getPorts\n      Arguments:\n        filter:\n          name: \u003cname_of_port||port_prefix\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPorts.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getPortsFilter:getPortsFilter",
                        "description": "name\n"
                    }
                },
                "type": "object",
                "required": [
                    "filter"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPorts.\n",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getPortsDatum:getPortsDatum"
                        },
                        "description": "List of Ports\n"
                    },
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getPortsFilter:getPortsFilter",
                        "description": "name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "filter",
                    "id"
                ]
            }
        },
        "equinix:fabric/getRoutingProtocol:getRoutingProtocol": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch routing protocol for a given UUID\n\nAPI documentation can be found here - https://developer.equinix.com/dev-docs/fabric/api-reference/fabric-v4-apis#routing-protocols\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst routingProtocolDataName = equinix.fabric.getRoutingProtocol({\n    connectionUuid: \"\u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\",\n    uuid: \"\u003cuuid_of_routing_protocol\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nrouting_protocol_data_name = equinix.fabric.get_routing_protocol(connection_uuid=\"\u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\",\n    uuid=\"\u003cuuid_of_routing_protocol\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var routingProtocolDataName = Equinix.Fabric.GetRoutingProtocol.Invoke(new()\n    {\n        ConnectionUuid = \"\u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\",\n        Uuid = \"\u003cuuid_of_routing_protocol\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupRoutingProtocol(ctx, \u0026fabric.LookupRoutingProtocolArgs{\n\t\t\tConnectionUuid: \"\u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\",\n\t\t\tUuid:           \"\u003cuuid_of_routing_protocol\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetRoutingProtocolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var routingProtocolDataName = FabricFunctions.getRoutingProtocol(GetRoutingProtocolArgs.builder()\n            .connectionUuid(\"\u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\")\n            .uuid(\"\u003cuuid_of_routing_protocol\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  routingProtocolDataName:\n    fn::invoke:\n      Function: equinix:fabric:getRoutingProtocol\n      Arguments:\n        connectionUuid: \u003cuuid_of_connection_routing_protocol_is_applied_to\u003e\n        uuid: \u003cuuid_of_routing_protocol\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoutingProtocol.\n",
                "properties": {
                    "connectionUuid": {
                        "type": "string",
                        "description": "Connection URI associated with Routing Protocol\n"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectionUuid",
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoutingProtocol.\n",
                "properties": {
                    "bfd": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolBfd:getRoutingProtocolBfd",
                        "description": "Bidirectional Forwarding Detection\n"
                    },
                    "bgpAuthKey": {
                        "type": "string",
                        "description": "BGP authorization key\n"
                    },
                    "bgpIpv4": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolBgpIpv4:getRoutingProtocolBgpIpv4",
                        "description": "Routing Protocol BGP IPv4\n"
                    },
                    "bgpIpv6": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolBgpIpv6:getRoutingProtocolBgpIpv6",
                        "description": "Routing Protocol BGP IPv6\n"
                    },
                    "changeLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getRoutingProtocolChangeLog:getRoutingProtocolChangeLog"
                        },
                        "description": "Captures Routing Protocol lifecycle change information\n"
                    },
                    "changes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getRoutingProtocolChange:getRoutingProtocolChange"
                        },
                        "description": "Routing Protocol configuration Changes\n"
                    },
                    "connectionUuid": {
                        "type": "string",
                        "description": "Connection URI associated with Routing Protocol\n"
                    },
                    "customerAsn": {
                        "type": "integer",
                        "description": "Customer-provided ASN\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided Fabric Routing Protocol description\n"
                    },
                    "directIpv4": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolDirectIpv4:getRoutingProtocolDirectIpv4",
                        "description": "Routing Protocol Direct IPv4\n"
                    },
                    "directIpv6": {
                        "$ref": "#/types/equinix:fabric/getRoutingProtocolDirectIpv6:getRoutingProtocolDirectIpv6",
                        "description": "Routing Protocol Direct IPv6\n"
                    },
                    "equinixAsn": {
                        "type": "integer",
                        "description": "Equinix ASN\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Routing Protocol URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Routing Protocol name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getRoutingProtocolOperation:getRoutingProtocolOperation"
                        },
                        "description": "Routing Protocol type-specific operational data\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Routing Protocol overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the routing protocol type like BGP or DIRECT\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned routing protocol identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "bfd",
                    "bgpAuthKey",
                    "bgpIpv4",
                    "bgpIpv6",
                    "changes",
                    "changeLogs",
                    "connectionUuid",
                    "customerAsn",
                    "description",
                    "directIpv4",
                    "directIpv6",
                    "equinixAsn",
                    "href",
                    "name",
                    "operations",
                    "state",
                    "type",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:fabric/getServiceProfile:getServiceProfile": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst serviceProfileDataName = equinix.fabric.getServiceProfile({\n    uuid: \"\u003cuuid_of_service_profile\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nservice_profile_data_name = equinix.fabric.get_service_profile(uuid=\"\u003cuuid_of_service_profile\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serviceProfileDataName = Equinix.Fabric.GetServiceProfile.Invoke(new()\n    {\n        Uuid = \"\u003cuuid_of_service_profile\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.LookupServiceProfile(ctx, \u0026fabric.LookupServiceProfileArgs{\n\t\t\tUuid: \"\u003cuuid_of_service_profile\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetServiceProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var serviceProfileDataName = FabricFunctions.getServiceProfile(GetServiceProfileArgs.builder()\n            .uuid(\"\u003cuuid_of_service_profile\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  serviceProfileDataName:\n    fn::invoke:\n      Function: equinix:fabric:getServiceProfile\n      Arguments:\n        uuid: \u003cuuid_of_service_profile\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceProfile.\n",
                "properties": {
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceProfile.\n",
                "properties": {
                    "accessPointTypeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfig:getServiceProfileAccessPointTypeConfig"
                        },
                        "description": "Access point config information\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileAccount:getServiceProfileAccount",
                        "description": "Service Profile Owner Account Information\n"
                    },
                    "allowedEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of contact emails\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileChangeLog:getServiceProfileChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileCustomField:getServiceProfileCustomField"
                        },
                        "description": "Custom Fields\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "User-provided service description\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Service Profile URI response attribute\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "marketingInfo": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileMarketingInfo:getServiceProfileMarketingInfo",
                        "description": "Marketing Info\n"
                    },
                    "metros": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileMetro:getServiceProfileMetro"
                        },
                        "description": "Access point config information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Customer-assigned service profile name\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileNotification:getServiceProfileNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilePort:getServiceProfilePort"
                        },
                        "description": "Ports\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileProject:getServiceProfileProject",
                        "description": "Project information\n"
                    },
                    "selfProfile": {
                        "type": "boolean",
                        "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the connection\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix assigned service profile identifier\n"
                    },
                    "virtualDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileVirtualDevice:getServiceProfileVirtualDevice"
                        },
                        "description": "Virtual Devices\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessPointTypeConfigs",
                    "account",
                    "allowedEmails",
                    "changeLog",
                    "customFields",
                    "description",
                    "href",
                    "marketingInfo",
                    "metros",
                    "name",
                    "notifications",
                    "ports",
                    "project",
                    "selfProfile",
                    "state",
                    "tags",
                    "type",
                    "uuid",
                    "virtualDevices",
                    "visibility",
                    "id"
                ]
            }
        },
        "equinix:fabric/getServiceProfiles:getServiceProfiles": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch Service Profile by name filter criteria\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst serviceProfilesDataName = equinix.fabric.getServiceProfiles({\n    filter: {\n        operator: \"=\",\n        property: \"/name\",\n        values: [\"\u003clist_of_profiles_to_return\u003e\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nservice_profiles_data_name = equinix.fabric.get_service_profiles(filter=equinix.fabric.GetServiceProfilesFilterArgs(\n    operator=\"=\",\n    property=\"/name\",\n    values=[\"\u003clist_of_profiles_to_return\u003e\"],\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serviceProfilesDataName = Equinix.Fabric.GetServiceProfiles.Invoke(new()\n    {\n        Filter = new Equinix.Fabric.Inputs.GetServiceProfilesFilterInputArgs\n        {\n            Operator = \"=\",\n            Property = \"/name\",\n            Values = new[]\n            {\n                \"\u003clist_of_profiles_to_return\u003e\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/fabric\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fabric.GetServiceProfiles(ctx, \u0026fabric.GetServiceProfilesArgs{\n\t\t\tFilter: fabric.GetServiceProfilesFilter{\n\t\t\t\tOperator: pulumi.StringRef(\"=\"),\n\t\t\t\tProperty: pulumi.StringRef(\"/name\"),\n\t\t\t\tValues: []string{\n\t\t\t\t\t\"\u003clist_of_profiles_to_return\u003e\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.fabric.FabricFunctions;\nimport com.pulumi.equinix.fabric.inputs.GetServiceProfilesArgs;\nimport com.pulumi.equinix.fabric.inputs.GetServiceProfilesFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var serviceProfilesDataName = FabricFunctions.getServiceProfiles(GetServiceProfilesArgs.builder()\n            .filter(GetServiceProfilesFilterArgs.builder()\n                .operator(\"=\")\n                .property(\"/name\")\n                .values(\"\u003clist_of_profiles_to_return\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  serviceProfilesDataName:\n    fn::invoke:\n      Function: equinix:fabric:getServiceProfiles\n      Arguments:\n        filter:\n          operator: =\n          property: /name\n          values:\n            - \u003clist_of_profiles_to_return\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceProfiles.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter",
                        "description": "Service Profile Search Filter\n"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesSort:getServiceProfilesSort"
                        },
                        "description": "Service Profile Sort criteria for Search Request response payload\n"
                    },
                    "viewPoint": {
                        "type": "string",
                        "description": "flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceProfiles.\n",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesDatum:getServiceProfilesDatum"
                        },
                        "description": "List of Service Profiles\n"
                    },
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter",
                        "description": "Service Profile Search Filter\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesSort:getServiceProfilesSort"
                        },
                        "description": "Service Profile Sort criteria for Search Request response payload\n"
                    },
                    "viewPoint": {
                        "type": "string",
                        "description": "flips view between buyer and seller representation. Available values : aSide, zSide. Default value : aSide\n"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "id"
                ]
            }
        },
        "equinix:metal/getDevice:getDevice": {
            "description": "The datasource can be used to fetch a single device.\n\nIf you need to fetch a list of devices which meet filter criteria, you can use the equinix.metal.getDevices datasource.\n\n\u003e **Note:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\nRead more about sensitive data in state.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDevice({\n    projectId: local.project_id,\n    hostname: \"mydevice\",\n});\nexport const id = test.then(test =\u003e test.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device(project_id=local[\"project_id\"],\n    hostname=\"mydevice\")\npulumi.export(\"id\", test.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDevice.Invoke(new()\n    {\n        ProjectId = local.Project_id,\n        Hostname = \"mydevice\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = test.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupDevice(ctx, \u0026metal.LookupDeviceArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tHostname:  pulumi.StringRef(\"mydevice\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", test.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()\n            .projectId(local.project_id())\n            .hostname(\"mydevice\")\n            .build());\n\n        ctx.export(\"id\", test.applyValue(getDeviceResult -\u003e getDeviceResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDevice\n      Arguments:\n        projectId: ${local.project_id}\n        hostname: mydevice\noutputs:\n  id: ${test.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDevice({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const ipv4 = test.then(test =\u003e test.accessPublicIpv4);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"ipv4\", test.access_public_ipv4)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDevice.Invoke(new()\n    {\n        DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ipv4\"] = test.Apply(getDeviceResult =\u003e getDeviceResult.AccessPublicIpv4),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupDevice(ctx, \u0026metal.LookupDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ipv4\", test.AccessPublicIpv4)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()\n            .deviceId(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\n            .build());\n\n        ctx.export(\"ipv4\", test.applyValue(getDeviceResult -\u003e getDeviceResult.accessPublicIpv4()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDevice\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  ipv4: ${test.accessPublicIpv4}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device ID.\n\n\u003e **NOTE:** You should pass either `device_id`, or both `project_id` and `hostname`.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project in which the devices exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 management IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 management IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean"
                    },
                    "billingCycle": {
                        "type": "string",
                        "description": "The billing cycle of the device (monthly or hourly).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string for the device.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string",
                        "description": "(**Deprecated**) The facility where the device is deployed. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The id of hardware reservation which this device occupies.\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro where the device is deployed\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "L2 network type of the device, one of `layer3`, `layer2-bonded`,\n`layer2-individual`, `hybrid`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDeviceNetwork:getDeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "description": "The operating system running on the device.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The hardware config of the device.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicePort:getDevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (if still available).\n",
                        "secret": true
                    },
                    "sosHostname": {
                        "type": "string",
                        "description": "The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user or project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the device.\n"
                    },
                    "storage": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessPrivateIpv4",
                    "accessPublicIpv4",
                    "accessPublicIpv6",
                    "alwaysPxe",
                    "billingCycle",
                    "description",
                    "deviceId",
                    "facility",
                    "hardwareReservationId",
                    "hostname",
                    "ipxeScriptUrl",
                    "metro",
                    "networks",
                    "networkType",
                    "operatingSystem",
                    "plan",
                    "ports",
                    "projectId",
                    "rootPassword",
                    "sosHostname",
                    "sshKeyIds",
                    "state",
                    "storage",
                    "tags",
                    "id"
                ]
            }
        },
        "equinix:metal/getDeviceBgpNeighbors:getDeviceBgpNeighbors": {
            "description": "Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.\n\nTo have any BGP neighbors listed, the device must be in BGP-enabled project\nand have a BGP session assigned.\n\nTo learn more about using BGP in Equinix Metal, see the\nequinix.metal.BgpSession resource documentation.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDeviceBgpNeighbors({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const bgpNeighborsListing = test.then(test =\u003e test.bgpNeighbors);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device_bgp_neighbors(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"bgpNeighborsListing\", test.bgp_neighbors)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDeviceBgpNeighbors.Invoke(new()\n    {\n        DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"bgpNeighborsListing\"] = test.Apply(getDeviceBgpNeighborsResult =\u003e getDeviceBgpNeighborsResult.BgpNeighbors),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.GetDeviceBgpNeighbors(ctx, \u0026metal.GetDeviceBgpNeighborsArgs{\n\t\t\tDeviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"bgpNeighborsListing\", test.BgpNeighbors)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()\n            .deviceId(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\n            .build());\n\n        ctx.export(\"bgpNeighborsListing\", test.applyValue(getDeviceBgpNeighborsResult -\u003e getDeviceBgpNeighborsResult.bgpNeighbors()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDeviceBgpNeighbors\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  bgpNeighborsListing: ${test.bgpNeighbors}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceBgpNeighbors.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of BGP-enabled device whose neighbors to list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceBgpNeighbors.\n",
                "properties": {
                    "bgpNeighbors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighbor:getDeviceBgpNeighborsBgpNeighbor"
                        },
                        "description": "array of BGP neighbor records with attributes:\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bgpNeighbors",
                    "deviceId",
                    "id"
                ]
            }
        },
        "equinix:metal/getDevices:getDevices": {
            "description": "The datasource can be used to find a list of devices which meet filter criteria.\n\nIf you need to fetch a single device by ID or by project ID and hostname, use the equinix.metal.Device datasource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getDevices({\n    projectId: local.project_id,\n    filters: [\n        {\n            attribute: \"plan\",\n            values: [\"c3.small.x86\"],\n        },\n        {\n            attribute: \"metro\",\n            values: [\n                \"da\",\n                \"sv\",\n            ],\n        },\n    ],\n});\nexport const devices = example.then(example =\u003e example.devices);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_devices(project_id=local[\"project_id\"],\n    filters=[\n        equinix.metal.GetDevicesFilterArgs(\n            attribute=\"plan\",\n            values=[\"c3.small.x86\"],\n        ),\n        equinix.metal.GetDevicesFilterArgs(\n            attribute=\"metro\",\n            values=[\n                \"da\",\n                \"sv\",\n            ],\n        ),\n    ])\npulumi.export(\"devices\", example.devices)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetDevices.Invoke(new()\n    {\n        ProjectId = local.Project_id,\n        Filters = new[]\n        {\n            new Equinix.Metal.Inputs.GetDevicesFilterInputArgs\n            {\n                Attribute = \"plan\",\n                Values = new[]\n                {\n                    \"c3.small.x86\",\n                },\n            },\n            new Equinix.Metal.Inputs.GetDevicesFilterInputArgs\n            {\n                Attribute = \"metro\",\n                Values = new[]\n                {\n                    \"da\",\n                    \"sv\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"devices\"] = example.Apply(getDevicesResult =\u003e getDevicesResult.Devices),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetDevices(ctx, \u0026metal.GetDevicesArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tFilters: []metal.GetDevicesFilter{\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"plan\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"c3.small.x86\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"metro\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"da\",\n\t\t\t\t\t\t\"sv\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"devices\", example.Devices)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDevicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getDevices(GetDevicesArgs.builder()\n            .projectId(local.project_id())\n            .filters(            \n                GetDevicesFilterArgs.builder()\n                    .attribute(\"plan\")\n                    .values(\"c3.small.x86\")\n                    .build(),\n                GetDevicesFilterArgs.builder()\n                    .attribute(\"metro\")\n                    .values(                    \n                        \"da\",\n                        \"sv\")\n                    .build())\n            .build());\n\n        ctx.export(\"devices\", example.applyValue(getDevicesResult -\u003e getDevicesResult.devices()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getDevices\n      Arguments:\n        projectId: ${local.project_id}\n        filters:\n          - attribute: plan\n            values:\n              - c3.small.x86\n          - attribute: metro\n            values:\n              - da\n              - sv\noutputs:\n  devices: ${example.devices}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getDevices({\n    search: \"database\",\n});\nexport const devices = example.then(example =\u003e example.devices);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_devices(search=\"database\")\npulumi.export(\"devices\", example.devices)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetDevices.Invoke(new()\n    {\n        Search = \"database\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"devices\"] = example.Apply(getDevicesResult =\u003e getDevicesResult.Devices),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetDevices(ctx, \u0026metal.GetDevicesArgs{\n\t\t\tSearch: pulumi.StringRef(\"database\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"devices\", example.Devices)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDevicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getDevices(GetDevicesArgs.builder()\n            .search(\"database\")\n            .build());\n\n        ctx.export(\"devices\", example.applyValue(getDevicesResult -\u003e getDevicesResult.devices()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getDevices\n      Arguments:\n        search: database\noutputs:\n  devices: ${example.devices}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## search vs filter\n\nThe difference between `search` and `filter` is that `search` is an API parameter, interpreted by the Equinix Metal service. The \"filter\" arguments will reduce the API list (or search) results by applying client-side filtering, within this provider.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevices.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicesFilter:getDevicesFilter"
                        },
                        "description": "One or more attribute/values pairs to filter. List of atributes to filter can be found in the attribute reference of the `equinix.metal.Device` datasource.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of organization containing the devices.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project containing the devices. Exactly one of `project_id` and `organization_id` must be set.\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search string to filter devices by hostname, description, short_id, reservation short_id, tags, plan name, plan slug, facility code, facility name, operating system name, operating system slug, IP addresses.\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicesSort:getDevicesSort"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevices.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicesDevice:getDevicesDevice"
                        },
                        "description": "list of resources with attributes like in the equninix_metal_device datasources.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicesFilter:getDevicesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "search": {
                        "type": "string"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicesSort:getDevicesSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "devices",
                    "id"
                ]
            }
        },
        "equinix:metal/getFacility:getFacility": {
            "description": "\u003e **Deprecated** Use `equinix.metal.getMetro` instead.  For more information, refer to the facility to metro migration guide.\n\nProvides an Equinix Metal facility datasource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst ny5 = equinix.metal.getFacility({\n    code: \"ny5\",\n});\nexport const id = ny5.then(ny5 =\u003e ny5.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nny5 = equinix.metal.get_facility(code=\"ny5\")\npulumi.export(\"id\", ny5.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ny5 = Equinix.Metal.GetFacility.Invoke(new()\n    {\n        Code = \"ny5\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = ny5.Apply(getFacilityResult =\u003e getFacilityResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tny5, err := metal.GetFacility(ctx, \u0026metal.GetFacilityArgs{\n\t\t\tCode: \"ny5\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", ny5.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetFacilityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ny5 = MetalFunctions.getFacility(GetFacilityArgs.builder()\n            .code(\"ny5\")\n            .build());\n\n        ctx.export(\"id\", ny5.applyValue(getFacilityResult -\u003e getFacilityResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  ny5:\n    fn::invoke:\n      Function: equinix:metal:getFacility\n      Arguments:\n        code: ny5\noutputs:\n  id: ${ny5.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getFacilityCapacity:getFacilityCapacity"
                        },
                        "description": "One or more device plans for which the facility must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The facility code to search for facilities.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of feature strings that the facility must have. Some\npossible values are `baremetal`, `ibx`, `storage`, `global_ipv4`, `backend_transfer`, `layer_2`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getFacilityCapacity:getFacilityCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features of the facility.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro code the facility is part of.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "features",
                    "metro",
                    "name",
                    "id"
                ]
            }
        },
        "equinix:metal/getGateway:getGateway": {
            "description": "Use this datasource to retrieve Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testGateway = equinix.metal.getGateway({\n    gatewayId: local.gateway_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_gateway = equinix.metal.get_gateway(gateway_id=local[\"gateway_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        Description = \"test VLAN in SV\",\n        Metro = \"sv\",\n        ProjectId = local.Project_id,\n    });\n\n    var testGateway = Equinix.Metal.GetGateway.Invoke(new()\n    {\n        GatewayId = local.Gateway_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n\t\t_, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.LookupGateway(ctx, \u0026metal.LookupGatewayArgs{\n\t\t\tGatewayId: local.Gateway_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()\n            .gatewayId(local.gateway_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\nvariables:\n  testGateway:\n    fn::invoke:\n      Function: equinix:metal:getGateway\n      Arguments:\n        gatewayId: ${local.gateway_id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string",
                        "description": "UUID of the metal gateway resource to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of IP reservation block bound to the gateway.\n"
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet bound to this metal gateway. One of\n`8`, `16`, `32`, `64`, `128`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId",
                    "id",
                    "ipReservationId",
                    "privateIpv4SubnetSize",
                    "projectId",
                    "state",
                    "vlanId",
                    "vrfId"
                ]
            }
        },
        "equinix:metal/getHardwareReservation:getHardwareReservation": {
            "description": "Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).\n\nYou can look up hardware reservation by its ID or by ID of device which occupies it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getHardwareReservation({\n    id: \"4347e805-eb46-4699-9eb9-5c116e6a0172\",\n});\nconst exampleByDeviceId = equinix.metal.getHardwareReservation({\n    deviceId: \"ff85aa58-c106-4624-8f1c-7c64554047ea\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_hardware_reservation(id=\"4347e805-eb46-4699-9eb9-5c116e6a0172\")\nexample_by_device_id = equinix.metal.get_hardware_reservation(device_id=\"ff85aa58-c106-4624-8f1c-7c64554047ea\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetHardwareReservation.Invoke(new()\n    {\n        Id = \"4347e805-eb46-4699-9eb9-5c116e6a0172\",\n    });\n\n    var exampleByDeviceId = Equinix.Metal.GetHardwareReservation.Invoke(new()\n    {\n        DeviceId = \"ff85aa58-c106-4624-8f1c-7c64554047ea\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.GetHardwareReservation(ctx, \u0026metal.GetHardwareReservationArgs{\n\t\t\tId: pulumi.StringRef(\"4347e805-eb46-4699-9eb9-5c116e6a0172\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.GetHardwareReservation(ctx, \u0026metal.GetHardwareReservationArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"ff85aa58-c106-4624-8f1c-7c64554047ea\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()\n            .id(\"4347e805-eb46-4699-9eb9-5c116e6a0172\")\n            .build());\n\n        final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()\n            .deviceId(\"ff85aa58-c106-4624-8f1c-7c64554047ea\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getHardwareReservation\n      Arguments:\n        id: 4347e805-eb46-4699-9eb9-5c116e6a0172\n  exampleByDeviceId:\n    fn::invoke:\n      Function: equinix:metal:getHardwareReservation\n      Arguments:\n        deviceId: ff85aa58-c106-4624-8f1c-7c64554047ea\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "(**Deprecated**) Facility for the reservation. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation to look up.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Plan type for the reservation.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of project this reservation is scoped to.\n"
                    },
                    "provisionable": {
                        "type": "boolean",
                        "description": "Flag indicating whether the reserved server is provisionable or not. Spare\ndevices can't be provisioned unless they are activated first.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Reservation short ID.\n"
                    },
                    "spare": {
                        "type": "boolean",
                        "description": "Flag indicating whether the Hardware Reservation is a spare. Spare Hardware\nReservations are used when a Hardware Reservations requires service from Metal Equinix.\n"
                    },
                    "switchUuid": {
                        "type": "string",
                        "description": "Switch short ID, can be used to determine if two devices are connected to the\nsame switch.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId",
                    "facility",
                    "id",
                    "plan",
                    "projectId",
                    "provisionable",
                    "shortId",
                    "spare",
                    "switchUuid"
                ]
            }
        },
        "equinix:metal/getInterconnection:getInterconnection": {
            "description": "Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getInterconnection({\n    connectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_interconnection(connection_id=\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetInterconnection.Invoke(new()\n    {\n        ConnectionId = \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupInterconnection(ctx, \u0026metal.LookupInterconnectionArgs{\n\t\t\tConnectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetInterconnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getInterconnection(GetInterconnectionArgs.builder()\n            .connectionId(\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getInterconnection\n      Arguments:\n        connectionId: 4347e805-eb46-4699-9eb9-5c116e6a017d\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInterconnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInterconnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "The preferred email used for communication and notifications about the Equinix Fabric interconnection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "(**Deprecated**) Slug of a facility to which the connection belongs. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility. For more information, read the migration guide."
                    },
                    "id": {
                        "type": "string",
                        "description": "Port UUID.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Slug of a metro to which the connection belongs.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getInterconnectionPort:getInterconnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the connection belongs.\n"
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy, reduntant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Type of service token, a_side or z_side. One available in shared connection.\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getInterconnectionServiceToken:getInterconnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Port speed in bits per second.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Port status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                        "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "Token type, `a_side` or `z_side`.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "contactEmail",
                    "description",
                    "facility",
                    "id",
                    "metro",
                    "mode",
                    "name",
                    "organizationId",
                    "ports",
                    "projectId",
                    "redundancy",
                    "serviceTokenType",
                    "serviceTokens",
                    "speed",
                    "status",
                    "tags",
                    "token",
                    "type",
                    "vlans"
                ]
            }
        },
        "equinix:metal/getIpBlockRanges:getIpBlockRanges": {
            "description": "Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.\n\nThere are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.\n\nThe datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`\u003cnetwork\u003e/\u003cmask\u003e`) of respective blocks from the project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst test = equinix.metal.getIpBlockRanges({\n    projectId: projectId,\n});\nexport const out = test;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest = equinix.metal.get_ip_block_ranges(project_id=project_id)\npulumi.export(\"out\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n    var test = Equinix.Metal.GetIpBlockRanges.Invoke(new()\n    {\n        ProjectId = projectId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttest, err := metal.GetIpBlockRanges(ctx, \u0026metal.GetIpBlockRangesArgs{\n\t\t\tProjectId: projectId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()\n            .projectId(projectId)\n            .build());\n\n        ctx.export(\"out\", test.applyValue(getIpBlockRangesResult -\u003e getIpBlockRangesResult));\n    }\n}\n```\n```yaml\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  test:\n    fn::invoke:\n      Function: equinix:metal:getIpBlockRanges\n      Arguments:\n        projectId: ${projectId}\noutputs:\n  out: ${test}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility code filtering the IP blocks. Global IPv4 blocks will be listed\nanyway. If you omit this and metro, all the block from the project will be listed.   Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro code filtering the IP blocks. Global IPv4 blocks will be listed\nanyway. If you omit this and facility, all the block from the project will be listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project from which to list the blocks.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "globalIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Global IPv4 blocks in the project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for IPv6 blocks in the project.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "privateIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Private IPv4 blocks in the project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Public IPv4 blocks in the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "globalIpv4s",
                    "ipv6s",
                    "privateIpv4s",
                    "projectId",
                    "publicIpv4s",
                    "id"
                ]
            }
        },
        "equinix:metal/getMetro:getMetro": {
            "description": "Provides an Equinix Metal metro datasource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst sv = equinix.metal.getMetro({\n    code: \"sv\",\n});\nexport const id = sv.then(sv =\u003e sv.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nsv = equinix.metal.get_metro(code=\"sv\")\npulumi.export(\"id\", sv.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sv = Equinix.Metal.GetMetro.Invoke(new()\n    {\n        Code = \"sv\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = sv.Apply(getMetroResult =\u003e getMetroResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsv, err := metal.GetMetro(ctx, \u0026metal.GetMetroArgs{\n\t\t\tCode: \"sv\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", sv.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetMetroArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sv = MetalFunctions.getMetro(GetMetroArgs.builder()\n            .code(\"sv\")\n            .build());\n\n        ctx.export(\"id\", sv.applyValue(getMetroResult -\u003e getMetroResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  sv:\n    fn::invoke:\n      Function: equinix:metal:getMetro\n      Arguments:\n        code: sv\noutputs:\n  id: ${sv.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getMetroCapacity:getMetroCapacity"
                        },
                        "description": "One or more device plans for which the metro must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The metro code to search for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getMetroCapacity:getMetroCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country of the metro.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the metro.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the metro.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "country",
                    "id",
                    "name"
                ]
            }
        },
        "equinix:metal/getOperatingSystem:getOperatingSystem": {
            "description": "Use this data source to get Equinix Metal Operating System image.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getOperatingSystem({\n    distro: \"ubuntu\",\n    version: \"20.04\",\n    provisionableOn: \"c3.medium.x86\",\n});\nconst server = new equinix.metal.Device(\"server\", {\n    hostname: \"tf.ubuntu\",\n    plan: \"c3.medium.x86\",\n    metro: \"ny\",\n    operatingSystem: example.then(example =\u003e example.id).apply((x) =\u003e equinix.metal.operatingsystem.OperatingSystem[x]),\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_operating_system(distro=\"ubuntu\",\n    version=\"20.04\",\n    provisionable_on=\"c3.medium.x86\")\nserver = equinix.metal.Device(\"server\",\n    hostname=\"tf.ubuntu\",\n    plan=\"c3.medium.x86\",\n    metro=\"ny\",\n    operating_system=example.id.apply(lambda x: equinix.metal/operatingsystem.OperatingSystem(x)),\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetOperatingSystem.Invoke(new()\n    {\n        Distro = \"ubuntu\",\n        Version = \"20.04\",\n        ProvisionableOn = \"c3.medium.x86\",\n    });\n\n    var server = new Equinix.Metal.Device(\"server\", new()\n    {\n        Hostname = \"tf.ubuntu\",\n        Plan = \"c3.medium.x86\",\n        Metro = \"ny\",\n        OperatingSystem = example.Apply(getOperatingSystemResult =\u003e getOperatingSystemResult.Id).Apply(System.Enum.Parse\u003cEquinix.Metal.OperatingSystem.OperatingSystem\u003e),\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetOperatingSystem(ctx, \u0026metal.GetOperatingSystemArgs{\n\t\t\tDistro:          pulumi.StringRef(\"ubuntu\"),\n\t\t\tVersion:         pulumi.StringRef(\"20.04\"),\n\t\t\tProvisionableOn: pulumi.StringRef(\"c3.medium.x86\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewDevice(ctx, \"server\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.ubuntu\"),\n\t\t\tPlan:            pulumi.String(\"c3.medium.x86\"),\n\t\t\tMetro:           pulumi.String(\"ny\"),\n\t\t\tOperatingSystem: example.Id.ApplyT(func(x *string) metal.OperatingSystem { return metal.OperatingSystem(*x) }).(metal.OperatingSystemOutput),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()\n            .distro(\"ubuntu\")\n            .version(\"20.04\")\n            .provisionableOn(\"c3.medium.x86\")\n            .build());\n\n        var server = new Device(\"server\", DeviceArgs.builder()        \n            .hostname(\"tf.ubuntu\")\n            .plan(\"c3.medium.x86\")\n            .metro(\"ny\")\n            .operatingSystem(example.applyValue(getOperatingSystemResult -\u003e getOperatingSystemResult.id()))\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.ubuntu\n      plan: c3.medium.x86\n      metro: ny\n      operatingSystem: ${example.id}\n      billingCycle: hourly\n      projectId: ${local.project_id}\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getOperatingSystem\n      Arguments:\n        distro: ubuntu\n        version: '20.04'\n        provisionableOn: c3.medium.x86\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string",
                        "description": "Name of the OS distribution.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name or part of the name of the distribution. Case insensitive.\n"
                    },
                    "provisionableOn": {
                        "type": "string",
                        "description": "Plan name.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the distribution.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "provisionableOn": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Operating system slug (same as `id`).\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug",
                    "id"
                ]
            }
        },
        "equinix:metal/getOrganization:getOrganization": {
            "description": "Provides an Equinix Metal organization datasource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getOrganization({\n    organizationId: local.org_id,\n});\nexport const projectsInTheOrg = test.then(test =\u003e test.projectIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_organization(organization_id=local[\"org_id\"])\npulumi.export(\"projectsInTheOrg\", test.project_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetOrganization.Invoke(new()\n    {\n        OrganizationId = local.Org_id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectsInTheOrg\"] = test.Apply(getOrganizationResult =\u003e getOrganizationResult.ProjectIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupOrganization(ctx, \u0026metal.LookupOrganizationArgs{\n\t\t\tOrganizationId: pulumi.StringRef(local.Org_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectsInTheOrg\", test.ProjectIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()\n            .organizationId(local.org_id())\n            .build());\n\n        ctx.export(\"projectsInTheOrg\", test.applyValue(getOrganizationResult -\u003e getOrganizationResult.projectIds()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getOrganization\n      Arguments:\n        organizationId: ${local.org_id}\noutputs:\n  projectsInTheOrg: ${test.projectIds}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The organization name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of the organization resource.\n\nExactly one of `name` or `organization_id` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "address": {
                        "$ref": "#/types/equinix:metal/getOrganizationAddress:getOrganizationAddress",
                        "description": "Postal address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of project resources which belong to this organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "description",
                    "logo",
                    "name",
                    "organizationId",
                    "projectIds",
                    "twitter",
                    "website",
                    "id"
                ]
            }
        },
        "equinix:metal/getPlans:getPlans": {
            "description": "Provides an Equinix Metal plans datasource. This can be used to find plans that meet a filter criteria.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getPlans({\n    sorts: [{\n        attribute: \"pricing_hour\",\n        direction: \"asc\",\n    }],\n    filters: [\n        {\n            attribute: \"pricing_hour\",\n            values: [\"2.5\"],\n            matchBy: \"less_than\",\n        },\n        {\n            attribute: \"available_in_metros\",\n            values: [\n                \"da\",\n                \"sv\",\n            ],\n        },\n    ],\n});\nexport const plans = example.then(example =\u003e example.plans);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(\n        attribute=\"pricing_hour\",\n        direction=\"asc\",\n    )],\n    filters=[\n        equinix.metal.GetPlansFilterArgs(\n            attribute=\"pricing_hour\",\n            values=[\"2.5\"],\n            match_by=\"less_than\",\n        ),\n        equinix.metal.GetPlansFilterArgs(\n            attribute=\"available_in_metros\",\n            values=[\n                \"da\",\n                \"sv\",\n            ],\n        ),\n    ])\npulumi.export(\"plans\", example.plans)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetPlans.Invoke(new()\n    {\n        Sorts = new[]\n        {\n            new Equinix.Metal.Inputs.GetPlansSortInputArgs\n            {\n                Attribute = \"pricing_hour\",\n                Direction = \"asc\",\n            },\n        },\n        Filters = new[]\n        {\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"pricing_hour\",\n                Values = new[]\n                {\n                    \"2.5\",\n                },\n                MatchBy = \"less_than\",\n            },\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"available_in_metros\",\n                Values = new[]\n                {\n                    \"da\",\n                    \"sv\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"plans\"] = example.Apply(getPlansResult =\u003e getPlansResult.Plans),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetPlans(ctx, \u0026metal.GetPlansArgs{\n\t\t\tSorts: []metal.GetPlansSort{\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"pricing_hour\",\n\t\t\t\t\tDirection: pulumi.StringRef(\"asc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []metal.GetPlansFilter{\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"pricing_hour\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"2.5\",\n\t\t\t\t\t},\n\t\t\t\t\tMatchBy: pulumi.StringRef(\"less_than\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"available_in_metros\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"da\",\n\t\t\t\t\t\t\"sv\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"plans\", example.Plans)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPlansArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getPlans(GetPlansArgs.builder()\n            .sorts(GetPlansSortArgs.builder()\n                .attribute(\"pricing_hour\")\n                .direction(\"asc\")\n                .build())\n            .filters(            \n                GetPlansFilterArgs.builder()\n                    .attribute(\"pricing_hour\")\n                    .values(2.5)\n                    .matchBy(\"less_than\")\n                    .build(),\n                GetPlansFilterArgs.builder()\n                    .attribute(\"available_in_metros\")\n                    .values(                    \n                        \"da\",\n                        \"sv\")\n                    .build())\n            .build());\n\n        ctx.export(\"plans\", example.applyValue(getPlansResult -\u003e getPlansResult.plans()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getPlans\n      Arguments:\n        sorts:\n          - attribute: pricing_hour\n            direction: asc\n        filters:\n          - attribute: pricing_hour\n            values:\n              - 2.5\n            matchBy: less_than\n          - attribute: available_in_metros\n            values:\n              - da\n              - sv\noutputs:\n  plans: ${example.plans}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getPlans({\n    filters: [\n        {\n            attribute: \"class\",\n            values: [\"large\"],\n            matchBy: \"substring\",\n        },\n        {\n            attribute: \"deployment_types\",\n            values: [\"spot_market\"],\n        },\n        {\n            attribute: \"available_in_metros\",\n            values: [\n                \"da\",\n                \"sv\",\n            ],\n            all: true,\n        },\n    ],\n});\nexport const plans = example.then(example =\u003e example.plans);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_plans(filters=[\n    equinix.metal.GetPlansFilterArgs(\n        attribute=\"class\",\n        values=[\"large\"],\n        match_by=\"substring\",\n    ),\n    equinix.metal.GetPlansFilterArgs(\n        attribute=\"deployment_types\",\n        values=[\"spot_market\"],\n    ),\n    equinix.metal.GetPlansFilterArgs(\n        attribute=\"available_in_metros\",\n        values=[\n            \"da\",\n            \"sv\",\n        ],\n        all=True,\n    ),\n])\npulumi.export(\"plans\", example.plans)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetPlans.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"class\",\n                Values = new[]\n                {\n                    \"large\",\n                },\n                MatchBy = \"substring\",\n            },\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"deployment_types\",\n                Values = new[]\n                {\n                    \"spot_market\",\n                },\n            },\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"available_in_metros\",\n                Values = new[]\n                {\n                    \"da\",\n                    \"sv\",\n                },\n                All = true,\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"plans\"] = example.Apply(getPlansResult =\u003e getPlansResult.Plans),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetPlans(ctx, \u0026metal.GetPlansArgs{\n\t\t\tFilters: pulumi.Array{\n\t\t\t\tmetal.GetPlansFilter{\n\t\t\t\t\tAttribute: \"class\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"large\",\n\t\t\t\t\t},\n\t\t\t\t\tMatchBy: pulumi.StringRef(\"substring\"),\n\t\t\t\t},\n\t\t\t\tmetal.GetPlansFilter{\n\t\t\t\t\tAttribute: \"deployment_types\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"spot_market\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmetal.GetPlansFilter{\n\t\t\t\t\tAttribute: \"available_in_metros\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"da\",\n\t\t\t\t\t\t\"sv\",\n\t\t\t\t\t},\n\t\t\t\t\tAll: pulumi.BoolRef(true),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"plans\", example.Plans)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPlansArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getPlans(GetPlansArgs.builder()\n            .filters(            \n                GetPlansFilterArgs.builder()\n                    .attribute(\"class\")\n                    .values(\"large\")\n                    .matchBy(\"substring\")\n                    .build(),\n                GetPlansFilterArgs.builder()\n                    .attribute(\"deployment_types\")\n                    .values(\"spot_market\")\n                    .build(),\n                GetPlansFilterArgs.builder()\n                    .attribute(\"available_in_metros\")\n                    .values(                    \n                        \"da\",\n                        \"sv\")\n                    .all(true)\n                    .build())\n            .build());\n\n        ctx.export(\"plans\", example.applyValue(getPlansResult -\u003e getPlansResult.plans()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getPlans\n      Arguments:\n        filters:\n          - attribute: class\n            values:\n              - large\n            matchBy: substring\n          - attribute: deployment_types\n            values:\n              - spot_market\n          - attribute: available_in_metros\n            values:\n              - da\n              - sv\n            all: true\noutputs:\n  plans: ${example.plans}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Ignoring Changes to Plans/Metro\n\nPreserve deployed device plan, facility and metro when creating a new execution plan.\n\nAs described in the `data-resource-behavior` feature as shown in the example below.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst examplePlans = equinix.metal.getPlans({\n    sorts: [{\n        attribute: \"pricing_hour\",\n        direction: \"asc\",\n    }],\n    filters: [\n        {\n            attribute: \"name\",\n            values: [\n                \"c3.small.x86\",\n                \"c3.medium.x86\",\n                \"m3.large.x86\",\n            ],\n        },\n        {\n            attribute: \"available_in_metros\",\n            values: [\"sv\"],\n        },\n    ],\n});\n// This equinix_metal_device will use the first returned plan and the first metro in which that plan is available\n// It will ignore future changes on plan and metro\nconst exampleDevice = new equinix.metal.Device(\"exampleDevice\", {\n    hostname: \"example\",\n    plan: examplePlans.then(examplePlans =\u003e examplePlans.plans?.[0]?.name).apply((x) =\u003e equinix.metal.plan.Plan[x]),\n    metro: examplePlans.then(examplePlans =\u003e examplePlans.plans?.[0]?.availableInMetros?.[0]),\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: _var.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_plans = equinix.metal.get_plans(sorts=[equinix.metal.GetPlansSortArgs(\n        attribute=\"pricing_hour\",\n        direction=\"asc\",\n    )],\n    filters=[\n        equinix.metal.GetPlansFilterArgs(\n            attribute=\"name\",\n            values=[\n                \"c3.small.x86\",\n                \"c3.medium.x86\",\n                \"m3.large.x86\",\n            ],\n        ),\n        equinix.metal.GetPlansFilterArgs(\n            attribute=\"available_in_metros\",\n            values=[\"sv\"],\n        ),\n    ])\n# This equinix_metal_device will use the first returned plan and the first metro in which that plan is available\n# It will ignore future changes on plan and metro\nexample_device = equinix.metal.Device(\"exampleDevice\",\n    hostname=\"example\",\n    plan=example_plans.plans[0].name.apply(lambda x: equinix.metal/plan.Plan(x)),\n    metro=example_plans.plans[0].available_in_metros[0],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=var[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePlans = Equinix.Metal.GetPlans.Invoke(new()\n    {\n        Sorts = new[]\n        {\n            new Equinix.Metal.Inputs.GetPlansSortInputArgs\n            {\n                Attribute = \"pricing_hour\",\n                Direction = \"asc\",\n            },\n        },\n        Filters = new[]\n        {\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"name\",\n                Values = new[]\n                {\n                    \"c3.small.x86\",\n                    \"c3.medium.x86\",\n                    \"m3.large.x86\",\n                },\n            },\n            new Equinix.Metal.Inputs.GetPlansFilterInputArgs\n            {\n                Attribute = \"available_in_metros\",\n                Values = new[]\n                {\n                    \"sv\",\n                },\n            },\n        },\n    });\n\n    // This equinix_metal_device will use the first returned plan and the first metro in which that plan is available\n    // It will ignore future changes on plan and metro\n    var exampleDevice = new Equinix.Metal.Device(\"exampleDevice\", new()\n    {\n        Hostname = \"example\",\n        Plan = examplePlans.Apply(getPlansResult =\u003e getPlansResult.Plans[0]?.Name).Apply(System.Enum.Parse\u003cEquinix.Metal.Plan.Plan\u003e),\n        Metro = examplePlans.Apply(getPlansResult =\u003e getPlansResult.Plans[0]?.AvailableInMetros[0]),\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = @var.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texamplePlans, err := metal.GetPlans(ctx, \u0026metal.GetPlansArgs{\n\t\t\tSorts: []metal.GetPlansSort{\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"pricing_hour\",\n\t\t\t\t\tDirection: pulumi.StringRef(\"asc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []metal.GetPlansFilter{\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"c3.small.x86\",\n\t\t\t\t\t\t\"c3.medium.x86\",\n\t\t\t\t\t\t\"m3.large.x86\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAttribute: \"available_in_metros\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"sv\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// This equinix_metal_device will use the first returned plan and the first metro in which that plan is available\n\t\t// It will ignore future changes on plan and metro\n\t\t_, err = metal.NewDevice(ctx, \"exampleDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"example\"),\n\t\t\tPlan:            examplePlans.Plans[0].Name.ApplyT(func(x *string) metal.Plan { return metal.Plan(*x) }).(metal.PlanOutput),\n\t\t\tMetro:           *pulumi.String(examplePlans.Plans[0].AvailableInMetros[0]),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(_var.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPlansArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var examplePlans = MetalFunctions.getPlans(GetPlansArgs.builder()\n            .sorts(GetPlansSortArgs.builder()\n                .attribute(\"pricing_hour\")\n                .direction(\"asc\")\n                .build())\n            .filters(            \n                GetPlansFilterArgs.builder()\n                    .attribute(\"name\")\n                    .values(                    \n                        \"c3.small.x86\",\n                        \"c3.medium.x86\",\n                        \"m3.large.x86\")\n                    .build(),\n                GetPlansFilterArgs.builder()\n                    .attribute(\"available_in_metros\")\n                    .values(\"sv\")\n                    .build())\n            .build());\n\n        var exampleDevice = new Device(\"exampleDevice\", DeviceArgs.builder()        \n            .hostname(\"example\")\n            .plan(examplePlans.applyValue(getPlansResult -\u003e getPlansResult.plans()[0].name()))\n            .metro(examplePlans.applyValue(getPlansResult -\u003e getPlansResult.plans()[0].availableInMetros()[0]))\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(var_.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # This equinix_metal_device will use the first returned plan and the first metro in which that plan is available\n  # It will ignore future changes on plan and metro\n  exampleDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: example\n      plan: ${examplePlans.plans[0].name}\n      metro: ${examplePlans.plans[0].availableInMetros[0]}\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${var.project_id}\nvariables:\n  examplePlans:\n    fn::invoke:\n      Function: equinix:metal:getPlans\n      Arguments:\n        sorts:\n          - attribute: pricing_hour\n            direction: asc\n        filters:\n          - attribute: name\n            values:\n              - c3.small.x86\n              - c3.medium.x86\n              - m3.large.x86\n          - attribute: available_in_metros\n            values:\n              - sv\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nIf your use case requires dynamic changes of a device plan or metro you can define the lifecycle with a condition.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst config = new pulumi.Config();\nconst ignorePlansMetrosChanges = config.getBoolean(\"ignorePlansMetrosChanges\") || false;\nconst examplePlans = equinix.metal.getPlans({});\n// required device arguments\nconst exampleDevice = new equinix.metal.Device(\"exampleDevice\", {});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nconfig = pulumi.Config()\nignore_plans_metros_changes = config.get_bool(\"ignorePlansMetrosChanges\")\nif ignore_plans_metros_changes is None:\n    ignore_plans_metros_changes = False\nexample_plans = equinix.metal.get_plans()\n# required device arguments\nexample_device = equinix.metal.Device(\"exampleDevice\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var ignorePlansMetrosChanges = config.GetBoolean(\"ignorePlansMetrosChanges\") ?? false;\n    var examplePlans = Equinix.Metal.GetPlans.Invoke();\n\n    // required device arguments\n    var exampleDevice = new Equinix.Metal.Device(\"exampleDevice\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tignorePlansMetrosChanges := false\n\t\tif param := cfg.GetBool(\"ignorePlansMetrosChanges\"); param {\n\t\t\tignorePlansMetrosChanges = param\n\t\t}\n\t\t_, err := metal.GetPlans(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// required device arguments\n\t\t_, err = metal.NewDevice(ctx, \"exampleDevice\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPlansArgs;\nimport com.pulumi.equinix.metal.Device;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var ignorePlansMetrosChanges = config.get(\"ignorePlansMetrosChanges\").orElse(false);\n        final var examplePlans = MetalFunctions.getPlans();\n\n        var exampleDevice = new Device(\"exampleDevice\");\n\n    }\n}\n```\n```yaml\nconfiguration:\n  # Following example uses a boolean variable that may eventually be set to you false when you update your equinix_metal_plans filter criteria because you need a device plan with a new feature.\n  ignorePlansMetrosChanges:\n    type: bool\n    default: false\nresources:\n  exampleDevice:\n    type: equinix:metal:Device\nvariables:\n  examplePlans:\n    fn::invoke:\n      Function: equinix:metal:getPlans\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansFilter:getPlansFilter"
                        },
                        "description": "One or more attribute/values pairs to filter off of\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansSort:getPlansSort"
                        },
                        "description": "One or more attribute/direction pairs on which to sort results. If multiple\nsorts are provided, they will be applied in order\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansFilter:getPlansFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "plans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansPlan:getPlansPlan"
                        }
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansSort:getPlansSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "plans",
                    "id"
                ]
            }
        },
        "equinix:metal/getPort:getPort": {
            "description": "Use this data source to read ports of existing devices. You can read port by either its UUID,\nor by a device UUID and port name.\n\n## Example Usage\n\nCreate a device and read it's eth0 port to the datasource.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst testDevice = new equinix.metal.Device(\"testDevice\", {\n    hostname: \"tfacc-test-device-port\",\n    plan: \"c3.medium.x86\",\n    metro: \"sv\",\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: projectId,\n});\nconst testPort = equinix.metal.getPortOutput({\n    deviceId: testDevice.id,\n    name: \"eth0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest_device = equinix.metal.Device(\"testDevice\",\n    hostname=\"tfacc-test-device-port\",\n    plan=\"c3.medium.x86\",\n    metro=\"sv\",\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=project_id)\ntest_port = equinix.metal.get_port_output(device_id=test_device.id,\n    name=\"eth0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n    var testDevice = new Equinix.Metal.Device(\"testDevice\", new()\n    {\n        Hostname = \"tfacc-test-device-port\",\n        Plan = \"c3.medium.x86\",\n        Metro = \"sv\",\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = projectId,\n    });\n\n    var testPort = Equinix.Metal.GetPort.Invoke(new()\n    {\n        DeviceId = testDevice.Id,\n        Name = \"eth0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttestDevice, err := metal.NewDevice(ctx, \"testDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tfacc-test-device-port\"),\n\t\t\tPlan:            pulumi.String(\"c3.medium.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = metal.LookupPortOutput(ctx, metal.GetPortOutputArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tName:     pulumi.String(\"eth0\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()        \n            .hostname(\"tfacc-test-device-port\")\n            .plan(\"c3.medium.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(projectId)\n            .build());\n\n        final var testPort = MetalFunctions.getPort(GetPortArgs.builder()\n            .deviceId(testDevice.id())\n            .name(\"eth0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: tfacc-test-device-port\n      plan: c3.medium.x86\n      metro: sv\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${projectId}\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  testPort:\n    fn::invoke:\n      Function: equinix:metal:getPort\n      Arguments:\n        deviceId: ${testDevice.id}\n        name: eth0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPort.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device UUID where to lookup the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port to look up, i.e. `bond0`, `eth1`.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read, conflicts with `device_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPort.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port is bonded.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "layer2": {
                        "type": "boolean"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of native VLAN of the port.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of `layer2-bonded`, `layer2-individual`, `layer3`, `hybrid`, `hybrid-bonded`.\n"
                    },
                    "portId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either `NetworkBondPort` for bond ports or `NetworkPort` for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of attached VLANs.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "VXLAN ids of attached VLANs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bondId",
                    "bondName",
                    "bonded",
                    "disbondSupported",
                    "layer2",
                    "mac",
                    "name",
                    "nativeVlanId",
                    "networkType",
                    "type",
                    "vlanIds",
                    "vxlanIds",
                    "id"
                ]
            }
        },
        "equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock": {
            "description": "Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.\nYou can then use the cidrsubnet TF builtin function to derive subnets.\n\n\u003e For backward compatibility, this data source will also return reserved (elastic) IP blocks.\n\n\u003e Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.\n\n\u003e Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrecreatedIpBlock.\n",
                "properties": {
                    "addressFamily": {
                        "type": "integer",
                        "description": "4 or 6, depending on which block you are looking for.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility of the searched block. (for non-global blocks). Use metro instead; read the facility to metro migration guide\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Whether to look for global block. Default is false for backward compatibility.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro of the searched block (for non-global blocks).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the searched block should be.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether to look for public or private block.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addressFamily",
                    "projectId",
                    "public"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrecreatedIpBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of the looked up block.\n"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "gateway",
                    "manageable",
                    "management",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:metal/getProject:getProject": {
            "description": "Use this datasource to retrieve attributes of the Project API resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst tfProject1 = equinix.metal.getProject({\n    name: \"Terraform Fun\",\n});\nexport const usersOfTerraformFun = tfProject1.then(tfProject1 =\u003e tfProject1.userIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntf_project1 = equinix.metal.get_project(name=\"Terraform Fun\")\npulumi.export(\"usersOfTerraformFun\", tf_project1.user_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfProject1 = Equinix.Metal.GetProject.Invoke(new()\n    {\n        Name = \"Terraform Fun\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"usersOfTerraformFun\"] = tfProject1.Apply(getProjectResult =\u003e getProjectResult.UserIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttfProject1, err := metal.LookupProject(ctx, \u0026metal.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Terraform Fun\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"usersOfTerraformFun\", tfProject1.UserIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Terraform Fun\")\n            .build());\n\n        ctx.export(\"usersOfTerraformFun\", tfProject1.applyValue(getProjectResult -\u003e getProjectResult.userIds()));\n    }\n}\n```\n```yaml\nvariables:\n  tfProject1:\n    fn::invoke:\n      Function: equinix:metal:getProject\n      Arguments:\n        name: Terraform Fun\noutputs:\n  usersOfTerraformFun: ${tfProject1.userIds}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name which is used to look up the project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The UUID by which to look up the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Whether Backend Transfer is enabled for this project.\n"
                    },
                    "bgpConfig": {
                        "$ref": "#/types/equinix:metal/getProjectBgpConfig:getProjectBgpConfig",
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of this project's parent organization.\n"
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of UUIDs of user accounts which belong to this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backendTransfer",
                    "bgpConfig",
                    "created",
                    "name",
                    "organizationId",
                    "paymentMethodId",
                    "projectId",
                    "updated",
                    "userIds",
                    "id"
                ]
            }
        },
        "equinix:metal/getProjectSshKey:getProjectSshKey": {
            "description": "Use this datasource to retrieve attributes of a Project SSH Key API resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst myKey = equinix.metal.getProjectSshKey({\n    search: \"username@hostname\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nmy_key = equinix.metal.get_project_ssh_key(search=\"username@hostname\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Equinix.Metal.GetProjectSshKey.Invoke(new()\n    {\n        Search = \"username@hostname\",\n        ProjectId = local.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupProjectSshKey(ctx, \u0026metal.LookupProjectSshKeyArgs{\n\t\t\tSearch:    pulumi.StringRef(\"username@hostname\"),\n\t\t\tProjectId: local.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()\n            .search(\"username@hostname\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: equinix:metal:getProjectSshKey\n      Arguments:\n        search: username@hostname\n        projectId: ${local.project_id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the SSH Key to search for in the Equinix Metal project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Equinix Metal project id of the Equinix Metal SSH Key.\n\n\u003e **NOTE:** One of either `search` or `id` must be provided along with `project_id`.\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "The name, fingerprint, or public_key of the SSH Key to search for\nin the Equinix Metal project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectSshKey.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The text of the public key.\n"
                    },
                    "search": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "fingerprint",
                    "id",
                    "name",
                    "ownerId",
                    "projectId",
                    "publicKey",
                    "updated"
                ]
            }
        },
        "equinix:metal/getReservedIpBlock:getReservedIpBlock": {
            "description": "Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block\nID for lookup.\n\n\u003e For backward compatibility, this data source can be also used for precreated (management) IP blocks.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getReservedIpBlock.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the IP address block to look up.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Block containing this IP address will be returned.\n\n\u003e **NOTE:** You should pass either `id`, or both `project_id` and `ip_address`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the searched block should be.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReservedIpBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "One of `global_ipv4`, `public_ipv4`, `private_ipv4`, `public_ipv6`,or `vrf`\n"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "facility",
                    "gateway",
                    "global",
                    "id",
                    "manageable",
                    "management",
                    "metro",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId"
                ]
            }
        },
        "equinix:metal/getSpotMarketPrice:getSpotMarketPrice": {
            "description": "Use this data source to get Equinix Metal Spot Market Price for a plan.\n\n## Example Usage\n\nLookup by metro:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getSpotMarketPrice({\n    metro: \"sv\",\n    plan: \"c3.small.x86\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_spot_market_price(metro=\"sv\",\n    plan=\"c3.small.x86\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetSpotMarketPrice.Invoke(new()\n    {\n        Metro = \"sv\",\n        Plan = \"c3.small.x86\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.GetSpotMarketPrice(ctx, \u0026metal.GetSpotMarketPriceArgs{\n\t\t\tMetro: pulumi.StringRef(\"sv\"),\n\t\t\tPlan:  \"c3.small.x86\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()\n            .metro(\"sv\")\n            .plan(\"c3.small.x86\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getSpotMarketPrice\n      Arguments:\n        metro: sv\n        plan: c3.small.x86\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Name of the facility. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Name of the metro.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name of the plan.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "description": "Current spot market price for given plan in given facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan",
                    "price",
                    "id"
                ]
            }
        },
        "equinix:metal/getSpotMarketRequest:getSpotMarketRequest": {
            "inputs": {
                "description": "A collection of arguments for invoking getSpotMarketRequest.\n",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "The id of the Spot Market Request.\n"
                    }
                },
                "type": "object",
                "required": [
                    "requestId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpotMarketRequest.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of devices spawned by the referenced Spot Market Request.\n"
                    },
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n"
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n"
                    },
                    "endAt": {
                        "type": "string",
                        "description": "Date and time When the spot market request will be ended.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(**Deprecated**) Facility IDs where devices should be created. Use metro instead; read the facility to metro migration guide\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The device plan slug.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n"
                    },
                    "requestId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deviceIds",
                    "devicesMax",
                    "devicesMin",
                    "endAt",
                    "facilities",
                    "maxBidPrice",
                    "metro",
                    "plan",
                    "projectId",
                    "requestId",
                    "id"
                ]
            }
        },
        "equinix:metal/getVirtualCircuit:getVirtualCircuit": {
            "description": "Use this data source to retrieve a virtual circuit resource from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualCircuit.\n",
                "properties": {
                    "virtualCircuitId": {
                        "type": "string",
                        "description": "ID of the virtual circuit resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "virtualCircuitId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualCircuit.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n"
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n",
                        "secret": true
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the virtual circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer"
                    },
                    "nniVnid": {
                        "type": "integer"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the VC belongs.\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "virtualCircuitId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vnid": {
                        "type": "integer",
                        "description": ", `nni_vlan`, `nni_nvid` - VLAN parameters, see the\n[documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "customerIp",
                    "description",
                    "md5",
                    "metalIp",
                    "name",
                    "nniVlan",
                    "nniVnid",
                    "peerAsn",
                    "portId",
                    "projectId",
                    "speed",
                    "status",
                    "subnet",
                    "tags",
                    "virtualCircuitId",
                    "vlanId",
                    "vnid",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:metal/getVlan:getVlan": {
            "description": "Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be\nsearched by VLAN UUID, or project UUID and vxlan number.\n\n## Example Usage\n\nFetch a vlan by ID:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix-labs/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst foovlan = new equinix.metal.Vlan(\"foovlan\", {\n    projectId: local.project_id,\n    metro: \"sv\",\n    vxlan: 5,\n});\nconst dsvlan = equinix.metal.getVlanOutput({\n    vlanId: foovlan.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nfoovlan = equinix.metal.Vlan(\"foovlan\",\n    project_id=local[\"project_id\"],\n    metro=\"sv\",\n    vxlan=5)\ndsvlan = equinix.metal.get_vlan_output(vlan_id=foovlan.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foovlan = new Equinix.Metal.Vlan(\"foovlan\", new()\n    {\n        ProjectId = local.Project_id,\n        Metro = \"sv\",\n        Vxlan = 5,\n    });\n\n    var dsvlan = Equinix.Metal.GetVlan.Invoke(new()\n    {\n        VlanId = foovlan.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoovlan, err := metal.NewVlan(ctx, \"foovlan\", \u0026metal.VlanArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tVxlan:     pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = metal.LookupVlanOutput(ctx, metal.GetVlanOutputArgs{\n\t\t\tVlanId: foovlan.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foovlan = new Vlan(\"foovlan\", VlanArgs.builder()        \n            .projectId(local.project_id())\n            .metro(\"sv\")\n            .vxlan(5)\n            .build());\n\n        final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()\n            .vlanId(foovlan.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foovlan:\n    type: equinix:metal:Vlan\n    properties:\n      projectId: ${local.project_id}\n      metro: sv\n      vxlan: 5\nvariables:\n  dsvlan:\n    fn::invoke:\n      Function: equinix:metal:getVlan\n      Arguments:\n        vlanId: ${foovlan.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nFetch a vlan by project ID, vxlan and metro\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dsvlan = equinix.metal.getVlan({\n    projectId: local.project_id,\n    vxlan: 5,\n    metro: \"sv\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndsvlan = equinix.metal.get_vlan(project_id=local[\"project_id\"],\n    vxlan=5,\n    metro=\"sv\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dsvlan = Equinix.Metal.GetVlan.Invoke(new()\n    {\n        ProjectId = local.Project_id,\n        Vxlan = 5,\n        Metro = \"sv\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupVlan(ctx, \u0026metal.LookupVlanArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tVxlan:     pulumi.IntRef(5),\n\t\t\tMetro:     pulumi.StringRef(\"sv\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()\n            .projectId(local.project_id())\n            .vxlan(5)\n            .metro(\"sv\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dsvlan:\n    fn::invoke:\n      Function: equinix:metal:getVlan\n      Arguments:\n        projectId: ${local.project_id}\n        vxlan: 5\n        metro: sv\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlan.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility where the VLAN is deployed. Deprecated, see https://feedback.equinixmetal.com/changelog/bye-facilities-hello-again-metros\n",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the VLAN is deployed.\n\n\u003e **NOTE:** You must set either `vlan_id` or a combination of `vxlan`, `project_id`, and, `metro` or `facility`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "Metal UUID of the VLAN resource to look up.\n"
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "vxlan number of the VLAN to look up. Use together with the project_id and metro or facility.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlan.\n",
                "properties": {
                    "assignedDevicesIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device ID to which this VLAN is assigned.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description text of the VLAN resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "deprecationMessage": "Use metro instead of facility.  For more information, read the migration guide: https://registry.terraform.io/providers/equinix/equinix/latest/docs/guides/migration_guide_facilities_to_metros_devices"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vxlan": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "assignedDevicesIds",
                    "description",
                    "facility",
                    "metro",
                    "projectId",
                    "vlanId",
                    "vxlan",
                    "id"
                ]
            }
        },
        "equinix:metal/getVrf:getVrf": {
            "description": "Use this data source to retrieve a VRF resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleVrf = equinix.metal.getVrf({\n    vrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_vrf = equinix.metal.get_vrf(vrf_id=\"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleVrf = Equinix.Metal.GetVrf.Invoke(new()\n    {\n        VrfId = \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupVrf(ctx, \u0026metal.LookupVrfArgs{\n\t\t\tVrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()\n            .vrfId(\"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleVrf:\n    fn::invoke:\n      Function: equinix:metal:getVrf\n      Arguments:\n        vrfId: 48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVrf.\n",
                "properties": {
                    "vrfId": {
                        "type": "string",
                        "description": "ID of the VRF resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "vrfId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVrf.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipRanges",
                    "localAsn",
                    "metro",
                    "name",
                    "projectId",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getAccount:getAccount": {
            "description": "Use this data source to get number and identifier of Equinix Network Edge\nbilling account in a given metro location.\n\nBilling account reference is required to create Network Edge virtual device\nin corresponding metro location.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dc = equinix.networkedge.getAccount({\n    metroCode: \"DC\",\n    status: \"Active\",\n    projectId: \"a86d7112-d740-4758-9c9c-31e66373746b\",\n});\nexport const number = dc.then(dc =\u003e dc.number);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndc = equinix.networkedge.get_account(metro_code=\"DC\",\n    status=\"Active\",\n    project_id=\"a86d7112-d740-4758-9c9c-31e66373746b\")\npulumi.export(\"number\", dc.number)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dc = Equinix.NetworkEdge.GetAccount.Invoke(new()\n    {\n        MetroCode = \"DC\",\n        Status = \"Active\",\n        ProjectId = \"a86d7112-d740-4758-9c9c-31e66373746b\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"number\"] = dc.Apply(getAccountResult =\u003e getAccountResult.Number),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdc, err := networkedge.GetAccount(ctx, \u0026networkedge.GetAccountArgs{\n\t\t\tMetroCode: \"DC\",\n\t\t\tStatus:    pulumi.StringRef(\"Active\"),\n\t\t\tProjectId: pulumi.StringRef(\"a86d7112-d740-4758-9c9c-31e66373746b\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"number\", dc.Number)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dc = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()\n            .metroCode(\"DC\")\n            .status(\"Active\")\n            .projectId(\"a86d7112-d740-4758-9c9c-31e66373746b\")\n            .build());\n\n        ctx.export(\"number\", dc.applyValue(getAccountResult -\u003e getAccountResult.number()));\n    }\n}\n```\n```yaml\nvariables:\n  dc:\n    fn::invoke:\n      Function: equinix:networkedge:getAccount\n      Arguments:\n        metroCode: DC\n        status: Active\n        projectId: a86d7112-d740-4758-9c9c-31e66373746b\noutputs:\n  number: ${dc.number}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "metroCode": {
                        "type": "string",
                        "description": "Account location metro code.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account name for filtering.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique Identifier for the project resource where the account is scoped to.If you\nleave it out, all the billing accounts under all projects in your organization will be returned and it may return more than one account.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Account status for filtering. Possible values are: `Active`, `Processing`,\n`Submitted`, `Staged`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string",
                        "description": "Account unique number.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "ucmId": {
                        "type": "string",
                        "description": "Account unique identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode",
                    "name",
                    "number",
                    "projectId",
                    "status",
                    "ucmId",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDevice:getDevice": {
            "description": "Use this data source to get Equinix Network Edge device details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst byUuid = equinix.networkedge.getDevice({\n    uuid: \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n});\nconst byName = equinix.networkedge.getDevice({\n    name: \"Arcus-Gateway-A1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nby_uuid = equinix.networkedge.get_device(uuid=\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\")\nby_name = equinix.networkedge.get_device(name=\"Arcus-Gateway-A1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byUuid = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Uuid = \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n    });\n\n    var byName = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Name = \"Arcus-Gateway-A1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tUuid: pulumi.StringRef(\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"Arcus-Gateway-A1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byUuid = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .uuid(\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\")\n            .build());\n\n        final var byName = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"Arcus-Gateway-A1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byUuid:\n    fn::invoke:\n      Function: equinix:networkedge:getDevice\n      Arguments:\n        uuid: f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\n  byName:\n    fn::invoke:\n      Function: equinix:networkedge:getDevice\n      Arguments:\n        name: Arcus-Gateway-A1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of an existing Equinix Network Edge device\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of an existing Equinix Network Edge device\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Device states to be considered valid when searching for a device by name\n\nNOTE: Exactly one of either `uuid` or `name` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string"
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Unique identifier of applied ACL template\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "Autonomous system number\n"
                    },
                    "byol": {
                        "type": "boolean"
                    },
                    "clusterDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceClusterDetail:getDeviceClusterDetail"
                        }
                    },
                    "connectivity": {
                        "type": "string",
                        "description": "Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT)\n"
                    },
                    "coreCount": {
                        "type": "integer"
                    },
                    "diverseDeviceId": {
                        "type": "string",
                        "description": "diverse device uuid\n"
                    },
                    "diverseDeviceName": {
                        "type": "string",
                        "description": "Name of the device with diverse device UUID\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceCount": {
                        "type": "integer"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceInterface:getDeviceInterface"
                        },
                        "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n"
                    },
                    "licenseFile": {
                        "type": "string"
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "Unique identifier of applied license file\n"
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n* NA\n"
                    },
                    "licenseToken": {
                        "type": "string"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderReference": {
                        "type": "string"
                    },
                    "packageCode": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "purchaseOrderNumber": {
                        "type": "string"
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region\n"
                    },
                    "secondaryDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDevice:getDeviceSecondaryDevice"
                        }
                    },
                    "selfManaged": {
                        "type": "boolean"
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceSshKey:getDeviceSshKey"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n* RESOURCE_UPGRADE_IN_PROGRESS\n* RESOURCE_UPGRADE_FAILED\n"
                    },
                    "termLength": {
                        "type": "integer"
                    },
                    "throughput": {
                        "type": "integer"
                    },
                    "throughputUnit": {
                        "type": "string"
                    },
                    "typeCode": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Comma separated list of device states (from see `status` for full list) to be considered valid. Default is 'PROVISIONED'.  Case insensitive.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "type": "string"
                    },
                    "wanInterfaceId": {
                        "type": "string"
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountNumber",
                    "aclTemplateId",
                    "additionalBandwidth",
                    "asn",
                    "byol",
                    "clusterDetails",
                    "connectivity",
                    "coreCount",
                    "diverseDeviceId",
                    "diverseDeviceName",
                    "hostname",
                    "ibx",
                    "interfaces",
                    "interfaceCount",
                    "licenseFile",
                    "licenseFileId",
                    "licenseStatus",
                    "licenseToken",
                    "metroCode",
                    "mgmtAclTemplateUuid",
                    "name",
                    "notifications",
                    "orderReference",
                    "packageCode",
                    "projectId",
                    "purchaseOrderNumber",
                    "redundancyType",
                    "redundantId",
                    "region",
                    "secondaryDevices",
                    "selfManaged",
                    "sshIpAddress",
                    "sshIpFqdn",
                    "sshKeys",
                    "status",
                    "termLength",
                    "throughput",
                    "throughputUnit",
                    "typeCode",
                    "uuid",
                    "vendorConfiguration",
                    "version",
                    "wanInterfaceId",
                    "zoneCode",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDevicePlatform:getDevicePlatform": {
            "description": "Use this data source to get Equinix Network Edge device platform configuration details\nfor a given device type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst csrLarge = equinix.networkedge.getDevicePlatform({\n    deviceType: \"CSR1000V\",\n    flavor: \"large\",\n    packages: [\"IPBASE\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_large = equinix.networkedge.get_device_platform(device_type=\"CSR1000V\",\n    flavor=\"large\",\n    packages=[\"IPBASE\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csrLarge = Equinix.NetworkEdge.GetDevicePlatform.Invoke(new()\n    {\n        DeviceType = \"CSR1000V\",\n        Flavor = \"large\",\n        Packages = new[]\n        {\n            \"IPBASE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDevicePlatform(ctx, \u0026networkedge.GetDevicePlatformArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tFlavor:     pulumi.StringRef(\"large\"),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDevicePlatformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLarge = NetworkedgeFunctions.getDevicePlatform(GetDevicePlatformArgs.builder()\n            .deviceType(\"CSR1000V\")\n            .flavor(\"large\")\n            .packages(\"IPBASE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLarge:\n    fn::invoke:\n      Function: equinix:networkedge:getDevicePlatform\n      Arguments:\n        deviceType: CSR1000V\n        flavor: large\n        packages:\n          - IPBASE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used to limit platform search results.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Device type code\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Device platform flavor that determines number of CPU cores and memory.\nSupported values are: `small`, `medium`, `large`, `xlarge`.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device licensing options to limit platform search result.\nSupported values are: `BYOL` (for Bring Your Own License), `Sub` (for license subscription).\n"
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device management types to limit platform search results.\nSupported values are: `EQUINIX-CONFIGURED`, `SELF-CONFIGURED`.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of software package codes to limit platform search results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "flavor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of memory provided by device platform.\n"
                    },
                    "memoryUnit": {
                        "type": "string",
                        "description": "Unit of memory provider by device platform.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "coreCount",
                    "deviceType",
                    "flavor",
                    "licenseOptions",
                    "managementTypes",
                    "memory",
                    "memoryUnit",
                    "packages",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDeviceSoftware:getDeviceSoftware": {
            "description": "Use this data source to get Equinix Network Edge device software details for a given\ndevice type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst csrLatest1609 = equinix.networkedge.getDeviceSoftware({\n    deviceType: \"CSR1000V\",\n    mostRecent: true,\n    packages: [\"IPBASE\"],\n    versionRegex: \"^16.09.+\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_latest1609 = equinix.networkedge.get_device_software(device_type=\"CSR1000V\",\n    most_recent=True,\n    packages=[\"IPBASE\"],\n    version_regex=\"^16.09.+\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csrLatest1609 = Equinix.NetworkEdge.GetDeviceSoftware.Invoke(new()\n    {\n        DeviceType = \"CSR1000V\",\n        MostRecent = true,\n        Packages = new[]\n        {\n            \"IPBASE\",\n        },\n        VersionRegex = \"^16.09.+\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDeviceSoftware(ctx, \u0026networkedge.GetDeviceSoftwareArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t\tVersionRegex: pulumi.StringRef(\"^16.09.+\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceSoftwareArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLatest1609 = NetworkedgeFunctions.getDeviceSoftware(GetDeviceSoftwareArgs.builder()\n            .deviceType(\"CSR1000V\")\n            .mostRecent(true)\n            .packages(\"IPBASE\")\n            .versionRegex(\"^16.09.+\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLatest1609:\n    fn::invoke:\n      Function: equinix:networkedge:getDeviceSoftware\n      Arguments:\n        deviceType: CSR1000V\n        mostRecent: true\n        packages:\n          - IPBASE\n        versionRegex: ^16.09.+\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceSoftware.\n",
                "properties": {
                    "deviceType": {
                        "type": "string",
                        "description": "Code of a device type.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate that most recent version should be used *(in\ncase when more than one result is returned)*.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Limits returned versions to those that are supported by given software\npackage codes.\n"
                    },
                    "stable": {
                        "type": "boolean",
                        "description": "Boolean value to limit query results to stable versions only.\n"
                    },
                    "versionRegex": {
                        "type": "string",
                        "description": "A regex string to apply on returned versions and filter search\nresults.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceSoftware.\n",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Version release date.\n"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageName": {
                        "type": "string",
                        "description": "Software image name.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "releaseNotesLink": {
                        "type": "string",
                        "description": "Link to version release notes.\n"
                    },
                    "stable": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string",
                        "description": "Version status.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version number.\n"
                    },
                    "versionRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "date",
                    "deviceType",
                    "imageName",
                    "packages",
                    "releaseNotesLink",
                    "stable",
                    "status",
                    "version",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDeviceType:getDeviceType": {
            "description": "Use this data source to get Equinix Network Edge device type details. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst ciscoRouter = equinix.networkedge.getDeviceType({\n    category: \"Router\",\n    metroCodes: [\n        \"DC\",\n        \"SV\",\n    ],\n    vendor: \"Cisco\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncisco_router = equinix.networkedge.get_device_type(category=\"Router\",\n    metro_codes=[\n        \"DC\",\n        \"SV\",\n    ],\n    vendor=\"Cisco\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ciscoRouter = Equinix.NetworkEdge.GetDeviceType.Invoke(new()\n    {\n        Category = \"Router\",\n        MetroCodes = new[]\n        {\n            \"DC\",\n            \"SV\",\n        },\n        Vendor = \"Cisco\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDeviceType(ctx, \u0026networkedge.GetDeviceTypeArgs{\n\t\t\tCategory: pulumi.StringRef(\"Router\"),\n\t\t\tMetroCodes: []string{\n\t\t\t\t\"DC\",\n\t\t\t\t\"SV\",\n\t\t\t},\n\t\t\tVendor: pulumi.StringRef(\"Cisco\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ciscoRouter = NetworkedgeFunctions.getDeviceType(GetDeviceTypeArgs.builder()\n            .category(\"Router\")\n            .metroCodes(            \n                \"DC\",\n                \"SV\")\n            .vendor(\"Cisco\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ciscoRouter:\n    fn::invoke:\n      Function: equinix:networkedge:getDeviceType\n      Arguments:\n        category: Router\n        metroCodes:\n          - DC\n          - SV\n        vendor: Cisco\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Device type category. One of: `Router`, `Firewall`, `SDWAN`.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of metro codes where device type has to be available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device type name.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string",
                        "description": "Device type short code, unique identifier of a network device type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Device type textual description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "code",
                    "description",
                    "metroCodes",
                    "name",
                    "vendor",
                    "id"
                ]
            }
        }
    }
}