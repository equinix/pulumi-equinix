{
    "name": "equinix",
    "displayName": "Equinix",
    "description": "A Pulumi package for creating and managing equinix cloud resources.",
    "keywords": [
        "pulumi",
        "equinix",
        "category/cloud"
    ],
    "homepage": "https://deploy.equinix.com/",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`equinix` Terraform Provider](https://github.com/equinix/terraform-provider-equinix).",
    "repository": "https://github.com/equinix/pulumi-equinix",
    "pluginDownloadURL": "https://github.com/equinix/pulumi-equinix/releases/download/0.0.1-alpha.1678463449+7a8d98d9.dirty",
    "publisher": "Equinix",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "equinix": "Equinix",
                "fabric": "Fabric",
                "metal": "Metal",
                "networkedge": "NetworkEdge"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumi"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/equinix/pulumi-equinix/sdk/go/equinix"
        },
        "java": {
            "basePackage": "com.equinix.pulumi",
            "buildFiles": "gradle",
            "gradleNexusPublishPluginVersion": ""
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing equinix cloud resources.",
            "packageName": "@equinix/pulumi-equinix",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-equinix` repo](https://github.com/equinix/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumi_equinix",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/equinix/terraform-provider-equinix)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-equinix` repo](https://github.com/equinix/pulumi-equinix/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-equinix` repo](https://github.com/equinix/terraform-provider-equinix/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "types": {
        "equinix:fabric/ConnectionASide:ConnectionASide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPoint:ConnectionASideAccessPoint",
                    "description": "Point of access details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAdditionalInfo:ConnectionASideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideServiceToken:ConnectionASideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionASideAccessPoint:ConnectionASideAccessPoint": {
            "properties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointAccount:ConnectionASideAccessPointAccount",
                    "description": "Customer account information that is associated with this connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointGateway:ConnectionASideAccessPointGateway",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointInterface:ConnectionASideAccessPointInterface",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointLinkProtocol:ConnectionASideAccessPointLinkProtocol",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointLocation:ConnectionASideAccessPointLocation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peeringType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointPeeringType:AccessPointPeeringType"
                        }
                    ],
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointPort:ConnectionASideAccessPointPort",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointProfile:ConnectionASideAccessPointProfile",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerConnectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routingProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointRoutingProtocol:ConnectionASideAccessPointRoutingProtocol"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointType:AccessPointType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointVirtualDevice:ConnectionASideAccessPointVirtualDevice",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "location"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointAccount:ConnectionASideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointGateway:ConnectionASideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointInterface:ConnectionASideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointLinkProtocol:ConnectionASideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanSTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanCTag",
                        "vlanSTag",
                        "vlanTag"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointLocation:ConnectionASideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointPort:ConnectionASideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointPortRedundancy:ConnectionASideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "name",
                        "redundancies",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointPortRedundancy:ConnectionASideAccessPointPortRedundancy": {
            "properties": {
                "priority": {
                    "type": "string",
                    "description": "Priority type- PRIMARY, SECONDARY\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "priority"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointProfile:ConnectionASideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionASideAccessPointProfileAccessPointTypeConfig:ConnectionASideAccessPointProfileAccessPointTypeConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessPointTypeConfigs",
                        "description",
                        "href",
                        "name",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointProfileAccessPointTypeConfig:ConnectionASideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAccessPointRoutingProtocol:ConnectionASideAccessPointRoutingProtocol": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionASideAccessPointVirtualDevice:ConnectionASideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionASideAdditionalInfo:ConnectionASideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionASideServiceToken:ConnectionASideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/serviceTokenType:ServiceTokenType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionAccount:ConnectionAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionAdditionalInfo:ConnectionAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionChangeLog:ConnectionChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionNotification:ConnectionNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/notificationsType:NotificationsType"
                        }
                    ],
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/ConnectionOperation:ConnectionOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperationError:ConnectionOperationError"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "equinixStatus",
                        "errors",
                        "providerStatus"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOperationError:ConnectionOperationError": {
            "properties": {
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperationErrorAdditionalInfo:ConnectionOperationErrorAdditionalInfo"
                    },
                    "description": "Connection additional information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "correlationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "details": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "help": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalInfo",
                        "correlationId",
                        "details",
                        "errorCode",
                        "errorMessage",
                        "help"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOperationErrorAdditionalInfo:ConnectionOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reason": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "property",
                        "reason"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionOrder:ConnectionOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "description": "Billing tier for connection bandwidth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderId": {
                    "type": "string",
                    "description": "Order Identification\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderNumber": {
                    "type": "string",
                    "description": "Order Reference Number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "orderId",
                        "orderNumber"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionProject:ConnectionProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "projectId"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionRedundancy:ConnectionRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Redundancy group identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "description": "Priority type- PRIMARY, SECONDARY\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "group"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSide:ConnectionZSide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPoint:ConnectionZSideAccessPoint",
                    "description": "Point of access details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAdditionalInfo:ConnectionZSideAdditionalInfo"
                    },
                    "description": "Connection side additional information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideServiceToken:ConnectionZSideServiceToken",
                    "description": "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionZSideAccessPoint:ConnectionZSideAccessPoint": {
            "properties": {
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointAccount:ConnectionZSideAccessPointAccount",
                    "description": "Customer account information that is associated with this connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointGateway:ConnectionZSideAccessPointGateway",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interface": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointInterface:ConnectionZSideAccessPointInterface",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocol": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointLinkProtocol:ConnectionZSideAccessPointLinkProtocol",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointLocation:ConnectionZSideAccessPointLocation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peeringType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointPeeringType:AccessPointPeeringType"
                        }
                    ],
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointPort:ConnectionZSideAccessPointPort",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointProfile:ConnectionZSideAccessPointProfile",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerConnectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routingProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointRoutingProtocol:ConnectionZSideAccessPointRoutingProtocol"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointType:AccessPointType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualDevice": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointVirtualDevice:ConnectionZSideAccessPointVirtualDevice",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "account",
                        "location"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointAccount:ConnectionZSideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountName",
                        "accountNumber",
                        "globalCustId",
                        "globalOrgId",
                        "globalOrganizationName",
                        "orgId",
                        "organizationName"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointGateway:ConnectionZSideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointInterface:ConnectionZSideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointLinkProtocol:ConnectionZSideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanSTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vlanCTag",
                        "vlanSTag",
                        "vlanTag"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointLocation:ConnectionZSideAccessPointLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointPort:ConnectionZSideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointPortRedundancy:ConnectionZSideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "name",
                        "redundancies",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointPortRedundancy:ConnectionZSideAccessPointPortRedundancy": {
            "properties": {
                "priority": {
                    "type": "string",
                    "description": "Priority type- PRIMARY, SECONDARY\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "priority"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointProfile:ConnectionZSideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSideAccessPointProfileAccessPointTypeConfig:ConnectionZSideAccessPointProfileAccessPointTypeConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessPointTypeConfigs",
                        "description",
                        "href",
                        "name",
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointProfileAccessPointTypeConfig:ConnectionZSideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAccessPointRoutingProtocol:ConnectionZSideAccessPointRoutingProtocol": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionZSideAccessPointVirtualDevice:ConnectionZSideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ConnectionZSideAdditionalInfo:ConnectionZSideAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Additional information key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Additional information value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ConnectionZSideServiceToken:ConnectionZSideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/serviceTokenType:ServiceTokenType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "href"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "description": "Availability of a bandwidth upgrade. The default is false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "description": "Setting to enable or disable the ability of the buyer to customize the bandwidth\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "description": "Setting to allow or prohibit remote connections to the service profile\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiConfig": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigApiConfig:ServiceProfileAccessPointTypeConfigApiConfig",
                    "description": "Api configuration details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKey": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigAuthenticationKey:ServiceProfileAccessPointTypeConfigAuthenticationKey",
                    "description": "Authentication key details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "description": "Percentage of port bandwidth at which an allocation alert is generated\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLabel": {
                    "type": "string",
                    "description": "Custom name for Connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "description": "Mandate redundant connections\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "description": "Enable auto generate service key\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocolConfig": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfigLinkProtocolConfig:ServiceProfileAccessPointTypeConfigLinkProtocolConfig",
                    "description": "Link protocol configuration details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Supported bandwidths\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileAccessPointType:ProfileAccessPointType"
                        }
                    ],
                    "description": "Type of access point type config - VD, COLO\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigApiConfig:ServiceProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigAuthenticationKey:ServiceProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccessPointTypeConfigLinkProtocolConfig:ServiceProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileAccount:ServiceProfileAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "Account Name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "description": "Account Number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "description": "Global Customer organization identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "description": "Global organization identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "description": "Global organization name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "description": "Customer organization identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "description": "Customer organization name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ucmId": {
                    "type": "string",
                    "description": "Enterprise datastore id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "createdByEmail",
                        "createdByFullName",
                        "createdDateTime",
                        "deletedBy",
                        "deletedByEmail",
                        "deletedByFullName",
                        "deletedDateTime",
                        "updatedBy",
                        "updatedByEmail",
                        "updatedByFullName",
                        "updatedDateTime"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "description": "Required field\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataType": {
                    "type": "string",
                    "description": "Data type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Label\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "description": "Required field\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataType",
                "label",
                "required"
            ]
        },
        "equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "description": "Logo\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfoProcessStep:ServiceProfileMarketingInfoProcessStep"
                    },
                    "description": "Process Step\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "promotion": {
                    "type": "boolean",
                    "description": "Promotion\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileMarketingInfoProcessStep:ServiceProfileMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subTitle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileMetro:ServiceProfileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Metro Code - Example SV\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Display Name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IBX- Equinix International Business Exchange list\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inTrail": {
                    "type": "boolean",
                    "description": "In Trail\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Metro Name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Seller Regions\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/ServiceProfileNotification:ServiceProfileNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendInterval": {
                    "type": "string",
                    "description": "Send interval\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/notificationsType:NotificationsType"
                        }
                    ],
                    "description": "Notification Type - ALL,CONNECTION*APPROVAL,SALES*REP_NOTIFICATIONS, NOTIFICATIONS\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "emails",
                "type"
            ]
        },
        "equinix:fabric/ServiceProfilePort:ServiceProfilePort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "description": "Cross Connect Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfilePortLocation:ServiceProfilePortLocation"
                    },
                    "description": "Colo/Port Location\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "description": "Seller Region\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "description": "Seller Region details\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Colo/Port Type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Colo/Port Uuid\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ]
        },
        "equinix:fabric/ServiceProfilePortLocation:ServiceProfilePortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileProject:ServiceProfileProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "href",
                        "projectId"
                    ]
                }
            }
        },
        "equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice": {
            "properties": {
                "interfaceUuid": {
                    "type": "string",
                    "description": "Device Interface Uuid\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDeviceLocation:ServiceProfileVirtualDeviceLocation",
                    "description": "Device Location\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Virtual Device Type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Virtual Device Uuid\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "uuid"
            ]
        },
        "equinix:fabric/ServiceProfileVirtualDeviceLocation:ServiceProfileVirtualDeviceLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ibx",
                        "metroCode",
                        "metroName",
                        "region"
                    ]
                }
            }
        },
        "equinix:fabric/accessPointLinkProtocolType:AccessPointLinkProtocolType": {
            "type": "string",
            "enum": [
                {
                    "name": "Untagged",
                    "value": "UNTAGGED"
                },
                {
                    "name": "Dot1q",
                    "value": "DOT1Q"
                },
                {
                    "name": "QinQ",
                    "value": "QINQ"
                },
                {
                    "name": "EVPN_VXLAN",
                    "value": "EVPN_VXLAN"
                }
            ]
        },
        "equinix:fabric/accessPointPeeringType:AccessPointPeeringType": {
            "type": "string",
            "enum": [
                {
                    "name": "Private",
                    "value": "PRIVATE"
                },
                {
                    "name": "Microsoft",
                    "value": "MICROSOFT"
                },
                {
                    "name": "Public",
                    "value": "PUBLIC"
                }
            ]
        },
        "equinix:fabric/accessPointType:AccessPointType": {
            "type": "string",
            "enum": [
                {
                    "name": "Colo",
                    "description": "Colocation",
                    "value": "COLO"
                },
                {
                    "name": "VD",
                    "description": "Virtual Device",
                    "value": "VD"
                },
                {
                    "name": "SP",
                    "description": "Service Profile",
                    "value": "SP"
                },
                {
                    "name": "IGW",
                    "description": "Internet Gateway",
                    "value": "IGW"
                },
                {
                    "name": "Subnet",
                    "description": "Subnet",
                    "value": "SUBNET"
                },
                {
                    "name": "GW",
                    "description": "Gateway",
                    "value": "GW"
                },
                {
                    "name": "Network",
                    "description": "Network",
                    "value": "NETWORK"
                }
            ]
        },
        "equinix:fabric/connectionType:ConnectionType": {
            "type": "string",
            "enum": [
                {
                    "name": "VG",
                    "description": "Virtual Gateway",
                    "value": "VG_VC"
                },
                {
                    "name": "EVPL",
                    "description": "Ethernet Virtual Private Line",
                    "value": "EVPL_VC"
                },
                {
                    "name": "EPL",
                    "description": "Ethernet Private Line",
                    "value": "EPL_VC"
                },
                {
                    "name": "GW",
                    "description": "Fabric Gateway virtual connection",
                    "value": "GW_VC"
                },
                {
                    "name": "AccessEPL",
                    "description": "E-access, layer 2 connection between a QINQ port and an EPL port.",
                    "value": "ACCESS_EPL_VC"
                }
            ]
        },
        "equinix:fabric/getConnectionASide:getConnectionASide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideAccessPoint:getConnectionASideAccessPoint",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/getConnectionASideServiceToken:getConnectionASideServiceToken",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessPoint",
                "serviceToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPoint:getConnectionASideAccessPoint": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointAccount:getConnectionASideAccessPointAccount"
                    },
                    "description": "Customer account information that is associated with this connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointGateway:getConnectionASideAccessPointGateway"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointInterface:getConnectionASideAccessPointInterface"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointLinkProtocol:getConnectionASideAccessPointLinkProtocol"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointLocation:getConnectionASideAccessPointLocation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peeringType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointPort:getConnectionASideAccessPointPort"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfile:getConnectionASideAccessPointProfile"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerConnectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointVirtualDevice:getConnectionASideAccessPointVirtualDevice"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "authenticationKey",
                "gateways",
                "interfaces",
                "linkProtocols",
                "locations",
                "peeringType",
                "ports",
                "profiles",
                "providerConnectionId",
                "sellerRegion",
                "type",
                "virtualDevices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointAccount:getConnectionASideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointGateway:getConnectionASideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "state",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointInterface:getConnectionASideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointLinkProtocol:getConnectionASideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanSTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "vlanCTag",
                "vlanSTag",
                "vlanTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointLocation:getConnectionASideAccessPointLocation": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointPort:getConnectionASideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointPortRedundancy:getConnectionASideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "name",
                "redundancies",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointPortRedundancy:getConnectionASideAccessPointPortRedundancy": {
            "properties": {
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfile:getConnectionASideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfig:getConnectionASideAccessPointProfileAccessPointTypeConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfig:getConnectionASideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigApiConfig:getConnectionASideAccessPointProfileAccessPointTypeConfigApiConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKey:getConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig:getConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowBandwidthAutoApproval",
                "allowBandwidthUpgrade",
                "allowCustomBandwidth",
                "allowRemoteConnections",
                "apiConfigs",
                "authenticationKeys",
                "bandwidthAlertThreshold",
                "connectionLabel",
                "connectionRedundancyRequired",
                "enableAutoGenerateServiceKey",
                "linkProtocolConfigs",
                "supportedBandwidths",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigApiConfig:getConnectionASideAccessPointProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowOverSubscription",
                "apiAvailable",
                "bandwidthFromApi",
                "equinixManagedPort",
                "equinixManagedVlan",
                "integrationId",
                "overSubscriptionLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKey:getConnectionASideAccessPointProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig:getConnectionASideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encapsulation",
                "encapsulationStrategy",
                "reuseVlanSTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideAccessPointVirtualDevice:getConnectionASideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionASideServiceToken:getConnectionASideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionAccount:getConnectionAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionAdditionalInfo:getConnectionAdditionalInfo": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionChangeLog:getConnectionChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionNotification:getConnectionNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendInterval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "emails",
                "sendInterval",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperation:getConnectionOperation": {
            "properties": {
                "equinixStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperationError:getConnectionOperationError"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "equinixStatus",
                "errors",
                "providerStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperationError:getConnectionOperationError": {
            "properties": {
                "additionalInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperationErrorAdditionalInfo:getConnectionOperationErrorAdditionalInfo"
                    },
                    "description": "Connection additional information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "correlationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "details": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "help": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalInfos",
                "correlationId",
                "details",
                "errorCode",
                "errorMessage",
                "help"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOperationErrorAdditionalInfo:getConnectionOperationErrorAdditionalInfo": {
            "properties": {
                "property": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reason": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "property",
                "reason"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionOrder:getConnectionOrder": {
            "properties": {
                "billingTier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingTier",
                "orderId",
                "orderNumber",
                "purchaseOrderNumber"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionProject:getConnectionProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Unique Resource URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionRedundancy:getConnectionRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSide:getConnectionZSide": {
            "properties": {
                "accessPoint": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPoint:getConnectionZSideAccessPoint",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceToken": {
                    "$ref": "#/types/equinix:fabric/getConnectionZSideServiceToken:getConnectionZSideServiceToken",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessPoint",
                "serviceToken"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPoint:getConnectionZSideAccessPoint": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointAccount:getConnectionZSideAccessPointAccount"
                    },
                    "description": "Customer account information that is associated with this connection\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointGateway:getConnectionZSideAccessPointGateway"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointInterface:getConnectionZSideAccessPointInterface"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointLinkProtocol:getConnectionZSideAccessPointLinkProtocol"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointLocation:getConnectionZSideAccessPointLocation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peeringType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointPort:getConnectionZSideAccessPointPort"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfile:getConnectionZSideAccessPointProfile"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerConnectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointVirtualDevice:getConnectionZSideAccessPointVirtualDevice"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "authenticationKey",
                "gateways",
                "interfaces",
                "linkProtocols",
                "locations",
                "peeringType",
                "ports",
                "profiles",
                "providerConnectionId",
                "sellerRegion",
                "type",
                "virtualDevices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointAccount:getConnectionZSideAccessPointAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointGateway:getConnectionZSideAccessPointGateway": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "state",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointInterface:getConnectionZSideAccessPointInterface": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointLinkProtocol:getConnectionZSideAccessPointLinkProtocol": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanSTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanTag": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "vlanCTag",
                "vlanSTag",
                "vlanTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointLocation:getConnectionZSideAccessPointLocation": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointPort:getConnectionZSideAccessPointPort": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointPortRedundancy:getConnectionZSideAccessPointPortRedundancy"
                    },
                    "description": "Redundancy Information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "name",
                "redundancies",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointPortRedundancy:getConnectionZSideAccessPointPortRedundancy": {
            "properties": {
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfile:getConnectionZSideAccessPointProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKey:getConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowBandwidthAutoApproval",
                "allowBandwidthUpgrade",
                "allowCustomBandwidth",
                "allowRemoteConnections",
                "apiConfigs",
                "authenticationKeys",
                "bandwidthAlertThreshold",
                "connectionLabel",
                "connectionRedundancyRequired",
                "enableAutoGenerateServiceKey",
                "linkProtocolConfigs",
                "supportedBandwidths",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowOverSubscription",
                "apiAvailable",
                "bandwidthFromApi",
                "equinixManagedPort",
                "equinixManagedVlan",
                "integrationId",
                "overSubscriptionLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKey:getConnectionZSideAccessPointProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig:getConnectionZSideAccessPointProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encapsulation",
                "encapsulationStrategy",
                "reuseVlanSTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideAccessPointVirtualDevice:getConnectionZSideAccessPointVirtualDevice": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getConnectionZSideServiceToken:getConnectionZSideServiceToken": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Customer-provided connection description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix-assigned connection identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "href",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortAccount:getPortAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortChangeLog:getPortChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortDevice:getPortDevice": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Port name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortDeviceRedundancy:getPortDeviceRedundancy"
                    },
                    "description": "Port redundancy information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "redundancies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortDeviceRedundancy:getPortDeviceRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortEncapsulation:getPortEncapsulation": {
            "properties": {
                "tagProtocolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Port type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tagProtocolId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortLag:getPortLag": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Port name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "id",
                "memberStatus",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortLocation:getPortLocation": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Port URI information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortOperation:getPortOperation": {
            "properties": {
                "connectionCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opStatusChangedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "connectionCount",
                "opStatusChangedAt",
                "operationalStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortRedundancy:getPortRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatum:getPortsDatum": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumAccount:getPortsDatumAccount"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availableBandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumChangeLog:getPortsDatumChangeLog"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumDevice:getPortsDatumDevice"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumEncapsulation:getPortsDatumEncapsulation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumLag:getPortsDatumLag"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumLocation:getPortsDatumLocation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumOperation:getPortsDatumOperation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumRedundancy:getPortsDatumRedundancy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usedBandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accounts",
                "availableBandwidth",
                "bandwidth",
                "changeLogs",
                "description",
                "devices",
                "encapsulations",
                "href",
                "lags",
                "locations",
                "name",
                "operations",
                "redundancies",
                "serviceType",
                "state",
                "type",
                "usedBandwidth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumAccount:getPortsDatumAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumChangeLog:getPortsDatumChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumDevice:getPortsDatumDevice": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getPortsDatumDeviceRedundancy:getPortsDatumDeviceRedundancy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "redundancies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumDeviceRedundancy:getPortsDatumDeviceRedundancy": {
            "properties": {
                "group": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumEncapsulation:getPortsDatumEncapsulation": {
            "properties": {
                "tagProtocolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tagProtocolId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumLag:getPortsDatumLag": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memberStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "id",
                "memberStatus",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumLocation:getPortsDatumLocation": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumOperation:getPortsDatumOperation": {
            "properties": {
                "connectionCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opStatusChangedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "connectionCount",
                "opStatusChangedAt",
                "operationalStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsDatumRedundancy:getPortsDatumRedundancy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "priority"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getPortsFilter:getPortsFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Query Parameter to Get Ports By Name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfig:getServiceProfileAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigApiConfig:getServiceProfileAccessPointTypeConfigApiConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigAuthenticationKey:getServiceProfileAccessPointTypeConfigAuthenticationKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfigLinkProtocolConfig:getServiceProfileAccessPointTypeConfigLinkProtocolConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowBandwidthAutoApproval",
                "allowBandwidthUpgrade",
                "allowCustomBandwidth",
                "allowRemoteConnections",
                "apiConfigs",
                "authenticationKeys",
                "bandwidthAlertThreshold",
                "connectionLabel",
                "connectionRedundancyRequired",
                "enableAutoGenerateServiceKey",
                "linkProtocolConfigs",
                "supportedBandwidths",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigApiConfig:getServiceProfileAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowOverSubscription",
                "apiAvailable",
                "bandwidthFromApi",
                "equinixManagedPort",
                "equinixManagedVlan",
                "integrationId",
                "overSubscriptionLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigAuthenticationKey:getServiceProfileAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccessPointTypeConfigLinkProtocolConfig:getServiceProfileAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encapsulation",
                "encapsulationStrategy",
                "reuseVlanSTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileAccount:getServiceProfileAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ucmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileChangeLog:getServiceProfileChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileCustomField:getServiceProfileCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "captureInEmail",
                "dataType",
                "description",
                "label",
                "options",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileMarketingInfo:getServiceProfileMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileMarketingInfoProcessStep:getServiceProfileMarketingInfoProcessStep"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "promotion": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "logo",
                "processSteps",
                "promotion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileMarketingInfoProcessStep:getServiceProfileMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subTitle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "subTitle",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileMetro:getServiceProfileMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inTrail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "displayName",
                "ibxs",
                "inTrail",
                "name",
                "sellerRegions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileNotification:getServiceProfileNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendInterval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "emails",
                "sendInterval",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilePort:getServiceProfilePort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilePortLocation:getServiceProfilePortLocation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "crossConnectId",
                "locations",
                "sellerRegion",
                "sellerRegionDescription",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilePortLocation:getServiceProfilePortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfileProject:getServiceProfileProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "Service Profile URI response attribute\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatum:getServiceProfilesDatum": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfig:getServiceProfilesDatumAccessPointTypeConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccount:getServiceProfilesDatumAccount"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "changeLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumChangeLog:getServiceProfilesDatumChangeLog"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumCustomField:getServiceProfilesDatumCustomField"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "marketingInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMarketingInfo:getServiceProfilesDatumMarketingInfo"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMetro:getServiceProfilesDatumMetro"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumNotification:getServiceProfilesDatumNotification"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumPort:getServiceProfilesDatumPort"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumProject:getServiceProfilesDatumProject"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selfProfile": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessPointTypeConfigs",
                "accounts",
                "allowedEmails",
                "changeLogs",
                "customFields",
                "description",
                "href",
                "marketingInfos",
                "metros",
                "name",
                "notifications",
                "ports",
                "projects",
                "selfProfile",
                "tags",
                "type",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfig:getServiceProfilesDatumAccessPointTypeConfig": {
            "properties": {
                "allowBandwidthAutoApproval": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowBandwidthUpgrade": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowCustomBandwidth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRemoteConnections": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigApiConfig:getServiceProfilesDatumAccessPointTypeConfigApiConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey:getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthAlertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionRedundancyRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoGenerateServiceKey": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkProtocolConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig:getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedBandwidths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowBandwidthAutoApproval",
                "allowBandwidthUpgrade",
                "allowCustomBandwidth",
                "allowRemoteConnections",
                "apiConfigs",
                "authenticationKeys",
                "bandwidthAlertThreshold",
                "connectionLabel",
                "connectionRedundancyRequired",
                "enableAutoGenerateServiceKey",
                "linkProtocolConfigs",
                "supportedBandwidths",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigApiConfig:getServiceProfilesDatumAccessPointTypeConfigApiConfig": {
            "properties": {
                "allowOverSubscription": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiAvailable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidthFromApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedPort": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "equinixManagedVlan": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overSubscriptionLimit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowOverSubscription",
                "apiAvailable",
                "bandwidthFromApi",
                "equinixManagedPort",
                "equinixManagedVlan",
                "integrationId",
                "overSubscriptionLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey:getServiceProfilesDatumAccessPointTypeConfigAuthenticationKey": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "label",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig:getServiceProfilesDatumAccessPointTypeConfigLinkProtocolConfig": {
            "properties": {
                "encapsulation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encapsulationStrategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reuseVlanSTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encapsulation",
                "encapsulationStrategy",
                "reuseVlanSTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumAccount:getServiceProfilesDatumAccount": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "accountNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalCustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrgId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalOrganizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ucmId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "accountNumber",
                "globalCustId",
                "globalOrgId",
                "globalOrganizationName",
                "orgId",
                "organizationName",
                "ucmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumChangeLog:getServiceProfilesDatumChangeLog": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedByFullName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedDateTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "createdByEmail",
                "createdByFullName",
                "createdDateTime",
                "deletedBy",
                "deletedByEmail",
                "deletedByFullName",
                "deletedDateTime",
                "updatedBy",
                "updatedByEmail",
                "updatedByFullName",
                "updatedDateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumCustomField:getServiceProfilesDatumCustomField": {
            "properties": {
                "captureInEmail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "captureInEmail",
                "dataType",
                "description",
                "label",
                "options",
                "required"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumMarketingInfo:getServiceProfilesDatumMarketingInfo": {
            "properties": {
                "logo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "processSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumMarketingInfoProcessStep:getServiceProfilesDatumMarketingInfoProcessStep"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "promotion": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "logo",
                "processSteps",
                "promotion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumMarketingInfoProcessStep:getServiceProfilesDatumMarketingInfoProcessStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subTitle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "subTitle",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumMetro:getServiceProfilesDatumMetro": {
            "properties": {
                "code": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibxs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inTrail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "displayName",
                "ibxs",
                "inTrail",
                "name",
                "sellerRegions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumNotification:getServiceProfilesDatumNotification": {
            "properties": {
                "emails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendInterval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "emails",
                "sendInterval",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumPort:getServiceProfilesDatumPort": {
            "properties": {
                "crossConnectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesDatumPortLocation:getServiceProfilesDatumPortLocation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sellerRegionDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "crossConnectId",
                "locations",
                "sellerRegion",
                "sellerRegionDescription",
                "type",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumPortLocation:getServiceProfilesDatumPortLocation": {
            "properties": {
                "ibx": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ibx",
                "metroCode",
                "metroName",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesDatumProject:getServiceProfilesDatumProject": {
            "properties": {
                "href": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "href",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Possible operator to use on filters = - equal\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "Search Criteria for Service Profile - /name, /uuid, /state, /metros/code, /visibility, /type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Values\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/getServiceProfilesSort:getServiceProfilesSort": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "Priority type- DESC, ASC\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "description": "Search operation sort criteria /name /state /changeLog/createdDateTime /changeLog/updatedDateTime\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:fabric/notificationsType:NotificationsType": {
            "type": "string",
            "enum": [
                {
                    "name": "All",
                    "value": "ALL"
                },
                {
                    "name": "ConnectionApproval",
                    "value": "CONNECTION_APPROVAL"
                },
                {
                    "name": "SalesNotifications",
                    "value": "SALES_REP_NOTIFICATIONS"
                },
                {
                    "name": "Notifications",
                    "value": "NOTIFICATIONS"
                }
            ]
        },
        "equinix:fabric/profileAccessPointType:ProfileAccessPointType": {
            "type": "string",
            "enum": [
                {
                    "name": "Colo",
                    "description": "Colocation",
                    "value": "COLO"
                },
                {
                    "name": "VD",
                    "description": "Virtual Device",
                    "value": "VD"
                }
            ]
        },
        "equinix:fabric/profileState:ProfileState": {
            "type": "string",
            "enum": [
                {
                    "name": "Active",
                    "value": "ACTIVE"
                },
                {
                    "name": "PendingApproval",
                    "value": "PENDING_APPROVAL"
                },
                {
                    "name": "Deleted",
                    "value": "DELETED"
                },
                {
                    "name": "Rejected",
                    "value": "REJECTED"
                }
            ]
        },
        "equinix:fabric/profileType:ProfileType": {
            "type": "string",
            "enum": [
                {
                    "name": "L2Profile",
                    "value": "L2_PROFILE"
                },
                {
                    "name": "L3Profile",
                    "value": "L3_PROFILE"
                }
            ]
        },
        "equinix:fabric/profileVisibility:ProfileVisibility": {
            "type": "string",
            "enum": [
                {
                    "name": "Public",
                    "value": "PUBLIC"
                },
                {
                    "name": "Private",
                    "value": "PRIVATE"
                }
            ]
        },
        "equinix:fabric/serviceTokenType:ServiceTokenType": {
            "type": "string",
            "enum": [
                {
                    "name": "VCToken",
                    "value": "VC_TOKEN"
                }
            ]
        },
        "equinix:index/metro:Metro": {
            "type": "string",
            "enum": [
                {
                    "name": "Amsterdam",
                    "value": "AM"
                },
                {
                    "name": "Ashburn",
                    "value": "DC"
                },
                {
                    "name": "Atlanta",
                    "value": "AT"
                },
                {
                    "name": "Barcelona",
                    "value": "BA"
                },
                {
                    "name": "Bogota",
                    "value": "BG"
                },
                {
                    "name": "Bordeaux",
                    "value": "BX"
                },
                {
                    "name": "Boston",
                    "value": "BO"
                },
                {
                    "name": "Brussels",
                    "value": "BL"
                },
                {
                    "name": "Calgary",
                    "value": "CL"
                },
                {
                    "name": "Canberra",
                    "value": "CA"
                },
                {
                    "name": "Chicago",
                    "value": "CH"
                },
                {
                    "name": "Dallas",
                    "value": "DA"
                },
                {
                    "name": "Denver",
                    "value": "DE"
                },
                {
                    "name": "Dubai",
                    "value": "DX"
                },
                {
                    "name": "Dublin",
                    "value": "DB"
                },
                {
                    "name": "Frankfurt",
                    "value": "FR"
                },
                {
                    "name": "Geneva",
                    "value": "GV"
                },
                {
                    "name": "Hamburg",
                    "value": "HH"
                },
                {
                    "name": "Helsinki",
                    "value": "HE"
                },
                {
                    "name": "HongKong",
                    "value": "HK"
                },
                {
                    "name": "Istanbul",
                    "value": "IL"
                },
                {
                    "name": "Kamloops",
                    "value": "KA"
                },
                {
                    "name": "Lisbon",
                    "value": "LS"
                },
                {
                    "name": "London",
                    "value": "LD"
                },
                {
                    "name": "LosAngeles",
                    "value": "LA"
                },
                {
                    "name": "Madrid",
                    "value": "MD"
                },
                {
                    "name": "Manchester",
                    "value": "MA"
                },
                {
                    "name": "Melbourne",
                    "value": "ME"
                },
                {
                    "name": "MexicoCity",
                    "value": "MX"
                },
                {
                    "name": "Miami",
                    "value": "MI"
                },
                {
                    "name": "Milan",
                    "value": "ML"
                },
                {
                    "name": "Montreal",
                    "value": "MT"
                },
                {
                    "name": "Mumbai",
                    "value": "MB"
                },
                {
                    "name": "Munich",
                    "value": "MU"
                },
                {
                    "name": "NewYork",
                    "value": "NY"
                },
                {
                    "name": "Osaka",
                    "value": "OS"
                },
                {
                    "name": "Paris",
                    "value": "PA"
                },
                {
                    "name": "Perth",
                    "value": "PE"
                },
                {
                    "name": "Philadelphia",
                    "value": "PH"
                },
                {
                    "name": "RioDeJaneiro",
                    "value": "RJ"
                },
                {
                    "name": "SaoPaulo",
                    "value": "SP"
                },
                {
                    "name": "Seattle",
                    "value": "SE"
                },
                {
                    "name": "Seoul",
                    "value": "SL"
                },
                {
                    "name": "SiliconValley",
                    "value": "SV"
                },
                {
                    "name": "Singapore",
                    "value": "SG"
                },
                {
                    "name": "Sofia",
                    "value": "SO"
                },
                {
                    "name": "Stockholm",
                    "value": "SK"
                },
                {
                    "name": "Sydney",
                    "value": "SY"
                },
                {
                    "name": "Tokyo",
                    "value": "TY"
                },
                {
                    "name": "Toronto",
                    "value": "TR"
                },
                {
                    "name": "Vancouver",
                    "value": "VA"
                },
                {
                    "name": "Warsaw",
                    "value": "WA"
                },
                {
                    "name": "Winnipeg",
                    "value": "WI"
                },
                {
                    "name": "Zurich",
                    "value": "ZH"
                }
            ]
        },
        "equinix:metal/ConnectionPort:ConnectionPort": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speed": {
                    "type": "integer",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "linkStatus",
                        "name",
                        "role",
                        "speed",
                        "status",
                        "virtualCircuitIds"
                    ]
                }
            }
        },
        "equinix:metal/ConnectionServiceToken:ConnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedSpeed": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiresAt",
                        "id",
                        "maxAllowedSpeed",
                        "role",
                        "state",
                        "type"
                    ]
                }
            }
        },
        "equinix:metal/DeviceBehavior:DeviceBehavior": {
            "properties": {
                "allowChanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:metal/DeviceIpAddress:DeviceIpAddress": {
            "properties": {
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reservationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of UUIDs of IP block reservations\nfrom which the public IPv4 address should be taken.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "equinix:metal/DeviceNetwork:DeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "integer",
                    "description": "CIDR suffix for IP address block to be assigned, i.e. amount of addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "cidr",
                        "family",
                        "gateway",
                        "public"
                    ]
                }
            }
        },
        "equinix:metal/DevicePort:DevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of `private_ipv4`, `public_ipv4`, `public_ipv6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bonded",
                        "id",
                        "mac",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "equinix:metal/DeviceReinstall:DeviceReinstall": {
            "properties": {
                "deprovisionFast": {
                    "type": "boolean",
                    "description": "Whether the OS disk should be filled with `00h` bytes before reinstall.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provider should favour reinstall over destroy and create. Defaults to\n`false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preserveData": {
                    "type": "boolean",
                    "description": "Whether the non-OS disks should be kept or wiped during reinstall.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "equinix:metal/OrganizationAddress:OrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "zipCode"
            ]
        },
        "equinix:metal/ProjectBgpConfig:ProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentType": {
                    "type": "string",
                    "description": "`private` or `public`, the `private` is likely to be usable immediately, the\n`public` will need to be reviewed by Equinix Metal engineers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "status of BGP configuration in the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asn",
                        "deploymentType",
                        "maxPrefix",
                        "status"
                    ]
                }
            }
        },
        "equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters": {
            "properties": {
                "alwaysPxe": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingCycle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customdata": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locked": {
                    "type": "boolean",
                    "description": "Blocks deletion of the SpotMarketRequest device until the lock is disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operatingSystem": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "termintationTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userdata": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingCycle",
                "hostname",
                "operatingSystem",
                "plan"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "billingCycle",
                        "hostname",
                        "operatingSystem",
                        "plan",
                        "termintationTime"
                    ]
                }
            }
        },
        "equinix:metal/billingCycle:BillingCycle": {
            "type": "string",
            "enum": [
                {
                    "name": "Hourly",
                    "value": "hourly"
                },
                {
                    "name": "Monthly",
                    "value": "monthly"
                }
            ]
        },
        "equinix:metal/facility:Facility": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/Facilities/operation/findFacilities",
            "type": "string",
            "enum": [
                {
                    "name": "AM2",
                    "description": "Amsterdam 2",
                    "value": "am2"
                },
                {
                    "name": "AM6",
                    "description": "Amsterdam 6",
                    "value": "am6"
                },
                {
                    "name": "MA5",
                    "description": "Manchester 5",
                    "value": "ma5"
                },
                {
                    "name": "NRT1",
                    "description": "Tokio 1",
                    "value": "nrt1"
                },
                {
                    "name": "PA4",
                    "description": "Paris 4",
                    "value": "pa4"
                },
                {
                    "name": "SK2",
                    "description": "Stockholm 2",
                    "value": "sk2"
                },
                {
                    "name": "ME2",
                    "description": "Melbourne 2",
                    "value": "me2"
                },
                {
                    "name": "HK2",
                    "description": "Hong Kong 2",
                    "value": "hk2"
                },
                {
                    "name": "TY11",
                    "description": "Tokyo 11",
                    "value": "ty11"
                },
                {
                    "name": "LA4",
                    "description": "Los Angeles 4",
                    "value": "la4"
                },
                {
                    "name": "DA6",
                    "description": "Dallas 6",
                    "value": "da6"
                },
                {
                    "name": "DA11",
                    "description": "Dallas 11",
                    "value": "da11"
                },
                {
                    "name": "DA3",
                    "description": "Dallas 3",
                    "value": "da3"
                },
                {
                    "name": "SP4",
                    "description": "Sao Paulo 4",
                    "value": "sp4"
                },
                {
                    "name": "MT1",
                    "description": "Montreal 1",
                    "value": "mt1"
                },
                {
                    "name": "SV16",
                    "description": "Silicon Valley 16",
                    "value": "sv16"
                },
                {
                    "name": "SJC1",
                    "description": "Sunnyvale, CA 1",
                    "value": "sjc1"
                },
                {
                    "name": "FRA2",
                    "description": "Frankfurt 2",
                    "value": "fra2"
                },
                {
                    "name": "FRA8",
                    "description": "Frankfurt 8",
                    "value": "fr8"
                },
                {
                    "name": "NY5",
                    "description": "New York 5",
                    "value": "ny5"
                },
                {
                    "name": "NY6",
                    "description": "New York 6",
                    "value": "ny6"
                },
                {
                    "name": "NY7",
                    "description": "New York 7",
                    "value": "ny7"
                },
                {
                    "name": "CH3",
                    "description": "Chicago 3",
                    "value": "ch3"
                },
                {
                    "name": "SL1",
                    "description": "Seoul 1",
                    "value": "sl1"
                },
                {
                    "name": "SY5",
                    "description": "Sydney 5",
                    "value": "sy5"
                },
                {
                    "name": "OS3",
                    "description": "Osaka 3",
                    "value": "os3"
                },
                {
                    "name": "LD7",
                    "description": "London 7",
                    "value": "ld7"
                },
                {
                    "name": "DC10",
                    "description": "Washington DC 10",
                    "value": "dc10"
                },
                {
                    "name": "AMS1",
                    "description": "Amsterdam 1",
                    "value": "ams1"
                },
                {
                    "name": "SG4",
                    "description": "Singapore 4",
                    "value": "sg4"
                },
                {
                    "name": "SE4",
                    "description": "Seattle 4",
                    "value": "se4"
                },
                {
                    "name": "SY4",
                    "description": "Sydney 4",
                    "value": "sy4"
                },
                {
                    "name": "AT4",
                    "description": "Atlanta 4",
                    "value": "at4"
                },
                {
                    "name": "DFW2",
                    "description": "Dallas 2",
                    "value": "dfw2"
                },
                {
                    "name": "TR2",
                    "description": "Toronto",
                    "value": "tr2"
                },
                {
                    "name": "DC13",
                    "description": "Washington DC",
                    "value": "dc13"
                },
                {
                    "name": "HE7",
                    "description": "Helsinki",
                    "value": "he7"
                },
                {
                    "name": "EWR1",
                    "description": "Parsippany, NJ 1",
                    "value": "ewr1"
                },
                {
                    "name": "SG5",
                    "description": "Singapore 5",
                    "value": "sg5"
                },
                {
                    "name": "SG1",
                    "description": "Singapore 1",
                    "value": "sg1"
                },
                {
                    "name": "MD2",
                    "description": "Madrid 2",
                    "value": "md2"
                },
                {
                    "name": "SV15",
                    "description": "Silicon Valley 15",
                    "value": "sv15"
                }
            ]
        },
        "equinix:metal/getConnectionPort:getConnectionPort": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkStatus": {
                    "type": "string",
                    "description": "Port link status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Port name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "speed": {
                    "type": "integer",
                    "description": "Port speed in bits per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Port status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCircuitIds": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "List of IDs of virtual cicruits attached to this port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "linkStatus",
                "name",
                "role",
                "speed",
                "status",
                "virtualCircuitIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getConnectionServiceToken:getConnectionServiceToken": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date of the service token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Port UUID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAllowedSpeed": {
                    "type": "string",
                    "description": "Maximum allowed speed for the service token, string like in the `speed` attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Port role - primary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Token type, `a_side` or `z_side`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "maxAllowedSpeed",
                "role",
                "state",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighbor:getDeviceBgpNeighborsBgpNeighbor": {
            "properties": {
                "addressFamily": {
                    "type": "integer",
                    "description": "IP address version, 4 or 6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerAs": {
                    "type": "integer",
                    "description": "Local autonomous system number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customerIp": {
                    "type": "string",
                    "description": "Local used peer IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5Enabled": {
                    "type": "boolean",
                    "description": "Whether BGP session is password enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5Password": {
                    "type": "string",
                    "description": "BGP session password in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "multihop": {
                    "type": "boolean",
                    "description": "Whether the neighbor is in EBGP multihop session.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerAs": {
                    "type": "integer",
                    "description": "Peer AS number (different than customer_as for EBGP).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses of this neighbor's peers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routesIns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesIn:getDeviceBgpNeighborsBgpNeighborRoutesIn"
                    },
                    "description": "Array of incoming routes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routesOuts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesOut:getDeviceBgpNeighborsBgpNeighborRoutesOut"
                    },
                    "description": "Array of outgoing routes in the same format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressFamily",
                "customerAs",
                "customerIp",
                "md5Enabled",
                "md5Password",
                "multihop",
                "peerAs",
                "routesIns",
                "routesOuts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesIn:getDeviceBgpNeighborsBgpNeighborRoutesIn": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceBgpNeighborsBgpNeighborRoutesOut:getDeviceBgpNeighborsBgpNeighborRoutesOut": {
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "(bool) Whether the route is exact.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "type": "string",
                    "description": "CIDR expression of route (IP/mask).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDeviceNetwork:getDeviceNetwork": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IPv4 or IPv6 address string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidr": {
                    "type": "integer",
                    "description": "Bit length of the network mask of the address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "family": {
                    "type": "integer",
                    "description": "IP version. One of `4`, `6`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "description": "Address of router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the address is routable from the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "cidr",
                "family",
                "gateway",
                "public"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getDevicePort:getDevicePort": {
            "properties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether this port is part of a bond in bonded network setup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address assigned to the port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port (e.g. `eth0`, or `bond0`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the port (e.g. `NetworkPort` or `NetworkBondPort`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bonded",
                "id",
                "mac",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getFacilityCapacity:getFacilityCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimun number of devices that must be available in selected location.\nDefault is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:metal/getMetroCapacity:getMetroCapacity": {
            "properties": {
                "plan": {
                    "type": "string",
                    "description": "Device plan that must be available in selected location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quantity": {
                    "type": "integer",
                    "description": "Minimun number of devices that must be available in selected location.\nDefault is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "plan"
            ]
        },
        "equinix:metal/getOrganizationAddress:getOrganizationAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Postal address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "city": {
                    "type": "string",
                    "description": "City name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": "Two letter country code (ISO 3166-1 alpha-2), e.g. US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zipCode": {
                    "type": "string",
                    "description": "Zip Code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "state",
                "zipCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getPlansFilter:getPlansFilter": {
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values. Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchBy": {
                    "type": "string",
                    "description": "The type of comparison to apply. One of: `in` , `re`, `substring`, `less_than`, `less_than_or_equal`, `greater_than`, `greater_than_or_equal`. Default is `in`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "values"
            ]
        },
        "equinix:metal/getPlansPlan:getPlansPlan": {
            "properties": {
                "availableInMetros": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of facilities where the plan is available\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availableIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of facilities where the plan is available\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "class": {
                    "type": "string",
                    "description": "plan class\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of deployment types, e.g. on_demand, spot_market\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "description of the plan\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "id of the plan\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "legacy": {
                    "type": "boolean",
                    "description": "flag showing if it's a legacy plan\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "line": {
                    "type": "string",
                    "description": "plan line, e.g. baremetal\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the plan\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pricingHour": {
                    "type": "number",
                    "description": "plan hourly price\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pricingMonth": {
                    "type": "number",
                    "description": "plan monthly price\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "plan slug\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableIns",
                "availableInMetros",
                "class",
                "deploymentTypes",
                "description",
                "id",
                "legacy",
                "line",
                "name",
                "pricingHour",
                "pricingMonth",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/getPlansSort:getPlansSort": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute used to filter. Filter attributes are case-sensitive\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "equinix:metal/getProjectBgpConfig:getProjectBgpConfig": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Autonomous System Number for local BGP deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deploymentType": {
                    "type": "string",
                    "description": "One of `private`, `public`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrefix": {
                    "type": "integer",
                    "description": "The maximum number of route filters allowed per server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "md5": {
                    "type": "string",
                    "description": "Password for BGP session in plaintext (not a checksum).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "Status of BGP configuration in the project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "asn",
                "deploymentType",
                "maxPrefix",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:metal/ipBlockType:IpBlockType": {
            "type": "string",
            "enum": [
                {
                    "name": "GlobalIPv4",
                    "value": "global_ipv4"
                },
                {
                    "name": "PublicIPv4",
                    "value": "public_ipv4"
                }
            ]
        },
        "equinix:metal/networkType:NetworkType": {
            "type": "string",
            "enum": [
                {
                    "name": "Layer3",
                    "value": "layer3"
                },
                {
                    "name": "Layer2Individual",
                    "value": "layer2-individual"
                },
                {
                    "name": "Layer2Bonded",
                    "value": "layer2-bonded"
                },
                {
                    "name": "Hybrid",
                    "value": "hybrid"
                }
            ]
        },
        "equinix:metal/operatingSystem:OperatingSystem": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/OperatingSystems/operation/findOperatingSystems",
            "type": "string",
            "enum": [
                {
                    "name": "Alma8",
                    "value": "alma_8"
                },
                {
                    "name": "Alma9",
                    "value": "alma_9"
                },
                {
                    "name": "Alpine3",
                    "value": "alpine_3"
                },
                {
                    "name": "CentOS6",
                    "value": "centos_6"
                },
                {
                    "name": "CentOS7",
                    "value": "centos_7"
                },
                {
                    "name": "CentOS8",
                    "value": "centos_8"
                },
                {
                    "name": "CoreOSAlpha",
                    "value": "coreos_alpha"
                },
                {
                    "name": "CoreOSBeta",
                    "value": "coreos_beta"
                },
                {
                    "name": "CoreOSStable",
                    "value": "coreos_stable"
                },
                {
                    "name": "CustomIPXE",
                    "value": "custom_ipxe"
                },
                {
                    "name": "Debian10",
                    "value": "debian_10"
                },
                {
                    "name": "Debian11",
                    "value": "debian_11"
                },
                {
                    "name": "Debian7",
                    "value": "debian_7"
                },
                {
                    "name": "Debian8",
                    "value": "debian_8"
                },
                {
                    "name": "Debian9",
                    "value": "debian_9"
                },
                {
                    "name": "Fedora31",
                    "value": "fedora_31"
                },
                {
                    "name": "Fedora34",
                    "value": "fedora_34"
                },
                {
                    "name": "FlatcarAlpha",
                    "value": "flatcar_alpha"
                },
                {
                    "name": "FlatcarBeta",
                    "value": "flatcar_beta"
                },
                {
                    "name": "FlatcarEdge",
                    "value": "flatcar_edge"
                },
                {
                    "name": "FlatcarLTS",
                    "value": "flatcar_lts"
                },
                {
                    "name": "FlatcarStable",
                    "value": "flatcar_stable"
                },
                {
                    "name": "FreeBSD10_3",
                    "value": "freebsd_10_3"
                },
                {
                    "name": "FreeBSD10_4",
                    "value": "freebsd_10_4"
                },
                {
                    "name": "FreeBSD11_0",
                    "value": "freebsd_11_0"
                },
                {
                    "name": "FreeBSD11_1",
                    "value": "freebsd_11_1"
                },
                {
                    "name": "FreeBSD11_2",
                    "value": "freebsd_11_2"
                },
                {
                    "name": "FreeBSD11_3",
                    "value": "freebsd_11_3"
                },
                {
                    "name": "FreeBSD11_4",
                    "value": "freebsd_11_4"
                },
                {
                    "name": "FreeBSD12Testing",
                    "value": "freebsd_12_testing"
                },
                {
                    "name": "FreeBSD12_1",
                    "value": "freebsd_12_1"
                },
                {
                    "name": "FreeBSD13_0",
                    "value": "freebsd_13_0"
                },
                {
                    "name": "FreeBSD13_1",
                    "value": "freebsd_13_1"
                },
                {
                    "name": "FreeBSD13_testing",
                    "value": "freebsd_13_testing"
                },
                {
                    "name": "HookEsxi7",
                    "value": "hook_esxi7"
                },
                {
                    "name": "NixOS17_03",
                    "value": "nixos_17_03"
                },
                {
                    "name": "NixOS18_03",
                    "value": "nixos_18_03"
                },
                {
                    "name": "NixOS19_03",
                    "value": "nixos_19_03"
                },
                {
                    "name": "NixOS20_09",
                    "value": "nixos_20_09"
                },
                {
                    "name": "NixOS21_11",
                    "value": "nixos_21_11"
                },
                {
                    "name": "NixOS22_05",
                    "value": "nixos_22_05"
                },
                {
                    "name": "NixOS22_11",
                    "value": "nixos_22_11"
                },
                {
                    "name": "Nixos21_05",
                    "value": "nixos_21_05"
                },
                {
                    "name": "NutanixCentos",
                    "value": "nutanix_centos"
                },
                {
                    "name": "NutanixLTS5_19_1",
                    "value": "nutanix_lts_5_19_1"
                },
                {
                    "name": "NutanixLTS5_20",
                    "value": "nutanix_lts_5_20"
                },
                {
                    "name": "OpenSUSE42_3",
                    "value": "opensuse_42_3"
                },
                {
                    "name": "RHEL7",
                    "value": "rhel_7"
                },
                {
                    "name": "RHEL8",
                    "value": "rhel_8"
                },
                {
                    "name": "RHEL9",
                    "value": "rhel_9"
                },
                {
                    "name": "RancherOS",
                    "value": "rancher"
                },
                {
                    "name": "Rocky8",
                    "value": "rocky_8"
                },
                {
                    "name": "Rocky9",
                    "value": "rocky_9"
                },
                {
                    "name": "SLES12SP3",
                    "value": "suse_sles12_sp3"
                },
                {
                    "name": "ScientificLinux6",
                    "value": "scientific_6"
                },
                {
                    "name": "TalosV1",
                    "value": "talos_v1"
                },
                {
                    "name": "Ubuntu1710",
                    "value": "ubuntu_17_10"
                },
                {
                    "name": "Ubuntu18_04",
                    "value": "ubuntu_18_04"
                },
                {
                    "name": "Ubuntu1904",
                    "value": "ubuntu_19_04"
                },
                {
                    "name": "Ubuntu19_10",
                    "value": "ubuntu_19_10"
                },
                {
                    "name": "Ubuntu20_04",
                    "value": "ubuntu_20_04"
                },
                {
                    "name": "Ubuntu20_04_legacy",
                    "value": "ubuntu_20_04_legacy"
                },
                {
                    "name": "Ubuntu20_10",
                    "value": "ubuntu_20_10"
                },
                {
                    "name": "Ubuntu2204",
                    "value": "ubuntu_22_04"
                },
                {
                    "name": "VMWareAlloyVcf",
                    "value": "vmware_alloy_vcf"
                },
                {
                    "name": "VMWareEsxi5_5",
                    "value": "vmware_esxi_5_5"
                },
                {
                    "name": "VMWareEsxi6_0",
                    "value": "vmware_esxi_6_0"
                },
                {
                    "name": "VMWareEsxi6_5",
                    "value": "vmware_esxi_6_5"
                },
                {
                    "name": "VMWareEsxi6_7",
                    "value": "vmware_esxi_6_7"
                },
                {
                    "name": "VMWareEsxi6_7_vcf",
                    "value": "vmware_esxi_6_7_vcf"
                },
                {
                    "name": "VMWareEsxi7_0",
                    "value": "vmware_esxi_7_0"
                },
                {
                    "name": "VMWareEsxi7_0U2a",
                    "value": "vmware_esxi_7_0U2a"
                },
                {
                    "name": "VMWareEsxi7_0_vcf",
                    "value": "vmware_esxi_7_0_vcf"
                },
                {
                    "name": "VMWareNsx2_5_0",
                    "value": "vmware_nsx_2_5_0"
                },
                {
                    "name": "VMWareNsx3_0_0",
                    "value": "vmware_nsx_3_0_0"
                },
                {
                    "name": "Virtuozzo7",
                    "value": "virtuozzo_7"
                },
                {
                    "name": "Windows2012R2",
                    "value": "windows_2012_r2"
                },
                {
                    "name": "Windows2016",
                    "value": "windows_2016"
                },
                {
                    "name": "Windows2019",
                    "value": "windows_2019"
                },
                {
                    "name": "Windows2022",
                    "value": "windows_2022"
                }
            ]
        },
        "equinix:metal/plan:Plan": {
            "description": "See https://deploy.equinix.com/developers/api/metal/#tag/Plans/operation/findPlans",
            "type": "string",
            "enum": [
                {
                    "name": "A3LargeX86",
                    "value": "a3.large.x86"
                },
                {
                    "name": "C2LargeARM",
                    "value": "c2.large.arm"
                },
                {
                    "name": "C2MediumX86",
                    "value": "c2.medium.x86"
                },
                {
                    "name": "C3LargeARM",
                    "value": "c3.large.arm64"
                },
                {
                    "name": "C3MediumX86",
                    "value": "c3.medium.x86"
                },
                {
                    "name": "C3SmallX86",
                    "value": "c3.small.x86"
                },
                {
                    "name": "F3LargeX86",
                    "value": "f3.large.x86"
                },
                {
                    "name": "F3MediumX86",
                    "value": "f3.medium.x86"
                },
                {
                    "name": "G2LargeX86",
                    "value": "g2.large.x86"
                },
                {
                    "name": "M2XLargeX86",
                    "value": "m2.xlarge.x86"
                },
                {
                    "name": "M3LargeX86",
                    "value": "m3.large.x86"
                },
                {
                    "name": "M3SmallX86",
                    "value": "m3.small.x86"
                },
                {
                    "name": "N2XLargeX86",
                    "value": "n2.xlarge.x86"
                },
                {
                    "name": "N3XLargeX86",
                    "value": "n3.xlarge.x86"
                },
                {
                    "name": "S3XLargeX86",
                    "value": "s3.xlarge.x86"
                },
                {
                    "name": "T3SmallX86",
                    "value": "t3.small.x86"
                },
                {
                    "name": "X2XLargeX86",
                    "value": "x2.xlarge.x86"
                },
                {
                    "name": "X3XLargeX86",
                    "value": "x3.xlarge.x86"
                }
            ]
        },
        "equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail": {
            "properties": {
                "aclStatus": {
                    "type": "string",
                    "description": "Device ACL provisioning status where template was applied. One of `PROVISIONING`,\n`PROVISIONED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aclStatus",
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstPort": {
                    "type": "string",
                    "description": "Inbound traffic destination ports. Allowed values are a comma separated\nlist of ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/aclRuleProtocolType:AclRuleProtocolType"
                        }
                    ],
                    "description": "Inbound traffic protocol. One of `IP`, `TCP`, `UDP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sequenceNumber": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "deprecationMessage": "Source Type will not be returned",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcPort": {
                    "type": "string",
                    "description": "Inbound traffic source ports. Allowed values are a comma separated list\nof ports, e.g., `20,22,23`, port range, e.g., `1023-1040` or word `any`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "Inbound traffic source IP subnet in CIDR format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inbound traffic source IP subnets in CIDR format.\n",
                    "deprecationMessage": "Use Subnet instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dstPort",
                "protocol",
                "srcPort"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dstPort",
                        "protocol",
                        "sequenceNumber",
                        "sourceType",
                        "srcPort"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node0": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode0:DeviceClusterDetailsNode0",
                    "description": "An object that has `node0` configuration.\nSee Cluster Details - Nodes below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node1": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode1:DeviceClusterDetailsNode1",
                    "description": "An object that has `node1` configuration.\nSee Cluster Details - Nodes below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "node0",
                "node1"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "clusterName",
                        "node0",
                        "node1",
                        "numOfNodes"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode0:DeviceClusterDetailsNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode0VendorConfiguration:DeviceClusterDetailsNode0VendorConfiguration",
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode0VendorConfiguration:DeviceClusterDetailsNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode1:DeviceClusterDetailsNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetailsNode1VendorConfiguration:DeviceClusterDetailsNode1VendorConfiguration",
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "uuid"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceClusterDetailsNode1VendorConfiguration:DeviceClusterDetailsNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "description": "Activation key. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "adminPassword": {
                    "type": "string",
                    "description": "The administrative password of the device. You can use it to log in\nto the console. This field is not available for all device types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "controller1": {
                    "type": "string",
                    "description": "System IP Address. Mandatory for the Fortinet SDWAN cluster device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "controllerFqdn": {
                    "type": "string",
                    "description": "Controller fqdn. This is required for Velocloud clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The CLI password of the device. This field is relevant only for the\nVelocloud SDWAN cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceInterface:DeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice": {
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": "Device ASN number. Not required for self configured devices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Device identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Device network interface identifier to use for device link\nconnection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP address from device link subnet that was assigned to the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ipAddress",
                        "status"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceLinkLink:DeviceLinkLink": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "billing account number to be used for\nconnection charges\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstMetroCode": {
                    "type": "string",
                    "description": "connection destination metro code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dstZoneCode": {
                    "type": "string",
                    "description": "connection destination zone code is not required.\n",
                    "deprecationMessage": "DestinationZoneCode is not required",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcMetroCode": {
                    "type": "string",
                    "description": "connection source metro code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srcZoneCode": {
                    "type": "string",
                    "description": "connection source zone code is not required.\n",
                    "deprecationMessage": "SourceZoneCode is not required",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "throughput": {
                    "type": "string",
                    "description": "connection throughput.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "connection throughput unit (Mbps or Gbps).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "dstMetroCode",
                "srcMetroCode",
                "throughput",
                "throughputUnit"
            ]
        },
        "equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied\non a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, for a secondary\ndevice.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Secondary device hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceSecondaryDeviceInterface:DeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\nsecondary device. Applicable for some device types in BYOL licensing mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token can be provided for some device types o the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Metro location of a secondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on a secondary device.\n* `ssh-key` - (Optional) Up to one definition of SSH key that will be provisioned on a secondary\ndevice.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Secondary device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive notifications about\nsecondary device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDeviceSshKey:DeviceSecondaryDeviceSshKey",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/Value pairs of vendor specific configuration parameters\nfor a secondary device. Key values are `controller1`, `activationKey`, `managementType`, `siteId`,\n`systemIpAddress`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "metroCode",
                "name",
                "notifications"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accountNumber",
                        "additionalBandwidth",
                        "asn",
                        "ibx",
                        "interfaces",
                        "licenseFileId",
                        "licenseStatus",
                        "metroCode",
                        "name",
                        "notifications",
                        "redundancyType",
                        "redundantId",
                        "region",
                        "sshIpAddress",
                        "sshIpFqdn",
                        "status",
                        "uuid",
                        "vendorConfiguration",
                        "zoneCode"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceSecondaryDeviceInterface:DeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "description": "interface management type (Equinix Managed or empty).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "interface identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "interface IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "interface MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "description": "interface operational status. One of `up`, `down`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "interface type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignedType",
                        "id",
                        "ipAddress",
                        "macAddress",
                        "name",
                        "operationalStatus",
                        "status",
                        "type"
                    ]
                }
            }
        },
        "equinix:networkedge/DeviceSecondaryDeviceSshKey:DeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        },
        "equinix:networkedge/DeviceSshKey:DeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "username associated with given key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ]
        },
        "equinix:networkedge/aclRuleProtocolType:AclRuleProtocolType": {
            "type": "string",
            "enum": [
                {
                    "name": "IP",
                    "value": "IP"
                },
                {
                    "name": "TCP",
                    "value": "TCP"
                },
                {
                    "name": "UDP",
                    "value": "UDP"
                }
            ]
        },
        "equinix:networkedge/fileType:FileType": {
            "type": "string",
            "enum": [
                {
                    "name": "License",
                    "value": "LICENSE"
                },
                {
                    "name": "CloudInit",
                    "value": "CLOUD_INIT"
                }
            ]
        },
        "equinix:networkedge/getDeviceClusterDetail:getDeviceClusterDetail": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The id of the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node0s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode0:getDeviceClusterDetailNode0"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "node1s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode1:getDeviceClusterDetailNode1"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numOfNodes": {
                    "type": "integer",
                    "description": "The number of nodes in the cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "node0s",
                "node1s",
                "numOfNodes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode0:getDeviceClusterDetailNode0": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode0VendorConfiguration:getDeviceClusterDetailNode0VendorConfiguration"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode0VendorConfiguration:getDeviceClusterDetailNode0VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "controller1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controllerFqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode1:getDeviceClusterDetailNode1": {
            "properties": {
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceClusterDetailNode1VendorConfiguration:getDeviceClusterDetailNode1VendorConfiguration"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "licenseFileId",
                "licenseToken",
                "name",
                "uuid",
                "vendorConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceClusterDetailNode1VendorConfiguration:getDeviceClusterDetailNode1VendorConfiguration": {
            "properties": {
                "activationKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "controller1": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "controllerFqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "activationKey",
                "adminPassword",
                "controller1",
                "controllerFqdn",
                "hostname",
                "rootPassword"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceInterface:getDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDevice:getDeviceSecondaryDevice": {
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Unique identifier of applied ACL template\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "asn": {
                    "type": "integer",
                    "description": "Autonomous system number\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDeviceInterface:getDeviceSecondaryDeviceInterface"
                    },
                    "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Unique identifier of applied license file\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "licenseToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metroCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Device location region\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDeviceSshKey:getDeviceSecondaryDeviceSshKey"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "wanInterfaceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountNumber",
                "aclTemplateId",
                "additionalBandwidth",
                "asn",
                "hostname",
                "ibx",
                "interfaces",
                "licenseFile",
                "licenseFileId",
                "licenseStatus",
                "licenseToken",
                "metroCode",
                "mgmtAclTemplateUuid",
                "name",
                "notifications",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "sshKeys",
                "status",
                "uuid",
                "vendorConfiguration",
                "wanInterfaceId",
                "zoneCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDeviceInterface:getDeviceSecondaryDeviceInterface": {
            "properties": {
                "assignedType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of an existing Equinix Network Edge device\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operationalStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignedType",
                "id",
                "ipAddress",
                "macAddress",
                "name",
                "operationalStatus",
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSecondaryDeviceSshKey:getDeviceSecondaryDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/getDeviceSshKey:getDeviceSshKey": {
            "properties": {
                "keyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyName",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "equinix:networkedge/throughputUnit:ThroughputUnit": {
            "type": "string",
            "enum": [
                {
                    "name": "Mbps",
                    "value": "Mbps"
                },
                {
                    "name": "Gbps",
                    "value": "Gbps"
                }
            ]
        }
    },
    "provider": {
        "description": "The provider type for the equinix package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        },
        "inputProperties": {
            "authToken": {
                "type": "string",
                "description": "The Equinix Metal API auth key for API operations\n"
            },
            "clientId": {
                "type": "string",
                "description": "API Consumer Key available under My Apps section in developer portal\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "API Consumer secret available under My Apps section in developer portal\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Equinix API base URL to point out desired environment. Defaults to https://api.equinix.com\n"
            },
            "maxRetries": {
                "type": "integer"
            },
            "maxRetryWaitSeconds": {
                "type": "integer"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "The duration of time, in seconds, that the Equinix Platform API Client should wait before canceling an API request.\nDefaults to 30\n"
            },
            "responseMaxPageSize": {
                "type": "integer",
                "description": "The maximum number of records in a single response for REST queries that produce paginated responses\n"
            },
            "token": {
                "type": "string",
                "description": "API token from the developer sandbox\n"
            }
        }
    },
    "resources": {
        "equinix:fabric/connection:Connection": {
            "properties": {
                "aSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                    "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                },
                "account": {
                    "$ref": "#/types/equinix:fabric/ConnectionAccount:ConnectionAccount",
                    "description": "Customer account information that is associated with this connection\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionAdditionalInfo:ConnectionAdditionalInfo"
                    },
                    "description": "Connection additional information\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Connection bandwidth in Mbps\n"
                },
                "changeLog": {
                    "$ref": "#/types/equinix:fabric/ConnectionChangeLog:ConnectionChangeLog",
                    "description": "Captures connection lifecycle change information\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Connection directionality from the requester point of view\n"
                },
                "href": {
                    "type": "string",
                    "description": "Connection URI information\n"
                },
                "isRemote": {
                    "type": "boolean",
                    "description": "Connection property derived from access point locations\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "operation": {
                    "$ref": "#/types/equinix:fabric/ConnectionOperation:ConnectionOperation",
                    "description": "Connection type-specific operational data\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                    "description": "Order related to this connection information\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                    "description": "Project information\n"
                },
                "redundancy": {
                    "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                    "description": "Redundancy Information\n"
                },
                "state": {
                    "type": "string",
                    "description": "Connection overall state\n"
                },
                "type": {
                    "type": "string",
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n"
                },
                "zSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                    "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                }
            },
            "required": [
                "aSide",
                "account",
                "bandwidth",
                "changeLog",
                "direction",
                "href",
                "isRemote",
                "name",
                "notifications",
                "operation",
                "state",
                "type",
                "zSide"
            ],
            "inputProperties": {
                "aSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                    "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                },
                "additionalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionAdditionalInfo:ConnectionAdditionalInfo"
                    },
                    "description": "Connection additional information\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "Connection bandwidth in Mbps\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "order": {
                    "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                    "description": "Order related to this connection information\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                    "description": "Project information\n"
                },
                "redundancy": {
                    "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                    "description": "Redundancy Information\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/connectionType:ConnectionType"
                        }
                    ],
                    "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n"
                },
                "zSide": {
                    "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                    "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                }
            },
            "requiredInputs": [
                "aSide",
                "bandwidth",
                "notifications",
                "type",
                "zSide"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "aSide": {
                        "$ref": "#/types/equinix:fabric/ConnectionASide:ConnectionASide",
                        "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/ConnectionAccount:ConnectionAccount",
                        "description": "Customer account information that is associated with this connection\n"
                    },
                    "additionalInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ConnectionAdditionalInfo:ConnectionAdditionalInfo"
                        },
                        "description": "Connection additional information\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Connection bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/ConnectionChangeLog:ConnectionChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Connection directionality from the requester point of view\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Connection URI information\n"
                    },
                    "isRemote": {
                        "type": "boolean",
                        "description": "Connection property derived from access point locations\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ConnectionNotification:ConnectionNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/ConnectionOperation:ConnectionOperation",
                        "description": "Connection type-specific operational data\n"
                    },
                    "order": {
                        "$ref": "#/types/equinix:fabric/ConnectionOrder:ConnectionOrder",
                        "description": "Order related to this connection information\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/ConnectionProject:ConnectionProject",
                        "description": "Project information\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/ConnectionRedundancy:ConnectionRedundancy",
                        "description": "Redundancy Information\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Connection overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/connectionType:ConnectionType"
                            }
                        ],
                        "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n"
                    },
                    "zSide": {
                        "$ref": "#/types/equinix:fabric/ConnectionZSide:ConnectionZSide",
                        "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:fabric/serviceProfile:ServiceProfile": {
            "properties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "account": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccount:ServiceProfileAccount",
                    "description": "Account\n"
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "changeLog": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog",
                    "description": "Captures connection lifecycle change information\n"
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                    },
                    "description": "Custom Fields\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "href": {
                    "type": "string",
                    "description": "Service Profile URI response attribute\n"
                },
                "marketingInfo": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                    "description": "Marketing Info\n"
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                    },
                    "description": "Access point config information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                    },
                    "description": "Ports\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                    "description": "Project information\n"
                },
                "selfProfile": {
                    "type": "boolean",
                    "description": "Self Profile\n"
                },
                "state": {
                    "type": "string",
                    "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the connection\n"
                },
                "type": {
                    "type": "string",
                    "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Equinix assigned service profile identifier\n"
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                    },
                    "description": "Virtual Devices\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                }
            },
            "required": [
                "changeLog",
                "description",
                "href",
                "name",
                "type",
                "uuid"
            ],
            "inputProperties": {
                "accessPointTypeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                    },
                    "description": "Access point config information\n"
                },
                "account": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileAccount:ServiceProfileAccount",
                    "description": "Account\n"
                },
                "allowedEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of contact emails\n"
                },
                "customFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                    },
                    "description": "Custom Fields\n"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided service description\n"
                },
                "marketingInfo": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                    "description": "Marketing Info\n"
                },
                "metros": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                    },
                    "description": "Access point config information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customer-assigned service profile name\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                    },
                    "description": "Preferences for notifications on connection configuration or status changes\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                    },
                    "description": "Ports\n"
                },
                "project": {
                    "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                    "description": "Project information\n"
                },
                "selfProfile": {
                    "type": "boolean",
                    "description": "Self Profile\n"
                },
                "state": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileState:ProfileState"
                        }
                    ],
                    "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the connection\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                        }
                    ],
                    "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n"
                },
                "virtualDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                    },
                    "description": "Virtual Devices\n"
                },
                "visibility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:fabric/profileVisibility:ProfileVisibility"
                        }
                    ],
                    "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                }
            },
            "requiredInputs": [
                "description",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceProfile resources.\n",
                "properties": {
                    "accessPointTypeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileAccessPointTypeConfig:ServiceProfileAccessPointTypeConfig"
                        },
                        "description": "Access point config information\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileAccount:ServiceProfileAccount",
                        "description": "Account\n"
                    },
                    "allowedEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of contact emails\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileChangeLog:ServiceProfileChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileCustomField:ServiceProfileCustomField"
                        },
                        "description": "Custom Fields\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "User-provided service description\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Service Profile URI response attribute\n"
                    },
                    "marketingInfo": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileMarketingInfo:ServiceProfileMarketingInfo",
                        "description": "Marketing Info\n"
                    },
                    "metros": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileMetro:ServiceProfileMetro"
                        },
                        "description": "Access point config information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Customer-assigned service profile name\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileNotification:ServiceProfileNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfilePort:ServiceProfilePort"
                        },
                        "description": "Ports\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/ServiceProfileProject:ServiceProfileProject",
                        "description": "Project information\n"
                    },
                    "selfProfile": {
                        "type": "boolean",
                        "description": "Self Profile\n"
                    },
                    "state": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileState:ProfileState"
                            }
                        ],
                        "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the connection\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileType:ProfileType"
                            }
                        ],
                        "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix assigned service profile identifier\n"
                    },
                    "virtualDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/ServiceProfileVirtualDevice:ServiceProfileVirtualDevice"
                        },
                        "description": "Virtual Devices\n"
                    },
                    "visibility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:fabric/profileVisibility:ProfileVisibility"
                            }
                        ],
                        "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/bgpSession:BgpSession": {
            "description": "Provides a resource to manage BGP sessions in Equinix Metal Host. Refer to [Equinix Metal BGP documentation](https://metal.equinix.com/developers/docs/networking/local-global-bgp/) for more details.\n\nYou need to have BGP config enabled in your project.\n\nBGP session must be linked to a device running [BIRD](https://bird.network.cz) or other BGP routing daemon which will control route advertisements via the session to Equinix Metal's upstream routers.\n",
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n"
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the session - `up` or `down`\n"
                }
            },
            "required": [
                "addressFamily",
                "deviceId",
                "status"
            ],
            "inputProperties": {
                "addressFamily": {
                    "type": "string",
                    "description": "`ipv4` or `ipv6`.\n",
                    "willReplaceOnChanges": true
                },
                "defaultRoute": {
                    "type": "boolean",
                    "description": "Boolean flag to set the default route policy. False by default.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "addressFamily",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BgpSession resources.\n",
                "properties": {
                    "addressFamily": {
                        "type": "string",
                        "description": "`ipv4` or `ipv6`.\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRoute": {
                        "type": "boolean",
                        "description": "Boolean flag to set the default route policy. False by default.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the session - `up` or `down`\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/connection:Connection": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/ConnectionPort:ConnectionPort"
                    },
                    "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.metal.Connection datasource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                },
                "serviceTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/ConnectionServiceToken:ConnectionServiceToken"
                    },
                    "description": "List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Connection datasource.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the connection resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                    "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "required": [
                "facility",
                "metro",
                "name",
                "organizationId",
                "ports",
                "redundancy",
                "serviceTokens",
                "speed",
                "status",
                "token",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description for the connection resource.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where the connection will be created.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where the connection will be created.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the connection resource\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization where the connection is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project where the connection is scoped to, must be set for.\n",
                    "willReplaceOnChanges": true
                },
                "redundancy": {
                    "type": "string",
                    "description": "Connection redundancy - redundant or primary.\n"
                },
                "serviceTokenType": {
                    "type": "string",
                    "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Connection type - dedicated or shared.\n",
                    "willReplaceOnChanges": true
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                }
            },
            "requiredInputs": [
                "redundancy",
                "speed",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description for the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility where the connection will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the connection will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel. Default is standard.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the connection resource\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/ConnectionPort:ConnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`). Schema of\nport is described in documentation of the\nequinix.metal.Connection datasource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the connection is scoped to, must be set for.\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy - redundant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Only used with shared connection. Type of service token to use for the connection, a_side or z_side\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/ConnectionServiceToken:ConnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). Scehma of service_token is described in documentation of the equinix.metal.Connection datasource.\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Connection speed - one of 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the connection resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                        "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "Connection type - dedicated or shared.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/device:Device": {
            "description": "Provides an Equinix Metal device resource. This can be used to create,\nmodify, and delete devices.\n\n\u003e **NOTE:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a device and add it to cool_project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst web1 = new equinix.metal.Device(\"web1\", {\n    hostname: \"tf.coreos2\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.metal.Device(\"web1\",\n    hostname=\"tf.coreos2\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web1 = new Equinix.Metal.Device(\"web1\", new()\n    {\n        Hostname = \"tf.coreos2\",\n        Plan = \"c3.small.x86\",\n        Metro = \"sv\",\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewDevice(ctx, \"web1\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.coreos2\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new Device(\"web1\", DeviceArgs.builder()        \n            .hostname(\"tf.coreos2\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.coreos2\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n```\n\nSame as above, but boot via iPXE initially, using the Ignition Provider for provisioning\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst pxe1 = new equinix.metal.Device(\"pxe1\", {\n    hostname: \"tf.coreos2-pxe\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"custom_ipxe\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    ipxeScriptUrl: \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    alwaysPxe: false,\n    userData: data.ignition_config.example.rendered,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\npxe1 = equinix.metal.Device(\"pxe1\",\n    hostname=\"tf.coreos2-pxe\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"custom_ipxe\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    ipxe_script_url=\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    always_pxe=False,\n    user_data=data[\"ignition_config\"][\"example\"][\"rendered\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pxe1 = new Equinix.Metal.Device(\"pxe1\", new()\n    {\n        Hostname = \"tf.coreos2-pxe\",\n        Plan = \"c3.small.x86\",\n        Metro = \"sv\",\n        OperatingSystem = \"custom_ipxe\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n        IpxeScriptUrl = \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n        AlwaysPxe = false,\n        UserData = data.Ignition_config.Example.Rendered,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewDevice(ctx, \"pxe1\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.coreos2-pxe\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"custom_ipxe\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tIpxeScriptUrl:   pulumi.String(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\"),\n\t\t\tAlwaysPxe:       pulumi.Bool(false),\n\t\t\tUserData:        pulumi.Any(data.Ignition_config.Example.Rendered),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pxe1 = new Device(\"pxe1\", DeviceArgs.builder()        \n            .hostname(\"tf.coreos2-pxe\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"custom_ipxe\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .ipxeScriptUrl(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\")\n            .alwaysPxe(\"false\")\n            .userData(data.ignition_config().example().rendered())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pxe1:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.coreos2-pxe\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: custom_ipxe\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      ipxeScriptUrl: https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\n      alwaysPxe: 'false'\n      userData: ${data.ignition_config.example.rendered}\n```\n\nCreate a device without a public IP address in facility ny5, with only a /30 private IPv4 subnet (4 IP addresses)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst web1 = new equinix.metal.Device(\"web1\", {\n    hostname: \"tf.coreos2\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    ipAddresses: [{\n        type: \"private_ipv4\",\n        cidr: 30,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.metal.Device(\"web1\",\n    hostname=\"tf.coreos2\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    ip_addresses=[equinix.metal.DeviceIpAddressArgs(\n        type=\"private_ipv4\",\n        cidr=30,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web1 = new Equinix.Metal.Device(\"web1\", new()\n    {\n        Hostname = \"tf.coreos2\",\n        Plan = \"c3.small.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n        IpAddresses = new[]\n        {\n            new Equinix.Metal.Inputs.DeviceIpAddressArgs\n            {\n                Type = \"private_ipv4\",\n                Cidr = 30,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewDevice(ctx, \"web1\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"tf.coreos2\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tIpAddresses: metal.DeviceIpAddressArray{\n\t\t\t\t\u0026metal.DeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"private_ipv4\"),\n\t\t\t\t\tCidr: pulumi.Int(30),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.inputs.DeviceIpAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new Device(\"web1\", DeviceArgs.builder()        \n            .hostname(\"tf.coreos2\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .ipAddresses(DeviceIpAddressArgs.builder()\n                .type(\"private_ipv4\")\n                .cidr(30)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.coreos2\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      ipAddresses:\n        - type: private_ipv4\n          cidr: 30\n```\n\nDeploy device on next-available reserved hardware and do custom partitioning.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst web1 = new equinix.metal.Device(\"web1\", {\n    hostname: \"tftest\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    hardwareReservationId: \"next-available\",\n    storage: `{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nweb1 = equinix.metal.Device(\"web1\",\n    hostname=\"tftest\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    hardware_reservation_id=\"next-available\",\n    storage=\"\"\"{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web1 = new Equinix.Metal.Device(\"web1\", new()\n    {\n        Hostname = \"tftest\",\n        Plan = \"c3.small.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n        HardwareReservationId = \"next-available\",\n        Storage = @\"{\n  \"\"disks\"\": [\n    {\n      \"\"device\"\": \"\"/dev/sda\"\",\n      \"\"wipeTable\"\": true,\n      \"\"partitions\"\": [\n        {\n          \"\"label\"\": \"\"BIOS\"\",\n          \"\"number\"\": 1,\n          \"\"size\"\": \"\"4096\"\"\n        },\n        {\n          \"\"label\"\": \"\"SWAP\"\",\n          \"\"number\"\": 2,\n          \"\"size\"\": \"\"3993600\"\"\n        },\n        {\n          \"\"label\"\": \"\"ROOT\"\",\n          \"\"number\"\": 3,\n          \"\"size\"\": \"\"0\"\"\n        }\n      ]\n    }\n  ],\n  \"\"filesystems\"\": [\n    {\n      \"\"mount\"\": {\n        \"\"device\"\": \"\"/dev/sda3\"\",\n        \"\"format\"\": \"\"ext4\"\",\n        \"\"point\"\": \"\"/\"\",\n        \"\"create\"\": {\n          \"\"options\"\": [\n            \"\"-L\"\",\n            \"\"ROOT\"\"\n          ]\n        }\n      }\n    },\n    {\n      \"\"mount\"\": {\n        \"\"device\"\": \"\"/dev/sda2\"\",\n        \"\"format\"\": \"\"swap\"\",\n        \"\"point\"\": \"\"none\"\",\n        \"\"create\"\": {\n          \"\"options\"\": [\n            \"\"-L\"\",\n            \"\"SWAP\"\"\n          ]\n        }\n      }\n    }\n  ]\n}\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewDevice(ctx, \"web1\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"tftest\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem:       pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:          pulumi.String(\"hourly\"),\n\t\t\tProjectId:             pulumi.Any(local.Project_id),\n\t\t\tHardwareReservationId: pulumi.String(\"next-available\"),\n\t\t\tStorage:               pulumi.String(\"{\\n  \\\"disks\\\": [\\n    {\\n      \\\"device\\\": \\\"/dev/sda\\\",\\n      \\\"wipeTable\\\": true,\\n      \\\"partitions\\\": [\\n        {\\n          \\\"label\\\": \\\"BIOS\\\",\\n          \\\"number\\\": 1,\\n          \\\"size\\\": \\\"4096\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"SWAP\\\",\\n          \\\"number\\\": 2,\\n          \\\"size\\\": \\\"3993600\\\"\\n        },\\n        {\\n          \\\"label\\\": \\\"ROOT\\\",\\n          \\\"number\\\": 3,\\n          \\\"size\\\": \\\"0\\\"\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"filesystems\\\": [\\n    {\\n      \\\"mount\\\": {\\n        \\\"device\\\": \\\"/dev/sda3\\\",\\n        \\\"format\\\": \\\"ext4\\\",\\n        \\\"point\\\": \\\"/\\\",\\n        \\\"create\\\": {\\n          \\\"options\\\": [\\n            \\\"-L\\\",\\n            \\\"ROOT\\\"\\n          ]\\n        }\\n      }\\n    },\\n    {\\n      \\\"mount\\\": {\\n        \\\"device\\\": \\\"/dev/sda2\\\",\\n        \\\"format\\\": \\\"swap\\\",\\n        \\\"point\\\": \\\"none\\\",\\n        \\\"create\\\": {\\n          \\\"options\\\": [\\n            \\\"-L\\\",\\n            \\\"SWAP\\\"\\n          ]\\n        }\\n      }\\n    }\\n  ]\\n}\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web1 = new Device(\"web1\", DeviceArgs.builder()        \n            .hostname(\"tftest\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .hardwareReservationId(\"next-available\")\n            .storage(\"\"\"\n{\n  \"disks\": [\n    {\n      \"device\": \"/dev/sda\",\n      \"wipeTable\": true,\n      \"partitions\": [\n        {\n          \"label\": \"BIOS\",\n          \"number\": 1,\n          \"size\": \"4096\"\n        },\n        {\n          \"label\": \"SWAP\",\n          \"number\": 2,\n          \"size\": \"3993600\"\n        },\n        {\n          \"label\": \"ROOT\",\n          \"number\": 3,\n          \"size\": \"0\"\n        }\n      ]\n    }\n  ],\n  \"filesystems\": [\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda3\",\n        \"format\": \"ext4\",\n        \"point\": \"/\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"ROOT\"\n          ]\n        }\n      }\n    },\n    {\n      \"mount\": {\n        \"device\": \"/dev/sda2\",\n        \"format\": \"swap\",\n        \"point\": \"none\",\n        \"create\": {\n          \"options\": [\n            \"-L\",\n            \"SWAP\"\n          ]\n        }\n      }\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web1:\n    type: equinix:metal:Device\n    properties:\n      hostname: tftest\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      hardwareReservationId: next-available\n      storage: |\n        {\n          \"disks\": [\n            {\n              \"device\": \"/dev/sda\",\n              \"wipeTable\": true,\n              \"partitions\": [\n                {\n                  \"label\": \"BIOS\",\n                  \"number\": 1,\n                  \"size\": \"4096\"\n                },\n                {\n                  \"label\": \"SWAP\",\n                  \"number\": 2,\n                  \"size\": \"3993600\"\n                },\n                {\n                  \"label\": \"ROOT\",\n                  \"number\": 3,\n                  \"size\": \"0\"\n                }\n              ]\n            }\n          ],\n          \"filesystems\": [\n            {\n              \"mount\": {\n                \"device\": \"/dev/sda3\",\n                \"format\": \"ext4\",\n                \"point\": \"/\",\n                \"create\": {\n                  \"options\": [\n                    \"-L\",\n                    \"ROOT\"\n                  ]\n                }\n              }\n            },\n            {\n              \"mount\": {\n                \"device\": \"/dev/sda2\",\n                \"format\": \"swap\",\n                \"point\": \"none\",\n                \"create\": {\n                  \"options\": [\n                    \"-L\",\n                    \"SWAP\"\n                  ]\n                }\n              }\n            }\n          ]\n        }\n```\n\nCreate a device and allow the `user_data` and `custom_data` attributes to change in-place (i.e., without destroying and recreating the device):\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst pxe1 = new equinix.metal.Device(\"pxe1\", {\n    hostname: \"tf.coreos2-pxe\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"custom_ipxe\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n    ipxeScriptUrl: \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    alwaysPxe: false,\n    userData: local.user_data,\n    customData: local.custom_data,\n    behavior: {\n        allowChanges: [\n            \"custom_data\",\n            \"user_data\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\npxe1 = equinix.metal.Device(\"pxe1\",\n    hostname=\"tf.coreos2-pxe\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"custom_ipxe\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    ipxe_script_url=\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n    always_pxe=False,\n    user_data=local[\"user_data\"],\n    custom_data=local[\"custom_data\"],\n    behavior=equinix.metal.DeviceBehaviorArgs(\n        allow_changes=[\n            \"custom_data\",\n            \"user_data\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pxe1 = new Equinix.Metal.Device(\"pxe1\", new()\n    {\n        Hostname = \"tf.coreos2-pxe\",\n        Plan = \"c3.small.x86\",\n        Metro = \"sv\",\n        OperatingSystem = \"custom_ipxe\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n        IpxeScriptUrl = \"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\",\n        AlwaysPxe = false,\n        UserData = local.User_data,\n        CustomData = local.Custom_data,\n        Behavior = new Equinix.Metal.Inputs.DeviceBehaviorArgs\n        {\n            AllowChanges = new[]\n            {\n                \"custom_data\",\n                \"user_data\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewDevice(ctx, \"pxe1\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"tf.coreos2-pxe\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"custom_ipxe\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tIpxeScriptUrl:   pulumi.String(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\"),\n\t\t\tAlwaysPxe:       pulumi.Bool(false),\n\t\t\tUserData:        pulumi.Any(local.User_data),\n\t\t\tCustomData:      pulumi.Any(local.Custom_data),\n\t\t\tBehavior: \u0026metal.DeviceBehaviorArgs{\n\t\t\t\tAllowChanges: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"custom_data\"),\n\t\t\t\t\tpulumi.String(\"user_data\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.inputs.DeviceBehaviorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pxe1 = new Device(\"pxe1\", DeviceArgs.builder()        \n            .hostname(\"tf.coreos2-pxe\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"custom_ipxe\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .ipxeScriptUrl(\"https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\")\n            .alwaysPxe(\"false\")\n            .userData(local.user_data())\n            .customData(local.custom_data())\n            .behavior(DeviceBehaviorArgs.builder()\n                .allowChanges(                \n                    \"custom_data\",\n                    \"user_data\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pxe1:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.coreos2-pxe\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: custom_ipxe\n      billingCycle: hourly\n      projectId: ${local.project_id}\n      ipxeScriptUrl: https://rawgit.com/cloudnativelabs/pxe/master/metal/coreos-stable-metal.ipxe\n      alwaysPxe: 'false'\n      userData: ${local.user_data}\n      customData: ${local.custom_data}\n      behavior:\n        allowChanges:\n          - custom_data\n          - user_data\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing device ID\n\n```sh\n $ pulumi import equinix:metal/device:Device equinix_metal_device {existing_device_id}\n```\n\n ",
            "properties": {
                "accessPrivateIpv4": {
                    "type": "string",
                    "description": "The ipv4 private IP assigned to the device.\n"
                },
                "accessPublicIpv4": {
                    "type": "string",
                    "description": "The ipv4 maintenance IP assigned to the device.\n"
                },
                "accessPublicIpv6": {
                    "type": "string",
                    "description": "The ipv6 maintenance IP assigned to the device.\n"
                },
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "behavior": {
                    "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                    "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "description": "monthly or hourly\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the device was created.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "deployedFacility": {
                    "type": "string",
                    "description": "The facility where the device is deployed.\n"
                },
                "deployedHardwareReservationId": {
                    "type": "string",
                    "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n"
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the device is locked.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n"
                },
                "network": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceNetwork:DeviceNetwork"
                    },
                    "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.metal.DeviceNetworkType resources or\nequinix.metal.Port datasource.\nSee network_types guide for more info.\n",
                    "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                },
                "operatingSystem": {
                    "type": "string",
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DevicePort:DevicePort"
                    },
                    "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n"
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.metal.ProjectSshKey resource.\n"
                },
                "reinstall": {
                    "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Root password to the server (disabled after 24 hours).\n",
                    "secret": true
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The status of the device.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the device was updated.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource\n"
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "required": [
                "accessPrivateIpv4",
                "accessPublicIpv4",
                "accessPublicIpv6",
                "billingCycle",
                "created",
                "deployedFacility",
                "deployedHardwareReservationId",
                "hostname",
                "locked",
                "network",
                "networkType",
                "operatingSystem",
                "plan",
                "ports",
                "projectId",
                "rootPassword",
                "sshKeyIds",
                "state",
                "updated"
            ],
            "inputProperties": {
                "alwaysPxe": {
                    "type": "boolean",
                    "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                },
                "behavior": {
                    "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                    "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                },
                "billingCycle": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/billingCycle:BillingCycle"
                        }
                    ],
                    "description": "monthly or hourly\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The device description.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ]
                    },
                    "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n",
                    "willReplaceOnChanges": true
                },
                "forceDetachVolumes": {
                    "type": "boolean",
                    "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                },
                "hardwareReservationId": {
                    "type": "string",
                    "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                    },
                    "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                },
                "ipxeScriptUrl": {
                    "type": "string",
                    "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                    "willReplaceOnChanges": true
                },
                "operatingSystem": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/operatingSystem:OperatingSystem"
                        }
                    ],
                    "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                },
                "plan": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/plan:Plan"
                        }
                    ],
                    "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the device\n",
                    "willReplaceOnChanges": true
                },
                "projectSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.metal.ProjectSshKey resource.\n",
                    "willReplaceOnChanges": true
                },
                "reinstall": {
                    "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                    "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags attached to the device.\n"
                },
                "terminationTime": {
                    "type": "string",
                    "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                    "secret": true
                },
                "userSshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource\n",
                    "willReplaceOnChanges": true
                },
                "waitForReservationDeprovision": {
                    "type": "boolean",
                    "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                }
            },
            "requiredInputs": [
                "operatingSystem",
                "plan",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 maintenance IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 maintenance IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean",
                        "description": "If true, a device with OS `custom_ipxe` will continue to boot via iPXE\non reboots.\n"
                    },
                    "behavior": {
                        "$ref": "#/types/equinix:metal/DeviceBehavior:DeviceBehavior",
                        "description": "Behavioral overrides that change how the resource handles certain attribute updates. See Behavior below for more details.\n"
                    },
                    "billingCycle": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/billingCycle:BillingCycle"
                            }
                        ],
                        "description": "monthly or hourly\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the device was created.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"custom_data\"`, the device will be updated in-place instead of recreated.\n",
                        "secret": true
                    },
                    "deployedFacility": {
                        "type": "string",
                        "description": "The facility where the device is deployed.\n"
                    },
                    "deployedHardwareReservationId": {
                        "type": "string",
                        "description": "ID of hardware reservation where this device was deployed.\nIt is useful when using the `next-available` hardware reservation.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The device description.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string",
                                    "$ref": "#/types/equinix:metal/facility:Facility"
                                }
                            ]
                        },
                        "description": "List of facility codes with deployment preferences. Equinix Metal API will go\nthrough the list and will deploy your device to first facility with free capacity. List items must\nbe facility codes or `any` (a wildcard). To find the facility code, visit\n[Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth\ntoken in the top of the page and see JSON from the API response. Conflicts with `metro`.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceDetachVolumes": {
                        "type": "boolean",
                        "description": "Delete device even if it has volumes attached. Only applies\nfor destroy action.\n"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your\nnext available reservation automatically\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device hostname used in deployments taking advantage of Layer3 DHCP\nor metadata service configuration.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DeviceIpAddress:DeviceIpAddress"
                        },
                        "description": "A list of IP address types for the device. See\nIP address below for more details.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string",
                        "description": "URL pointing to a hosted iPXE script. More information is in the\n[Custom iPXE](https://metal.equinix.com/developers/docs/servers/custom-ipxe/) doc.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether the device is locked.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro area for the new device. Conflicts with `facilities`.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DeviceNetwork:DeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/networkType:NetworkType"
                            }
                        ],
                        "description": "(Deprecated) Network type of a device, used in\n[Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Since this\nattribute is deprecated you should handle Network Type with one of\nequinix_metal_port,\nequinix.metal.DeviceNetworkType resources or\nequinix.metal.Port datasource.\nSee network_types guide for more info.\n",
                        "deprecationMessage": "You should handle Network Type with one of 'equinix_metal_port' or 'equinix_metal_device_network_type' resources. See section 'Guides' for more info"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/operatingSystem:OperatingSystem"
                            }
                        ],
                        "description": "The operating system slug. To find the slug, or visit\n[Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your\nAPI auth token in the top of the page and see JSON from the API response.\n"
                    },
                    "plan": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/plan:Plan"
                            }
                        ],
                        "description": "The device plan slug. To find the plan slug, visit\n[Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the\ntop of the page and see JSON from the API response.\n",
                        "willReplaceOnChanges": true
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/DevicePort:DevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the device\n",
                        "willReplaceOnChanges": true
                    },
                    "projectSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the project SSH keys which should be added to the device.\nIf you omit this, SSH keys of all the members of the parent project will be added to the device. If\nyou specify this array, only the listed project SSH keys will be added. Project SSH keys can be\ncreated with the equinix.metal.ProjectSshKey resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstall": {
                        "$ref": "#/types/equinix:metal/DeviceReinstall:DeviceReinstall",
                        "description": "Whether the device should be reinstalled instead of destroyed when\nmodifying user_data, custom_data, or operating system. See Reinstall below for more\ndetails.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (disabled after 24 hours).\n",
                        "secret": true
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user and project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The status of the device.\n"
                    },
                    "storage": {
                        "type": "string",
                        "description": "JSON for custom partitioning. Only usable on reserved hardware. More\ninformation in in the\n[Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/)\ndoc. Please note that the disks.partitions.size attribute must be a string, not an integer. It can\nbe a number string, or size notation string, e.g. \"4G\" or \"8M\" (for gigabytes and megabytes).\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    },
                    "terminationTime": {
                        "type": "string",
                        "description": "Timestamp for device termination. For example `2021-09-03T16:32:00+03:00`.\nIf you don't supply timezone info, timestamp is assumed to be in UTC.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the device was updated.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `\"user_data\"`, the device will be updated in-place instead of recreated.\n",
                        "secret": true
                    },
                    "userSshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the equinix.metal.SshKey resource\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForReservationDeprovision": {
                        "type": "boolean",
                        "description": "Only used for devices in reserved hardware. If\nset, the deletion of this device will block until the hardware reservation is marked provisionable\n(about 4 minutes in August 2019).\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/deviceNetworkType:DeviceNetworkType": {
            "description": "{{% examples %}}\n## Example Usage\n\n\u003e **NOTE:** This resource takes a named network type with any mode required parameters and converts a device to the named network type. This resource simulated the network type interface for Devices in the Equinix Metal Portal. That interface changed when additional network types were introduced with more diverse port configurations and it is not guaranteed to work in devices with more than two ethernet ports. See the Network Types Guide for examples of this resource and to learn about the recommended `equinix.metal.Port` alternative.\n{{% /examples %}}\n\n## Import\n\nThis resource can also be imported using existing device ID\n\n```sh\n $ pulumi import equinix:metal/deviceNetworkType:DeviceNetworkType equinix_metal_device_network_type {existing device_id}\n```\n\n ",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "required": [
                "deviceId",
                "type"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The ID of the device on which the network type should be set.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceNetworkType resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The ID of the device on which the network type should be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Network type to set. Must be one of `layer3`, `hybrid`, `hybrid-bonded`, `layer2-individual`\nand `layer2-bonded`.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/gateway:Gateway": {
            "description": "Use this resource to create Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testGateway = new equinix.metal.Gateway(\"testGateway\", {\n    projectId: local.project_id,\n    vlanId: testVlan.id,\n    privateIpv4SubnetSize: 8,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_gateway = equinix.metal.Gateway(\"testGateway\",\n    project_id=local[\"project_id\"],\n    vlan_id=test_vlan.id,\n    private_ipv4_subnet_size=8)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        Description = \"test VLAN in SV\",\n        Metro = \"sv\",\n        ProjectId = local.Project_id,\n    });\n\n    var testGateway = new Equinix.Metal.Gateway(\"testGateway\", new()\n    {\n        ProjectId = local.Project_id,\n        VlanId = testVlan.Id,\n        PrivateIpv4SubnetSize = 8,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestVlan, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewGateway(ctx, \"testGateway\", \u0026metal.GatewayArgs{\n\t\t\tProjectId:             pulumi.Any(local.Project_id),\n\t\t\tVlanId:                testVlan.ID(),\n\t\t\tPrivateIpv4SubnetSize: pulumi.Int(8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.Gateway;\nimport com.pulumi.equinix.metal.GatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        var testGateway = new Gateway(\"testGateway\", GatewayArgs.builder()        \n            .projectId(local.project_id())\n            .vlanId(testVlan.id())\n            .privateIpv4SubnetSize(8)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\n  testGateway:\n    type: equinix:metal:Gateway\n    properties:\n      projectId: ${local.project_id}\n      vlanId: ${testVlan.id}\n      privateIpv4SubnetSize: 8\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create Metal Gateway for a VLAN and reserved IP address block\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testReservedIpBlock = new equinix.metal.ReservedIpBlock(\"testReservedIpBlock\", {\n    projectId: local.project_id,\n    metro: \"sv\",\n    quantity: 2,\n});\nconst testGateway = new equinix.metal.Gateway(\"testGateway\", {\n    projectId: local.project_id,\n    vlanId: testVlan.id,\n    ipReservationId: testReservedIpBlock.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN and reserved IP address block\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_reserved_ip_block = equinix.metal.ReservedIpBlock(\"testReservedIpBlock\",\n    project_id=local[\"project_id\"],\n    metro=\"sv\",\n    quantity=2)\ntest_gateway = equinix.metal.Gateway(\"testGateway\",\n    project_id=local[\"project_id\"],\n    vlan_id=test_vlan.id,\n    ip_reservation_id=test_reserved_ip_block.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create Metal Gateway for a VLAN and reserved IP address block\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        Description = \"test VLAN in SV\",\n        Metro = \"sv\",\n        ProjectId = local.Project_id,\n    });\n\n    var testReservedIpBlock = new Equinix.Metal.ReservedIpBlock(\"testReservedIpBlock\", new()\n    {\n        ProjectId = local.Project_id,\n        Metro = \"sv\",\n        Quantity = 2,\n    });\n\n    var testGateway = new Equinix.Metal.Gateway(\"testGateway\", new()\n    {\n        ProjectId = local.Project_id,\n        VlanId = testVlan.Id,\n        IpReservationId = testReservedIpBlock.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestVlan, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestReservedIpBlock, err := metal.NewReservedIpBlock(ctx, \"testReservedIpBlock\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewGateway(ctx, \"testGateway\", \u0026metal.GatewayArgs{\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t\tVlanId:          testVlan.ID(),\n\t\t\tIpReservationId: testReservedIpBlock.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.ReservedIpBlock;\nimport com.pulumi.equinix.metal.ReservedIpBlockArgs;\nimport com.pulumi.equinix.metal.Gateway;\nimport com.pulumi.equinix.metal.GatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        var testReservedIpBlock = new ReservedIpBlock(\"testReservedIpBlock\", ReservedIpBlockArgs.builder()        \n            .projectId(local.project_id())\n            .metro(\"sv\")\n            .quantity(2)\n            .build());\n\n        var testGateway = new Gateway(\"testGateway\", GatewayArgs.builder()        \n            .projectId(local.project_id())\n            .vlanId(testVlan.id())\n            .ipReservationId(testReservedIpBlock.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Metal Gateway for a VLAN and reserved IP address block\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\n  testReservedIpBlock:\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${local.project_id}\n      metro: sv\n      quantity: 2\n  testGateway:\n    type: equinix:metal:Gateway\n    properties:\n      projectId: ${local.project_id}\n      vlanId: ${testVlan.id}\n      ipReservationId: ${testReservedIpBlock.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n"
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Status of the gateway resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF associated with the IP Reservation\n"
                }
            },
            "required": [
                "privateIpv4SubnetSize",
                "projectId",
                "state",
                "vlanId",
                "vrfId"
            ],
            "inputProperties": {
                "ipReservationId": {
                    "type": "string",
                    "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpv4SubnetSize": {
                    "type": "integer",
                    "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the gateway is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN where the gateway is scoped to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "vlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of Public or VRF IP Reservation to associate with the gateway, the\nreservation must be in the same metro as the VLAN, conflicts with `private_ipv4_subnet_size`.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet to create for this metal\ngateway, must be one of `8`, `16`, `32`, `64`, `128`. Conflicts with `ip_reservation_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/ipAttachment:IpAttachment": {
            "description": "Provides a resource to attach elastic IP subnets to devices.\n\nTo attach an IP subnet from a reserved block to a provisioned device, you must derive a subnet CIDR\nbelonging to one of your reserved blocks in the same project and facility as the target device.\n\nFor example, you have reserved IPv4 address block `147.229.10.152/30`, you can choose to assign\neither the whole block as one subnet to a device; or 2 subnets with CIDRs `147.229.10.152/31` and\n`147.229.10.154/31`; or 4 subnets with mask prefix length `32`. More about the elastic IP subnets\nis [here](https://metal.equinix.com/developers/docs/networking/elastic-ips/).\n\nDevice and reserved block must be in the same facility.\n",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Length of CIDR prefix of the subnet as integer.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "IP address of gateway for the subnet.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "netmask": {
                    "type": "string",
                    "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Subnet network address.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                },
                "vrfId": {
                    "type": "string"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "deviceId",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "public",
                "vrfId"
            ],
            "inputProperties": {
                "cidrNotation": {
                    "type": "string",
                    "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n",
                    "willReplaceOnChanges": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to which to assign the subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrNotation",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAttachment resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Length of CIDR prefix of the subnet as integer.\n"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of subnet from block reserved in the same project\nand facility as the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to which to assign the subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "IP address of gateway for the subnet.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Flag indicating whether IP block is global, i.e. assignable in any location\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Subnet mask in decimal notation, e.g., `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Subnet network address.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether subnet is reachable from the Internet.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/organization:Organization": {
            "description": "Provides a resource to manage organization resource in Equinix Metal.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create a new Organization\nconst tfOrganization1 = new equinix.metal.Organization(\"tfOrganization1\", {description: \"quux\"});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new Organization\ntf_organization1 = equinix.metal.Organization(\"tfOrganization1\", description=\"quux\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Organization\n    var tfOrganization1 = new Equinix.Metal.Organization(\"tfOrganization1\", new()\n    {\n        Description = \"quux\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewOrganization(ctx, \"tfOrganization1\", \u0026metal.OrganizationArgs{\n\t\t\tDescription: pulumi.String(\"quux\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Organization;\nimport com.pulumi.equinix.metal.OrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfOrganization1 = new Organization(\"tfOrganization1\", OrganizationArgs.builder()        \n            .description(\"quux\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Organization\n  tfOrganization1:\n    type: equinix:metal:Organization\n    properties:\n      description: quux\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing organization ID\n\n```sh\n $ pulumi import equinix:metal/organization:Organization equinix_metal_organization {existing_organization_id}\n```\n\n ",
            "properties": {
                "address": {
                    "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                    "description": "An object that has the address information. See Address\nbelow for more details.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the organization was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the organization was updated.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "required": [
                "address",
                "created",
                "name",
                "updated"
            ],
            "inputProperties": {
                "address": {
                    "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                    "description": "An object that has the address information. See Address\nbelow for more details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "Logo URL.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "twitter": {
                    "type": "string",
                    "description": "Twitter handle.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website link.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "address": {
                        "$ref": "#/types/equinix:metal/OrganizationAddress:OrganizationAddress",
                        "description": "An object that has the address information. See Address\nbelow for more details.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the organization was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the organization was updated.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/organizationMember:OrganizationMember": {
            "description": "Manage the membership of existing and new invitees within an Equinix Metal organization and its projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nAdd a member to an organization to collaborate on given projects:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst member = new equinix.metal.OrganizationMember(\"member\", {\n    invitee: \"member@example.com\",\n    roles: [\"limited_collaborator\"],\n    projectsIds: [_var.project_id],\n    organizationId: _var.organization_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nmember = equinix.metal.OrganizationMember(\"member\",\n    invitee=\"member@example.com\",\n    roles=[\"limited_collaborator\"],\n    projects_ids=[var[\"project_id\"]],\n    organization_id=var[\"organization_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var member = new Equinix.Metal.OrganizationMember(\"member\", new()\n    {\n        Invitee = \"member@example.com\",\n        Roles = new[]\n        {\n            \"limited_collaborator\",\n        },\n        ProjectsIds = new[]\n        {\n            @var.Project_id,\n        },\n        OrganizationId = @var.Organization_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewOrganizationMember(ctx, \"member\", \u0026metal.OrganizationMemberArgs{\n\t\t\tInvitee: pulumi.String(\"member@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"limited_collaborator\"),\n\t\t\t},\n\t\t\tProjectsIds: pulumi.StringArray{\n\t\t\t\t_var.Project_id,\n\t\t\t},\n\t\t\tOrganizationId: pulumi.Any(_var.Organization_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.OrganizationMember;\nimport com.pulumi.equinix.metal.OrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var member = new OrganizationMember(\"member\", OrganizationMemberArgs.builder()        \n            .invitee(\"member@example.com\")\n            .roles(\"limited_collaborator\")\n            .projectsIds(var_.project_id())\n            .organizationId(var_.organization_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  member:\n    type: equinix:metal:OrganizationMember\n    properties:\n      invitee: member@example.com\n      roles:\n        - limited_collaborator\n      projectsIds:\n        - ${var.project_id}\n      organizationId: ${var.organization_id}\n```\n\nAdd a member to an organization as an organization administrator:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst owner = new equinix.metal.OrganizationMember(\"owner\", {\n    invitee: \"admin@example.com\",\n    roles: [\"owner\"],\n    projectsIds: [],\n    organizationId: _var.organization_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nowner = equinix.metal.OrganizationMember(\"owner\",\n    invitee=\"admin@example.com\",\n    roles=[\"owner\"],\n    projects_ids=[],\n    organization_id=var[\"organization_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var owner = new Equinix.Metal.OrganizationMember(\"owner\", new()\n    {\n        Invitee = \"admin@example.com\",\n        Roles = new[]\n        {\n            \"owner\",\n        },\n        ProjectsIds = new[] {},\n        OrganizationId = @var.Organization_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewOrganizationMember(ctx, \"owner\", \u0026metal.OrganizationMemberArgs{\n\t\t\tInvitee: pulumi.String(\"admin@example.com\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"owner\"),\n\t\t\t},\n\t\t\tProjectsIds:    pulumi.StringArray{},\n\t\t\tOrganizationId: pulumi.Any(_var.Organization_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.OrganizationMember;\nimport com.pulumi.equinix.metal.OrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var owner = new OrganizationMember(\"owner\", OrganizationMemberArgs.builder()        \n            .invitee(\"admin@example.com\")\n            .roles(\"owner\")\n            .projectsIds()\n            .organizationId(var_.organization_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  owner:\n    type: equinix:metal:OrganizationMember\n    properties:\n      invitee: admin@example.com\n      roles:\n        - owner\n      projectsIds: []\n      organizationId: ${var.organization_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the `invitee` and `organization_id` as colon separated arguments\n\n```sh\n $ pulumi import equinix:metal/organizationMember:OrganizationMember resource_name {invitee}:{organization_id}\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the invitation was created (only known in the invitation stage)\n"
                },
                "invitedBy": {
                    "type": "string",
                    "description": "The user_id of the user that sent the invitation (only known in the invitation stage)\n"
                },
                "invitee": {
                    "type": "string",
                    "description": "The email address of the user to invite\n"
                },
                "message": {
                    "type": "string",
                    "description": "A message to include in the emailed invitation.\n"
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce for the invitation (only known in the invitation stage)\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to invite the user to\n"
                },
                "projectsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the membership ('invited' when an invitation is open, 'active' when the user is an organization member)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When the invitation was updated (only known in the invitation stage)\n"
                }
            },
            "required": [
                "created",
                "invitedBy",
                "invitee",
                "nonce",
                "organizationId",
                "projectsIds",
                "roles",
                "state",
                "updated"
            ],
            "inputProperties": {
                "invitee": {
                    "type": "string",
                    "description": "The email address of the user to invite\n",
                    "willReplaceOnChanges": true
                },
                "message": {
                    "type": "string",
                    "description": "A message to include in the emailed invitation.\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to invite the user to\n",
                    "willReplaceOnChanges": true
                },
                "projectsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "invitee",
                "organizationId",
                "projectsIds",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationMember resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When the invitation was created (only known in the invitation stage)\n"
                    },
                    "invitedBy": {
                        "type": "string",
                        "description": "The user_id of the user that sent the invitation (only known in the invitation stage)\n"
                    },
                    "invitee": {
                        "type": "string",
                        "description": "The email address of the user to invite\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "A message to include in the emailed invitation.\n",
                        "willReplaceOnChanges": true
                    },
                    "nonce": {
                        "type": "string",
                        "description": "The nonce for the invitation (only known in the invitation stage)\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization to invite the user to\n",
                        "willReplaceOnChanges": true
                    },
                    "projectsIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Project IDs the member has access to within the organization. If the member is an 'admin', the projects list should be empty.\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Organization roles (admin, collaborator, limited_collaborator, billing)\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the membership ('invited' when an invitation is open, 'active' when the user is an organization member)\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When the invitation was updated (only known in the invitation stage)\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/port:Port": {
            "properties": {
                "bondId": {
                    "type": "string",
                    "description": "UUID of the bond port.\n"
                },
                "bondName": {
                    "type": "string",
                    "description": "Name of the bond port.\n"
                },
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "disbondSupported": {
                    "type": "boolean",
                    "description": "Flag indicating whether the port can be removed from a bond.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address of the port.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n"
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "required": [
                "bondId",
                "bondName",
                "bonded",
                "disbondSupported",
                "mac",
                "name",
                "networkType",
                "portId",
                "type",
                "vlanIds",
                "vxlanIds"
            ],
            "inputProperties": {
                "bonded": {
                    "type": "boolean",
                    "description": "Whether the port should be bonded.\n"
                },
                "layer2": {
                    "type": "boolean",
                    "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                },
                "nativeVlanId": {
                    "type": "string",
                    "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                },
                "portId": {
                    "type": "string",
                    "description": "ID of the port to read.\n",
                    "willReplaceOnChanges": true
                },
                "resetOnDelete": {
                    "type": "boolean",
                    "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                },
                "vxlanIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                }
            },
            "requiredInputs": [
                "bonded",
                "portId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Whether the port should be bonded.\n"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "layer2": {
                        "type": "boolean",
                        "description": "Whether to put the port to Layer 2 mode, valid only for bond ports.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port, e.g. `bond0` or `eth0`.\n"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of a VLAN to assign as a native VLAN. It must be one of\nattached VLANs (from `vlan_ids` parameter).\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of layer2-bonded, layer2-individual, layer3, hybrid and hybrid-bonded. This\nattribute is only set on bond ports.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read.\n",
                        "willReplaceOnChanges": true
                    },
                    "resetOnDelete": {
                        "type": "boolean",
                        "description": "Behavioral setting to reset the port to default settings (layer3 bonded mode without any vlan attached) before delete/destroy.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN UUIDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of VXLAN IDs to attach to the port, valid only for L2 and Hybrid\nports.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/portVlanAttachment:PortVlanAttachment": {
            "description": "Provides a resource to attach device ports to VLANs.\n\nDevice and VLAN must be in the same facility.\n\nIf you need this resource to add the port back to bond on removal, set `force_bond = true`.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Hybrid network type\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst testDevice = new equinix.metal.Device(\"testDevice\", {\n    hostname: \"test\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\nconst testDeviceNetworkType = new equinix.metal.DeviceNetworkType(\"testDeviceNetworkType\", {\n    deviceId: testDevice.id,\n    type: \"hybrid\",\n});\nconst testPortVlanAttachment = new equinix.metal.PortVlanAttachment(\"testPortVlanAttachment\", {\n    deviceId: testDeviceNetworkType.id,\n    portName: \"eth1\",\n    vlanVnid: testVlan.vxlan,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest_device = equinix.metal.Device(\"testDevice\",\n    hostname=\"test\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\ntest_device_network_type = equinix.metal.DeviceNetworkType(\"testDeviceNetworkType\",\n    device_id=test_device.id,\n    type=\"hybrid\")\ntest_port_vlan_attachment = equinix.metal.PortVlanAttachment(\"testPortVlanAttachment\",\n    device_id=test_device_network_type.id,\n    port_name=\"eth1\",\n    vlan_vnid=test_vlan.vxlan)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        Description = \"VLAN in New Jersey\",\n        Facility = \"ny5\",\n        ProjectId = local.Project_id,\n    });\n\n    var testDevice = new Equinix.Metal.Device(\"testDevice\", new()\n    {\n        Hostname = \"test\",\n        Plan = \"c3.small.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    });\n\n    var testDeviceNetworkType = new Equinix.Metal.DeviceNetworkType(\"testDeviceNetworkType\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"hybrid\",\n    });\n\n    var testPortVlanAttachment = new Equinix.Metal.PortVlanAttachment(\"testPortVlanAttachment\", new()\n    {\n        DeviceId = testDeviceNetworkType.Id,\n        PortName = \"eth1\",\n        VlanVnid = testVlan.Vxlan,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestVlan, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestDevice, err := metal.NewDevice(ctx, \"testDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestDeviceNetworkType, err := metal.NewDeviceNetworkType(ctx, \"testDeviceNetworkType\", \u0026metal.DeviceNetworkTypeArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tType:     pulumi.String(\"hybrid\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewPortVlanAttachment(ctx, \"testPortVlanAttachment\", \u0026metal.PortVlanAttachmentArgs{\n\t\t\tDeviceId: testDeviceNetworkType.ID(),\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t\tVlanVnid: testVlan.Vxlan,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.DeviceNetworkType;\nimport com.pulumi.equinix.metal.DeviceNetworkTypeArgs;\nimport com.pulumi.equinix.metal.PortVlanAttachment;\nimport com.pulumi.equinix.metal.PortVlanAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n        var testDeviceNetworkType = new DeviceNetworkType(\"testDeviceNetworkType\", DeviceNetworkTypeArgs.builder()        \n            .deviceId(testDevice.id())\n            .type(\"hybrid\")\n            .build());\n\n        var testPortVlanAttachment = new PortVlanAttachment(\"testPortVlanAttachment\", PortVlanAttachmentArgs.builder()        \n            .deviceId(testDeviceNetworkType.id())\n            .portName(\"eth1\")\n            .vlanVnid(testVlan.vxlan())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  testDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: test\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n  testDeviceNetworkType:\n    type: equinix:metal:DeviceNetworkType\n    properties:\n      deviceId: ${testDevice.id}\n      type: hybrid\n  testPortVlanAttachment:\n    type: equinix:metal:PortVlanAttachment\n    properties:\n      deviceId: ${testDeviceNetworkType.id}\n      portName: eth1\n      vlanVnid: ${testVlan.vxlan}\n```\n{{% /example %}}\n{{% example %}}\n### Layer 2 network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst testDevice = new equinix.metal.Device(\"testDevice\", {\n    hostname: \"test\",\n    plan: \"c3.small.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\nconst testDeviceNetworkType = new equinix.metal.DeviceNetworkType(\"testDeviceNetworkType\", {\n    deviceId: testDevice.id,\n    type: \"layer2-individual\",\n});\nconst test1Vlan = new equinix.metal.Vlan(\"test1Vlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst test2Vlan = new equinix.metal.Vlan(\"test2Vlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"ny5\",\n    projectId: local.project_id,\n});\nconst test1PortVlanAttachment = new equinix.metal.PortVlanAttachment(\"test1PortVlanAttachment\", {\n    deviceId: testDeviceNetworkType.id,\n    vlanVnid: test1Vlan.vxlan,\n    portName: \"eth1\",\n});\nconst test2PortVlanAttachment = new equinix.metal.PortVlanAttachment(\"test2PortVlanAttachment\", {\n    deviceId: testDeviceNetworkType.id,\n    vlanVnid: test2Vlan.vxlan,\n    portName: \"eth1\",\n    native: true,\n}, {\n    dependsOn: [\"equinix_metal_port_vlan_attachment.test1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest_device = equinix.metal.Device(\"testDevice\",\n    hostname=\"test\",\n    plan=\"c3.small.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\ntest_device_network_type = equinix.metal.DeviceNetworkType(\"testDeviceNetworkType\",\n    device_id=test_device.id,\n    type=\"layer2-individual\")\ntest1_vlan = equinix.metal.Vlan(\"test1Vlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest2_vlan = equinix.metal.Vlan(\"test2Vlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"ny5\",\n    project_id=local[\"project_id\"])\ntest1_port_vlan_attachment = equinix.metal.PortVlanAttachment(\"test1PortVlanAttachment\",\n    device_id=test_device_network_type.id,\n    vlan_vnid=test1_vlan.vxlan,\n    port_name=\"eth1\")\ntest2_port_vlan_attachment = equinix.metal.PortVlanAttachment(\"test2PortVlanAttachment\",\n    device_id=test_device_network_type.id,\n    vlan_vnid=test2_vlan.vxlan,\n    port_name=\"eth1\",\n    native=True,\n    opts=pulumi.ResourceOptions(depends_on=[\"equinix_metal_port_vlan_attachment.test1\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testDevice = new Equinix.Metal.Device(\"testDevice\", new()\n    {\n        Hostname = \"test\",\n        Plan = \"c3.small.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    });\n\n    var testDeviceNetworkType = new Equinix.Metal.DeviceNetworkType(\"testDeviceNetworkType\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"layer2-individual\",\n    });\n\n    var test1Vlan = new Equinix.Metal.Vlan(\"test1Vlan\", new()\n    {\n        Description = \"VLAN in New Jersey\",\n        Facility = \"ny5\",\n        ProjectId = local.Project_id,\n    });\n\n    var test2Vlan = new Equinix.Metal.Vlan(\"test2Vlan\", new()\n    {\n        Description = \"VLAN in New Jersey\",\n        Facility = \"ny5\",\n        ProjectId = local.Project_id,\n    });\n\n    var test1PortVlanAttachment = new Equinix.Metal.PortVlanAttachment(\"test1PortVlanAttachment\", new()\n    {\n        DeviceId = testDeviceNetworkType.Id,\n        VlanVnid = test1Vlan.Vxlan,\n        PortName = \"eth1\",\n    });\n\n    var test2PortVlanAttachment = new Equinix.Metal.PortVlanAttachment(\"test2PortVlanAttachment\", new()\n    {\n        DeviceId = testDeviceNetworkType.Id,\n        VlanVnid = test2Vlan.Vxlan,\n        PortName = \"eth1\",\n        Native = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            \"equinix_metal_port_vlan_attachment.test1\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestDevice, err := metal.NewDevice(ctx, \"testDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.small.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestDeviceNetworkType, err := metal.NewDeviceNetworkType(ctx, \"testDeviceNetworkType\", \u0026metal.DeviceNetworkTypeArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tType:     pulumi.String(\"layer2-individual\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest1Vlan, err := metal.NewVlan(ctx, \"test1Vlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest2Vlan, err := metal.NewVlan(ctx, \"test2Vlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"ny5\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewPortVlanAttachment(ctx, \"test1PortVlanAttachment\", \u0026metal.PortVlanAttachmentArgs{\n\t\t\tDeviceId: testDeviceNetworkType.ID(),\n\t\t\tVlanVnid: test1Vlan.Vxlan,\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewPortVlanAttachment(ctx, \"test2PortVlanAttachment\", \u0026metal.PortVlanAttachmentArgs{\n\t\t\tDeviceId: testDeviceNetworkType.ID(),\n\t\t\tVlanVnid: test2Vlan.Vxlan,\n\t\t\tPortName: pulumi.String(\"eth1\"),\n\t\t\tNative:   pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpulumi.Resource(\"equinix_metal_port_vlan_attachment.test1\"),\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.DeviceNetworkType;\nimport com.pulumi.equinix.metal.DeviceNetworkTypeArgs;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.PortVlanAttachment;\nimport com.pulumi.equinix.metal.PortVlanAttachmentArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.small.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n        var testDeviceNetworkType = new DeviceNetworkType(\"testDeviceNetworkType\", DeviceNetworkTypeArgs.builder()        \n            .deviceId(testDevice.id())\n            .type(\"layer2-individual\")\n            .build());\n\n        var test1Vlan = new Vlan(\"test1Vlan\", VlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var test2Vlan = new Vlan(\"test2Vlan\", VlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"ny5\")\n            .projectId(local.project_id())\n            .build());\n\n        var test1PortVlanAttachment = new PortVlanAttachment(\"test1PortVlanAttachment\", PortVlanAttachmentArgs.builder()        \n            .deviceId(testDeviceNetworkType.id())\n            .vlanVnid(test1Vlan.vxlan())\n            .portName(\"eth1\")\n            .build());\n\n        var test2PortVlanAttachment = new PortVlanAttachment(\"test2PortVlanAttachment\", PortVlanAttachmentArgs.builder()        \n            .deviceId(testDeviceNetworkType.id())\n            .vlanVnid(test2Vlan.vxlan())\n            .portName(\"eth1\")\n            .native_(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(\"equinix_metal_port_vlan_attachment.test1\")\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: test\n      plan: c3.small.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n  testDeviceNetworkType:\n    type: equinix:metal:DeviceNetworkType\n    properties:\n      deviceId: ${testDevice.id}\n      type: layer2-individual\n  test1Vlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  test2Vlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in New Jersey\n      facility: ny5\n      projectId: ${local.project_id}\n  test1PortVlanAttachment:\n    type: equinix:metal:PortVlanAttachment\n    properties:\n      deviceId: ${testDeviceNetworkType.id}\n      vlanVnid: ${test1Vlan.vxlan}\n      portName: eth1\n  test2PortVlanAttachment:\n    type: equinix:metal:PortVlanAttachment\n    properties:\n      deviceId: ${testDeviceNetworkType.id}\n      vlanVnid: ${test2Vlan.vxlan}\n      portName: eth1\n      native: true\n    options:\n      dependson:\n        - equinix_metal_port_vlan_attachment.test1\n```\n{{% /example %}}\n{{% /examples %}}\n## Attribute Referece\n\nIn addition to all arguments above, the following attributes are exported:\n\n* `id` - UUID of device port used in the assignment.\n* `vlan_id` - UUID of VLAN API resource.\n* `port_id` - UUID of device port.\n",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n"
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n"
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of device port\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of VLAN API resource\n"
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n"
                }
            },
            "required": [
                "deviceId",
                "portId",
                "portName",
                "vlanId",
                "vlanVnid"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "ID of device to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "forceBond": {
                    "type": "boolean",
                    "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                    "willReplaceOnChanges": true
                },
                "native": {
                    "type": "boolean",
                    "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                },
                "portName": {
                    "type": "string",
                    "description": "Name of network port to be assigned to the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "vlanVnid": {
                    "type": "integer",
                    "description": "VXLAN Network Identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceId",
                "portName",
                "vlanVnid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PortVlanAttachment resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "ID of device to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "forceBond": {
                        "type": "boolean",
                        "description": "Add port back to the bond when this resource is removed. Default is\n`false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "native": {
                        "type": "boolean",
                        "description": "Mark this VLAN a native VLAN on the port. This can be used only if this\nassignment assigns second or further VLAN to the port. To ensure that this attachment is not first\non a port, you can use `depends_on` pointing to another `equinix.metal.PortVlanAttachment`, just\nlike in the layer2-individual example above.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of device port\n"
                    },
                    "portName": {
                        "type": "string",
                        "description": "Name of network port to be assigned to the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of VLAN API resource\n"
                    },
                    "vlanVnid": {
                        "type": "integer",
                        "description": "VXLAN Network Identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/project:Project": {
            "description": "\n\n\n## Import\n\nThis resource can be imported using an existing project ID\n\n```sh\n $ pulumi import equinix:metal/project:Project equinix_metal_project {existing_project_id}\n```\n\n ",
            "properties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                },
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the project was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n"
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the project was updated.\n"
                }
            },
            "required": [
                "created",
                "name",
                "organizationId",
                "paymentMethodId",
                "updated"
            ],
            "inputProperties": {
                "backendTransfer": {
                    "type": "boolean",
                    "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                },
                "bgpConfig": {
                    "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                    "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n",
                    "willReplaceOnChanges": true
                },
                "paymentMethodId": {
                    "type": "string",
                    "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Enable or disable [Backend Transfer](https://metal.equinix.com/developers/docs/networking/backend-transfer/), default is `false`.\n"
                    },
                    "bgpConfig": {
                        "$ref": "#/types/equinix:metal/ProjectBgpConfig:ProjectBgpConfig",
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of organization under which you want to create the project. If you\nleave it out, the project will be create under your the default organization of your account.\n",
                        "willReplaceOnChanges": true
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project. The payment method and the\nproject need to belong to the same organization (passed with `organization_id`, or default).\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/projectApiKey:ProjectApiKey": {
            "description": "Use this resource to create Metal Project API Key resources in Equinix Metal. Project API keys can\nbe used to create and read resources in a single project. Each API key contains a token which can\nbe used for authentication in Equinix Metal HTTP API (in HTTP request header `X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create a new read-only API key in existing project\nconst test = new equinix.metal.ProjectApiKey(\"test\", {\n    projectId: local.existing_project_id,\n    description: \"Read-only key scoped to a projct\",\n    readOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new read-only API key in existing project\ntest = equinix.metal.ProjectApiKey(\"test\",\n    project_id=local[\"existing_project_id\"],\n    description=\"Read-only key scoped to a projct\",\n    read_only=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new read-only API key in existing project\n    var test = new Equinix.Metal.ProjectApiKey(\"test\", new()\n    {\n        ProjectId = local.Existing_project_id,\n        Description = \"Read-only key scoped to a projct\",\n        ReadOnly = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewProjectApiKey(ctx, \"test\", \u0026metal.ProjectApiKeyArgs{\n\t\t\tProjectId:   pulumi.Any(local.Existing_project_id),\n\t\t\tDescription: pulumi.String(\"Read-only key scoped to a projct\"),\n\t\t\tReadOnly:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.ProjectApiKey;\nimport com.pulumi.equinix.metal.ProjectApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ProjectApiKey(\"test\", ProjectApiKeyArgs.builder()        \n            .projectId(local.existing_project_id())\n            .description(\"Read-only key scoped to a projct\")\n            .readOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new read-only API key in existing project\n  test:\n    type: equinix:metal:ProjectApiKey\n    properties:\n      projectId: ${local.existing_project_id}\n      description: Read-only key scoped to a projct\n      readOnly: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients\n",
                    "secret": true
                }
            },
            "required": [
                "description",
                "projectId",
                "readOnly",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the project where the API key is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "projectId",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the Project API Key resource.\n* `read-only` - (Optional) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the API key is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/projectSshKey:ProjectSshKey": {
            "description": "Provides an Equinix Metal project SSH key resource to manage project-specific SSH keys.\nProject SSH keys will only be populated onto servers that belong to that project, in contrast to\nUser SSH Keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst testProjectSshKey = new equinix.metal.ProjectSshKey(\"testProjectSshKey\", {\n    publicKey: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n    projectId: projectId,\n});\nconst testDevice = new equinix.metal.Device(\"testDevice\", {\n    hostname: \"test\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectSshKeyIds: [testProjectSshKey.id],\n    projectId: projectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest_project_ssh_key = equinix.metal.ProjectSshKey(\"testProjectSshKey\",\n    public_key=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n    project_id=project_id)\ntest_device = equinix.metal.Device(\"testDevice\",\n    hostname=\"test\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"ny5\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_ssh_key_ids=[test_project_ssh_key.id],\n    project_id=project_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n    var testProjectSshKey = new Equinix.Metal.ProjectSshKey(\"testProjectSshKey\", new()\n    {\n        PublicKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\",\n        ProjectId = projectId,\n    });\n\n    var testDevice = new Equinix.Metal.Device(\"testDevice\", new()\n    {\n        Hostname = \"test\",\n        Plan = \"c3.medium.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectSshKeyIds = new[]\n        {\n            testProjectSshKey.Id,\n        },\n        ProjectId = projectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttestProjectSshKey, err := metal.NewProjectSshKey(ctx, \"testProjectSshKey\", \u0026metal.ProjectSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\"),\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewDevice(ctx, \"testDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"test\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectSshKeyIds: pulumi.StringArray{\n\t\t\t\ttestProjectSshKey.ID(),\n\t\t\t},\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.ProjectSshKey;\nimport com.pulumi.equinix.metal.ProjectSshKeyArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        var testProjectSshKey = new ProjectSshKey(\"testProjectSshKey\", ProjectSshKeyArgs.builder()        \n            .publicKey(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\")\n            .projectId(projectId)\n            .build());\n\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()        \n            .hostname(\"test\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectSshKeyIds(testProjectSshKey.id())\n            .projectId(projectId)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testProjectSshKey:\n    type: equinix:metal:ProjectSshKey\n    properties:\n      publicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDM/unxJeFqxsTJcu6mhqsMHSaVlpu+Jj/P+44zrm6X/MAoHSX3X9oLgujEjjZ74yLfdfe0bJrbL2YgJzNaEkIQQ1VPMHB5EhTKUBGnzlPP0hHTnxsjAm9qDHgUPgvgFDQSAMzdJRJ0Cexo16Ph9VxCoLh3dxiE7s2gaM2FdVg7P8aSxKypsxAhYV3D0AwqzoOyT6WWhBoQ0xZ85XevOTnJCpImSemEGs6nVGEsWcEc1d1YvdxFjAK4SdsKUMkj4Dsy/leKsdi/DEAf356vbMT1UHsXXvy5TlHu/Pa6qF53v32Enz+nhKy7/8W2Yt2yWx8HnQcT2rug9lvCXagJO6oauqRTO77C4QZn13ZLMZgLT66S/tNh2EX0gi6vmIs5dth8uF+K6nxIyKJXbcA4ASg7F1OJrHKFZdTc5v1cPeq6PcbqGgc+8SrPYQmzvQqLoMBuxyos2hUkYOmw3aeWJj9nFa8Wu5WaN89mUeOqSkU4S5cgUzWUOmKey56B/j/s1sVys9rMhZapVs0wL4L9GBBM48N5jAQZnnpo85A8KsZq5ME22bTLqnxsDXqDYZvS7PSI6Dxi7eleOFE/NYYDkrgDLHTQri8ucDMVeVWHgoMY2bPXdn7KKy5jW5jKsf8EPARXg77A4gRYmgKrcwIKqJEUPqyxJBe0CPoGTqgXPRsUiQ== tomk@hp2\n      projectId: ${projectId}\n  testDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: test\n      plan: c3.medium.x86\n      facilities:\n        - ny5\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectSshKeyIds:\n        - ${testProjectSshKey.id}\n      projectId: ${projectId}\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of parent project (same as project_id).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "projectId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of parent project.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectSshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/reservedIpBlock:ReservedIpBlock": {
            "description": "Provides a resource to create and manage blocks of reserved IP addresses in a project.\n\nWhen a user provisions first device in a facility, Equinix Metal API automatically allocates IPv6/56 and private IPv4/25 blocks.\nThe new device then gets IPv6 and private IPv4 addresses from those block. It also gets a public IPv4/31 address.\nEvery new device in the project and facility will automatically get IPv6 and private IPv4 addresses from these pre-allocated blocks.\nThe IPv6 and private IPv4 blocks can't be created, only imported. With this resource, it's possible to create either public IPv4 blocks or global IPv4 blocks.\n\nPublic blocks are allocated in a facility. Addresses from public blocks can only be assigned to devices in the facility. Public blocks can have mask from /24 (256 addresses) to /32 (1 address). If you create public block with this resource, you must fill the facility argument.\n\nAddresses from global blocks can be assigned in any facility. Global blocks can have mask from /30 (4 addresses), to /32 (1 address). If you create global block with this resource, you must specify type = \"global_ipv4\" and you must omit the facility argument.\n\nOnce IP block is allocated or imported, an address from it can be assigned to device with the `equinix.metal.IpAttachment` resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nAllocate reserved IP blocks:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\nconst twoElasticAddresses = new equinix.metal.ReservedIpBlock(\"twoElasticAddresses\", {\n    projectId: local.project_id,\n    facility: \"sv15\",\n    quantity: 2,\n});\n// Allocate 1 floating IP in Sillicon Valley (sv) metro\nconst testReservedIpBlock = new equinix.metal.ReservedIpBlock(\"testReservedIpBlock\", {\n    projectId: local.project_id,\n    type: \"public_ipv4\",\n    metro: \"sv\",\n    quantity: 1,\n});\n// Allocate 1 global floating IP, which can be assigned to device in any facility\nconst testMetal_reservedIpBlockReservedIpBlock = new equinix.metal.ReservedIpBlock(\"testMetal/reservedIpBlockReservedIpBlock\", {\n    projectId: local.project_id,\n    type: \"global_ipv4\",\n    quantity: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\ntwo_elastic_addresses = equinix.metal.ReservedIpBlock(\"twoElasticAddresses\",\n    project_id=local[\"project_id\"],\n    facility=\"sv15\",\n    quantity=2)\n# Allocate 1 floating IP in Sillicon Valley (sv) metro\ntest_reserved_ip_block = equinix.metal.ReservedIpBlock(\"testReservedIpBlock\",\n    project_id=local[\"project_id\"],\n    type=\"public_ipv4\",\n    metro=\"sv\",\n    quantity=1)\n# Allocate 1 global floating IP, which can be assigned to device in any facility\ntest_metal_reserved_ip_block_reserved_ip_block = equinix.metal.ReservedIpBlock(\"testMetal/reservedIpBlockReservedIpBlock\",\n    project_id=local[\"project_id\"],\n    type=\"global_ipv4\",\n    quantity=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\n    var twoElasticAddresses = new Equinix.Metal.ReservedIpBlock(\"twoElasticAddresses\", new()\n    {\n        ProjectId = local.Project_id,\n        Facility = \"sv15\",\n        Quantity = 2,\n    });\n\n    // Allocate 1 floating IP in Sillicon Valley (sv) metro\n    var testReservedIpBlock = new Equinix.Metal.ReservedIpBlock(\"testReservedIpBlock\", new()\n    {\n        ProjectId = local.Project_id,\n        Type = \"public_ipv4\",\n        Metro = \"sv\",\n        Quantity = 1,\n    });\n\n    // Allocate 1 global floating IP, which can be assigned to device in any facility\n    var testMetal_reservedIpBlockReservedIpBlock = new Equinix.Metal.ReservedIpBlock(\"testMetal/reservedIpBlockReservedIpBlock\", new()\n    {\n        ProjectId = local.Project_id,\n        Type = \"global_ipv4\",\n        Quantity = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewReservedIpBlock(ctx, \"twoElasticAddresses\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacility:  pulumi.String(\"sv15\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewReservedIpBlock(ctx, \"testReservedIpBlock\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tType:      pulumi.String(\"public_ipv4\"),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tQuantity:  pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewReservedIpBlock(ctx, \"testMetal/reservedIpBlockReservedIpBlock\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tType:      pulumi.String(\"global_ipv4\"),\n\t\t\tQuantity:  pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.ReservedIpBlock;\nimport com.pulumi.equinix.metal.ReservedIpBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var twoElasticAddresses = new ReservedIpBlock(\"twoElasticAddresses\", ReservedIpBlockArgs.builder()        \n            .projectId(local.project_id())\n            .facility(\"sv15\")\n            .quantity(2)\n            .build());\n\n        var testReservedIpBlock = new ReservedIpBlock(\"testReservedIpBlock\", ReservedIpBlockArgs.builder()        \n            .projectId(local.project_id())\n            .type(\"public_ipv4\")\n            .metro(\"sv\")\n            .quantity(1)\n            .build());\n\n        var testMetal_reservedIpBlockReservedIpBlock = new ReservedIpBlock(\"testMetal/reservedIpBlockReservedIpBlock\", ReservedIpBlockArgs.builder()        \n            .projectId(local.project_id())\n            .type(\"global_ipv4\")\n            .quantity(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility for myproject\n  twoElasticAddresses: # Allocate 1 floating IP in Sillicon Valley (sv) metro\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${local.project_id}\n      facility: sv15\n      quantity: 2\n  testReservedIpBlock: # Allocate 1 global floating IP, which can be assigned to device in any facility\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${local.project_id}\n      type: public_ipv4\n      metro: sv\n      quantity: 1\n  testMetal/reservedIpBlockReservedIpBlock:\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${local.project_id}\n      type: global_ipv4\n      quantity: 1\n```\n\nAllocate a block and run a device with public IPv4 from the block\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\nconst example = new equinix.metal.ReservedIpBlock(\"example\", {\n    projectId: local.project_id,\n    facility: \"sv15\",\n    quantity: 2,\n});\n// Run a device with both public IPv4 from the block assigned\nconst nodes = new equinix.metal.Device(\"nodes\", {\n    projectId: local.project_id,\n    facilities: [\"sv15\"],\n    plan: \"c3.small.x86\",\n    operatingSystem: \"ubuntu_20_04\",\n    hostname: \"test\",\n    billingCycle: \"hourly\",\n    ipAddresses: [\n        {\n            type: \"public_ipv4\",\n            cidr: 31,\n            reservationIds: [example.id],\n        },\n        {\n            type: \"private_ipv4\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\nexample = equinix.metal.ReservedIpBlock(\"example\",\n    project_id=local[\"project_id\"],\n    facility=\"sv15\",\n    quantity=2)\n# Run a device with both public IPv4 from the block assigned\nnodes = equinix.metal.Device(\"nodes\",\n    project_id=local[\"project_id\"],\n    facilities=[\"sv15\"],\n    plan=\"c3.small.x86\",\n    operating_system=\"ubuntu_20_04\",\n    hostname=\"test\",\n    billing_cycle=\"hourly\",\n    ip_addresses=[\n        equinix.metal.DeviceIpAddressArgs(\n            type=\"public_ipv4\",\n            cidr=31,\n            reservation_ids=[example.id],\n        ),\n        equinix.metal.DeviceIpAddressArgs(\n            type=\"private_ipv4\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\n    var example = new Equinix.Metal.ReservedIpBlock(\"example\", new()\n    {\n        ProjectId = local.Project_id,\n        Facility = \"sv15\",\n        Quantity = 2,\n    });\n\n    // Run a device with both public IPv4 from the block assigned\n    var nodes = new Equinix.Metal.Device(\"nodes\", new()\n    {\n        ProjectId = local.Project_id,\n        Facilities = new[]\n        {\n            \"sv15\",\n        },\n        Plan = \"c3.small.x86\",\n        OperatingSystem = \"ubuntu_20_04\",\n        Hostname = \"test\",\n        BillingCycle = \"hourly\",\n        IpAddresses = new[]\n        {\n            new Equinix.Metal.Inputs.DeviceIpAddressArgs\n            {\n                Type = \"public_ipv4\",\n                Cidr = 31,\n                ReservationIds = new[]\n                {\n                    example.Id,\n                },\n            },\n            new Equinix.Metal.Inputs.DeviceIpAddressArgs\n            {\n                Type = \"private_ipv4\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.NewReservedIpBlock(ctx, \"example\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacility:  pulumi.String(\"sv15\"),\n\t\t\tQuantity:  pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewDevice(ctx, \"nodes\", \u0026metal.DeviceArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sv15\"),\n\t\t\t},\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tHostname:        pulumi.String(\"test\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tIpAddresses: metal.DeviceIpAddressArray{\n\t\t\t\t\u0026metal.DeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"public_ipv4\"),\n\t\t\t\t\tCidr: pulumi.Int(31),\n\t\t\t\t\tReservationIds: pulumi.StringArray{\n\t\t\t\t\t\texample.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026metal.DeviceIpAddressArgs{\n\t\t\t\t\tType: pulumi.String(\"private_ipv4\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.ReservedIpBlock;\nimport com.pulumi.equinix.metal.ReservedIpBlockArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.inputs.DeviceIpAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ReservedIpBlock(\"example\", ReservedIpBlockArgs.builder()        \n            .projectId(local.project_id())\n            .facility(\"sv15\")\n            .quantity(2)\n            .build());\n\n        var nodes = new Device(\"nodes\", DeviceArgs.builder()        \n            .projectId(local.project_id())\n            .facilities(\"sv15\")\n            .plan(\"c3.small.x86\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .hostname(\"test\")\n            .billingCycle(\"hourly\")\n            .ipAddresses(            \n                DeviceIpAddressArgs.builder()\n                    .type(\"public_ipv4\")\n                    .cidr(31)\n                    .reservationIds(example.id())\n                    .build(),\n                DeviceIpAddressArgs.builder()\n                    .type(\"private_ipv4\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Allocate /31 block of max 2 public IPv4 addresses in Silicon Valley (sv15) facility\n  example: # Run a device with both public IPv4 from the block assigned\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      projectId: ${local.project_id}\n      facility: sv15\n      quantity: 2\n  nodes:\n    type: equinix:metal:Device\n    properties:\n      projectId: ${local.project_id}\n      facilities:\n        - sv15\n      plan: c3.small.x86\n      operatingSystem: ubuntu_20_04\n      hostname: test\n      billingCycle: hourly\n      ipAddresses:\n        - type: public_ipv4\n          cidr: 31\n          reservationIds:\n            - ${example.id}\n        - type: private_ipv4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing IP reservation ID\n\n```sh\n $ pulumi import equinix:metal/reservedIpBlock:ReservedIpBlock equinix_metal_reserved_ip_block {existing_ip_reservation_id}\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressFamily": {
                    "type": "integer",
                    "description": "Address family as integer. One of `4` or `6`.\n"
                },
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n"
                },
                "cidrNotation": {
                    "type": "string",
                    "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n"
                },
                "gateway": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nfacility).\n"
                },
                "manageable": {
                    "type": "boolean"
                },
                "management": {
                    "type": "boolean"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Boolean flag whether addresses from a block are public.\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n"
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "required": [
                "address",
                "addressFamily",
                "cidr",
                "cidrNotation",
                "gateway",
                "global",
                "manageable",
                "management",
                "netmask",
                "network",
                "projectId",
                "public",
                "quantity"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "integer",
                    "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                    "willReplaceOnChanges": true
                },
                "customData": {
                    "type": "string",
                    "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Arbitrary description.\n"
                },
                "facility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/facility:Facility"
                        }
                    ],
                    "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "type": "string",
                    "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The metal project ID where to allocate the address block.\n",
                    "willReplaceOnChanges": true
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String list of tags.\n"
                },
                "type": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/ipBlockType:IpBlockType"
                        }
                    ],
                    "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                    "willReplaceOnChanges": true
                },
                "vrfId": {
                    "type": "string",
                    "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                    "willReplaceOnChanges": true
                },
                "waitForState": {
                    "type": "string",
                    "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReservedIpBlock resources.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer",
                        "description": "Address family as integer. One of `4` or `6`.\n"
                    },
                    "cidr": {
                        "type": "integer",
                        "description": "Only valid as an argument and required when `type` is `vrf`. The size of the network to reserve from an existing VRF ip_range. `cidr` can only be specified with `vrf_id`. Range is 22-31. Virtual Circuits require 30-31. Other VRF resources must use a CIDR in the 22-29 range.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "Address and mask in CIDR notation, e.g. `147.229.15.30/31`.\n"
                    },
                    "customData": {
                        "type": "string",
                        "description": "Custom Data is an arbitrary object (submitted in Terraform as serialized JSON) to assign to the IP Reservation. This may\nbe helpful for self-managed IPAM. The object must be valid JSON.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Arbitrary description.\n"
                    },
                    "facility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ],
                        "description": "Facility where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `metro`.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are global (i.e. can be assigned in any\nfacility).\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where to allocate the public IP address block, makes sense only\nif type is `public_ipv4` and must be empty if type is `global_ipv4`. Conflicts with `facility`.\n",
                        "willReplaceOnChanges": true
                    },
                    "netmask": {
                        "type": "string",
                        "description": "Mask in decimal notation, e.g. `255.255.255.0`.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "Only valid as an argument and required when `type` is `vrf`. An unreserved network address from an existing `ip_range` in the specified VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The metal project ID where to allocate the address block.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Boolean flag whether addresses from a block are public.\n"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The number of allocated `/32` addresses, a power of 2. Required when `type` is not `vrf`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/ipBlockType:IpBlockType"
                            }
                        ],
                        "description": "One of `global_ipv4`, `public_ipv4`, or `vrf`. Defaults to `public_ipv4` for backward\ncompatibility.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "Only valid and required when `type` is `vrf`. VRF ID for type=vrf reservations.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForState": {
                        "type": "string",
                        "description": "Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The `created` state is default and recommended if the addresses are needed within the configuration. An error will be returned if a timeout or the `denied` state is encountered.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/spotMarketRequest:SpotMarketRequest": {
            "description": "Provides an Equinix Metal Spot Market Request resource to allow you to\nmanage spot market requests on your account. For more detail on Spot Market,\nsee [this article in Equinix Metal documentation](https://metal.equinix.com/developers/docs/deploy/spot-market/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create a spot market request\nconst req = new equinix.metal.SpotMarketRequest(\"req\", {\n    projectId: local.project_id,\n    maxBidPrice: 0.03,\n    facilities: [\"ny5\"],\n    devicesMin: 1,\n    devicesMax: 1,\n    instanceParameters: {\n        hostname: \"testspot\",\n        billingCycle: \"hourly\",\n        operatingSystem: \"ubuntu_20_04\",\n        plan: \"c3.small.x86\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a spot market request\nreq = equinix.metal.SpotMarketRequest(\"req\",\n    project_id=local[\"project_id\"],\n    max_bid_price=0.03,\n    facilities=[\"ny5\"],\n    devices_min=1,\n    devices_max=1,\n    instance_parameters=equinix.metal.SpotMarketRequestInstanceParametersArgs(\n        hostname=\"testspot\",\n        billing_cycle=\"hourly\",\n        operating_system=\"ubuntu_20_04\",\n        plan=\"c3.small.x86\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a spot market request\n    var req = new Equinix.Metal.SpotMarketRequest(\"req\", new()\n    {\n        ProjectId = local.Project_id,\n        MaxBidPrice = 0.03,\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        DevicesMin = 1,\n        DevicesMax = 1,\n        InstanceParameters = new Equinix.Metal.Inputs.SpotMarketRequestInstanceParametersArgs\n        {\n            Hostname = \"testspot\",\n            BillingCycle = \"hourly\",\n            OperatingSystem = \"ubuntu_20_04\",\n            Plan = \"c3.small.x86\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewSpotMarketRequest(ctx, \"req\", \u0026metal.SpotMarketRequestArgs{\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t\tMaxBidPrice: pulumi.Float64(0.03),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tDevicesMin: pulumi.Int(1),\n\t\t\tDevicesMax: pulumi.Int(1),\n\t\t\tInstanceParameters: \u0026metal.SpotMarketRequestInstanceParametersArgs{\n\t\t\t\tHostname:        pulumi.String(\"testspot\"),\n\t\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.SpotMarketRequest;\nimport com.pulumi.equinix.metal.SpotMarketRequestArgs;\nimport com.pulumi.equinix.metal.inputs.SpotMarketRequestInstanceParametersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var req = new SpotMarketRequest(\"req\", SpotMarketRequestArgs.builder()        \n            .projectId(local.project_id())\n            .maxBidPrice(0.03)\n            .facilities(\"ny5\")\n            .devicesMin(1)\n            .devicesMax(1)\n            .instanceParameters(SpotMarketRequestInstanceParametersArgs.builder()\n                .hostname(\"testspot\")\n                .billingCycle(\"hourly\")\n                .operatingSystem(\"ubuntu_20_04\")\n                .plan(\"c3.small.x86\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a spot market request\n  req:\n    type: equinix:metal:SpotMarketRequest\n    properties:\n      projectId: ${local.project_id}\n      maxBidPrice: 0.03\n      facilities:\n        - ny5\n      devicesMin: 1\n      devicesMax: 1\n      instanceParameters:\n        hostname: testspot\n        billingCycle: hourly\n        operatingSystem: ubuntu_20_04\n        plan: c3.small.x86\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing spot market request ID\n\n```sh\n $ pulumi import equinix:metal/spotMarketRequest:SpotMarketRequest equinix_metal_spot_market_request {existing_spot_market_request_id}\n```\n\n ",
            "properties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n"
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n"
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created.\n"
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n"
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n"
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n"
                }
            },
            "required": [
                "devicesMax",
                "devicesMin",
                "facilities",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "inputProperties": {
                "devicesMax": {
                    "type": "integer",
                    "description": "Maximum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "devicesMin": {
                    "type": "integer",
                    "description": "Miniumum number devices to be created.\n",
                    "willReplaceOnChanges": true
                },
                "facilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Facility IDs where devices should be created.\n",
                    "willReplaceOnChanges": true
                },
                "instanceParameters": {
                    "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                    "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n",
                    "willReplaceOnChanges": true
                },
                "maxBidPrice": {
                    "type": "number",
                    "description": "Maximum price user is willing to pay per hour per device.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "description": "Metro where devices should be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDevices": {
                    "type": "boolean",
                    "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "devicesMax",
                "devicesMin",
                "instanceParameters",
                "maxBidPrice",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpotMarketRequest resources.\n",
                "properties": {
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Facility IDs where devices should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceParameters": {
                        "$ref": "#/types/equinix:metal/SpotMarketRequestInstanceParameters:SpotMarketRequestInstanceParameters",
                        "description": "Key/Value pairs of parameters for devices provisioned from\nthis request. Valid keys are: `billing_cycle`, `plan`, `operating_system`, `hostname`,\n`termintation_time`, `always_pxe`, `description`, `features`, `locked`, `project_ssh_keys`,\n`user_ssh_keys`, `userdata`, `customdata`, `ipxe_script_url`, `tags`. You can find each parameter\ndescription in equinix.metal.Device docs.\n",
                        "willReplaceOnChanges": true
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDevices": {
                        "type": "boolean",
                        "description": "On resource creation wait until all desired devices are active.\nOn resource destruction wait until devices are removed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/sshKey:SshKey": {
            "description": "Provides a resource to manage User SSH keys on your Equinix Metal user account. If you create a new device in a project, all the keys of the project's collaborators will be injected to the device.\n\nThe link between User SSH key and device is implicit. If you want to make sure that a key will be copied to a device, you must ensure that the device resource `depends_on` the key resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as fs from \"fs\";\n\n// Create a new SSH key\nconst key1 = new equinix.metal.SshKey(\"key1\", {publicKey: fs.readFileSync(\"/home/terraform/.ssh/id_rsa.pub\")});\n// Create new device with \"key1\" included. The device resource \"depends_on\" the\n// key, in order to make sure the key is created before the device.\nconst test = new equinix.metal.Device(\"test\", {\n    hostname: \"test-device\",\n    plan: \"c3.small.x86\",\n    metro: \"sv\",\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n}, {\n    dependsOn: [\"equinix_metal_ssh_key.key1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new SSH key\nkey1 = equinix.metal.SshKey(\"key1\", public_key=(lambda path: open(path).read())(\"/home/terraform/.ssh/id_rsa.pub\"))\n# Create new device with \"key1\" included. The device resource \"depends_on\" the\n# key, in order to make sure the key is created before the device.\ntest = equinix.metal.Device(\"test\",\n    hostname=\"test-device\",\n    plan=\"c3.small.x86\",\n    metro=\"sv\",\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"],\n    opts=pulumi.ResourceOptions(depends_on=[\"equinix_metal_ssh_key.key1\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new SSH key\n    var key1 = new Equinix.Metal.SshKey(\"key1\", new()\n    {\n        PublicKey = File.ReadAllText(\"/home/terraform/.ssh/id_rsa.pub\"),\n    });\n\n    // Create new device with \"key1\" included. The device resource \"depends_on\" the\n    // key, in order to make sure the key is created before the device.\n    var test = new Equinix.Metal.Device(\"test\", new()\n    {\n        Hostname = \"test-device\",\n        Plan = \"c3.small.x86\",\n        Metro = \"sv\",\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            \"equinix_metal_ssh_key.key1\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewSshKey(ctx, \"key1\", \u0026metal.SshKeyArgs{\n\t\t\tPublicKey: readFileOrPanic(\"/home/terraform/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewDevice(ctx, \"test\", \u0026metal.DeviceArgs{\n\t\t\tHostname:        pulumi.String(\"test-device\"),\n\t\t\tPlan:            pulumi.String(\"c3.small.x86\"),\n\t\t\tMetro:           pulumi.String(\"sv\"),\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpulumi.Resource(\"equinix_metal_ssh_key.key1\"),\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.SshKey;\nimport com.pulumi.equinix.metal.SshKeyArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var key1 = new SshKey(\"key1\", SshKeyArgs.builder()        \n            .publicKey(Files.readString(Paths.get(\"/home/terraform/.ssh/id_rsa.pub\")))\n            .build());\n\n        var test = new Device(\"test\", DeviceArgs.builder()        \n            .hostname(\"test-device\")\n            .plan(\"c3.small.x86\")\n            .metro(\"sv\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(\"equinix_metal_ssh_key.key1\")\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new SSH key\n  key1:\n    type: equinix:metal:SshKey\n    properties:\n      publicKey:\n        fn::readFile: /home/terraform/.ssh/id_rsa.pub\n  # Create new device with \"key1\" included. The device resource \"depends_on\" the\n  # key, in order to make sure the key is created before the device.\n  test:\n    type: equinix:metal:Device\n    properties:\n      hostname: test-device\n      plan: c3.small.x86\n      metro: sv\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${local.project_id}\n    options:\n      dependson:\n        - equinix_metal_ssh_key.key1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing SSH Key ID\n\n```sh\n $ pulumi import equinix:metal/sshKey:SshKey equinix_metal_ssh_key {existing_sshkey_id}\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp for when the SSH key was created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The timestamp for the last time the SSH key was updated.\n"
                }
            },
            "required": [
                "created",
                "fingerprint",
                "name",
                "ownerId",
                "publicKey",
                "updated"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key for identification\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key for identification\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The UUID of the Equinix Metal API User who owns this key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it\ncan be read using the file interpolation function\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/userApiKey:UserApiKey": {
            "description": "Use this resource to create Metal User API Key resources in Equinix Metal. Each API key contains a\ntoken which can be used for authentication in Equinix Metal HTTP API (in HTTP request header\n`X-Auth-Token`).\n\nRead-only keys only allow to list and view existing resources, read-write keys can also be used to\ncreate resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst test = new equinix.metal.UserApiKey(\"test\", {\n    description: \"Read-only user key\",\n    readOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.UserApiKey(\"test\",\n    description=\"Read-only user key\",\n    read_only=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Equinix.Metal.UserApiKey(\"test\", new()\n    {\n        Description = \"Read-only user key\",\n        ReadOnly = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewUserApiKey(ctx, \"test\", \u0026metal.UserApiKeyArgs{\n\t\t\tDescription: pulumi.String(\"Read-only user key\"),\n\t\t\tReadOnly:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.UserApiKey;\nimport com.pulumi.equinix.metal.UserApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new UserApiKey(\"test\", UserApiKeyArgs.builder()        \n            .description(\"Read-only user key\")\n            .readOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: equinix:metal:UserApiKey\n    properties:\n      description: Read-only user key\n      readOnly: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n"
                },
                "token": {
                    "type": "string",
                    "description": "API token which can be used in Equinix Metal API clients.\n",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "UUID of the owner of the API key.\n"
                }
            },
            "required": [
                "description",
                "readOnly",
                "token",
                "userId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Flag indicating whether the API key shoud be read-only\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "readOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserApiKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string for the User API Key resource.\n* `read-only` - (Required) Flag indicating whether the API key shoud be read-only.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag indicating whether the API key shoud be read-only\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "API token which can be used in Equinix Metal API clients.\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "UUID of the owner of the API key.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/virtualCircuit:VirtualCircuit": {
            "description": "Use this resource to associate VLAN with a Dedicated Port from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/#associating-a-vlan-with-a-dedicated-port).\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nPick an existing Project and dedicated Connection, create a VLAN and use `equinix.metal.VirtualCircuit`\nto associate it with a Primary Port of the Connection.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\nconst connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\nconst testConnection = equinix.metal.getConnection({\n    connectionId: connId,\n});\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    projectId: projectId,\n    metro: testConnection.then(testConnection =\u003e testConnection.metro),\n});\nconst testVirtualCircuit = new equinix.metal.VirtualCircuit(\"testVirtualCircuit\", {\n    connectionId: connId,\n    projectId: projectId,\n    portId: testConnection.then(testConnection =\u003e testConnection.ports?.[0]?.id),\n    vlanId: testVlan.id,\n    nniVlan: 1056,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\"\nconn_id = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\"\ntest_connection = equinix.metal.get_connection(connection_id=conn_id)\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    project_id=project_id,\n    metro=test_connection.metro)\ntest_virtual_circuit = equinix.metal.VirtualCircuit(\"testVirtualCircuit\",\n    connection_id=conn_id,\n    project_id=project_id,\n    port_id=test_connection.ports[0].id,\n    vlan_id=test_vlan.id,\n    nni_vlan=1056)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\n\n    var connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\n\n    var testConnection = Equinix.Metal.GetConnection.Invoke(new()\n    {\n        ConnectionId = connId,\n    });\n\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        ProjectId = projectId,\n        Metro = testConnection.Apply(getConnectionResult =\u003e getConnectionResult.Metro),\n    });\n\n    var testVirtualCircuit = new Equinix.Metal.VirtualCircuit(\"testVirtualCircuit\", new()\n    {\n        ConnectionId = connId,\n        ProjectId = projectId,\n        PortId = testConnection.Apply(getConnectionResult =\u003e getConnectionResult.Ports[0]?.Id),\n        VlanId = testVlan.Id,\n        NniVlan = 1056,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"52000fb2-ee46-4673-93a8-de2c2bdba33c\"\n\t\tconnId := \"73f12f29-3e19-43a0-8e90-ae81580db1e0\"\n\t\ttestConnection, err := metal.LookupConnection(ctx, \u0026metal.LookupConnectionArgs{\n\t\t\tConnectionId: connId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestVlan, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tMetro:     *pulumi.String(testConnection.Metro),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewVirtualCircuit(ctx, \"testVirtualCircuit\", \u0026metal.VirtualCircuitArgs{\n\t\t\tConnectionId: pulumi.String(connId),\n\t\t\tProjectId:    pulumi.String(projectId),\n\t\t\tPortId:       *pulumi.String(testConnection.Ports[0].Id),\n\t\t\tVlanId:       testVlan.ID(),\n\t\t\tNniVlan:      pulumi.Int(1056),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetConnectionArgs;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.VirtualCircuit;\nimport com.pulumi.equinix.metal.VirtualCircuitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"52000fb2-ee46-4673-93a8-de2c2bdba33c\";\n\n        final var connId = \"73f12f29-3e19-43a0-8e90-ae81580db1e0\";\n\n        final var testConnection = MetalFunctions.getConnection(GetConnectionArgs.builder()\n            .connectionId(connId)\n            .build());\n\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .projectId(projectId)\n            .metro(testConnection.applyValue(getConnectionResult -\u003e getConnectionResult.metro()))\n            .build());\n\n        var testVirtualCircuit = new VirtualCircuit(\"testVirtualCircuit\", VirtualCircuitArgs.builder()        \n            .connectionId(connId)\n            .projectId(projectId)\n            .portId(testConnection.applyValue(getConnectionResult -\u003e getConnectionResult.ports()[0].id()))\n            .vlanId(testVlan.id())\n            .nniVlan(1056)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      projectId: ${projectId}\n      metro: ${testConnection.metro}\n  testVirtualCircuit:\n    type: equinix:metal:VirtualCircuit\n    properties:\n      connectionId: ${connId}\n      projectId: ${projectId}\n      portId: ${testConnection.ports[0].id}\n      vlanId: ${testVlan.id}\n      nniVlan: 1056\nvariables:\n  projectId: 52000fb2-ee46-4673-93a8-de2c2bdba33c\n  connId: 73f12f29-3e19-43a0-8e90-ae81580db1e0\n  testConnection:\n    fn::invoke:\n      Function: equinix:metal:getConnection\n      Arguments:\n        connectionId: ${connId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing Virtual Circuit ID\n\n```sh\n $ pulumi import equinix:metal/virtualCircuit:VirtualCircuit equinix_metal_virtual_circuit {existing_id}\n```\n\n ",
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n"
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n",
                    "secret": true
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n"
                },
                "nniVnid": {
                    "type": "integer",
                    "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the virtal circuit.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n"
                },
                "vnid": {
                    "type": "integer",
                    "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n"
                }
            },
            "required": [
                "connectionId",
                "name",
                "nniVnid",
                "portId",
                "projectId",
                "speed",
                "status",
                "vnid"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "string",
                    "description": "UUID of Connection where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "customerIp": {
                    "type": "string",
                    "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Virtual Circuit resource.\n"
                },
                "md5": {
                    "type": "string",
                    "description": "The password that can be set for the VRF BGP peer\n",
                    "secret": true
                },
                "metalIp": {
                    "type": "string",
                    "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Circuit resource.\n"
                },
                "nniVlan": {
                    "type": "integer",
                    "description": "Equinix Metal network-to-network VLAN ID.\n",
                    "willReplaceOnChanges": true
                },
                "peerAsn": {
                    "type": "integer",
                    "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                    "willReplaceOnChanges": true
                },
                "portId": {
                    "type": "string",
                    "description": "UUID of the Connection Port where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "UUID of the Project where the VC is scoped to.\n",
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "string",
                    "description": "Speed of the Virtual Circuit resource.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the Virtual Circuit resource.\n"
                },
                "vlanId": {
                    "type": "string",
                    "description": "UUID of the VLAN to associate.\n"
                },
                "vrfId": {
                    "type": "string",
                    "description": "UUID of the VRF to associate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionId",
                "portId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualCircuit resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n",
                        "secret": true
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Virtual Circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer",
                        "description": "Equinix Metal network-to-network VLAN ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "nniVnid": {
                        "type": "integer",
                        "description": "NNI VLAN parameters, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n",
                        "willReplaceOnChanges": true
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the Project where the VC is scoped to.\n",
                        "willReplaceOnChanges": true
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n"
                    },
                    "vnid": {
                        "type": "integer",
                        "description": "VNID VLAN parameter, see the [documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF to associate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/vlan:Vlan": {
            "description": "Provides a resource to allow users to manage Virtual Networks in their projects.\n\nTo learn more about Layer 2 networking in Equinix Metal, refer to\n\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2/\u003e\n* \u003chttps://metal.equinix.com/developers/docs/networking/layer2-configs/\u003e\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create a new VLAN in facility \"sv15\"\nconst vlan1Vlan = new equinix.metal.Vlan(\"vlan1Vlan\", {\n    description: \"VLAN in New Jersey\",\n    facility: \"sv15\",\n    projectId: local.project_id,\n});\n// Create a new VLAN in metro \"esv\"\nconst vlan1Metal_vlanVlan = new equinix.metal.Vlan(\"vlan1Metal/vlanVlan\", {\n    description: \"VLAN in New Jersey\",\n    metro: \"sv\",\n    projectId: local.project_id,\n    vxlan: 1040,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create a new VLAN in facility \"sv15\"\nvlan1_vlan = equinix.metal.Vlan(\"vlan1Vlan\",\n    description=\"VLAN in New Jersey\",\n    facility=\"sv15\",\n    project_id=local[\"project_id\"])\n# Create a new VLAN in metro \"esv\"\nvlan1_metal_vlan_vlan = equinix.metal.Vlan(\"vlan1Metal/vlanVlan\",\n    description=\"VLAN in New Jersey\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"],\n    vxlan=1040)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new VLAN in facility \"sv15\"\n    var vlan1Vlan = new Equinix.Metal.Vlan(\"vlan1Vlan\", new()\n    {\n        Description = \"VLAN in New Jersey\",\n        Facility = \"sv15\",\n        ProjectId = local.Project_id,\n    });\n\n    // Create a new VLAN in metro \"esv\"\n    var vlan1Metal_vlanVlan = new Equinix.Metal.Vlan(\"vlan1Metal/vlanVlan\", new()\n    {\n        Description = \"VLAN in New Jersey\",\n        Metro = \"sv\",\n        ProjectId = local.Project_id,\n        Vxlan = 1040,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewVlan(ctx, \"vlan1Vlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tFacility:    pulumi.String(\"sv15\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewVlan(ctx, \"vlan1Metal/vlanVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"VLAN in New Jersey\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t\tVxlan:       pulumi.Int(1040),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vlan1Vlan = new Vlan(\"vlan1Vlan\", VlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .facility(\"sv15\")\n            .projectId(local.project_id())\n            .build());\n\n        var vlan1Metal_vlanVlan = new Vlan(\"vlan1Metal/vlanVlan\", VlanArgs.builder()        \n            .description(\"VLAN in New Jersey\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .vxlan(1040)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new VLAN in facility \"sv15\"\n  vlan1Vlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in New Jersey\n      facility: sv15\n      projectId: ${local.project_id}\n  # Create a new VLAN in metro \"esv\"\n  vlan1Metal/vlanVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: VLAN in New Jersey\n      metro: sv\n      projectId: ${local.project_id}\n      vxlan: 1040\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing VLAN ID (UUID)\n\n```sh\n $ pulumi import equinix:metal/vlan:Vlan equinix_metal_vlan {existing_vlan_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n"
                },
                "facility": {
                    "type": "string",
                    "description": "Facility where to create the VLAN.\n"
                },
                "metro": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n"
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n"
                }
            },
            "required": [
                "projectId",
                "vxlan"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description string.\n",
                    "willReplaceOnChanges": true
                },
                "facility": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:metal/facility:Facility"
                        }
                    ],
                    "description": "Facility where to create the VLAN.\n",
                    "willReplaceOnChanges": true
                },
                "metro": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of parent project.\n",
                    "willReplaceOnChanges": true
                },
                "vxlan": {
                    "type": "integer",
                    "description": "VLAN ID, must be unique in metro.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description string.\n",
                        "willReplaceOnChanges": true
                    },
                    "facility": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:metal/facility:Facility"
                            }
                        ],
                        "description": "Facility where to create the VLAN.\n",
                        "willReplaceOnChanges": true
                    },
                    "metro": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of parent project.\n",
                        "willReplaceOnChanges": true
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "VLAN ID, must be unique in metro.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "equinix:metal/vrf:Vrf": {
            "description": "Use this resource to manage a VRF.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a VRF in your desired metro and project with any IP ranges that you want the VRF to route and forward.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst exampleProject = new equinix.metal.Project(\"exampleProject\", {});\nconst exampleVrf = new equinix.metal.Vrf(\"exampleVrf\", {\n    description: \"VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\",\n    metro: \"da\",\n    localAsn: 65000,\n    ipRanges: [\n        \"192.168.100.0/25\",\n        \"192.168.200.0/25\",\n    ],\n    projectId: exampleProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_project = equinix.metal.Project(\"exampleProject\")\nexample_vrf = equinix.metal.Vrf(\"exampleVrf\",\n    description=\"VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\",\n    metro=\"da\",\n    local_asn=65000,\n    ip_ranges=[\n        \"192.168.100.0/25\",\n        \"192.168.200.0/25\",\n    ],\n    project_id=example_project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Equinix.Metal.Project(\"exampleProject\");\n\n    var exampleVrf = new Equinix.Metal.Vrf(\"exampleVrf\", new()\n    {\n        Description = \"VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\",\n        Metro = \"da\",\n        LocalAsn = 65000,\n        IpRanges = new[]\n        {\n            \"192.168.100.0/25\",\n            \"192.168.200.0/25\",\n        },\n        ProjectId = exampleProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := metal.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewVrf(ctx, \"exampleVrf\", \u0026metal.VrfArgs{\n\t\t\tDescription: pulumi.String(\"VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\"),\n\t\t\tMetro:       pulumi.String(\"da\"),\n\t\t\tLocalAsn:    pulumi.Int(65000),\n\t\t\tIpRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.100.0/25\"),\n\t\t\t\tpulumi.String(\"192.168.200.0/25\"),\n\t\t\t},\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Project;\nimport com.pulumi.equinix.metal.Vrf;\nimport com.pulumi.equinix.metal.VrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleVrf = new Vrf(\"exampleVrf\", VrfArgs.builder()        \n            .description(\"VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\")\n            .metro(\"da\")\n            .localAsn(\"65000\")\n            .ipRanges(            \n                \"192.168.100.0/25\",\n                \"192.168.200.0/25\")\n            .projectId(exampleProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: equinix:metal:Project\n  exampleVrf:\n    type: equinix:metal:Vrf\n    properties:\n      description: VRF with ASN 65000 and a pool of address space that includes 192.168.100.0/25\n      metro: da\n      localAsn: '65000'\n      ipRanges:\n        - 192.168.100.0/25\n        - 192.168.200.0/25\n      projectId: ${exampleProject.id}\n```\n\nCreate IP reservations and assign them to a Metal Gateway resources. The Gateway will be assigned the first address in the block.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst exampleReservedIpBlock = new equinix.metal.ReservedIpBlock(\"exampleReservedIpBlock\", {\n    description: \"Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\",\n    projectId: equinix_metal_project.example.id,\n    metro: equinix_metal_vrf.example.metro,\n    type: \"vrf\",\n    vrfId: equinix_metal_vrf.example.id,\n    cidr: 29,\n    network: \"192.168.100.0\",\n});\nconst exampleVlan = new equinix.metal.Vlan(\"exampleVlan\", {\n    description: \"A VLAN for Layer2 and Hybrid Metal devices\",\n    metro: equinix_metal_vrf.example.metro,\n    projectId: equinix_metal_project.example.id,\n});\nconst exampleGateway = new equinix.metal.Gateway(\"exampleGateway\", {\n    projectId: equinix_metal_project.example.id,\n    vlanId: exampleVlan.id,\n    ipReservationId: exampleReservedIpBlock.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_reserved_ip_block = equinix.metal.ReservedIpBlock(\"exampleReservedIpBlock\",\n    description=\"Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\",\n    project_id=equinix_metal_project[\"example\"][\"id\"],\n    metro=equinix_metal_vrf[\"example\"][\"metro\"],\n    type=\"vrf\",\n    vrf_id=equinix_metal_vrf[\"example\"][\"id\"],\n    cidr=29,\n    network=\"192.168.100.0\")\nexample_vlan = equinix.metal.Vlan(\"exampleVlan\",\n    description=\"A VLAN for Layer2 and Hybrid Metal devices\",\n    metro=equinix_metal_vrf[\"example\"][\"metro\"],\n    project_id=equinix_metal_project[\"example\"][\"id\"])\nexample_gateway = equinix.metal.Gateway(\"exampleGateway\",\n    project_id=equinix_metal_project[\"example\"][\"id\"],\n    vlan_id=example_vlan.id,\n    ip_reservation_id=example_reserved_ip_block.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleReservedIpBlock = new Equinix.Metal.ReservedIpBlock(\"exampleReservedIpBlock\", new()\n    {\n        Description = \"Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\",\n        ProjectId = equinix_metal_project.Example.Id,\n        Metro = equinix_metal_vrf.Example.Metro,\n        Type = \"vrf\",\n        VrfId = equinix_metal_vrf.Example.Id,\n        Cidr = 29,\n        Network = \"192.168.100.0\",\n    });\n\n    var exampleVlan = new Equinix.Metal.Vlan(\"exampleVlan\", new()\n    {\n        Description = \"A VLAN for Layer2 and Hybrid Metal devices\",\n        Metro = equinix_metal_vrf.Example.Metro,\n        ProjectId = equinix_metal_project.Example.Id,\n    });\n\n    var exampleGateway = new Equinix.Metal.Gateway(\"exampleGateway\", new()\n    {\n        ProjectId = equinix_metal_project.Example.Id,\n        VlanId = exampleVlan.Id,\n        IpReservationId = exampleReservedIpBlock.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleReservedIpBlock, err := metal.NewReservedIpBlock(ctx, \"exampleReservedIpBlock\", \u0026metal.ReservedIpBlockArgs{\n\t\t\tDescription: pulumi.String(\"Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\"),\n\t\t\tProjectId:   pulumi.Any(equinix_metal_project.Example.Id),\n\t\t\tMetro:       pulumi.Any(equinix_metal_vrf.Example.Metro),\n\t\t\tType:        pulumi.String(\"vrf\"),\n\t\t\tVrfId:       pulumi.Any(equinix_metal_vrf.Example.Id),\n\t\t\tCidr:        pulumi.Int(29),\n\t\t\tNetwork:     pulumi.String(\"192.168.100.0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVlan, err := metal.NewVlan(ctx, \"exampleVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"A VLAN for Layer2 and Hybrid Metal devices\"),\n\t\t\tMetro:       pulumi.Any(equinix_metal_vrf.Example.Metro),\n\t\t\tProjectId:   pulumi.Any(equinix_metal_project.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewGateway(ctx, \"exampleGateway\", \u0026metal.GatewayArgs{\n\t\t\tProjectId:       pulumi.Any(equinix_metal_project.Example.Id),\n\t\t\tVlanId:          exampleVlan.ID(),\n\t\t\tIpReservationId: exampleReservedIpBlock.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.ReservedIpBlock;\nimport com.pulumi.equinix.metal.ReservedIpBlockArgs;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.Gateway;\nimport com.pulumi.equinix.metal.GatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleReservedIpBlock = new ReservedIpBlock(\"exampleReservedIpBlock\", ReservedIpBlockArgs.builder()        \n            .description(\"Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\")\n            .projectId(equinix_metal_project.example().id())\n            .metro(equinix_metal_vrf.example().metro())\n            .type(\"vrf\")\n            .vrfId(equinix_metal_vrf.example().id())\n            .cidr(29)\n            .network(\"192.168.100.0\")\n            .build());\n\n        var exampleVlan = new Vlan(\"exampleVlan\", VlanArgs.builder()        \n            .description(\"A VLAN for Layer2 and Hybrid Metal devices\")\n            .metro(equinix_metal_vrf.example().metro())\n            .projectId(equinix_metal_project.example().id())\n            .build());\n\n        var exampleGateway = new Gateway(\"exampleGateway\", GatewayArgs.builder()        \n            .projectId(equinix_metal_project.example().id())\n            .vlanId(exampleVlan.id())\n            .ipReservationId(exampleReservedIpBlock.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleReservedIpBlock:\n    type: equinix:metal:ReservedIpBlock\n    properties:\n      description: Reserved IP block (192.168.100.0/29) taken from on of the ranges in the VRF's pool of address space.\n      projectId: ${equinix_metal_project.example.id}\n      metro: ${equinix_metal_vrf.example.metro}\n      type: vrf\n      vrfId: ${equinix_metal_vrf.example.id}\n      cidr: 29\n      network: 192.168.100.0\n  exampleVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: A VLAN for Layer2 and Hybrid Metal devices\n      metro: ${equinix_metal_vrf.example.metro}\n      projectId: ${equinix_metal_project.example.id}\n  exampleGateway:\n    type: equinix:metal:Gateway\n    properties:\n      projectId: ${equinix_metal_project.example.id}\n      vlanId: ${exampleVlan.id}\n      ipReservationId: ${exampleReservedIpBlock.id}\n```\n\nAttach a Virtual Circuit from a Dedicated Metal Connection to the Metal Gateway.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleConnection = equinix.metal.getConnection({\n    connectionId: _var.metal_dedicated_connection_id,\n});\nconst exampleVirtualCircuit = new equinix.metal.VirtualCircuit(\"exampleVirtualCircuit\", {\n    description: \"Virtual Circuit\",\n    connectionId: exampleConnection.then(exampleConnection =\u003e exampleConnection.id),\n    projectId: equinix_metal_project.example.id,\n    portId: exampleConnection.then(exampleConnection =\u003e exampleConnection.ports?.[0]?.id),\n    nniVlan: 1024,\n    vrfId: equinix_metal_vrf.example.id,\n    peerAsn: 65530,\n    subnet: \"192.168.100.16/31\",\n    metalIp: \"192.168.100.16\",\n    customerIp: \"192.168.100.17\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_connection = equinix.metal.get_connection(connection_id=var[\"metal_dedicated_connection_id\"])\nexample_virtual_circuit = equinix.metal.VirtualCircuit(\"exampleVirtualCircuit\",\n    description=\"Virtual Circuit\",\n    connection_id=example_connection.id,\n    project_id=equinix_metal_project[\"example\"][\"id\"],\n    port_id=example_connection.ports[0].id,\n    nni_vlan=1024,\n    vrf_id=equinix_metal_vrf[\"example\"][\"id\"],\n    peer_asn=65530,\n    subnet=\"192.168.100.16/31\",\n    metal_ip=\"192.168.100.16\",\n    customer_ip=\"192.168.100.17\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleConnection = Equinix.Metal.GetConnection.Invoke(new()\n    {\n        ConnectionId = @var.Metal_dedicated_connection_id,\n    });\n\n    var exampleVirtualCircuit = new Equinix.Metal.VirtualCircuit(\"exampleVirtualCircuit\", new()\n    {\n        Description = \"Virtual Circuit\",\n        ConnectionId = exampleConnection.Apply(getConnectionResult =\u003e getConnectionResult.Id),\n        ProjectId = equinix_metal_project.Example.Id,\n        PortId = exampleConnection.Apply(getConnectionResult =\u003e getConnectionResult.Ports[0]?.Id),\n        NniVlan = 1024,\n        VrfId = equinix_metal_vrf.Example.Id,\n        PeerAsn = 65530,\n        Subnet = \"192.168.100.16/31\",\n        MetalIp = \"192.168.100.16\",\n        CustomerIp = \"192.168.100.17\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleConnection, err := metal.LookupConnection(ctx, \u0026metal.LookupConnectionArgs{\n\t\t\tConnectionId: _var.Metal_dedicated_connection_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewVirtualCircuit(ctx, \"exampleVirtualCircuit\", \u0026metal.VirtualCircuitArgs{\n\t\t\tDescription:  pulumi.String(\"Virtual Circuit\"),\n\t\t\tConnectionId: *pulumi.String(exampleConnection.Id),\n\t\t\tProjectId:    pulumi.Any(equinix_metal_project.Example.Id),\n\t\t\tPortId:       *pulumi.String(exampleConnection.Ports[0].Id),\n\t\t\tNniVlan:      pulumi.Int(1024),\n\t\t\tVrfId:        pulumi.Any(equinix_metal_vrf.Example.Id),\n\t\t\tPeerAsn:      pulumi.Int(65530),\n\t\t\tSubnet:       pulumi.String(\"192.168.100.16/31\"),\n\t\t\tMetalIp:      pulumi.String(\"192.168.100.16\"),\n\t\t\tCustomerIp:   pulumi.String(\"192.168.100.17\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetConnectionArgs;\nimport com.pulumi.equinix.metal.VirtualCircuit;\nimport com.pulumi.equinix.metal.VirtualCircuitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleConnection = MetalFunctions.getConnection(GetConnectionArgs.builder()\n            .connectionId(var_.metal_dedicated_connection_id())\n            .build());\n\n        var exampleVirtualCircuit = new VirtualCircuit(\"exampleVirtualCircuit\", VirtualCircuitArgs.builder()        \n            .description(\"Virtual Circuit\")\n            .connectionId(exampleConnection.applyValue(getConnectionResult -\u003e getConnectionResult.id()))\n            .projectId(equinix_metal_project.example().id())\n            .portId(exampleConnection.applyValue(getConnectionResult -\u003e getConnectionResult.ports()[0].id()))\n            .nniVlan(1024)\n            .vrfId(equinix_metal_vrf.example().id())\n            .peerAsn(65530)\n            .subnet(\"192.168.100.16/31\")\n            .metalIp(\"192.168.100.16\")\n            .customerIp(\"192.168.100.17\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleVirtualCircuit:\n    type: equinix:metal:VirtualCircuit\n    properties:\n      description: Virtual Circuit\n      connectionId: ${exampleConnection.id}\n      projectId: ${equinix_metal_project.example.id}\n      portId: ${exampleConnection.ports[0].id}\n      nniVlan: 1024\n      vrfId: ${equinix_metal_vrf.example.id}\n      peerAsn: 65530\n      subnet: 192.168.100.16/31\n      metalIp: 192.168.100.16\n      customerIp: 192.168.100.17\nvariables:\n  exampleConnection:\n    fn::invoke:\n      Function: equinix:metal:getConnection\n      Arguments:\n        connectionId: ${var.metal_dedicated_connection_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing VRF ID\n\n```sh\n $ pulumi import equinix:metal/vrf:Vrf equinix_metal_vrf {existing_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "required": [
                "localAsn",
                "metro",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the VRF.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "The 4-byte ASN set on the VRF.\n"
                },
                "metro": {
                    "type": "string",
                    "description": "Metro ID or Code where the VRF will be deployed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User-supplied name of the VRF, unique to the project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where the VRF will be deployed.\n"
                }
            },
            "requiredInputs": [
                "metro",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vrf resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/aclTemplate:AclTemplate": {
            "description": "Resource `equinix.networkedge.AclTemplate` allows creation and management of\nEquinix Network Edge device Access Control List templates.\n\nDevice ACL templates give possibility to define set of rules will allowed inbound\ntraffic. Templates can be assigned to the network devices.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Creates ACL template and assigns it to the network device\nconst myacl = new equinix.networkedge.AclTemplate(\"myacl\", {\n    description: \"Test ACL template\",\n    inboundRules: [\n        {\n            description: \"inbound rule description\",\n            dstPort: \"any\",\n            protocol: \"IP\",\n            srcPort: \"any\",\n            subnet: \"1.1.1.1/32\",\n        },\n        {\n            dstPort: \"53,1045,2041\",\n            protocol: \"UDP\",\n            srcPort: \"any\",\n            subnet: \"172.16.25.0/24\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Creates ACL template and assigns it to the network device\nmyacl = equinix.networkedge.AclTemplate(\"myacl\",\n    description=\"Test ACL template\",\n    inbound_rules=[\n        equinix.networkedge.AclTemplateInboundRuleArgs(\n            description=\"inbound rule description\",\n            dst_port=\"any\",\n            protocol=\"IP\",\n            src_port=\"any\",\n            subnet=\"1.1.1.1/32\",\n        ),\n        equinix.networkedge.AclTemplateInboundRuleArgs(\n            dst_port=\"53,1045,2041\",\n            protocol=\"UDP\",\n            src_port=\"any\",\n            subnet=\"172.16.25.0/24\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Creates ACL template and assigns it to the network device\n    var myacl = new Equinix.NetworkEdge.AclTemplate(\"myacl\", new()\n    {\n        Description = \"Test ACL template\",\n        InboundRules = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.AclTemplateInboundRuleArgs\n            {\n                Description = \"inbound rule description\",\n                DstPort = \"any\",\n                Protocol = \"IP\",\n                SrcPort = \"any\",\n                Subnet = \"1.1.1.1/32\",\n            },\n            new Equinix.NetworkEdge.Inputs.AclTemplateInboundRuleArgs\n            {\n                DstPort = \"53,1045,2041\",\n                Protocol = \"UDP\",\n                SrcPort = \"any\",\n                Subnet = \"172.16.25.0/24\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.NewAclTemplate(ctx, \"myacl\", \u0026networkedge.AclTemplateArgs{\n\t\t\tDescription: pulumi.String(\"Test ACL template\"),\n\t\t\tInboundRules: networkedge.AclTemplateInboundRuleArray{\n\t\t\t\t\u0026networkedge.AclTemplateInboundRuleArgs{\n\t\t\t\t\tDescription: pulumi.String(\"inbound rule description\"),\n\t\t\t\t\tDstPort:     pulumi.String(\"any\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"IP\"),\n\t\t\t\t\tSrcPort:     pulumi.String(\"any\"),\n\t\t\t\t\tSubnet:      pulumi.String(\"1.1.1.1/32\"),\n\t\t\t\t},\n\t\t\t\t\u0026networkedge.AclTemplateInboundRuleArgs{\n\t\t\t\t\tDstPort:  pulumi.String(\"53,1045,2041\"),\n\t\t\t\t\tProtocol: pulumi.String(\"UDP\"),\n\t\t\t\t\tSrcPort:  pulumi.String(\"any\"),\n\t\t\t\t\tSubnet:   pulumi.String(\"172.16.25.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.AclTemplate;\nimport com.pulumi.equinix.networkedge.AclTemplateArgs;\nimport com.pulumi.equinix.networkedge.inputs.AclTemplateInboundRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myacl = new AclTemplate(\"myacl\", AclTemplateArgs.builder()        \n            .description(\"Test ACL template\")\n            .inboundRules(            \n                AclTemplateInboundRuleArgs.builder()\n                    .description(\"inbound rule description\")\n                    .dstPort(\"any\")\n                    .protocol(\"IP\")\n                    .srcPort(\"any\")\n                    .subnet(\"1.1.1.1/32\")\n                    .build(),\n                AclTemplateInboundRuleArgs.builder()\n                    .dstPort(\"53,1045,2041\")\n                    .protocol(\"UDP\")\n                    .srcPort(\"any\")\n                    .subnet(\"172.16.25.0/24\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Creates ACL template and assigns it to the network device\n  myacl:\n    type: equinix:networkedge:AclTemplate\n    properties:\n      description: Test ACL template\n      inboundRules:\n        - description: inbound rule description\n          dstPort: any\n          protocol: IP\n          srcPort: any\n          subnet: 1.1.1.1/32\n        - dstPort: 53,1045,2041\n          protocol: UDP\n          srcPort: any\n          subnet: 172.16.25.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/aclTemplate:AclTemplate example {existing_id}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n"
                },
                "deviceAclStatus": {
                    "type": "string",
                    "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                },
                "deviceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail"
                    },
                    "description": "List of the devices where the ACL template is applied.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                    "deprecationMessage": "Refer to device details get device information"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device uuid.\n"
                }
            },
            "required": [
                "deviceAclStatus",
                "deviceDetails",
                "deviceId",
                "inboundRules",
                "name",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Inbound rule description, up to 200 characters.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                    },
                    "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "ACL template location metro code.\n",
                    "deprecationMessage": "Metro Code is no longer required"
                },
                "name": {
                    "type": "string",
                    "description": "ACL template name.\n"
                }
            },
            "requiredInputs": [
                "inboundRules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclTemplate resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Inbound rule description, up to 200 characters.\n"
                    },
                    "deviceAclStatus": {
                        "type": "string",
                        "description": "Status of ACL template provisioning process, where template was applied.\nOne of `PROVISIONING`, `PROVISIONED`.\n"
                    },
                    "deviceDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/AclTemplateDeviceDetail:AclTemplateDeviceDetail"
                        },
                        "description": "List of the devices where the ACL template is applied.\n"
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "(Deprecated) Identifier of a network device where template was applied.\n",
                        "deprecationMessage": "Refer to device details get device information"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/AclTemplateInboundRule:AclTemplateInboundRule"
                        },
                        "description": "One or more rules to specify allowed inbound traffic.\nRules are ordered, matching traffic rule stops processing subsequent ones.\n"
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "ACL template location metro code.\n",
                        "deprecationMessage": "Metro Code is no longer required"
                    },
                    "name": {
                        "type": "string",
                        "description": "ACL template name.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device uuid.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/bgp:Bgp": {
            "description": "Resource `equinix.networkedge.Bgp` allows creation and management of Equinix Network\nEdge BGP peering configurations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\nconst test = new equinix.networkedge.Bgp(\"test\", {\n    authenticationKey: \"secret\",\n    connectionId: \"54014acf-9730-4b55-a791-459283d05fb1\",\n    localAsn: 12345,\n    localIpAddress: \"10.1.1.1/30\",\n    remoteAsn: 66123,\n    remoteIpAddress: \"10.1.1.2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.networkedge.Bgp(\"test\",\n    authentication_key=\"secret\",\n    connection_id=\"54014acf-9730-4b55-a791-459283d05fb1\",\n    local_asn=12345,\n    local_ip_address=\"10.1.1.1/30\",\n    remote_asn=66123,\n    remote_ip_address=\"10.1.1.2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Equinix.NetworkEdge.Bgp(\"test\", new()\n    {\n        AuthenticationKey = \"secret\",\n        ConnectionId = \"54014acf-9730-4b55-a791-459283d05fb1\",\n        LocalAsn = 12345,\n        LocalIpAddress = \"10.1.1.1/30\",\n        RemoteAsn = 66123,\n        RemoteIpAddress = \"10.1.1.2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.NewBgp(ctx, \"test\", \u0026networkedge.BgpArgs{\n\t\t\tAuthenticationKey: pulumi.String(\"secret\"),\n\t\t\tConnectionId:      pulumi.String(\"54014acf-9730-4b55-a791-459283d05fb1\"),\n\t\t\tLocalAsn:          pulumi.Int(12345),\n\t\t\tLocalIpAddress:    pulumi.String(\"10.1.1.1/30\"),\n\t\t\tRemoteAsn:         pulumi.Int(66123),\n\t\t\tRemoteIpAddress:   pulumi.String(\"10.1.1.2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.Bgp;\nimport com.pulumi.equinix.networkedge.BgpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Bgp(\"test\", BgpArgs.builder()        \n            .authenticationKey(\"secret\")\n            .connectionId(\"54014acf-9730-4b55-a791-459283d05fb1\")\n            .localAsn(12345)\n            .localIpAddress(\"10.1.1.1/30\")\n            .remoteAsn(66123)\n            .remoteIpAddress(\"10.1.1.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: equinix:networkedge:Bgp\n    properties:\n      authenticationKey: secret\n      connectionId: 54014acf-9730-4b55-a791-459283d05fb1\n      localAsn: 12345\n      localIpAddress: 10.1.1.1/30\n      remoteAsn: 66123\n      remoteIpAddress: 10.1.1.2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/bgp:Bgp example {existing_id}\n```\n\n ",
            "properties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n",
                    "secret": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "provisioningStatus": {
                    "type": "string",
                    "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                },
                "state": {
                    "type": "string",
                    "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "BGP peering configuration unique identifier.\n"
                }
            },
            "required": [
                "connectionId",
                "deviceId",
                "localAsn",
                "localIpAddress",
                "provisioningStatus",
                "remoteAsn",
                "remoteIpAddress",
                "state",
                "uuid"
            ],
            "inputProperties": {
                "authenticationKey": {
                    "type": "string",
                    "description": "shared key used for BGP peer authentication.\n",
                    "secret": true
                },
                "connectionId": {
                    "type": "string",
                    "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                    "willReplaceOnChanges": true
                },
                "localAsn": {
                    "type": "integer",
                    "description": "Local ASN number.\n"
                },
                "localIpAddress": {
                    "type": "string",
                    "description": "IP address in CIDR format of a local device.\n"
                },
                "remoteAsn": {
                    "type": "integer",
                    "description": "Remote ASN number.\n"
                },
                "remoteIpAddress": {
                    "type": "string",
                    "description": "IP address of remote peer.\n"
                }
            },
            "requiredInputs": [
                "connectionId",
                "localAsn",
                "localIpAddress",
                "remoteAsn",
                "remoteIpAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bgp resources.\n",
                "properties": {
                    "authenticationKey": {
                        "type": "string",
                        "description": "shared key used for BGP peer authentication.\n",
                        "secret": true
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "identifier of a connection established between.\nnetwork device and remote service provider that will be used for peering.\n",
                        "willReplaceOnChanges": true
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "unique identifier of a network device that is a local peer in a given BGP peering\nconfiguration.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "Local ASN number.\n"
                    },
                    "localIpAddress": {
                        "type": "string",
                        "description": "IP address in CIDR format of a local device.\n"
                    },
                    "provisioningStatus": {
                        "type": "string",
                        "description": "BGP peering configuration provisioning status, one of `PROVISIONING`,\n`PENDING_UPDATE`, `PROVISIONED`, `FAILED`.\n"
                    },
                    "remoteAsn": {
                        "type": "integer",
                        "description": "Remote ASN number.\n"
                    },
                    "remoteIpAddress": {
                        "type": "string",
                        "description": "IP address of remote peer.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "BGP peer state, one of `Idle`, `Connect`, `Active`, `OpenSent`, `OpenConfirm`,\n`Established`.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "BGP peering configuration unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/device:Device": {
            "description": "Resource `equinix.networkedge.Device` allows creation and management of Equinix Network Edge virtual\nnetwork devices.\n\nNetwork Edge virtual network devices can be created in two modes:\n\n* **managed** - (default) Where Equinix manages connectivity and services in the device and\ncustomer gets limited access to the device.\n* **self-configured** - Where customer provisions and manages own services in the device with less\nrestricted access. Some device types are offered only in this mode.\n\nIn addition to management modes, there are two software license modes available:\n\n* **subscription** - Where Equinix provides software license, including end-to-end support, and\nbills for the service respectively.\n* **BYOL** - [bring your own license] Where customer brings his own, already procured device\nsoftware license. There are no charges associated with such license. It is the only licensing mode\nfor `self-configured` devices.\n\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/device:Device example {existing_id}\n```\n\n The `license_token`, `mgmt_acl_template_uuid` and `cloud_init_file_id` fields can not be imported. ",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n"
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "asn": {
                    "type": "integer",
                    "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n"
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on the device.\n"
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n"
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n"
                },
                "ibx": {
                    "type": "string",
                    "description": "Device location Equinix Business Exchange name.\n"
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceInterface:DeviceInterface"
                    },
                    "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n"
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n"
                },
                "licenseStatus": {
                    "type": "string",
                    "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n"
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n"
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n"
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n"
                },
                "redundancyType": {
                    "type": "string",
                    "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                },
                "redundantId": {
                    "type": "string",
                    "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Device location region.\n"
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n"
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n"
                },
                "sshIpAddress": {
                    "type": "string",
                    "description": "IP address of SSH enabled interface on the device.\n"
                },
                "sshIpFqdn": {
                    "type": "string",
                    "description": "FQDN of SSH enabled interface on the device.\n"
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n"
                },
                "status": {
                    "type": "string",
                    "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n"
                },
                "throughputUnit": {
                    "type": "string",
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n"
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device unique identifier.\n"
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n"
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n"
                },
                "zoneCode": {
                    "type": "string",
                    "description": "Device location zone code.\n"
                }
            },
            "required": [
                "accountNumber",
                "additionalBandwidth",
                "asn",
                "coreCount",
                "hostname",
                "ibx",
                "interfaces",
                "interfaceCount",
                "licenseFileId",
                "licenseStatus",
                "metroCode",
                "name",
                "notifications",
                "packageCode",
                "redundancyType",
                "redundantId",
                "region",
                "sshIpAddress",
                "sshIpFqdn",
                "status",
                "termLength",
                "typeCode",
                "uuid",
                "vendorConfiguration",
                "version",
                "zoneCode"
            ],
            "inputProperties": {
                "accountNumber": {
                    "type": "string",
                    "description": "Billing account number for a device.\n",
                    "willReplaceOnChanges": true
                },
                "aclTemplateId": {
                    "type": "string",
                    "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                },
                "additionalBandwidth": {
                    "type": "integer",
                    "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                },
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                    "willReplaceOnChanges": true
                },
                "cloudInitFileId": {
                    "type": "string",
                    "description": "Identifier of a cloud init file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "clusterDetails": {
                    "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                    "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "coreCount": {
                    "type": "integer",
                    "description": "Number of CPU cores used by device.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "Device hostname prefix.\n",
                    "willReplaceOnChanges": true
                },
                "interfaceCount": {
                    "type": "integer",
                    "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFile": {
                    "type": "string",
                    "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n",
                    "willReplaceOnChanges": true
                },
                "licenseFileId": {
                    "type": "string",
                    "description": "Identifier of a license file that will be applied on the device.\n",
                    "willReplaceOnChanges": true
                },
                "licenseToken": {
                    "type": "string",
                    "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "description": "Device location metro code.\n",
                    "willReplaceOnChanges": true
                },
                "mgmtAclTemplateUuid": {
                    "type": "string",
                    "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Device name.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses that will receive device status\nnotifications.\n"
                },
                "orderReference": {
                    "type": "string",
                    "description": "Name/number used to identify device order on the invoice.\n",
                    "willReplaceOnChanges": true
                },
                "packageCode": {
                    "type": "string",
                    "description": "Device software package code.\n",
                    "willReplaceOnChanges": true
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "Purchase order number associated with a device order.\n",
                    "willReplaceOnChanges": true
                },
                "secondaryDevice": {
                    "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                    "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n",
                    "willReplaceOnChanges": true
                },
                "sshKey": {
                    "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                    "description": "Definition of SSH key that will be provisioned on a device\n",
                    "willReplaceOnChanges": true
                },
                "termLength": {
                    "type": "integer",
                    "description": "Device term length.\n"
                },
                "throughput": {
                    "type": "integer",
                    "description": "Device license throughput.\n",
                    "willReplaceOnChanges": true
                },
                "throughputUnit": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/throughputUnit:ThroughputUnit"
                        }
                    ],
                    "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                    "willReplaceOnChanges": true
                },
                "typeCode": {
                    "type": "string",
                    "description": "Device type code.\n",
                    "willReplaceOnChanges": true
                },
                "vendorConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Device software software version.\n",
                    "willReplaceOnChanges": true
                },
                "wanInterfaceId": {
                    "type": "string",
                    "description": "device interface id picked for WAN\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountNumber",
                "coreCount",
                "metroCode",
                "notifications",
                "packageCode",
                "termLength",
                "typeCode",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string",
                        "description": "Billing account number for a device.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Identifier of a WAN interface ACL template that will be applied on the device.\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer",
                        "description": "Additional Internet bandwidth, in Mbps, that will be\nallocated to the device (in addition to default 15Mbps).\n"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "(Autonomous System Number) Unique identifier for a network on the internet.\n"
                    },
                    "byol": {
                        "type": "boolean",
                        "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "cloudInitFileId": {
                        "type": "string",
                        "description": "Identifier of a cloud init file that will be applied on the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterDetails": {
                        "$ref": "#/types/equinix:networkedge/DeviceClusterDetails:DeviceClusterDetails",
                        "description": "An object that has the cluster details. See\nCluster Details below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used by device.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Device hostname prefix.\n",
                        "willReplaceOnChanges": true
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name.\n"
                    },
                    "interfaceCount": {
                        "type": "integer",
                        "description": "Number of network interfaces on a device. If not specified,\ndefault number for a given device type will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceInterface:DeviceInterface"
                        },
                        "description": "List of device interfaces. See Interface Attribute below\nfor more details.\n"
                    },
                    "licenseFile": {
                        "type": "string",
                        "description": "Path to the license file that will be uploaded and applied on a\ndevice. Applicable for some device types in BYOL licensing mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "Identifier of a license file that will be applied on the device.\n",
                        "willReplaceOnChanges": true
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status. Possible values are `APPLYING_LICENSE`,\n`REGISTERED`, `APPLIED`, `WAITING_FOR_CLUSTER_SETUP`, `REGISTRATION_FAILED`.\n"
                    },
                    "licenseToken": {
                        "type": "string",
                        "description": "License Token applicable for some device types in BYOL licensing\nmode.\n",
                        "willReplaceOnChanges": true
                    },
                    "metroCode": {
                        "type": "string",
                        "description": "Device location metro code.\n",
                        "willReplaceOnChanges": true
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string",
                        "description": "Identifier of an MGMT interface ACL template that will be\napplied on the device.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device name.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses that will receive device status\nnotifications.\n"
                    },
                    "orderReference": {
                        "type": "string",
                        "description": "Name/number used to identify device order on the invoice.\n",
                        "willReplaceOnChanges": true
                    },
                    "packageCode": {
                        "type": "string",
                        "description": "Device software package code.\n",
                        "willReplaceOnChanges": true
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Purchase order number associated with a device order.\n",
                        "willReplaceOnChanges": true
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary.\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region.\n"
                    },
                    "secondaryDevice": {
                        "$ref": "#/types/equinix:networkedge/DeviceSecondaryDevice:DeviceSecondaryDevice",
                        "description": "Definition of secondary device for redundant\ndevice configurations. See Secondary Device below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfManaged": {
                        "type": "boolean",
                        "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed` (default).\n",
                        "willReplaceOnChanges": true
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device.\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device.\n"
                    },
                    "sshKey": {
                        "$ref": "#/types/equinix:networkedge/DeviceSshKey:DeviceSshKey",
                        "description": "Definition of SSH key that will be provisioned on a device\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "interface status. One of `AVAILABLE`, `RESERVED`, `ASSIGNED`.\n"
                    },
                    "termLength": {
                        "type": "integer",
                        "description": "Device term length.\n"
                    },
                    "throughput": {
                        "type": "integer",
                        "description": "Device license throughput.\n",
                        "willReplaceOnChanges": true
                    },
                    "throughputUnit": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:networkedge/throughputUnit:ThroughputUnit"
                            }
                        ],
                        "description": "License throughput unit. One of `Mbps` or `Gbps`.\n",
                        "willReplaceOnChanges": true
                    },
                    "typeCode": {
                        "type": "string",
                        "description": "Device type code.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of vendor specific configuration parameters for a device\n(controller1, activationKey, managementType, siteId, systemIpAddress)\n* `ssh-key` - (Optional) Definition of SSH key that will be provisioned\non a device (max one key).  See SSH Key below for more details.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Device software software version.\n",
                        "willReplaceOnChanges": true
                    },
                    "wanInterfaceId": {
                        "type": "string",
                        "description": "device interface id picked for WAN\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/deviceLink:DeviceLink": {
            "description": "Resource `equinix.networkedge.DeviceLink` allows creation and management of Equinix\nNetwork Edge virtual network device links.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Example of device link with HA device pair\n// where each device is in different metro\nconst test = new equinix.networkedge.DeviceLink(\"test\", {\n    subnet: \"192.168.40.64/27\",\n    devices: [\n        {\n            id: equinix_network_device.test.uuid,\n            asn: equinix_network_device.test.asn \u003e 0 ? equinix_network_device.test.asn : 22111,\n            interfaceId: 6,\n        },\n        {\n            id: equinix_network_device.test.secondary_device[0].uuid,\n            asn: equinix_network_device.test.secondary_device[0].asn \u003e 0 ? equinix_network_device.test.secondary_device[0].asn : 22333,\n            interfaceId: 7,\n        },\n    ],\n    links: [{\n        accountNumber: equinix_network_device.test.account_number,\n        srcMetroCode: equinix_network_device.test.metro_code,\n        dstMetroCode: equinix_network_device.test.secondary_device[0].metro_code,\n        throughput: \"50\",\n        throughputUnit: \"Mbps\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Example of device link with HA device pair\n# where each device is in different metro\ntest = equinix.networkedge.DeviceLink(\"test\",\n    subnet=\"192.168.40.64/27\",\n    devices=[\n        equinix.networkedge.DeviceLinkDeviceArgs(\n            id=equinix_network_device[\"test\"][\"uuid\"],\n            asn=equinix_network_device[\"test\"][\"asn\"] if equinix_network_device[\"test\"][\"asn\"] \u003e 0 else 22111,\n            interface_id=6,\n        ),\n        equinix.networkedge.DeviceLinkDeviceArgs(\n            id=equinix_network_device[\"test\"][\"secondary_device\"][0][\"uuid\"],\n            asn=equinix_network_device[\"test\"][\"secondary_device\"][0][\"asn\"] if equinix_network_device[\"test\"][\"secondary_device\"][0][\"asn\"] \u003e 0 else 22333,\n            interface_id=7,\n        ),\n    ],\n    links=[equinix.networkedge.DeviceLinkLinkArgs(\n        account_number=equinix_network_device[\"test\"][\"account_number\"],\n        src_metro_code=equinix_network_device[\"test\"][\"metro_code\"],\n        dst_metro_code=equinix_network_device[\"test\"][\"secondary_device\"][0][\"metro_code\"],\n        throughput=\"50\",\n        throughput_unit=\"Mbps\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Example of device link with HA device pair\n    // where each device is in different metro\n    var test = new Equinix.NetworkEdge.DeviceLink(\"test\", new()\n    {\n        Subnet = \"192.168.40.64/27\",\n        Devices = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs\n            {\n                Id = equinix_network_device.Test.Uuid,\n                Asn = equinix_network_device.Test.Asn \u003e 0 ? equinix_network_device.Test.Asn : 22111,\n                InterfaceId = 6,\n            },\n            new Equinix.NetworkEdge.Inputs.DeviceLinkDeviceArgs\n            {\n                Id = equinix_network_device.Test.Secondary_device[0].Uuid,\n                Asn = equinix_network_device.Test.Secondary_device[0].Asn \u003e 0 ? equinix_network_device.Test.Secondary_device[0].Asn : 22333,\n                InterfaceId = 7,\n            },\n        },\n        Links = new[]\n        {\n            new Equinix.NetworkEdge.Inputs.DeviceLinkLinkArgs\n            {\n                AccountNumber = equinix_network_device.Test.Account_number,\n                SrcMetroCode = equinix_network_device.Test.Metro_code,\n                DstMetroCode = equinix_network_device.Test.Secondary_device[0].Metro_code,\n                Throughput = \"50\",\n                ThroughputUnit = \"Mbps\",\n            },\n        },\n    });\n\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.DeviceLink;\nimport com.pulumi.equinix.networkedge.DeviceLinkArgs;\nimport com.pulumi.equinix.networkedge.inputs.DeviceLinkDeviceArgs;\nimport com.pulumi.equinix.networkedge.inputs.DeviceLinkLinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DeviceLink(\"test\", DeviceLinkArgs.builder()        \n            .subnet(\"192.168.40.64/27\")\n            .devices(            \n                DeviceLinkDeviceArgs.builder()\n                    .id(equinix_network_device.test().uuid())\n                    .asn(equinix_network_device.test().asn() \u003e 0 ? equinix_network_device.test().asn() : 22111)\n                    .interfaceId(6)\n                    .build(),\n                DeviceLinkDeviceArgs.builder()\n                    .id(equinix_network_device.test().secondary_device()[0].uuid())\n                    .asn(equinix_network_device.test().secondary_device()[0].asn() \u003e 0 ? equinix_network_device.test().secondary_device()[0].asn() : 22333)\n                    .interfaceId(7)\n                    .build())\n            .links(DeviceLinkLinkArgs.builder()\n                .accountNumber(equinix_network_device.test().account_number())\n                .srcMetroCode(equinix_network_device.test().metro_code())\n                .dstMetroCode(equinix_network_device.test().secondary_device()[0].metro_code())\n                .throughput(\"50\")\n                .throughputUnit(\"Mbps\")\n                .build())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/deviceLink:DeviceLink example {existing_id}\n```\n\n ",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "status": {
                    "type": "string",
                    "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Device link unique identifier.\n"
                }
            },
            "required": [
                "devices",
                "name",
                "status",
                "uuid"
            ],
            "inputProperties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                    },
                    "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                    },
                    "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "device link name.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                }
            },
            "requiredInputs": [
                "devices"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceLink resources.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceLinkDevice:DeviceLinkDevice"
                        },
                        "description": "definition of one or more devices belonging to the\ndevice link. See Device section below for more details.\n"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/DeviceLinkLink:DeviceLinkLink"
                        },
                        "description": "definition of one or more, inter metro, connections belonging\nto the device link. See Link section below for more details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "device link name.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "device link provisioning status on a given device. One of `PROVISIONING`,\n`PROVISIONED`, `DEPROVISIONING`, `DEPROVISIONED`, `FAILED`.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "device link subnet in CIDR format. Not required for link\nbetween self configured devices.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device link unique identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/networkFile:NetworkFile": {
            "description": "Resource `equinix.networkedge.NetworkFile` allows creation and management of Equinix Network Edge files.\n\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/networkFile:NetworkFile example {existing_id}\n```\n\n The `content`, `self_managed` and `byol` fields can not be imported. ",
            "properties": {
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                    "secret": true
                },
                "deviceTypeCode": {
                    "type": "string",
                    "description": "Device type code\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "File name.\n"
                },
                "metroCode": {
                    "type": "string",
                    "description": "File upload location metro code. It should match the device location metro code.\n"
                },
                "processType": {
                    "type": "string",
                    "description": "File process type (LICENSE or CLOUD_INIT).\n"
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "File upload status.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier of file resource.\n"
                }
            },
            "required": [
                "byol",
                "content",
                "deviceTypeCode",
                "fileName",
                "metroCode",
                "processType",
                "selfManaged",
                "status",
                "uuid"
            ],
            "inputProperties": {
                "byol": {
                    "type": "boolean",
                    "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "deviceTypeCode": {
                    "type": "string",
                    "description": "Device type code\n",
                    "willReplaceOnChanges": true
                },
                "fileName": {
                    "type": "string",
                    "description": "File name.\n",
                    "willReplaceOnChanges": true
                },
                "metroCode": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:index/metro:Metro"
                        }
                    ],
                    "description": "File upload location metro code. It should match the device location metro code.\n",
                    "willReplaceOnChanges": true
                },
                "processType": {
                    "type": "string",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "$ref": "#/types/equinix:networkedge/fileType:FileType"
                        }
                    ],
                    "description": "File process type (LICENSE or CLOUD_INIT).\n",
                    "willReplaceOnChanges": true
                },
                "selfManaged": {
                    "type": "boolean",
                    "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "byol",
                "content",
                "deviceTypeCode",
                "fileName",
                "metroCode",
                "processType",
                "selfManaged"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkFile resources.\n",
                "properties": {
                    "byol": {
                        "type": "boolean",
                        "description": "Boolean value that determines device licensing mode, i.e.,\n`bring your own license` or `subscription`.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "Uploaded file content, expected to be a UTF-8 encoded string.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "deviceTypeCode": {
                        "type": "string",
                        "description": "Device type code\n",
                        "willReplaceOnChanges": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "File name.\n",
                        "willReplaceOnChanges": true
                    },
                    "metroCode": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:index/metro:Metro"
                            }
                        ],
                        "description": "File upload location metro code. It should match the device location metro code.\n",
                        "willReplaceOnChanges": true
                    },
                    "processType": {
                        "type": "string",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "$ref": "#/types/equinix:networkedge/fileType:FileType"
                            }
                        ],
                        "description": "File process type (LICENSE or CLOUD_INIT).\n",
                        "willReplaceOnChanges": true
                    },
                    "selfManaged": {
                        "type": "boolean",
                        "description": "Boolean value that determines device management mode, i.e.,\n`self-managed` or `Equinix-managed`.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "File upload status.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of file resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/sshKey:SshKey": {
            "description": "Resource `equinix.networkedge.SshKey` allows creation and management of Equinix Network Edge SSH keys.\n\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/sshKey:SshKey example {existing_id}\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The unique identifier of the key\n"
                }
            },
            "required": [
                "name",
                "publicKey",
                "uuid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of SSH key used for identification.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of SSH key used for identification.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key. If this is a file, it can be read using the file\ninterpolation function.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The unique identifier of the key\n"
                    }
                },
                "type": "object"
            }
        },
        "equinix:networkedge/sshUser:SshUser": {
            "description": "Resource `equinix.networkedge.SshUser` allows creation and management of Equinix Network\nEdge SSH users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\n\n// Create SSH user with password auth method and associate it with\n// two virtual network devices\nconst john = new equinix.networkedge.SshUser(\"john\", {\n    username: \"john\",\n    password: \"secret\",\n    deviceIds: [\n        equinix_network_device[\"csr1000v-ha\"].uuid,\n        equinix_network_device[\"csr1000v-ha\"].redundant_uuid,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create SSH user with password auth method and associate it with\n# two virtual network devices\njohn = equinix.networkedge.SshUser(\"john\",\n    username=\"john\",\n    password=\"secret\",\n    device_ids=[\n        equinix_network_device[\"csr1000v-ha\"][\"uuid\"],\n        equinix_network_device[\"csr1000v-ha\"][\"redundant_uuid\"],\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create SSH user with password auth method and associate it with\n    // two virtual network devices\n    var john = new Equinix.NetworkEdge.SshUser(\"john\", new()\n    {\n        Username = \"john\",\n        Password = \"secret\",\n        DeviceIds = new[]\n        {\n            equinix_network_device.Csr1000v_ha.Uuid,\n            equinix_network_device.Csr1000v_ha.Redundant_uuid,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.NewSshUser(ctx, \"john\", \u0026networkedge.SshUserArgs{\n\t\t\tUsername: pulumi.String(\"john\"),\n\t\t\tPassword: pulumi.String(\"secret\"),\n\t\t\tDeviceIds: pulumi.StringArray{\n\t\t\t\tequinix_network_device.Csr1000vHa.Uuid,\n\t\t\t\tequinix_network_device.Csr1000vHa.Redundant_uuid,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.SshUser;\nimport com.pulumi.equinix.networkedge.SshUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var john = new SshUser(\"john\", SshUserArgs.builder()        \n            .username(\"john\")\n            .password(\"secret\")\n            .deviceIds(            \n                equinix_network_device.csr1000v-ha().uuid(),\n                equinix_network_device.csr1000v-ha().redundant_uuid())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create SSH user with password auth method and associate it with\n  # two virtual network devices\n  john:\n    type: equinix:networkedge:SshUser\n    properties:\n      username: john\n      password: secret\n      deviceIds:\n        - ${equinix_network_device\"csr1000v-ha\"[%!s(MISSING)].uuid}\n        - ${equinix_network_device\"csr1000v-ha\"[%!s(MISSING)].redundant_uuid}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an existing ID\n\n```sh\n $ pulumi import equinix:networkedge/sshUser:SshUser example {existing_id}\n```\n\n ",
            "properties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "SSH user unique identifier.\n"
                }
            },
            "required": [
                "deviceIds",
                "password",
                "username",
                "uuid"
            ],
            "inputProperties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device identifiers to which user will have access.\n"
                },
                "password": {
                    "type": "string",
                    "description": "SSH user password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "SSH user login name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "deviceIds",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshUser resources.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of device identifiers to which user will have access.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "SSH user password.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "SSH user login name.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "SSH user unique identifier.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "equinix:fabric/getConnection:getConnection": {
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "project": {
                        "$ref": "#/types/equinix:fabric/getConnectionProject:getConnectionProject",
                        "description": "Project information\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned connection identifier\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "aSide": {
                        "$ref": "#/types/equinix:fabric/getConnectionASide:getConnectionASide",
                        "description": "Requester or Customer side connection configuration object of the multi-segment connection\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/getConnectionAccount:getConnectionAccount",
                        "description": "Customer account information that is associated with this connection\n"
                    },
                    "additionalInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getConnectionAdditionalInfo:getConnectionAdditionalInfo"
                        },
                        "description": "Connection additional information\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Connection bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getConnectionChangeLog:getConnectionChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Customer-provided connection description\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Connection directionality from the requester point of view\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Connection URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isRemote": {
                        "type": "boolean",
                        "description": "Connection property derived from access point locations\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getConnectionNotification:getConnectionNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/getConnectionOperation:getConnectionOperation",
                        "description": "Connection specific operational data\n"
                    },
                    "order": {
                        "$ref": "#/types/equinix:fabric/getConnectionOrder:getConnectionOrder",
                        "description": "Order related to this connection information\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/getConnectionProject:getConnectionProject",
                        "description": "Project information\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/getConnectionRedundancy:getConnectionRedundancy",
                        "description": "Redundancy Information\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Connection overall state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Defines the connection type like VG*VC, EVPL*VC, EPL*VC, EC*VC, GW*VC, ACCESS*EPL_VC\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned connection identifier\n"
                    },
                    "zSide": {
                        "$ref": "#/types/equinix:fabric/getConnectionZSide:getConnectionZSide",
                        "description": "Destination or Provider side connection configuration object of the multi-segment connection\n"
                    }
                },
                "type": "object",
                "required": [
                    "aSide",
                    "account",
                    "additionalInfo",
                    "bandwidth",
                    "changeLog",
                    "description",
                    "direction",
                    "href",
                    "isRemote",
                    "name",
                    "notifications",
                    "operation",
                    "order",
                    "redundancy",
                    "state",
                    "type",
                    "zSide",
                    "id"
                ]
            }
        },
        "equinix:fabric/getPort:getPort": {
            "inputs": {
                "description": "A collection of arguments for invoking getPort.\n",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned port identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPort.\n",
                "properties": {
                    "account": {
                        "$ref": "#/types/equinix:fabric/getPortAccount:getPortAccount",
                        "description": "Customer account information that is associated with this port\n"
                    },
                    "availableBandwidth": {
                        "type": "integer",
                        "description": "Port available bandwidth in Mbps\n"
                    },
                    "bandwidth": {
                        "type": "integer",
                        "description": "Port bandwidth in Mbps\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getPortChangeLog:getPortChangeLog",
                        "description": "Captures port lifecycle change information\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Port description\n"
                    },
                    "device": {
                        "$ref": "#/types/equinix:fabric/getPortDevice:getPortDevice",
                        "description": "Port device\n"
                    },
                    "encapsulation": {
                        "$ref": "#/types/equinix:fabric/getPortEncapsulation:getPortEncapsulation",
                        "description": "Port encapsulation protocol\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Port URI information\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lag": {
                        "$ref": "#/types/equinix:fabric/getPortLag:getPortLag",
                        "description": "Port Lag\n"
                    },
                    "location": {
                        "$ref": "#/types/equinix:fabric/getPortLocation:getPortLocation",
                        "description": "Port location information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name\n"
                    },
                    "operation": {
                        "$ref": "#/types/equinix:fabric/getPortOperation:getPortOperation",
                        "description": "Port specific operational data\n"
                    },
                    "redundancy": {
                        "$ref": "#/types/equinix:fabric/getPortRedundancy:getPortRedundancy",
                        "description": "Port redundancy information\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "Port service type\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Port state\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Port type\n"
                    },
                    "usedBandwidth": {
                        "type": "integer",
                        "description": "Port used bandwidth in Mbps\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix-assigned port identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "availableBandwidth",
                    "bandwidth",
                    "changeLog",
                    "description",
                    "device",
                    "encapsulation",
                    "href",
                    "lag",
                    "location",
                    "name",
                    "operation",
                    "redundancy",
                    "serviceType",
                    "state",
                    "type",
                    "usedBandwidth",
                    "uuid",
                    "id"
                ]
            }
        },
        "equinix:fabric/getPorts:getPorts": {
            "inputs": {
                "description": "A collection of arguments for invoking getPorts.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getPortsFilter:getPortsFilter"
                        },
                        "description": "name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPorts.\n",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getPortsDatum:getPortsDatum"
                        },
                        "description": "List of  Ports\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getPortsFilter:getPortsFilter"
                        },
                        "description": "name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "id"
                ]
            }
        },
        "equinix:fabric/getServiceProfile:getServiceProfile": {
            "description": "Fabric V4 API compatible data resource that allow user to fetch Service Profile by UUID filter criteria\n\n\u003e **Note** Equinix Fabric v4 resources and datasources are currently in Beta. The interfaces related to `equinix_fabric_` resources and datasources may change ahead of general availability\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceProfile.\n",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix assigned service profile identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "uuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceProfile.\n",
                "properties": {
                    "accessPointTypeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileAccessPointTypeConfig:getServiceProfileAccessPointTypeConfig"
                        },
                        "description": "Access point config information\n"
                    },
                    "account": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileAccount:getServiceProfileAccount",
                        "description": "Account\n"
                    },
                    "allowedEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of contact emails\n"
                    },
                    "changeLog": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileChangeLog:getServiceProfileChangeLog",
                        "description": "Captures connection lifecycle change information\n"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileCustomField:getServiceProfileCustomField"
                        },
                        "description": "Custom Fields\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "User-provided service description\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "Service Profile URI response attribute\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "marketingInfo": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileMarketingInfo:getServiceProfileMarketingInfo",
                        "description": "Marketing Info\n"
                    },
                    "metros": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileMetro:getServiceProfileMetro"
                        },
                        "description": "Access point config information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Customer-assigned service profile name\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfileNotification:getServiceProfileNotification"
                        },
                        "description": "Preferences for notifications on connection configuration or status changes\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilePort:getServiceProfilePort"
                        },
                        "description": "Ports\n"
                    },
                    "project": {
                        "$ref": "#/types/equinix:fabric/getServiceProfileProject:getServiceProfileProject",
                        "description": "Project information\n"
                    },
                    "selfProfile": {
                        "type": "boolean",
                        "description": "Self Profile indicating if the profile is created for customer's  self use\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Service profile state - ACTIVE, PENDING_APPROVAL, DELETED, REJECTED\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the connection\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Service profile type - L2*PROFILE, L3*PROFILE, ECIA*PROFILE, ECMC*PROFILE\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Equinix assigned service profile identifier\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Service profile visibility - PUBLIC, PRIVATE\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessPointTypeConfigs",
                    "account",
                    "allowedEmails",
                    "changeLog",
                    "customFields",
                    "description",
                    "href",
                    "marketingInfo",
                    "metros",
                    "name",
                    "notifications",
                    "ports",
                    "project",
                    "selfProfile",
                    "tags",
                    "type",
                    "uuid",
                    "visibility",
                    "id"
                ]
            }
        },
        "equinix:fabric/getServiceProfiles:getServiceProfiles": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceProfiles.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter",
                        "description": "Service Profile Search Filter\n"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesSort:getServiceProfilesSort"
                        },
                        "description": "Service Profile Sort criteria for Search Request response payload\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceProfiles.\n",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesDatum:getServiceProfilesDatum"
                        },
                        "description": "List of  Service Profiles\n"
                    },
                    "filter": {
                        "$ref": "#/types/equinix:fabric/getServiceProfilesFilter:getServiceProfilesFilter",
                        "description": "Service Profile Search Filter\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:fabric/getServiceProfilesSort:getServiceProfilesSort"
                        },
                        "description": "Service Profile Sort criteria for Search Request response payload\n"
                    }
                },
                "type": "object",
                "required": [
                    "data",
                    "id"
                ]
            }
        },
        "equinix:metal/getConnection:getConnection": {
            "description": "Use this data source to retrieve a [connection resource](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e Equinix Metal connection with with Service Token A-side / Z-side (service_token_type) is not generally available and may not be enabled yet for your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getConnection({\n    connectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_connection(connection_id=\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetConnection.Invoke(new()\n    {\n        ConnectionId = \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupConnection(ctx, \u0026metal.LookupConnectionArgs{\n\t\t\tConnectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getConnection(GetConnectionArgs.builder()\n            .connectionId(\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getConnection\n      Arguments:\n        connectionId: 4347e805-eb46-4699-9eb9-5c116e6a017d\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "ID of the connection resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the connection resource.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Slug of a facility to which the connection belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Slug of a metro to which the connection belongs.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode for connections in IBX facilities with the dedicated type - standard or tunnel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization where the connection is scoped to.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getConnectionPort:getConnectionPort"
                        },
                        "description": "List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the connection belongs.\n"
                    },
                    "redundancy": {
                        "type": "string",
                        "description": "Connection redundancy, reduntant or primary.\n"
                    },
                    "serviceTokenType": {
                        "type": "string",
                        "description": "Type of service token, a_side or z_side. One available in shared connection.\n"
                    },
                    "serviceTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getConnectionServiceToken:getConnectionServiceToken"
                        },
                        "description": "List of connection service tokens with attributes\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Port speed in bits per second.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Port status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String list of tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Deprecated) Fabric Token required to configure the connection in Equinix Fabric with the equinix_ecx_l2_connection resource or from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard). If your organization already has connection service tokens enabled, use `service_tokens` instead.\n",
                        "deprecationMessage": "If your organization already has connection service tokens enabled, use `service_tokens` instead"
                    },
                    "type": {
                        "type": "string",
                        "description": "Token type, `a_side` or `z_side`.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Attached VLANs. Only available in shared connection. One vlan for Primary/Single connection and two vlans for Redundant connection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "description",
                    "facility",
                    "metro",
                    "mode",
                    "name",
                    "organizationId",
                    "ports",
                    "projectId",
                    "redundancy",
                    "serviceTokenType",
                    "serviceTokens",
                    "speed",
                    "status",
                    "tags",
                    "token",
                    "type",
                    "vlans",
                    "id"
                ]
            }
        },
        "equinix:metal/getDevice:getDevice": {
            "description": "Provides an Equinix Metal device datasource.\n\n\u003e **Note:** All arguments including the `root_password` and `user_data` will be stored in\n the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDevice({\n    projectId: local.project_id,\n    hostname: \"mydevice\",\n});\nexport const id = test.then(test =\u003e test.id);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device(project_id=local[\"project_id\"],\n    hostname=\"mydevice\")\npulumi.export(\"id\", test.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDevice.Invoke(new()\n    {\n        ProjectId = local.Project_id,\n        Hostname = \"mydevice\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = test.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupDevice(ctx, \u0026metal.LookupDeviceArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tHostname:  pulumi.StringRef(\"mydevice\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", test.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()\n            .projectId(local.project_id())\n            .hostname(\"mydevice\")\n            .build());\n\n        ctx.export(\"id\", test.applyValue(getDeviceResult -\u003e getDeviceResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDevice\n      Arguments:\n        projectId: ${local.project_id}\n        hostname: mydevice\noutputs:\n  id: ${test.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDevice({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const ipv4 = test.then(test =\u003e test.accessPublicIpv4);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"ipv4\", test.access_public_ipv4)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDevice.Invoke(new()\n    {\n        DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ipv4\"] = test.Apply(getDeviceResult =\u003e getDeviceResult.AccessPublicIpv4),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupDevice(ctx, \u0026metal.LookupDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ipv4\", test.AccessPublicIpv4)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDevice(GetDeviceArgs.builder()\n            .deviceId(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\n            .build());\n\n        ctx.export(\"ipv4\", test.applyValue(getDeviceResult -\u003e getDeviceResult.accessPublicIpv4()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDevice\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  ipv4: ${test.accessPublicIpv4}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device ID.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The device name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project in which the devices exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "accessPrivateIpv4": {
                        "type": "string",
                        "description": "The ipv4 private IP assigned to the device.\n"
                    },
                    "accessPublicIpv4": {
                        "type": "string",
                        "description": "The ipv4 management IP assigned to the device.\n"
                    },
                    "accessPublicIpv6": {
                        "type": "string",
                        "description": "The ipv6 management IP assigned to the device.\n"
                    },
                    "alwaysPxe": {
                        "type": "boolean"
                    },
                    "billingCycle": {
                        "type": "string",
                        "description": "The billing cycle of the device (monthly or hourly).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string for the device.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string",
                        "description": "The facility where the device is deployed.\n"
                    },
                    "hardwareReservationId": {
                        "type": "string",
                        "description": "The id of hardware reservation which this device occupies.\n"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipxeScriptUrl": {
                        "type": "string"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro where the device is deployed\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "L2 network type of the device, one of `layer3`, `layer2-bonded`,\n`layer2-individual`, `hybrid`.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDeviceNetwork:getDeviceNetwork"
                        },
                        "description": "The device's private and public IP (v4 and v6) network details. See\nNetwork Attribute below for more details.\n"
                    },
                    "operatingSystem": {
                        "type": "string",
                        "description": "The operating system running on the device.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The hardware config of the device.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDevicePort:getDevicePort"
                        },
                        "description": "List of ports assigned to the device. See Ports Attribute below for\nmore details.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Root password to the server (if still available).\n",
                        "secret": true
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of SSH keys deployed in the device, can be both user or project SSH keys.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the device.\n"
                    },
                    "storage": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags attached to the device.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessPrivateIpv4",
                    "accessPublicIpv4",
                    "accessPublicIpv6",
                    "alwaysPxe",
                    "billingCycle",
                    "description",
                    "deviceId",
                    "facility",
                    "hardwareReservationId",
                    "hostname",
                    "ipxeScriptUrl",
                    "metro",
                    "networks",
                    "networkType",
                    "operatingSystem",
                    "plan",
                    "ports",
                    "projectId",
                    "rootPassword",
                    "sshKeyIds",
                    "state",
                    "storage",
                    "tags",
                    "id"
                ]
            }
        },
        "equinix:metal/getDeviceBgpNeighbors:getDeviceBgpNeighbors": {
            "description": "Use this datasource to retrieve list of BGP neighbors of a device in the Equinix Metal host.\n\nTo have any BGP neighbors listed, the device must be in BGP-enabled project\nand have a BGP session assigned.\n\nTo learn more about using BGP in Equinix Metal, see the\nequinix.metal.BgpSession resource documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getDeviceBgpNeighbors({\n    deviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n});\nexport const bgpNeighborsListing = test.then(test =\u003e test.bgpNeighbors);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_device_bgp_neighbors(device_id=\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\npulumi.export(\"bgpNeighborsListing\", test.bgp_neighbors)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetDeviceBgpNeighbors.Invoke(new()\n    {\n        DeviceId = \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"bgpNeighborsListing\"] = test.Apply(getDeviceBgpNeighborsResult =\u003e getDeviceBgpNeighborsResult.BgpNeighbors),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.GetDeviceBgpNeighbors(ctx, \u0026metal.GetDeviceBgpNeighborsArgs{\n\t\t\tDeviceId: \"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"bgpNeighborsListing\", test.BgpNeighbors)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetDeviceBgpNeighborsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getDeviceBgpNeighbors(GetDeviceBgpNeighborsArgs.builder()\n            .deviceId(\"4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\")\n            .build());\n\n        ctx.export(\"bgpNeighborsListing\", test.applyValue(getDeviceBgpNeighborsResult -\u003e getDeviceBgpNeighborsResult.bgpNeighbors()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getDeviceBgpNeighbors\n      Arguments:\n        deviceId: 4c641195-25e5-4c3c-b2b7-4cd7a42c7b40\noutputs:\n  bgpNeighborsListing: ${test.bgpNeighbors}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceBgpNeighbors.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of BGP-enabled device whose neighbors to list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceBgpNeighbors.\n",
                "properties": {
                    "bgpNeighbors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getDeviceBgpNeighborsBgpNeighbor:getDeviceBgpNeighborsBgpNeighbor"
                        },
                        "description": "array of BGP neighbor records with attributes:\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bgpNeighbors",
                    "deviceId",
                    "id"
                ]
            }
        },
        "equinix:metal/getFacility:getFacility": {
            "description": "Provides an Equinix Metal facility datasource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getFacilityCapacity:getFacilityCapacity"
                        },
                        "description": "One or more device plans for which the facility must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The facility code to search for facilities.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of feature strings that the facility must have. Some\npossible values are `baremetal`, `ibx`, `storage`, `global_ipv4`, `backend_transfer`, `layer_2`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFacility.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getFacilityCapacity:getFacilityCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features of the facility.\n"
                    },
                    "featuresRequireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "The metro code the facility is part of.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "features",
                    "metro",
                    "name",
                    "id"
                ]
            }
        },
        "equinix:metal/getGateway:getGateway": {
            "description": "Use this datasource to retrieve Metal Gateway resources in Equinix Metal.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\n// Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\nconst testVlan = new equinix.metal.Vlan(\"testVlan\", {\n    description: \"test VLAN in SV\",\n    metro: \"sv\",\n    projectId: local.project_id,\n});\nconst testGateway = equinix.metal.getGateway({\n    gatewayId: local.gateway_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\n# Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\ntest_vlan = equinix.metal.Vlan(\"testVlan\",\n    description=\"test VLAN in SV\",\n    metro=\"sv\",\n    project_id=local[\"project_id\"])\ntest_gateway = equinix.metal.get_gateway(gateway_id=local[\"gateway_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n    var testVlan = new Equinix.Metal.Vlan(\"testVlan\", new()\n    {\n        Description = \"test VLAN in SV\",\n        Metro = \"sv\",\n        ProjectId = local.Project_id,\n    });\n\n    var testGateway = Equinix.Metal.GetGateway.Invoke(new()\n    {\n        GatewayId = local.Gateway_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.NewVlan(ctx, \"testVlan\", \u0026metal.VlanArgs{\n\t\t\tDescription: pulumi.String(\"test VLAN in SV\"),\n\t\t\tMetro:       pulumi.String(\"sv\"),\n\t\t\tProjectId:   pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.LookupGateway(ctx, \u0026metal.LookupGatewayArgs{\n\t\t\tGatewayId: local.Gateway_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testVlan = new Vlan(\"testVlan\", VlanArgs.builder()        \n            .description(\"test VLAN in SV\")\n            .metro(\"sv\")\n            .projectId(local.project_id())\n            .build());\n\n        final var testGateway = MetalFunctions.getGateway(GetGatewayArgs.builder()\n            .gatewayId(local.gateway_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Metal Gateway for a VLAN with a private IPv4 block with 8 IP addresses\n  testVlan:\n    type: equinix:metal:Vlan\n    properties:\n      description: test VLAN in SV\n      metro: sv\n      projectId: ${local.project_id}\nvariables:\n  testGateway:\n    fn::invoke:\n      Function: equinix:metal:getGateway\n      Arguments:\n        gatewayId: ${local.gateway_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string",
                        "description": "UUID of the metal gateway resource to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGateway.\n",
                "properties": {
                    "gatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipReservationId": {
                        "type": "string",
                        "description": "UUID of IP reservation block bound to the gateway.\n"
                    },
                    "privateIpv4SubnetSize": {
                        "type": "integer",
                        "description": "Size of the private IPv4 subnet bound to this metal gateway. One of\n`8`, `16`, `32`, `64`, `128`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the gateway is scoped to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the gateway resource.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "UUID of the VLAN where the gateway is scoped to.\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VRF associated with the IP Reservation.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayId",
                    "ipReservationId",
                    "privateIpv4SubnetSize",
                    "projectId",
                    "state",
                    "vlanId",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:metal/getHardwareReservation:getHardwareReservation": {
            "description": "Use this data source to retrieve a [hardware reservation resource from Equinix Metal](https://metal.equinix.com/developers/docs/deploy/reserved/).\n\nYou can look up hardware reservation by its ID or by ID of device which occupies it.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getHardwareReservation({\n    id: \"4347e805-eb46-4699-9eb9-5c116e6a0172\",\n});\nconst exampleByDeviceId = equinix.metal.getHardwareReservation({\n    deviceId: \"ff85aa58-c106-4624-8f1c-7c64554047ea\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_hardware_reservation(id=\"4347e805-eb46-4699-9eb9-5c116e6a0172\")\nexample_by_device_id = equinix.metal.get_hardware_reservation(device_id=\"ff85aa58-c106-4624-8f1c-7c64554047ea\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetHardwareReservation.Invoke(new()\n    {\n        Id = \"4347e805-eb46-4699-9eb9-5c116e6a0172\",\n    });\n\n    var exampleByDeviceId = Equinix.Metal.GetHardwareReservation.Invoke(new()\n    {\n        DeviceId = \"ff85aa58-c106-4624-8f1c-7c64554047ea\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.GetHardwareReservation(ctx, \u0026metal.GetHardwareReservationArgs{\n\t\t\tId: pulumi.StringRef(\"4347e805-eb46-4699-9eb9-5c116e6a0172\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.GetHardwareReservation(ctx, \u0026metal.GetHardwareReservationArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"ff85aa58-c106-4624-8f1c-7c64554047ea\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetHardwareReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()\n            .id(\"4347e805-eb46-4699-9eb9-5c116e6a0172\")\n            .build());\n\n        final var exampleByDeviceId = MetalFunctions.getHardwareReservation(GetHardwareReservationArgs.builder()\n            .deviceId(\"ff85aa58-c106-4624-8f1c-7c64554047ea\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getHardwareReservation\n      Arguments:\n        id: 4347e805-eb46-4699-9eb9-5c116e6a0172\n  exampleByDeviceId:\n    fn::invoke:\n      Function: equinix:metal:getHardwareReservation\n      Arguments:\n        deviceId: ff85aa58-c106-4624-8f1c-7c64554047ea\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHardwareReservation.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "UUID of device occupying the reservation.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Plan type for the reservation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the hardware reservation to look up.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Plan type for the reservation.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of project this reservation is scoped to.\n"
                    },
                    "provisionable": {
                        "type": "boolean",
                        "description": "Flag indicating whether the reserved server is provisionable or not. Spare\ndevices can't be provisioned unless they are activated first.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Reservation short ID.\n"
                    },
                    "spare": {
                        "type": "boolean",
                        "description": "Flag indicating whether the Hardware Reservation is a spare. Spare Hardware\nReservations are used when a Hardware Reservations requires service from Metal Equinix.\n"
                    },
                    "switchUuid": {
                        "type": "string",
                        "description": "Switch short ID, can be used to determine if two devices are connected to the\nsame switch.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceId",
                    "facility",
                    "id",
                    "plan",
                    "projectId",
                    "provisionable",
                    "shortId",
                    "spare",
                    "switchUuid"
                ]
            }
        },
        "equinix:metal/getIpBlockRanges:getIpBlockRanges": {
            "description": "Use this datasource to get CIDR expressions for allocated IP blocks of all the types in a project, optionally filtered by facility or metro.\n\nThere are four types of IP blocks in Equinix: equinix_metal_global IPv4, public IPv4, private IPv4 and IPv6. Both global and public IPv4 are routable from the Internet. Public IPv4 blocks are allocated in a facility or metro, and addresses from it can only be assigned to devices in that location. Addresses from Global IPv4 block can be assigned to a device in any metro.\n\nThe datasource has 4 list attributes: `global_ipv4`, `public_ipv4`, `private_ipv4` and `ipv6`, each listing CIDR notation (`\u003cnetwork\u003e/\u003cmask\u003e`) of respective blocks from the project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst test = equinix.metal.getIpBlockRanges({\n    projectId: projectId,\n});\nexport const out = test;\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest = equinix.metal.get_ip_block_ranges(project_id=project_id)\npulumi.export(\"out\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n    var test = Equinix.Metal.GetIpBlockRanges.Invoke(new()\n    {\n        ProjectId = projectId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"out\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttest, err := metal.GetIpBlockRanges(ctx, \u0026metal.GetIpBlockRangesArgs{\n\t\t\tProjectId: projectId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"out\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetIpBlockRangesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        final var test = MetalFunctions.getIpBlockRanges(GetIpBlockRangesArgs.builder()\n            .projectId(projectId)\n            .build());\n\n        ctx.export(\"out\", test.applyValue(getIpBlockRangesResult -\u003e getIpBlockRangesResult));\n    }\n}\n```\n```yaml\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  test:\n    fn::invoke:\n      Function: equinix:metal:getIpBlockRanges\n      Arguments:\n        projectId: ${projectId}\noutputs:\n  out: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility code filtering the IP blocks. Global IPv4 blocks will be listed\nanyway. If you omit this and metro, all the block from the project will be listed.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro code filtering the IP blocks. Global IPv4 blocks will be listed\nanyway. If you omit this and facility, all the block from the project will be listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project from which to list the blocks.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpBlockRanges.\n",
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "globalIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Global IPv4 blocks in the project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for IPv6 blocks in the project.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "privateIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Private IPv4 blocks in the project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDR expressions for Public IPv4 blocks in the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "globalIpv4s",
                    "ipv6s",
                    "privateIpv4s",
                    "projectId",
                    "publicIpv4s",
                    "id"
                ]
            }
        },
        "equinix:metal/getMetro:getMetro": {
            "description": "Provides an Equinix Metal metro datasource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getMetroCapacity:getMetroCapacity"
                        },
                        "description": "One or more device plans for which the facility must have capacity.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The facility code to search for facilities.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetro.\n",
                "properties": {
                    "capacities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getMetroCapacity:getMetroCapacity"
                        }
                    },
                    "code": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country of the metro.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the metro.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the metro.\n"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "country",
                    "id",
                    "name"
                ]
            }
        },
        "equinix:metal/getOperatingSystem:getOperatingSystem": {
            "description": "Use this data source to get Equinix Metal Operating System image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getOperatingSystem({\n    distro: \"ubuntu\",\n    version: \"20.04\",\n    provisionableOn: \"c3.medium.x86\",\n});\nconst server = new equinix.metal.Device(\"server\", {\n    hostname: \"tf.ubuntu\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"ny5\"],\n    operatingSystem: example.then(example =\u003e example.id).apply((x) =\u003e @equinix/pulumi-equinix.metal.operatingsystem.OperatingSystem[x]),\n    billingCycle: \"hourly\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_operating_system(distro=\"ubuntu\",\n    version=\"20.04\",\n    provisionable_on=\"c3.medium.x86\")\nserver = equinix.metal.Device(\"server\",\n    hostname=\"tf.ubuntu\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"ny5\"],\n    operating_system=example.id.apply(lambda x: equinix.metal/operatingsystem.OperatingSystem(x)),\n    billing_cycle=\"hourly\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetOperatingSystem.Invoke(new()\n    {\n        Distro = \"ubuntu\",\n        Version = \"20.04\",\n        ProvisionableOn = \"c3.medium.x86\",\n    });\n\n    var server = new Equinix.Metal.Device(\"server\", new()\n    {\n        Hostname = \"tf.ubuntu\",\n        Plan = \"c3.medium.x86\",\n        Facilities = new[]\n        {\n            \"ny5\",\n        },\n        OperatingSystem = example.Apply(getOperatingSystemResult =\u003e getOperatingSystemResult.Id).Apply(System.Enum.Parse\u003cEquinix.Metal/operatingSystem.OperatingSystem\u003e),\n        BillingCycle = \"hourly\",\n        ProjectId = local.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := metal.GetOperatingSystem(ctx, \u0026metal.GetOperatingSystemArgs{\n\t\t\tDistro:          pulumi.StringRef(\"ubuntu\"),\n\t\t\tVersion:         pulumi.StringRef(\"20.04\"),\n\t\t\tProvisionableOn: pulumi.StringRef(\"c3.medium.x86\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.NewDevice(ctx, \"server\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"tf.ubuntu\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ny5\"),\n\t\t\t},\n\t\t\tOperatingSystem: example.Id.ApplyT(func(x *string) metal.OperatingSystem { return metal.OperatingSystem(*x) }).(metal.OperatingSystemOutput),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.Any(local.Project_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetOperatingSystemArgs;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getOperatingSystem(GetOperatingSystemArgs.builder()\n            .distro(\"ubuntu\")\n            .version(\"20.04\")\n            .provisionableOn(\"c3.medium.x86\")\n            .build());\n\n        var server = new Device(\"server\", DeviceArgs.builder()        \n            .hostname(\"tf.ubuntu\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"ny5\")\n            .operatingSystem(example.applyValue(getOperatingSystemResult -\u003e getOperatingSystemResult.id()))\n            .billingCycle(\"hourly\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: equinix:metal:Device\n    properties:\n      hostname: tf.ubuntu\n      plan: c3.medium.x86\n      facilities:\n        - ny5\n      operatingSystem: ${example.id}\n      billingCycle: hourly\n      projectId: ${local.project_id}\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getOperatingSystem\n      Arguments:\n        distro: ubuntu\n        version: '20.04'\n        provisionableOn: c3.medium.x86\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string",
                        "description": "Name of the OS distribution.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name or part of the name of the distribution. Case insensitive.\n"
                    },
                    "provisionableOn": {
                        "type": "string",
                        "description": "Plan name.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the distribution.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOperatingSystem.\n",
                "properties": {
                    "distro": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "provisionableOn": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Operating system slug (same as `id`).\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug",
                    "id"
                ]
            }
        },
        "equinix:metal/getOrganization:getOrganization": {
            "description": "Provides an Equinix Metal organization datasource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst test = equinix.metal.getOrganization({\n    organizationId: local.org_id,\n});\nexport const projectsInTheOrg = test.then(test =\u003e test.projectIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntest = equinix.metal.get_organization(organization_id=local[\"org_id\"])\npulumi.export(\"projectsInTheOrg\", test.project_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Equinix.Metal.GetOrganization.Invoke(new()\n    {\n        OrganizationId = local.Org_id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectsInTheOrg\"] = test.Apply(getOrganizationResult =\u003e getOrganizationResult.ProjectIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := metal.LookupOrganization(ctx, \u0026metal.LookupOrganizationArgs{\n\t\t\tOrganizationId: pulumi.StringRef(local.Org_id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectsInTheOrg\", test.ProjectIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = MetalFunctions.getOrganization(GetOrganizationArgs.builder()\n            .organizationId(local.org_id())\n            .build());\n\n        ctx.export(\"projectsInTheOrg\", test.applyValue(getOrganizationResult -\u003e getOrganizationResult.projectIds()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: equinix:metal:getOrganization\n      Arguments:\n        organizationId: ${local.org_id}\noutputs:\n  projectsInTheOrg: ${test.projectIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The organization name.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of the organization resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "address": {
                        "$ref": "#/types/equinix:metal/getOrganizationAddress:getOrganizationAddress",
                        "description": "Postal address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "Logo URL.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of project resources which belong to this organization.\n"
                    },
                    "twitter": {
                        "type": "string",
                        "description": "Twitter handle.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website link.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "description",
                    "logo",
                    "name",
                    "organizationId",
                    "projectIds",
                    "twitter",
                    "website",
                    "id"
                ]
            }
        },
        "equinix:metal/getPlans:getPlans": {
            "inputs": {
                "description": "A collection of arguments for invoking getPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansFilter:getPlansFilter"
                        },
                        "description": "One or more attribute/values pairs to filter off of\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansSort:getPlansSort"
                        },
                        "description": "One or more attribute/direction pairs on which to sort results. If multiple\nsorts are provided, they will be applied in order\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansFilter:getPlansFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "plans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansPlan:getPlansPlan"
                        },
                        "description": "The ID of the facility\n"
                    },
                    "sorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:metal/getPlansSort:getPlansSort"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "plans",
                    "id"
                ]
            }
        },
        "equinix:metal/getPort:getPort": {
            "description": "Use this data source to read ports of existing devices. You can read port by either its UUID,\nor by a device UUID and port name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a device and read it's eth0 port to the datasource.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst projectId = \"\u003cUUID_of_your_project\u003e\";\nconst testDevice = new equinix.metal.Device(\"testDevice\", {\n    hostname: \"tfacc-test-device-port\",\n    plan: \"c3.medium.x86\",\n    facilities: [\"sv15\"],\n    operatingSystem: \"ubuntu_20_04\",\n    billingCycle: \"hourly\",\n    projectId: projectId,\n});\nconst testPort = equinix.metal.getPortOutput({\n    deviceId: testDevice.id,\n    name: \"eth0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nproject_id = \"\u003cUUID_of_your_project\u003e\"\ntest_device = equinix.metal.Device(\"testDevice\",\n    hostname=\"tfacc-test-device-port\",\n    plan=\"c3.medium.x86\",\n    facilities=[\"sv15\"],\n    operating_system=\"ubuntu_20_04\",\n    billing_cycle=\"hourly\",\n    project_id=project_id)\ntest_port = equinix.metal.get_port_output(device_id=test_device.id,\n    name=\"eth0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n    var testDevice = new Equinix.Metal.Device(\"testDevice\", new()\n    {\n        Hostname = \"tfacc-test-device-port\",\n        Plan = \"c3.medium.x86\",\n        Facilities = new[]\n        {\n            \"sv15\",\n        },\n        OperatingSystem = \"ubuntu_20_04\",\n        BillingCycle = \"hourly\",\n        ProjectId = projectId,\n    });\n\n    var testPort = Equinix.Metal.GetPort.Invoke(new()\n    {\n        DeviceId = testDevice.Id,\n        Name = \"eth0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprojectId := \"\u003cUUID_of_your_project\u003e\"\n\t\ttestDevice, err := metal.NewDevice(ctx, \"testDevice\", \u0026metal.DeviceArgs{\n\t\t\tHostname: pulumi.String(\"tfacc-test-device-port\"),\n\t\t\tPlan:     pulumi.String(\"c3.medium.x86\"),\n\t\t\tFacilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sv15\"),\n\t\t\t},\n\t\t\tOperatingSystem: pulumi.String(\"ubuntu_20_04\"),\n\t\t\tBillingCycle:    pulumi.String(\"hourly\"),\n\t\t\tProjectId:       pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = metal.LookupPortOutput(ctx, metal.GetPortOutputArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tName:     pulumi.String(\"eth0\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Device;\nimport com.pulumi.equinix.metal.DeviceArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetPortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var projectId = \"\u003cUUID_of_your_project\u003e\";\n\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()        \n            .hostname(\"tfacc-test-device-port\")\n            .plan(\"c3.medium.x86\")\n            .facilities(\"sv15\")\n            .operatingSystem(\"ubuntu_20_04\")\n            .billingCycle(\"hourly\")\n            .projectId(projectId)\n            .build());\n\n        final var testPort = MetalFunctions.getPort(GetPortArgs.builder()\n            .deviceId(testDevice.id())\n            .name(\"eth0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDevice:\n    type: equinix:metal:Device\n    properties:\n      hostname: tfacc-test-device-port\n      plan: c3.medium.x86\n      facilities:\n        - sv15\n      operatingSystem: ubuntu_20_04\n      billingCycle: hourly\n      projectId: ${projectId}\nvariables:\n  projectId: \u003cUUID_of_your_project\u003e\n  testPort:\n    fn::invoke:\n      Function: equinix:metal:getPort\n      Arguments:\n        deviceId: ${testDevice.id}\n        name: eth0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPort.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "Device UUID where to lookup the port.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the port to look up, i.e. `bond0`, `eth1`.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "ID of the port to read, conflicts with `device_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPort.\n",
                "properties": {
                    "bondId": {
                        "type": "string",
                        "description": "UUID of the bond port.\n"
                    },
                    "bondName": {
                        "type": "string",
                        "description": "Name of the bond port.\n"
                    },
                    "bonded": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port is bonded.\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "disbondSupported": {
                        "type": "boolean",
                        "description": "Flag indicating whether the port can be removed from a bond.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "layer2": {
                        "type": "boolean"
                    },
                    "mac": {
                        "type": "string",
                        "description": "MAC address of the port.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nativeVlanId": {
                        "type": "string",
                        "description": "UUID of native VLAN of the port.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "One of `layer2-bonded`, `layer2-individual`, `layer3`, `hybrid`, `hybrid-bonded`.\n"
                    },
                    "portId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type is either `NetworkBondPort` for bond ports or `NetworkPort` for bondable ethernet ports.\n"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of attached VLANs.\n"
                    },
                    "vxlanIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "VXLAN ids of attached VLANs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bondId",
                    "bondName",
                    "bonded",
                    "disbondSupported",
                    "layer2",
                    "mac",
                    "name",
                    "nativeVlanId",
                    "networkType",
                    "type",
                    "vlanIds",
                    "vxlanIds",
                    "id"
                ]
            }
        },
        "equinix:metal/getPrecreatedIpBlock:getPrecreatedIpBlock": {
            "description": "Use this data source to get CIDR expression for precreated (management) IPv6 and IPv4 blocks in Equinix Metal.\nYou can then use the cidrsubnet TF builtin function to derive subnets.\n\n\u003e For backward compatibility, this data source will also return reserved (elastic) IP blocks.\n\n\u003e Precreated (management) IP blocks for a metro will not be available until first device is created in that metro.\n\n\u003e Public IPv4 blocks auto-assigned (management) to a device cannot be retrieved. If you need that information, consider using the equinix.metal.Device data source instead.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrecreatedIpBlock.\n",
                "properties": {
                    "addressFamily": {
                        "type": "integer",
                        "description": "4 or 6, depending on which block you are looking for.\n"
                    },
                    "facility": {
                        "type": "string",
                        "description": "Facility of the searched block. (for non-global blocks).\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Whether to look for global block. Default is false for backward compatibility.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro of the searched block (for non-global blocks).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project where the searched block should be.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether to look for public or private block.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addressFamily",
                    "projectId",
                    "public"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrecreatedIpBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string",
                        "description": "CIDR notation of the looked up block.\n"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "gateway",
                    "manageable",
                    "management",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:metal/getProject:getProject": {
            "description": "Use this datasource to retrieve attributes of the Project API resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst tfProject1 = equinix.metal.getProject({\n    name: \"Terraform Fun\",\n});\nexport const usersOfTerraformFun = tfProject1.then(tfProject1 =\u003e tfProject1.userIds);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ntf_project1 = equinix.metal.get_project(name=\"Terraform Fun\")\npulumi.export(\"usersOfTerraformFun\", tf_project1.user_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfProject1 = Equinix.Metal.GetProject.Invoke(new()\n    {\n        Name = \"Terraform Fun\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"usersOfTerraformFun\"] = tfProject1.Apply(getProjectResult =\u003e getProjectResult.UserIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttfProject1, err := metal.LookupProject(ctx, \u0026metal.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Terraform Fun\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"usersOfTerraformFun\", tfProject1.UserIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tfProject1 = MetalFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Terraform Fun\")\n            .build());\n\n        ctx.export(\"usersOfTerraformFun\", tfProject1.applyValue(getProjectResult -\u003e getProjectResult.userIds()));\n    }\n}\n```\n```yaml\nvariables:\n  tfProject1:\n    fn::invoke:\n      Function: equinix:metal:getProject\n      Arguments:\n        name: Terraform Fun\noutputs:\n  usersOfTerraformFun: ${tfProject1.userIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name which is used to look up the project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The UUID by which to look up the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "backendTransfer": {
                        "type": "boolean",
                        "description": "Whether Backend Transfer is enabled for this project.\n"
                    },
                    "bgpConfig": {
                        "$ref": "#/types/equinix:metal/getProjectBgpConfig:getProjectBgpConfig",
                        "description": "Optional BGP settings. Refer to [Equinix Metal guide for BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/).\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the project was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The UUID of this project's parent organization.\n"
                    },
                    "paymentMethodId": {
                        "type": "string",
                        "description": "The UUID of payment method for this project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the project was updated.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of UUIDs of user accounts which belong to this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backendTransfer",
                    "bgpConfig",
                    "created",
                    "name",
                    "organizationId",
                    "paymentMethodId",
                    "projectId",
                    "updated",
                    "userIds",
                    "id"
                ]
            }
        },
        "equinix:metal/getProjectSshKey:getProjectSshKey": {
            "description": "Use this datasource to retrieve attributes of a Project SSH Key API resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst myKey = equinix.metal.getProjectSshKey({\n    search: \"username@hostname\",\n    projectId: local.project_id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nmy_key = equinix.metal.get_project_ssh_key(search=\"username@hostname\",\n    project_id=local[\"project_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Equinix.Metal.GetProjectSshKey.Invoke(new()\n    {\n        Search = \"username@hostname\",\n        ProjectId = local.Project_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupProjectSshKey(ctx, \u0026metal.LookupProjectSshKeyArgs{\n\t\t\tSearch:    pulumi.StringRef(\"username@hostname\"),\n\t\t\tProjectId: local.Project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetProjectSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = MetalFunctions.getProjectSshKey(GetProjectSshKeyArgs.builder()\n            .search(\"username@hostname\")\n            .projectId(local.project_id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: equinix:metal:getProjectSshKey\n      Arguments:\n        search: username@hostname\n        projectId: ${local.project_id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the SSH Key to search for in the Equinix Metal project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Equinix Metal project id of the Equinix Metal SSH Key.\n"
                    },
                    "search": {
                        "type": "string",
                        "description": "The name, fingerprint, or public_key of the SSH Key to search for\nin the Equinix Metal project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectSshKey.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp for when the SSH key was created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the SSH key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of parent project (same as project_id).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of parent project.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The text of the public key.\n"
                    },
                    "search": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The timestamp for the last time the SSH key was updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "fingerprint",
                    "id",
                    "name",
                    "ownerId",
                    "projectId",
                    "publicKey",
                    "updated"
                ]
            }
        },
        "equinix:metal/getReservedIpBlock:getReservedIpBlock": {
            "description": "Use this data source to find IP address blocks in Equinix Metal. You can use IP address or a block\nID for lookup.\n\n\u003e For backward compatibility, this data source can be also used for precreated (management) IP blocks.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getReservedIpBlock.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the IP address block to look up.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Block containing this IP address will be returned.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project where the searched block should be.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReservedIpBlock.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "addressFamily": {
                        "type": "integer"
                    },
                    "cidr": {
                        "type": "integer"
                    },
                    "cidrNotation": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "manageable": {
                        "type": "boolean"
                    },
                    "management": {
                        "type": "boolean"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "netmask": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "One of `global_ipv4`, `public_ipv4`, `private_ipv4`, `public_ipv6`,or `vrf`\n"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "addressFamily",
                    "cidr",
                    "cidrNotation",
                    "facility",
                    "gateway",
                    "global",
                    "id",
                    "manageable",
                    "management",
                    "metro",
                    "netmask",
                    "network",
                    "projectId",
                    "public",
                    "quantity",
                    "type",
                    "vrfId"
                ]
            }
        },
        "equinix:metal/getSpotMarketPrice:getSpotMarketPrice": {
            "description": "Use this data source to get Equinix Metal Spot Market Price for a plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nLookup by facility:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getSpotMarketPrice({\n    facility: \"ny5\",\n    plan: \"c3.small.x86\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_spot_market_price(facility=\"ny5\",\n    plan=\"c3.small.x86\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetSpotMarketPrice.Invoke(new()\n    {\n        Facility = \"ny5\",\n        Plan = \"c3.small.x86\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.GetSpotMarketPrice(ctx, \u0026metal.GetSpotMarketPriceArgs{\n\t\t\tFacility: pulumi.StringRef(\"ny5\"),\n\t\t\tPlan:     \"c3.small.x86\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()\n            .facility(\"ny5\")\n            .plan(\"c3.small.x86\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getSpotMarketPrice\n      Arguments:\n        facility: ny5\n        plan: c3.small.x86\n```\n\nLookup by metro:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst example = equinix.metal.getSpotMarketPrice({\n    metro: \"sv\",\n    plan: \"c3.small.x86\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample = equinix.metal.get_spot_market_price(metro=\"sv\",\n    plan=\"c3.small.x86\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Equinix.Metal.GetSpotMarketPrice.Invoke(new()\n    {\n        Metro = \"sv\",\n        Plan = \"c3.small.x86\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.GetSpotMarketPrice(ctx, \u0026metal.GetSpotMarketPriceArgs{\n\t\t\tMetro: pulumi.StringRef(\"sv\"),\n\t\t\tPlan:  \"c3.small.x86\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetSpotMarketPriceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetalFunctions.getSpotMarketPrice(GetSpotMarketPriceArgs.builder()\n            .metro(\"sv\")\n            .plan(\"c3.small.x86\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: equinix:metal:getSpotMarketPrice\n      Arguments:\n        metro: sv\n        plan: c3.small.x86\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Name of the facility.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Name of the metro.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name of the plan.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpotMarketPrice.\n",
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "description": "Current spot market price for given plan in given facility.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plan",
                    "price",
                    "id"
                ]
            }
        },
        "equinix:metal/getSpotMarketRequest:getSpotMarketRequest": {
            "inputs": {
                "description": "A collection of arguments for invoking getSpotMarketRequest.\n",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "The id of the Spot Market Request.\n"
                    }
                },
                "type": "object",
                "required": [
                    "requestId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpotMarketRequest.\n",
                "properties": {
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IDs of devices spawned by the referenced Spot Market Request.\n"
                    },
                    "devicesMax": {
                        "type": "integer",
                        "description": "Maximum number devices to be created.\n"
                    },
                    "devicesMin": {
                        "type": "integer",
                        "description": "Miniumum number devices to be created.\n"
                    },
                    "endAt": {
                        "type": "string",
                        "description": "Date and time When the spot market request will be ended.\n"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Facility IDs where devices should be created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxBidPrice": {
                        "type": "number",
                        "description": "Maximum price user is willing to pay per hour per device.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where devices should be created.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The device plan slug.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID.\n"
                    },
                    "requestId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deviceIds",
                    "devicesMax",
                    "devicesMin",
                    "endAt",
                    "facilities",
                    "maxBidPrice",
                    "metro",
                    "plan",
                    "projectId",
                    "requestId",
                    "id"
                ]
            }
        },
        "equinix:metal/getVirtualCircuit:getVirtualCircuit": {
            "description": "Use this data source to retrieve a virtual circuit resource from\n[Equinix Fabric - software-defined interconnections](https://metal.equinix.com/developers/docs/networking/fabric/)\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleConnection = equinix.metal.getConnection({\n    connectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n});\nconst exampleVc = exampleConnection.then(exampleConnection =\u003e equinix.metal.getVirtualCircuit({\n    virtualCircuitId: exampleConnection.ports?.[1]?.virtualCircuitIds?.[0],\n}));\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_connection = equinix.metal.get_connection(connection_id=\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\nexample_vc = equinix.metal.get_virtual_circuit(virtual_circuit_id=example_connection.ports[1].virtual_circuit_ids[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleConnection = Equinix.Metal.GetConnection.Invoke(new()\n    {\n        ConnectionId = \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n    });\n\n    var exampleVc = Equinix.Metal.GetVirtualCircuit.Invoke(new()\n    {\n        VirtualCircuitId = exampleConnection.Apply(getConnectionResult =\u003e getConnectionResult.Ports[1]?.VirtualCircuitIds[0]),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleConnection, err := metal.LookupConnection(ctx, \u0026metal.LookupConnectionArgs{\n\t\t\tConnectionId: \"4347e805-eb46-4699-9eb9-5c116e6a017d\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = metal.LookupVirtualCircuit(ctx, \u0026metal.LookupVirtualCircuitArgs{\n\t\t\tVirtualCircuitId: exampleConnection.Ports[1].VirtualCircuitIds[0],\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetConnectionArgs;\nimport com.pulumi.equinix.metal.inputs.GetVirtualCircuitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleConnection = MetalFunctions.getConnection(GetConnectionArgs.builder()\n            .connectionId(\"4347e805-eb46-4699-9eb9-5c116e6a017d\")\n            .build());\n\n        final var exampleVc = MetalFunctions.getVirtualCircuit(GetVirtualCircuitArgs.builder()\n            .virtualCircuitId(exampleConnection.applyValue(getConnectionResult -\u003e getConnectionResult.ports()[1].virtualCircuitIds()[0]))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleConnection:\n    fn::invoke:\n      Function: equinix:metal:getConnection\n      Arguments:\n        connectionId: 4347e805-eb46-4699-9eb9-5c116e6a017d\n  exampleVc:\n    fn::invoke:\n      Function: equinix:metal:getVirtualCircuit\n      Arguments:\n        virtualCircuitId: ${exampleConnection.ports[1].virtualCircuitIds[0]}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualCircuit.\n",
                "properties": {
                    "virtualCircuitId": {
                        "type": "string",
                        "description": "ID of the virtual circuit resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "virtualCircuitId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualCircuit.\n",
                "properties": {
                    "connectionId": {
                        "type": "string",
                        "description": "UUID of Connection where the VC is scoped to.\n"
                    },
                    "customerIp": {
                        "type": "string",
                        "description": "The Customer IP address which the CSR switch will peer with. Will default to the other usable IP in the subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Virtual Circuit resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5": {
                        "type": "string",
                        "description": "The password that can be set for the VRF BGP peer\n",
                        "secret": true
                    },
                    "metalIp": {
                        "type": "string",
                        "description": "The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit. Will default to the first usable IP in the subnet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the virtual circuit resource.\n"
                    },
                    "nniVlan": {
                        "type": "integer"
                    },
                    "nniVnid": {
                        "type": "integer"
                    },
                    "peerAsn": {
                        "type": "integer",
                        "description": "The BGP ASN of the peer. The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.\n"
                    },
                    "portId": {
                        "type": "string",
                        "description": "UUID of the Connection Port where the VC is scoped to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to which the VC belongs.\n"
                    },
                    "speed": {
                        "type": "string",
                        "description": "Speed of the Virtual Circuit resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtal circuit.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "A subnet from one of the IP\nblocks associated with the VRF that we will help create an IP reservation for. Can only be either a /30 or /31.\n* For a /31 block, it will only have two IP addresses, which will be used for\nthe metal_ip and customer_ip.\n* For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable. We will default to the first usable IP address for the metal_ip.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for the Virtual Circuit resource.\n"
                    },
                    "virtualCircuitId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vnid": {
                        "type": "integer",
                        "description": ", `nni_vlan`, `nni_nvid` - VLAN parameters, see the\n[documentation for Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/).\n"
                    },
                    "vrfId": {
                        "type": "string",
                        "description": "UUID of the VLAN to associate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "customerIp",
                    "description",
                    "md5",
                    "metalIp",
                    "name",
                    "nniVlan",
                    "nniVnid",
                    "peerAsn",
                    "portId",
                    "projectId",
                    "speed",
                    "status",
                    "subnet",
                    "tags",
                    "virtualCircuitId",
                    "vlanId",
                    "vnid",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:metal/getVlan:getVlan": {
            "description": "Provides an Equinix Metal Virtual Network datasource. VLANs data sources can be\nsearched by VLAN UUID, or project UUID and vxlan number.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a vlan by ID:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@equinix/pulumi-equinix\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst foovlan = new equinix.metal.Vlan(\"foovlan\", {\n    projectId: local.project_id,\n    metro: \"sv\",\n    vxlan: 5,\n});\nconst dsvlan = equinix.metal.getVlanOutput({\n    vlanId: foovlan.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nfoovlan = equinix.metal.Vlan(\"foovlan\",\n    project_id=local[\"project_id\"],\n    metro=\"sv\",\n    vxlan=5)\ndsvlan = equinix.metal.get_vlan_output(vlan_id=foovlan.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foovlan = new Equinix.Metal.Vlan(\"foovlan\", new()\n    {\n        ProjectId = local.Project_id,\n        Metro = \"sv\",\n        Vxlan = 5,\n    });\n\n    var dsvlan = Equinix.Metal.GetVlan.Invoke(new()\n    {\n        VlanId = foovlan.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoovlan, err := metal.NewVlan(ctx, \"foovlan\", \u0026metal.VlanArgs{\n\t\t\tProjectId: pulumi.Any(local.Project_id),\n\t\t\tMetro:     pulumi.String(\"sv\"),\n\t\t\tVxlan:     pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = metal.LookupVlanOutput(ctx, metal.GetVlanOutputArgs{\n\t\t\tVlanId: foovlan.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.Vlan;\nimport com.pulumi.equinix.metal.VlanArgs;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foovlan = new Vlan(\"foovlan\", VlanArgs.builder()        \n            .projectId(local.project_id())\n            .metro(\"sv\")\n            .vxlan(5)\n            .build());\n\n        final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()\n            .vlanId(foovlan.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foovlan:\n    type: equinix:metal:Vlan\n    properties:\n      projectId: ${local.project_id}\n      metro: sv\n      vxlan: 5\nvariables:\n  dsvlan:\n    fn::invoke:\n      Function: equinix:metal:getVlan\n      Arguments:\n        vlanId: ${foovlan.id}\n```\n\nFetch a vlan by project ID, vxlan and metro\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dsvlan = equinix.metal.getVlan({\n    projectId: local.project_id,\n    vxlan: 5,\n    metro: \"sv\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndsvlan = equinix.metal.get_vlan(project_id=local[\"project_id\"],\n    vxlan=5,\n    metro=\"sv\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dsvlan = Equinix.Metal.GetVlan.Invoke(new()\n    {\n        ProjectId = local.Project_id,\n        Vxlan = 5,\n        Metro = \"sv\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupVlan(ctx, \u0026metal.LookupVlanArgs{\n\t\t\tProjectId: pulumi.StringRef(local.Project_id),\n\t\t\tVxlan:     pulumi.IntRef(5),\n\t\t\tMetro:     pulumi.StringRef(\"sv\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dsvlan = MetalFunctions.getVlan(GetVlanArgs.builder()\n            .projectId(local.project_id())\n            .vxlan(5)\n            .metro(\"sv\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dsvlan:\n    fn::invoke:\n      Function: equinix:metal:getVlan\n      Arguments:\n        projectId: ${local.project_id}\n        vxlan: 5\n        metro: sv\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVlan.\n",
                "properties": {
                    "facility": {
                        "type": "string",
                        "description": "Facility where the VLAN is deployed.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro where the VLAN is deployed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of parent project of the VLAN. Use together with the vxlan number and metro or facility.\n"
                    },
                    "vlanId": {
                        "type": "string",
                        "description": "Metal UUID of the VLAN resource to look up.\n"
                    },
                    "vxlan": {
                        "type": "integer",
                        "description": "vxlan number of the VLAN to look up. Use together with the project_id and metro or facility.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlan.\n",
                "properties": {
                    "assignedDevicesIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device ID to which this VLAN is assigned.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description text of the VLAN resource.\n"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metro": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vxlan": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "assignedDevicesIds",
                    "description",
                    "facility",
                    "metro",
                    "projectId",
                    "vlanId",
                    "vxlan",
                    "id"
                ]
            }
        },
        "equinix:metal/getVrf:getVrf": {
            "description": "Use this data source to retrieve a VRF resource.\n\n\u003e VRF features are not generally available. The interfaces related to VRF resources may change ahead of general availability.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst exampleVrf = equinix.metal.getVrf({\n    vrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nexample_vrf = equinix.metal.get_vrf(vrf_id=\"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleVrf = Equinix.Metal.GetVrf.Invoke(new()\n    {\n        VrfId = \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/metal\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := metal.LookupVrf(ctx, \u0026metal.LookupVrfArgs{\n\t\t\tVrfId: \"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.metal.MetalFunctions;\nimport com.pulumi.equinix.metal.inputs.GetVrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleVrf = MetalFunctions.getVrf(GetVrfArgs.builder()\n            .vrfId(\"48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleVrf:\n    fn::invoke:\n      Function: equinix:metal:getVrf\n      Arguments:\n        vrfId: 48630899-9ff2-4ce6-a93f-50ff4ebcdf6e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVrf.\n",
                "properties": {
                    "vrfId": {
                        "type": "string",
                        "description": "ID of the VRF resource\n"
                    }
                },
                "type": "object",
                "required": [
                    "vrfId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVrf.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the VRF.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All IPv4 and IPv6 Ranges that will be available to BGP Peers. IPv4 addresses must be /8 or smaller with a minimum size of /29. IPv6 must be /56 or smaller with a minimum size of /64. Ranges must not overlap other ranges within the VRF.\n"
                    },
                    "localAsn": {
                        "type": "integer",
                        "description": "The 4-byte ASN set on the VRF.\n"
                    },
                    "metro": {
                        "type": "string",
                        "description": "Metro ID or Code where the VRF will be deployed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User-supplied name of the VRF, unique to the project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID where the VRF will be deployed.\n"
                    },
                    "vrfId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipRanges",
                    "localAsn",
                    "metro",
                    "name",
                    "projectId",
                    "vrfId",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getAccount:getAccount": {
            "description": "Use this data source to get number and identifier of Equinix Network Edge\nbilling account in a given metro location.\n\nBilling account reference is required to create Network Edge virtual device\nin corresponding metro location.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst dc = equinix.networkedge.getAccount({\n    metroCode: \"DC\",\n    status: \"Active\",\n});\nexport const number = dc.then(dc =\u003e dc.number);\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ndc = equinix.networkedge.get_account(metro_code=\"DC\",\n    status=\"Active\")\npulumi.export(\"number\", dc.number)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dc = Equinix.NetworkEdge.GetAccount.Invoke(new()\n    {\n        MetroCode = \"DC\",\n        Status = \"Active\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"number\"] = dc.Apply(getAccountResult =\u003e getAccountResult.Number),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdc, err := networkedge.GetAccount(ctx, \u0026networkedge.GetAccountArgs{\n\t\t\tMetroCode: \"DC\",\n\t\t\tStatus:    pulumi.StringRef(\"Active\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"number\", dc.Number)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dc = NetworkedgeFunctions.getAccount(GetAccountArgs.builder()\n            .metroCode(\"DC\")\n            .status(\"Active\")\n            .build());\n\n        ctx.export(\"number\", dc.applyValue(getAccountResult -\u003e getAccountResult.number()));\n    }\n}\n```\n```yaml\nvariables:\n  dc:\n    fn::invoke:\n      Function: equinix:networkedge:getAccount\n      Arguments:\n        metroCode: DC\n        status: Active\noutputs:\n  number: ${dc.number}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "metroCode": {
                        "type": "string",
                        "description": "Account location metro code.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Account name for filtering.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Account status for filtering. Possible values are: `Active`, `Processing`,\n`Submitted`, `Staged`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string",
                        "description": "Account unique number.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "ucmId": {
                        "type": "string",
                        "description": "Account unique identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "metroCode",
                    "name",
                    "number",
                    "status",
                    "ucmId",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDevice:getDevice": {
            "description": "Use this data source to get Equinix Network Edge device details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst byUuid = equinix.networkedge.getDevice({\n    uuid: \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n});\nconst byName = equinix.networkedge.getDevice({\n    name: \"Arcus-Gateway-A1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\nby_uuid = equinix.networkedge.get_device(uuid=\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\")\nby_name = equinix.networkedge.get_device(name=\"Arcus-Gateway-A1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byUuid = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Uuid = \"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\",\n    });\n\n    var byName = Equinix.NetworkEdge.GetDevice.Invoke(new()\n    {\n        Name = \"Arcus-Gateway-A1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tUuid: pulumi.StringRef(\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = networkedge.LookupDevice(ctx, \u0026networkedge.LookupDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"Arcus-Gateway-A1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byUuid = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .uuid(\"f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\")\n            .build());\n\n        final var byName = NetworkedgeFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"Arcus-Gateway-A1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byUuid:\n    fn::invoke:\n      Function: equinix:networkedge:getDevice\n      Arguments:\n        uuid: f0b5c553-cdeb-4bc3-95b8-23db9ccfd5ee\n  byName:\n    fn::invoke:\n      Function: equinix:networkedge:getDevice\n      Arguments:\n        name: Arcus-Gateway-A1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of an existing Equinix Network Edge device\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of an existing Equinix Network Edge device\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Device states to be considered valid when searching for a device by name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "accountNumber": {
                        "type": "string"
                    },
                    "aclTemplateId": {
                        "type": "string",
                        "description": "Unique identifier of applied ACL template\n"
                    },
                    "additionalBandwidth": {
                        "type": "integer"
                    },
                    "asn": {
                        "type": "integer",
                        "description": "Autonomous system number\n"
                    },
                    "byol": {
                        "type": "boolean"
                    },
                    "clusterDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceClusterDetail:getDeviceClusterDetail"
                        }
                    },
                    "coreCount": {
                        "type": "integer"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "ibx": {
                        "type": "string",
                        "description": "Device location Equinix Business Exchange name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceCount": {
                        "type": "integer"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceInterface:getDeviceInterface"
                        },
                        "description": "List of device interfaces\n* `interface.#.id` - interface identifier\n* `interface.#.name` - interface name\n* `interface.#.status` -  interface status (AVAILABLE, RESERVED, ASSIGNED)\n* `interface.#.operational_status` - interface operational status (up or down)\n* `interface.#.mac_address` - interface MAC address\n* `interface.#.ip_address` - interface IP address\n* `interface.#.assigned_type` - interface management type (Equinix Managed or empty)\n* `interface.#.type` - interface type\n"
                    },
                    "licenseFile": {
                        "type": "string"
                    },
                    "licenseFileId": {
                        "type": "string",
                        "description": "Unique identifier of applied license file\n"
                    },
                    "licenseStatus": {
                        "type": "string",
                        "description": "Device license registration status\n* APPLYING_LICENSE\n* REGISTERED\n* APPLIED\n* WAITING_FOR_CLUSTER_SETUP\n* REGISTRATION_FAILED\n"
                    },
                    "licenseToken": {
                        "type": "string"
                    },
                    "metroCode": {
                        "type": "string"
                    },
                    "mgmtAclTemplateUuid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderReference": {
                        "type": "string"
                    },
                    "packageCode": {
                        "type": "string"
                    },
                    "purchaseOrderNumber": {
                        "type": "string"
                    },
                    "redundancyType": {
                        "type": "string",
                        "description": "Device redundancy type applicable for HA devices, either\nprimary or secondary\n"
                    },
                    "redundantId": {
                        "type": "string",
                        "description": "Unique identifier for a redundant device applicable for HA devices\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Device location region\n"
                    },
                    "secondaryDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceSecondaryDevice:getDeviceSecondaryDevice"
                        }
                    },
                    "selfManaged": {
                        "type": "boolean"
                    },
                    "sshIpAddress": {
                        "type": "string",
                        "description": "IP address of SSH enabled interface on the device\n"
                    },
                    "sshIpFqdn": {
                        "type": "string",
                        "description": "FQDN of SSH enabled interface on the device\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/equinix:networkedge/getDeviceSshKey:getDeviceSshKey"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "Device provisioning status\n* INITIALIZING\n* PROVISIONING\n* PROVISIONED  (**NOTE: By default data source will only return devices in this state.  To include other states see `valid_state_list`**)\n* WAITING_FOR_PRIMARY\n* WAITING_FOR_SECONDARY\n* WAITING_FOR_REPLICA_CLUSTER_NODES\n* CLUSTER_SETUP_IN_PROGRESS\n* FAILED\n* DEPROVISIONING\n* DEPROVISIONED\n"
                    },
                    "termLength": {
                        "type": "integer"
                    },
                    "throughput": {
                        "type": "integer"
                    },
                    "throughputUnit": {
                        "type": "string"
                    },
                    "typeCode": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Device unique identifier\n"
                    },
                    "validStatusList": {
                        "type": "string",
                        "description": "Comma separated list of device states (from see `status` for full list) to be considered valid. Default is 'PROVISIONED'.  Case insensitive.\n"
                    },
                    "vendorConfiguration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "type": "string"
                    },
                    "wanInterfaceId": {
                        "type": "string"
                    },
                    "zoneCode": {
                        "type": "string",
                        "description": "Device location zone code\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountNumber",
                    "aclTemplateId",
                    "additionalBandwidth",
                    "asn",
                    "byol",
                    "clusterDetails",
                    "coreCount",
                    "hostname",
                    "ibx",
                    "interfaces",
                    "interfaceCount",
                    "licenseFile",
                    "licenseFileId",
                    "licenseStatus",
                    "licenseToken",
                    "metroCode",
                    "mgmtAclTemplateUuid",
                    "name",
                    "notifications",
                    "orderReference",
                    "packageCode",
                    "purchaseOrderNumber",
                    "redundancyType",
                    "redundantId",
                    "region",
                    "secondaryDevices",
                    "selfManaged",
                    "sshIpAddress",
                    "sshIpFqdn",
                    "sshKeys",
                    "status",
                    "termLength",
                    "throughput",
                    "throughputUnit",
                    "typeCode",
                    "uuid",
                    "vendorConfiguration",
                    "version",
                    "wanInterfaceId",
                    "zoneCode",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDevicePlatform:getDevicePlatform": {
            "description": "Use this data source to get Equinix Network Edge device platform configuration details\nfor a given device type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst csrLarge = equinix.networkedge.getDevicePlatform({\n    deviceType: \"CSR1000V\",\n    flavor: \"large\",\n    packages: [\"IPBASE\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_large = equinix.networkedge.get_device_platform(device_type=\"CSR1000V\",\n    flavor=\"large\",\n    packages=[\"IPBASE\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csrLarge = Equinix.NetworkEdge.GetDevicePlatform.Invoke(new()\n    {\n        DeviceType = \"CSR1000V\",\n        Flavor = \"large\",\n        Packages = new[]\n        {\n            \"IPBASE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDevicePlatform(ctx, \u0026networkedge.GetDevicePlatformArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tFlavor:     pulumi.StringRef(\"large\"),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDevicePlatformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLarge = NetworkedgeFunctions.getDevicePlatform(GetDevicePlatformArgs.builder()\n            .deviceType(\"CSR1000V\")\n            .flavor(\"large\")\n            .packages(\"IPBASE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLarge:\n    fn::invoke:\n      Function: equinix:networkedge:getDevicePlatform\n      Arguments:\n        deviceType: CSR1000V\n        flavor: large\n        packages:\n          - IPBASE\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer",
                        "description": "Number of CPU cores used to limit platform search results.\n"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "Device type code\n"
                    },
                    "flavor": {
                        "type": "string",
                        "description": "Device platform flavor that determines number of CPU cores and memory.\nSupported values are: `small`, `medium`, `large`, `xlarge`.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device licensing options to limit platform search result.\nSupported values are: `BYOL` (for Bring Your Own License), `Sub` (for license subscription).\n"
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device management types to limit platform search results.\nSupported values are: `EQUINIX-CONFIGURED`, `SELF-CONFIGURED`.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of software package codes to limit platform search results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDevicePlatform.\n",
                "properties": {
                    "coreCount": {
                        "type": "integer"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "flavor": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "licenseOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "managementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of memory provided by device platform.\n"
                    },
                    "memoryUnit": {
                        "type": "string",
                        "description": "Unit of memory provider by device platform.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "coreCount",
                    "deviceType",
                    "flavor",
                    "licenseOptions",
                    "managementTypes",
                    "memory",
                    "memoryUnit",
                    "packages",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDeviceSoftware:getDeviceSoftware": {
            "description": "Use this data source to get Equinix Network Edge device software details for a given\ndevice type. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst csrLatest1609 = equinix.networkedge.getDeviceSoftware({\n    deviceType: \"CSR1000V\",\n    mostRecent: true,\n    packages: [\"IPBASE\"],\n    versionRegex: \"^16.09.+\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncsr_latest1609 = equinix.networkedge.get_device_software(device_type=\"CSR1000V\",\n    most_recent=True,\n    packages=[\"IPBASE\"],\n    version_regex=\"^16.09.+\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var csrLatest1609 = Equinix.NetworkEdge.GetDeviceSoftware.Invoke(new()\n    {\n        DeviceType = \"CSR1000V\",\n        MostRecent = true,\n        Packages = new[]\n        {\n            \"IPBASE\",\n        },\n        VersionRegex = \"^16.09.+\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDeviceSoftware(ctx, \u0026networkedge.GetDeviceSoftwareArgs{\n\t\t\tDeviceType: \"CSR1000V\",\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t\tPackages: []string{\n\t\t\t\t\"IPBASE\",\n\t\t\t},\n\t\t\tVersionRegex: pulumi.StringRef(\"^16.09.+\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceSoftwareArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var csrLatest1609 = NetworkedgeFunctions.getDeviceSoftware(GetDeviceSoftwareArgs.builder()\n            .deviceType(\"CSR1000V\")\n            .mostRecent(true)\n            .packages(\"IPBASE\")\n            .versionRegex(\"^16.09.+\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  csrLatest1609:\n    fn::invoke:\n      Function: equinix:networkedge:getDeviceSoftware\n      Arguments:\n        deviceType: CSR1000V\n        mostRecent: true\n        packages:\n          - IPBASE\n        versionRegex: ^16.09.+\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceSoftware.\n",
                "properties": {
                    "deviceType": {
                        "type": "string",
                        "description": "Code of a device type.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate that most recent version should be used *(in\ncase when more than one result is returned)*.\n"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Limits returned versions to those that are supported by given software\npackage codes.\n"
                    },
                    "stable": {
                        "type": "boolean",
                        "description": "Boolean value to limit query results to stable versions only.\n"
                    },
                    "versionRegex": {
                        "type": "string",
                        "description": "A regex string to apply on returned versions and filter search\nresults.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deviceType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceSoftware.\n",
                "properties": {
                    "date": {
                        "type": "string",
                        "description": "Version release date.\n"
                    },
                    "deviceType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageName": {
                        "type": "string",
                        "description": "Software image name.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "releaseNotesLink": {
                        "type": "string",
                        "description": "Link to version release notes.\n"
                    },
                    "stable": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string",
                        "description": "Version status.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version number.\n"
                    },
                    "versionRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "date",
                    "deviceType",
                    "imageName",
                    "packages",
                    "releaseNotesLink",
                    "stable",
                    "status",
                    "version",
                    "id"
                ]
            }
        },
        "equinix:networkedge/getDeviceType:getDeviceType": {
            "description": "Use this data source to get Equinix Network Edge device type details. For further details, check supported\n[Network Edge Vendors and Devices](https://docs.equinix.com/en-us/Content/Interconnection/NE/user-guide/NE-vendors-devices.htm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as equinix from \"@pulumi/equinix\";\n\nconst ciscoRouter = equinix.networkedge.getDeviceType({\n    category: \"Router\",\n    metroCodes: [\n        \"DC\",\n        \"SV\",\n    ],\n    vendor: \"Cisco\",\n});\n```\n```python\nimport pulumi\nimport pulumi_equinix as equinix\n\ncisco_router = equinix.networkedge.get_device_type(category=\"Router\",\n    metro_codes=[\n        \"DC\",\n        \"SV\",\n    ],\n    vendor=\"Cisco\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Equinix = Pulumi.Equinix;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ciscoRouter = Equinix.NetworkEdge.GetDeviceType.Invoke(new()\n    {\n        Category = \"Router\",\n        MetroCodes = new[]\n        {\n            \"DC\",\n            \"SV\",\n        },\n        Vendor = \"Cisco\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/equinix/pulumi-equinix/sdk/go/equinix/networkedge\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := networkedge.GetDeviceType(ctx, \u0026networkedge.GetDeviceTypeArgs{\n\t\t\tCategory: pulumi.StringRef(\"Router\"),\n\t\t\tMetroCodes: []string{\n\t\t\t\t\"DC\",\n\t\t\t\t\"SV\",\n\t\t\t},\n\t\t\tVendor: pulumi.StringRef(\"Cisco\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.equinix.networkedge.NetworkedgeFunctions;\nimport com.pulumi.equinix.networkedge.inputs.GetDeviceTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ciscoRouter = NetworkedgeFunctions.getDeviceType(GetDeviceTypeArgs.builder()\n            .category(\"Router\")\n            .metroCodes(            \n                \"DC\",\n                \"SV\")\n            .vendor(\"Cisco\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ciscoRouter:\n    fn::invoke:\n      Function: equinix:networkedge:getDeviceType\n      Arguments:\n        category: Router\n        metroCodes:\n          - DC\n          - SV\n        vendor: Cisco\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Device type category. One of: `Router`, `Firewall`, `SDWAN`.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of metro codes where device type has to be available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Device type name.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Device type vendor i.e. `Cisco`, `Juniper Networks`, `VERSA Networks`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceType.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string",
                        "description": "Device type short code, unique identifier of a network device type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Device type textual description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "metroCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "code",
                    "description",
                    "metroCodes",
                    "name",
                    "vendor",
                    "id"
                ]
            }
        }
    }
}