From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tim Hogarty <thogarty@equinix.com>
Date: Tue, 28 Nov 2023 11:26:03 -0800
Subject: [PATCH 37/51] Add initial network error response support for Fabric


diff --git a/equinix/resource_fabric_connection.go b/equinix/resource_fabric_connection.go
index 269df58..a6587e2 100644
--- a/equinix/resource_fabric_connection.go
+++ b/equinix/resource_fabric_connection.go
@@ -114,9 +114,9 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 		Project:        &project,
 	}
 
-	conn, _, err := client.ConnectionsApi.CreateConnection(ctx, createRequest)
+	conn, httpResponse, err := client.ConnectionsApi.CreateConnection(ctx, createRequest)
 	if err != nil {
-		return diag.FromErr(err)
+		return networkErrorOutput(err, httpResponse)
 	}
 	d.SetId(conn.Uuid)
 
@@ -134,9 +134,9 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			},
 		}
 
-		_, _, patchErr := client.ConnectionsApi.UpdateConnectionByUuid(ctx, patchChangeOperation, conn.Uuid)
+		_, patchHttpResponse, patchErr := client.ConnectionsApi.UpdateConnectionByUuid(ctx, patchChangeOperation, conn.Uuid)
 		if patchErr != nil {
-			return diag.FromErr(err)
+			return networkErrorOutput(err, patchHttpResponse)
 		}
 
 		if _, statusChangeErr := waitForConnectionProviderStatusChange(d.Id(), meta, ctx); err != nil {
@@ -166,13 +166,9 @@ func additionalInfoContainsAWSSecrets(info []interface{}) ([]interface{}, bool)
 func resourceFabricConnectionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	conn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, d.Id(), nil)
+	conn, httpResponse, err := client.ConnectionsApi.GetConnectionByUuid(ctx, d.Id(), nil)
 	if err != nil {
-		log.Printf("[WARN] Connection %s not found , error %s", d.Id(), err)
-		if !strings.Contains(err.Error(), "500") {
-			d.SetId("")
-		}
-		return diag.FromErr(err)
+		return networkErrorOutput(err, httpResponse)
 	}
 	d.SetId(conn.Uuid)
 	return setFabricMap(d, conn)
@@ -228,9 +224,9 @@ func resourceFabricConnectionUpdate(ctx context.Context, d *schema.ResourceData,
 	updatedConn := dbConn
 
 	for _, update := range updateRequests {
-		_, _, err := client.ConnectionsApi.UpdateConnectionByUuid(ctx, update, d.Id())
+		_, httpResponse, err := client.ConnectionsApi.UpdateConnectionByUuid(ctx, update, d.Id())
 		if err != nil {
-			diags = append(diags, diag.Diagnostic{Severity: 2, Summary: fmt.Sprintf("connectionn property update request error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update)})
+			diags = append(diags, networkErrorOutput(fmt.Errorf("connectionn property update request error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update), httpResponse)...)
 			continue
 		}
 
@@ -246,9 +242,6 @@ func resourceFabricConnectionUpdate(ctx context.Context, d *schema.ResourceData,
 		conn, err := waitFunction(d.Id(), meta, ctx)
 
 		if err != nil {
-			if !strings.Contains(err.Error(), "500") {
-				d.SetId("")
-			}
 			diags = append(diags, diag.Diagnostic{Severity: 2, Summary: fmt.Sprintf("connection property update completion timeout error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update)})
 		} else {
 			updatedConn = conn
@@ -384,7 +377,7 @@ func resourceFabricConnectionDelete(ctx context.Context, d *schema.ResourceData,
 	diags := diag.Diagnostics{}
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	_, _, err := client.ConnectionsApi.DeleteConnectionByUuid(ctx, d.Id())
+	_, httpResponse, err := client.ConnectionsApi.DeleteConnectionByUuid(ctx, d.Id())
 	if err != nil {
 		errors, ok := err.(v4.GenericSwaggerError).Model().([]v4.ModelError)
 		if ok {
@@ -393,7 +386,7 @@ func resourceFabricConnectionDelete(ctx context.Context, d *schema.ResourceData,
 				return diags
 			}
 		}
-		return diag.FromErr(fmt.Errorf("error response for the connection delete: %v", err))
+		return networkErrorOutput(fmt.Errorf("error response for the connection delete: %v", err), httpResponse)
 	}
 
 	err = waitUntilConnectionDeprovisioned(d.Id(), meta, ctx)
diff --git a/internal/errors/errors.go b/internal/errors/errors.go
index a50c7d5..136951b 100644
--- a/internal/errors/errors.go
+++ b/internal/errors/errors.go
@@ -1,11 +1,9 @@
 package errors
 
 import (
-	"fmt"
+	"github.com/packethost/packngo"
 	"net/http"
 	"strings"
-
-	"github.com/packethost/packngo"
 )
 
 // FriendlyError improves error messages when the API error is blank or in an
