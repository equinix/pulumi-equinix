From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: srushti-patl <srpatel@equinix.com>
Date: Fri, 1 Dec 2023 16:27:58 -0800
Subject: [PATCH 32/51] fix: fixing schemas for Servicetoken and
 accesspoint.interface.


diff --git a/equinix/fabric_connection_read_schema.go b/equinix/fabric_connection_read_schema.go
index eb97614..8f478e0 100644
--- a/equinix/fabric_connection_read_schema.go
+++ b/equinix/fabric_connection_read_schema.go
@@ -9,6 +9,7 @@ func readServiceTokenSch() map[string]*schema.Schema {
 		"type": {
 			Type:        schema.TypeString,
 			Computed:    true,
+			Optional:    true,
 			Description: "Token type - VC_TOKEN",
 		},
 		"href": {
@@ -332,15 +333,18 @@ func readAccessPointInterface() map[string]*schema.Schema {
 		"uuid": {
 			Type:        schema.TypeString,
 			Computed:    true,
+			Optional:    true,
 			Description: "Equinix-assigned interface identifier",
 		},
 		"id": {
-			Type:        schema.TypeString,
+			Type:        schema.TypeInt,
 			Computed:    true,
+			Optional:    true,
 			Description: "Access Point Interface id",
 		},
 		"type": {
 			Type:        schema.TypeString,
+			Optional:    true,
 			Computed:    true,
 			Description: "Interface type- CSP",
 		},
@@ -481,6 +485,7 @@ func readFabricConnectionSideSch() map[string]*schema.Schema {
 		"service_token": {
 			Type:        schema.TypeSet,
 			Computed:    true,
+			Optional:    true,
 			Description: "For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets",
 			Elem: &schema.Resource{
 				Schema: readServiceTokenSch(),
diff --git a/equinix/fabric_connection_schema.go b/equinix/fabric_connection_schema.go
index 4b841d3..0d26d1e 100644
--- a/equinix/fabric_connection_schema.go
+++ b/equinix/fabric_connection_schema.go
@@ -247,6 +247,7 @@ func createAccessPointInterface() map[string]*schema.Schema {
 		"id": {
 			Type:        schema.TypeInt,
 			Computed:    true,
+			Optional:    true,
 			Description: "id",
 		},
 		"type": {
diff --git a/equinix/fabric_mapping_helper.go b/equinix/fabric_mapping_helper.go
index 5a03142..d66948b 100644
--- a/equinix/fabric_mapping_helper.go
+++ b/equinix/fabric_mapping_helper.go
@@ -8,16 +8,24 @@ import (
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
 )
 
-func serviceTokenToFabric(serviceTokenRequest []interface{}) v4.ServiceToken {
+func serviceTokenToFabric(serviceTokenRequest []interface{}) (v4.ServiceToken, error) {
 	mappedST := v4.ServiceToken{}
 	for _, str := range serviceTokenRequest {
 		stMap := str.(map[string]interface{})
 		stType := stMap["type"].(string)
 		uuid := stMap["uuid"].(string)
-		stTypeObj := v4.ServiceTokenType(stType)
-		mappedST = v4.ServiceToken{Type_: &stTypeObj, Uuid: uuid}
+		if stType != "" {
+			if stType != "VC_TOKEN" {
+				return v4.ServiceToken{}, fmt.Errorf("invalid service token type in config. Must be: VC_TOKEN; Received: %s", stType)
+			}
+			stTypeObj := v4.ServiceTokenType(stType)
+			mappedST = v4.ServiceToken{Uuid: uuid, Type_: &stTypeObj}
+		} else {
+			mappedST = v4.ServiceToken{Uuid: uuid}
+		}
+
 	}
-	return mappedST
+	return mappedST, nil
 }
 
 func additionalInfoToFabric(additionalInfoRequest []interface{}) []v4.ConnectionSideAdditionalInfo {
@@ -241,6 +249,7 @@ func simplifiedServiceProfileToFabric(profileList []interface{}) v4.SimplifiedSe
 		spte := v4.ServiceProfileTypeEnum(ptype)
 		uuid := plMap["uuid"].(string)
 		ssp = v4.SimplifiedServiceProfile{Uuid: uuid, Type_: &spte}
+
 	}
 	return ssp
 }
@@ -715,7 +724,7 @@ func interfaceToTerra(mInterface *v4.ModelInterface) *schema.Set {
 	mappedMInterfaces := make([]interface{}, len(mInterfaces))
 	for _, mInterface := range mInterfaces {
 		mappedMInterface := make(map[string]interface{})
-		mappedMInterface["id"] = mInterface.Id
+		mappedMInterface["id"] = int(mInterface.Id)
 		mappedMInterface["type"] = mInterface.Type_
 		mappedMInterface["uuid"] = mInterface.Uuid
 		mappedMInterfaces = append(mappedMInterfaces, mappedMInterface)
diff --git a/equinix/resource_fabric_connection.go b/equinix/resource_fabric_connection.go
index d9e1063..7746aec 100644
--- a/equinix/resource_fabric_connection.go
+++ b/equinix/resource_fabric_connection.go
@@ -52,7 +52,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 	projectReq := d.Get("project").(*schema.Set).List()
 	project := projectToFabric(projectReq)
 	additionalInfo := d.Get("additional_info").([]interface{})
-	additionalinfo := additionalInfoToFabric(additionalInfo)
+	additionalinfoGoToTerraState := additionalInfoToFabric(additionalInfo)
 	connectionASide := v4.ConnectionSide{}
 	for _, as := range aside {
 		asideMap := as.(map[string]interface{})
@@ -65,7 +65,10 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			connectionASide = v4.ConnectionSide{AccessPoint: &ap}
 		}
 		if len(serviceTokenRequest) != 0 {
-			mappedServiceToken := serviceTokenToFabric(serviceTokenRequest)
+			mappedServiceToken, err := serviceTokenToFabric(serviceTokenRequest)
+			if err != nil {
+				return diag.FromErr(err)
+			}
 			connectionASide = v4.ConnectionSide{ServiceToken: &mappedServiceToken}
 		}
 		if len(additionalInfoRequest) != 0 {
@@ -86,7 +89,10 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			connectionZSide = v4.ConnectionSide{AccessPoint: &ap}
 		}
 		if len(serviceTokenRequest) != 0 {
-			mappedServiceToken := serviceTokenToFabric(serviceTokenRequest)
+			mappedServiceToken, err := serviceTokenToFabric(serviceTokenRequest)
+			if err != nil {
+				return diag.FromErr(err)
+			}
 			connectionZSide = v4.ConnectionSide{ServiceToken: &mappedServiceToken}
 		}
 		if len(additionalInfoRequest) != 0 {
@@ -101,7 +107,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 		Order:          &order,
 		Notifications:  notifications,
 		Bandwidth:      int32(d.Get("bandwidth").(int)),
-		AdditionalInfo: additionalinfo,
+		AdditionalInfo: additionalinfoGoToTerraState,
 		Redundancy:     &red,
 		ASide:          &connectionASide,
 		ZSide:          &connectionZSide,
