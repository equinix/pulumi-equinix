From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tim Hogarty <thogarty@equinix.com>
Date: Fri, 8 Dec 2023 10:00:45 -0800
Subject: [PATCH 39/51] Update Fabric network error handling


diff --git a/equinix/resource_fabric_cloud_router.go b/equinix/resource_fabric_cloud_router.go
index 6e0a99b..2a08434 100644
--- a/equinix/resource_fabric_cloud_router.go
+++ b/equinix/resource_fabric_cloud_router.go
@@ -7,6 +7,7 @@ import (
 	"strings"
 	"time"
 
+	equinix_errors "github.com/equinix/terraform-provider-equinix/internal/errors"
 	equinix_schema "github.com/equinix/terraform-provider-equinix/internal/schema"
 
 	"github.com/equinix/terraform-provider-equinix/internal/config"
@@ -72,7 +73,7 @@ func resourceCloudRouterCreate(ctx context.Context, d *schema.ResourceData, meta
 
 	fcr, _, err := client.CloudRoutersApi.CreateCloudRouter(ctx, createRequest)
 	if err != nil {
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(fcr.Uuid)
 
@@ -92,7 +93,7 @@ func resourceCloudRouterRead(ctx context.Context, d *schema.ResourceData, meta i
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(CloudRouter.Uuid)
 	return setCloudRouterMap(d, CloudRouter)
@@ -139,9 +140,9 @@ func resourceCloudRouterUpdate(ctx context.Context, d *schema.ResourceData, meta
 		return diag.FromErr(err)
 	}
 	updates := []v4.CloudRouterChangeOperation{update}
-	_, res, err := client.CloudRoutersApi.UpdateCloudRouterByUuid(ctx, updates, d.Id())
+	_, _, err = client.CloudRoutersApi.UpdateCloudRouterByUuid(ctx, updates, d.Id())
 	if err != nil {
-		return diag.FromErr(fmt.Errorf("error response for the Fabric Cloud Router update, response %v, error %v", res, err))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	updateFg := v4.CloudRouter{}
 	updateFg, err = waitForCloudRouterUpdateCompletion(d.Id(), meta, ctx)
@@ -150,7 +151,7 @@ func resourceCloudRouterUpdate(ctx context.Context, d *schema.ResourceData, meta
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(fmt.Errorf("errored while waiting for successful Fabric Cloud Router update, response %v, error %v", res, err))
+		return diag.FromErr(fmt.Errorf("errored while waiting for successful Fabric Cloud Router update, error %v", err))
 	}
 
 	d.SetId(updateFg.Uuid)
@@ -165,7 +166,7 @@ func waitForCloudRouterUpdateCompletion(uuid string, meta interface{}, ctx conte
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.CloudRoutersApi.GetCloudRouterByUuid(ctx, uuid)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
@@ -196,7 +197,7 @@ func waitUntilCloudRouterIsProvisioned(uuid string, meta interface{}, ctx contex
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.CloudRoutersApi.GetCloudRouterByUuid(ctx, uuid)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
@@ -218,7 +219,7 @@ func resourceCloudRouterDelete(ctx context.Context, d *schema.ResourceData, meta
 	diags := diag.Diagnostics{}
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	resp, err := client.CloudRoutersApi.DeleteCloudRouterByUuid(ctx, d.Id())
+	_, err := client.CloudRoutersApi.DeleteCloudRouterByUuid(ctx, d.Id())
 	if err != nil {
 		errors, ok := err.(v4.GenericSwaggerError).Model().([]v4.ModelError)
 		if ok {
@@ -227,7 +228,7 @@ func resourceCloudRouterDelete(ctx context.Context, d *schema.ResourceData, meta
 				return diags
 			}
 		}
-		return diag.FromErr(fmt.Errorf("error response for the Fabric Cloud Router delete. Error %v and response %v", err, resp))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	err = waitUntilCloudRouterDeprovisioned(d.Id(), meta, ctx)
@@ -250,7 +251,7 @@ func waitUntilCloudRouterDeprovisioned(uuid string, meta interface{}, ctx contex
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.CloudRoutersApi.GetCloudRouterByUuid(ctx, uuid)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
diff --git a/equinix/resource_fabric_connection.go b/equinix/resource_fabric_connection.go
index 8db7fe7..d48f931 100644
--- a/equinix/resource_fabric_connection.go
+++ b/equinix/resource_fabric_connection.go
@@ -7,6 +7,7 @@ import (
 	"strings"
 	"time"
 
+	equinix_errors "github.com/equinix/terraform-provider-equinix/internal/errors"
 	equinix_schema "github.com/equinix/terraform-provider-equinix/internal/schema"
 
 	"github.com/equinix/terraform-provider-equinix/internal/config"
@@ -114,9 +115,9 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 		Project:        &project,
 	}
 
-	conn, httpResponse, err := client.ConnectionsApi.CreateConnection(ctx, createRequest)
+	conn, _, err := client.ConnectionsApi.CreateConnection(ctx, createRequest)
 	if err != nil {
-		return networkErrorOutput(err, httpResponse)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(conn.Uuid)
 
@@ -134,12 +135,12 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			},
 		}
 
-		_, patchHttpResponse, patchErr := client.ConnectionsApi.UpdateConnectionByUuid(ctx, patchChangeOperation, conn.Uuid)
+		_, _, patchErr := client.ConnectionsApi.UpdateConnectionByUuid(ctx, patchChangeOperation, conn.Uuid)
 		if patchErr != nil {
-			return networkErrorOutput(err, patchHttpResponse)
+			return diag.FromErr(equinix_errors.FormatFabricError(patchErr))
 		}
 
-		if _, statusChangeErr := waitForConnectionProviderStatusChange(d.Id(), meta, ctx); err != nil {
+		if _, statusChangeErr := waitForConnectionProviderStatusChange(d.Id(), meta, ctx); statusChangeErr != nil {
 			return diag.Errorf("error waiting for AWS Approval for connection %s: %v", d.Id(), statusChangeErr)
 		}
 	}
@@ -166,9 +167,9 @@ func additionalInfoContainsAWSSecrets(info []interface{}) ([]interface{}, bool)
 func resourceFabricConnectionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	conn, httpResponse, err := client.ConnectionsApi.GetConnectionByUuid(ctx, d.Id(), nil)
+	conn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, d.Id(), nil)
 	if err != nil {
-		return networkErrorOutput(err, httpResponse)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(conn.Uuid)
 	return setFabricMap(d, conn)
@@ -224,9 +225,9 @@ func resourceFabricConnectionUpdate(ctx context.Context, d *schema.ResourceData,
 	updatedConn := dbConn
 
 	for _, update := range updateRequests {
-		_, httpResponse, err := client.ConnectionsApi.UpdateConnectionByUuid(ctx, update, d.Id())
+		_, _, err := client.ConnectionsApi.UpdateConnectionByUuid(ctx, update, d.Id())
 		if err != nil {
-			diags = append(diags, networkErrorOutput(fmt.Errorf("connection property update request error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update), httpResponse)...)
+			diags = append(diags, diag.Diagnostic{Severity: 0, Summary: fmt.Sprintf("connection property update request error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", equinix_errors.FormatFabricError(err), update)})
 			continue
 		}
 
@@ -242,7 +243,7 @@ func resourceFabricConnectionUpdate(ctx context.Context, d *schema.ResourceData,
 		conn, err := waitFunction(d.Id(), meta, ctx)
 
 		if err != nil {
-			diags = append(diags, diag.Diagnostic{Severity: 2, Summary: fmt.Sprintf("connection property update completion timeout error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update)})
+			diags = append(diags, diag.Diagnostic{Severity: 0, Summary: fmt.Sprintf("connection property update completion timeout error: %v [update payload: %v] (other updates will be successful if the payload is not shown)", err, update)})
 		} else {
 			updatedConn = conn
 		}
@@ -260,7 +261,7 @@ func waitForConnectionUpdateCompletion(uuid string, meta interface{}, ctx contex
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			updatableState := ""
 			if dbConn.Change.Status == "COMPLETED" {
@@ -297,7 +298,7 @@ func waitUntilConnectionIsCreated(uuid string, meta interface{}, ctx context.Con
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
@@ -325,7 +326,7 @@ func waitForConnectionProviderStatusChange(uuid string, meta interface{}, ctx co
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.Operation.ProviderStatus), nil
 		},
@@ -355,7 +356,7 @@ func verifyConnectionCreated(uuid string, meta interface{}, ctx context.Context)
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
@@ -377,7 +378,7 @@ func resourceFabricConnectionDelete(ctx context.Context, d *schema.ResourceData,
 	diags := diag.Diagnostics{}
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	_, httpResponse, err := client.ConnectionsApi.DeleteConnectionByUuid(ctx, d.Id())
+	_, _, err := client.ConnectionsApi.DeleteConnectionByUuid(ctx, d.Id())
 	if err != nil {
 		errors, ok := err.(v4.GenericSwaggerError).Model().([]v4.ModelError)
 		if ok {
@@ -386,7 +387,7 @@ func resourceFabricConnectionDelete(ctx context.Context, d *schema.ResourceData,
 				return diags
 			}
 		}
-		return networkErrorOutput(fmt.Errorf("error response for the connection delete: %v", err), httpResponse)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	err = waitUntilConnectionDeprovisioned(d.Id(), meta, ctx)
@@ -409,7 +410,7 @@ func waitUntilConnectionDeprovisioned(uuid string, meta interface{}, ctx context
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.ConnectionsApi.GetConnectionByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			return dbConn, string(*dbConn.State), nil
 		},
diff --git a/equinix/resource_fabric_port.go b/equinix/resource_fabric_port.go
index 8d62288..858ff39 100644
--- a/equinix/resource_fabric_port.go
+++ b/equinix/resource_fabric_port.go
@@ -8,6 +8,7 @@ import (
 	"runtime/debug"
 	"strings"
 
+	equinix_errors "github.com/equinix/terraform-provider-equinix/internal/errors"
 	equinix_schema "github.com/equinix/terraform-provider-equinix/internal/schema"
 
 	"github.com/equinix/terraform-provider-equinix/internal/config"
@@ -27,7 +28,7 @@ func resourceFabricPortRead(ctx context.Context, d *schema.ResourceData, meta in
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(port.Uuid)
 	return setFabricPortMap(d, port)
@@ -97,7 +98,7 @@ func resourceFabricPortGetByPortName(ctx context.Context, d *schema.ResourceData
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	if len(ports.Data) != 1 {
 		error := fmt.Errorf("incorrect # of records are found for the port name parameter criteria - %d , please change the criteria", len(ports.Data))
diff --git a/equinix/resource_fabric_routing_protocol.go b/equinix/resource_fabric_routing_protocol.go
index 639e6d0..0c1dca9 100644
--- a/equinix/resource_fabric_routing_protocol.go
+++ b/equinix/resource_fabric_routing_protocol.go
@@ -8,6 +8,7 @@ import (
 	"strings"
 	"time"
 
+	equinix_errors "github.com/equinix/terraform-provider-equinix/internal/errors"
 	equinix_schema "github.com/equinix/terraform-provider-equinix/internal/schema"
 
 	"github.com/equinix/terraform-provider-equinix/internal/config"
@@ -60,7 +61,7 @@ func resourceFabricRoutingProtocolRead(ctx context.Context, d *schema.ResourceDa
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	switch fabricRoutingProtocol.Type_ {
 	case "BGP":
@@ -138,7 +139,7 @@ func resourceFabricRoutingProtocolCreate(ctx context.Context, d *schema.Resource
 	}
 	fabricRoutingProtocol, _, err := client.RoutingProtocolsApi.CreateConnectionRoutingProtocol(ctx, createRequest, d.Get("connection_uuid").(string))
 	if err != nil {
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	switch fabricRoutingProtocol.Type_ {
@@ -159,12 +160,6 @@ func resourceFabricRoutingProtocolUpdate(ctx context.Context, d *schema.Resource
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
 
-	/* todo: support patch bgp in the future - switch between PUT and PATCH
-	1. get getRoutingProtocolPatchUpdateRequest()
-	2. call PatchConnectionRoutingProtocolByUuid() with id and connection_uuid
-	3. waitForRoutingProtocolUpdateCompletion() with change_uuid, id, and connection_uuid
-	*/
-
 	schemaBgpIpv4 := d.Get("bgp_ipv4").(*schema.Set).List()
 	bgpIpv4 := routingProtocolBgpIpv4ToFabric(schemaBgpIpv4)
 	schemaBgpIpv6 := d.Get("bgp_ipv6").(*schema.Set).List()
@@ -224,9 +219,9 @@ func resourceFabricRoutingProtocolUpdate(ctx context.Context, d *schema.Resource
 		}
 	}
 
-	updatedRpResp, res, err := client.RoutingProtocolsApi.ReplaceConnectionRoutingProtocolByUuid(ctx, updateRequest, d.Id(), d.Get("connection_uuid").(string))
+	updatedRpResp, _, err := client.RoutingProtocolsApi.ReplaceConnectionRoutingProtocolByUuid(ctx, updateRequest, d.Id(), d.Get("connection_uuid").(string))
 	if err != nil {
-		return diag.FromErr(fmt.Errorf("error response for the routing protocol replace update, response %v, error %v", res, err))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	var changeUuid string
@@ -243,7 +238,7 @@ func resourceFabricRoutingProtocolUpdate(ctx context.Context, d *schema.Resource
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(fmt.Errorf("errored while waiting for successful connection replace update, response %v, error %v", res, err))
+		return diag.FromErr(fmt.Errorf("timeout updating routing protocol: %v", err))
 	}
 	updatedProvisionedRpResp, err := waitUntilRoutingProtocolIsProvisioned(d.Id(), d.Get("connection_uuid").(string), meta, ctx)
 	if err != nil {
@@ -257,7 +252,7 @@ func resourceFabricRoutingProtocolDelete(ctx context.Context, d *schema.Resource
 	diags := diag.Diagnostics{}
 	client := meta.(*config.Config).FabricClient
 	ctx = context.WithValue(ctx, v4.ContextAccessToken, meta.(*config.Config).FabricAuthToken)
-	_, resp, err := client.RoutingProtocolsApi.DeleteConnectionRoutingProtocolByUuid(ctx, d.Id(), d.Get("connection_uuid").(string))
+	_, _, err := client.RoutingProtocolsApi.DeleteConnectionRoutingProtocolByUuid(ctx, d.Id(), d.Get("connection_uuid").(string))
 	if err != nil {
 		errors, ok := err.(v4.GenericSwaggerError).Model().([]v4.ModelError)
 		if ok {
@@ -266,7 +261,7 @@ func resourceFabricRoutingProtocolDelete(ctx context.Context, d *schema.Resource
 				return diags
 			}
 		}
-		return diag.FromErr(fmt.Errorf("error response for the routing protocol delete. Error %v and response %v", err, resp))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	err = waitUntilRoutingProtocolIsDeprovisioned(d.Id(), d.Get("connection_uuid").(string), meta, ctx)
@@ -331,7 +326,7 @@ func waitUntilRoutingProtocolIsProvisioned(uuid string, connUuid string, meta in
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.RoutingProtocolsApi.GetConnectionRoutingProtocolByUuid(ctx, uuid, connUuid)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			var state string
 			if dbConn.Type_ == "BGP" {
@@ -389,7 +384,7 @@ func waitForRoutingProtocolUpdateCompletion(rpChangeUuid string, uuid string, co
 			client := meta.(*config.Config).FabricClient
 			dbConn, _, err := client.RoutingProtocolsApi.GetConnectionRoutingProtocolsChangeByUuid(ctx, connUuid, uuid, rpChangeUuid)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			updatableState := ""
 			if dbConn.Status == "COMPLETED" {
diff --git a/equinix/resource_fabric_service_profile.go b/equinix/resource_fabric_service_profile.go
index 0883bbc..0b3c08d 100644
--- a/equinix/resource_fabric_service_profile.go
+++ b/equinix/resource_fabric_service_profile.go
@@ -9,6 +9,7 @@ import (
 	"strings"
 	"time"
 
+	equinix_errors "github.com/equinix/terraform-provider-equinix/internal/errors"
 	equinix_schema "github.com/equinix/terraform-provider-equinix/internal/schema"
 
 	"github.com/antihax/optional"
@@ -46,11 +47,9 @@ func resourceFabricServiceProfileRead(ctx context.Context, d *schema.ResourceDat
 	serviceProfile, _, err := client.ServiceProfilesApi.GetServiceProfileByUuid(ctx, d.Id(), nil)
 	if err != nil {
 		if !strings.Contains(err.Error(), "500") {
-			error := v4.ModelError{}
 			d.SetId("")
-			log.Printf("Error Status Message: %s", error.ErrorMessage)
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(serviceProfile.Uuid)
 	return setFabricServiceProfileMap(d, serviceProfile)
@@ -63,7 +62,7 @@ func resourceFabricServiceProfileCreate(ctx context.Context, d *schema.ResourceD
 	createRequest := getServiceProfileRequestPayload(d)
 	sp, _, err := client.ServiceProfilesApi.CreateServiceProfile(ctx, createRequest)
 	if err != nil {
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	d.SetId(sp.Uuid)
 	return resourceFabricServiceProfileRead(ctx, d, meta)
@@ -142,9 +141,9 @@ func resourceFabricServiceProfileUpdate(ctx context.Context, d *schema.ResourceD
 		return diag.Errorf("Either timed out or errored out while fetching service profile for uuid %s and error %v", uuid, err)
 	}
 
-	_, res, err := client.ServiceProfilesApi.PutServiceProfileByUuid(ctx, updateRequest, strconv.FormatInt(eTag, 10), uuid)
+	_, _, err = client.ServiceProfilesApi.PutServiceProfileByUuid(ctx, updateRequest, strconv.FormatInt(eTag, 10), uuid)
 	if err != nil {
-		return diag.FromErr(fmt.Errorf("error response for the service profile update, response %v, error %v", res, err))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	updatedServiceProfile := v4.ServiceProfile{}
 	updatedServiceProfile, err = waitForServiceProfileUpdateCompletion(uuid, meta, ctx)
@@ -152,7 +151,7 @@ func resourceFabricServiceProfileUpdate(ctx context.Context, d *schema.ResourceD
 		if !strings.Contains(err.Error(), "500") {
 			d.SetId("")
 		}
-		return diag.FromErr(fmt.Errorf("errored while waiting for successful service profile update, response %v, error %v", res, err))
+		return diag.FromErr(fmt.Errorf("errored while waiting for successful service profile update, error %v", err))
 	}
 	d.SetId(updatedServiceProfile.Uuid)
 	return setFabricServiceProfileMap(d, updatedServiceProfile)
@@ -166,7 +165,7 @@ func waitForServiceProfileUpdateCompletion(uuid string, meta interface{}, ctx co
 			client := meta.(*config.Config).FabricClient
 			dbServiceProfile, _, err := client.ServiceProfilesApi.GetServiceProfileByUuid(ctx, uuid, nil)
 			if err != nil {
-				return "", "", err
+				return "", "", equinix_errors.FormatFabricError(err)
 			}
 			updatableState := "COMPLETED"
 			return dbServiceProfile, updatableState, nil
@@ -194,7 +193,7 @@ func waitForActiveServiceProfileAndPopulateETag(uuid string, meta interface{}, c
 			client := meta.(*config.Config).FabricClient
 			dbServiceProfile, res, err := client.ServiceProfilesApi.GetServiceProfileByUuid(ctx, uuid, nil)
 			if err != nil {
-				return nil, "", err
+				return nil, "", equinix_errors.FormatFabricError(err)
 			}
 
 			eTagStr := res.Header.Get("ETag")
@@ -229,9 +228,9 @@ func resourceFabricServiceProfileDelete(ctx context.Context, d *schema.ResourceD
 	if uuid == "" {
 		return diag.Errorf("No uuid found %v ", uuid)
 	}
-	_, resp, err := client.ServiceProfilesApi.DeleteServiceProfileByUuid(ctx, uuid)
+	_, _, err := client.ServiceProfilesApi.DeleteServiceProfileByUuid(ctx, uuid)
 	if err != nil {
-		return diag.FromErr(fmt.Errorf("error response for the Service Profile delete error %v and response %v", err, resp))
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 	return diags
 }
@@ -306,11 +305,9 @@ func resourceServiceProfilesSearchRequest(ctx context.Context, d *schema.Resourc
 	serviceProfiles, _, err := client.ServiceProfilesApi.SearchServiceProfiles(ctx, createServiceProfilesSearchRequest, viewPoint)
 	if err != nil {
 		if !strings.Contains(err.Error(), "500") {
-			error := v4.ModelError{}
 			d.SetId("")
-			log.Printf("Error Status Message: %s", error.ErrorMessage)
 		}
-		return diag.FromErr(err)
+		return diag.FromErr(equinix_errors.FormatFabricError(err))
 	}
 
 	if len(serviceProfiles.Data) != 1 {
diff --git a/internal/errors/errors.go b/internal/errors/errors.go
index 136951b..83309a0 100644
--- a/internal/errors/errors.go
+++ b/internal/errors/errors.go
@@ -1,6 +1,9 @@
 package errors
 
 import (
+	"fmt"
+	v4 "github.com/equinix-labs/fabric-go/fabric/v4"
+
 	"github.com/packethost/packngo"
 	"net/http"
 	"strings"
@@ -45,6 +48,43 @@ func convertToFriendlyError(errors Errors, resp *http.Response) error {
 	return er
 }
 
+func FormatFabricAdditionalInfo(additionalInfo []v4.PriceErrorAdditionalInfo) string {
+	var str []string
+	for _, addInfo := range additionalInfo {
+		property, reason := addInfo.Property, addInfo.Reason
+		if property != "" {
+			property = fmt.Sprintf("Property: %s, ", addInfo.Property)
+		}
+		if reason != "" {
+			reason = fmt.Sprintf("%s", addInfo.Reason)
+		} else {
+			reason = fmt.Sprintf("Reason: Not Provided")
+		}
+		str = append(str, fmt.Sprintf("{%s%s}", property, reason))
+	}
+	return strings.Join(str, ", ")
+}
+
+func FormatFabricError(err error) error {
+	// If in future one would like to do something with the response body of the API request
+	// The line below is how to access it with the SwaggerCodegen Fabric Go 12/7/2023 - thogarty
+	// errors = append(errors, string(err.(v4.GenericSwaggerError).Body()))
+	var errors []string
+	errors = append(errors, err.Error())
+	if fabricErrs, ok := err.(v4.GenericSwaggerError).Model().([]v4.ModelError); ok {
+		for _, e := range fabricErrs {
+			errors = append(errors, fmt.Sprintf("ErrorCode: %s", e.ErrorCode))
+			errors = append(errors, fmt.Sprintf("ErrorMessage: %s", e.ErrorMessage))
+			errors = append(errors, fmt.Sprintf("ErrorDetails: %s", e.Details))
+			if additionalInfo := FormatFabricAdditionalInfo(e.AdditionalInfo); additionalInfo != "" {
+				errors = append(errors, fmt.Sprintf("AdditionalInfo: [%s]", additionalInfo))
+			}
+		}
+	}
+
+	return fmt.Errorf("%s", strings.Join(errors, ", "))
+}
+
 func IsForbidden(err error) bool {
 	r, ok := err.(*packngo.ErrorResponse)
 	if ok && r.Response != nil {
