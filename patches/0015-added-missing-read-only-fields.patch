From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ocobleseqx <oscar.cobles@eu.equinix.com>
Date: Mon, 13 Nov 2023 23:41:13 +0100
Subject: [PATCH 15/30] added missing read only fields

Signed-off-by: ocobleseqx <oscar.cobles@eu.equinix.com>

diff --git a/equinix/fabric_mapping_helper.go b/equinix/fabric_mapping_helper.go
index 8d8bca7..5735913 100644
--- a/equinix/fabric_mapping_helper.go
+++ b/equinix/fabric_mapping_helper.go
@@ -619,7 +619,7 @@ func additionalInfoToTerra(additionalInfol []v4.ConnectionSideAdditionalInfo) []
 	return mappedadditionalInfol
 }
 
-func CloudRouterToTerra(cloudRouter *v4.CloudRouter) *schema.Set {
+func cloudRouterToTerra(cloudRouter *v4.CloudRouter) *schema.Set {
 	if cloudRouter == nil {
 		return nil
 	}
@@ -637,7 +637,7 @@ func CloudRouterToTerra(cloudRouter *v4.CloudRouter) *schema.Set {
 	return linkedProtocolSet
 }
 
-func CloudRouterPackageToTerra(packageType *v4.CloudRouterPackageType) *schema.Set {
+func cloudRouterPackageToTerra(packageType *v4.CloudRouterPackageType) *schema.Set {
 	packageTypes := []*v4.CloudRouterPackageType{packageType}
 	mappedPackages := make([]interface{}, len(packageTypes))
 	for i, packageType := range packageTypes {
@@ -652,6 +652,26 @@ func CloudRouterPackageToTerra(packageType *v4.CloudRouterPackageType) *schema.S
 	return packageSet
 }
 
+func orderToTerra(order *v4.Order) *schema.Set {
+	if order == nil {
+		return nil
+	}
+	orders := []*v4.Order{order}
+	mappedOrders := make([]interface{}, len(orders))
+	for _, order := range orders {
+		mappedOrder := make(map[string]interface{})
+		mappedOrder["purchase_order_number"] = order.PurchaseOrderNumber
+		mappedOrder["billing_tier"] = order.BillingTier
+		mappedOrder["order_id"] = order.OrderId
+		mappedOrder["order_number"] = order.OrderNumber
+		mappedOrders = append(mappedOrders, mappedOrder)
+	}
+	orderSet := schema.NewSet(
+		schema.HashResource(readOrderRes),
+		mappedOrders)
+	return orderSet
+}
+
 func projectToTerra(project *v4.Project) *schema.Set {
 	if project == nil {
 		return nil
@@ -729,7 +749,7 @@ func accessPointToTerra(accessPoint *v4.AccessPoint) *schema.Set {
 			mappedAccessPoint["profile"] = simplifiedServiceProfileToTerra(accessPoint.Profile)
 		}
 		if accessPoint.Router != nil {
-			mappedAccessPoint["router"] = CloudRouterToTerra(accessPoint.Router)
+			mappedAccessPoint["router"] = cloudRouterToTerra(accessPoint.Router)
 		}
 		if accessPoint.LinkProtocol != nil {
 			mappedAccessPoint["link_protocol"] = linkedProtocolToTerra(*accessPoint.LinkProtocol)
diff --git a/equinix/resource_fabric_cloud_router.go b/equinix/resource_fabric_cloud_router.go
index ed67ab8..e32f4bc 100644
--- a/equinix/resource_fabric_cloud_router.go
+++ b/equinix/resource_fabric_cloud_router.go
@@ -97,16 +97,21 @@ func resourceCloudRouterRead(ctx context.Context, d *schema.ResourceData, meta i
 func setCloudRouterMap(d *schema.ResourceData, fcr v4.CloudRouter) diag.Diagnostics {
 	diags := diag.Diagnostics{}
 	err := setMap(d, map[string]interface{}{
-		"name":          fcr.Name,
-		"href":          fcr.Href,
-		"type":          fcr.Type_,
-		"state":         fcr.State,
-		"package":       CloudRouterPackageToTerra(fcr.Package_),
-		"location":      locationCloudRouterToTerra(fcr.Location),
-		"change_log":    changeLogToTerra(fcr.ChangeLog),
-		"account":       accountCloudRouterToTerra(fcr.Account),
-		"notifications": notificationToTerra(fcr.Notifications),
-		"project":       projectToTerra(fcr.Project),
+		"name":                  fcr.Name,
+		"href":                  fcr.Href,
+		"type":                  fcr.Type_,
+		"state":                 fcr.State,
+		"package":               cloudRouterPackageToTerra(fcr.Package_),
+		"location":              locationCloudRouterToTerra(fcr.Location),
+		"change_log":            changeLogToTerra(fcr.ChangeLog),
+		"account":               accountCloudRouterToTerra(fcr.Account),
+		"notifications":         notificationToTerra(fcr.Notifications),
+		"project":               projectToTerra(fcr.Project),
+		"equinix_asn":           fcr.EquinixAsn,
+		"bgp_ipv4_routes_count": fcr.BgpIpv4RoutesCount,
+		"bgp_ipv6_routes_count": fcr.BgpIpv6RoutesCount,
+		"connections_count":     fcr.ConnectionsCount,
+		"order":                 orderToTerra(fcr.Order),
 	})
 	if err != nil {
 		return diag.FromErr(err)
diff --git a/equinix/resource_fabric_cloud_router_acc_test.go b/equinix/resource_fabric_cloud_router_acc_test.go
index a433982..cbd5743 100644
--- a/equinix/resource_fabric_cloud_router_acc_test.go
+++ b/equinix/resource_fabric_cloud_router_acc_test.go
@@ -20,7 +20,7 @@ func TestAccCloudRouterCreate(t *testing.T) {
 				Config: testAccCloudRouterCreateConfig("fg_tf_acc_test"),
 				Check: resource.ComposeTestCheckFunc(
 					resource.TestCheckResourceAttr(
-						"equinix_fabric_cloud_router.test", "name", fmt.Sprint("fg_tf_acc_test")),
+						"equinix_fabric_cloud_router.test", "name", "fg_tf_acc_test"),
 				),
 				ExpectNonEmptyPlan: false,
 			},
@@ -28,7 +28,7 @@ func TestAccCloudRouterCreate(t *testing.T) {
 				Config: testAccCloudRouterCreateConfig("fg_tf_acc_update"),
 				Check: resource.ComposeTestCheckFunc(
 					resource.TestCheckResourceAttr(
-						"equinix_fabric_cloud_router.test", "name", fmt.Sprint("fg_tf_acc_update")),
+						"equinix_fabric_cloud_router.test", "name", "fg_tf_acc_update"),
 				),
 				ExpectNonEmptyPlan: false,
 			},
@@ -59,22 +59,22 @@ func testAccCloudRouterCreateConfig(name string) string {
 			  metro_code  = "SV"
 			}
 			package{
-				  code = "PRO"
+				code = "PRO"
 			}
 			order{
 				purchase_order_number = "1-234567"
 			}
-			   notifications{
-				  type = "ALL"
-				  emails = [
+			notifications{
+				type = "ALL"
+				emails = [
 					"test@equinix.com",
 					"test1@equinix.com"
 				]
 			}
-				project{
-				   project_id = "776847000642406"
+			project{
+				project_id = "776847000642406"
 			}
-			  account {
+			account {
 				account_number = 203612
 			}
 		}`, name)
@@ -89,7 +89,7 @@ func TestAccCloudRouterRead(t *testing.T) {
 				Config: testAccCloudRouterReadConfig(),
 				Check: resource.ComposeTestCheckFunc(
 					resource.TestCheckResourceAttr(
-						"equinix_fabric_cloud_router.test", "name", fmt.Sprint("fcr_tf_acc_test")),
+						"equinix_fabric_cloud_router.test", "name", "fcr_tf_acc_test"),
 				),
 			},
 		},
@@ -97,7 +97,7 @@ func TestAccCloudRouterRead(t *testing.T) {
 }
 
 func testAccCloudRouterReadConfig() string {
-	return fmt.Sprint(`data "equinix_fabric_cloud_router" "test" {
+	return `data "equinix_fabric_cloud_router" "test" {
 		uuid = "3e91216d-526a-45d2-9029-0c8c8ba48b60"
-	}`)
+	}`
 }
