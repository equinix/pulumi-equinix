From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: srushti-patl <srpatel@equinix.com>
Date: Mon, 4 Dec 2023 22:41:51 -0800
Subject: [PATCH 33/51] fix: fixing variables and method names for
 additional_info parameter


diff --git a/equinix/fabric_mapping_helper.go b/equinix/fabric_mapping_helper.go
index d66948b..5f0b79f 100644
--- a/equinix/fabric_mapping_helper.go
+++ b/equinix/fabric_mapping_helper.go
@@ -28,7 +28,7 @@ func serviceTokenToFabric(serviceTokenRequest []interface{}) (v4.ServiceToken, e
 	return mappedST, nil
 }
 
-func additionalInfoToFabric(additionalInfoRequest []interface{}) []v4.ConnectionSideAdditionalInfo {
+func additionalInfoTerraToGo(additionalInfoRequest []interface{}) []v4.ConnectionSideAdditionalInfo {
 	var mappedaiArray []v4.ConnectionSideAdditionalInfo
 	for _, ai := range additionalInfoRequest {
 		aiMap := ai.(map[string]interface{})
diff --git a/equinix/resource_fabric_connection.go b/equinix/resource_fabric_connection.go
index 7746aec..269df58 100644
--- a/equinix/resource_fabric_connection.go
+++ b/equinix/resource_fabric_connection.go
@@ -51,8 +51,8 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 	aside := d.Get("a_side").(*schema.Set).List()
 	projectReq := d.Get("project").(*schema.Set).List()
 	project := projectToFabric(projectReq)
-	additionalInfo := d.Get("additional_info").([]interface{})
-	additionalinfoGoToTerraState := additionalInfoToFabric(additionalInfo)
+	additionalInfoTerraConfig := d.Get("additional_info").([]interface{})
+	additionalInfo := additionalInfoTerraToGo(additionalInfoTerraConfig)
 	connectionASide := v4.ConnectionSide{}
 	for _, as := range aside {
 		asideMap := as.(map[string]interface{})
@@ -72,7 +72,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			connectionASide = v4.ConnectionSide{ServiceToken: &mappedServiceToken}
 		}
 		if len(additionalInfoRequest) != 0 {
-			mappedAdditionalInfo := additionalInfoToFabric(additionalInfoRequest)
+			mappedAdditionalInfo := additionalInfoTerraToGo(additionalInfoRequest)
 			connectionASide = v4.ConnectionSide{AdditionalInfo: mappedAdditionalInfo}
 		}
 	}
@@ -96,7 +96,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 			connectionZSide = v4.ConnectionSide{ServiceToken: &mappedServiceToken}
 		}
 		if len(additionalInfoRequest) != 0 {
-			mappedAdditionalInfo := additionalInfoToFabric(additionalInfoRequest)
+			mappedAdditionalInfo := additionalInfoTerraToGo(additionalInfoRequest)
 			connectionZSide = v4.ConnectionSide{AdditionalInfo: mappedAdditionalInfo}
 		}
 	}
@@ -107,7 +107,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 		Order:          &order,
 		Notifications:  notifications,
 		Bandwidth:      int32(d.Get("bandwidth").(int)),
-		AdditionalInfo: additionalinfoGoToTerraState,
+		AdditionalInfo: additionalInfo,
 		Redundancy:     &red,
 		ASide:          &connectionASide,
 		ZSide:          &connectionZSide,
@@ -124,7 +124,7 @@ func resourceFabricConnectionCreate(ctx context.Context, d *schema.ResourceData,
 		return diag.Errorf("error waiting for connection (%s) to be created: %s", d.Id(), err)
 	}
 
-	awsSecrets, hasAWSSecrets := additionalInfoContainsAWSSecrets(additionalInfo)
+	awsSecrets, hasAWSSecrets := additionalInfoContainsAWSSecrets(additionalInfoTerraConfig)
 	if hasAWSSecrets {
 		patchChangeOperation := []v4.ConnectionChangeOperation{
 			{
