name: release
on:
  push:
    tags:
      - v*.*.*
env:
  PROVIDER: equinix
  DOTNETVERSION: 7.0.x
  GOVERSION: 1.21.x
  JAVAVERSION: "11"
  NODEVERSION: 16.x
  PYTHONVERSION: "3.9"
  # THIS GITHUB_TOKEN IS A REQUIREMENT TO BE ABLE TO WRITE TO GH RELEASES
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # IF YOU NEED TO PUBLISH A NPM PACKAGE THEN ENSURE A NPM_TOKEN SECRET IS SET
  # AND PUBLISH_NPM: TRUE. IF YOU WANT TO PUBLISH TO A PRIVATE NPM REGISTRY
  # THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  PUBLISH_NPM: true
  # NPM REGISTRY THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NPM_REGISTRY_URL: https://registry.npmjs.org
  # IF YOU NEED TO PUBLISH A NUGET PACKAGE THEN ENSURE AN NUGET_PUBLISH_KEY
  # SECRET IS SET AND PUBLISH_NUGET: TRUE. IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  NUGET_FEED_URL: https://api.nuget.org/v3/index.json
  PUBLISH_NUGET: true
  # IF YOU NEED TO PUBLISH A PYPI PACKAGE THEN ENSURE AN PYPI_API_TOKEN
  # SECRET IS SET AND PUBLISH_PYPI: TRUE. IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  # PYPI REGISTRY THEN ENSURE THE PYPI_REPOSITORY_URL IS SET. IF YOU ARE USING AN API_TOKEN THEN
  # YOU DO NOT NEED TO CHANGE THE PYPI_USERNAME (__token__) , IF YOU ARE USING PASSWORD AUTHENTICATION THEN YOU WILL
  # NEED TO CHANGE TO USE THE CORRECT PASSWORD
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PYPI_USERNAME: "__token__"
  PYPI_REPOSITORY_URL: ""
  PUBLISH_PYPI: true
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PUBLISH_NRM: true
jobs:
  publish_binary:
    name: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Build tfgen & provider binaries
        run: make provider
      - name: Unit-test provider code
        run: make test_provider
      - name: Tar provider binaries
        run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace }}/bin/ pulumi-resource-${{ env.PROVIDER }}
          pulumi-tfgen-${{ env.PROVIDER }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz
          retention-days: 30
      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)" >> $GITHUB_ENV
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: -p 3 release --rm-dist --timeout 150m0s
          version: latest
    strategy:
      fail-fast: true
  publish_sdk:
    name: Publish SDKs
    runs-on: ubuntu-latest
    needs: publish_binary
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2.0.0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: ${{env.NPM_REGISTRY_URL}}
      - name: Setup DotNet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVAVERSION }}
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          # Pin to known good version until #2262 is resolved
          gradle-version: "7.6"
      - name: Download provider + tfgen binaries
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: >-
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace}}/bin

          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
      - name: Install plugins
        run: make install_plugins
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Set PACKAGE_VERSION to Env
        run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
          "$GITHUB_ENV"
      - name: Build SDK
        run: make build_${{ matrix.language }}
      - name: Check worktree clean
        run: |
          git update-index -q --refresh
          if ! git diff-files --quiet; then
              >&2 echo "error: working tree is not clean, aborting!"
              git status
              git diff
              exit 1
          fi
      - name: Compress SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }} .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
        # TODO replace all below publish package steps with
        # - name: Publish SDKs
        #   uses: pulumi/pulumi-package-publisher@v0.0.12
      - if: ${{ matrix.language == 'python' && env.PUBLISH_PYPI == 'true' }}
        name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ env.PYPI_USERNAME }}
          password: ${{ env.PYPI_PASSWORD }}
          packages_dir: ${{github.workspace}}/sdk/python/bin/dist
      - if: ${{ matrix.language == 'nodejs' && env.PUBLISH_NPM == 'true' }}
        uses: JS-DevTools/npm-publish@v1
        with:
          access: "public"
          token: ${{ env.NPM_TOKEN }}
          package: ${{github.workspace}}/sdk/nodejs/bin/package.json
      - if: ${{ matrix.language == 'dotnet' && env.PUBLISH_NUGET == 'true' }}
        name: publish nuget package
        run: |
          dotnet nuget push ${{github.workspace}}/sdk/dotnet/bin/Debug/*.nupkg -s ${{ env.NUGET_FEED_URL }} -k ${{ env.NUGET_PUBLISH_KEY }}
          echo "done publishing packages"
      - if: ${{ matrix.language == 'java' && env.PUBLISH_NRM == 'true' }}
        name: Set PACKAGE_VERSION to Env for Java SDK
        run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
          $GITHUB_ENV
      - if: ${{ matrix.language == 'java' && env.PUBLISH_NRM == 'true' }}
        name: Publish Java SDK
        uses: gradle/gradle-build-action@9bca466e2722baf9e77b4f929bbe0af18848791f
        with:
          arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository
          build-root-directory: ./sdk/java
          gradle-version: 7.4.1
    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - go
          - java
